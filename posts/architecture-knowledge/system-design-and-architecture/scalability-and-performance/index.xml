<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Performance vs Scalability on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/posts/architecture-knowledge/system-design-and-architecture/scalability-and-performance/</link>
    <description>Recent content in Performance vs Scalability on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.5</generator>
    <language>en</language>
    <lastBuildDate>Thu, 03 Apr 2025 15:32:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/posts/architecture-knowledge/system-design-and-architecture/scalability-and-performance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Latency vs Throughput</title>
      <link>https://buenhyden.github.io/posts/architecture-knowledge/system-design-and-architecture/scalability-and-performance/latency-vs-throughput/</link>
      <pubDate>Tue, 18 Feb 2025 05:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/architecture-knowledge/system-design-and-architecture/scalability-and-performance/latency-vs-throughput/</guid>
      <description>지연시간 (Latency) 은 요청이 시작된 시점부터 응답을 받을 때까지 걸리는 시간을 의미하며, 처리량 (Throughput) 은 시스템이 단위 시간당 처리할 수 있는 작업의 양을 나타낸다. 이 두 개념은 시스템 성능의 핵심 지표로, 서로 상충관계 (trade-off) 를 가지며 시스템 설계에서 균형 있는 최적화가 중요하다. 적절한 지연시간과 처리량 관리는 효율적인 시스템 설계의 기반이 된다.</description>
    </item>
    <item>
      <title>Horizontal vs. Vertical Scaling</title>
      <link>https://buenhyden.github.io/posts/architecture-knowledge/system-design-and-architecture/scalability-and-performance/horizontal-vs-vertical-scaling/</link>
      <pubDate>Thu, 03 Apr 2025 15:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/architecture-knowledge/system-design-and-architecture/scalability-and-performance/horizontal-vs-vertical-scaling/</guid>
      <description>수평적 확장 (Horizontal Scaling) 은 더 많은 서버나 노드를 추가하여 작업 부하를 분산시키는 방식이고, 수직적 확장 (Vertical Scaling) 은 기존 서버의 성능과 용량을 향상시키는 방식이다. 두 접근법은 각각 다른 장단점을 가지며, 적용 시나리오에 따라 선택 기준이 달라집니다. 수평적 확장은 분산 시스템에 적합하고, 수직적 확장은 단일 시스템 성능 향상에 효과적이다.</description>
    </item>
  </channel>
</rss>
