<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Messaging Systems on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/</link>
    <description>Recent content in Messaging Systems on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.8</generator>
    <language>en</language>
    <lastBuildDate>Mon, 10 Mar 2025 02:55:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Event Brokers</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/fundamentals/event-brokers/</link>
      <pubDate>Fri, 25 Oct 2024 06:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/fundamentals/event-brokers/</guid>
      <description>Event Broker는 이벤트 생성자(Producer)와 이벤트 소비자(Consumer) 사이에서 중개자 역할을 수행한다.</description>
    </item>
    <item>
      <title>Event and Message Brokers</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/fundamentals/event-and-message-brokers/</link>
      <pubDate>Mon, 10 Mar 2025 02:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/fundamentals/event-and-message-brokers/</guid>
      <description>분산 시스템에서 애플리케이션 간의 효율적인 통신은 현대 소프트웨어 아키텍처의 중요한 측면이다. 이러한 통신을 관리하는 핵심 컴포넌트가 바로 메시지 브로커(Message Broker)와 이벤트 브로커(Event Broker)이다.</description>
    </item>
    <item>
      <title>Dead Letter Queue</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/message-channels/dead-letter-queue/</link>
      <pubDate>Fri, 15 Nov 2024 12:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/message-channels/dead-letter-queue/</guid>
      <description>Dead Letter Queue는 메시징 시스템에서 정상적으로 처리되지 못한 메시지를 저장하는 특별한 큐</description>
    </item>
    <item>
      <title>Competing Consumers</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/message-endpoints/competing-consumers/</link>
      <pubDate>Fri, 15 Nov 2024 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/message-endpoints/competing-consumers/</guid>
      <description>여러 소비자(Consumer)가 동일한 메시지 채널에서 동시에 메시지를 처리하는 방식이다. 이 패턴을 통해 시스템의 처리량을 높이고 확장성과 가용성을 개선할 수 있다.</description>
    </item>
    <item>
      <title>Message Filter</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/message-routing/message-filter/</link>
      <pubDate>Fri, 15 Nov 2024 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/message-routing/message-filter/</guid>
      <description>Message Filter는 특정 기준에 따라 원하지 않는 메시지를 제거하고 원하는 메시지만 통과시키는 패턴</description>
    </item>
    <item>
      <title>Message Router</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/message-routing/message-router/</link>
      <pubDate>Fri, 15 Nov 2024 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/message-routing/message-router/</guid>
      <description>Message Router는 메시지의 내용이나 메타데이터를 기반으로 메시지를 적절한 목적지로 전달하는 컴포넌트이다. 이는 메시지의 흐름을 제어하고 시스템의 유연성을 높이는 데 중요한 역할을 한다.</description>
    </item>
    <item>
      <title>Idempotent Consumer</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/message-endpoints/idempotent-consumer/</link>
      <pubDate>Fri, 15 Nov 2024 11:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/message-endpoints/idempotent-consumer/</guid>
      <description>Idempotent Consumer는 동일한 메시지를 여러 번 처리하더라도 시스템의 상태가 변하지 않도록 설계된 소비자를 의미한다</description>
    </item>
    <item>
      <title>Producer-Consumer Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/message-endpoints/producer-consumer-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 01:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/message-endpoints/producer-consumer-pattern/</guid>
      <description>이 패턴은 데이터를 생성하는 프로듀서(Producer)와 데이터를 소비하는 컨슈머(Consumer) 사이의 작업을 분리하여 효율적인 데이터 처리를 가능하게 한다.</description>
    </item>
    <item>
      <title>Event-Bus Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/fundamentals/event-bus-pattern/</link>
      <pubDate>Thu, 26 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/integration/messaging-systems/fundamentals/event-bus-pattern/</guid>
      <description>소프트웨어 시스템의 컴포넌트 간 통신을 단순화하고 유연성을 높이는 아키텍처 패턴</description>
    </item>
  </channel>
</rss>
