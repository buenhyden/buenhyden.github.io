<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Quality Assurance (QA) on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance/</link>
    <description>Recent content in Quality Assurance (QA) on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.7</generator>
    <language>en</language>
    <lastBuildDate>Mon, 10 Mar 2025 13:53:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/posts/software-engineering/quality-assurance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>System Test vs End-to-End Test</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance/system-test-vs-end-to-end-test/</link>
      <pubDate>Tue, 05 Nov 2024 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance/system-test-vs-end-to-end-test/</guid>
      <description>System Testing과 End-to-End Testing은 소프트웨어 테스팅 과정에서 사용되는 두 가지 중요한 테스트 방법이다. 이 두 방법은 소프트웨어의 품질을 보장하기 위해 사용되지만, 그 범위와 목적에 차이가 있다.</description>
    </item>
    <item>
      <title>동적테스트(Dynamic Test) vs 정적테스트(Static Test)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance/dynamic-test-vs-static-test/</link>
      <pubDate>Tue, 05 Nov 2024 02:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance/dynamic-test-vs-static-test/</guid>
      <description>소프트웨어 테스팅은 프로그램의 품질을 확인하고 오류를 찾아내는 과정.</description>
    </item>
    <item>
      <title>QA vs QC vs Testing</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance/quality-assurance-vs-quality-control-vs-testing/</link>
      <pubDate>Tue, 05 Nov 2024 07:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance/quality-assurance-vs-quality-control-vs-testing/</guid>
      <description>Quality Assurance (QA)는 제품이나 서비스의 품질을 보장하기 위한 계획적이고 체계적인 활동들의 집합이며, Quality Control (QC)는 개발된 제품이나 서비스가 정해진 품질 기준을 충족하는지 확인하는 활동이고, Testing은 소프트웨어가 예상대로 작동하는지 확인하는 구체적인 실행 활동이다.</description>
    </item>
    <item>
      <title>Postman</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance/testing-tools-and-frameworks/api-testing/postman/</link>
      <pubDate>Mon, 10 Mar 2025 13:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance/testing-tools-and-frameworks/api-testing/postman/</guid>
      <description>Postman은 API(Application Programming Interface) 개발, 테스트, 문서화 및 협업을 위한 종합적인 플랫폼이다.</description>
    </item>
    <item>
      <title>Black-box Test and White-box Test</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance/fundamentals/testing-fundamentals/testing-approaches/black-box-test-and-white-box-test/</link>
      <pubDate>Tue, 05 Nov 2024 02:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance/fundamentals/testing-fundamentals/testing-approaches/black-box-test-and-white-box-test/</guid>
      <description>Black-box Testing(블랙박스 테스팅)은 소프트웨어의 내부 구조나 동작 원리를 모르는 상태에서 진행하는 테스트 방식이다. 반면 White-box Testing(화이트박스 테스팅)은 소프트웨어의 내부 로직을 알고 있는 상태에서 진행하는 테스트이다.</description>
    </item>
    <item>
      <title>시스템 테스트 (System test)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance/fundamentals/testing-fundamentals/testing-levels/system-test/</link>
      <pubDate>Mon, 04 Nov 2024 06:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance/fundamentals/testing-fundamentals/testing-levels/system-test/</guid>
      <description>개발된 소프트웨어 시스템 전체를 검사하는 과정으로, 모든 개별 모듈과 구성 요소가 통합된 후 전체 시스템이 예상대로 작동하는지 확인한다.</description>
    </item>
    <item>
      <title>기본 테스팅 (Fundamental Testing)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance/fundamental-testing/</link>
      <pubDate>Mon, 04 Nov 2024 04:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance/fundamental-testing/</guid>
      <description>소프트웨어 테스팅의 기본적인 프로세스와 원칙을 의미한다.</description>
    </item>
    <item>
      <title>통합 테스트 (Integration Test)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance/fundamentals/testing-fundamentals/testing-levels/integration-test/</link>
      <pubDate>Mon, 04 Nov 2024 02:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance/fundamentals/testing-fundamentals/testing-levels/integration-test/</guid>
      <description>통합 테스트는 소프트웨어 개발 과정에서 개별적으로 테스트된 모듈들을 결합하여 전체 시스템으로서의 상호작용을 검증하는 과정이다</description>
    </item>
    <item>
      <title>사용성 테스트 (Usability Test)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance/fundamentals/testing-fundamentals/testing-types/non-functional-testing/usability-test/</link>
      <pubDate>Sun, 03 Nov 2024 14:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance/fundamentals/testing-fundamentals/testing-types/non-functional-testing/usability-test/</guid>
      <description>사용성 테스트는 제품이나 서비스를 실제 사용자가 사용해보면서 그 과정을 관찰하고 분석하는 테스트 방법이다.</description>
    </item>
    <item>
      <title>보안 테스트 (Security Test)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance/fundamentals/testing-fundamentals/testing-types/non-functional-testing/security-test/security-test/</link>
      <pubDate>Sun, 03 Nov 2024 05:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance/fundamentals/testing-fundamentals/testing-types/non-functional-testing/security-test/security-test/</guid>
      <description>소프트웨어 시스템의 보안성을 평가하기 위한 일련의 활동</description>
    </item>
    <item>
      <title>전문화된 테스팅 (Specialized Testing)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance/specialized-testing/</link>
      <pubDate>Sun, 03 Nov 2024 04:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance/specialized-testing/</guid>
      <description>Specialized Testing은 소프트웨어 테스팅의 한 분야로, 특정 영역이나 기능에 초점을 맞춘 심층적인 테스트 방식이다.</description>
    </item>
    <item>
      <title>엔드투엔드 테스트(End-to-End Test, E2E Test)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance/end-to-end-test/</link>
      <pubDate>Sun, 03 Nov 2024 02:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance/end-to-end-test/</guid>
      <description>이는 사용자의 관점에서 전체 애플리케이션의 흐름을 테스트하여 모든 구성 요소가 올바르게 작동하는지 확인한다.</description>
    </item>
  </channel>
</rss>
