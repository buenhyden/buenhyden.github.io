<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Black-box Testing</title><link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/</link><description>Recent content in Black-box Testing on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Scenario Testing vs Use Case Testing</title><link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/scenario-testing-vs-use-case-testing/</link><pubDate>Mon, 16 Dec 2024 17:12:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/scenario-testing-vs-use-case-testing/</guid><description>
&lt;h2>Scenario Testing Vs Use Case Testing&lt;/h2>&lt;p>Scenario Testing과 Use Case Testing은 소프트웨어 테스팅 기법으로, 사용자 관점에서 시스템의 기능과 동작을 검증하는 데 사용된다.&lt;br>
두 기법은 유사한 점이 있지만, 접근 방식과 세부 사항에서 차이가 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>비교 항목&lt;/th>
&lt;th>Scenario Testing&lt;/th>
&lt;th>Use Case Testing&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>실제 사용자의 행동과 상황을 기반으로 한 현실적인 시나리오를 통해 시스템을 테스트하는 방법&lt;/td>
&lt;td>사용자와 시스템 간의 상호작용을 구조화된 형식으로 정의하고 테스트하는 방법&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 관점&lt;/td>
&lt;td>사용자 중심적이며, 실제 업무 상황과 맥락을 중요시함&lt;/td>
&lt;td>시스템 중심적이며, 기능적 정확성과 완전성을 중요시함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>목적&lt;/td>
&lt;td>실제 사용 환경에서의 시스템 동작을 검증&lt;/td>
&lt;td>시스템의 기능적 요구사항을 검증&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구조화 정도&lt;/td>
&lt;td>자유로운 형식으로, 스토리텔링 방식의 서술적 구조&lt;/td>
&lt;td>체계적이고 형식적인 구조 (기본 흐름, 대체 흐름, 예외 흐름)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 범위&lt;/td>
&lt;td>여러 기능이나 프로세스를 걸쳐 있는 end-to-end 시나리오&lt;/td>
&lt;td>주로 단일 기능이나 프로세스에 초점&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 설계&lt;/td>
&lt;td>자유로운 형식으로 다양한 &amp;ldquo;가정&amp;rdquo; 상황을 포함&lt;/td>
&lt;td>유스케이스 문서의 기본 흐름과 대체 흐름을 따름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 케이스 도출&lt;/td>
&lt;td>다양한 소스(사용자 피드백, 시장 조사 등)에서 시나리오 개발&lt;/td>
&lt;td>유스케이스 문서에서 직접 테스트 케이스를 도출&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>상황 맥락&lt;/td>
&lt;td>사용자의 동기, 감정, 환경 등 풍부한 맥락 정보 포함&lt;/td>
&lt;td>객관적이고 기술적인 상호작용 위주의 맥락&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>문서화 방식&lt;/td>
&lt;td>서술적이고 이야기 형식의 문서화&lt;/td>
&lt;td>구조화되고 단계별로 정형화된 문서화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>적합한 상황&lt;/td>
&lt;td>사용자 경험이 중요한 애플리케이션, 복잡한 업무 프로세스&lt;/td>
&lt;td>명확한 기능 요구사항이 있는 시스템, 트랜잭션 기반 애플리케이션&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 설계 난이도&lt;/td>
&lt;td>실제 사용자 경험에 대한 이해가 필요하며, 창의적인 시나리오 도출이 중요&lt;/td>
&lt;td>체계적인 분석과 문서화 능력이 필요하며, 기술적 이해가 중요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>유지보수성&lt;/td>
&lt;td>시나리오 수정이 비교적 자유롭고 유연함&lt;/td>
&lt;td>구조화된 형식으로 인해 변경 관리가 체계적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>재사용성&lt;/td>
&lt;td>특정 상황에 특화된 시나리오로 재사용이 제한적&lt;/td>
&lt;td>표준화된 형식으로 인해 재사용이 용이&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>커버리지 측정&lt;/td>
&lt;td>시나리오 기반의 정성적 측정이 주로 이루어짐&lt;/td>
&lt;td>흐름 기반의 정량적 측정이 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 자동화&lt;/td>
&lt;td>복잡한 시나리오로 인해 자동화가 어려울 수 있음&lt;/td>
&lt;td>구조화된 형식으로 인해 자동화가 비교적 용이&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>장점&lt;/td>
&lt;td>예상치 못한 오류 발견에 효과적, 사용자 경험 개선에 도움&lt;/td>
&lt;td>요구사항 검증에 효과적, 체계적인 테스트 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>단점&lt;/td>
&lt;td>모든 가능한 시나리오를 고려하기 어려움&lt;/td>
&lt;td>유스케이스 문서의 품질에 의존적&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>실제 프로젝트에서는 이 두 방법을 상호 보완적으로 사용하는 것이 효과적이다.&lt;br>
예를 들어, Use Case Testing으로 기본적인 기능 정확성을 검증하고, Scenario Testing으로 실제 사용 환경에서의 사용성과 통합성을 검증하는 방식으로 활용할 수 있다.&lt;/p>
&lt;p>두 테스팅 방법의 효과적인 활용을 위해서는, 프로젝트의 특성과 목표를 고려하여 적절한 비중으로 조합하는 것이 중요하다.&lt;br>
또한, 각 방법의 장단점을 이해하고, 테스트 전략 수립 시 이를 고려하여 효율적인 테스트 계획을 수립하는 것이 바람직하다&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Experience-based Test</title><link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/experience-based-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/experience-based-test/</guid><description/></item><item><title>Specification-based Test</title><link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/</guid><description/></item></channel></rss>