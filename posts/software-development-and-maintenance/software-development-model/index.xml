<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>소프트웨어 개발 프로세스 (Software Development Process) :: hyunyoun's Blog</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model.html</link><description>소프트웨어를 계획, 개발, 테스트 및 배포하는 전체 과정을 설명하는 체계적인 프로세스</description><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Mon, 30 Sep 2024 00:49:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/index.xml" rel="self" type="application/rss+xml"/><item><title>Concurrent Engineering Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/concurrent-engineering-model.html</link><pubDate>Mon, 30 Sep 2024 00:49:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/concurrent-engineering-model.html</guid><description>소프트웨어 개발 프로세스를 최적화하고 효율성을 높이기 위한 접근 방식</description></item><item><title>Domain-Driven Development</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/domain-driven-development.html</link><pubDate>Mon, 30 Sep 2024 00:49:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/domain-driven-development.html</guid><description>복잡한 소프트웨어를 개발할 때 비즈니스 도메인을 중심으로 설계와 개발을 진행하는 방법론</description></item><item><title>Test-Driven Development</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/test-driven-development.html</link><pubDate>Mon, 30 Sep 2024 00:49:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/test-driven-development.html</guid><description>실제 코드를 작성하기 전에 테스트 코드를 먼저 작성하는 접근 방식</description></item><item><title>Iterative Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/iterative-model.html</link><pubDate>Mon, 30 Sep 2024 00:47:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/iterative-model.html</guid><description>전체 시스템을 여러 개의 작은 부분으로 나누어 반복적으로 개발하고 개선하는 방법</description></item><item><title>Spiral Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/spiral-model.html</link><pubDate>Mon, 30 Sep 2024 00:47:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/spiral-model.html</guid><description>위험 분석을 중심으로 반복적인 개발을 수행하며, 각 반복 주기마다 위험 요소를 평가하고 대응한다.</description></item><item><title>Formal Methods Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/formal-methods-model.html</link><pubDate>Sun, 29 Sep 2024 00:49:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/formal-methods-model.html</guid><description>소프트웨어 개발에서 수학적 기법을 사용하여 시스템을 명세, 개발, 분석 및 검증하는 엄격한 접근 방식</description></item><item><title>Incremental Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/incremental-model.html</link><pubDate>Sun, 29 Sep 2024 00:49:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/incremental-model.html</guid><description>전체 시스템을 여러 개의 작은 부분(증분)으로 나누어 순차적으로 개발하고 제공하는 접근 방식.</description></item><item><title>행동 주도 개발 (Behavior-Driven Development, BDD)</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/behavior-driven-development.html</link><pubDate>Sun, 29 Sep 2024 00:49:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/behavior-driven-development.html</guid><description>테스트 주도 개발(TDD)에서 파생된 소프트웨어 개발 방법론으로, 사용자의 행동과 비즈니스 가치에 초점을 맞춘다.</description></item><item><title>DevOps Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/devops-model.html</link><pubDate>Sun, 29 Sep 2024 00:48:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/devops-model.html</guid><description>소프트웨어 개발(Development)과 IT 운영(Operations)을 통합하는 방법론으로, 소프트웨어 개발 프로세스를 개선하고 더 빠르고 안정적인 제품 배포를 가능하게 한다.</description></item><item><title>Prototyping Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/prototyping-model.html</link><pubDate>Sun, 29 Sep 2024 00:48:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/prototyping-model.html</guid><description>최종 제품의 초기 버전 또는 모형을 만들어 사용자의 피드백을 받고 요구사항을 명확히 하는 방법.</description></item><item><title>Rapid Application Development</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/rapid-application-development.html</link><pubDate>Sun, 29 Sep 2024 00:48:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/rapid-application-development.html</guid><description>빠른 프로토타이핑과 반복적인 개발을 통해 신속하게 애플리케이션을 구축하는 접근 방식</description></item><item><title>Agile Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/agile-model.html</link><pubDate>Sun, 29 Sep 2024 00:47:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/agile-model.html</guid><description>소프트웨어 개발에서 사용되는 반복적이고 점진적인 접근 방식으로  빠르게 변화하는 요구사항에 유연하게 대응하며 고객 만족을 최우선으로 한다.</description></item><item><title>V Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/v-model.html</link><pubDate>Sun, 29 Sep 2024 00:47:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/v-model.html</guid><description>개발 단계와 테스트 단계를 병행하여 진행하는 검증(Verification)과 확인(Validation) 중심의 접근 방식이다.</description></item><item><title>Waterfall Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/waterfall-model.html</link><pubDate>Sun, 29 Sep 2024 00:46:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/waterfall-model.html</guid><description>각 단계를 순차적으로 진행하며, 이전 단계가 완료되어야 다음 단계로 넘어가는 전통적인 모델.</description></item></channel></rss>