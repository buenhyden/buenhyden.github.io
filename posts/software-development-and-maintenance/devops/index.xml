<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – DevOps</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/</link><description>Recent content in DevOps on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 28 Sep 2024 06:26:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/posts/software-development-and-maintenance/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Observability</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability/</link><pubDate>Sat, 16 Nov 2024 02:21:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability/</guid><description>
&lt;h2>Observability&lt;/h2>&lt;p>애플리케이션과 인프라의 내부 상태에 대한 실시간 통찰력을 얻는 방법&lt;br>
Observability는 세 가지 핵심 요소로 구성된다.&lt;/p>
&lt;h3>핵심 요소&lt;/h3>&lt;p>Observability(관측가능성)에 대해 체계적으로 설명해드리겠습니다. 이 개념을 우선 일상적인 예시로 이해해보면, 자동차의 대시보드와 비슷합니다. 운전자가 속도계, 연료 게이지, 엔진 온도 등을 통해 차량의 상태를 실시간으로 파악하는 것처럼, Observability는 시스템의 내부 상태를 외부에서 이해할 수 있게 해줍니다.&lt;/p>
&lt;p>Observability의 기본 개념을 살펴보겠습니다. 이는 시스템의 내부 상태를 외부 출력을 통해 이해하고 추론할 수 있는 능력을 의미합니다. DevOps에서 Observability는 세 가지 핵심 요소로 구성됩니다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Logs (로그):&lt;br>
로그는 시스템에서 발생하는 이벤트의 타임스탬프가 찍힌 기록입니다.
예를 들어 다음과 같은 로그 구조를 가질 수 있습니다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 구조화된 로깅 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">logger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">winston&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createLogger&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">format&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">winston&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">defaultMeta&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;user-service&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">transports&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">new&lt;/span> &lt;span class="nx">winston&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">transports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">File&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">filename&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;error.log&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">level&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;error&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">format&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">winston&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">combine&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">winston&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">timestamp&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">winston&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">logger&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;사용자 인증 실패&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">userId&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">attemptTime&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">errorCode&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;AUTH_001&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Metrics (메트릭):&lt;br>
메트릭스는 시스템의 성능과 동작을 수치화한 측정값입니다.
Prometheus와 같은 도구를 사용하여 다음과 같이 구현할 수 있습니다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">client&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;prom-client&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Counter&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;http_requests_total&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">help&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;전체 HTTP 요청 수&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">labelNames&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;method&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;path&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;status&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">use&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;finish&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">counter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">inc&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">method&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">method&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">path&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">statusCode&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">next&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Traces (트레이스):&lt;br>
트레이스는 분산 시스템에서 요청의 전체 여정을 추적합니다.
OpenTelemetry를 사용한 예시입니다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">trace&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;@opentelemetry/api&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">tracer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">trace&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getTracer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example-service&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">processOrder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">orderId&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">span&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">tracer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startSpan&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;process-order&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 주문 처리 로직
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">validateOrder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">orderId&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">processPayment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">orderId&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">updateInventory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">orderId&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">span&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>중요성&lt;/h3>&lt;ul>
&lt;li>복잡한 분산 시스템에서 문제 해결 및 성능 최적화에 필수적입니다.&lt;/li>
&lt;li>지속적인 배포와 빠른 개발 환경에서 시스템 동작을 이해하는 데 도움을 줍니다.&lt;/li>
&lt;li>개발자의 효율성을 높이고 다운타임을 줄여 사용자 경험을 개선합니다.&lt;/li>
&lt;/ul>
&lt;h3>이점&lt;/h3>&lt;ul>
&lt;li>시스템 성능 향상: 성능 병목현상을 식별하고 해결할 수 있습니다.&lt;/li>
&lt;li>팀 협업 강화: 모든 팀원이 시스템 상태를 파악할 수 있습니다.&lt;/li>
&lt;li>선제적 문제 해결: 실시간 모니터링으로 문제를 사전에 감지합니다.&lt;/li>
&lt;li>데이터 기반 의사결정: 실제 사용 및 성능 메트릭을 기반으로 개선 사항을 결정합니다.&lt;/li>
&lt;li>보안 및 규정 준수 강화: 민감한 데이터 보호에 도움이 됩니다.&lt;/li>
&lt;/ul>
&lt;h3>구현하기 위한 주요 전략&lt;/h3>&lt;ol>
&lt;li>
&lt;p>데이터 수집 전략:&lt;br>
시스템의 다양한 계층에서 데이터를 수집해야 합니다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 애플리케이션 성능 모니터링 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">apm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;elastic-apm-node&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">apm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">serviceName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;my-service&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">secretToken&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;xxxx&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">serverUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;http://localhost:8200&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">transaction&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">apm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startTransaction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;web-transaction&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 비즈니스 로직
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">transaction&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>데이터 시각화:&lt;br>
수집된 데이터를 의미 있게 표현해야 합니다. Grafana와 같은 도구를 사용할 수 있습니다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># Grafana 대시보드 설정 예시&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">dashboard&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">panels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;HTTP 요청 응답 시간&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;graph&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">datasource&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Prometheus&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">targets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">expr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;rate(http_request_duration_seconds_sum[5m])&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>알림 설정:&lt;br>
문제가 발생했을 때 즉시 대응할 수 있도록 알림을 구성해야 합니다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 알림 설정 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">alertManager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./alertManager&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">alertManager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createRule&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;high-error-rate&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">condition&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">metrics&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">metrics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">errorRate&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mf">0.05&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">duration&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;5m&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">actions&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;notify-slack&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;create-incident&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>실제 구현에서 고려해야 할 사항들&lt;/h3>&lt;ol>
&lt;li>
&lt;p>데이터 보존 정책:&lt;/p>
&lt;ul>
&lt;li>로그 데이터의 보관 기간 설정&lt;/li>
&lt;li>메트릭 데이터의 해상도 조정&lt;/li>
&lt;li>스토리지 비용과 성능 밸런싱&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 영향:&lt;/p>
&lt;ul>
&lt;li>모니터링 오버헤드 최소화&lt;/li>
&lt;li>샘플링 전략 수립&lt;/li>
&lt;li>리소스 사용량 모니터링&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>보안 고려사항:&lt;/p>
&lt;ul>
&lt;li>민감한 데이터 필터링&lt;/li>
&lt;li>접근 권한 관리&lt;/li>
&lt;li>감사 로그 유지&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2>Observability와 Monitoring의 비교 분석&lt;/h2>&lt;p>근본적인 차이는 접근 방식에 있다.&lt;br>
Monitoring은 &amp;ldquo;무엇을 관찰할 것인가&amp;quot;를 미리 정의하고 그것을 지속적으로 관찰하는 반면, Observability는 &amp;ldquo;시스템의 모든 상태를 이해할 수 있게 하자&amp;quot;는 더 포괄적인 접근을 취한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>항목&lt;/th>
&lt;th>Monitoring&lt;/th>
&lt;th>Observability&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>목적&lt;/td>
&lt;td>알려진 문제의 감지와 알림&lt;/td>
&lt;td>알려지지 않은 문제의 원인 파악과 시스템 이해&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>접근 방식&lt;/td>
&lt;td>사전 정의된 메트릭과 임계값 기반&lt;/td>
&lt;td>시스템의 전체적인 상태와 행동 분석&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 수집&lt;/td>
&lt;td>정해진 메트릭에 대한 선택적 수집&lt;/td>
&lt;td>가능한 많은 데이터의 포괄적 수집&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>질문 유형&lt;/td>
&lt;td>&amp;ldquo;시스템이 다운되었나?&amp;rdquo; &amp;ldquo;응답 시간이 늦나?&amp;rdquo;&lt;/td>
&lt;td>&amp;ldquo;왜 이 문제가 발생했는가?&amp;rdquo; &amp;ldquo;어떤 조건에서 발생하는가?&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 분석&lt;/td>
&lt;td>정적이고 미리 정의된 대시보드와 알림&lt;/td>
&lt;td>동적이고 탐색적인 분석과 상관관계 파악&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>문제 해결 방식&lt;/td>
&lt;td>알려진 문제에 대한 사전 정의된 대응&lt;/td>
&lt;td>새로운 문제에 대한 상황별 분석과 대응&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>도구 특성&lt;/td>
&lt;td>고정된 대시보드, 알림 시스템&lt;/td>
&lt;td>유연한 쿼리, 추적, 분석 도구&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>범위&lt;/td>
&lt;td>특정 시스템이나 컴포넌트 중심&lt;/td>
&lt;td>전체 시스템과 서비스 간 상호작용 포함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 저장&lt;/td>
&lt;td>집계된 메트릭 위주&lt;/td>
&lt;td>원시 데이터 포함 상세 정보&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>시간 관점&lt;/td>
&lt;td>현재 상태와 정해진 기간의 추이&lt;/td>
&lt;td>과거 데이터를 포함한 장기적 분석&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>미리 정의된 범위 내에서 확장&lt;/td>
&lt;td>필요에 따라 새로운 관점과 분석 추가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>투자 비용&lt;/td>
&lt;td>상대적으로 낮음&lt;/td>
&lt;td>상대적으로 높음 (더 많은 데이터 저장과 처리 필요)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>운영 복잡도&lt;/td>
&lt;td>비교적 단순&lt;/td>
&lt;td>더 복잡하고 전문성 요구&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 사용자&lt;/td>
&lt;td>운영팀&lt;/td>
&lt;td>개발팀, DevOps팀, SRE팀&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>실제 시스템에서는 이 두 가지 접근 방식이 상호 보완적으로 사용된다.&lt;br>
Monitoring이 문제의 발생을 빠르게 감지하는 데 도움을 주고, Observability는 그 문제의 근본 원인을 파악하고 해결하는 데 도움을 준다.&lt;/p>
&lt;p>효과적인 운영을 위해서는 두 접근 방식을 적절히 조합하여 사용하는 것이 중요하다.&lt;br>
예를 들어, Monitoring을 통해 성능 저하를 감지하고, Observability를 통해 그 원인이 특정 마이크로서비스의 메모리 누수였음을 파악하는 식.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>IaC</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/iac/</link><pubDate>Thu, 17 Oct 2024 00:16:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/iac/</guid><description>
&lt;h2>IaC(Infrastructure As Code)&lt;/h2>&lt;p>Infrastructure as Code(IaC)는 인프라스트럭처를 코드로 관리하고 프로비저닝하는 방식이다.&lt;br>
전통적인 수동 인프라 구성 방식에서 벗어나 프로그래밍 언어를 사용하여 IT 인프라를 자동화하고 관리하는 접근법.&lt;/p>
&lt;h3>IaC의 핵심 개념&lt;/h3>&lt;ol>
&lt;li>선언적 접근 방식: IaC는 주로 선언적 방식을 사용한다. 즉, &amp;ldquo;무엇&amp;quot;이 필요한지를 정의하며, 시스템이 그 상태를 달성하는 방법을 결정한다.&lt;/li>
&lt;li>버전 관리: 인프라 구성을 코드로 관리함으로써 Git과 같은 버전 관리 시스템을 활용할 수 있다.&lt;/li>
&lt;li>자동화: 인프라 구성, 배포, 관리 과정을 자동화하여 인적 오류를 줄이고 효율성을 높인다.&lt;/li>
&lt;li>일관성: 동일한 코드로 여러 환경(개발, 테스트, 프로덕션)을 구성하여 일관성을 유지한다.&lt;/li>
&lt;/ol>
&lt;h3>IaC의 주요 이점&lt;/h3>&lt;ol>
&lt;li>속도와 효율성: 인프라 구축 및 변경 과정을 자동화하여 시간과 비용을 절감한다.&lt;/li>
&lt;li>일관성과 표준화: 모든 환경에서 동일한 구성을 보장하여 &amp;ldquo;환경 차이&amp;rdquo; 문제를 해결한다.&lt;/li>
&lt;li>확장성: 코드를 통해 인프라를 쉽게 확장하거나 축소할 수 있다.&lt;/li>
&lt;li>문서화: 코드 자체가 인프라 구성의 문서 역할을 한다.&lt;/li>
&lt;li>위험 감소: 변경 사항을 코드로 관리하여 추적하고 롤백할 수 있어 위험을 줄일 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>IaC의 구현 방식&lt;/h3>&lt;ul>
&lt;li>선언적 접근 방식: 원하는 최종 상태를 정의하고, 도구가 현재 상태에서 목표 상태로 도달하는 방법을 결정한다. Terraform, AWS CloudFormation 등이 이 방식을 사용합니다.&lt;/li>
&lt;li>명령적 접근 방식: 인프라를 구성하기 위한 정확한 단계와 절차를 정의한다. 쉘 스크립트나 Ansible의 일부 기능이 이 방식을 사용한다.&lt;/li>
&lt;/ul>
&lt;h3>주요 IaC 도구들&lt;/h3>&lt;ul>
&lt;li>Terraform: HashiCorp사의 오픈소스 IaC 도구로, 클라우드 중립적인 접근 방식을 제공한다. HCL(HashiCorp Configuration Language)을 사용하여 인프라를 정의하며, 다양한 클라우드 제공자를 지원한다.&lt;/li>
&lt;li>AWS CloudFormation: AWS의 네이티브 IaC 서비스로, JSON이나 YAML 형식으로 AWS 리소스를 정의할 수 있다.&lt;/li>
&lt;li>Ansible: Red Hat의 자동화 도구로, YAML 기반의 Playbook을 사용하여 구성 관리와 애플리케이션 배포를 자동화한다.&lt;/li>
&lt;li>Puppet/Chef: 구성 관리에 중점을 둔 도구들로, 서버의 상태와 설정을 코드로 관리한다.&lt;/li>
&lt;/ul>
&lt;h3>IaC 구현 모범 사례&lt;/h3>&lt;ol>
&lt;li>
&lt;p>모듈화와 재사용:&lt;br>
공통적으로 사용되는 인프라 구성을 모듈화하여 재사용성을 높인다.&lt;br>
이는 코드의 중복을 줄이고 관리를 용이하게 한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>변수와 파라미터화:&lt;br>
환경별로 다른 값을 적용할 수 있도록 변수를 활용한다.&lt;br>
이를 통해 동일한 코드로 개발, 테스트, 운영 환경을 관리할 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>보안 고려사항:&lt;br>
민감한 정보는 별도의 비밀 관리 시스템을 통해 관리하고, 접근 제어와 감사 로깅을 구현한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>IaC와 DevOps&lt;/h3>&lt;ol>
&lt;li>
&lt;p>CI/CD 통합:&lt;br>
IaC는 CI/CD 파이프라인의 중요한 부분이 되어, 코드 변경부터 인프라 배포까지의 전체 과정을 자동화할 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>테스트 자동화: 인프라 코드도 일반 애플리케이션 코드처럼 테스트할 수 있다.&lt;br>
단위 테스트, 통합 테스트 등을 통해 인프라 변경의 안정성을 검증한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>실제 활용 사례&lt;/h3>&lt;ol>
&lt;li>
&lt;p>클라우드 마이그레이션:&lt;br>
온프레미스에서 클라우드로의 마이그레이션을 IaC를 통해 체계적으로 수행할 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>멀티클라우드 환경 관리:&lt;br>
여러 클라우드 제공자의 리소스를 일관된 방식으로 관리할 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>재해 복구:&lt;br>
재해 발생 시 인프라를 신속하게 복구할 수 있으며, DR 환경을 쉽게 구성하고 테스트할 수 있다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>향후 발전 방향&lt;/h3>&lt;ol>
&lt;li>
&lt;p>GitOps의 확산:&lt;br>
Git을 중심으로 한 인프라 관리 방식이 더욱 보편화될 것으로 예상된.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>AI/ML 통합:&lt;br>
인프라 최적화와 문제 해결에 AI/ML을 활용하는 방향으로 발전할 것으로 예상된다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>CI/CD</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/</link><pubDate>Sun, 22 Sep 2024 18:14:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/</guid><description>
&lt;h2>CI/CD (Continuous Integration/Continuous Delivery)&lt;/h2>&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Software%20Development%20and%20Maintenance/DevOps/CI%20and%20CD/CICD_pipelines_work.png"
alt="CI/CD Pipeline"
loading="lazy" />
&lt;/figure>&lt;br>
&lt;em>Source: &lt;a href="https://www.wallarm.com/what/what-is-ci-cd-concept-how-can-it-work" target="_blank" rel="noopener">What is CI/CD: Meaning, Definition &amp;amp; Pipeline Concepts&lt;/a>&lt;/em>&lt;/p>
&lt;h3>CI (Continuous Integration, 지속적 통합)&lt;/h3>&lt;p>개발자들이 개별적으로 작업한 코드를 주기적으로 공유 저장소에 통합하여, 자동화된 빌드와 테스트를 수행하는 프로세스.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Software%20Development%20and%20Maintenance/DevOps/CI%20and%20CD/Continuous_Integration-CI.png"
alt="Continuous Integration (CI)"
loading="lazy" />
&lt;/figure>&lt;br>
&lt;em>Source: &lt;a href="https://www.wallarm.com/what/what-is-ci-cd-concept-how-can-it-work" target="_blank" rel="noopener">https://www.wallarm.com/what/what-is-ci-cd-concept-how-can-it-work&lt;/a>&lt;/em>&lt;/p>
&lt;h4>주요 구성 요소&lt;/h4>&lt;ul>
&lt;li>공유 코드 저장소&lt;/li>
&lt;li>자동화된 빌드 프로세스&lt;/li>
&lt;li>자동화된 테스트 suite&lt;/li>
&lt;/ul>
&lt;h5>CI(Continuous Integration)를 구현할 때 필요한 주요 도구&lt;/h5>&lt;ol>
&lt;li>&lt;strong>버전 관리 시스템 (Version Control System)&lt;/strong>
&lt;ul>
&lt;li>Git, SVN, Mercurial 등&lt;/li>
&lt;li>코드 변경 사항을 추적하고 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CI 서버
&lt;ul>
&lt;li>Jenkins, GitLab CI, CircleCI, Travis CI 등&lt;/li>
&lt;li>자동화된 빌드와 테스트를 실행&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>빌드 도구&lt;/strong>
&lt;ul>
&lt;li>Maven, Gradle, Ant (Java)&lt;/li>
&lt;li>npm, Webpack (Javascript)&lt;/li>
&lt;li>MSBuild (.NET)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>자동화된 테스트 프레임워크&lt;/strong>
&lt;ul>
&lt;li>JUnit, TestNG (Java)&lt;/li>
&lt;li>Mocha, Jest (Javascript)&lt;/li>
&lt;li>NUnit (.NET)&lt;/li>
&lt;li>Selenium (웹 애플리케이션 테스트)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>코드 품질 분석 도구
&lt;ul>
&lt;li>SonarQube, ESLint, Checkstyle&lt;/li>
&lt;li>코드 품질 메트릭을 측정하고 보고.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>아티팩트 저장소
&lt;ul>
&lt;li>Nexus, Artifactory&lt;/li>
&lt;li>빌드 결과물을 저장하고 관리.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>컨테이너화 도구
&lt;ul>
&lt;li>Docker, Kubernetes&lt;/li>
&lt;li>일관된 환경에서 빌드와 테스트 실행&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>알림 도구
&lt;ul>
&lt;li>Slack, Email, MS Teams&lt;/li>
&lt;li>빌드 결과를 팀원들에게 통지&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>구성 관리 도구
&lt;ul>
&lt;li>Ansible, Puppet, Chef&lt;/li>
&lt;li>환경 설정을 자동화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>모니터링 도구
&lt;ul>
&lt;li>Grafana, Prometheus&lt;/li>
&lt;li>CI 파이프라인의 성능을 모니터링&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>목적&lt;/h4>&lt;ul>
&lt;li>버그를 조기에 발경하고 품질 향상&lt;/li>
&lt;li>소프트웨어 품질 향상&lt;/li>
&lt;li>개발 주기 단축&lt;/li>
&lt;/ul>
&lt;h4>장점&lt;/h4>&lt;ul>
&lt;li>리스크 감소: 작은 변경사항을 자주 통합하여 큰 문제 예방&lt;/li>
&lt;li>버그 조기 발견: 자동화된 테스트로 빠른 피드백 제공&lt;/li>
&lt;li>팀 협업 개선: 투명한 개발 프로세스 촉진&lt;/li>
&lt;li>제품 품질 향상: 지속적인 코드 리뷰와 테스트&lt;/li>
&lt;li>배포 가능한 소프트웨어 상시 유지&lt;/li>
&lt;/ul>
&lt;h4>구현 단계&lt;/h4>&lt;ol>
&lt;li>공유 저장소 설정&lt;/li>
&lt;li>자동화된 빌드 구축&lt;/li>
&lt;li>자동화된 테스트 작성 및 통합&lt;/li>
&lt;li>CI 서버 구성 (예: Jenkins, GitLab CI)&lt;/li>
&lt;li>팀 작업 흐름 조정&lt;/li>
&lt;/ol>
&lt;h4>모범 사례&lt;/h4>&lt;ul>
&lt;li>작은 단위로 자주 커밋&lt;/li>
&lt;li>모든 커밋에 대해 빌드 실행&lt;/li>
&lt;li>빠른 빌드 유지 (10분 이내 권장)&lt;/li>
&lt;li>테스트 환경을 프로덕션과 유사하게 유지&lt;/li>
&lt;li>모든 테스트가 통과한 빌드만 허용.&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Software%20Development%20and%20Maintenance/DevOps/CI%20and%20CD/Continuous_Integration_workflow.jpg"
alt="Continuous Integration workflow"
loading="lazy" />
&lt;/figure>&lt;br>
&lt;em>Source: &lt;a href="https://www.wallarm.com/what/what-is-continuous-integration-ci-explainedby-wallarm" target="_blank" rel="noopener">https://www.wallarm.com/what/what-is-continuous-integration-ci-explainedby-wallarm&lt;/a>&lt;/em>&lt;/p>
&lt;h4>CI(Continuous Integration)를 구현할 때 가장 중요한 원칙&lt;/h4>&lt;ol>
&lt;li>단일 소스 저장소 사용: 모든 코드와 관련 파일을 하나의 중앙 저장소에서 관리한다.&lt;/li>
&lt;li>&lt;strong>자주 커밋하기&lt;/strong>: 개발자들이 작은 단위의 변경사항을 자주(하루에 여러 번) 메인 브랜치에 커밋한다.&lt;/li>
&lt;li>&lt;strong>자동화된 빌드&lt;/strong>: 모든 코드 변경사항에 대해 자동으로 빌드를 수행한다.&lt;/li>
&lt;li>&lt;strong>자동화된 테스트&lt;/strong>: 빌드 후 자동으로 테스트를 실행하여 변경사항의 품질을 검증한다.&lt;/li>
&lt;li>빠른 피드백: 빌드와 테스트 결과를 신속하게 개발자에게 전달한다.&lt;/li>
&lt;li>메인 브랜치 안정성 유지: 메인 브랜치는 항상 배포 가능한 상태를 유지해야 한다.&lt;/li>
&lt;li>테스트 환경 일관성: 개발, 테스트, 운영 환경을 최대한 유사하게 유지한다.&lt;/li>
&lt;li>가시성 확보: 빌드 상태와 테스트 결과를 팀 전체가 쉽게 확인할 수 있도록 한다.&lt;/li>
&lt;li>지속적인 개선: CI 프로세스를 지속적으로 모니터링하고 개선한다.&lt;/li>
&lt;/ol>
&lt;h4>CI(Continuous Integration)를 통한 코드 품질의 향상&lt;/h4>&lt;ol>
&lt;li>빠른 버그 발견과 수정:
&lt;ul>
&lt;li>자주 통합하고 테스트함으로써 버그를 조기에 발견하고 수정할 수 있다.&lt;/li>
&lt;li>작은 변경사항 단위로 테스트하므로 문제의 원인을 쉽게 파악할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>일관된 코드 스타일 유지
&lt;ul>
&lt;li>자동화된 코드 스타일 검사 도구를 CI 파이프라인에 통합하여 일관된 코딩 표준을 유지할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>자동화된 테스트 실행
&lt;ul>
&lt;li>모든 코드 변경에 대해 자동으로 테스트를 실행하여 기능 회귀를 방지한다.&lt;/li>
&lt;li>단위 테스트, 통합 테스트, 성능 테스트 등 다양한 테스트를 자동으로 수행한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>코드 품질 메트릭 모니터링
&lt;ul>
&lt;li>코드 복잡도, 중복도, 테스트 커버리지 등의 메트릭을 지속적으로 모니터링하고 개선할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>코드 리뷰 프로세스 강화
&lt;ul>
&lt;li>CI 시스템과 연동된 코드 리뷰 프로세스를 통해 품질 관리를 강화할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>지속적인 통합으로 인한 작은 변경 단위
&lt;ul>
&lt;li>작은 단위의 변경사항을 자주 통합함으로써 대규모 통합에 따른 리스크를 줄일 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>문서화 및 주석 품질 향상
&lt;ul>
&lt;li>문서화와 주석 작성을 CI 프로세스의 일부로 포함시켜 코드의 가독성과 유지보수성을 향상시킬 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보안 취약점 조기 발견
&lt;ul>
&lt;li>보안 검사 도구를 CI 파이프라인에 통합하여 보안 취약점을 조기에 발견하고 수정할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>CI(Continuous Integration)의 도입을 통한 테스트 프로세스의 변화&lt;/h4>&lt;ol>
&lt;li>자동화의 증가
&lt;ul>
&lt;li>수동 테스트에서 자동화된 테스트로 전환.&lt;/li>
&lt;li>단위 테스트, 통합 테스트, 기능 테스트 등이 자동화으로 실행.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>빈번한 테스트 실행
&lt;ul>
&lt;li>코드 변경이 있을 때마다 자동으로 테스트가 실행된다.&lt;/li>
&lt;li>일일 또는 더 자주 전체 테스트 스위트가 실행된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>빠른 피드백
&lt;ul>
&lt;li>개발자들이 코드 변경 후 즉시 테스트 결과를 받는다.&lt;/li>
&lt;li>버그를 조기에 발견하고 수정할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>테스트 범위 확대
&lt;ul>
&lt;li>더 많은 종류의 테스트를 포함할 수 있게 된다.&lt;/li>
&lt;li>성능 테스트, 보안 테스트 등도 CI 파이프라인에 통합된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>테스트 환경 일관성
&lt;ul>
&lt;li>모든 개발자와 CI 서버가 동일한 환경에서 테스트를 실행한다.&lt;/li>
&lt;li>환경 차이로 인한 &amp;ldquo;내 컴퓨터에서는 작동합니다&amp;quot;문제가 줄어든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>테스트 코드 품질 향상
&lt;ul>
&lt;li>테스트 코드도 버전 관리되고 리뷰된다.&lt;/li>
&lt;li>테스트의 유지보수성과 신뢰성이 향상된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>회귀 테스트 강화
&lt;ul>
&lt;li>모든 변경사항에 대해 전체 테스트 스위트가 실행되어 회귀 오류를 빠르게 잡아낸다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>테스트 메트릭스 추적
&lt;ul>
&lt;li>테스트 커버리지, 성공률 등의 메트릭스를 지속적으로 모니터링한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>테스트 우선 개발 촉진
&lt;ul>
&lt;li>TDD(Test-Driven Development) 같은 방법론 적용이 용이해진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>CI(Continuous Integration)를 도입할 때 발생할 수 있는 문제들&lt;/h4>&lt;ol>
&lt;li>문화적 저항
&lt;ul>
&lt;li>팀 구성원들이 새로운 프로세스와 도구 사용을 꺼려할 수 있다.&lt;/li>
&lt;li>해결책: 점진적 도입, 교육 제공, CI의 이점 명확히 설명&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>테스트 자동화 부족
&lt;ul>
&lt;li>적절한 자동화 테스트 없이 CI를 도입하면 효과가 제한적.&lt;/li>
&lt;li>해결책: 단위 테스트, 통합 테스트 등 자동화 테스트 구축에 투자&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>빌드 시간 증가
&lt;ul>
&lt;li>CI 프로세스로 인해 빌드 시간이 길어질 수 있다.&lt;/li>
&lt;li>해결책: 병렬 빌드, 증분 빌드 등 최적화 기법 적용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>인프라 관리 복잡성
&lt;ul>
&lt;li>CI 서버, 테스트 환경 등 추가 인프라 관리가 필요하다.&lt;/li>
&lt;li>해결책: 클라우드 서비스 활용, 인프라 자동화 도구 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보안 문제
&lt;ul>
&lt;li>CI 파이프라인에 민감한 정보가 노출될 위험이 있다.&lt;/li>
&lt;li>해결책: 보안 스캐닝 도구 통합, 비밀 정보 관리 시스템 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>과도한 알림
&lt;ul>
&lt;li>빈번한 빌드 실패 알림으로 피로도가 증가할 수 있다.&lt;/li>
&lt;li>해결책: 알림 정책 최적화, 중요 알림 필터링&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>기존 프로젝트 통합 어려움
&lt;ul>
&lt;li>레거시 시스템에 CI를 적용하기 어려울 수 있다.&lt;/li>
&lt;li>해결책: 점진적 리팩토링, 모듈화 접근&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>리소스 부족
&lt;ul>
&lt;li>CI 구축과 유지에 필요한 시간과 인력이 부족할 수 있다.&lt;/li>
&lt;li>해결책: 경영진의 지원 확보, 우선순위 조정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>CD (Continuous Delivery/Deployment, 지속적 전달/배포)&lt;/h3>&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Software%20Development%20and%20Maintenance/DevOps/CI%20and%20CD/What_is_the_distinction_between_CICD.png"
alt="What is the distinction between CI/CD?"
loading="lazy" />
&lt;/figure>&lt;br>
&lt;em>Source: &lt;a href="https://www.wallarm.com/what/what-is-ci-cd-concept-how-can-it-work" target="_blank" rel="noopener">https://www.wallarm.com/what/what-is-ci-cd-concept-how-can-it-work&lt;/a>&lt;/em>&lt;/p>
&lt;p>CI(Continuous Integration)의 연장선상에 있는 소프트웨어 개발 방법론이다.&lt;br>
Continuous Delivery(지속적 전달)와 Continuous Deployment(지속적 배포) 2가지 의미로 사용된다.&lt;/p>
&lt;h4>Continuous Delivery(지속적 전달)&lt;/h4>&lt;p>소프트웨어를 언제든지 안정적으로 출시할 수 있는 상태로 유지하는 방법론&lt;/p>
&lt;ul>
&lt;li>자동화된 테스트와 배포 준비 과정을 거치지만, 최종 프로덕션 배포는 수동으로 진행.&lt;/li>
&lt;/ul>
&lt;h4>Continuous Deployment(지속적 배포)&lt;/h4>&lt;p>개발자의 변경사항이 자동으로 프로덕션 환경까지 배포되는 방법론&lt;/p>
&lt;ul>
&lt;li>전체 과정이 완전 자동화되어 있어 수동 개입 없이 프로덕션 배포가 이루어짐.&lt;/li>
&lt;/ul>
&lt;h4>주요 구성 요소&lt;/h4>&lt;ul>
&lt;li>자동화된 빌드 및 테스트 프로세스 (CI의 연장)&lt;/li>
&lt;li>자동화된 배포 파이프라인&lt;/li>
&lt;li>환경 설정 자동화&lt;/li>
&lt;li>모니터링 및 로깅 시스템&lt;/li>
&lt;/ul>
&lt;h4>목적&lt;/h4>&lt;ul>
&lt;li>소프트웨어 배포 프로세스의 리스크 감소&lt;/li>
&lt;li>더 빠른 시장 출시 (Time-to-Market) 달성&lt;/li>
&lt;li>지속적인 사용자 피드백 수집 및 반영&lt;/li>
&lt;li>개발팀의 생산성 향상&lt;/li>
&lt;/ul>
&lt;h4>장점&lt;/h4>&lt;ul>
&lt;li>배포 프로세스의 안정성 향상&lt;/li>
&lt;li>사용자에게 더 빠른 가치 전달&lt;/li>
&lt;li>개발자의 생산성 및 만족도 증가&lt;/li>
&lt;li>실험과 혁신을 촉진하는 환경 조성&lt;/li>
&lt;li>운영 부담 감소&lt;/li>
&lt;/ul>
&lt;h4>구현 단계&lt;/h4>&lt;ol>
&lt;li>CI 파이프라인 구축 (선행 조건)&lt;/li>
&lt;li>자동화된 테스트 확장 (단위, 통합, 성능, 보안 등)&lt;/li>
&lt;li>환경 설정 자동화 (Infrastructure as Code)&lt;/li>
&lt;li>배포 파이프라인 구축&lt;/li>
&lt;li>모니터링 및 피드백 시스템 통합&lt;/li>
&lt;/ol>
&lt;h4>모범 사례&lt;/h4>&lt;ul>
&lt;li>모든 환경에서 동일한 배포 프로세스 사용&lt;/li>
&lt;li>배포를 작은 단위로 자주 수행&lt;/li>
&lt;li>피처 플래그를 사용한 점진적 롤아웃&lt;/li>
&lt;li>블루-그린 배포나 카나리 배포 등의 안전한 배포 전략 사용&lt;/li>
&lt;li>철저한 모니터링 및 로깅 구현&lt;/li>
&lt;li>빠른 롤백 메커니즘 준비&lt;/li>
&lt;/ul>
&lt;h4>CD (Continuous Delivery/Deployment, 지속적 전달/배포)를 구축할 때 가장 중요한 요소&lt;/h4>&lt;ol>
&lt;li>자동화&lt;br>
CD 파이프라인의 핵심&lt;br>
코드 통합부터 테스트, 배포까지 전 과정을 자동화하여 인적 오류를 최소화하고 일관성을 유지해야 한다.&lt;/li>
&lt;li>보안&lt;br>
프로덕션 환경의 보안을 최우선으로 고려해야 한다.&lt;br>
접근 권한을 제한하고, 민감한 정보는 프로덕션 환경에만 저장하는 등의 보안 조치가 필요하다.&lt;/li>
&lt;li>환경 분리&lt;br>
개발, 테스트, 프로덕션 등 각 환경을 분리하여 관리하는 것이 중요하다.&lt;/li>
&lt;li>테스트 자동화&lt;br>
다양한 유형의 테스트(단위 테스트, 통합 테스트, 엔드-투-엔드 테스트 등)를 자동화하여 코드 품질을 지속적으로 검증해야 한다.&lt;/li>
&lt;li>모니터링 및 피드백 루프&lt;br>
배포된 애플리케이션의 성능과 동작을 실시간으로 모니터링하고, 이를 통해 얻은 인사이트를 개발 프로세스에 반영하는 피드백 루프를 구축해야 한다.&lt;/li>
&lt;li>협업 문화&lt;br>
개발자, 운영팀, QA 등 모든 팀 구성원이 CD 파이프라인의 성공에 책임감을 갖고 협업하는 문화를 조성해야 한다.&lt;/li>
&lt;li>지속적인 개선&lt;br>
파이프라인의 성능을 정기적으로 모니터링하고 최적화하는 과정이 필요하다.&lt;/li>
&lt;li>적절한 도구 선택&lt;br>
팀의 요구사항과 기존 인프라에 적합한 CI/CD 도구를 선택하는 것이 중요하다.&lt;/li>
&lt;li>점진적 배포 전략&lt;br>
카나리 배포나 블루-그린 배포 등의 전략을 활용하여 리스크를 최소화하면서 새로운 기능을 안전하게 출시할 수 있는 방법을 고려해야 한다.&lt;/li>
&lt;li>코드 리뷰 프로세스&lt;br>
코드 품질을 유지하고 잠재적인 문제를 조기에 발견하기 위해 철저한 코드 리뷰 프로세스를 구축해야 한다.&lt;/li>
&lt;/ol>
&lt;h4>CD (Continuous Delivery/Deployment, 지속적 전달/배포)를 구현할 때 주의해야 할 점&lt;/h4>&lt;ol>
&lt;li>충분한 테스트 자동화:
&lt;ul>
&lt;li>포괄적인 자동화된 테스트 없이는 안전한 배포가 어렵다.&lt;/li>
&lt;li>단위 테스트, 통합 테스트, 성능 테스트 등을 구현해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>모니터링 및 알림 시스템 구축:
&lt;ul>
&lt;li>배포 과정과 애플리케이션 성능을 실시간으로 모니터링해야 한다.&lt;/li>
&lt;li>문제 발생 시 신속한 대응을 위한 알림 시스템이 필요합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>롤백 전략 수립:
&lt;ul>
&lt;li>문제 발생 시 신속하게 이전 버전으로 돌아갈 수 있는 전략이 필요하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보안 통합:
&lt;ul>
&lt;li>보안 검사를 CD 파이프라인에 통합하여 취약점을 조기에 발견해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>인프라 자동화:
&lt;ul>
&lt;li>인프라 구성을 코드로 관리하여 일관성과 재현성을 확보해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>점진적 배포 전략 사용:
&lt;ul>
&lt;li>블루-그린 배포, 카나리 릴리스 등의 전략을 활용하여 리스크를 최소화해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>팀 간 협업 강화:
&lt;ul>
&lt;li>개발, 운영, QA 팀 간의 원활한 소통과 협업이 필수적.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>지속적인 개선:
&lt;ul>
&lt;li>파이프라인의 성능과 효율성을 지속적으로 모니터링하고 개선해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>환경 일관성 유지:
&lt;ul>
&lt;li>개발, 테스트, 운영 환경 간의 일관성을 유지해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>비즈니스 의사결정 프로세스 통합:
&lt;ul>
&lt;li>배포 결정에 비즈니스 요구사항을 반영할 수 있는 프로세스가 필요하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>CD (Continuous Delivery/Deployment, 지속적 전달/배포)를 도입할 때 발생할 수 있는 문제들&lt;/h4>&lt;ol>
&lt;li>보안 문제
&lt;ul>
&lt;li>빠른 배포로 인한 보안 취약점 발생 가능성 증가&lt;/li>
&lt;li>민감한 데이터 노출 위험&lt;/li>
&lt;li>안전하지 않은 코드나 서드파티 구성요소 사용&lt;/li>
&lt;li>소스 코드 저장소나 빌드 도구에 대한 무단 접근&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>확장성 문제
&lt;ul>
&lt;li>증가하는 개발 팀과 프로젝트 규모에 대응하기 위한 인프라 확장 필요&lt;/li>
&lt;li>리소스 활용 최적화의 어려움&lt;/li>
&lt;li>성능 이슈 발생 가능성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>테스트 자동화 관련 문제
&lt;ul>
&lt;li>테스트 케이스 유지보수의 어려움&lt;/li>
&lt;li>효과적인 테스트 스크립트 작성의 복잡성&lt;/li>
&lt;li>다른 도구들과의 통합 문제&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>모니터링 문제
&lt;ul>
&lt;li>복잡한 분산 시스템 모니터링의 어려움&lt;/li>
&lt;li>여러 환경에 걸친 애플리케이션 모니터링의 복잡성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>문화와 프로세스 관련 문제
&lt;ul>
&lt;li>조직 내 변화에 대한 저항&lt;/li>
&lt;li>이해관계자들의 지지 부족&lt;/li>
&lt;li>기존 프로세스와의 충돌&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>릴리스 관리 문제
&lt;ul>
&lt;li>배포 일정 관리의 어려움&lt;/li>
&lt;li>롤백 절차 구현의 복잡성&lt;/li>
&lt;li>이해관계자와의 원활한 소통 부족&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>환경 관리 문제
&lt;ul>
&lt;li>인프라 프로비저닝의 어려움&lt;/li>
&lt;li>환경 간 설정 동기화 문제&lt;/li>
&lt;li>데이터 무결성 보장의 어려움&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>버전 관리 문제
&lt;ul>
&lt;li>새로운 버전 업데이트로 인한 배포 프로세스 중단&lt;/li>
&lt;li>자동 업데이트로 인한 생산 환경 문제 발생 가능성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>성능 저하 문제
&lt;ul>
&lt;li>CD 프로세스가 수동 작업보다 느려질 수 있는 상황 발생&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>타이트한 마감 기한과 릴리스 일정
&lt;ul>
&lt;li>빠른 개발과 배포로 인한 코드 품질 저하 가능성&lt;/li>
&lt;li>테스트와 품질 보증 과정의 축소로 인한 오류 증가 위험&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>CD (Continuous Delivery/Deployment, 지속적 전달/배포)를 구현할 때 주의해야 할 주요 단계&lt;/h4>&lt;ol>
&lt;li>보안 강화
&lt;ul>
&lt;li>코드 저장소와 빌드 서버의 보안을 철저히 관리해야 한다.&lt;/li>
&lt;li>민감한 데이터나 API 키가 노출되지 않도록 주의해야 한다.&lt;/li>
&lt;li>취약점이 있는 의존성 라이브러리를 사용하지 않도록 주의해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>자동화 테스트 구축
&lt;ul>
&lt;li>단위 테스트, 통합 테스트 등 다양한 자동화된 테스트를 구현해야 한다.&lt;/li>
&lt;li>테스트 커버리지를 높여 코드 품질을 유지해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>환경 일관성 유지
&lt;ul>
&lt;li>개발, 테스트, 프로덕션 환경을 일관되게 유지해야 한다.&lt;/li>
&lt;li>환경 간 설정 차이로 인한 문제를 방지해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>모니터링 및 로깅 구현
&lt;ul>
&lt;li>배포된 애플리케이션의 성능과 안정성을 실시간으로 모니터링해야 한다.&lt;/li>
&lt;li>문제 발생 시 빠르게 대응할 수 있도록 로깅 시스템을 구축해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>롤백 전략 수립
&lt;ul>
&lt;li>배포 실패 시 신속하게 이전 버전으로 롤백할 수 있는 전략을 마련해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>점진적 배포 전략 적용
&lt;ul>
&lt;li>카나리 배포나 블루-그린 배포 등의 전략을 활용하여 리스크를 최소화해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>인프라 확장성 고려&lt;br>
프로젝트 규모가 커질 때를 대비해 확장 가능한 인프라를 설계해야 한다.&lt;/li>
&lt;li>팀 간 커뮤니케이션 강화
&lt;ul>
&lt;li>개발, 운영, QA 팀 간의 원활한 소통을 위한 체계를 구축해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>문서화&lt;br>
CD 파이프라인의 설정과 사용 방법을 명확히 문서화하여 팀원들이 쉽게 이해하고 사용할 수 있도록 해야 한다.&lt;/li>
&lt;li>지속적인 개선
&lt;ul>
&lt;li>파이프라인의 성능을 정기적으로 모니터링하고 최적화하는 과정이 필요하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>CI(Continuous Integration, 지속적 통합)와 CD (Continuous Delivery/Deployment, 지속적 전달/배포) 파이프라인의 주요 차이점&lt;/h3>&lt;p>CI 파이프라인은 코드 통합과 검증에 중점을 두는 반면, CD 파이프라인은 검증된 코드를 실제 운영 환경에 안정적으로 배포하는 데 초점을 맞춘다.&lt;/p>
&lt;ol>
&lt;li>목적
&lt;ul>
&lt;li>CI (Continuous Integration) 파이프라인:&lt;br>
코드 변경사항을 지속적으로 통합하고 테스트하는 것이 주 목적.&lt;br>
개발자들이 코드를 자주 병합하고 빌드 및 테스트를 자동화하여 문제를 조기에 발견하는 데 중점을 둔다.&lt;/li>
&lt;li>CD (Continuous Delivery/Deployment) 파이프라인:&lt;br>
검증된 코드를 자동으로 릴리즈하고 프로덕션 환경에 배포하는 것이 주 목적.&lt;br>
CI의 결과물을 받아 실제 운영 환경에 제공하는 과정을 자동화한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>프로세스 범위
&lt;ul>
&lt;li>CI 파이프라인: 코드 통합, 빌드, 테스트 단계까지 포함&lt;/li>
&lt;li>CD 파이프라인: CI 단계 이후의 릴리즈, 배포, 모니터링 단계까지 포함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>자동화 수준
&lt;ul>
&lt;li>CI 파이프라인: 코드 통합부터 테스트까지 자동화&lt;/li>
&lt;li>CD 파이프라인: CI 단계에 더해 배포 과정까지 자동화. Continuous Delivery는 수동 승인 후 배포, Continuous Deployment는 완전 자동 배포를 의미.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>주요 활동
&lt;ul>
&lt;li>CI 파이프라인: 코드 병합, 빌드, 단위 테스트, 통합 테스트 등&lt;/li>
&lt;li>CD 파이프라인: 스테이징 환경 배포, 승인 프로세스, 프로덕션 배포, 모니터링 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>목표
&lt;ul>
&lt;li>CI 파이프라인: 코드 품질 향상, 버그 조기 발견&lt;/li>
&lt;li>CD 파이프라인: 빠른 릴리즈 주기, 안정적인 배포, 사용자 피드백 신속 반영&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>CI/CD 파이프라인의 주요 단계별로 수행되는 작업&lt;/h3>&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Software%20Development%20and%20Maintenance/DevOps/CI%20and%20CD/cicd-pipeline-introduction-1024x422-1.jpg"
alt="Stages of a CI/CD pipeline"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://semaphoreci.com/blog/cicd-pipeline" target="_blank" rel="noopener">https://semaphoreci.com/blog/cicd-pipeline&lt;/a> _&lt;/p>
&lt;ol>
&lt;li>소스 코드 관리 (Source)
&lt;ul>
&lt;li>개발자가 코드를 작성하고 버전 관리 시스템(예: Git)에 커밋.&lt;/li>
&lt;li>코드 변경사항을 추적하고 기록.&lt;/li>
&lt;li>팀 간 협업을 위한 코드 공유가 이루어진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>빌드 (Build)
&lt;ul>
&lt;li>소스 코드를 컴파일하고 실행 가능한 아티팩트를 생성한다.&lt;/li>
&lt;li>의존성을 해결하고 필요한 라이브러리를 포함시킨다.&lt;/li>
&lt;li>빌드 과정에서 발생하는 오류를 확인한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>단위 테스트 (Unit Test)
&lt;ul>
&lt;li>개별 코드 단위에 대한 자동화된 테스트를 실행한다.&lt;/li>
&lt;li>새로운 코드 변경이 기존 기능을 손상시키지 않았는지 확인한다.&lt;/li>
&lt;li>테스트 커버리지를 측정하고 보고한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>코드 품질 분석 (Code Quality Analysis)
&lt;ul>
&lt;li>정적 코드 분석 도구를 사용하여 코드 품질을 검사한다.&lt;/li>
&lt;li>보안 취약점, 코딩 표준 위반 등을 식별한다.&lt;/li>
&lt;li>코드 중복, 복잡도 등의 메트릭을 측정한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>통합 테스트 (Integration Test)
&lt;ul>
&lt;li>여러 컴포넌트 간의 상호작용을 테스트한다.&lt;/li>
&lt;li>시스템 전체의 기능을 검증한다.&lt;/li>
&lt;li>외부 의존성과의 통합을 확인한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>패키징 (Packaging)
&lt;ul>
&lt;li>애플리케이션과 필요한 모든 구성 요소를 배포 가능한 형태로 패키징한다.&lt;/li>
&lt;li>컨테이너 이미지 생성 등의 작업이 포함될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>스테이징 배포 (Staging Deployment)
&lt;ul>
&lt;li>프로덕션과 유사한 환경에 애플리케이션을 배포한다.&lt;/li>
&lt;li>성능 테스트, 사용자 수용 테스트 등을 수행한다.&lt;/li>
&lt;li>최종 검증을 위한 환경을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>승인 (Approval)
&lt;ul>
&lt;li>프로덕션 배포 전 필요한 승인 절차를 거친다.&lt;/li>
&lt;li>자동 또는 수동 승인 프로세스가 포함될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>프로덕션 배포 (Production Deployment)
&lt;ul>
&lt;li>검증된 애플리케이션을 실제 운영 환경에 배포한다.&lt;/li>
&lt;li>무중단 배포, 롤백 전략 등을 적용할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>모니터링 및 피드백 (Monitoring and Feedback)
&lt;ul>
&lt;li>배포된 애플리케이션의 성능과 안정성을 모니터링한다.&lt;/li>
&lt;li>사용자 피드백을 수집하고 분석한다.&lt;/li>
&lt;li>필요한 경우 빠른 대응과 개선을 위한 정보를 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>CI/CD 파이프라인의 Build 단계에서 수행되는 작업&lt;/h3>&lt;ol>
&lt;li>코드 컴파일
&lt;ul>
&lt;li>소스 코드를 실행 가능한 형태로 변환&lt;/li>
&lt;li>컴파일 언어의 경우 바이너리 파일을 생성하고, 인터프리터 언어의 경우 필요한 의존성과 도구를 확인&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>의존성 해결
&lt;ul>
&lt;li>프로젝트에 필요한 라이브러리와 패키지를 다운로드하고 설치&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>린팅(Linting)
&lt;ul>
&lt;li>코드의 문법적, 스타일적 오류를 검사&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>정적 코드 분석
&lt;ul>
&lt;li>자동화된 도구를 사용하여 코드 품질을 검사&lt;/li>
&lt;li>보안 취약점, 코딩 표준 위반 등을 식별&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>아티팩트 생성
&lt;ul>
&lt;li>배포 가능한 형태의 패키지를 생성&lt;/li>
&lt;li>이는 바이너리 파일, 코드 압축 파일, 설치 가능한 패키지, 웹사이트, 컨테이너 이미지 등이 될 수 있다&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>빌드 환경 설정
&lt;ul>
&lt;li>필요한 도구와 언어 버전을 설정&lt;/li>
&lt;li>예: Java 버전 설정, Maven 또는 Gradle 사용 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>캐싱
&lt;ul>
&lt;li>다운로드한 라이브러리, 중간 파일, 컴파일된 파일 등을 저장하여 향후 빌드 속도를 개선&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>빌드 결과 검증
&lt;ul>
&lt;li>빌드 과정이 성공적으로 완료되었는지 확인&lt;/li>
&lt;li>실패 시 개발 팀에 알림을 보낸다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>CI/CD 파이프라인의 Test 단계에 포함되는 테스트&lt;/h3>&lt;ol>
&lt;li>단위 테스트 (Unit Testing)
&lt;ul>
&lt;li>개별 코드 단위나 함수의 정확성을 검증.&lt;/li>
&lt;li>빠르고 가벼우며, 주로 개발자가 작성하고 실행.&lt;/li>
&lt;li>높은 테스트 커버리지가 바람직.&lt;/li>
&lt;li>도구: JUnit (Java), NUnit (.NET), pytest (Python) 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>통합 테스트 (Integration Testing)
&lt;ul>
&lt;li>애플리케이션의 다른 모듈이나 서비스 간 상호작용을 검증.&lt;/li>
&lt;li>데이터베이스, API, 외부 시스템과의 상호작용을 테스트.&lt;/li>
&lt;li>단위 테스트보다 복잡하고 시간이 더 걸린다.&lt;/li>
&lt;li>도구: TestNG (Java), pytest (Python), JUnit (Java) 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>기능 테스트 (Functional Testing)
&lt;ul>
&lt;li>애플리케이션의 기능적 요구사항을 평가.&lt;/li>
&lt;li>사용자 시나리오와 워크플로우에 초점을 맞춘다.&lt;/li>
&lt;li>사용자 상호작용을 시뮬레이션하는 도구를 사용하여 자동화.&lt;/li>
&lt;li>도구: Selenium, Cypress, QTP/UFT 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>회귀 테스트 (Regression Testing)
&lt;ul>
&lt;li>새로운 코드 변경이 기존 기능에 부정적인 영향을 미치지 않는지 확인.&lt;/li>
&lt;li>기존 테스트를 재실행하여 이전에 작동하던 기능을 검증.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>성능 테스트 (Performance Testing)
&lt;ul>
&lt;li>다양한 조건에서 애플리케이션의 성능을 측정.&lt;/li>
&lt;li>부하 테스트, 스트레스 테스트, 확장성 테스트 등이 포함.&lt;/li>
&lt;li>성능 병목 현상을 식별하고 예상 트래픽을 처리할 수 있는지 확인.&lt;/li>
&lt;li>도구: JMeter, LoadRunner, Gatling 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보안 테스트 (Security Testing)
&lt;ul>
&lt;li>취약점을 식별하고 잠재적인 공격에 대한 애플리케이션의 견고성을 확인.&lt;/li>
&lt;li>자동화된 보안 스캐닝, 침투 테스트, 취약점 평가 등이 포함.&lt;/li>
&lt;li>도구: OWASP ZAP, SonarQube (보안 규칙) 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>사용자 수용 테스트 (User Acceptance Testing)
&lt;ul>
&lt;li>실제 사용자 시나리오를 기반으로 애플리케이션의 기능과 사용성을 검증.&lt;/li>
&lt;li>일반적으로 파이프라인의 후반부에 수행.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>기능 테스트를 자동화할 때 주의해야 할 주요 사항&lt;/h4>&lt;ol>
&lt;li>명확한 자동화 전략 수립
&lt;ul>
&lt;li>자동화의 목적과 범위를 명확히 정의&lt;/li>
&lt;li>어떤 종류의 테스트를 자동화할지 결정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>우선순위 설정
&lt;ul>
&lt;li>자주 실행되고 영향력이 큰 테스트를 우선적으로 자동화&lt;/li>
&lt;li>비용 대비 효과를 고려하여 자동화할 테스트를 선별&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>적절한 도구 선택
&lt;ul>
&lt;li>프로젝트 요구사항에 맞는 자동화 도구를 선택&lt;/li>
&lt;li>팀의 기술 스택과 호환되는 도구를 고려&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>모듈화 및 재사용 가능한 테스트 스크립트 설계
&lt;ul>
&lt;li>유지보수가 용이하고 재사용 가능한 테스트 스크립트를 작성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>테스트 유지보수 고려
&lt;ul>
&lt;li>자동화된 테스트의 지속적인 유지보수 계획을 수립&lt;/li>
&lt;li>애플리케이션 변경에 따라 테스트 스크립트를 업데이트.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>지속적 통합(CI) 구현
&lt;ul>
&lt;li>자동화된 테스트를 CI/CD 파이프라인에 통합&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터 주도 테스팅 구현
&lt;ul>
&lt;li>다양한 데이터 세트로 테스트를 실행할 수 있도록 설계&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>병렬 테스팅 활용
&lt;ul>
&lt;li>테스트 실행 시간을 단축하기 위해 병렬 테스팅을 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>크로스 브라우저 및 크로스 플랫폼 테스팅 보장
&lt;ul>
&lt;li>다양한 브라우저와 플랫폼에서 일관된 동작을 확인&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>균형 잡힌 테스트 자동화 피라미드 유지
&lt;ul>
&lt;li>단위 테스트, 통합 테스트, E2E 테스트의 적절한 비율을 유지&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>수동 테스트와의 균형
&lt;ul>
&lt;li>자동화 테스트와 수동 테스트를 적절히 조합하여 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>성능 테스트를 수행할 때 고려해야할 요소&lt;/h4>&lt;ol>
&lt;li>테스트 목표 및 성능 기준 설정
&lt;ul>
&lt;li>명확한 성능 목표와 허용 가능한 기준을 정의.&lt;/li>
&lt;li>응답 시간, 처리량, 리소스 사용률 등의 주요 성능 지표를 설정.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>테스트 환경 구성
&lt;ul>
&lt;li>실제 운영 환경과 최대한 유사한 테스트 환경을 구축.&lt;/li>
&lt;li>하드웨어, 소프트웨어, 네트워크 구성 등을 실제 환경과 일치.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>테스트 시나리오 및 데이터 준비
&lt;ul>
&lt;li>실제 사용자 패턴을 반영한 다양한 테스트 시나리오를 설계.&lt;/li>
&lt;li>현실적인 테스트 데이터를 준비.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>부하 모델 설계
&lt;ul>
&lt;li>예상 사용자 수, 동시 접속자 수, 트랜잭션 볼륨 등을 고려한 부하 모델을 설계.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>모니터링 계획 수립
&lt;ul>
&lt;li>CPU, 메모리, 디스크 I/O, 네트워크 등 시스템 리소스 사용률을 모니터링.&lt;/li>
&lt;li>애플리케이션 성능 지표를 실시간으로 모니터링할 수 있는 도구를 준비.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>테스트 도구 선정
&lt;ul>
&lt;li>목적에 맞는 적절한 성능 테스트 도구를 선택.&lt;/li>
&lt;li>도구의 기능, 확장성, 사용 편의성 등을 고려.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>점진적 부하 증가
&lt;ul>
&lt;li>낮은 부하에서 시작하여 점진적으로 부하를 증가시키며 테스트를 수행.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>다양한 테스트 유형 고려
&lt;ul>
&lt;li>부하 테스트, 스트레스 테스트, 내구성 테스트 등 다양한 유형의 테스트를 수행.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>결과 분석 및 보고
&lt;ul>
&lt;li>테스트 결과를 철저히 분석하고 문제점을 식별.&lt;/li>
&lt;li>명확하고 이해하기 쉬운 보고서를 작성.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>지속적인 성능 모니터링
&lt;ul>
&lt;li>테스트 후에도 지속적으로 성능을 모니터링하고 최적화.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>성능 테스트 시나리오를 다양하게 설정하는 방법&lt;/h4>&lt;ol>
&lt;li>실제 사용자 행동 분석
&lt;ul>
&lt;li>실제 사용자의 행동 패턴을 분석하여 시나리오에 반영.&lt;/li>
&lt;li>가장 자주 사용되는 기능과 사용자 경로를 파악하여 핵심 시나리오를 구성.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>다양한 사용자 유형 고려
&lt;ul>
&lt;li>신규 사용자, 기존 사용자, 로그인/비로그인 사용자 등 다양한 유형의 사용자 행동을 시나리오에 포함.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>부하 수준 변화
&lt;ul>
&lt;li>정상 부하, 최대 부하, 스트레스 수준 등 다양한 부하 조건을 시나리오에 포함.&lt;/li>
&lt;li>점진적 부하 증가 시나리오를 통해 시스템의 성능 한계를 파악합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>시간대별 트래픽 패턴 반영
&lt;ul>
&lt;li>피크 시간대, 평상시, 특정 이벤트 기간 등 시간대별 트래픽 패턴을 시나리오에 반영.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>다양한 데이터 세트 사용
&lt;ul>
&lt;li>실제 데이터와 유사한 다양한 테스트 데이터를 준비하여 시나리오에 적용.&lt;/li>
&lt;li>데이터의 크기와 복잡성을 변화시켜 다양한 조건을 테스트.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>예외 상황 및 에러 처리 포함
&lt;ul>
&lt;li>시스템 오류, 네트워크 지연, 데이터베이스 락 등 예외 상황을 시나리오에 포함.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>동시 사용자 수 변화
&lt;ul>
&lt;li>동시 접속자 수를 다양하게 설정하여 시스템의 확장성을 테스트.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>복합 시나리오 구성
&lt;ul>
&lt;li>여러 기능을 연계한 복합적인 시나리오를 구성하여 실제 사용 환경을 모방.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>장기 실행 시나리오
&lt;ul>
&lt;li>시스템의 장기적인 안정성을 테스트하기 위한 장시간 실행 시나리오를 포함.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>지역별 접속 시뮬레이션
&lt;ul>
&lt;li>다양한 지역에서의 접속을 시뮬레이션하여 글로벌 서비스의 성능을 테스트.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>성능 테스트 결과를 효과적으로 피드백하는 방법&lt;/h4>&lt;ol>
&lt;li>명확하고 이해하기 쉬운 형식 선택
&lt;ul>
&lt;li>그래프, 차트, 표 등을 활용하여 데이터를 시각화.&lt;/li>
&lt;li>핵심 정보를 한눈에 파악할 수 있는 대시보드 형태의 보고서를 작성.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>관련 핵심 성능 지표(KPI) 포함
&lt;ul>
&lt;li>총 테스트 케이스 수, 실행된 케이스 수, 통과/실패 케이스 수 등의 기본 지표를 포함.&lt;/li>
&lt;li>응답 시간, 리소스 사용률, 부하 및 스트레스 지표 등 성능 관련 핵심 지표를 제시.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>대상 독자를 고려한 보고서 작성
&lt;ul>
&lt;li>경영진, 개발자, QA 팀 등 각 대상에 맞는 정보와 상세 수준을 제공.&lt;/li>
&lt;li>기술적 용어는 필요한 경우에만 사용하고, 사용 시 설명을 덧붙인다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>객관적이고 편견 없는 보고
&lt;ul>
&lt;li>정확한 수치와 데이터를 제시하고, 추정이나 가정을 배제.&lt;/li>
&lt;li>&amp;ldquo;우수함&amp;rdquo;, &amp;ldquo;나쁨&amp;rdquo; 등의 주관적 표현을 피하고 실제 결과를 설명.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>실행 가능한 인사이트와 권장사항 제시
&lt;ul>
&lt;li>발견된 문제점과 그 심각도를 명확히 설명.&lt;/li>
&lt;li>데이터에 기반한 개선 권장사항을 제시.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>요약 및 세부 정보의 균형
&lt;ul>
&lt;li>주요 발견사항과 지표를 포함한 간결한 요약을 제공.&lt;/li>
&lt;li>필요한 경우 상세한 기술적 정보를 첨부합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>상호작용적이고 협력적인 접근
&lt;ul>
&lt;li>보고서 설계 단계에서 이해관계자들의 의견을 수렴.&lt;/li>
&lt;li>결과에 대해 토론하고 질문에 답할 수 있는 기회를 제공.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>비즈니스 목표와의 연계
&lt;ul>
&lt;li>테스트 결과가 비즈니스 목표에 어떤 영향을 미치는지 설명.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>후속 조치 계획 수립
&lt;ul>
&lt;li>발견된 문제점에 대한 구체적인 개선 계획을 제시.&lt;/li>
&lt;li>향후 테스트 계획에 대한 제안을 포함.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>성능 테스트에서 리소스 관리&lt;/h4>&lt;ol>
&lt;li>리소스 사용량 모니터링
&lt;ul>
&lt;li>CPU, 메모리, 네트워크 대역폭, 저장 공간 등 주요 시스템 리소스의 사용량을 지속적으로 모니터링&lt;/li>
&lt;li>모니터링 소프트웨어, 프로파일링 도구, 성능 카운터 등을 활용하여 리소스 사용량을 추적&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>병목 현상 식별 및 최적화
&lt;ul>
&lt;li>리소스 사용량이 높은 영역을 식별하고 최적화&lt;/li>
&lt;li>코드 최적화, 캐싱, 불필요한 데이터베이스 쿼리 감소 등의 기법을 적용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>현실적인 시나리오 사용
&lt;ul>
&lt;li>실제 사용자 행동과 워크로드 패턴을 정확히 시뮬레이션하는 시나리오를 사용&lt;/li>
&lt;li>이를 통해 실제 환경에서의 성능 문제를 식별하고 리소스 활용을 최적화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가상화 기술 활용
&lt;ul>
&lt;li>단일 물리적 머신에서 여러 테스트 환경을 생성하여 리소스 활용도를 극대화하고 하드웨어 비용을 절감&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>지속적인 모니터링 및 테스트
&lt;ul>
&lt;li>정기적인 성능 테스트를 통해 시간이 지남에 따라 리소스 사용량을 최적화&lt;/li>
&lt;li>지속적인 모니터링을 통해 잠재적인 성능 문제를 조기에 발견하고 해결&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>리소스 활용도 분석 및 보고
&lt;ul>
&lt;li>리소스 관리 분석 및 보고를 통해 리소스 활용도에 대한 귀중한 통찰력을 얻는다.&lt;/li>
&lt;li>이 정보를 바탕으로 리소스 활용도 개선에 대한 정보에 기반한 결정을 내린다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>자동화 적용
&lt;ul>
&lt;li>자동화 기능을 활용하여 리소스 활용도를 최적화하고 관리 작업을 줄인다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>클라우드 기반 테스트 서비스 고려
&lt;ul>
&lt;li>필요에 따라 리소스를 동적으로 확장하거나 축소할 수 있는 클라우드 기반 테스트 서비스의 사용을 고려한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>성능 테스트에서 모니터링 도구를 선택할 때 고려해야 할 요소&lt;/h4>&lt;ol>
&lt;li>확장성 (Scalability)
&lt;ul>
&lt;li>증가하는 부하와 데이터 양을 처리할 수 있는 능력&lt;/li>
&lt;li>대규모 시스템과 분산 환경을 지원하는지 확인&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>실시간 모니터링 기능
&lt;ul>
&lt;li>성능 데이터를 실시간으로 수집하고 분석하는 능력&lt;/li>
&lt;li>즉각적인 문제 감지와 대응을 위한 실시간 알림 기능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>종합적인 메트릭 수집
&lt;ul>
&lt;li>CPU, 메모리, 디스크 I/O, 네트워크 등 다양한 시스템 리소스 모니터링&lt;/li>
&lt;li>응답 시간, 처리량, 오류율 등 애플리케이션 성능 지표 수집&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터 분석 및 시각화 기능
&lt;ul>
&lt;li>수집된 데이터를 의미 있는 인사이트로 변환하는 분석 도구&lt;/li>
&lt;li>직관적인 대시보드와 보고서 생성 기능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>통합 및 호환성
&lt;ul>
&lt;li>기존 인프라 및 도구들과의 통합 용이성&lt;/li>
&lt;li>다양한 플랫폼과 기술 스택 지원&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>사용 편의성
&lt;ul>
&lt;li>직관적인 사용자 인터페이스&lt;/li>
&lt;li>설정 및 관리의 용이성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>비용 효율성
&lt;ul>
&lt;li>라이선스 비용 및 총소유비용(TCO) 고려&lt;/li>
&lt;li>필요한 기능과 예산의 균형&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보안 및 규정 준수
&lt;ul>
&lt;li>데이터 암호화 및 접근 제어 기능&lt;/li>
&lt;li>관련 규정 및 표준 준수 여부&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>커스터마이징 및 확장성
&lt;ul>
&lt;li>사용자 정의 메트릭 및 대시보드 생성 가능성&lt;/li>
&lt;li>API 및 플러그인을 통한 기능 확장 옵션&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>벤더 지원 및 커뮤니티
&lt;ul>
&lt;li>기술 지원의 품질 및 대응성&lt;/li>
&lt;li>활발한 사용자 커뮤니티 및 문서화 수준&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>장기 데이터 보존 및 분석
&lt;ul>
&lt;li>과거 성능 데이터의 장기 보관 능력&lt;/li>
&lt;li>트렌드 분석 및 용량 계획을 위한 기능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>CI/CD 파이프라인의 모니터링 단계에서 수집되는 정보들&lt;/h3>&lt;ol>
&lt;li>배포 빈도 (Deployment Frequency)
&lt;ul>
&lt;li>일/주 단위로 성공적으로 배포된 횟수를 측정.&lt;/li>
&lt;li>이를 통해 개발 팀의 생산성과 파이프라인의 효율성을 파악.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>배포 시간 (Deployment Time)
&lt;ul>
&lt;li>각 배포 작업의 실행 시간을 측정.&lt;/li>
&lt;li>개발/테스트 환경에서 프로덕션 환경으로 릴리스를 이동시키는 데 걸리는 시간을 파악.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>변경 리드 타임 (Change Lead Time)
&lt;ul>
&lt;li>코드 변경 결정부터 실제 구현 및 배포까지 걸리는 시간을 측정.&lt;/li>
&lt;li>팀의 개발 및 배포 속도를 나타내는 중요한 지표.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>평균 복구 시간 (Mean Time to Recovery, MTTR)
&lt;ul>
&lt;li>프로덕션 환경에서 문제 발생 시 수정 사항을 배포하는 데 걸리는 시간을 측정.&lt;/li>
&lt;li>팀의 문제 해결 능력과 파이프라인의 효율성을 나타낸다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>변경 실패율 (Change Failure Rate)
&lt;ul>
&lt;li>배포 시도 중 실패한 비율을 측정.&lt;/li>
&lt;li>테스트나 기타 이유로 성공적으로 배포되지 못한 변경 사항의 비율.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>진행 중인 작업량 (Work in Progress)
&lt;ul>
&lt;li>특정 시점에 파이프라인에서 진행 중인 코드 또는 구성 변경 사항의 수를 측정.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>빌드 시간 및 테스트 실행 시간
&lt;ul>
&lt;li>각 빌드와 테스트 단계에 소요되는 시간을 측정.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>테스트 커버리지 및 성공률
&lt;ul>
&lt;li>자동화된 테스트의 코드 커버리지와 성공/실패율을 측정.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>리소스 사용량
&lt;ul>
&lt;li>CPU, 메모리, 디스크 I/O 등 파이프라인 실행에 사용되는 리소스를 모니터링.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>오류 및 경고 로그
&lt;ul>
&lt;li>파이프라인 실행 중 발생하는 오류와 경고 메시지를 수집.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>CI/CD 파이프라인의 각 단계별 사용되는 도구&lt;/h3>&lt;ol>
&lt;li>소스 코드 관리 (Source Code Management)
&lt;ul>
&lt;li>Git, GitHub, GitLab, Bitbucket&lt;/li>
&lt;li>SVN (Subversion)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>빌드 (Build)
&lt;ul>
&lt;li>Maven, Gradle (Java)&lt;/li>
&lt;li>npm, Webpack (JavaScript)&lt;/li>
&lt;li>MSBuild (.NET)&lt;/li>
&lt;li>Docker (컨테이너화)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>단위 테스트 (Unit Testing)
&lt;ul>
&lt;li>JUnit, TestNG (Java)&lt;/li>
&lt;li>Jest, Mocha (JavaScript)&lt;/li>
&lt;li>NUnit (.NET)&lt;/li>
&lt;li>PyTest (Python)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>코드 품질 분석 (Code Quality Analysis)
&lt;ul>
&lt;li>SonarQube&lt;/li>
&lt;li>ESLint (JavaScript)&lt;/li>
&lt;li>Checkstyle (Java)&lt;/li>
&lt;li>PMD&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>통합 테스트 (Integration Testing)
&lt;ul>
&lt;li>Selenium&lt;/li>
&lt;li>Postman&lt;/li>
&lt;li>REST Assured (API 테스팅)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>패키징 (Packaging)
&lt;ul>
&lt;li>Docker&lt;/li>
&lt;li>Helm (Kubernetes 패키징)&lt;/li>
&lt;li>Maven, Gradle (Java 애플리케이션 패키징)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>배포 (Deployment)
&lt;ul>
&lt;li>Kubernetes&lt;/li>
&lt;li>Docker Swarm&lt;/li>
&lt;li>AWS Elastic Beanstalk&lt;/li>
&lt;li>Heroku&lt;/li>
&lt;li>Ansible, Puppet, Chef (구성 관리)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>모니터링 (Monitoring)
&lt;ul>
&lt;li>Prometheus&lt;/li>
&lt;li>Grafana&lt;/li>
&lt;li>ELK Stack (Elasticsearch, Logstash, Kibana)&lt;/li>
&lt;li>New Relic&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CI/CD 오케스트레이션 도구
&lt;ul>
&lt;li>Jenkins&lt;/li>
&lt;li>GitLab CI/CD&lt;/li>
&lt;li>CircleCI&lt;/li>
&lt;li>Travis CI&lt;/li>
&lt;li>Azure DevOps&lt;/li>
&lt;li>AWS CodePipeline&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보안 검사 (Security Scanning)
&lt;ul>
&lt;li>OWASP ZAP&lt;/li>
&lt;li>SonarQube (보안 규칙)&lt;/li>
&lt;li>Snyk&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>성능 테스트 (Performance Testing)
&lt;ul>
&lt;li>Apache JMeter&lt;/li>
&lt;li>Gatling&lt;/li>
&lt;li>LoadRunner&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>CI/CD 구현을 위한 자동화 도구들&lt;/h3>&lt;ol>
&lt;li>Jenkins
&lt;ul>
&lt;li>가장 널리 사용되는 오픈소스 CI 도구&lt;/li>
&lt;li>다양한 플러그인 지원으로 확장성이 뛰어남&lt;/li>
&lt;li>커스터마이징이 용이하고 다양한 환경에서 사용 가능.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GitLab CI/CD
&lt;ul>
&lt;li>GitLab과 통합된 CI/CD 솔루션&lt;/li>
&lt;li>설정이 간단하고 GitLab 저장소와의 연동이 쉬움.&lt;/li>
&lt;li>컨테이너 기반 실행 환경 제공.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CircleCI
&lt;ul>
&lt;li>클라우드 기반의 CI/CD 서비스&lt;/li>
&lt;li>빠른 빌드 속도와 병령 실행 지원&lt;/li>
&lt;li>GitHub, Bitbucket과의 쉬운 통합&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Travis CI
&lt;ul>
&lt;li>오픈소스 프로젝트에 인기 있는 CI 도구&lt;/li>
&lt;li>GitHub와의 연동이 쉽고 설정이 간단함.&lt;/li>
&lt;li>다양한 언어와 환경 지원&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>TeamCity
&lt;ul>
&lt;li>JetBrains에서 개발한 CI/CD 서버&lt;/li>
&lt;li>사용자 친화적인 인터페이스&lt;/li>
&lt;li>지능형 빌드 구성 기능 제공&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Bamboo
&lt;ul>
&lt;li>Atlassian 제품군과 잘 통합되는 CI/CD 도구&lt;/li>
&lt;li>자체 호스팅 및 클라우드 옵션 제공&lt;/li>
&lt;li>복잡한 빌드 및 배포 시나리오 지원&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GitHub Actions
&lt;ul>
&lt;li>GitHub와 긴밀히 통합된 CI/CD 도구&lt;/li>
&lt;li>YAML 기반의 워크플로우 정의가 간편함.&lt;/li>
&lt;li>GitHub 생태계 내에서 쉽게 사용 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Azure DevOps
&lt;ul>
&lt;li>Microsoft의 종합적인 DevOps 플랫폼으로, CI/CD 기능을 포함.&lt;/li>
&lt;li>Azure 클라우드 서비스와의 긴밀한 통합이 장점.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Codefresh
&lt;ul>
&lt;li>Kubernetes와 컨테이너 기반 애플리케이션에 최적화된 현대적인 CI/CD 플랫폼.&lt;/li>
&lt;li>GitOps 기반의 배포 전략을 지원.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Semaphore
&lt;ul>
&lt;li>빠른 성능을 자랑하는 CI/CD 플랫폼.&lt;/li>
&lt;li>Docker, Kubernetes, iOS 지원 등 다양한 기능을 제공.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2>&lt;h3>CI/CD&lt;/h3>&lt;p>&lt;a href="https://seosh817.tistory.com/104" target="_blank" rel="noopener">SH&amp;rsquo;s Devlog&lt;/a>&lt;br>
&lt;a href="https://devocean.sk.com/search/techBoardDetail.do?ID=164937&amp;amp;boardType=" target="_blank" rel="noopener">Kubernetes 기반의 어플리케이션 배포 시스템 구축 방법&lt;/a>&lt;br>
&lt;a href="https://blog.banksalad.com/tech/how-we-have-built-alice/" target="_blank" rel="noopener">폐쇄망 환경의 배포 시스템 개발기&lt;/a>&lt;br>
&lt;a href="https://aws.amazon.com/ko/devops/continuous-integration/" target="_blank" rel="noopener">AWS Amazone CI&lt;/a>&lt;br>
&lt;a href="https://seosh817.tistory.com/104" target="_blank" rel="noopener">SH&amp;rsquo;s Devlog&lt;/a>&lt;br>
&lt;a href="https://yozm.wishket.com/magazine/detail/2010/" target="_blank" rel="noopener">깃옵스(GitOps)를 여행하려는 입문자를 위한 안내서&lt;/a>&lt;br>
&lt;a href="https://yozm.wishket.com/magazine/detail/2197/" target="_blank" rel="noopener">깃허브 액션으로 CI/CD 구현하기&lt;/a>&lt;br>
&lt;a href="https://yozm.wishket.com/magazine/detail/2184/" target="_blank" rel="noopener">CI/CD 개념과 깃허브 리포지터리 생성하기&lt;/a>&lt;br>
&lt;a href="https://devocean.sk.com/blog/techBoardDetail.do?ID=165513&amp;amp;boardType=techBlog&amp;amp;ref=codenary" target="_blank" rel="noopener">CI/CD와 Gitflow 그리고 QA&lt;/a>&lt;br>
&lt;a href="https://devocean.sk.com/blog/techBoardDetail.do?ID=165211&amp;amp;boardType=techBlog" target="_blank" rel="noopener">ArgoCD + AWS EKS + CodeCommmit + CodeBuild 로 CI/CD 구축하기&lt;/a>&lt;br>
&lt;a href="https://akuity.io/blog/gitops-best-practices-whitepaper/" target="_blank" rel="noopener">GitOps Best Practices Whitepaper&lt;/a>&lt;br>
&lt;a href="https://artist-developer.tistory.com/24?category=965473" target="_blank" rel="noopener">CI/CD란 무엇인가 (Feat. DevOps 엔지니어)&lt;/a>&lt;br>
&lt;a href="https://devocean.sk.com/search/techBoardDetail.do?ID=164937&amp;amp;boardType=" target="_blank" rel="noopener">Kubernetes 기반의 어플리케이션 배포 시스템 구축 방법&lt;/a>&lt;br>
&lt;a href="https://blog.banksalad.com/tech/how-we-have-built-alice/" target="_blank" rel="noopener">폐쇄망 환경의 배포 시스템 개발기&lt;/a>&lt;/p></description></item></channel></rss>