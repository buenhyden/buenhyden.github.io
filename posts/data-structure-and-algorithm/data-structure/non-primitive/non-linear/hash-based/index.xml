<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>해시 (Hash) on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/</link>
    <description>Recent content in 해시 (Hash) on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.143.0</generator>
    <language>en</language>
    <lastBuildDate>Wed, 09 Oct 2024 14:29:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hash Map</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/hash-map/</link>
      <pubDate>Wed, 09 Oct 2024 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/hash-map/</guid>
      <description>HashMap은 해시 함수를 사용하여 키를 배열의 인덱스로 변환하고, 해당 인덱스에 값을 저장하는 데이터 구조이다.</description>
    </item>
    <item>
      <title>Concurrent Hash Map</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/concurrent-hash-map/</link>
      <pubDate>Wed, 09 Oct 2024 13:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/concurrent-hash-map/</guid>
      <description>여러 스레드가 동시에 데이터를 안전하게 접근하고 수정할 수 있도록 설계된 스레드 안전(thread-safe)한 해시 맵 구현체</description>
    </item>
    <item>
      <title>Cuckoo Hash Table</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/cuckoo-hash-table/</link>
      <pubDate>Wed, 09 Oct 2024 12:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/cuckoo-hash-table/</guid>
      <description>Cuckoo Hash Table은 해시 충돌 문제를 해결하기 위해 개발된 해시 테이블의 한 종류로, 두 개 이상의 해시 함수를 사용하여 각 키에 대해 여러 개의 가능한 위치를 제공한다.</description>
    </item>
    <item>
      <title>Bloom filter</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/bloom-filter/</link>
      <pubDate>Wed, 09 Oct 2024 12:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/bloom-filter/</guid>
      <description>&lt;h2 id=&#34;블룸-필터-bloom-filter&#34;&gt;블룸 필터 (Bloom filter)&lt;/h2&gt;
&lt;p&gt;블룸 필터(Bloom Filter)는 &lt;strong&gt;공간 효율적인 확률적 데이터 구조&lt;/strong&gt;로, 원소가 집합에 속하는지 여부를 빠르게 확인하는 데 사용된다.&lt;br&gt;
1970년 Burton Howard Bloom이 고안한 이 구조는 **거짓 양성(false positive)**은 허용하지만 **거짓 음성(false negative)**은 절대 발생하지 않는다.&lt;/p&gt;
&lt;p&gt;블룸 필터는 &lt;strong&gt;빠른 검색과 극도의 공간 효율&lt;/strong&gt;이 필요한 시스템에서 필수적이다.&lt;br&gt;
특히 대용량 데이터 처리, 실시간 애플리케이션, 메모리 제약 환경에서 강력한 성능을 발휘한다.&lt;br&gt;
다만 정확성이 절대적이라면 전통적 해시 테이블이 더 적합하다.&lt;/p&gt;
&lt;h3 id=&#34;핵심-구성-요소&#34;&gt;핵심 구성 요소&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;비트 배열(Bit Array)&lt;/strong&gt;: 모든 비트가 0으로 초기화된 배열 (크기 &lt;code&gt;m&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;해시 함수(Hash Functions)&lt;/strong&gt;: 원소를 비트 배열의 인덱스로 매핑하는 &lt;code&gt;k&lt;/code&gt;개의 독립적 해시 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;동작-과정&#34;&gt;동작 과정&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;삽입(Add)&lt;br&gt;
원소를 &lt;code&gt;k&lt;/code&gt;개의 해시 함수로 해싱 → 각 결과값을 비트 배열의 인덱스로 사용 → 해당 위치의 비트를 1로 설정.&lt;br&gt;
&lt;strong&gt;예시&lt;/strong&gt;: 원소 &amp;ldquo;apple&amp;quot;을 3개의 해시 함수로 해싱 → 인덱스 1, 4, 7 → 비트 배열 &lt;code&gt;[0,1,0,1,0,0,1,0,0,0]&lt;/code&gt; 갱신.&lt;/p&gt;</description>
    </item>
    <item>
      <title>해시 테이블(Hash Table)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/hash-table/</link>
      <pubDate>Wed, 09 Oct 2024 05:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/hash-table/</guid>
      <description>키-값 쌍을 저장하는 데이터 구조로, 해시 함수를 사용하여 키를 인덱스로 변환</description>
    </item>
  </channel>
</rss>
