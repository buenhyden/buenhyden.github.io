<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Software Design Patterns on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/</link>
    <description>Recent content in Software Design Patterns on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.3</generator>
    <language>en</language>
    <lastBuildDate>Fri, 27 Sep 2024 08:19:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Software Design Pattern vs. Software Architecture pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/software-design-pattern-vs-software-architecture-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 08:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/software-design-pattern-vs-software-architecture-pattern/</guid>
      <description>소프트웨어 디자인 패턴 (Software Design Pattern) 은 코드 레벨에서 반복적으로 발생하는 문제에 대한 검증된 해결책을 제공하며, 모듈, 클래스, 객체 간의 관계와 동작에 초점을 맞춘다. 소프트웨어 아키텍처 패턴 (Software Architecture Pattern) 은 시스템 전체의 구조, 구성요소, 책임 분배, 상호작용 방식을 정의해 대규모 시스템의 확장성, 유지보수성, 성능, 안정성 등 거시적 품질을 좌우한다. 두 패턴은 목적과 적용 범위에서 차이를 보이며, 함께 사용될 때 소프트웨어의 품질과 생산성을 극대화할 수 있다.</description>
    </item>
  </channel>
</rss>
