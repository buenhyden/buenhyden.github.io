<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Software Design Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/</link><description>Recent content in Software Design Patterns on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 10 Oct 2024 07:57:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Behavioral Design Patterns vs Creational Design Patterns vs Structural Design Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns-vs-creational-design-patterns-vs-structural-design-patterns/</link><pubDate>Sat, 28 Dec 2024 08:30:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns-vs-creational-design-patterns-vs-structural-design-patterns/</guid><description>
&lt;h2>Behavioral Design Patterns Vs Creational Design Patterns Vs Structural Design Patterns&lt;/h2>&lt;p>Behavioral Design Patterns, Creational Design Patterns, 그리고 Structural Design Patterns은 소프트웨어 설계에서 자주 발생하는 문제들을 해결하기 위한 일반화된 솔루션을 제공하는 디자인 패턴의 세 가지 주요 카테고리이다.&lt;br>
각 카테고리는 서로 다른 측면의 객체 지향 설계 문제를 다룬다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>구분&lt;/th>
&lt;th>Creational Patterns&lt;/th>
&lt;th>Structural Patterns&lt;/th>
&lt;th>Behavioral Patterns&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>정의&lt;/strong>&lt;/td>
&lt;td>객체 생성 메커니즘을 다루는 패턴&lt;/td>
&lt;td>클래스와 객체의 구조를 다루는 패턴&lt;/td>
&lt;td>객체 간의 상호작용과 책임 분배를 다루는 패턴&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주요 목적&lt;/strong>&lt;/td>
&lt;td>시스템이 사용할 구체 클래스를 지정하지 않으면서 객체 인스턴스 생성&lt;/td>
&lt;td>클래스와 객체를 더 큰 구조로 조합하면서 유연성 유지&lt;/td>
&lt;td>객체 간의 통신 방법과 책임 할당 방식을 정의&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>중점 사항&lt;/td>
&lt;td>객체 생성 과정의 유연성&lt;/td>
&lt;td>클래스와 객체를 더 큰 구조로 조합&lt;/td>
&lt;td>알고리즘과 객체 간 책임 분배&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>유연성 제공&lt;/td>
&lt;td>객체 생성 방식&lt;/td>
&lt;td>객체 구조와 구성&lt;/td>
&lt;td>객체 간 통신 방식&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>문제 해결 영역&lt;/td>
&lt;td>객체 인스턴스화&lt;/td>
&lt;td>클래스와 객체의 구조화&lt;/td>
&lt;td>객체 상호작용 및 책임&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>핵심 원칙&lt;/strong>&lt;/td>
&lt;td>&amp;ldquo;생성과 구현의 분리&amp;rdquo;&lt;/td>
&lt;td>&amp;ldquo;구조와 기능의 분리&amp;rdquo;&lt;/td>
&lt;td>&amp;ldquo;행위와 책임의 분리&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>대표적인 패턴들&lt;/strong>&lt;/td>
&lt;td>- Singleton&lt;br>Factory Method&lt;br>Abstract Factory&lt;br>Builder&lt;br>Prototype&lt;/td>
&lt;td>- Adapter&lt;br>Bridge&lt;br>Composite&lt;br>Decorator&lt;br>Facade&lt;/td>
&lt;td>- Observer&lt;br>Strategy&lt;br>Command&lt;br>Iterator&lt;br>Mediator&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>구현 예시&lt;/strong>&lt;/td>
&lt;td>&lt;code>javascript const instance = Singleton.getInstance(); &lt;/code>&lt;/td>
&lt;td>&lt;code>javascript const wrapper = new Adapter(oldInterface); &lt;/code>&lt;/td>
&lt;td>&lt;code>javascript subject.addObserver(observer); &lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>사용 시점&lt;/strong>&lt;/td>
&lt;td>- 객체 생성 로직이 복잡할 때&lt;br>- 객체 생성을 유연하게 처리해야 할 때&lt;br>- 객체 재사용이 필요할 때&lt;/td>
&lt;td>- 서로 다른 인터페이스를 통합할 때&lt;br>- 시스템을 계층화할 때&lt;br>- 기능을 동적으로 추가할 때&lt;/td>
&lt;td>- 객체 간 결합도를 낮추고 싶을 때&lt;br>- 알고리즘을 캡슐화할 때&lt;br>- 객체 간 통신을 체계화할 때&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주요 장점&lt;/strong>&lt;/td>
&lt;td>- 객체 생성의 유연성 확보&lt;br>- 코드 재사용성 향상&lt;br>- 생성 로직 캡슐화&lt;/td>
&lt;td>- 시스템 확장성 향상&lt;br>- 클래스 간 결합도 감소&lt;br>- 유연한 구조 설계&lt;/td>
&lt;td>- 객체 간 느슨한 결합&lt;br>- 책임의 명확한 분리&lt;br>- 코드 재사용성 증가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주요 단점&lt;/strong>&lt;/td>
&lt;td>- 클래스 수 증가&lt;br>- 복잡성 증가&lt;br>- 생성 패턴 과다 사용 시 오버헤드&lt;/td>
&lt;td>- 추상화로 인한 복잡도 증가&lt;br>- 클래스 계층 구조의 복잡화&lt;/td>
&lt;td>- 관찰자 패턴의 성능 저하 가능성&lt;br>- 패턴 적용의 오버헤드&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>적용 사례&lt;/strong>&lt;/td>
&lt;td>- DB 연결 관리&lt;br>- 객체 풀 관리&lt;br>- 설정 관리&lt;/td>
&lt;td>- GUI 컴포넌트&lt;br>- 레거시 시스템 통합&lt;br>- 프레임워크 개발&lt;/td>
&lt;td>- 이벤트 처리&lt;br>UI 업데이트&lt;br>- 게임 로직&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>적용 시기&lt;/td>
&lt;td>객체 생성이 복잡하거나 유연성이 필요할 때&lt;/td>
&lt;td>클래스나 객체를 더 큰 구조로 조직해야 할 때&lt;/td>
&lt;td>객체 간 통신이 복잡할 때&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>런타임 영향&lt;/strong>&lt;/td>
&lt;td>객체 생성 시점에만 영향&lt;/td>
&lt;td>전반적인 구조에 영향&lt;/td>
&lt;td>실행 시간 전반에 영향&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>코드 유지보수성&lt;/strong>&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>코드 재사용성&lt;/td>
&lt;td>객체 생성 로직의 재사용&lt;/td>
&lt;td>기존 코드의 재사용 및 확장&lt;/td>
&lt;td>알고리즘의 재사용 촉진&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>시스템 영향&lt;/td>
&lt;td>시스템과 객체 생성의 분리&lt;/td>
&lt;td>클래스 간 관계 단순화&lt;/td>
&lt;td>객체 간 결합도 감소&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>유지보수성&lt;/td>
&lt;td>객체 생성 로직 변경 용이&lt;/td>
&lt;td>구조 변경 및 확장 용이&lt;/td>
&lt;td>동작 로직 변경 용이&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>디버깅 난이도&lt;/strong>&lt;/td>
&lt;td>낮음-중간&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>중간-높음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>각 패턴 카테고리의 실제 활용 예시:&lt;/p>
&lt;p>Creational Pattern 예시:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Factory Method Pattern
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">CarFactory&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">createCar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;sedan&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Sedan&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;suv&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">SUV&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Structural Pattern 예시:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Adapter Pattern
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">LegacyAdapter&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">legacySystem&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">legacySystem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">legacySystem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">modernMethod&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">legacySystem&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">oldMethod&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Behavioral Pattern 예시:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Observer Pattern
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">Subject&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">observers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">addObserver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">observer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">observers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">observer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">notify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">observers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">observer&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">observer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이러한 패턴들은 각각의 상황과 요구사항에 따라 적절히 선택하여 사용해야 하며, 때로는 여러 패턴을 조합하여 사용하는 것이 효과적일 수 있다.&lt;br>
특히 현대적인 소프트웨어 개발에서는 이러한 패턴들의 원칙을 이해하고 상황에 맞게 유연하게 적용하는 것이 중요하다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Behavioral Design Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/</guid><description/></item><item><title>Creational Design Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/creational-design-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/creational-design-patterns/</guid><description/></item><item><title>Structural Design Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/structural-design-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/structural-design-patterns/</guid><description/></item></channel></rss>