<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Architecture Principles :: hyunyoun's Blog</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/</link><description>Software Architecture Principles는 효율적이고 유지보수가 용이한 소프트웨어 시스템을 설계하기 위한 핵심 지침이다. 이러한 원칙들을 적절히 적용함으로써, 개발자들은 유지보수가 용이하고, 확장 가능하며, 재사용성이 높은 소프트웨어 시스템을 설계할 수 있다.</description><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Tue, 24 Sep 2024 01:00:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/index.xml" rel="self" type="application/rss+xml"/><item><title>KISS Principle</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/kiss-principle/</link><pubDate>Tue, 24 Sep 2024 01:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/kiss-principle/</guid><description>시스템이나 코드의 복잡성을 최소화하라.</description></item><item><title>YAGNI Principle</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/yagni-principle/</link><pubDate>Tue, 24 Sep 2024 00:59:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/yagni-principle/</guid><description>당장 필요하지 않은 기능을 미리 구현하지 마라.</description></item><item><title>DRY Principle</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/dry-principle/</link><pubDate>Tue, 24 Sep 2024 00:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/dry-principle/</guid><description>코드 중복을 피하고 로직을 한 곳에서 관리하도록 권장하는 원칙.</description></item><item><title>SOLID Principles</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/solid-principles/</link><pubDate>Tue, 24 Sep 2024 00:57:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/solid-principles/</guid><description>객체 지향 프로그래밍 및 설계의 다섯 가지 기본 원칙.</description></item></channel></rss>