<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Communication Patterns :: hyunyoun's Blog</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication.html</link><description>통신 패턴들은 마이크로서비스 아키텍처에서 서비스 간의 효율적인 통신을 가능하게 하며, 시스템의 확장성, 유연성, 성능을 향상시키는 데 중요한 역할을 한다.</description><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Sat, 28 Dec 2024 10:05:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/index.xml" rel="self" type="application/rss+xml"/><item><title>Event-Driven Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/event-driven-pattern.html</link><pubDate>Sat, 28 Dec 2024 10:05:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/event-driven-pattern.html</guid><description>이 패턴은 시스템의 상태 변화를 이벤트로 표현하고, 이를 기반으로 서비스 간 통신을 구현하는 방식이다.</description></item><item><title>발행/구독 패턴 (Publisher-Subscriber Pattern)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/publisher-subscriber-pattern.html</link><pubDate>Sat, 28 Dec 2024 07:05:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/publisher-subscriber-pattern.html</guid><description>발행/구독 패턴은 메시지를 생성하는 발행자(Publisher)와 메시지를 수신하는 구독자(Subscriber) 사이의 비동기 통신 모델이다.</description></item><item><title>Request-Response Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/request-response-pattern.html</link><pubDate>Sat, 28 Dec 2024 06:18:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/request-response-pattern.html</guid><description>Request-Response Pattern은 한 서비스(클라이언트)가 다른 서비스(서버)에 요청을 보내고, 서버가 이 요청을 처리한 후 응답을 반환하는 방식의 통신이다.</description></item><item><title>Message-based Communication Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/message-based-communication-pattern.html</link><pubDate>Sat, 28 Dec 2024 03:56:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/message-based-communication-pattern.html</guid><description>Message-based Communication Pattern은 마이크로서비스 간 통신을 위해 메시지를 사용하는 방식으로 각 서비스는 메시지를 생성하고 수신하며, 이 메시지들은 메시지 브로커를 통해 전달된다.</description></item><item><title>Synchronous Communication Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/synchronous-communication-pattern.html</link><pubDate>Sat, 28 Dec 2024 03:56:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/synchronous-communication-pattern.html</guid><description>Synchronous Communication Pattern은 한 서비스가 다른 서비스에 요청을 보내고 응답을 받을 때까지 기다리는 방식이다.</description></item><item><title>비동기 통신 패턴(Asynchronous Communication Pattern)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/asynchronous-communication-pattern.html</link><pubDate>Sat, 28 Dec 2024 03:56:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/asynchronous-communication-pattern.html</guid><description>비동기 통신 패턴은 마이크로서비스 간의 통신에서 요청자가 응답을 기다리지 않고 다음 작업을 수행할 수 있게 하는 패턴이다.</description></item></channel></rss>