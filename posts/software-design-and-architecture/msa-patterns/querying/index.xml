<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Querying on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/querying/</link>
    <description>Recent content in Querying on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 03 Oct 2024 10:52:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/querying/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>API Composition</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/querying/api-composition/</link>
      <pubDate>Thu, 03 Oct 2024 10:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/querying/api-composition/</guid>
      <description>이 패턴은 여러 마이크로서비스의 데이터를 조합하여 클라이언트에게 단일 응답으로 제공하는 방식이다.</description>
    </item>
    <item>
      <title>CQRS</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/querying/cqrs/</link>
      <pubDate>Thu, 03 Oct 2024 10:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/querying/cqrs/</guid>
      <description>&lt;h2 id=&#34;cqrs&#34;&gt;CQRS&lt;/h2&gt;
&lt;p&gt;CQRS(Command Query Responsibility Segregation)는 마이크로서비스 아키텍처(MSA)에서 중요한 패턴 중 하나이다.&lt;br&gt;
CQRS는 시스템의 명령(Command)과 조회(Query) 작업을 분리하여 각각의 책임을 명확히 하는 패턴이다.&lt;/p&gt;
&lt;p&gt;CQRS는 다음과 같은 핵심 개념을 가지고 있다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;명령(Command)&lt;/strong&gt;: 시스템의 상태를 변경하는 작업 (예: 주문하기, 회원가입)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;조회(Query)&lt;/strong&gt;: 시스템의 상태를 조회하는 작업 (예: 주문 목록 조회, 회원 정보 조회)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;책임 분리(Responsibility Segregation)&lt;/strong&gt;: 명령과 조회 작업을 별도의 모델로 분리&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;CQRS 패턴은 시스템의 성능, 확장성, 유지보수성을 향상시킬 수 있는 강력한 도구이다. 하지만 모든 시스템에 적합한 것은 아니므로, 프로젝트의 요구사항과 특성을 고려하여 적용 여부를 신중히 결정해야 한다.&lt;br&gt;
CQRS를 효과적으로 구현하기 위해서는 명령과 조회 모델의 분리, 데이터 동기화 전략, 그리고 전체 시스템 아키텍처에 대한 깊은 이해가 필요하다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
