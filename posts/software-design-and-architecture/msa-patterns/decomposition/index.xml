<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Decomposition on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/</link>
    <description>Recent content in Decomposition on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.143.0</generator>
    <language>en</language>
    <lastBuildDate>Wed, 13 Nov 2024 10:50:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Self-contained Service</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/self-contained-service/</link>
      <pubDate>Wed, 13 Nov 2024 10:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/self-contained-service/</guid>
      <description>&lt;h2 id=&#34;self-contained-service&#34;&gt;Self-contained Service&lt;/h2&gt;
&lt;p&gt;마이크로서비스 아키텍처(MSA)에서 &amp;ldquo;self-contained service&amp;rdquo; 패턴은 서비스의 자율성과 독립성을 극대화하는 중요한 개념이다.&lt;/p&gt;
&lt;p&gt;Self-contained Service는 단일 비즈니스 기능을 완전히 독립적으로 구현한 서비스를 의미한다.&lt;br&gt;
이 서비스는 자체적으로 데이터를 저장하고, 비즈니스 로직을 처리하며, 사용자 인터페이스를 제공할 수 있다.&lt;/p&gt;
&lt;p&gt;Self-contained Service 패턴은 MSA의 핵심 원칙을 구현하는 방법 중 하나로, 서비스의 자율성과 독립성을 극대화하여 시스템의 유연성과 확장성을 높이는 데 기여한다. 하지만 이 패턴을 적용할 때는 시스템의 복잡성 증가와 데이터 일관성 관리 등의 도전 과제를 고려해야 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Service per team</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/service-per-team/</link>
      <pubDate>Wed, 13 Nov 2024 10:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/service-per-team/</guid>
      <description>&lt;h2 id=&#34;service-per-team&#34;&gt;Service per Team&lt;/h2&gt;
&lt;p&gt;Service per team 패턴은 각 마이크로서비스를 개별 팀이 소유하고 관리하는 방식이다.&lt;br&gt;
이 패턴에서는 각 팀이 특정 비즈니스 기능을 담당하며, 해당 기능의 코드베이스를 소유한다.&lt;/p&gt;
&lt;p&gt;Service per team 패턴은 팀의 자율성과 책임감을 높이는 동시에 마이크로서비스 아키텍처의 이점을 최대화할 수 있는 효과적인 접근 방식이다. 그러나 이 패턴을 성공적으로 구현하기 위해서는 조직 문화, 팀 구조, 그리고 기술적 인프라 등 여러 측면에서의 신중한 고려가 필요하다.&lt;/p&gt;
&lt;h3 id=&#34;주요-특징&#34;&gt;주요 특징&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;팀 자율성&lt;/strong&gt;: 각 팀은 자신의 서비스를 독립적으로 개발, 테스트, 배포, 확장할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API 중심 협업&lt;/strong&gt;: 팀들은 주로 API를 통해 상호작용하며, 다른 팀과의 협업을 최소화한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;소규모 팀&lt;/strong&gt;: 일반적으로 &amp;ldquo;two-pizza team&amp;rdquo; 크기의 소규모 팀이 각 서비스를 담당한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;인지 부하 감소&lt;/strong&gt;: 팀원들이 전체 시스템이 아닌 특정 서비스에만 집중할 수 있어 인지 부하가 감소한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;장점&#34;&gt;장점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;팀 자율성 강화&lt;/strong&gt;: 각 팀이 독립적으로 의사 결정을 내릴 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;느슨한 결합&lt;/strong&gt;: 팀 간의 의존성이 줄어들어 더 유연한 개발이 가능하다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;코드 품질 향상&lt;/strong&gt;: 장기적인 코드 소유권으로 인해 코드 품질이 개선된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;빠른 개발 및 배포&lt;/strong&gt;: 작은 팀이 독립적으로 개발하고 배포할 수 있어 시장 변화에 빠르게 대응할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;단점&#34;&gt;단점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;복잡한 프로젝트 조정&lt;/strong&gt;: 여러 서비스에 걸친 복잡한 프로젝트의 경우 팀 간 조정이 어려워질 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;높은 WIP (Work in Progress)&lt;/strong&gt;: 각 팀이 항상 바쁘게 유지되어야 하므로 진행 중인 작업이 많아질 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;좁은 가치 흐름&lt;/strong&gt;: 이상적인 구현에서는 팀들이 완전히 분리되어 있어, 조직 전체의 가치 흐름이 좁아질 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;최적화되지 않은 우선순위 지정&lt;/strong&gt;: 팀의 가용성이 프로젝트 우선순위 결정의 주요 요인이 될 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;구현-시-고려사항&#34;&gt;구현 시 고려사항&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;팀 구성&lt;/strong&gt;: 각 서비스를 담당할 수 있는 cross-functional 팀을 구성해야 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;서비스 경계 정의&lt;/strong&gt;: 비즈니스 기능과 하위 도메인을 기반으로 서비스 경계를 명확히 정의해야 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;팀 간 커뮤니케이션&lt;/strong&gt;: API 설계와 변경에 대한 팀 간 효과적인 커뮤니케이션 채널을 구축해야 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;확장성 고려&lt;/strong&gt;: 새로운 팀을 추가하거나 기존 서비스를 분할할 때의 전략을 미리 수립해야 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;예시&#34;&gt;&lt;strong&gt;예시:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;대규모 전자상거래 플랫폼을 운영하는 기업을 예로 들어보자.&lt;br&gt;
이 기업은 다음과 같은 주요 비즈니스 기능을 가지고 있다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Decompose by Business Capability</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-business-capability/</link>
      <pubDate>Wed, 13 Nov 2024 01:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-business-capability/</guid>
      <description>&lt;h2 id=&#34;decompose-by-business-capability&#34;&gt;Decompose by Business Capability&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Decompose by Business Capability&amp;rdquo; 패턴은 마이크로서비스 아키텍처(MSA)에서 중요한 분해 패턴이다.&lt;br&gt;
이 패턴은 비즈니스 능력을 기반으로 애플리케이션을 마이크로서비스로 분해하는 방법을 제시한다.&lt;/p&gt;
&lt;p&gt;이 패턴은 조직의 비즈니스 능력을 기반으로 마이크로서비스를 정의한다.&lt;br&gt;
비즈니스 능력은 조직이 가치를 창출하기 위해 수행하는 특정 기능이나 프로세스를 의미한다.&lt;/p&gt;
&lt;p&gt;주요 목적은 다음과 같다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;비즈니스 목표와 소프트웨어 개발의 정렬&lt;/li&gt;
&lt;li&gt;독립적으로 개발 및 유지보수 가능한 서비스 생성&lt;/li&gt;
&lt;li&gt;조직 구조와 시스템 아키텍처의 일치&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 패턴을 효과적으로 적용하려면 조직의 비즈니스 도메인에 대한 깊은 이해가 필요하며, 지속적인 비즈니스 분석과 서비스 경계의 조정이 필요하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Decompose by Subdomain</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-subdomain/</link>
      <pubDate>Wed, 13 Nov 2024 01:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-subdomain/</guid>
      <description>&lt;h2 id=&#34;decompose-by-subdomain&#34;&gt;Decompose by Subdomain&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Decompose by Subdomain&amp;rdquo; 패턴은 마이크로서비스 아키텍처(MSA)에서 중요한 분해 패턴 중 하나이다.&lt;br&gt;
이 패턴은 도메인 주도 설계(DDD)의 개념을 기반으로 하며, 비즈니스 도메인을 여러 하위 도메인으로 나누어 마이크로서비스를 설계하는 방법이다.&lt;/p&gt;
&lt;p&gt;이 패턴을 효과적으로 적용하려면 비즈니스 도메인에 대한 깊은 이해와 지속적인 분석이 필요하다. 또한, 하위 도메인 간의 상호작용을 고려하여 서비스 간 통신을 설계해야 한다.&lt;/p&gt;
&lt;h3 id=&#34;주요-특징&#34;&gt;주요 특징&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;비즈니스 중심 접근: 기술적 세부사항보다 비즈니스 기능에 초점을 맞춘다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하위 도메인 분류:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;핵심(Core): 비즈니스의 핵심 차별화 요소&lt;/li&gt;
&lt;li&gt;지원(Supporting): 비즈니스 관련이지만 차별화 요소는 아님&lt;/li&gt;
&lt;li&gt;일반(Generic): 비즈니스 특화되지 않은 일반적 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;경계 설정: 각 하위 도메인은 명확한 경계(Bounded Context)를 가진다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
