<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Security on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/</link>
    <description>Recent content in Security on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 05 Oct 2024 12:08:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>API Key Authentication</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/api-key-authentication/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/api-key-authentication/</guid>
      <description>&lt;h2 id=&#34;api-key-authentication&#34;&gt;API Key Authentication&lt;/h2&gt;
&lt;p&gt;API Key Authentication은 마이크로서비스 아키텍처(MSA)에서 보안을 위해 사용되는 중요한 인증 방식이다.&lt;/p&gt;
&lt;p&gt;API Key Authentication은 클라이언트가 API에 접근할 때 고유한 식별자(API 키)를 사용하여 인증하는 방식이다. 이 키는 서버에서 생성하여 클라이언트에게 제공되며, 클라이언트는 API 요청 시 이 키를 포함시켜 자신의 신원을 증명한다.&lt;/p&gt;
&lt;p&gt;API Key Authentication은 구현이 간단하고 사용하기 쉽다는 장점이 있지만, 보안 측면에서는 제한적이다. 따라서 중요한 데이터나 높은 보안이 요구되는 서비스에는 OAuth2나 JWT와 같은 더 강력한 인증 방식을 고려해야 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CORS</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/cors/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/cors/</guid>
      <description>&lt;h2 id=&#34;cors&#34;&gt;CORS&lt;/h2&gt;
&lt;p&gt;마이크로서비스 아키텍처(MSA) 패턴의 보안 측면에서 CORS(Cross-Origin Resource Sharing)는 매우 중요한 역할을 한다.&lt;/p&gt;
&lt;p&gt;CORS는 웹 브라우저에서 구현된 보안 메커니즘으로, 다른 출처(도메인, 프로토콜, 포트)의 리소스에 접근할 수 있도록 허용하는 체계이다. 이는 동일 출처 정책(Same-Origin Policy)의 제한을 안전하게 우회할 수 있게 해준다.&lt;/p&gt;
&lt;p&gt;CORS는 MSA 환경에서 안전하고 유연한 리소스 공유를 가능하게 하는 핵심 메커니즘으로 올바르게 구현된 CORS는 마이크로서비스 간의 안전한 통신을 보장하며, 전체 시스템의 보안을 강화한다.&lt;/p&gt;
&lt;h3 id=&#34;cors의-작동-원리&#34;&gt;CORS의 작동 원리&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;브라우저가 다른 출처로 HTTP 요청을 보낼 때 Origin 헤더를 추가한다.&lt;/li&gt;
&lt;li&gt;서버는 Access-Control-Allow-Origin 헤더로 응답하여 해당 출처의 접근을 허용할지 결정한다.&lt;/li&gt;
&lt;li&gt;브라우저는 이 헤더를 확인하여 요청을 허용하거나 차단한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Origin의 정의&lt;br&gt;
Origin은 다음 세 가지 요소로 구성된다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mutual TLS</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/mutual-tls/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/mutual-tls/</guid>
      <description>&lt;h2 id=&#34;mutual-tls&#34;&gt;Mutual TLS&lt;/h2&gt;
&lt;p&gt;마이크로서비스 아키텍처(MSA) 패턴의 보안 측면에서 Mutual TLS(mTLS)는 매우 중요한 역할을 한다.&lt;/p&gt;
&lt;p&gt;mTLS는 마이크로서비스 아키텍처에서 보안을 강화하는 핵심 기술로, 서비스 간 통신의 신뢰성과 안전성을 크게 향상시킨다. 적절히 구현된 mTLS는 MSA 환경에서 강력한 보안 계층을 제공하여 전체 시스템의 안정성을 높이는 데 기여한다.&lt;/p&gt;
&lt;p&gt;Mutual TLS는 상호 TLS 또는 양방향 TLS라고도 불린다. 이는 클라이언트와 서버 간의 통신에서 양쪽 모두가 서로의 신원을 확인하는 인증 방식이다.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;img alt=&#34;mTLS&#34; loading=&#34;lazy&#34; src=&#34;https://buenhyden.github.io/img/how_mtls_works-what_is_mutual_tls.webp&#34;&gt;&lt;figcaption&gt;https://www.cloudflare.com/ko-kr/learning/access-management/what-is-mutual-tls/&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;일반-tls와의-차이점&#34;&gt;일반 TLS와의 차이점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;일반 TLS: 서버만 인증서를 제공하고 클라이언트가 서버의 신원을 확인한다.&lt;/li&gt;
&lt;li&gt;mTLS: 서버와 클라이언트 모두 인증서를 제공하고 서로의 신원을 확인한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;mtls의-작동-원리&#34;&gt;mTLS의 작동 원리&lt;/h3&gt;
&lt;p&gt;mTLS는 다음과 같은 단계로 작동한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OAuth2/OIDC (OpenID Connect)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/oauth2-oidc/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/oauth2-oidc/</guid>
      <description>&lt;h2 id=&#34;oauth2oidc-openid-connect&#34;&gt;OAuth2/OIDC (OpenID Connect)&lt;/h2&gt;
&lt;p&gt;MSA(Microservice Architecture) 패턴의 보안 측면에서 OAuth2와 OIDC(OpenID Connect)는 매우 중요한 역할을 한다. 이 두 프로토콜은 분산 시스템에서의 인증과 권한 부여를 효과적으로 처리할 수 있게 해준다.&lt;/p&gt;
&lt;p&gt;OAuth 2.0과 OIDC를 적절히 활용하면 MSA 환경에서 안전하고 효율적인 인증 및 권한 부여 시스템을 구축할 수 있다. 이는 마이크로서비스 간의 안전한 통신과 사용자 데이터 보호에 큰 도움이 된다.&lt;/p&gt;
&lt;h3 id=&#34;oauth-20&#34;&gt;OAuth 2.0&lt;/h3&gt;
&lt;p&gt;OAuth 2.0은 권한 부여를 위한 업계 표준 프로토콜이다.&lt;br&gt;
주요 특징은 다음과 같다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rate Limiting</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/rate-limiting/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/rate-limiting/</guid>
      <description>&lt;h2 id=&#34;rate-limiting&#34;&gt;Rate Limiting&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Secret Management</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/secret-management/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/secret-management/</guid>
      <description>&lt;h2 id=&#34;secret-management&#34;&gt;Secret Management&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Access Token</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/access-token/</link>
      <pubDate>Sat, 05 Oct 2024 11:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/access-token/</guid>
      <description>&lt;h2 id=&#34;access-token&#34;&gt;Access Token&lt;/h2&gt;
&lt;p&gt;Access Token은 마이크로서비스 아키텍처(MSA)에서 인증과 권한 부여를 위해 사용되는 보안 메커니즘이다.&lt;/p&gt;
&lt;p&gt;Access Token은 사용자의 인증 정보를 담고 있는 암호화된 문자열이다. 이 토큰은 클라이언트가 서버의 보호된 리소스에 접근할 수 있는 권한을 증명하는 데 사용된다.&lt;/p&gt;
&lt;p&gt;Access Token은 MSA 환경에서 효율적이고 안전한 인증 메커니즘을 제공한다.&lt;br&gt;
그러나 적절한 구현과 보안 조치가 필수적이며, 시스템의 요구사항에 맞게 신중하게 설계해야 한다.&lt;/p&gt;
&lt;h3 id=&#34;access-token의-특징&#34;&gt;Access Token의 특징&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;유한한 수명: 보통 짧은 유효 기간(예: 1시간)을 가진다.&lt;/li&gt;
&lt;li&gt;Stateless: 서버에 상태를 저장하지 않아 확장성이 높다.&lt;/li&gt;
&lt;li&gt;암호화: 대개 JWT(JSON Web Token) 형식으로 구현된다.&lt;/li&gt;
&lt;li&gt;포함 정보: 사용자 ID, 권한 범위, 만료 시간 등을 포함할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;access-token의-동작-방식&#34;&gt;Access Token의 동작 방식&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;사용자 인증: 사용자가 로그인하면 서버는 Access Token을 발급한다.&lt;/li&gt;
&lt;li&gt;토큰 저장: 클라이언트는 받은 토큰을 안전하게 저장한다(예: 로컬 스토리지).&lt;/li&gt;
&lt;li&gt;요청 시 사용: API 요청 시 Authorization 헤더에 토큰을 포함시킨다.&lt;/li&gt;
&lt;li&gt;서버 검증: 서버는 토큰의 유효성을 검사하고 요청을 처리한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;access-token의-장점&#34;&gt;Access Token의 장점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;확장성: Stateless 특성으로 서버 확장이 용이하다.&lt;/li&gt;
&lt;li&gt;보안성: 암호화된 정보로 중요 데이터를 안전하게 전송한다.&lt;/li&gt;
&lt;li&gt;효율성: 매 요청마다 사용자 정보를 조회할 필요가 없다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;access-token의-단점&#34;&gt;Access Token의 단점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;토큰 탈취 위험: XSS 공격 등으로 토큰이 탈취될 수 있다.&lt;/li&gt;
&lt;li&gt;제한된 정보량: 토큰 크기 제한으로 포함할 수 있는 정보가 제한적이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;access-token과-refresh-token&#34;&gt;Access Token과 Refresh Token&lt;/h3&gt;
&lt;p&gt;보안 강화를 위해 Access Token과 함께 Refresh Token을 사용한다:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
