<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MSA Pattern :: hyunyoun's Blog</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/</link><description>마이크로서비스 아키텍처의 주요 패턴</description><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Sat, 04 Jan 2025 02:22:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>State Management Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/</link><pubDate>Sat, 04 Jan 2025 02:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/</guid><description>State Management Patterns 참고 및 출처</description></item><item><title>Testing Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/</link><pubDate>Sat, 04 Jan 2025 02:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/</guid><description>Testing Patterns 참고 및 출처</description></item><item><title>Versioning Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/</link><pubDate>Sat, 04 Jan 2025 02:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/</guid><description>Versioning Patterns 참고 및 출처</description></item><item><title>Service Registry Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/</link><pubDate>Fri, 03 Jan 2025 02:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/</guid><description>Service Registry Patterns 참고 및 출처</description></item><item><title>Resilience Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/</link><pubDate>Fri, 03 Jan 2025 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/</guid><description>Resilience Patterns 참고 및 출처</description></item><item><title>Scalability Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/</link><pubDate>Fri, 03 Jan 2025 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/</guid><description>Scalability Patterns 참고 및 출처</description></item><item><title>Security Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/</link><pubDate>Thu, 02 Jan 2025 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/</guid><description>Security Patterns 참고 및 출처</description></item><item><title>Data Management Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/</link><pubDate>Thu, 02 Jan 2025 02:18:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/</guid><description>Data Management Patterns 참고 및 출처</description></item><item><title>Performance Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/</link><pubDate>Wed, 01 Jan 2025 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/</guid><description>Performance Patterns 참고 및 출처</description></item><item><title>Configuration Management Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/</link><pubDate>Mon, 30 Dec 2024 02:17:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/</guid><description>구성 관리 패턴은 애플리케이션의 설정 정보를 효율적으로 관리하고 유지하기 위한 방법들을 정의한다. 적절한 구성 관리는 시스템의 안정성과 유연성을 보장하는 데 필수적이다.</description></item><item><title>Observability Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/</link><pubDate>Sun, 29 Dec 2024 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/</guid><description>Observability Patterns 참고 및 출처</description></item><item><title>Communication Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/</link><pubDate>Sat, 28 Dec 2024 12:41:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/</guid><description>통신 패턴들은 마이크로서비스 아키텍처에서 서비스 간의 효율적인 통신을 가능하게 하며, 시스템의 확장성, 유연성, 성능을 향상시키는 데 중요한 역할을 한다.</description></item><item><title>Deployment Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/</link><pubDate>Thu, 26 Dec 2024 02:19:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/</guid><description>Deployment 참고 및 출처</description></item><item><title>Decomposition Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/</link><pubDate>Sun, 22 Dec 2024 02:19:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/</guid><description>Decomposition 참고 및 출처</description></item><item><title>Database Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/</link><pubDate>Wed, 27 Nov 2024 02:19:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/</guid><description>Database 참고 및 출처</description></item><item><title>Anti-Corruption Layer Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/anti-corruption-layer-pattern/</link><pubDate>Sun, 24 Nov 2024 10:07:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/anti-corruption-layer-pattern/</guid><description>Anti-Corruption Layer Pattern 참고 및 출처</description></item><item><title>Backend for Frontend Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/backend-for-frontend-pattern/</link><pubDate>Sun, 24 Nov 2024 10:07:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/backend-for-frontend-pattern/</guid><description>Backend for Frontend Pattern 참고 및 출처</description></item><item><title>Intergration Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/intergration-patterns/</link><pubDate>Sun, 24 Nov 2024 02:19:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/intergration-patterns/</guid><description>Intergration Patterns 참고 및 출처</description></item><item><title>Client-Side UI Composition Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/client-side-ui-composition-pattern/</link><pubDate>Sun, 24 Nov 2024 02:01:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/client-side-ui-composition-pattern/</guid><description>Client-Side UI Composition Pattern 참고 및 출처</description></item><item><title>Aggregator Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/aggregator-pattern/</link><pubDate>Sun, 24 Nov 2024 02:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/aggregator-pattern/</guid><description>Aggregator Pattern 참고 및 출처</description></item><item><title>Gateway Routing Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/gateway-routing-pattern/</link><pubDate>Sun, 24 Nov 2024 02:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/gateway-routing-pattern/</guid><description>Gateway Routing Pattern 참고 및 출처</description></item><item><title>Proxy Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/proxy-pattern/</link><pubDate>Sun, 24 Nov 2024 02:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/proxy-pattern/</guid><description>Proxy Pattern 참고 및 출처</description></item><item><title>API Gateway Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/api-gateway-pattern/</link><pubDate>Sun, 24 Nov 2024 01:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/api-gateway-pattern/</guid><description>API Gateway Pattern 참고 및 출처</description></item><item><title>Cross-Cutting Concern Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/</link><pubDate>Tue, 19 Nov 2024 02:18:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/</guid><description>Ambassador pattern, Service Discovery pattern, Service Mesh pattern, 그리고 Sidecar pattern은 모두 마이크로서비스 아키텍처에서 발생하는 cross-cutting concern(횡단 관심사)를 해결하기 위한 디자인 패턴들이다.</description></item></channel></rss>