<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Testing on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/</link>
    <description>Recent content in Testing on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 18 Nov 2024 10:59:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Consumer-side contract test</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/consumer-side-contract-test/</link>
      <pubDate>Mon, 18 Nov 2024 10:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/consumer-side-contract-test/</guid>
      <description>&lt;h2 id=&#34;consumer-side-contract-test&#34;&gt;Consumer-side Contract Test&lt;/h2&gt;
&lt;p&gt;Consumer-side contract test는 마이크로서비스 아키텍처(MSA)의 테스팅 패턴 중 하나로, 서비스 간 상호작용을 검증하는 중요한 방법이다.&lt;/p&gt;
&lt;p&gt;Consumer-side contract test는 서비스 소비자(consumer)가 제공자(provider)와의 상호작용에 대한 기대치를 정의하고 검증하는 테스트이다. 이 테스트는 실제 제공자 서비스 대신 모의(mock) 제공자를 사용하여 수행된다.&lt;/p&gt;
&lt;p&gt;Consumer-side contract test는 MSA 환경에서 서비스 간 상호작용을 효과적으로 검증하고, 개발 팀 간의 명확한 커뮤니케이션을 촉진한다. 이를 통해 개발자들은 더 안정적이고 유연한 마이크로서비스를 구축할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;주요-특징&#34;&gt;주요 특징&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;소비자 중심: 소비자의 요구사항과 기대치에 초점을 맞춘다.&lt;/li&gt;
&lt;li&gt;격리된 테스트: 실제 제공자 없이 테스트를 수행할 수 있다.&lt;/li&gt;
&lt;li&gt;빠른 피드백: 통합 문제를 조기에 발견할 수 있다.&lt;/li&gt;
&lt;li&gt;계약 생성: 테스트 결과로 소비자와 제공자 간의 계약(contract)이 생성된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;구현-단계&#34;&gt;구현 단계&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;모의 제공자 설정: 소비자는 예상되는 요청과 응답을 정의한 모의 제공자를 생성한다.&lt;/li&gt;
&lt;li&gt;테스트 작성: 소비자는 모의 제공자와의 상호작용을 테스트하는 코드를 작성한다.&lt;/li&gt;
&lt;li&gt;테스트 실행: 작성된 테스트를 실행하여 소비자 코드가 예상대로 동작하는지 확인한다.&lt;/li&gt;
&lt;li&gt;계약 생성: 테스트 실행 결과를 바탕으로 계약 파일(예: Pact 파일)이 생성된다.&lt;/li&gt;
&lt;li&gt;계약 공유: 생성된 계약을 제공자와 공유한다(예: Pact Broker를 통해).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;장점&#34;&gt;장점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;빠른 개발 주기: 실제 제공자 없이 테스트할 수 있어 개발 속도가 향상된다.&lt;/li&gt;
&lt;li&gt;명확한 기대치 설정: 소비자의 요구사항이 명확히 문서화된다.&lt;/li&gt;
&lt;li&gt;독립적인 개발: 소비자와 제공자 팀이 독립적으로 작업할 수 있다.&lt;/li&gt;
&lt;li&gt;조기 오류 감지: 통합 문제를 초기 단계에서 발견할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;주의사항&#34;&gt;주의사항&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;과도한 모의: 실제 제공자의 동작과 차이가 있을 수 있으므로 주의가 필요하다.&lt;/li&gt;
&lt;li&gt;유지보수: 계약이 변경될 때마다 테스트를 업데이트해야 한다.&lt;/li&gt;
&lt;li&gt;완전성 부족: 전체 시스템 동작을 검증하지는 않으므로 다른 테스트 방법과 병행해야 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Consumer-Driven Contract Testing</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/consumer-driven-contract-testing/</link>
      <pubDate>Mon, 18 Nov 2024 03:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/consumer-driven-contract-testing/</guid>
      <description>&lt;h2 id=&#34;consumer-driven-contract-testing&#34;&gt;Consumer-Driven Contract Testing&lt;/h2&gt;
&lt;p&gt;Consumer-Driven Contract Testing(CDC)은 마이크로서비스 아키텍처(MSA)의 중요한 테스팅 패턴 중 하나이다.&lt;br&gt;
이 패턴은 서비스 소비자(consumer)와 제공자(provider) 간의 상호작용을 검증하는 방법이다.&lt;/p&gt;
&lt;p&gt;CDC는 소비자의 기대치에 따라 제공자의 호환성을 보장하는 계약 테스트 유형이다. 소비자가 제공자에 대한 기대사항을 정의하고, 이를 계약으로 생성하여 제공자와 공유한다.&lt;/p&gt;
&lt;p&gt;CDC는 서비스 간 상호작용을 효과적으로 검증하고, 개발 팀 간의 명확한 커뮤니케이션을 촉진하는 강력한 테스팅 방법이다. 이를 통해 개발자들은 더 안정적이고 유연한 마이크로서비스를 구축할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;주요-특징&#34;&gt;주요 특징&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;소비자 중심: 소비자가 테스트의 주도권을 가진다.&lt;/li&gt;
&lt;li&gt;실제 시나리오 기반: 실제 소비자들이 사용하는 시나리오로 서비스를 테스트한다.&lt;/li&gt;
&lt;li&gt;격리된 테스트: 전체 시스템을 구동하지 않고 개별 컴포넌트 간 상호작용을 테스트한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;구현-단계&#34;&gt;구현 단계&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;소비자 테스트 작성: 소비자는 제공자 목(mock)을 사용하여 통합 테스트를 작성한다.&lt;/li&gt;
&lt;li&gt;계약 생성: 테스트 실행 결과로 계약 파일(예: Pact)이 생성된다.&lt;/li&gt;
&lt;li&gt;계약 공유: 생성된 계약을 중앙 저장소(Contract Broker)에 저장한다.&lt;/li&gt;
&lt;li&gt;제공자 검증: 제공자는 계약을 가져와 자신의 구현과 비교하여 검증한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;장점&#34;&gt;장점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;빠른 피드백: 통합 문제를 조기에 발견할 수 있다.&lt;/li&gt;
&lt;li&gt;독립적인 개발: 소비자와 제공자 팀이 독립적으로 작업할 수 있다.&lt;/li&gt;
&lt;li&gt;불필요한 기능 방지: 실제 사용되는 부분만 테스트되어 효율적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;주의사항&#34;&gt;주의사항&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;계약은 정적 문서가 아닌 실행 가능한 테스트 케이스 모음.&lt;/li&gt;
&lt;li&gt;계약은 모든 가능한 상태를 설명하는 것이 아니라 구체적인 요청/응답 쌍을 정의.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;도구&#34;&gt;도구&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pact: CDC 테스팅을 위한 대표적인 도구.&lt;/li&gt;
&lt;li&gt;Testsigma: CDC 테스팅을 지원하는 또 다른 도구.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Service Component Test</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/service-component-test/</link>
      <pubDate>Mon, 18 Nov 2024 03:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/service-component-test/</guid>
      <description>&lt;h2 id=&#34;service-component-test&#34;&gt;Service Component Test&lt;/h2&gt;
&lt;p&gt;Service Component Test Pattern은 마이크로서비스 아키텍처(MSA)에서 개별 서비스 컴포넌트를 테스트하기 위한 중요한 패턴이다.&lt;/p&gt;
&lt;p&gt;Service Component Test Pattern은 마이크로서비스의 개별 컴포넌트를 격리된 환경에서 테스트하는 방법이다.&lt;br&gt;
이 패턴의 목적은 각 서비스가 독립적으로 올바르게 작동하는지 확인하는 것이다.&lt;/p&gt;
&lt;p&gt;Service Component Test Pattern은 마이크로서비스의 개별 컴포넌트를 효과적으로 테스트할 수 있게 해주는 중요한 패턴이다. 이를 통해 개발자는 자신이 담당하는 서비스의 품질을 높이고, 전체 시스템의 안정성을 향상시킬 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;주요-특징&#34;&gt;주요 특징&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;격리성: 각 서비스 컴포넌트를 다른 서비스나 외부 의존성으로부터 격리하여 테스트한다.&lt;/li&gt;
&lt;li&gt;경량성: 전체 시스템을 구동하지 않고 개별 서비스만을 테스트하므로 빠르고 효율적이다.&lt;/li&gt;
&lt;li&gt;집중성: 특정 서비스의 비즈니스 로직과 기능에 집중하여 테스트한다.&lt;/li&gt;
&lt;li&gt;반복 가능성: 테스트를 쉽게 반복할 수 있어 지속적 통합(CI) 환경에 적합하다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;구현-방법&#34;&gt;구현 방법&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;테스트 환경 설정:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
