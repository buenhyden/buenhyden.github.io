<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Design and Architecture :: hyunyoun's Blog</title><link>https://buenhyden.github.io/posts/software-design-and-architecture.html</link><description>Software Architecture란 소프트웨어 시스템의 기본적인 구조와 조직을 정의하는 것이다.</description><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Mon, 13 Jan 2025 05:27:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/posts/software-design-and-architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Programming Paradigm</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms.html</link><pubDate>Sat, 05 Oct 2024 04:38:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms.html</guid><description>코드를 효율적이고 유지보수가 용이하게 작성하기 위한 다양한 접근 방식</description></item><item><title>Software Architecture Principles</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles.html</link><pubDate>Mon, 13 Jan 2025 05:27:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles.html</guid><description>Software Architecture Principles는 효율적이고 유지보수가 용이한 소프트웨어 시스템을 설계하기 위한 핵심 지침이다. 이러한 원칙들을 적절히 적용함으로써, 개발자들은 유지보수가 용이하고, 확장 가능하며, 재사용성이 높은 소프트웨어 시스템을 설계할 수 있다.</description></item><item><title>Software Design Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns.html</link><pubDate>Thu, 10 Oct 2024 07:57:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns.html</guid><description>자주 발생하는 문제들을 해결하기 위한 재사용 가능한 설계 템플릿</description></item><item><title>Software Architecture Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns.html</link><pubDate>Sun, 10 Nov 2024 05:46:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns.html</guid><description>주어진 상황에서의 소프트웨어 아키텍쳐에서 일반적으로 발생하는 문제점들에 대한 일반화되고 재사용 가능한 솔루션이다. 아키텍쳐 패턴은 소프트웨어 디자인 패턴과 유사하지만 더 큰 범주에 속한다.</description></item><item><title>MSA Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns.html</link><pubDate>Tue, 19 Nov 2024 09:15:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns.html</guid><description>마이크로서비스 아키텍처의 주요 패턴</description></item><item><title>프로그램 설계 방법론</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%84%A4%EA%B3%84-%EB%B0%A9%EB%B2%95%EB%A1%A0.html</link><pubDate>Thu, 03 Oct 2024 05:52:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%84%A4%EA%B3%84-%EB%B0%A9%EB%B2%95%EB%A1%A0.html</guid><description>소프트웨어 개발 과정에서 시스템을 구조화하고 모듈화하는 체계적인 접근 방식</description></item><item><title>클린 코드 (Clean Code)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/clean-code.html</link><pubDate>Sun, 22 Sep 2024 05:44:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/clean-code.html</guid><description>프로그램의 동작을 보장하면서도 가독성이 뛰어나고 유지보수가 쉬운 코드</description></item></channel></rss>