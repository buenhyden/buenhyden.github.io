<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Process Synchronization :: hyunyoun's Blog</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization.html</link><description>여러 프로세스가 공유하는 자원의 일관성을 유지하기 위한 메커니즘</description><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Sat, 30 Nov 2024 10:47:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/index.xml" rel="self" type="application/rss+xml"/><item><title>데커 알고리즘 (Dekker's Algorithm)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/dekkers-algorithm.html</link><pubDate>Sat, 30 Nov 2024 10:47:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/dekkers-algorithm.html</guid><description>데커 알고리즘 (Dekker’s Algorithm) 참고 및 출처</description></item><item><title>램포트의 빵집 알고리즘 (Lamport's Bakery Algorithm)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/lamports-bakery-algorithm.html</link><pubDate>Sat, 30 Nov 2024 10:47:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/lamports-bakery-algorithm.html</guid><description>램포트의 빵집 알고리즘 (Lamport’s Bakery Algorithm) 참고 및 출처</description></item><item><title>피터슨 알고리즘 (Peterson's Algorithm)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/petersons-algorithm.html</link><pubDate>Sat, 30 Nov 2024 10:47:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/petersons-algorithm.html</guid><description>피터슨 알고리즘 (Peterson’s Algorithm) 참고 및 출처</description></item><item><title>Mutex</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/mutex.html</link><pubDate>Thu, 28 Nov 2024 11:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/mutex.html</guid><description>Mutex(Mutual Exclusion)는 공유 자원에 대한 접근을 동기화하는 객체.</description></item><item><title>Monitor</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/monitor.html</link><pubDate>Thu, 28 Nov 2024 10:54:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/monitor.html</guid><description>Monitor 참고 및 출처</description></item><item><title>Semaphore</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/semaphore.html</link><pubDate>Thu, 28 Nov 2024 10:54:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/semaphore.html</guid><description>멀티스레딩 환경에서 공유 자원에 대한 접근을 제어하는 동기화 도구</description></item><item><title>조건 변수 (Condition Variable)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/condition-variable.html</link><pubDate>Thu, 28 Nov 2024 10:54:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/condition-variable.html</guid><description>조건 변수(Condition Variables)는 프로세스 동기화에서 중요한 역할을 하는 동기화 기본 요소로, 스레드가 특정 조건이 충족될 때까지 대기하도록 하는 메커니즘을 제공한다.</description></item><item><title>원자적 연산 (Atomic Operation)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/atomic-operation.html</link><pubDate>Thu, 28 Nov 2024 10:48:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/atomic-operation.html</guid><description>원자적 연산이란, 더 이상 쪼개질 수 없는 최소 단위의 연산을 의미하는데 중단되거나 간섭받지 않고 완전히 실행되는 연산을 말한다.</description></item></channel></rss>