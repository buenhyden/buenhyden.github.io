<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Process Management</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/</link><description>Recent content in Process Management on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/index.xml" rel="self" type="application/rss+xml"/><item><title>프로세스 제어 블록(Process Control Block, PCB)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-control-block/</link><pubDate>Wed, 15 Jan 2025 06:59:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-control-block/</guid><description>
&lt;h2>프로세스 제어 블록(Process Control Block, PCB)&lt;/h2>&lt;p>프로세스 제어 블록(Process Control Block, PCB)은 운영 체제에서 프로세스를 관리하기 위해 사용하는 핵심적인 데이터 구조이다.&lt;br>
PCB는 각 프로세스에 대한 중요한 정보를 저장하고 관리하며, 운영 체제가 프로세스를 효율적으로 제어하고 실행할 수 있게 한다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Process%20Mgmt/process---------control---------block.webp"
alt="Process Control Block"
loading="lazy" />
&lt;/figure>&lt;br>
_Sourece: &lt;a href="https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/&lt;/a> _&lt;/p>
&lt;h3>PCB의 주요 구성 요소&lt;/h3>&lt;ol>
&lt;li>프로세스 식별자(Process ID, PID): 각 프로세스에 할당되는 고유한 식별 번호이다.&lt;/li>
&lt;li>프로세스 상태(Process State): 프로세스의 현재 상태를 나타낸다. 주요 상태로는 생성(new), 준비(ready), 실행(running), 대기(waiting), 종료(terminated) 등이 있다.&lt;/li>
&lt;li>프로그램 카운터(Program Counter): 다음에 실행할 명령어의 주소를 가리킨다.&lt;/li>
&lt;li>CPU 레지스터: 프로세스가 CPU를 사용할 때의 레지스터 정보를 저장한다.&lt;/li>
&lt;li>CPU 스케줄링 정보: 프로세스의 우선순위, CPU 사용 시간 등 스케줄링에 필요한 정보를 포함한다.&lt;/li>
&lt;li>메모리 관리 정보: 프로세스의 메모리 할당 정보, 페이지 테이블 등을 저장한다.&lt;/li>
&lt;li>입출력 상태 정보: 프로세스에 할당된 입출력 장치, 열린 파일 목록 등을 관리한다.&lt;/li>
&lt;li>계정 정보: CPU 사용 시간, 메모리 사용량 등 프로세스의 리소스 사용 정보를 추적한다.&lt;/li>
&lt;/ol>
&lt;h3>PCB의 역할과 중요성&lt;/h3>&lt;ol>
&lt;li>프로세스 관리: PCB는 운영 체제가 프로세스의 생명주기를 관리하는 데 필수적이다.&lt;/li>
&lt;li>컨텍스트 스위칭: PCB는 프로세스 간 전환 시 현재 상태를 저장하고 복원하는 데 사용된다.&lt;/li>
&lt;li>스케줄링: 운영 체제는 PCB의 정보를 바탕으로 프로세스 스케줄링 결정을 내린다.&lt;/li>
&lt;li>리소스 관리: PCB는 프로세스에 할당된 리소스를 추적하고 관리한다.&lt;/li>
&lt;li>동기화 및 통신: 프로세스 간 동기화와 통신에 필요한 정보를 저장한다.&lt;/li>
&lt;/ol>
&lt;h3>PCB의 생명주기&lt;/h3>&lt;ol>
&lt;li>프로세스 생성 시 PCB가 생성되고 초기화된다.&lt;/li>
&lt;li>프로세스 실행 중 PCB 정보가 지속적으로 업데이트된다.&lt;/li>
&lt;li>프로세스 종료 시 PCB가 제거된다.&lt;/li>
&lt;/ol>
&lt;h3>PCB의 구현 및 저장&lt;/h3>&lt;p>PCB는 운영 체제 커널의 보호된 메모리 영역에 저장된다.&lt;br>
일부 운영 체제에서는 PCB를 커널 스택의 시작 부분에 위치시킨다.&lt;/p>
&lt;h3>PCB의 장단점&lt;/h3>&lt;p>장점:&lt;/p>
&lt;ul>
&lt;li>효율적인 프로세스 관리와 스케줄링 가능&lt;/li>
&lt;li>멀티태스킹 지원&lt;/li>
&lt;li>리소스 사용 최적화&lt;/li>
&lt;/ul>
&lt;p>단점:&lt;/p>
&lt;ul>
&lt;li>PCB 관리에 따른 메모리 오버헤드 발생&lt;/li>
&lt;li>잦은 컨텍스트 스위칭 시 성능 저하 가능성&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Context Switching</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/context-switching/</link><pubDate>Wed, 15 Jan 2025 01:00:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/context-switching/</guid><description>
&lt;h2>Context Switching&lt;/h2>&lt;p>Context Switching은 운영 체제에서 매우 중요한 개념으로, 여러 프로세스나 스레드가 단일 CPU 자원을 공유하여 효율적으로 실행될 수 있게 하는 메커니즘이다.&lt;/p>
&lt;p>Context Switching은 CPU가 현재 실행 중인 프로세스나 스레드의 상태를 저장하고, 다른 프로세스나 스레드의 상태를 불러와 실행을 재개하는 과정을 말한다.&lt;br>
이를 통해 여러 작업이 동시에 실행되는 것처럼 보이게 된다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Process%20Mgmt/swapping1.png"
alt="Context Switching"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/context-switch-in-operating-system/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/context-switch-in-operating-system/&lt;/a> _&lt;/p>
&lt;h3>Context Switching의 필요성&lt;/h3>&lt;ol>
&lt;li>멀티태스킹: 여러 프로세스가 동시에 실행되는 것처럼 보이게 하여 시스템 효율성을 높인다.&lt;/li>
&lt;li>인터럽트 처리: 하드웨어 인터럽트나 시스템 호출 등에 신속하게 대응할 수 있다.&lt;/li>
&lt;li>자원 공유: 단일 CPU로 여러 프로세스를 실행할 수 있게 한다.&lt;/li>
&lt;/ol>
&lt;h3>Context Switching의 과정&lt;/h3>&lt;ol>
&lt;li>현재 실행 중인 프로세스의 상태 저장: CPU 레지스터, 프로그램 카운터 등의 정보를 PCB(Process Control Block)에 저장한다.&lt;/li>
&lt;li>새로운 프로세스 선택: 스케줄러가 다음에 실행할 프로세스를 선택한다.&lt;/li>
&lt;li>새 프로세스의 상태 복원: 선택된 프로세스의 PCB에서 상태 정보를 불러와 CPU 레지스터에 복원한다.&lt;/li>
&lt;li>실행 재개: 새 프로세스의 실행을 시작한다.&lt;/li>
&lt;/ol>
&lt;h3>Context Switching의 트리거&lt;/h3>&lt;ol>
&lt;li>인터럽트: 하드웨어나 소프트웨어에서 발생하는 인터럽트.&lt;/li>
&lt;li>시간 할당 종료: 프로세스에 할당된 CPU 시간이 끝났을 때.&lt;/li>
&lt;li>I/O 요청: 프로세스가 I/O 작업을 요청하여 대기 상태로 전환될 때.&lt;/li>
&lt;li>우선순위: 더 높은 우선순위의 프로세스가 실행 준비될 때.&lt;/li>
&lt;/ol>
&lt;h3>Context Switching의 구현 방식&lt;/h3>&lt;ol>
&lt;li>하드웨어 스위칭: 프로세서 코어에 내장된 태스크 상태 세그먼트(TSS)를 사용한다.&lt;/li>
&lt;li>소프트웨어 스위칭: 운영 체제의 커널 루틴과 데이터 구조를 사용하여 구현한다. 더 빠르고 일관성 있는 방식이다.&lt;/li>
&lt;/ol>
&lt;h3>Context Switching의 장단점&lt;/h3>&lt;p>장점:&lt;/p>
&lt;ul>
&lt;li>멀티태스킹 지원: 여러 프로세스를 동시에 실행하는 것처럼 보이게 한다.&lt;/li>
&lt;li>자원 활용 최적화: CPU 사용을 최적화하여 시스템 효율성을 높인다.&lt;/li>
&lt;/ul>
&lt;p>단점:&lt;/p>
&lt;ul>
&lt;li>오버헤드: Context Switching 자체가 CPU 시간을 소모한다.&lt;/li>
&lt;li>캐시 미스: 프로세스 전환 시 캐시 데이터가 무효화될 수 있다.&lt;/li>
&lt;li>지연 시간: 빈번한 Context Switching은 전체적인 시스템 성능을 저하시킬 수 있다.&lt;/li>
&lt;/ul>
&lt;h3>Context Switching 최적화&lt;/h3>&lt;ol>
&lt;li>프로세스 우선순위 조정: 중요한 프로세스에 더 높은 우선순위 부여.&lt;/li>
&lt;li>스레드 사용: 프로세스 내 스레드 사용으로 Context Switching 비용 감소.&lt;/li>
&lt;li>인터럽트 처리 최적화: 효율적인 인터럽트 처리로 불필요한 Context Switching 감소.&lt;/li>
&lt;li>캐시 최적화: 캐시 친화적인 데이터 구조와 알고리즘 사용.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Process Scheduling</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-scheduling/</link><pubDate>Sun, 29 Sep 2024 06:21:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-scheduling/</guid><description>
&lt;h2>프로세스 스케쥴링 (Process Scheduling)&lt;/h2>&lt;p>프로세스 스케줄링은 컴퓨터의 CPU 자원을 여러 프로세스에 효율적으로 할당하는 방법을 결정하는 메커니즘.&lt;br>
프로세스 스케줄링도 다양한 요소를 고려하여 최적의 실행 순서를 결정한다.&lt;/p>
&lt;h3>주요 특징&lt;/h3>&lt;ol>
&lt;li>CPU 활용도 극대화: I/O 대기 시간 동안 다른 프로세스에 CPU를 할당하여 유휴 시간을 최소화합니다.&lt;/li>
&lt;li>처리량 증가: 단위 시간당 완료되는 프로세스의 수를 늘립니다.&lt;/li>
&lt;li>응답 시간 최소화: 사용자 요청에 대한 시스템의 반응 속도를 향상시킵니다.&lt;/li>
&lt;li>대기 시간 감소: 프로세스가 준비 큐에서 기다리는 시간을 줄입니다.&lt;/li>
&lt;li>공정성 유지: 모든 프로세스에 적절한 CPU 시간을 할당합니다.&lt;/li>
&lt;/ol>
&lt;h3>스케줄링의 목적&lt;/h3>&lt;ol>
&lt;li>
&lt;p>CPU 활용도 최대화&lt;/p>
&lt;ul>
&lt;li>CPU가 쉬는 시간을 최소화&lt;/li>
&lt;li>가능한 한 많은 작업 처리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>처리량(Throughput) 향상&lt;/p>
&lt;ul>
&lt;li>단위 시간당 완료되는 프로세스 수 증가&lt;/li>
&lt;li>시스템 전체의 효율성 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>응답 시간 최소화&lt;/p>
&lt;ul>
&lt;li>사용자 요청에 대한 빠른 반응&lt;/li>
&lt;li>대화형 시스템에서 특히 중요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>대기 시간 최소화&lt;/p>
&lt;ul>
&lt;li>프로세스가 준비 큐에서 기다리는 시간 감소&lt;/li>
&lt;li>전체적인 시스템 성능 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스케줄링 방식&lt;/h3>&lt;ul>
&lt;li>선점형: 실행 중인 프로세스를 중단하고 다른 프로세스에 CPU를 할당할 수 있다.&lt;/li>
&lt;li>비선점형: 실행 중인 프로세스가 자발적으로 CPU를 반환할 때까지 기다린다.&lt;/li>
&lt;/ul>
&lt;p>PCB(Process Control Block) 는프로세스 스케줄링에 다음과 같은 방식으로 기여한다:&lt;/p>
&lt;ol>
&lt;li>프로세스 상태 관리: PCB는 프로세스의 현재 상태(실행 중, 준비, 대기 등)를 저장한다. 스케줄러는 이 정보를 사용하여 실행 가능한 프로세스를 식별하고 선택한다.&lt;/li>
&lt;li>스케줄링 정보 제공: PCB에는 프로세스의 우선순위, CPU 사용 시간 등 스케줄링에 필요한 정보가 포함되어 있다. 스케줄러는 이 정보를 바탕으로 다음에 실행할 프로세스를 결정한다.&lt;/li>
&lt;li>컨텍스트 스위칭 지원: PCB는 프로세스의 레지스터 값, 프로그램 카운터 등을 저장하여 컨텍스트 스위칭을 가능하게 한다. 이를 통해 스케줄러는 프로세스 간 전환을 효율적으로 수행할 수 있다.&lt;/li>
&lt;li>리소스 할당 정보 저장: PCB는 프로세스에 할당된 메모리, 열린 파일 등의 리소스 정보를 포함한다. 스케줄러는 이 정보를 사용하여 리소스 경쟁을 관리하고 데드락을 방지한다.&lt;/li>
&lt;li>성능 모니터링: PCB에 저장된 CPU 사용 시간, 대기 시간 등의 정보는 스케줄러가 시스템 성능을 모니터링하고 최적화하는 데 사용된다.&lt;/li>
&lt;/ol>
&lt;p>이러한 기여를 통해 PCB는 운영 체제가 효율적인 프로세스 스케줄링을 수행하고, 시스템 자원을 최적화하며, 전반적인 시스템 성능을 향상시키는 데 중요한 역할을 한다.&lt;/p>
&lt;h3>주요 스케줄링 알고리즘&lt;/h3>&lt;h4>선입선출(FCFS, First-Come, First-Served)&lt;/h4>&lt;p>이는 가장 단순한 스케줄링 방식으로, 먼저 도착한 프로세스를 먼저 처리한다.&lt;/p>
&lt;h5>예시&lt;/h5>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># FCFS 스케줄링 시뮬레이션&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">processes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">fcfs_scheduling&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">processes&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">sorted&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">processes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">current_time&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">waiting_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_time&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Process &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">: Waiting Time = &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">waiting_time&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>최단 작업 우선(SJF, Shortest Job First)&lt;/h4>&lt;p>실행 시간이 가장 짧은 프로세스를 우선적으로 처리하는 방식.&lt;/p>
&lt;h5>특징&lt;/h5>&lt;ul>
&lt;li>평균 대기 시간 최소화&lt;/li>
&lt;li>실행 시간 예측 필요&lt;/li>
&lt;li>기아 현상 발생 가능&lt;/li>
&lt;/ul>
&lt;h4>라운드 로빈(Round Robin)&lt;/h4>&lt;p>각 프로세스에 동일한 시간 할당량을 부여하고 순환하며 실행하는 방식.&lt;/p>
&lt;h5>구현 예시&lt;/h5>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">round_robin_scheduling&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">processes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">time_quantum&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ready_queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">processes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">copy&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">ready_queue&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ready_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">time_quantum&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">time_quantum&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">time_quantum&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ready_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>우선순위 스케줄링(Priority Scheduling)&lt;/h4>&lt;p>각 프로세스에 우선순위를 부여하고, 높은 우선순위의 프로세스를 먼저 실행한다.&lt;/p>
&lt;h5>고려사항&lt;/h5>&lt;ul>
&lt;li>우선순위 결정 기준&lt;/li>
&lt;li>우선순위 역전 현상&lt;/li>
&lt;li>에이징(Aging) 기법 적용&lt;/li>
&lt;/ul>
&lt;h4>다단계 큐(Multilevel Queue)&lt;/h4>&lt;p>프로세스들을 여러 종류의 큐로 분류하여 관리하는 방식.&lt;/p>
&lt;h5>구성&lt;/h5>&lt;ul>
&lt;li>전위큐(Foreground Queue)&lt;/li>
&lt;li>후위큐(Background Queue)&lt;/li>
&lt;li>각 큐별 다른 스케줄링 알고리즘 적용&lt;/li>
&lt;/ul>
&lt;h3>실제 운영체제의 스케줄링&lt;/h3>&lt;ol>
&lt;li>
&lt;p>Linux의 CFS(Completely Fair Scheduler)&lt;/p>
&lt;ul>
&lt;li>프로세스 간 CPU 시간을 공정하게 분배&lt;/li>
&lt;li>레드-블랙 트리 사용&lt;/li>
&lt;li>동적 우선순위 조정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Windows의 다단계 피드백 큐&lt;/p>
&lt;ul>
&lt;li>프로세스의 행동에 따라 우선순위 동적 조정&lt;/li>
&lt;li>I/O 중심과 CPU 중심 프로세스 구분&lt;/li>
&lt;li>응답성과 처리량 균형 조정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스케줄링 성능 평가 지표&lt;/h3>&lt;ol>
&lt;li>
&lt;p>CPU 활용률&lt;/p>
&lt;ul>
&lt;li>CPU가 실제 작업을 처리하는 비율&lt;/li>
&lt;li>높을수록 효율적&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>처리량&lt;/p>
&lt;ul>
&lt;li>단위 시간당 완료되는 프로세스 수&lt;/li>
&lt;li>시스템 성능 지표&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>턴어라운드 타임&lt;/p>
&lt;ul>
&lt;li>프로세스 시작부터 종료까지 걸리는 시간&lt;/li>
&lt;li>전체적인 작업 처리 시간&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>대기 시간&lt;/p>
&lt;ul>
&lt;li>프로세스가 실행을 기다리는 시간&lt;/li>
&lt;li>짧을수록 좋음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>응답 시간&lt;/p>
&lt;ul>
&lt;li>요청부터 첫 응답까지의 시간&lt;/li>
&lt;li>대화형 시스템에서 중요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스케줄링 고려사항과 최적화&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시스템 특성&lt;/p>
&lt;ul>
&lt;li>배치 시스템&lt;/li>
&lt;li>대화형 시스템&lt;/li>
&lt;li>실시간 시스템&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>프로세스 특성&lt;/p>
&lt;ul>
&lt;li>CPU 중심 vs I/O 중심&lt;/li>
&lt;li>메모리 사용량&lt;/li>
&lt;li>우선순위&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>시스템 부하&lt;/p>
&lt;ul>
&lt;li>현재 실행 중인 프로세스 수&lt;/li>
&lt;li>가용 자원 상태&lt;/li>
&lt;li>시스템 병목 현상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>새로운 트렌드와 발전 방향&lt;/h3>&lt;ol>
&lt;li>
&lt;p>멀티코어 스케줄링&lt;/p>
&lt;ul>
&lt;li>코어 간 로드 밸런싱&lt;/li>
&lt;li>캐시 친화적 스케줄링&lt;/li>
&lt;li>에너지 효율성 고려&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>가상화 환경&lt;/p>
&lt;ul>
&lt;li>가상 머신 간 자원 할당&lt;/li>
&lt;li>호스트-게스트 OS 조정&lt;/li>
&lt;li>실시간 마이그레이션&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>클라우드 환경&lt;/p>
&lt;ul>
&lt;li>탄력적 자원 할당&lt;/li>
&lt;li>서비스 수준 협약(SLA) 준수&lt;/li>
&lt;li>비용 최적화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>프로세스 간 통신 (Inter-Process Communication, IPC)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/</link><pubDate>Sun, 29 Sep 2024 06:20:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/</guid><description>
&lt;h2>프로세스 간 통신 (Inter-Process Communication, IPC)&lt;/h2>&lt;p>프로세스 간 통신은 서로 다른 프로세스들이 데이터를 주고받거나 서로의 동작을 조율하기 위해 사용하는 메커니즘.&lt;br>
한 프로세스의 출력이 다른 프로세스의 입력으로 사용될 수 있다.&lt;br>
이를 통해 프로세스들은 데이터를 교환하고, 작업을 동기화하며, 리소스를 효율적으로 활용할 수 있다.&lt;/p>
&lt;p>프로세스 간 통신(IPC)에 대해 체계적으로 설명해드리겠습니다. 이 개념을 더 쉽게 이해하기 위해, 실제 생활의 예시와 함께 설명을 시작하겠습니다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Process%20Mgmt/IPC/1-76.png"
alt="Shared Memory and Message Passing"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/inter-process-communication-ipc/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/inter-process-communication-ipc/&lt;/a> _&lt;/p>
&lt;h3>장점&lt;/h3>&lt;ul>
&lt;li>프로세스 간 데이터 공유 및 협력 가능&lt;/li>
&lt;li>모듈화 및 유연한 시스템 설계 가능&lt;/li>
&lt;/ul>
&lt;h3>단점&lt;/h3>&lt;ul>
&lt;li>구현 복잡성 증가&lt;/li>
&lt;li>동기화 및 데드락 문제 발생 가능성&lt;/li>
&lt;/ul>
&lt;h3>IPC의 주요 방식&lt;/h3>&lt;h4>파이프(Pipe)&lt;/h4>&lt;p>파이프는 가장 오래되고 간단한 IPC 방식으로, 한 프로세스의 출력이 다른 프로세스의 입력으로 직접 전달된다.&lt;/p>
&lt;ul>
&lt;li>단방향 통신을 위한 간단한 메커니즘&lt;/li>
&lt;li>주로 부모-자식 프로세스 간 통신에 사용&lt;/li>
&lt;/ul>
&lt;h5>종류&lt;/h5>&lt;p>일반 파이프:&lt;/p>
&lt;ul>
&lt;li>부모-자식 프로세스 간 단방향 통신&lt;/li>
&lt;li>표준 입출력 스트림 사용&lt;/li>
&lt;li>예: Unix의 &amp;lsquo;|&amp;rsquo; 연산자&lt;/li>
&lt;/ul>
&lt;p>명명된 파이프(Named Pipe):&lt;/p>
&lt;ul>
&lt;li>서로 관련 없는 프로세스 간 통신 가능&lt;/li>
&lt;li>파일 시스템에 이름을 가진 특별한 파일로 존재&lt;/li>
&lt;li>양방향 통신 지원&lt;/li>
&lt;/ul>
&lt;h4>메시지 큐(Message Queue)&lt;/h4>&lt;p>메시지 형태로 데이터를 주고받는 방식.&lt;/p>
&lt;h5>특징&lt;/h5>&lt;ul>
&lt;li>구조화된 데이터 전송 가능&lt;/li>
&lt;li>비동기 통신 지원&lt;/li>
&lt;li>여러 프로세스가 동시에 사용 가능&lt;/li>
&lt;/ul>
&lt;h5>사용 예&lt;/h5>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 메시지 큐 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">msgid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">msgget&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KEY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IPC_CREAT&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mo">0666&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 메시지 전송
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">msgsnd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msgid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 메시지 수신
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">msgrcv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msgid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>공유 메모리(Shared Memory)&lt;/h4>&lt;p>여러 프로세스가 동일한 메모리 영역을 공유하여 통신하는 방식.&lt;/p>
&lt;h5>장점&lt;/h5>&lt;ul>
&lt;li>가장 빠른 IPC 방식&lt;/li>
&lt;li>대용량 데이터 공유에 효율적&lt;/li>
&lt;li>직접적인 메모리 접근 가능&lt;/li>
&lt;/ul>
&lt;h5>주의사항&lt;/h5>&lt;ul>
&lt;li>동기화 메커니즘 필요&lt;/li>
&lt;li>메모리 관리 주의 필요&lt;/li>
&lt;li>데이터 일관성 유지 중요&lt;/li>
&lt;/ul>
&lt;h4>세마포어(Semaphore)&lt;/h4>&lt;p>공유 자원에 대한 접근을 제어하는 신호 체계.&lt;/p>
&lt;h5>용도&lt;/h5>&lt;ul>
&lt;li>프로세스 동기화&lt;/li>
&lt;li>상호 배제 구현&lt;/li>
&lt;li>리소스 카운팅&lt;/li>
&lt;/ul>
&lt;h5>구현 예&lt;/h5>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 세마포어 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">sem_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">sem_open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;mysem&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">O_CREAT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0644&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 세마포어 획득
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">sem_wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sem&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 임계 영역 코드
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// …
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 세마포어 해제
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">sem_post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sem&lt;/span>&lt;span class="p">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>소켓(Socket)&lt;/h4>&lt;p>네트워크를 통한 프로세스 간 통신 방식.&lt;/p>
&lt;h5>특징&lt;/h5>&lt;ul>
&lt;li>로컬 및 원격 통신 가능&lt;/li>
&lt;li>다양한 프로토콜 지원&lt;/li>
&lt;li>양방향 통신 가능&lt;/li>
&lt;/ul>
&lt;h5>사용 사례&lt;/h5>&lt;ul>
&lt;li>클라이언트-서버 애플리케이션&lt;/li>
&lt;li>네트워크 서비스&lt;/li>
&lt;li>분산 시스템&lt;/li>
&lt;/ul>
&lt;h4>시그널(Signal)&lt;/h4>&lt;p>비동기적인 이벤트를 처리하기 위한 소프트웨어 인터럽트.&lt;/p>
&lt;h5>주요 시그널&lt;/h5>&lt;ul>
&lt;li>SIGTERM: 종료 요청&lt;/li>
&lt;li>SIGKILL: 강제 종료&lt;/li>
&lt;li>SIGUSR1/2: 사용자 정의 시그널&lt;/li>
&lt;/ul>
&lt;h3>IPC 선택 시 고려사항&lt;/h3>&lt;ol>
&lt;li>
&lt;p>통신 패턴&lt;/p>
&lt;ul>
&lt;li>단방향 vs 양방향&lt;/li>
&lt;li>동기 vs 비동기&lt;/li>
&lt;li>1:1 vs 1:N&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 요구사항&lt;/p>
&lt;ul>
&lt;li>지연 시간&lt;/li>
&lt;li>처리량&lt;/li>
&lt;li>리소스 사용량&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>신뢰성&lt;/p>
&lt;ul>
&lt;li>데이터 손실 가능성&lt;/li>
&lt;li>오류 처리&lt;/li>
&lt;li>복구 메커니즘&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>프로세스 간 통신의 실제 응용&lt;/h3>&lt;ol>
&lt;li>
&lt;p>데이터베이스 시스템&lt;/p>
&lt;ul>
&lt;li>쿼리 프로세서와 저장소 엔진 간 통신&lt;/li>
&lt;li>캐시 관리&lt;/li>
&lt;li>트랜잭션 조정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>웹 서버&lt;/p>
&lt;ul>
&lt;li>워커 프로세스 관리&lt;/li>
&lt;li>로드 밸런싱&lt;/li>
&lt;li>세션 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>운영체제&lt;/p>
&lt;ul>
&lt;li>장치 드라이버 통신&lt;/li>
&lt;li>시스템 서비스 간 조정&lt;/li>
&lt;li>프로세스 스케줄링&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>프로세스 간 통신의 발전 방향&lt;/h3>&lt;ol>
&lt;li>
&lt;p>분산 시스템&lt;/p>
&lt;ul>
&lt;li>클라우드 환경에서의 IPC&lt;/li>
&lt;li>마이크로서비스 아키텍처&lt;/li>
&lt;li>컨테이너 간 통신&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>새로운 하드웨어 지원&lt;/p>
&lt;ul>
&lt;li>RDMA(Remote Direct Memory Access)&lt;/li>
&lt;li>하드웨어 가속&lt;/li>
&lt;li>새로운 버스 아키텍처&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>보안 강화&lt;/p>
&lt;ul>
&lt;li>암호화 통신&lt;/li>
&lt;li>접근 제어&lt;/li>
&lt;li>격리 정책&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Process</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process/</link><pubDate>Thu, 26 Sep 2024 23:32:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process/</guid><description>
&lt;h2>Process&lt;/h2>&lt;p>프로세스는 실행 중인 프로그램의 인스턴스.&lt;br>
구체적으로는 운영체제가 관리하는 작업의 단위로, CPU 시간이나 메모리와 같은 시스템 자원을 할당받아 실행되는 프로그램의 동적인 실체를 의미한다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Process%20Mgmt/1_ILkJu8YvpoldbL4kpNL9aA.webp"
alt="This chart displays the hierarchy among Program, Process and Thread"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://blog.devgenius.io/program-process-and-thread-explained-in-one-minute-6016e4fdf4de" target="_blank" rel="noopener">https://blog.devgenius.io/program-process-and-thread-explained-in-one-minute-6016e4fdf4de&lt;/a> _&lt;/p>
&lt;h3>특징&lt;/h3>&lt;ol>
&lt;li>독립성: 각 프로세스는 독립된 메모리 공간을 가진다.&lt;/li>
&lt;li>동시성: 여러 프로세스가 동시에 실행될 수 있다.&lt;/li>
&lt;li>상태 변화: 프로세스는 실행 중 여러 상태를 거친다.&lt;/li>
&lt;/ol>
&lt;h3>기능과 역할&lt;/h3>&lt;p>기능:&lt;/p>
&lt;ul>
&lt;li>작업 단위: 운영체제가 관리하는 작업의 기본 단위입니다.&lt;/li>
&lt;li>프로그램 코드 실행: 프로세스는 프로그램의 명령어들을 순차적으로 실행합니다.&lt;/li>
&lt;li>자원 관리: 할당받은 시스템 자원을 효율적으로 사용하고 관리합니다.&lt;/li>
&lt;li>프로세스 간 통신: 다른 프로세스와 정보를 교환하고 협력합니다.&lt;/li>
&lt;/ul>
&lt;p>역할:&lt;/p>
&lt;ul>
&lt;li>멀티태스킹 지원: 여러 작업을 동시에 실행할 수 있게 합니다.&lt;/li>
&lt;li>시스템 자원 보호: 프로세스 간 독립성을 통해 시스템 안정성을 보장합니다.&lt;/li>
&lt;li>프로그램 실행 관리: 프로그램의 생명주기를 관리합니다.&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>구분&lt;/th>
&lt;th>세부 기능&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>자원 관리&lt;/td>
&lt;td>CPU 사용&lt;/td>
&lt;td>- CPU 시간 할당 및 사용&lt;br>- 명령어 실행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>메모리 관리&lt;/td>
&lt;td>- 메모리 공간 할당/해제&lt;br>- 가상 메모리 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>파일 관리&lt;/td>
&lt;td>- 파일 시스템 접근&lt;br>- 입출력 작업 수행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로그램 실행&lt;/td>
&lt;td>코드 실행&lt;/td>
&lt;td>- 프로그램 코드 로딩&lt;br>- 명령어 해석 및 실행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>데이터 처리&lt;/td>
&lt;td>- 데이터 입출력&lt;br>- 연산 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로세스 통신&lt;/td>
&lt;td>IPC&lt;/td>
&lt;td>- 프로세스 간 통신&lt;br>- 데이터 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>동기화&lt;/td>
&lt;td>- 프로세스 간 실행 순서 조정&lt;br>- 자원 접근 조정&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>보안과 보호&lt;/td>
&lt;td>메모리 보호&lt;/td>
&lt;td>- 메모리 영역 보호&lt;br>- 접근 권한 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>시스템 보호&lt;/td>
&lt;td>- 시스템 자원 보호&lt;br>- 권한 레벨 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>상태 관리&lt;/td>
&lt;td>생명주기 관리&lt;/td>
&lt;td>- 프로세스 생성/종료&lt;br>- 상태 전이 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>스케줄링&lt;/td>
&lt;td>CPU 할당 순서 결정&lt;br>- 우선순위 관리&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>구성 요소&lt;/h3>&lt;h4>메모리 구조 관련 구성 요소&lt;/h4>&lt;h5>코드 영역 (Code Section)&lt;/h5>&lt;p>프로그램의 실행 코드가 위치하는 영역으로, 실행될 명령어를 포함.&lt;/p>
&lt;ul>
&lt;li>특징
&lt;ul>
&lt;li>읽기 전용.&lt;/li>
&lt;li>여러 프로세스가 같은 프로그램을 실행하는 경우 해당 코드 영역을 공유할 수 있다.&lt;/li>
&lt;li>재진입이 가능(Reentrant)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>역할
&lt;ul>
&lt;li>프로그램 명령어 보관&lt;/li>
&lt;li>코드 실행 제공&lt;/li>
&lt;li>명령어 순서 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5>데이터 영역 (Data Section)&lt;/h5>&lt;p>전역 변수 및 정적 변수를 저장하는 영역으로, 프로그램의 실행 내내 유지되는 데이터가 이곳에 저장된다.&lt;/p>
&lt;ul>
&lt;li>구분
&lt;ul>
&lt;li>BSS(Block Started by Symbol) 영역
&lt;ul>
&lt;li>초기화되지 않은 전역/정적 변수를 저장하는 메모리 영역&lt;/li>
&lt;li>프로그램 시작 시 자동으로 0 또는 NULL로 초기화됨.&lt;/li>
&lt;li>실행 파일에 실제 내용을 포함하지 않음&lt;/li>
&lt;li>프로그램 로딩 시 메모리에 할당되고 0으로 초기화됨.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data 영역
&lt;ul>
&lt;li>초기화된 전역/정적 변수를 저장하는 메모리 영역&lt;/li>
&lt;li>명시적으로 초기값이 지정된 변수들을 저장&lt;/li>
&lt;li>실행 파일에 초기값이 포함됨.&lt;/li>
&lt;li>읽기 전용 데이터(상수)와 읽기-쓰기 데이터로 추가 구분될 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>특징
&lt;ul>
&lt;li>프로그램 시작 시 할당&lt;/li>
&lt;li>프로그램 종료 시 해제&lt;/li>
&lt;li>크기가 고정됨.&lt;/li>
&lt;li>모든 스레드가 이 영역을 공유한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>BSS 영역과 Data 영역의 비교&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>BSS 영역&lt;/th>
&lt;th>Data 영역&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>초기화&lt;/td>
&lt;td>자동으로 0 또는 NULL&lt;/td>
&lt;td>명시적 초기값&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실행 파일 포함 여부&lt;/td>
&lt;td>크기 정보만 포함&lt;/td>
&lt;td>초기값 포함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 할당 시점&lt;/td>
&lt;td>프로그램 로딩 시&lt;/td>
&lt;td>프로그램 로딩 시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>파일 크기에 미치는 영향&lt;/td>
&lt;td>영향 없음&lt;/td>
&lt;td>초기값만큼 증가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 용도&lt;/td>
&lt;td>대량의 제로 초기화 데이터&lt;/td>
&lt;td>특정 초기값이 필요한 데이터&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5>힙 (Heap)&lt;/h5>&lt;p>동적으로 할당되는 메모리 영역&lt;/p>
&lt;ul>
&lt;li>특징
&lt;ul>
&lt;li>런타임에 크기가 변경될 수 있다.&lt;/li>
&lt;li>메모리 누수의 주요 원인.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5>스택 (Stack)&lt;/h5>&lt;p>함수 호출과 관련된 데이터 (지역 변수, 매개변수, 리턴 주소 등)를 저장하는 메모리 영역&lt;/p>
&lt;ul>
&lt;li>특징
&lt;ul>
&lt;li>LIFO(Last In First Out)구조&lt;/li>
&lt;li>함수 호출 시 자동으로 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4>프로세스 제어 블록 (Process Control Block, PCB)&lt;/h4>&lt;p>프로세스 관련 정보를 저장한다.&lt;/p>
&lt;ul>
&lt;li>특징
&lt;ul>
&lt;li>운영체제가 관리&lt;/li>
&lt;li>컨텍스트 스위칭 시 중요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>역할
&lt;ul>
&lt;li>프로세스 상태, 우선순위, 메모리 정보 등 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5>구성요소&lt;/h5>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>구성 요소&lt;/th>
&lt;th>포함 정보&lt;/th>
&lt;th>용도&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>식별자 정보&lt;/td>
&lt;td>- 프로세스 ID(PID)&lt;br>- 부모 프로세스 ID&lt;/td>
&lt;td>프로세스 식별 및 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>상태 정보&lt;/td>
&lt;td>- 프로세스 상태&lt;br>- 우선순위&lt;/td>
&lt;td>스케줄링 및 상태 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>제어 정보&lt;/td>
&lt;td>- 프로그램 카운터&lt;br>- 레지스터 값&lt;/td>
&lt;td>CPU 실행 제어&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 정보&lt;/td>
&lt;td>- 메모리 limit/base&lt;br>- 열린 파일 목록&lt;/td>
&lt;td>자원 할당 및 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>계정 정보&lt;/td>
&lt;td>CPU 사용 시간&lt;br>- 실행 시간 제한&lt;/td>
&lt;td>사용량 측정 및 제어&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>프로세스 상태 관리&lt;/h3>&lt;p>운영체제가 프로세스의 생명주기를 효율적으로 관리하는 메커니즘.&lt;br>
운영체제는 이러한 상태들 사이의 전이를 관리하며, 프로세스 제어 블록(Process Control Block, PCB)를 통해 각 프로세스의 현재 상태 정보를 유지한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>상태&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>전이 조건&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>생성(Created)&lt;/td>
&lt;td>프로세스 초기화&lt;/td>
&lt;td>PCB 할당&lt;br>- 메모리 할당&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>준비(Ready)&lt;/td>
&lt;td>CPU 대기 상태&lt;/td>
&lt;td>CPU 스케줄러 대기&lt;br>- 실행 가능 상태&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실행(Running)&lt;/td>
&lt;td>CPU 사용 중&lt;/td>
&lt;td>- 명령어 실행&lt;br>- 시간 할당량 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>대기(Waiting)&lt;/td>
&lt;td>I/O 또는 이벤트 대기&lt;/td>
&lt;td>I/O 작업 중&lt;br>- 이벤트 발생 대기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>종료(Terminated)&lt;/td>
&lt;td>실행 완료&lt;/td>
&lt;td>- 자원 반납&lt;br>PCB 삭제&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>시스템 자원 관리&lt;/h3>&lt;p>프로세스는 시스템 자원을 사용하며, 운영체제는 이를 효율적으로 관리한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>자원 유형&lt;/th>
&lt;th>관리 방식&lt;/th>
&lt;th>특징&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CPU&lt;/td>
&lt;td>시분할 방식&lt;/td>
&lt;td>- 여러 프로세스가 번갈아 사용&lt;br>- 스케줄링 알고리즘 적용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리&lt;/td>
&lt;td>가상 메모리&lt;/td>
&lt;td>- 필요한 부분만 실제 메모리에 로드&lt;br>- 페이징/세그먼테이션&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>파일 시스템&lt;/td>
&lt;td>파일 디스크립터&lt;/td>
&lt;td>- 파일 접근 권한 관리&lt;br>- 입출력 버퍼링&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>I/O 장치&lt;/td>
&lt;td>디바이스 드라이버&lt;/td>
&lt;td>- 장치 독립성 제공&lt;br>- 인터럽트 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로세스 간 통신(IPC)&lt;/td>
&lt;td>파이프(PIPE)&lt;br>명명된 파이프(Named PIPE)&lt;br>메시지 큐&lt;br>공유 메모리&lt;br>세마포어&lt;br>소켓&lt;/td>
&lt;td>- 프로세스간 데이터 교환과 동기화&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>