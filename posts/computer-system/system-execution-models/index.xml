<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – System Execution Models</title><link>https://buenhyden.github.io/posts/computer-system/system-execution-models/</link><description>Recent content in System Execution Models on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://buenhyden.github.io/posts/computer-system/system-execution-models/index.xml" rel="self" type="application/rss+xml"/><item><title>동시성 (Concurrency)</title><link>https://buenhyden.github.io/posts/computer-system/system-execution-models/concurrency/</link><pubDate>Fri, 01 Nov 2024 06:51:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/concurrency/</guid><description>
&lt;h2>동시성 (Concurrency)&lt;span class="hx-absolute -hx-mt-20" id="동시성-concurrency">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1-concurrency" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>동시성 (Concurrency)은 여러 작업이 동시에 실행되는 것처럼 보이지만, 실제로는 매우 빠르게 작업 간 전환을 하면서 처리하는 방식이다. 예를 들어, 하나의 CPU 코어에서 여러 작업을 빠르게 번갈아가며 실행하여 마치 동시에 여러 작업이 처리되는 것처럼 보이게 만든다.&lt;/p>
&lt;p>&lt;img src="Concurrency.gif" alt="Concurrency" loading="lazy" />
_Source: &lt;a href="https://dynamogeeks.com/blog/concurrency-vs-parallelism-a-simplified-explanation" target="_blank" rel="noopener">https://dynamogeeks.com/blog/concurrency-vs-parallelism-a-simplified-explanation&lt;/a> _&lt;/p>
&lt;h3>동시성의 특징&lt;span class="hx-absolute -hx-mt-20" id="동시성의-특징">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1%ec%9d%98-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>논리적 개념&lt;/strong>: 동시성은 물리적으로 동시에 실행되는 것이 아닌, 논리적으로 동시에 실행되는 것처럼 보이게 하는 개념이다.&lt;/li>
&lt;li>&lt;strong>자원 효율성&lt;/strong>: CPU가 유휴 상태로 있지 않고 계속해서 작업을 처리하므로 시스템 자원을 효율적으로 사용할 수 있다.&lt;/li>
&lt;li>&lt;strong>응답성 향상&lt;/strong>: 여러 작업을 번갈아가며 처리하므로 전체적인 시스템의 응답성이 향상된다.&lt;/li>
&lt;/ol>
&lt;h3>동시성의 구현 방법&lt;span class="hx-absolute -hx-mt-20" id="동시성의-구현-방법">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1%ec%9d%98-%ea%b5%ac%ed%98%84-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>멀티스레딩&lt;/strong>: 하나의 프로세스 내에서 여러 스레드를 사용하여 작업을 동시에 처리한다.&lt;/li>
&lt;li>&lt;strong>비동기 프로그래밍&lt;/strong>: 작업을 비동기적으로 처리하여 한 작업이 완료되기를 기다리지 않고 다른 작업을 수행할 수 있게 한다.&lt;/li>
&lt;/ol>
&lt;h3>동시성의 장점&lt;span class="hx-absolute -hx-mt-20" id="동시성의-장점">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>성능 향상&lt;/strong>: 여러 작업을 동시에 처리함으로써 전체적인 처리 속도를 높일 수 있다.&lt;/li>
&lt;li>&lt;strong>자원 활용 최적화&lt;/strong>: CPU와 같은 시스템 자원을 최대한 활용할 수 있다.&lt;/li>
&lt;li>&lt;strong>사용자 경험 개선&lt;/strong>: 특히 UI 애플리케이션에서 동시성을 활용하면 사용자 반응성을 크게 향상시킬 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>동시성의 주의점&lt;span class="hx-absolute -hx-mt-20" id="동시성의-주의점">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1%ec%9d%98-%ec%a3%bc%ec%9d%98%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>복잡성 증가&lt;/strong>: 동시성 프로그래밍은 일반적인 순차적 프로그래밍보다 복잡할 수 있다.&lt;/li>
&lt;li>&lt;strong>동기화 문제&lt;/strong>: 여러 작업이 공유 자원에 동시에 접근할 때 발생할 수 있는 문제를 주의해야 한다.&lt;/li>
&lt;li>&lt;strong>디버깅의 어려움&lt;/strong>: 동시에 실행되는 작업들 간의 상호작용으로 인해 버그를 찾고 수정하기가 어려울 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>동시성의 실제 예시&lt;span class="hx-absolute -hx-mt-20" id="동시성의-실제-예시">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1%ec%9d%98-%ec%8b%a4%ec%a0%9c-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>웹 브라우저&lt;/strong>: 여러 탭을 동시에 열어 각각 다른 웹페이지를 로드하면서 사용자 입력을 받는 것은 동시성의 좋은 예이다.&lt;/li>
&lt;li>&lt;strong>데이터베이스 시스템&lt;/strong>: 여러 사용자의 쿼리를 동시에 처리하는 데이터베이스 시스템도 동시성을 활용한다.&lt;/li>
&lt;/ol>
&lt;p>동시성은 현대 프로그래밍에서 매우 중요한 개념으로, 시스템의 성능을 향상시키고 사용자 경험을 개선하는 데 크게 기여한다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>병렬성 (Parallelism)</title><link>https://buenhyden.github.io/posts/computer-system/system-execution-models/parallelism/</link><pubDate>Fri, 01 Nov 2024 02:35:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/parallelism/</guid><description>
&lt;h2>병렬성 (Parallelism)&lt;span class="hx-absolute -hx-mt-20" id="병렬성-parallelism">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1-parallelism" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>병렬성(Parallelism)은 컴퓨터 프로그래밍에서 여러 작업을 동시에 실행하여 전체적인 처리 속도를 향상시키는 기술을 말한다.&lt;br>
이는 여러 CPU 코어나 프로세서를 활용하여 다양한 작업을 동시에 처리하는 방식이다.&lt;br>
예를 들어, 대규모 데이터베이스의 쿼리 처리나 대용량 파일의 압축 해제 등은 병렬 처리를 통해 성능을 크게 향상시킬 수 있다.&lt;/p>
&lt;p>&lt;img src="Parallelism.gif" alt="Parallelism" loading="lazy" />&lt;br>
_Source: &lt;a href="https://dynamogeeks.com/blog/concurrency-vs-parallelism-a-simplified-explanation" target="_blank" rel="noopener">https://dynamogeeks.com/blog/concurrency-vs-parallelism-a-simplified-explanation&lt;/a> _&lt;/p>
&lt;h3>병렬성의 종류&lt;span class="hx-absolute -hx-mt-20" id="병렬성의-종류">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1%ec%9d%98-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>병렬성은 크게 두 가지 방식으로 구현될 수 있다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>데이터 병렬화 (Data parallelism):&lt;br>
동일한 작업을 여러 데이터 조각에 대해 동시에 수행한다.&lt;br>
예를 들어, 대규모 행렬 연산에서 행렬을 여러 부분으로 나누고, 각 부분을 동시에 처리하여 계산을 가속화할 수 있다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 직렬 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">squared&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">squared&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 병렬 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">multiprocessing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Pool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">num&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">with&lt;/span> &lt;span class="n">Pool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">processes&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">pool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">squared&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">square&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>작업 병렬화 (Task parallelism):&lt;br>
서로 다른 작업을 동시에 수행한다.&lt;br>
예를 들어, 웹 서버가 여러 클라이언트의 요청을 동시에 처리하는 경우이다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 직렬 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">process_data&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">read_file&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process_image&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">update_database&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 병렬 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">read_file&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">process_image&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">update_database&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>병렬성의 장점&lt;span class="hx-absolute -hx-mt-20" id="병렬성의-장점">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>성능 향상: 여러 작업을 동시에 처리함으로써 전체적인 실행 시간을 단축할 수 있다.&lt;/li>
&lt;li>자원 효율성: 여러 프로세서나 코어를 효율적으로 활용할 수 있다.&lt;/li>
&lt;li>확장성: 더 많은 프로세서를 추가함으로써 시스템의 성능을 증가시킬 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>병렬성의 구현 방법&lt;span class="hx-absolute -hx-mt-20" id="병렬성의-구현-방법">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1%ec%9d%98-%ea%b5%ac%ed%98%84-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>병렬성은 주로 다음과 같은 방법으로 구현된다:&lt;/p>
&lt;ol>
&lt;li>멀티스레딩 (Multi-threading): 하나의 프로세스 내에서 여러 스레드를 사용하여 작업을 병렬로 처리한다.&lt;/li>
&lt;li>멀티프로세싱 (Multi-processing): 여러 개의 프로세서를 사용하여 작업을 분산 처리한다.&lt;/li>
&lt;li>분산 컴퓨팅: 여러 컴퓨터를 네트워크로 연결하여 대규모 작업을 분산 처리한다.&lt;/li>
&lt;/ol>
&lt;h3>병렬성 프로그래밍의 주의점&lt;span class="hx-absolute -hx-mt-20" id="병렬성-프로그래밍의-주의점">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%98%eb%b0%8d%ec%9d%98-%ec%a3%bc%ec%9d%98%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>동기화 문제: 여러 작업이 동시에 실행될 때 데이터의 일관성을 유지하기 위한 동기화가 필요하다.&lt;/li>
&lt;li>데드락(Deadlock): 여러 프로세스가 서로의 자원을 기다리며 무한정 대기하는 상황을 방지해야 한다.&lt;/li>
&lt;li>오버헤드: 작업 분배와 결과 취합 과정에서 발생하는 추가적인 비용을 고려해야 한다.&lt;/li>
&lt;/ol>
&lt;h3>병렬성의 실제 적용 사례&lt;span class="hx-absolute -hx-mt-20" id="병렬성의-실제-적용-사례">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1%ec%9d%98-%ec%8b%a4%ec%a0%9c-%ec%a0%81%ec%9a%a9-%ec%82%ac%eb%a1%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>과학 연산: 기후 변화 시뮬레이션, 우주 현상 모델링 등 복잡한 과학적 계산에 활용된다.&lt;/li>
&lt;li>빅데이터 처리: 대량의 데이터를 빠르게 분석하고 처리하는 데 사용된다.&lt;/li>
&lt;li>컴퓨터 그래픽스: 3D 렌더링이나 영상 처리 등에서 병렬 처리를 통해 성능을 향상킨다.&lt;/li>
&lt;/ol>
&lt;p>병렬성은 현대 컴퓨팅에서 매우 중요한 개념으로, 복잡한 문제를 효율적으로 해결하고 시스템의 성능을 극대화하는 데 필수적이다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Threads and Multithreading</title><link>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/</guid><description/></item></channel></rss>