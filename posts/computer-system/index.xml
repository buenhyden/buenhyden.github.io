<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Computer System</title><link>https://buenhyden.github.io/posts/computer-system/</link><description>Recent content in Computer System on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 22 Sep 2024 01:39:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/posts/computer-system/index.xml" rel="self" type="application/rss+xml"/><item><title>Computer Architecture</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/</link><pubDate>Sat, 21 Sep 2024 21:24:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/</guid><description>
&lt;h2>Computer Architecture&lt;span class="hx-absolute -hx-mt-20" id="computer-architecture">&lt;/span>
&lt;a href="#computer-architecture" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>컴퓨터 시스템의 구조와 설계를 정의하는 기본적인 프레임워크.&lt;br>
이는 컴퓨터 하드웨어와 소프트웨어의 설계 원칙과 기능을 포괄하며, 작업을 효율적이고 효과적으로 실행할 수 있도록 한다.&lt;/p>
&lt;p>&lt;img src="Computer_architecture_block_diagram.png" alt="Computer Architecture" loading="lazy" />&lt;br>
_Source: &lt;a href="https://en.wikipedia.org/wiki/Computer_architecture" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Computer_architecture&lt;/a> _&lt;/p>
&lt;h3>주요 구성요소&lt;span class="hx-absolute -hx-mt-20" id="주요-구성요소">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ea%b5%ac%ec%84%b1%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>중앙 처리 장치 (CPU)&lt;br>
CPU는 컴퓨터의 &amp;lsquo;두뇌&amp;rsquo;로, 명령을 실행하는 역할을 한다.&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>; CPU 내부 동작 예시
MOV AX, 5 ; 레지스터에 값 저장
ADD AX, 3 ; 산술 연산 수행
MOV [BX], AX ; 메모리에 결과 저장&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>A. 제어 장치 (Control Unit):&lt;/p>
&lt;ul>
&lt;li>명령어 해석 및 실행 순서 제어&lt;/li>
&lt;li>각 하드웨어 구성요소 간의 데이터 흐름 조정&lt;/li>
&lt;li>파이프라이닝과 같은 고급 실행 기법 관리&lt;br>
B. 산술논리장치 (ALU):&lt;/li>
&lt;li>덧셈, 뺄셈 등의 산술 연산 수행&lt;/li>
&lt;li>AND, OR 등의 논리 연산 처리&lt;/li>
&lt;li>비교 연산 수행&lt;br>
C. 레지스터:&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>; 레지스터 사용 예시
MOV EAX, [memory] ; 데이터 레지스터
MOV EIP, label ; 프로그램 카운터
PUSH EBP ; 스택 포인터&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="2">
&lt;li>메모리&lt;br>
메모리는 데이터와 명령어를 저장하는 공간.&lt;br>
주요 유형은 다음과 같다:
&lt;ul>
&lt;li>주 메모리 (Primary Memory): RAM, 캐시 등&lt;/li>
&lt;li>보조 메모리 (Secondary Memory): 하드 드라이브, SSD 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>메모리는 계층적 구조로 이루어져 있으며, 각 층마다 특징이 다르다:&lt;/p>
&lt;p>A. 캐시 메모리:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 캐시 메모리 구조 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">CacheEntry&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">valid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">dirty&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">tag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">CACHE_LINE_SIZE&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>L1 캐시: CPU에 가장 가까운 고속 캐시&lt;/li>
&lt;li>L2 캐시: L1보다 크고 느린 중간 계층&lt;/li>
&lt;li>L3 캐시: 가장 큰 용량의 마지막 레벨 캐시&lt;/li>
&lt;/ul>
&lt;p>B. 주 메모리 (RAM):&lt;/p>
&lt;ul>
&lt;li>프로그램과 데이터의 실행 시 저장소&lt;/li>
&lt;li>휘발성 메모리로 전원이 꺼지면 데이터 소실&lt;/li>
&lt;/ul>
&lt;p>C. 가상 메모리:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 페이지 테이블 엔트리 구조
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">PageTableEntry&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">physicalPageNumber&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">present&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">readWrite&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">userSupervisor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">accessed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">dirty&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="3">
&lt;li>
&lt;p>입출력 장치&lt;br>
키보드, 모니터, 프린터, 네트워크 인터페이스 등이 포함된다.&lt;/p>
&lt;p>입출력 시스템은 다음과 같은 메커니즘으로 작동한다:&lt;/p>
&lt;p>A. 인터럽트 기반 I/O:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 인터럽트 핸들러 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">interruptHandler&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 인터럽트 플래그 저장
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">saveInterruptState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 인터럽트 처리
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">handleInterrupt&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 상태 복원
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">restoreInterruptState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>B. DMA (Direct Memory Access):&lt;/p>
&lt;ul>
&lt;li>CPU 개입 없이 직접 메모리 접근&lt;/li>
&lt;li>대용량 데이터 전송 시 효율적&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>버스 시스템&lt;br>
다양한 구성 요소를 연결하는 통신 경로로, 데이터 버스, 주소 버스, 제어 버스로 구성된다.
&lt;ul>
&lt;li>주소 버스: 메모리 주소 전달&lt;/li>
&lt;li>데이터 버스: 실제 데이터 전송&lt;/li>
&lt;li>제어 버스: 제어 신호 전달&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>컴퓨터 아키텍처의 주요 개념&lt;span class="hx-absolute -hx-mt-20" id="컴퓨터-아키텍처의-주요-개념">&lt;/span>
&lt;a href="#%ec%bb%b4%ed%93%a8%ed%84%b0-%ec%95%84%ed%82%a4%ed%85%8d%ec%b2%98%ec%9d%98-%ec%a3%bc%ec%9a%94-%ea%b0%9c%eb%85%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>명령어 세트 아키텍처 (Instruction Set Architecture, ISA)&lt;br>
프로세서가 실행할 수 있는 명령어 집합을 정의한다.&lt;br>
이는 소프트웨어와 하드웨어 사이의 인터페이스 역할을 한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>마이크로아키텍처&lt;br>
ISA가 하드웨어 수준에서 어떻게 구현되는지를 설명한다.&lt;br>
이는 프로세서의 내부 설계와 관련이 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>파이프라이닝&lt;br>
여러 명령어를 동시에 실행하여 CPU 효율성을 높이는 기술.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>캐시 메모리&lt;br>
CPU 근처에 위치한 고속 메모리로, 자주 접근하는 데이터를 저장한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>멀티프로세싱&lt;br>
여러 프로세서를 사용하여 작업을 동시에 수행하는 기술.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>주요 컴퓨터 아키텍처 유형&lt;span class="hx-absolute -hx-mt-20" id="주요-컴퓨터-아키텍처-유형">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ec%bb%b4%ed%93%a8%ed%84%b0-%ec%95%84%ed%82%a4%ed%85%8d%ec%b2%98-%ec%9c%a0%ed%98%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>폰 노이만 아키텍처&lt;/p>
&lt;ul>
&lt;li>명령어와 데이터가 같은 메모리 공간을 공유한다.&lt;/li>
&lt;li>단일 데이터 버스와 주소 버스를 사용한다.&lt;/li>
&lt;li>순차적 실행 모델을 따른다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>하버드 아키텍처&lt;/p>
&lt;ul>
&lt;li>명령어와 데이터를 위한 별도의 저장 장치와 경로를 가진다.&lt;/li>
&lt;li>동시에 명령어와 데이터에 접근할 수 있어 성능이 향상된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>수정된 하버드 아키텍처&lt;/p>
&lt;ul>
&lt;li>명령어와 데이터를 위한 별도의 캐시를 사용한다.&lt;/li>
&lt;li>주 메모리는 공유하여 설계를 단순화하고 비용을 절감한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>RISC 및 CISC 아키텍처&lt;/p>
&lt;ul>
&lt;li>RISC (Reduced Instruction Set Computing): 간단한 명령어 세트를 사용하여 빠른 실행을 목표로 한다.&lt;/li>
&lt;li>CISC (Complex Instruction Set Computing): 복잡한 명령어 세트를 사용하여 다양한 기능을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Operating System</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/</link><pubDate>Sun, 22 Sep 2024 17:13:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/</guid><description>
&lt;h2>Operating System&lt;span class="hx-absolute -hx-mt-20" id="operating-system">&lt;/span>
&lt;a href="#operating-system" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>컴퓨터 하드웨어와 소프트웨어 자원을 관리하고 다양한 서비스를 제공하는 소프트웨어.&lt;/p>
&lt;p>&lt;img src="conceptual_view.jpg" alt="Operating System" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.tutorialspoint.com/operating_system/os_overview.htm" target="_blank" rel="noopener">https://www.tutorialspoint.com/operating_system/os_overview.htm&lt;/a> _&lt;/p>
&lt;h3>특성&lt;span class="hx-absolute -hx-mt-20" id="특성">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>동시성: 여러 작업을 동시에 처리할 수 있음&lt;/li>
&lt;li>하드웨어 추상화: 하드웨어 세부사항을 숨기고 일관된 인터페이스 제공&lt;/li>
&lt;li>자원 할당: 시스템 자원을 효율적으로 관리하고 할당&lt;/li>
&lt;li>가상화: 가상 메모리와 가상 CPU 생성&lt;/li>
&lt;li>보안: 무단 접근 방지 및 데이터 보호&lt;/li>
&lt;li>결함 허용: 하드웨어 및 소프트웨어 오류 처리&lt;/li>
&lt;/ul>
&lt;h3>주요 기능&lt;span class="hx-absolute -hx-mt-20" id="주요-기능">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ea%b8%b0%eb%8a%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>프로세스 관리: 프로세스 생성, 실행, 종료 관리하며 프로세스 간 통신을 지원&lt;/li>
&lt;li>메모리 관리: 메모리 할당 및 해제를 관리하고 가상 메모리를 구현&lt;/li>
&lt;li>파일 시스템 관리: 파일 저장, 검색, 조직화&lt;/li>
&lt;li>장치 관리: 입출력 장치 제어 및 드라이버 관리&lt;/li>
&lt;li>사용자 인터페이스 제공: GUI 또는 CLI 제공&lt;/li>
&lt;li>보안 및 보호: 데이터 및 시스템 보호&lt;/li>
&lt;li>네트워킹: 네트워크 통신 지원&lt;/li>
&lt;/ul>
&lt;h3>운영체제의 목적&lt;span class="hx-absolute -hx-mt-20" id="운영체제의-목적">&lt;/span>
&lt;a href="#%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9c%ec%9d%98-%eb%aa%a9%ec%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>운영체제는 다음과 같은 주요 목적을 가지고 있다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>사용자 편의성 제공&lt;/strong>: 복잡한 하드웨어를 추상화하여 사용하기 쉽게 만든다.&lt;/li>
&lt;li>&lt;strong>자원 효율성 최대화&lt;/strong>: 시스템 자원을 효율적으로 관리하고 할당한다.&lt;/li>
&lt;li>&lt;strong>시스템 신뢰성 보장&lt;/strong>: 안정적인 시스템 운영을 보장한다.&lt;/li>
&lt;/ol>
&lt;h3>계층적 디자인&lt;span class="hx-absolute -hx-mt-20" id="계층적-디자인">&lt;/span>
&lt;a href="#%ea%b3%84%ec%b8%b5%ec%a0%81-%eb%94%94%ec%9e%90%ec%9d%b8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>운영체제는 다음과 같은 계층 구조로 설계되어 있다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>하드웨어 계층&lt;/strong>: CPU, 메모리, 디스크 등 물리적 자원&lt;/li>
&lt;li>&lt;strong>커널 계층&lt;/strong>: 운영체제의 핵심 기능을 수행&lt;/li>
&lt;li>&lt;strong>시스템 콜 계층&lt;/strong>: 사용자 프로그램과 커널 간의 인터페이스&lt;/li>
&lt;li>&lt;strong>사용자 계층&lt;/strong>: 응용 프로그램과 사용자 인터페이스&lt;/li>
&lt;/ol>
&lt;h3>구성 요소&lt;span class="hx-absolute -hx-mt-20" id="구성-요소">&lt;/span>
&lt;a href="#%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>운영체제의 주요 구성 요소는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>커널(Kernel)&lt;/strong>: 운영체제의 핵심 부분으로, 자원 관리와 하드웨어 제어를 담당.&lt;/li>
&lt;li>&lt;strong>쉘(Shell)&lt;/strong>: 사용자와 커널 사이의 인터페이스를 제공.&lt;/li>
&lt;li>&lt;strong>파일 시스템&lt;/strong>: 데이터의 저장과 관리를 담당.&lt;/li>
&lt;li>&lt;strong>장치 드라이버&lt;/strong>: 하드웨어 장치와의 통신을 담당.&lt;/li>
&lt;/ol>
&lt;h3>운영체제의 유형&lt;span class="hx-absolute -hx-mt-20" id="운영체제의-유형">&lt;/span>
&lt;a href="#%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9c%ec%9d%98-%ec%9c%a0%ed%98%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>배치 처리 시스템 (Batch Operating System)&lt;br>
초기 컴퓨터 시스템에서 사용된 이 방식은 유사한 작업들을 그룹으로 모아서 연속적으로 처리한다.&lt;br>
예를 들어, 급여 계산이나 재고 관리와 같은 대량의 반복적인 작업을 처리할 때 효율적이다.&lt;br>
사용자와의 상호작용은 최소화되어 있으며, 작업이 시작되면 중간에 개입할 수 없다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>멀티프로그래밍 시스템 (Multiprogramming Operating System)&lt;br>
CPU 사용률을 최대화하기 위해 여러 프로그램을 메모리에 동시에 유지하면서 실행하는 시스템.&lt;br>
한 프로그램이 I/O 작업을 수행할 때 다른 프로그램이 CPU를 사용할 수 있게 하여 자원 활용도를 높인다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>멀티프로세싱 시스템 (Multiprocessing Operating System)&lt;br>
두 개 이상의 프로세서를 사용하여 병렬 처리를 수행하는 시스템.&lt;br>
현대의 대부분의 컴퓨터가 이 방식을 사용하며, 하나의 프로세서가 실패하더라도 시스템이 계속 동작할 수 있는 장점이 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>멀티태스킹 시스템 (Multitasking Operating System)&lt;br>
여러 작업을 동시에 수행하는 것처럼 보이게 하는 시스템.&lt;br>
실제로는 CPU가 매우 빠른 속도로 작업들을 번갈아가며 실행한다.&lt;br>
현대의 Windows, macOS, Linux가 이에 해당한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>시분할 시스템 (Time-Sharing Operating System)&lt;br>
여러 사용자가 동시에 컴퓨터를 사용할 수 있게 하는 시스템.&lt;br>
CPU 시간을 작은 단위로 나누어 각 사용자에게 할당한다.&lt;br>
초기 메인프레임 컴퓨터에서 많이 사용되었다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>분산 운영체제 (Distributed Operating System)&lt;br>
여러 컴퓨터의 자원을 네트워크로 연결하여 하나의 시스템처럼 사용할 수 있게 하는 시스템.&lt;br>
클라우드 컴퓨팅 환경에서 많이 사용된다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>네트워크 운영체제 (Network Operating System)&lt;br>
네트워크로 연결된 다른 컴퓨터의 자원을 사용할 수 있게 해주는 시스템.&lt;br>
서버-클라이언트 모델을 기반으로 동작한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>실시간 운영체제 (Real-Time Operating System)&lt;br>
정해진 시간 내에 작업 완료를 보장하는 시스템.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4>운영체제 유형 비교&lt;span class="hx-absolute -hx-mt-20" id="운영체제-유형-비교">&lt;/span>
&lt;a href="#%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9c-%ec%9c%a0%ed%98%95-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>운영 체제 유형&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>주요 특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>사용 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>배치 운영 체제&lt;/td>
&lt;td>유사한 작업을 그룹화하여 일괄 처리하는 시스템&lt;/td>
&lt;td>• 작업 그룹화&lt;br>• 순차적 실행&lt;br>• 운영자 개입 최소화&lt;/td>
&lt;td>• 자원 효율성 높음&lt;br>• 대량 작업 처리에 적합&lt;/td>
&lt;td>• 상호작용 부족&lt;br>• 긴 대기 시간&lt;/td>
&lt;td>• 급여 시스템&lt;br>• 은행 거래 명세서 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>다중 프로그래밍 운영 체제&lt;/td>
&lt;td>여러 프로그램을 메모리에 동시에 로드하여 실행하는 시스템&lt;/td>
&lt;td>• 동시 프로그램 실행&lt;br>• CPU 활용도 최적화&lt;/td>
&lt;td>• 처리량 증가&lt;br>• 자원 활용도 향상&lt;/td>
&lt;td>• 복잡한 메모리 관리&lt;br>• 프로세스 간 간섭 가능성&lt;/td>
&lt;td>• 서버 환경&lt;br>• 대형 컴퓨터 시스템&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>다중 처리 운영 체제&lt;/td>
&lt;td>여러 프로세서를 사용하여 작업을 병렬 처리하는 시스템&lt;/td>
&lt;td>• 병렬 처리&lt;br>• 부하 분산&lt;/td>
&lt;td>• 성능 향상&lt;br>• 신뢰성 증가&lt;/td>
&lt;td>• 복잡한 설계&lt;br>• 높은 구현 비용&lt;/td>
&lt;td>• 슈퍼컴퓨터&lt;br>• 고성능 서버&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>다중 작업 운영 체제&lt;/td>
&lt;td>여러 작업을 동시에 실행하는 시스템&lt;/td>
&lt;td>• 작업 전환&lt;br>• 시분할&lt;/td>
&lt;td>• 사용자 반응성 향상&lt;br>• 자원 공유 효율화&lt;/td>
&lt;td>• 컨텍스트 전환 오버헤드&lt;br>• 복잡한 스케줄링&lt;/td>
&lt;td>• 데스크톱 컴퓨터&lt;br>• 워크스테이션&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>시분할 운영 체제&lt;/td>
&lt;td>CPU 시간을 여러 사용자나 작업에 분할하여 할당하는 시스템&lt;/td>
&lt;td>• 빠른 응답 시간&lt;br>• 대화형 컴퓨팅&lt;/td>
&lt;td>• 다중 사용자 지원&lt;br>• 자원 공유 효율성&lt;/td>
&lt;td>• 보안 위험&lt;br>• 성능 저하 가능성&lt;/td>
&lt;td>• 클라우드 컴퓨팅 환경&lt;br>• 대학 컴퓨터 실습실&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>분산 운영 체제&lt;/td>
&lt;td>네트워크로 연결된 여러 컴퓨터에서 작동하는 시스템&lt;/td>
&lt;td>• 자원 공유&lt;br>• 확장성&lt;/td>
&lt;td>• 높은 신뢰성&lt;br>• 성능 향상&lt;/td>
&lt;td>• 복잡한 구현&lt;br>• 네트워크 의존성&lt;/td>
&lt;td>• 클러스터 컴퓨팅&lt;br>• 그리드 컴퓨팅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>네트워크 운영 체제&lt;/td>
&lt;td>네트워크 자원 관리에 특화된 시스템&lt;/td>
&lt;td>• 네트워크 프로토콜 지원&lt;br>• 원격 접속 기능&lt;/td>
&lt;td>• 자원 공유 용이&lt;br>• 중앙 관리 효율성&lt;/td>
&lt;td>• 네트워크 의존성&lt;br>• 보안 취약점&lt;/td>
&lt;td>• 기업 네트워크&lt;br>• 파일 서버&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실시간 운영 체제&lt;/td>
&lt;td>시간 제약이 엄격한 작업을 처리하는 시스템&lt;/td>
&lt;td>• 빠른 응답 시간&lt;br>• 예측 가능한 동작&lt;/td>
&lt;td>• 높은 신뢰성&lt;br>• 정확한 타이밍&lt;/td>
&lt;td>• 제한된 기능&lt;br>• 복잡한 설계&lt;/td>
&lt;td>• 로봇 제어 시스템&lt;br>• 의료 기기&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3></description></item><item><title>System Execution Models</title><link>https://buenhyden.github.io/posts/computer-system/system-execution-models/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/</guid><description/></item></channel></rss>