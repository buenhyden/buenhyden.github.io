<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – I/O Systems</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/</link><description>Recent content in I/O Systems on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/index.xml" rel="self" type="application/rss+xml"/><item><title>System Bus</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/system-bus/</link><pubDate>Tue, 14 Jan 2025 02:17:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/system-bus/</guid><description>
&lt;h2>System Bus&lt;span class="hx-absolute -hx-mt-20" id="system-bus">&lt;/span>
&lt;a href="#system-bus" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>System Bus는 컴퓨터 아키텍처에서 주요 구성 요소들을 연결하는 중요한 통신 경로로, 컴퓨터의 혈관과 같은 역할을 한다. CPU, 메모리, 입출력 장치 등 컴퓨터의 주요 구성 요소들 사이에서 데이터와 신호를 전달한다.&lt;/p>
&lt;p>
&lt;img src="../system-bus.png" alt="System Bus (Internal and Intra)" loading="lazy" />&lt;br>
_Source: &lt;a href="https://witscad.com/course/computer-architecture/chapter/io-communication-io-controller" target="_blank" rel="noopener">https://witscad.com/course/computer-architecture/chapter/io-communication-io-controller&lt;/a> _&lt;/p>
&lt;h3>시스템 버스의 주요 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="시스템-버스의-주요-구성-요소">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%eb%b2%84%ec%8a%a4%ec%9d%98-%ec%a3%bc%ec%9a%94-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>시스템 버스는 세 가지 주요 버스로 구성된다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>데이터 버스 (Data Bus):&lt;/p>
&lt;ul>
&lt;li>양방향 버스로, 시스템 구성 요소들 사이에서 실제 데이터를 전송한다.&lt;/li>
&lt;li>예를 들어, CPU가 메모리에서 데이터를 읽거나 쓸 때 사용된다.&lt;/li>
&lt;li>버스의 폭(width)은 한 번에 전송할 수 있는 데이터의 양을 결정한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>// 예시: 32비트 데이터 버스의 데이터 전송
DataBus.transfer(0x1234ABCD); // 32비트 데이터를 한 번에 전송&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>주소 버스 (Address Bus):&lt;/p>
&lt;ul>
&lt;li>단방향 버스로, 메모리나 I/O 장치의 주소를 지정한다.&lt;/li>
&lt;li>CPU가 접근하고자 하는 메모리 위치를 지정할 때 사용된다.&lt;/li>
&lt;li>버스의 폭은 시스템이 접근할 수 있는 메모리의 최대 크기를 결정한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>// 예시: 메모리 주소 지정
AddressBus.select(0x1000); // 메모리 주소 0x1000 선택&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>제어 버스 (Control Bus):&lt;/p>
&lt;ul>
&lt;li>양방향 버스로, 시스템의 동작을 제어하는 신호를 전달한다.&lt;/li>
&lt;li>읽기/쓰기 신호, 인터럽트 신호, 클록 신호 등을 전달한다.&lt;/li>
&lt;li>데이터 전송의 타이밍과 방향을 조정한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>// 예시: 제어 신호 전송
ControlBus.sendSignal(READ); // 읽기 신호 전송
ControlBus.sendSignal(WRITE); // 쓰기 신호 전송&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>시스템 버스의 동작 방식&lt;span class="hx-absolute -hx-mt-20" id="시스템-버스의-동작-방식">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%eb%b2%84%ec%8a%a4%ec%9d%98-%eb%8f%99%ec%9e%91-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>시스템 버스의 기본적인 동작 과정은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>메모리 읽기 연산:
&lt;ol>
&lt;li>CPU가 주소 버스에 메모리 주소 전송&lt;/li>
&lt;li>제어 버스를 통해 읽기 신호 전송&lt;/li>
&lt;li>메모리가 데이터 버스를 통해 데이터 전송&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>메모리 쓰기 연산:
&lt;ol>
&lt;li>CPU가 주소 버스에 메모리 주소 전송&lt;/li>
&lt;li>데이터 버스에 쓸 데이터 전송&lt;/li>
&lt;li>제어 버스를 통해 쓰기 신호 전송&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3>기능&lt;span class="hx-absolute -hx-mt-20" id="기능">&lt;/span>
&lt;a href="#%ea%b8%b0%eb%8a%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>데이터 전송: 구성 요소 간 정보 교환&lt;/li>
&lt;li>주소 지정: 메모리 위치나 I/O 장치 식별&lt;/li>
&lt;li>제어 신호 전달: 읽기/쓰기 작업 등의 동작 제어&lt;/li>
&lt;/ul>
&lt;h3>시스템 버스의 특성&lt;span class="hx-absolute -hx-mt-20" id="시스템-버스의-특성">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%eb%b2%84%ec%8a%a4%ec%9d%98-%ed%8a%b9%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>동기화 (Synchronization):&lt;/p>
&lt;ul>
&lt;li>버스 클록이 모든 데이터 전송을 동기화한다.&lt;/li>
&lt;li>클록 속도는 버스의 성능을 결정하는 주요 요소이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>중재 (Arbitration):&lt;/p>
&lt;ul>
&lt;li>여러 장치가 동시에 버스를 사용하려 할 때의 충돌을 방지한다.&lt;/li>
&lt;li>우선순위에 따라 버스 사용 권한을 할당한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">BusArbiter&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">request_bus_access&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_bus_available&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">grant_access&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">device&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_to_queue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">device&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>멀티플렉싱 (Multiplexing):&lt;/p>
&lt;ul>
&lt;li>한정된 버스 라인을 효율적으로 사용하기 위해 시분할 방식을 사용한다.&lt;/li>
&lt;li>주소와 데이터를 같은 라인으로 전송할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>시스템 버스의 성능 향상 기법&lt;span class="hx-absolute -hx-mt-20" id="시스템-버스의-성능-향상-기법">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%eb%b2%84%ec%8a%a4%ec%9d%98-%ec%84%b1%eb%8a%a5-%ed%96%a5%ec%83%81-%ea%b8%b0%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>버스 폭 확장:&lt;/p>
&lt;ul>
&lt;li>더 넓은 데이터 버스를 사용하여 한 번에 더 많은 데이터를 전송한다.&lt;/li>
&lt;li>32비트에서 64비트, 128비트로 확장하는 방식이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>계층적 버스 구조:&lt;/p>
&lt;ul>
&lt;li>여러 종류의 버스를 계층적으로 구성하여 성능을 최적화한다.&lt;/li>
&lt;li>예: CPU 버스, 메모리 버스, I/O 버스 등의 분리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>버스 파이프라이닝:&lt;/p>
&lt;ul>
&lt;li>여러 버스 작업을 중첩하여 처리함으로써 성능을 향상시킨다.&lt;/li>
&lt;li>한 작업이 완료되기 전에 다음 작업을 시작할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>성능 영향&lt;span class="hx-absolute -hx-mt-20" id="성능-영향">&lt;/span>
&lt;a href="#%ec%84%b1%eb%8a%a5-%ec%98%81%ed%96%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>버스 속도: 데이터 전송 속도에 직접적 영향&lt;/li>
&lt;li>버스 폭: 한 번에 전송할 수 있는 데이터 양 결정&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>인터럽트 (Interrupt)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/interrupt/</link><pubDate>Fri, 06 Dec 2024 06:50:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/interrupt/</guid><description>
&lt;h2>인터럽트 (Interrupt)&lt;span class="hx-absolute -hx-mt-20" id="인터럽트-interrupt">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8-interrupt" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>CPU가 프로그램을 실행하고 있을 때, 예상치 못한 상황이나 특정 이벤트가 발생하여 처리가 필요한 경우 CPU에게 알려 처리할 수 있도록 하는 메커니즘.&lt;br>
하드웨어나 소프트웨어에 의해 발생할 수 있으며, 운영 체제가 다양한 이벤트에 효율적으로 대응할 수 있게 해준다.&lt;/p>
&lt;p>인터럽트는 프로세서에게 현재 실행 중인 코드를 중단하고 특정 이벤트를 처리하도록 요청하는 신호이다.&lt;/p>
&lt;p>이를 통해 운영 체제는 다음과 같은 목적을 달성할 수 있다:&lt;/p>
&lt;ol>
&lt;li>비동기적 이벤트 처리&lt;/li>
&lt;li>시스템 자원의 효율적 관리&lt;/li>
&lt;li>실시간 응답성 향상&lt;/li>
&lt;li>멀티태스킹 지원&lt;/li>
&lt;/ol>
&lt;h3>인터럽트 관련 주요 개념&lt;span class="hx-absolute -hx-mt-20" id="인터럽트-관련-주요-개념">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8-%ea%b4%80%eb%a0%a8-%ec%a3%bc%ec%9a%94-%ea%b0%9c%eb%85%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>인터럽트 벡터: 각 인터럽트 유형별로 실행될 처리 루틴의 주소를 담고 있는 테이블.&lt;/li>
&lt;li>인터럽트 마스킹: 특정 인터럽트를 일시적으로 무시하도록 설정하는 기능. 중요한 작업 수행 중에 방해받지 않기 위해 사용된다.&lt;/li>
&lt;li>인터럽트 지연: 우선순위가 높은 인터럽트 처리를 위해 현재 처리 중인 인터럽트를 지연시키는 것.&lt;/li>
&lt;li>인터럽트 핸들러(ISR): 인터럽트 발생 시 실행되는 특별한 코드 블록으로 다음과 같은 역할을 수행한다.&lt;br>
1. 인터럽트 처리: 인터럽트의 원인을 파악하고 적절한 대응을 수행한다.&lt;br>
2. 신속한 대응: 시간에 민감한 이벤트를 즉각적으로 처리하여 시스템의 반응성을 유지한다.&lt;br>
3. 컨텍스트 전환: 현재 실행 중인 프로세스의 상태를 저장하고, 인터럽트 처리 후 원래 상태로 복원한다.&lt;br>
4. 하드웨어 상태 관리: 인터럽트 플래그를 적절히 설정하여 하드웨어 상태를 관리한다.&lt;/li>
&lt;/ul>
&lt;h3>인터럽트의 중요성&lt;span class="hx-absolute -hx-mt-20" id="인터럽트의-중요성">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8%ec%9d%98-%ec%a4%91%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>인터럽트는 다음과 같은 이유로 운영 체제에서 중요한 역할을 한다:&lt;/p>
&lt;ol>
&lt;li>실시간 이벤트 처리: 외부 장치의 요청에 신속하게 대응할 수 있다.&lt;/li>
&lt;li>시스템 효율성 향상: 폴링 방식에 비해 CPU 자원을 효율적으로 사용할 수 있다.&lt;/li>
&lt;li>멀티태스킹 지원: 여러 프로세스 간의 빠른 전환을 가능하게 한다.&lt;/li>
&lt;li>예외 상황 처리: 시스템 오류나 예외 상황에 대응할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>인터럽트 처리 과정&lt;span class="hx-absolute -hx-mt-20" id="인터럽트-처리-과정">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8-%ec%b2%98%eb%a6%ac-%ea%b3%bc%ec%a0%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>인터럽트가 발생하면 다음과 같은 순서로 처리된다.&lt;/p>
&lt;ol>
&lt;li>인터럽트 발생 시 CPU는 현재 작업을 중단한다.&lt;/li>
&lt;li>현재 프로세스의 상태를 PCB(Process Control Block)에 저장한다.&lt;/li>
&lt;li>프로세서 모드를 커널 모드로 전환&lt;/li>
&lt;li>인터럽트 벡터 테이블을 참조하여 적절한 인터럽트 서비스 루틴(ISR: Interrupt Service Routine) 위치 확인&lt;/li>
&lt;li>인터럽트 서비스 루틴(ISR: Interrupt Service Routine) 실행&lt;/li>
&lt;li>인터럽트 처리 완료 후 원래 프로세스로 복귀&lt;/li>
&lt;/ol>
&lt;h3>인터럽트의 종류&lt;span class="hx-absolute -hx-mt-20" id="인터럽트의-종류">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8%ec%9d%98-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>인터럽트는 크게 두 가지로 분류된다.&lt;/p>
&lt;h4>하드웨어 인터럽트&lt;span class="hx-absolute -hx-mt-20" id="하드웨어-인터럽트">&lt;/span>
&lt;a href="#%ed%95%98%eb%93%9c%ec%9b%a8%ec%96%b4-%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>외부 장치에 의해 발생하는 인터럽트로, 다음과 같은 예가 있다:&lt;/p>
&lt;ul>
&lt;li>키보드 입력&lt;/li>
&lt;li>마우스 움직임&lt;/li>
&lt;li>타이머 인터럽트&lt;/li>
&lt;li>I/O 장치의 데이터 전송 완료&lt;/li>
&lt;/ul>
&lt;p>하드웨어 인터럽트는 다시 마스크 가능 인터럽트와 마스크 불가능 인터럽트로 나뉜다.&lt;/p>
&lt;h4>소프트웨어 인터럽트&lt;span class="hx-absolute -hx-mt-20" id="소프트웨어-인터럽트">&lt;/span>
&lt;a href="#%ec%86%8c%ed%94%84%ed%8a%b8%ec%9b%a8%ec%96%b4-%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>프로그램 실행 중 발생하는 인터럽트로, 다음과 같은 경우에 발생한다:&lt;/p>
&lt;ul>
&lt;li>시스템 호출(system call)&lt;/li>
&lt;li>0으로 나누기 등의 예외 상황&lt;/li>
&lt;li>프로그램 오류&lt;/li>
&lt;li>특정 명령어 실행 (예: 인터럽트 명령어)&lt;/li>
&lt;/ul>
&lt;h3>인터럽트 우선순위&lt;span class="hx-absolute -hx-mt-20" id="인터럽트-우선순위">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8-%ec%9a%b0%ec%84%a0%ec%88%9c%ec%9c%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>모든 인터럽트가 동일한 중요도를 가지지 않는다.&lt;/p>
&lt;p>일반적인 우선순위는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>전원 이상 인터럽트 (가장 높음)&lt;/li>
&lt;li>기계 착오 인터럽트&lt;/li>
&lt;li>외부 인터럽트&lt;/li>
&lt;li>입출력 인터럽트&lt;/li>
&lt;li>프로그램 검사 인터럽트 (가장 낮음)&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>