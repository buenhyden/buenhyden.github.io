<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Advanced Topics on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/advanced-topics/</link>
    <description>Recent content in Advanced Topics on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.151.2</generator>
    <language>en</language>
    <lastBuildDate>Fri, 25 Oct 2024 06:15:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/advanced-topics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git Submodule vs. Subtree</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/advanced-topics/submodule-vs-subtree/</link>
      <pubDate>Sat, 28 Sep 2024 10:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/advanced-topics/submodule-vs-subtree/</guid>
      <description>깃 서브모듈 (Git Submodule) 과 서브트리 (Git Subtree) 는 외부 코드를 프로젝트에 통합하는 두 가지 접근 방식으로, 각각 고유한 장단점을 가진다. 서브모듈은 외부 저장소에 대한 참조만 저장하여 명확한 버전 관리와 코드 분리를 제공하지만, 복잡한 설정과 팀원 교육이 필요하다. 반면 서브트리는 외부 코드를 직접 통합하여 사용 편의성과 즉각적인 코드 접근성을 제공하지만, 저장소 크기 증가와 히스토리 복잡성이라는 단점이 있다. 프로젝트의 요구사항, 팀 구성, 개발 워크플로우에 따라 적합한 방식을 선택해야 하며, 최신 트렌드는 두 접근 방식 모두 자동화와 사용성 개선에 초점을 맞추고 있다.</description>
    </item>
    <item>
      <title>GitOps and IaC</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/advanced-topics/gitops-and-iac/</link>
      <pubDate>Fri, 25 Oct 2024 06:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/advanced-topics/gitops-and-iac/</guid>
      <description>GitOps 와 IaC(Infrastructure as Code) 는 현대적인 인프라스트럭처와 애플리케이션 관리 방법론으로, Git 을 단일 진실 공급원으로 활용하여 선언적이고 자동화된 방식으로 시스템을 관리한다. GitOps 는 Git 워크플로우를 통해 인프라 변경을 제안, 검토, 승인하고, 자동화된 에이전트가 실제 시스템 상태를 원하는 상태와 지속적으로 동기화한다. 이를 통해 인프라 관리의 일관성, 투명성, 감사 가능성이 향상되고, 변경 사항의 추적과 롤백이 용이해진다. 2025 년 기준으로 AI/ML 통합, 멀티클러스터 관리, 보안 중심 GitOps 등이 주요 동향으로 나타나고 있다.</description>
    </item>
    <item>
      <title>Release Management</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/advanced-topics/release-management/</link>
      <pubDate>Tue, 01 Oct 2024 09:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/advanced-topics/release-management/</guid>
      <description>버전 관리 시스템 (VCS) 에서의 릴리스 관리는 소프트웨어 변경사항을 개발 환경에서 프로덕션 환경으로 안전하고 체계적으로 배포하는 전체 프로세스를 관리하는 방법론이다.  시맨틱 버저닝, 릴리스 브랜치, 태그 시스템을 활용하여 코드 버전을 체계적으로 관리하고, CI/CD 파이프라인을 통해 빌드, 테스트, 배포 과정을 자동화한다. 효과적인 릴리스 관리는 반복성, 자동화, 투명성, 롤백 준비 등의 핵심 원칙을 따르며, 다양한 배포 전략 (블루 - 그린, 카나리, 롤링 배포 등) 을 통해 배포 위험을 최소화한다.</description>
    </item>
  </channel>
</rss>
