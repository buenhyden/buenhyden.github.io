<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Enterprise Usage on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/advanced-topics/enterprise-usage/</link>
    <description>Recent content in Enterprise Usage on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.149.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 30 Sep 2024 06:20:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/advanced-topics/enterprise-usage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Large-scale Management</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/advanced-topics/enterprise-usage/large-scale-management/</link>
      <pubDate>Mon, 30 Sep 2024 06:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/advanced-topics/enterprise-usage/large-scale-management/</guid>
      <description>대규모 버전 관리 시스템은 수천 명의 개발자와 수백만 라인의 코드를 효율적으로 관리하기 위한 핵심 인프라이다. 분산 아키텍처, 고급 브랜칭 전략, 성능 최적화 기술을 통해 대규모 협업을 가능하게 한다. Partial Clone 과 Shallow Clone 같은 기술은 대용량 리포지토리 처리 성능을 크게 향상시키며, 서브모듈과 CODEOWNERS 를 활용한 구조화된 접근법은 복잡성을 관리한다. 팀 규모와 프로젝트 특성에 맞는 브랜칭 전략 선택이 중요하며, AI 기반 자동화와 코드 리뷰, 분산 저장 최적화 등이 미래 발전 방향으로 주목받고 있다. 효율적인 대규모 버전 관리는 단순한 도구를 넘어 조직의 소프트웨어 개발 문화와 프로세스의 핵심 요소로 자리잡고 있다.</description>
    </item>
    <item>
      <title>MonoRepo vs. MultiRepo</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/advanced-topics/enterprise-usage/monorepo-vs-multirepo/</link>
      <pubDate>Mon, 30 Sep 2024 06:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/advanced-topics/enterprise-usage/monorepo-vs-multirepo/</guid>
      <description>모노레포와 멀티레포는 소스 코드 관리를 위한 두 가지 주요 접근법으로, 각각 고유한 장단점을 가지고 있다. 모노레포는 여러 프로젝트를 단일 저장소에서 관리하여 코드 공유, 원자적 변경, 통합 테스트 등의 이점을 제공하지만, 저장소 크기 증가와 접근 제어 제한 등의 단점이 있다. 반면 멀티레포는 각 프로젝트를 독립적인 저장소에서 관리하여 팀 자율성, 세밀한 접근 제어, 독립적 배포 등의 이점을 제공하지만, 코드 재사용 어려움과 의존성 관리 복잡성 등의 단점이 있다. 최근에는 Bazel, Nx, Turborepo 같은 도구의 발전으로 두 접근법의 한계가 완화되고 있으며, 하이브리드 접근법도 증가하고 있다. 프로젝트 특성, 팀 구조, 기술 스택에 따라 적합한 접근법이 달라지므로, 각 조직은 자신의 상황에 맞는 최적의 저장소 전략을 선택해야 한다.</description>
    </item>
  </channel>
</rss>
