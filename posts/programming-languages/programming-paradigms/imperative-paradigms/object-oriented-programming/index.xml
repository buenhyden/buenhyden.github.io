<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>객체 지향 프로그래밍 (Object-Oriented Programming) on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/posts/programming-languages/programming-paradigms/imperative-paradigms/object-oriented-programming/</link>
    <description>Recent content in 객체 지향 프로그래밍 (Object-Oriented Programming) on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Mon, 23 Sep 2024 04:49:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/posts/programming-languages/programming-paradigms/imperative-paradigms/object-oriented-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Interface vs Abstract class</title>
      <link>https://buenhyden.github.io/posts/programming-languages/programming-paradigms/imperative-paradigms/object-oriented-programming/interface-vs-abstract-class/</link>
      <pubDate>Sun, 22 Sep 2024 05:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/programming-paradigms/imperative-paradigms/object-oriented-programming/interface-vs-abstract-class/</guid>
      <description>인터페이스는 클래스가 &amp;#39;무엇을 해야 하는지&amp;#39;를 정의하는 계약(contract)과 같은 역할을 하며, 추상 클래스(Abstract Class)는 하나 이상의 추상 메서드를 포함하는 클래스이다.</description>
    </item>
    <item>
      <title>Access Modifiers</title>
      <link>https://buenhyden.github.io/posts/programming-languages/programming-paradigms/imperative-paradigms/object-oriented-programming/access-modifiers/</link>
      <pubDate>Mon, 23 Sep 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/programming-paradigms/imperative-paradigms/object-oriented-programming/access-modifiers/</guid>
      <description>객체지향 프로그래밍(OOP)에서 접근 제어자(Access Modifiers)는 클래스, 메서드, 변수 등의 접근 범위를 제어하는 중요한 개념이다.</description>
    </item>
    <item>
      <title>Abstract Classes</title>
      <link>https://buenhyden.github.io/posts/programming-languages/programming-paradigms/imperative-paradigms/object-oriented-programming/abstract-classes/</link>
      <pubDate>Sun, 22 Sep 2024 04:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/programming-paradigms/imperative-paradigms/object-oriented-programming/abstract-classes/</guid>
      <description>추상 클래스는 하나 이상의 추상 메서드를 포함하는 클래스이다. 추상 메서드는 선언만 되고 구현되지 않은 메서드를 말한다.</description>
    </item>
    <item>
      <title>Interfaces</title>
      <link>https://buenhyden.github.io/posts/programming-languages/programming-paradigms/imperative-paradigms/object-oriented-programming/interfaces/</link>
      <pubDate>Sun, 22 Sep 2024 04:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/programming-paradigms/imperative-paradigms/object-oriented-programming/interfaces/</guid>
      <description>소프트웨어나 애플리케이션에서 인터페이스(Interface)는 두 개의 시스템, 프로그램, 장치 또는 구성 요소 간의 상호 작용을 가능하게 하는 연결점 또는 접점을 의미한다.</description>
    </item>
    <item>
      <title>오버라이딩(Overriding) vs. 오버로딩(Overloading)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/programming-paradigms/imperative-paradigms/object-oriented-programming/overriding-vs-overloading/</link>
      <pubDate>Sun, 22 Sep 2024 04:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/programming-paradigms/imperative-paradigms/object-oriented-programming/overriding-vs-overloading/</guid>
      <description>오버라이딩(Overriding)과 오버로딩(Overloading)에 대해 알아보고 비교 분석해보자.</description>
    </item>
  </channel>
</rss>
