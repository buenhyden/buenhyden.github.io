<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Coroutine</title><link>https://buenhyden.github.io/tags/coroutine/</link><description>Recent content in Coroutine on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 14 Oct 2024 08:30:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/coroutine/index.xml" rel="self" type="application/rss+xml"/><item><title>Process vs Thread vs Coroutine</title><link>https://buenhyden.github.io/til/2024/10/process-vs-thread-vs-coroutine/</link><pubDate>Mon, 14 Oct 2024 08:30:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/10/process-vs-thread-vs-coroutine/</guid><description>
&lt;h2>Process Vs Thread Vs Coroutine&lt;span class="hx-absolute -hx-mt-20" id="process-vs-thread-vs-coroutine">&lt;/span>
&lt;a href="#process-vs-thread-vs-coroutine" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Process, Thread, Coroutine은 모두 프로그램 실행의 단위이지만, 각각 다른 특성과 용도를 가지고 있다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Process:&lt;/p>
&lt;ul>
&lt;li>독립적인 실행 단위로, 자체 메모리 공간과 시스템 자원을 가진다.&lt;/li>
&lt;li>다른 프로세스와 완전히 격리되어 있어 안정성이 높다.&lt;/li>
&lt;li>생성과 전환에 많은 비용이 든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Thread:&lt;/p>
&lt;ul>
&lt;li>프로세스 내부의 실행 단위로, 같은 프로세스의 다른 스레드와 메모리를 공유한다.&lt;/li>
&lt;li>프로세스보다 가볍고, 생성과 전환 비용이 적다.&lt;/li>
&lt;li>동시성을 제공하지만, 동기화 문제에 주의해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Coroutine:&lt;/p>
&lt;ul>
&lt;li>경량 스레드라고도 불리며, 스레드 내에서 실행되는 협력적 멀티태스킹 단위.&lt;/li>
&lt;li>매우 가볍고, 생성과 전환 비용이 매우 적다.&lt;/li>
&lt;li>비동기 프로그래밍을 단순화하고, 동시성을 효율적으로 관리한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Process, Thread, Coroutine의 관계는 다음과 같이 계층적으로 표현할 수 있다:&lt;br>
&lt;code>CPU &amp;gt; Core &amp;gt; Process &amp;gt; Thread &amp;gt; Coroutine&lt;/code>&lt;/p>
&lt;ul>
&lt;li>프로세스는 독립적인 메모리 공간을 가지며, 하나 이상의 스레드를 포함한다.&lt;/li>
&lt;li>스레드는 프로세스 내에서 실행되며, 같은 프로세스의 메모리를 공유한다.&lt;/li>
&lt;li>코루틴은 스레드 내에서 실행되는 더 가벼운 실행 단위이다.&lt;br>
이 구조는 각 단위의 특성과 리소스 사용을 잘 보여준다.&lt;br>
프로세스가 가장 무겁고, 코루틴이 가장 가벼운 실행 단위이다.&lt;/li>
&lt;/ul>
&lt;p>
&lt;img src="../1_AD4ZqhM1MgNe-npYcrkWzQ.webp" alt="Coroutine in User-level Thread" loading="lazy" />&lt;br>
&lt;em>Source: &lt;a href="https://choi-geonu.medium.com/%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%93%A4%EC%9D%B4-%EC%95%8C%EC%95%84%EC%95%BC%ED%95%A0-%EB%8F%99%EC%8B%9C%EC%84%B1-6-coroutine-9eecdbeb2d2d" target="_blank" rel="noopener">https://choi-geonu.medium.com/%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%93%A4%EC%9D%B4-%EC%95%8C%EC%95%84%EC%95%BC%ED%95%A0-%EB%8F%99%EC%8B%9C%EC%84%B1-6-coroutine-9eecdbeb2d2d&lt;/a>&lt;/em>&lt;/p>
&lt;h3>Process Vs Thread Vs Coroutine 비교&lt;span class="hx-absolute -hx-mt-20" id="process-vs-thread-vs-coroutine-비교">&lt;/span>
&lt;a href="#process-vs-thread-vs-coroutine-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;th>Coroutine&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>정의&lt;/strong>&lt;/td>
&lt;td>독립적인 실행 단위로 자체 메모리 공간 보유&lt;/td>
&lt;td>프로세스 내의 실행 단위로 메모리 공유&lt;/td>
&lt;td>협력적 멀티태스킹을 위한 서브루틴&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 공유&lt;/strong>&lt;/td>
&lt;td>독립적인 메모리 공간&lt;/td>
&lt;td>같은 프로세스의 메모리 공유&lt;/td>
&lt;td>같은 스레드의 메모리 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>컨텍스트 스위칭 비용&lt;/strong>&lt;/td>
&lt;td>매우 높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>매우 낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>생성/소멸 비용&lt;/strong>&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>자원 사용&lt;/strong>&lt;/td>
&lt;td>많음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>적음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>통신 방식&lt;/strong>&lt;/td>
&lt;td>IPC (파이프, 소켓 등)&lt;/td>
&lt;td>공유 메모리, 뮤텍스&lt;/td>
&lt;td>yield/await&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>병렬 처리&lt;/strong>&lt;/td>
&lt;td>실제 병렬 처리 가능&lt;/td>
&lt;td>실제 병렬 처리 가능&lt;/td>
&lt;td>동시성만 제공 (병렬x)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>적합한 작업&lt;/strong>&lt;/td>
&lt;td>CPU 집약적 작업&lt;/td>
&lt;td>I/O + CPU 혼합 작업&lt;/td>
&lt;td>I/O 집약적 작업&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>에러 영향&lt;/strong>&lt;/td>
&lt;td>다른 프로세스에 영향 없음&lt;/td>
&lt;td>같은 프로세스의 스레드들에 영향&lt;/td>
&lt;td>명시적 에러 처리 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>디버깅 난이도&lt;/strong>&lt;/td>
&lt;td>쉬움&lt;/td>
&lt;td>어려움&lt;/td>
&lt;td>중간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>확장성&lt;/strong>&lt;/td>
&lt;td>높음 (여러 CPU 코어)&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>단일 스레드 내 제한&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 격리&lt;/strong>&lt;/td>
&lt;td>완전 격리&lt;/td>
&lt;td>부분 공유&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>실행 모델 비교&lt;span class="hx-absolute -hx-mt-20" id="실행-모델-비교">&lt;/span>
&lt;a href="#%ec%8b%a4%ed%96%89-%eb%aa%a8%eb%8d%b8-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>실행 모델&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;th>Coroutine&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>스케줄링 주체&lt;/strong>&lt;/td>
&lt;td>OS&lt;/td>
&lt;td>OS&lt;/td>
&lt;td>프로그램&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>선점 여부&lt;/strong>&lt;/td>
&lt;td>선점형&lt;/td>
&lt;td>선점형&lt;/td>
&lt;td>비선점형&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>컨텍스트 스위치&lt;/strong>&lt;/td>
&lt;td>OS 레벨&lt;/td>
&lt;td>OS 레벨&lt;/td>
&lt;td>사용자 레벨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>동시성 모델&lt;/strong>&lt;/td>
&lt;td>진정한 병렬성&lt;/td>
&lt;td>진정한 병렬성&lt;/td>
&lt;td>협력적 멀티태스킹&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>리소스 사용 비교&lt;span class="hx-absolute -hx-mt-20" id="리소스-사용-비교">&lt;/span>
&lt;a href="#%eb%a6%ac%ec%86%8c%ec%8a%a4-%ec%82%ac%ec%9a%a9-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>리소스&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;th>Coroutine&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>메모리 사용량&lt;/strong>&lt;/td>
&lt;td>높음 (독립 메모리)&lt;/td>
&lt;td>중간 (공유 메모리)&lt;/td>
&lt;td>낮음 (최소 오버헤드)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>CPU 사용&lt;/strong>&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>시스템 리소스&lt;/strong>&lt;/td>
&lt;td>많음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>적음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>스택 크기&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>성능 특성 비교&lt;span class="hx-absolute -hx-mt-20" id="성능-특성-비교">&lt;/span>
&lt;a href="#%ec%84%b1%eb%8a%a5-%ed%8a%b9%ec%84%b1-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>성능 특성&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;th>Coroutine&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>생성 시간&lt;/strong>&lt;/td>
&lt;td>느림&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>빠름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>컨텍스트 스위치 시간&lt;/strong>&lt;/td>
&lt;td>느림&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>빠름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 접근&lt;/strong>&lt;/td>
&lt;td>독립적 (느림)&lt;/td>
&lt;td>공유 (빠름)&lt;/td>
&lt;td>공유 (매우 빠름)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>확장성 한계&lt;/strong>&lt;/td>
&lt;td>CPU 코어 수&lt;/td>
&lt;td>시스템 리소스&lt;/td>
&lt;td>이벤트 루프 성능&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>사용 사례별 비교&lt;span class="hx-absolute -hx-mt-20" id="사용-사례별-비교">&lt;/span>
&lt;a href="#%ec%82%ac%ec%9a%a9-%ec%82%ac%eb%a1%80%eb%b3%84-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>사용 사례&lt;/th>
&lt;th>적합한 모델&lt;/th>
&lt;th>이유&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>대규모 데이터 처리&lt;/td>
&lt;td>Process&lt;/td>
&lt;td>메모리 격리와 CPU 활용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>웹 서버&lt;/td>
&lt;td>Thread/Coroutine&lt;/td>
&lt;td>I/O 작업 처리에 효율적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실시간 게임&lt;/td>
&lt;td>Thread&lt;/td>
&lt;td>낮은 지연시간 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GUI 애플리케이션&lt;/td>
&lt;td>Thread&lt;/td>
&lt;td>사용자 인터페이스 반응성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>네트워크 서비스&lt;/td>
&lt;td>Coroutine&lt;/td>
&lt;td>많은 동시 연결 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>이미지/비디오 처리&lt;/td>
&lt;td>Process&lt;/td>
&lt;td>CPU 집약적 작업&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>코루틴(Coroutine)</title><link>https://buenhyden.github.io/posts/programming-languages/concepts/coroutine/</link><pubDate>Mon, 14 Oct 2024 06:52:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/programming-languages/concepts/coroutine/</guid><description>
&lt;h2>코루틴(Coroutine)&lt;span class="hx-absolute -hx-mt-20" id="코루틴coroutine">&lt;/span>
&lt;a href="#%ec%bd%94%eb%a3%a8%ed%8b%b4coroutine" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>코루틴(Coroutine)은 복잡한 비동기 작업을 간단하고 효율적으로 처리할 수 있게 해주는 프로그래밍 개념이다.&lt;br>
프로그램의 실행 흐름을 제어할 수 있는 프로그래밍 구성 요소이다.&lt;br>
일반적인 함수와 달리, 코루틴은 실행을 일시 중단하고 재개할 수 있으며, 여러 진입점과 종료점을 가질 수 있다.&lt;br>
이는 마치 대화하는 것처럼, 실행을 주고받을 수 있다는 특징이 있다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Python에서의 간단한 코루틴 예제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">simple_coroutine&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;코루틴 시작&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 중단점&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;1초 후 재개&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 다른 중단점&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;또 1초 후 재개&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 코루틴 실행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">simple_coroutine&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">())&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>
&lt;img src="../0_H5DpdbiOZhkWlYBq.webp" alt="Coroutine" loading="lazy" />&lt;br>
_Source: &lt;a href="https://medium.com/@turxan.dunya97/simple-explanation-what-is-coroutines-in-programming-d01e0ddf6f06" target="_blank" rel="noopener">https://medium.com/@turxan.dunya97/simple-explanation-what-is-coroutines-in-programming-d01e0ddf6f06&lt;/a> _&lt;/p>
&lt;h3>코루틴의 주요 특징&lt;span class="hx-absolute -hx-mt-20" id="코루틴의-주요-특징">&lt;/span>
&lt;a href="#%ec%bd%94%eb%a3%a8%ed%8b%b4%ec%9d%98-%ec%a3%bc%ec%9a%94-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>경량성&lt;/strong>: 코루틴은 스레드보다 훨씬 가볍다. 수천 개의 코루틴을 생성해도 시스템 리소스를 많이 사용하지 않는다.&lt;/li>
&lt;li>&lt;strong>비동기 처리&lt;/strong>: 코루틴을 사용하면 비동기 작업을 동기 코드처럼 쉽게 작성할 수 있다.&lt;/li>
&lt;li>&lt;strong>중단 및 재개&lt;/strong>: 코루틴은 실행 중 특정 지점에서 일시 중단되고 나중에 재개될 수 있다.&lt;/li>
&lt;li>&lt;strong>구조화된 동시성&lt;/strong>: 코루틴은 부모-자식 관계로 구성되어 예외 처리와 취소가 용이하다.&lt;/li>
&lt;/ol>
&lt;h3>코루틴의 작동 원리&lt;span class="hx-absolute -hx-mt-20" id="코루틴의-작동-원리">&lt;/span>
&lt;a href="#%ec%bd%94%eb%a3%a8%ed%8b%b4%ec%9d%98-%ec%9e%91%eb%8f%99-%ec%9b%90%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>코루틴은 다음과 같은 방식으로 작동한다:&lt;/p>
&lt;ol>
&lt;li>코루틴이 시작되면 특정 작업을 수행한다.&lt;/li>
&lt;li>작업 중 중단 지점(suspension point)에 도달하면 실행을 일시 중단한다.&lt;/li>
&lt;li>중단된 동안 다른 코루틴이나 작업이 실행될 수 있다.&lt;/li>
&lt;li>중단 조건이 해제되면 중단된 지점부터 다시 실행을 재개한다.&lt;/li>
&lt;/ol>
&lt;h3>코루틴의 장점&lt;span class="hx-absolute -hx-mt-20" id="코루틴의-장점">&lt;/span>
&lt;a href="#%ec%bd%94%eb%a3%a8%ed%8b%b4%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>효율적인 자원 사용&lt;/strong>: 하나의 스레드에서 여러 코루틴을 실행할 수 있어 시스템 자원을 효율적으로 사용한다.&lt;/li>
&lt;li>&lt;strong>간결한 비동기 코드&lt;/strong>: 복잡한 비동기 로직을 간단하고 읽기 쉬운 코드로 작성할 수 있다.&lt;/li>
&lt;li>&lt;strong>에러 처리 용이&lt;/strong>: 구조화된 동시성 덕분에 예외 처리가 쉽다.&lt;/li>
&lt;li>&lt;strong>테스트 용이성&lt;/strong>: 동기 코드처럼 테스트할 수 있어 테스트가 쉽다.&lt;/li>
&lt;/ol>
&lt;h3>코루틴 사용 예시&lt;span class="hx-absolute -hx-mt-20" id="코루틴-사용-예시">&lt;/span>
&lt;a href="#%ec%bd%94%eb%a3%a8%ed%8b%b4-%ec%82%ac%ec%9a%a9-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">asyncio&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">data_processor&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;데이터를 비동기적으로 처리하는 코루틴입니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 각 처리 단계에서 다른 코루틴에게 실행을 양보할 수 있습니다.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;데이터 처리 시작&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 첫 번째 처리 단계&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># I/O 작업을 시뮬레이션&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;첫 번째 단계 완료&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 두 번째 처리 단계&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;두 번째 단계 완료&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;처리 완료&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">progress_monitor&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;다른 작업의 진행 상황을 모니터링하는 코루틴입니다.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;모니터링 중…&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 0.5초마다 상태 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;여러 코루틴을 동시에 실행하는 메인 함수입니다.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 처리 작업과 모니터링을 동시에 실행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">processor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data_processor&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">monitor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">progress_monitor&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># data_processor가 완료될 때까지 기다림&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="n">processor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 모니터링 작업 중단&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">monitor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cancel&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;최종 결과: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 이벤트 루프 실행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">())&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>