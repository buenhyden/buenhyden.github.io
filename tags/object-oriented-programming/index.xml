<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Object-Oriented-Programming on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/object-oriented-programming/</link>
    <description>Recent content in Object-Oriented-Programming on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.7</generator>
    <language>en</language>
    <lastBuildDate>Mon, 23 Sep 2024 04:49:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/object-oriented-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Interface vs Abstract class</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/paradigm-features/interface-vs-abstract-class/</link>
      <pubDate>Sun, 22 Sep 2024 05:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/paradigm-features/interface-vs-abstract-class/</guid>
      <description>인터페이스는 클래스가 &amp;#39;무엇을 해야 하는지&amp;#39;를 정의하는 계약(contract)과 같은 역할을 하며, 추상 클래스(Abstract Class)는 하나 이상의 추상 메서드를 포함하는 클래스이다.</description>
    </item>
    <item>
      <title>Access Modifiers</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/access-modifiers/</link>
      <pubDate>Mon, 23 Sep 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/access-modifiers/</guid>
      <description>객체지향 프로그래밍(OOP)에서 접근 제어자(Access Modifiers)는 클래스, 메서드, 변수 등의 접근 범위를 제어하는 중요한 개념이다.</description>
    </item>
    <item>
      <title>다형성 (Polymorphism)</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/primary-principles/polymorphism/</link>
      <pubDate>Sun, 22 Sep 2024 10:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/primary-principles/polymorphism/</guid>
      <description>다형성(Polymorphism)은 객체지향 프로그래밍의 핵심 특징 중 하나로, &amp;#34;여러 가지 형태를 가질 수 있는 능력&amp;#34;을 의미한다</description>
    </item>
    <item>
      <title>상속 (Inheritance)</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/primary-principles/inheritance/</link>
      <pubDate>Sun, 22 Sep 2024 10:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/primary-principles/inheritance/</guid>
      <description>상속은 객체지향 프로그래밍의 핵심 특징 중 하나로, 기존 클래스의 특성을 다른 클래스가 물려받아 재사용하고 확장할 수 있게 해주는 메커니즘</description>
    </item>
    <item>
      <title>객체 지향 프로그래밍 (Object-Oriented Programming)</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/</link>
      <pubDate>Sun, 22 Sep 2024 09:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/</guid>
      <description>객체 지향 프로그래밍 (Object-Oriented Programming, OOP) 은 실세계의 사물을 객체로 모델링하여 프로그램을 설계하는 방법론이다. 추상화, 캡슐화, 상속, 다형성이라는 네 가지 핵심 특징을 통해 코드의 재사용성과 유지보수성을 향상시키며, 대규모 소프트웨어 개발에 적합한 프로그래밍 패러다임이다.</description>
    </item>
    <item>
      <title>추상화 (Abstraction)</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/primary-principles/abstraction/</link>
      <pubDate>Sun, 22 Sep 2024 06:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/primary-principles/abstraction/</guid>
      <description>추상화는 복잡한 시스템에서 핵심적인 개념이나 기능만을 모델링하고 불필요한 세부사항을 감추어 단순화하는 컴퓨터 과학의 근본 원리이다. 데이터 추상화, 절차 추상화, 제어 추상화로 구분되며, 복잡성 관리와 재사용성 향상을 통해 소프트웨어 개발의 생산성과 유지보수성을 크게 향상시킨다.</description>
    </item>
    <item>
      <title>오버라이딩(Overriding) vs. 오버로딩(Overloading)</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/overriding-vs-overloading/</link>
      <pubDate>Sun, 22 Sep 2024 04:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/overriding-vs-overloading/</guid>
      <description>오버라이딩(Overriding)과 오버로딩(Overloading)에 대해 알아보고 비교 분석해보자.</description>
    </item>
    <item>
      <title>Encapsulation</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/primary-principles/encapsulation/</link>
      <pubDate>Sun, 22 Sep 2024 02:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/primary-principles/encapsulation/</guid>
      <description>캡슐화는 데이터와 그 데이터를 처리하는 메서드를 하나의 단위로 묶고, 외부로부터 접근을 제한하는 것을 의미한다.</description>
    </item>
  </channel>
</rss>
