<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Basic-Concepts on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/basic-concepts/</link>
    <description>Recent content in Basic-Concepts on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.151.2</generator>
    <language>en</language>
    <lastBuildDate>Fri, 05 Sep 2025 04:28:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/basic-concepts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/web/</link>
      <pubDate>Wed, 04 Dec 2024 12:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/web/</guid>
      <description>Web(월드 와이드 웹)은 인터넷을 통해 접근할 수 있는 정보의 거대한 네트워크이다.</description>
    </item>
    <item>
      <title>OSI Model</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/network-models/osi-model/</link>
      <pubDate>Wed, 16 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/network-models/osi-model/</guid>
      <description>OSI 7계층은 통신 기능을 물리→데이터링크→네트워크→전송→세션→표현→응용의 7단계로 분리한 개념적 참조모델(ISO/IEC 7498-1)이다. 계층별 캡슐화와 표준화로 상호운용성·문제추적·설계 기준을 제공하며, 실제 구현은 TCP/IP 모델과 혼재되어 사용된다.</description>
    </item>
    <item>
      <title>TCP/IP Model</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/network-models/tcp-ip-model/</link>
      <pubDate>Thu, 17 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/network-models/tcp-ip-model/</guid>
      <description>TCP/IP 4계층 모델은 네트워크 액세스·인터넷·전송·응용의 네 계층으로 구성된 실무 기준 프로토콜 스택이다. 각 계층은 캡슐화로 역할을 분리해 주소 지정·라우팅·신뢰성·서비스 제공을 담당하며, QUIC/HTTP3 같은 현대 전송 기술도 이 구조 내에서 기능적으로 자리잡는다.</description>
    </item>
    <item>
      <title>OSI vs.TCP/IP Model</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/network-models/osi-vs-tcp-ip-model/</link>
      <pubDate>Sat, 19 Oct 2024 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/network-models/osi-vs-tcp-ip-model/</guid>
      <description>TCP/IP는 인터넷의 실무적 구현을 지배하는 간결한 4계층 모델로 프로토콜 매핑과 상호운용성에 최적화되어 있다. OSI는 7계층으로 개념적 분해와 교육·설계에 유리하다. 실무에선 TCP/IP를 기준으로 구현하되 OSI 사고틀로 설계·분석하는 병행 접근이 효과적이다.</description>
    </item>
    <item>
      <title>Socket Address</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/socket-address/</link>
      <pubDate>Fri, 05 Sep 2025 04:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/socket-address/</guid>
      <description>소켓 주소는 통신 엔드포인트 식별자이며 주소 패밀리(AFam), IP 주소(IPv4/IPv6/Unix), 포트 번호(16비트, 네트워크 바이트순서), 필요시 스코프 정보를 포함한다. bind/connect/accept/getpeername/getsockname 호출의 기본 인자로 작동하고 소스·목적지의 4-튜플로 세션을 규정해 라우팅·보안·디버깅에 핵심 역할을 한다.</description>
    </item>
    <item>
      <title>Port Address</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/port-address/</link>
      <pubDate>Thu, 04 Sep 2025 02:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/port-address/</guid>
      <description>포트 주소는 전송 계층에서 서비스/프로세스를 구분하는 16비트 값이다. IANA가 시스템·등록·동적 범위를 관리한다. TCP·UDP·SCTP·DCCP는 헤더의 출발지/목적지 포트로 다중 통신을 지원하며, ICMP는 포트를 쓰지 않는다. NAT의 NAPT는 포트 변환으로 다수 호스트를 한 공인 IP에 연결한다.</description>
    </item>
    <item>
      <title>Addressing</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/</link>
      <pubDate>Thu, 04 Sep 2025 02:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/</guid>
      <description>네트워크 주소 지정은 노드와 서비스를 고유 식별해 라우팅과 통신을 가능하게 하는 체계다. MAC·IP·포트·DNS·DHCP·ARP/NDP·NAT 등으로 구성되며, 주소계획(CIDR/서브넷), IPv6 전환, 보안(RPKI/소스검증), 프라이버시 및 클라우드·컨테이너 환경의 오버레이 전략이 핵심 고려사항이다.</description>
    </item>
    <item>
      <title>Critical Section</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/basic-concepts/critical-section/</link>
      <pubDate>Tue, 20 May 2025 14:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/basic-concepts/critical-section/</guid>
      <description>**Critical Section**은 여러 실행 흐름이 동시에 공유 자원에 접근하는 것을 방지하기 위해 **오직 하나만 진입**할 수 있도록 설계된 코드 영역입니다. **Mutual Exclusion**을 통해 **데이터 일관성**과 **Race Condition 방지**를 보장하며, **mutex, semaphore, monitor, atomic operation** 등의 동기화 기법으로 제어합니다.</description>
    </item>
    <item>
      <title>Cross-Layer Functions</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/network-models/cross-layer-functions/</link>
      <pubDate>Mon, 12 May 2025 03:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/network-models/cross-layer-functions/</guid>
      <description>Cross-Layer Functions는 계층 경계의 정보를 선택적으로 공유·연동해 성능, 지연, 전력, 보안 등을 전역 최적화하는 설계 방식이다. 무선·IoT·V2X·엣지 AI 등에서 활용되며, DiffServ/ECN/PMTUD/QUIC/5G QoS 등 표준과의 연계 및 SDN·미들웨어 기반 제어로 구현된다. 이점(효율·QoS 향상)과 리스크(복잡성·상호운용성·보안)를 균형 있게 설계해야 효과적이다</description>
    </item>
    <item>
      <title>IP Address</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/ip-address/</link>
      <pubDate>Thu, 24 Apr 2025 06:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/ip-address/</guid>
      <description>IP 주소는 네트워크의 식별자이자 위치 정보로, IPv4/IPv6·CIDR·서브넷팅으로 구조화된다. DHCP/SLAAC로 배포하고 DNS/ARP·NDP로 해석한다. IPv4 고갈로 NAT가 쓰이지만 가시성·보안·운영 영향을 고려해 IPAM·로그·IPv6 전환 정책을 병행해야 한다.</description>
    </item>
    <item>
      <title>Media Access Control Address (MAC Address)</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/mac-address/</link>
      <pubDate>Wed, 16 Oct 2024 12:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/mac-address/</guid>
      <description>MAC 주소(EUI-48)는 데이터 링크 계층(L2)에서 사용되는 48비트 식별자로, IEEE가 OUI/MA-L 등으로 제조사 블록을 관리한다. U/L 비트로 로컬/글로벌, I/G 비트로 단일/그룹을 구분하며 스위치 포워딩·ARP/NDP 연동에 필수적이다. 다만 OS·무선 랜덤화·가상화로 변경·랜덤화가 가능하므로 인증·접근제어는 MAC 단독 의존을 피하고 802.1X·NAC·IPAM 등으로 보완해야 한다.</description>
    </item>
    <item>
      <title>Concurrency vs.Parallelism</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/basic-concepts/concurrency-vs-parallelism/</link>
      <pubDate>Sat, 05 Oct 2024 02:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/basic-concepts/concurrency-vs-parallelism/</guid>
      <description>**동시성(Concurrency)**은 여러 작업을 시간적으로 겹치게 처리해 시스템 응답성과 자원 활용을 높이는 설계 방식이며, **병렬성(Parallelism)**은 여러 작업을 물리적으로 동시에 실행해 처리 성능을 극대화하는 실행 모델이다. 두 개념은 목적과 구현 수준이 다르며, I/O 바운드 작업에는 동시성이, CPU 바운드 작업에는 병렬성이 효과적이다.</description>
    </item>
  </channel>
</rss>
