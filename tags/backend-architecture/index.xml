<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Backend-Architecture on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/backend-architecture/</link>
    <description>Recent content in Backend-Architecture on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 06 Mar 2025 13:00:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/backend-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Event-Driven Architecture vs Event Sourcing Pattern vs Publisher-Subscriber Pattern vs Producer-Consumer Pattern</title>
      <link>https://buenhyden.github.io/posts/backend/backend-architecture/event-driven-architecture/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</link>
      <pubDate>Tue, 19 Nov 2024 03:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/backend-architecture/event-driven-architecture/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</guid>
      <description>EDA는 이벤트 중심의 시스템 설계를 위한 상위 수준의 아키텍처 스타일이며, Publisher-Subscriber Pattern과 Producer-Consumer Pattern은 EDA를 구현하는 데 사용되는 구체적인 통신 모델이다. 그리고 Event Sourcing Pattern은 EDA의 한 구현 방식으로 볼 수 있으며, 이벤트를 저장하고 관리하는 방법을 제공한다.</description>
    </item>
    <item>
      <title>API Integration Patterns</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-design-architecture/api-integration-patterns/</link>
      <pubDate>Thu, 06 Mar 2025 13:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-design-architecture/api-integration-patterns/</guid>
      <description>API 통합 패턴은 다양한 시스템, 서비스, 애플리케이션이 효과적으로 통신하고 상호작용할 수 있도록 하는 설계 접근법이다.</description>
    </item>
    <item>
      <title>Event-Driven Pattern</title>
      <link>https://buenhyden.github.io/posts/backend/backend-architecture/event-driven-architecture/event-driven-pattern/</link>
      <pubDate>Sat, 28 Dec 2024 10:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/backend-architecture/event-driven-architecture/event-driven-pattern/</guid>
      <description>이 패턴은 시스템의 상태 변화를 이벤트로 표현하고, 이를 기반으로 서비스 간 통신을 구현하는 방식이다.</description>
    </item>
    <item>
      <title>Backend for Frontend Pattern</title>
      <link>https://buenhyden.github.io/posts/backend/backend-architecture/backend-for-frontend/</link>
      <pubDate>Thu, 14 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/backend-architecture/backend-for-frontend/</guid>
      <description>BFF는 특정 프론트엔드 애플리케이션을 위해 맞춤형으로 설계된 백엔드 서비스를 의미한다. 이는 마이크로서비스 아키텍처에서 자주 사용되는 패턴으로, 각각의 클라이언트(웹, 모바일, 태블릿 등)가 자신만의 전용 백엔드 서비스를 갖게 된다.</description>
    </item>
    <item>
      <title>API Gateway Pattern</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-design-architecture/api-gateway-pattern/</link>
      <pubDate>Thu, 14 Nov 2024 01:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-design-architecture/api-gateway-pattern/</guid>
      <description>마이크로서비스 아키텍처에서 클라이언트와 백엔드 서비스 간의 단일 진입점 역할을 수행하는 중요한 구성 요소</description>
    </item>
    <item>
      <title>Backend Architecture</title>
      <link>https://buenhyden.github.io/posts/backend/backend-architecture/</link>
      <pubDate>Sat, 19 Oct 2024 17:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/backend-architecture/</guid>
      <description>백엔드 아키텍처는 사용자에게 보이지 않는 서버 측 시스템 설계로, 데이터 처리와 비즈니스 로직을 담당한다. 전통적인 모놀리식에서 마이크로서비스, 서버리스로 진화하고 있으며, 확장성, 유지보수성, 보안성이 핵심 요소이다. 현대 백엔드는 클라우드 네이티브 기술, 컨테이너화, 자동화된 CI/CD 파이프라인을 활용하여 복원력과 확장성을 갖춘 분산 시스템으로 구현된다.</description>
    </item>
    <item>
      <title>Service-oriented architecture</title>
      <link>https://buenhyden.github.io/posts/backend/backend-architecture/service-oriented-architecture/</link>
      <pubDate>Fri, 27 Sep 2024 09:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/backend-architecture/service-oriented-architecture/</guid>
      <description>**Service-Oriented Architecture(SOA)**는 기업의 복잡한 IT 시스템을 **비즈니스 기능 단위의 서비스**로 모듈화하고, 이를 조합해 유연한 애플리케이션을 구축하는 소프트웨어 설계 패턴이다.</description>
    </item>
    <item>
      <title>Event-Driven Architecture</title>
      <link>https://buenhyden.github.io/posts/backend/backend-architecture/event-driven-architecture/</link>
      <pubDate>Thu, 26 Sep 2024 11:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/backend-architecture/event-driven-architecture/</guid>
      <description>Event-Driven Architecture (EDA)는 현대 소프트웨어 아키텍처 패턴 중 하나로, 시스템 내에서 발생하는 이벤트를 중심으로 동작하는 설계 방식이다.</description>
    </item>
    <item>
      <title>Hexagonal Architecture</title>
      <link>https://buenhyden.github.io/posts/backend/backend-architecture/hexagonal-architecture/</link>
      <pubDate>Thu, 26 Sep 2024 08:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/backend-architecture/hexagonal-architecture/</guid>
      <description>애플리케이션의 핵심 비즈니스 로직을 외부 요소로부터 분리하여 유연하고 유지보수가 용이한 시스템을 구축하는 것을 목표로 한다</description>
    </item>
    <item>
      <title>Layered Architecture</title>
      <link>https://buenhyden.github.io/posts/backend/backend-architecture/layered-architecture/</link>
      <pubDate>Thu, 26 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/backend-architecture/layered-architecture/</guid>
      <description>애플리케이션의 구성 요소를 수평적 계층으로 조직화하여 각 계층이 특정 기능을 담당하도록 한다.</description>
    </item>
  </channel>
</rss>
