<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Resource-Management on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/resource-management/</link>
    <description>Recent content in Resource-Management on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.1</generator>
    <language>en</language>
    <lastBuildDate>Wed, 18 Dec 2024 10:42:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/resource-management/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>지연 초기화(Lazy Initialization)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/performance-optimization/lazy-initialization/</link>
      <pubDate>Wed, 18 Dec 2024 10:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/performance-optimization/lazy-initialization/</guid>
      <description>지연 초기화는 객체나 값의 생성을 실제로 필요할 때까지 미루는 설계 패턴이다. 메모리 절약, 빠른 시작, 불필요한 연산 방지 등 자원 효율성을 극대화할 수 있지만, 최초 접근 시 지연, 예외 발생의 지연, 동시성 관리 등 주의가 필요하다.</description>
    </item>
  </channel>
</rss>
