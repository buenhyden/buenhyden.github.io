<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – 라이브러리</title><link>https://buenhyden.github.io/tags/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC/</link><description>Recent content in 라이브러리 on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 03 Dec 2024 06:47:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC/index.xml" rel="self" type="application/rss+xml"/><item><title>라이브러리 (Library)와 프레임워크 (Framework)</title><link>https://buenhyden.github.io/til/2024/12/library-and-framework/</link><pubDate>Tue, 03 Dec 2024 06:47:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/12/library-and-framework/</guid><description>
&lt;h2>라이브러리 (Library)와 프레임워크 (Framework)&lt;/h2>&lt;p>프로그래밍에서 라이브러리와 프레임워크는 소프트웨어 개발의 핵심 도구&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>비교 기준&lt;/th>
&lt;th>라이브러리 (Library)&lt;/th>
&lt;th>프레임워크 (Framework)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>특정 기능을 수행하는 코드의 재사용 가능한 모음&lt;/td>
&lt;td>애플리케이션 개발을 위한 기본 구조와 규칙의 집합&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>제어 흐름&lt;/td>
&lt;td>개발자가 직접 제어 (Caller가 Callee를 호출)&lt;/td>
&lt;td>프레임워크가 제어 (IoC: Inversion of Control)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>유연성&lt;/td>
&lt;td>높음 (필요한 부분만 선택적으로 사용 가능)&lt;/td>
&lt;td>상대적으로 낮음 (정해진 규칙과 구조를 따라야 함)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>학습 곡선&lt;/td>
&lt;td>상대적으로 낮음 (특정 기능만 학습)&lt;/td>
&lt;td>높음 (전체 구조와 규칙을 이해해야 함)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>코드 구조화&lt;/td>
&lt;td>개발자가 직접 설계&lt;/td>
&lt;td>프레임워크가 기본 구조 제공&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>대표적 예시&lt;/td>
&lt;td>• React.js (UI 라이브러리)&lt;br>• NumPy (수치 계산)&lt;br>• jQuery (DOM 조작)&lt;br>• Requests (HTTP 통신)&lt;/td>
&lt;td>• Django (Python 웹)&lt;br>• Spring (Java 엔터프라이즈)&lt;br>• Angular (웹 프론트엔드)&lt;br>• Laravel (PHP 웹)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 장점&lt;/td>
&lt;td>• 필요한 기능만 선택적 사용&lt;br>• 가볍고 유연한 구조&lt;br>• 빠른 학습과 적용 가능&lt;br>• 다른 도구와 쉽게 통합&lt;/td>
&lt;td>• 일관된 코드 구조&lt;br>• 표준화된 개발 방식&lt;br>• 보안, 성능 최적화 제공&lt;br>• 큰 규모의 프로젝트에 적합&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 단점&lt;/td>
&lt;td>• 구조화된 가이드 부족&lt;br>• 일관성 있는 코드 작성 어려움&lt;br>• 큰 프로젝트에서 관리 어려움&lt;/td>
&lt;td>• 학습에 많은 시간 필요&lt;br>• 유연성 제한&lt;br>• 불필요한 기능도 포함될 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용 시기&lt;/td>
&lt;td>• 특정 기능만 필요할 때&lt;br>• 작은 규모의 프로젝트&lt;br>• 최대한의 자유도가 필요할 때&lt;/td>
&lt;td>• 큰 규모의 프로젝트&lt;br>• 표준화된 개발이 필요할 때&lt;br>• 팀 단위 개발 시&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>라이브러리(Library)&lt;/h3>&lt;p>라이브러리는 특정 기능을 수행하는 함수, 클래스, 모듈 등의 모음이다.&lt;br>
개발자가 필요할 때 호출하여 사용할 수 있는 도구 모음이라고 볼 수 있다&lt;/p>
&lt;h3>프레임워크(Framework)&lt;/h3>&lt;p>프레임워크는 애플리케이션의 기본 구조를 제공하는 더 큰 규모의 소프트웨어 플랫폼이다.&lt;br>
프레임워크는 애플리케이션 개발의 전체적인 흐름과 구조를 정의한다.&lt;br>
특정 방식으로 코드를 작성하도록 규칙을 정하고, 전체적인 아키텍처를 제공한다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>