<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>RESTful-API on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/restful-api/</link>
    <description>Recent content in RESTful-API on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.151.2</generator>
    <language>en</language>
    <lastBuildDate>Wed, 26 Feb 2025 11:58:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/restful-api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Get-and-Patch</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/handling-crud-operations/get-and-patch/</link>
      <pubDate>Wed, 26 Feb 2025 11:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/handling-crud-operations/get-and-patch/</guid>
      <description>&amp;#34;Get-and-Patch&amp;#34;는 **리소스의 부분적 업데이트를 효율적으로 처리하기 위한 REST API 디자인 패턴**으로, 기존 CRUD(Create, Read, Update, Delete) 방식의 한계를 보완한다.</description>
    </item>
    <item>
      <title>Get-and-Set</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/handling-crud-operations/get-and-set/</link>
      <pubDate>Wed, 26 Feb 2025 11:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/handling-crud-operations/get-and-set/</guid>
      <description>&amp;#34;Get-and-Set&amp;#34;은 전통적인 CRUD(Create, Read, Update, Delete) 방식을 개선한 REST API 디자인 패턴으로, **리소스의 존재 여부와 관계없이 단순화된 작업 흐름**을 제공한다.</description>
    </item>
    <item>
      <title>Timestamp-Checked</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/handling-crud-operations/timestamp-checked/</link>
      <pubDate>Wed, 26 Feb 2025 11:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/handling-crud-operations/timestamp-checked/</guid>
      <description>Timestamp-Checked 방식은 동시성 제어를 위한 중요한 기법 중 하나로, 주로 낙관적 동시성 제어(Optimistic Concurrency Control)의 맥락에서 사용된다.</description>
    </item>
    <item>
      <title>Handling CRUD Operations</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/handling-crud-operations/</link>
      <pubDate>Wed, 26 Feb 2025 02:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/handling-crud-operations/</guid>
      <description>CRUD는 데이터 중심 애플리케이션에서 가장 기본적인 네 가지 작업인 생성(Create), 읽기(Read), 업데이트(Update), 삭제(Delete)를 의미한다.</description>
    </item>
    <item>
      <title>Error Handling</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/error-handling/</link>
      <pubDate>Wed, 26 Feb 2025 02:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/error-handling/</guid>
      <description>RESTful API의.오류 처리는 개발자 경험과 시스템 안정성에 중요한 영향을 미치는 핵심 요소이다.  오류 상황을 어떻게 다루고 전달하는지에 따라 API의 품질이 크게 달라질 수 있다.</description>
    </item>
    <item>
      <title>RFC 9457</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/error-handling/rfc-9457/</link>
      <pubDate>Sun, 15 Dec 2024 14:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/error-handling/rfc-9457/</guid>
      <description>**RFC 9457**은 그 후속 버전으로, **HTTP API의 오류 응답을 구조화된 형식으로 전달하기 위한 표준**이다.</description>
    </item>
    <item>
      <title>RFC 7807</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/error-handling/rfc-7807/</link>
      <pubDate>Sun, 15 Dec 2024 14:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/error-handling/rfc-7807/</guid>
      <description>RFC 7807은 HTTP API에서 오류 상황을 일관되고 기계가 처리하기 쉬운 방식으로 전달하기 위한 표준이다.</description>
    </item>
    <item>
      <title>HATEOAS (Hypermedia As The Engine Of Application State)</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/hateoas/</link>
      <pubDate>Sat, 19 Oct 2024 07:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/hateoas/</guid>
      <description>RESTful API 설계의 중요한 개념으로, 클라이언트와 서버 간의 동적이고 유연한 상호작용을 가능하게 하는 방식.</description>
    </item>
    <item>
      <title>RESTful API</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/</link>
      <pubDate>Sat, 19 Oct 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/api-styles/rest/restful-api/</guid>
      <description>REST는 네트워크 시스템, 특히 웹에서 자원을 정의하고 접근하는 방법을 제공한다. 그 이름에서 알 수 있듯이 핵심은 &amp;#34;표현(Representation)&amp;#34;과 &amp;#34;상태 전이(State Transfer)&amp;#34;이다.</description>
    </item>
  </channel>
</rss>
