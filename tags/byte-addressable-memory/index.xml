<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Byte-Addressable-Memory</title><link>https://buenhyden.github.io/tags/byte-addressable-memory/</link><description>Recent content in Byte-Addressable-Memory on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 19 Dec 2024 11:38:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/byte-addressable-memory/index.xml" rel="self" type="application/rss+xml"/><item><title>Byte Addressable Memory vs Word Addressable Memory</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/byte-addressable-memory-vs-word-addressable-memory/</link><pubDate>Thu, 19 Dec 2024 11:38:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/byte-addressable-memory-vs-word-addressable-memory/</guid><description>
&lt;h2>Byte Addressable Memory Vs Word Addressable Memory&lt;span class="hx-absolute -hx-mt-20" id="byte-addressable-memory-vs-word-addressable-memory">&lt;/span>
&lt;a href="#byte-addressable-memory-vs-word-addressable-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Byte Addressable Memory와 Word Addressable Memory는 컴퓨터 메모리의 주소 지정 방식을 설명하는 개념이다.&lt;br>
이 두 가지 방식은 메모리의 구조와 데이터 접근 방법에 중요한 차이를 나타낸다.&lt;/p>
&lt;p>
&lt;img src="../fig_a.jpg.webp" alt="Byte Addressable Memory Vs Word Addressable Memory" loading="lazy" />&lt;br>
_Sourece: &lt;a href="https://examradar.com/memory-organisation/" target="_blank" rel="noopener">https://examradar.com/memory-organisation/&lt;/a> _&lt;/p>
&lt;h3>Byte Addressable Memory&lt;span class="hx-absolute -hx-mt-20" id="byte-addressable-memory">&lt;/span>
&lt;a href="#byte-addressable-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Byte Addressable Memory는 각 바이트(8비트)마다 고유한 주소가 할당되어 개별적으로 접근할 수 있는 메모리 구조이다.&lt;/p>
&lt;p>가장 작은 주소 지정 단위(smallest addressable unit)는 1바이트(8비트)이며, 이를 통해 메모리의 각 바이트에 직접 접근할 수 있다.&lt;br>
CPU는 개별 바이트 단위로 메모리에 접근할 수 있으며, 워드(일반적으로 4바이트 또는 8바이트) 단위의 접근도 가능하다.&lt;br>
32비트 시스템에서는 2^32개의 주소를 가질 수 있어 최대 4GB의 메모리를 지원하며, 64비트 시스템에서는 훨씬 더 큰 주소 공간을 제공한다.&lt;/p>
&lt;p>세밀한 메모리 조작이 가능하며 다양한 데이터 타입을 효율적으로 저장할 수 있으며, 문자열 처리 등 바이트 단위 연산에 유리하다.&lt;/p>
&lt;blockquote>
&lt;p>엔디안(Endianness)&lt;/p>
&lt;ul>
&lt;li>메모리에 다중 바이트 데이터를 저장하는 순서를 나타낸다.&lt;/li>
&lt;li>주요 엔디안(Endianness)는 다음과 같다.
&lt;ul>
&lt;li>빅 엔디안(Big Endian):
&lt;ul>
&lt;li>가장 중요한 바이트(Most Significant Byte, MSB)가 가장 낮은 메모리 주소에 저장된다.&lt;/li>
&lt;li>사람이 숫자를 읽는 방식과 유사하여 직관적이다.&lt;/li>
&lt;li>주로 네트워크 프로토콜에서 사용되며, &amp;ldquo;네트워크 바이트 순서&amp;quot;라고도 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>리틀 엔디안(Little Endian):
&lt;ul>
&lt;li>가장 덜 중요한 바이트(Least Significant Byte, LSB)가 가장 낮은 메모리 주소에 저장된다.&lt;/li>
&lt;li>Intel x86, x64 프로세서 등 많은 현대 컴퓨터 시스템에서 사용된다.&lt;/li>
&lt;li>일부 수학적 연산에서 효율적일 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>예를 들어, 32비트 정수 0x11223344를 메모리에 저장할 때:
&lt;ul>
&lt;li>빅 엔디안: 11 22 33 44&lt;/li>
&lt;li>리틀 엔디안: 44 33 22 11&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>엔디안은 다중 바이트 데이터 처리에만 영향을 미치며, 단일 바이트 데이터(예: ASCII 문자)는 영향을 받지 않는다.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3>Word Addressable Memory&lt;span class="hx-absolute -hx-mt-20" id="word-addressable-memory">&lt;/span>
&lt;a href="#word-addressable-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Word Addressable Memory는 메모리의 각 워드(word)마다 고유한 주소가 할당되는 메모리 구조로, 여기서 워드는 프로세서가 한 번에 처리할 수 있는 데이터의 기본 단위를 의미한다. 일반적으로 워드 크기는 32비트(4바이트) 또는 64비트(8바이트)이다.&lt;br>
워드 단위로만 메모리에 접근할 수 있으며, 개별 바이트에 직접 접근할 수 없다.&lt;br>
바이트 주소 지정 방식에 비해 더 적은 주소로 더 큰 메모리 공간을 관리할 수 있으며, 워드 크기의 데이터 처리에 효율적이다. 또한, 작은 크기의 데이터 처리에는 비효율적일 수 있다.&lt;/p>
&lt;p>워드 크기에 따라 주소 지정 가능한 메모리 용량이 달라진다.&lt;br>
예를 들어:&lt;/p>
&lt;ul>
&lt;li>16비트 주소와 32비트 워드 시스템: 2^16 * 4바이트 = 256KB&lt;/li>
&lt;li>32비트 주소와 64비트 워드 시스템: 2^32 * 8바이트 = 32GB&lt;/li>
&lt;/ul>
&lt;p>큰 데이터 처리에 효율적이며, 주소 공간을 효율적으로 사용할 수 있다.&lt;br>
하지만, 작은 데이터 처리에 비효율적이며, 바이트 단위 조작이 어렵다.&lt;/p>
&lt;h3>비교 분석 표&lt;span class="hx-absolute -hx-mt-20" id="비교-분석-표">&lt;/span>
&lt;a href="#%eb%b9%84%ea%b5%90-%eb%b6%84%ec%84%9d-%ed%91%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Byte Addressable Memory&lt;/th>
&lt;th>Word Addressable Memory&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>주소 단위&lt;/strong>&lt;/td>
&lt;td>1 바이트&lt;/td>
&lt;td>1 워드 (보통 4바이트 또는 8바이트)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 접근&lt;/strong>&lt;/td>
&lt;td>바이트 단위로 가능&lt;/td>
&lt;td>워드 단위로만 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주소 공간&lt;/strong>&lt;/td>
&lt;td>더 많은 주소 필요&lt;/td>
&lt;td>더 적은 주소 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>유연성&lt;/strong>&lt;/td>
&lt;td>높음 (바이트 단위 조작 가능)&lt;/td>
&lt;td>제한적 (워드 단위로만 조작)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 효율&lt;/strong>&lt;/td>
&lt;td>세밀한 메모리 관리 가능&lt;/td>
&lt;td>워드 크기 미만의 데이터도 워드 전체 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>구현 복잡도&lt;/strong>&lt;/td>
&lt;td>상대적으로 복잡&lt;/td>
&lt;td>상대적으로 단순&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주요 용도&lt;/strong>&lt;/td>
&lt;td>범용 컴퓨팅 시스템&lt;/td>
&lt;td>특수 목적 프로세서, 일부 임베디드 시스템&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>데이터 정렬&lt;/strong>&lt;/td>
&lt;td>바이트 단위 정렬 가능&lt;/td>
&lt;td>워드 경계에 정렬 필요&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>세부 특성 비교&lt;span class="hx-absolute -hx-mt-20" id="세부-특성-비교">&lt;/span>
&lt;a href="#%ec%84%b8%eb%b6%80-%ed%8a%b9%ec%84%b1-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>메모리 접근 패턴&lt;span class="hx-absolute -hx-mt-20" id="메모리-접근-패턴">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ec%a0%91%ea%b7%bc-%ed%8c%a8%ed%84%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Byte Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">access_byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">memory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1"># 직접 바이트 접근&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Word Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">access_word&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">word_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">address&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">WORD_SIZE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">memory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">word_address&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1"># 워드 단위 접근&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>메모리 사용 효율&lt;span class="hx-absolute -hx-mt-20" id="메모리-사용-효율">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ec%82%ac%ec%9a%a9-%ed%9a%a8%ec%9c%a8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Byte Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">char&lt;/span> &lt;span class="n">small_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># 1바이트만 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Word Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">word&lt;/span> &lt;span class="n">small_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># 전체 워드(4바이트) 사용&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>주소 계산&lt;span class="hx-absolute -hx-mt-20" id="주소-계산">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%86%8c-%ea%b3%84%ec%82%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Byte Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">byte_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Word Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">word_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">WORD_SIZE&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>시스템 수준 영향&lt;span class="hx-absolute -hx-mt-20" id="시스템-수준-영향">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%ec%88%98%ec%a4%80-%ec%98%81%ed%96%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>영향 분야&lt;/th>
&lt;th>Byte Addressable&lt;/th>
&lt;th>Word Addressable&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>메모리 관리&lt;/strong>&lt;/td>
&lt;td>더 복잡하지만 유연함&lt;/td>
&lt;td>단순하지만 제한적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>캐시 구성&lt;/strong>&lt;/td>
&lt;td>바이트 단위 접근 지원 필요&lt;/td>
&lt;td>워드 단위로 단순화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>버스 대역폭&lt;/strong>&lt;/td>
&lt;td>바이트 단위 전송 지원&lt;/td>
&lt;td>워드 단위 전송에 최적화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>명령어 세트&lt;/strong>&lt;/td>
&lt;td>바이트 조작 명령어 포함&lt;/td>
&lt;td>워드 단위 명령어 중심&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>성능 특성&lt;/strong>&lt;/td>
&lt;td>세밀한 조작 가능하나 오버헤드 있음&lt;/td>
&lt;td>단순하고 효율적이나 제한적&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 차이점들을 이해하는 것은 시스템 설계와 최적화에 중요합니다. 특히 저수준 프로그래밍이나 시스템 프로그래밍을 할 때 이러한 특성들을 고려해야 한다.&lt;/p>
&lt;hr>
&lt;h3>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3></description></item></channel></rss>