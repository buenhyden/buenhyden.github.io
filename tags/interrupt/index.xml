<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Interrupt</title><link>https://buenhyden.github.io/tags/interrupt/</link><description>Recent content in Interrupt on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 06 Dec 2024 06:50:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/interrupt/index.xml" rel="self" type="application/rss+xml"/><item><title>인터럽트 (Interrupt)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/interrupt/</link><pubDate>Fri, 06 Dec 2024 06:50:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/interrupt/</guid><description>
&lt;h2>인터럽트 (Interrupt)&lt;/h2>&lt;p>CPU가 프로그램을 실행하고 있을 때, 예상치 못한 상황이나 특정 이벤트가 발생하여 처리가 필요한 경우 CPU에게 알려 처리할 수 있도록 하는 메커니즘.&lt;br>
하드웨어나 소프트웨어에 의해 발생할 수 있으며, 운영 체제가 다양한 이벤트에 효율적으로 대응할 수 있게 해준다.&lt;/p>
&lt;p>인터럽트는 프로세서에게 현재 실행 중인 코드를 중단하고 특정 이벤트를 처리하도록 요청하는 신호이다.&lt;/p>
&lt;p>이를 통해 운영 체제는 다음과 같은 목적을 달성할 수 있다:&lt;/p>
&lt;ol>
&lt;li>비동기적 이벤트 처리&lt;/li>
&lt;li>시스템 자원의 효율적 관리&lt;/li>
&lt;li>실시간 응답성 향상&lt;/li>
&lt;li>멀티태스킹 지원&lt;/li>
&lt;/ol>
&lt;h3>인터럽트 관련 주요 개념&lt;/h3>&lt;ul>
&lt;li>인터럽트 벡터: 각 인터럽트 유형별로 실행될 처리 루틴의 주소를 담고 있는 테이블.&lt;/li>
&lt;li>인터럽트 마스킹: 특정 인터럽트를 일시적으로 무시하도록 설정하는 기능. 중요한 작업 수행 중에 방해받지 않기 위해 사용된다.&lt;/li>
&lt;li>인터럽트 지연: 우선순위가 높은 인터럽트 처리를 위해 현재 처리 중인 인터럽트를 지연시키는 것.&lt;/li>
&lt;li>인터럽트 핸들러(ISR): 인터럽트 발생 시 실행되는 특별한 코드 블록으로 다음과 같은 역할을 수행한다.&lt;br>
1. 인터럽트 처리: 인터럽트의 원인을 파악하고 적절한 대응을 수행한다.&lt;br>
2. 신속한 대응: 시간에 민감한 이벤트를 즉각적으로 처리하여 시스템의 반응성을 유지한다.&lt;br>
3. 컨텍스트 전환: 현재 실행 중인 프로세스의 상태를 저장하고, 인터럽트 처리 후 원래 상태로 복원한다.&lt;br>
4. 하드웨어 상태 관리: 인터럽트 플래그를 적절히 설정하여 하드웨어 상태를 관리한다.&lt;/li>
&lt;/ul>
&lt;h3>인터럽트의 중요성&lt;/h3>&lt;p>인터럽트는 다음과 같은 이유로 운영 체제에서 중요한 역할을 한다:&lt;/p>
&lt;ol>
&lt;li>실시간 이벤트 처리: 외부 장치의 요청에 신속하게 대응할 수 있다.&lt;/li>
&lt;li>시스템 효율성 향상: 폴링 방식에 비해 CPU 자원을 효율적으로 사용할 수 있다.&lt;/li>
&lt;li>멀티태스킹 지원: 여러 프로세스 간의 빠른 전환을 가능하게 한다.&lt;/li>
&lt;li>예외 상황 처리: 시스템 오류나 예외 상황에 대응할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>인터럽트 처리 과정&lt;/h3>&lt;p>인터럽트가 발생하면 다음과 같은 순서로 처리된다.&lt;/p>
&lt;ol>
&lt;li>인터럽트 발생 시 CPU는 현재 작업을 중단한다.&lt;/li>
&lt;li>현재 프로세스의 상태를 PCB(Process Control Block)에 저장한다.&lt;/li>
&lt;li>프로세서 모드를 커널 모드로 전환&lt;/li>
&lt;li>인터럽트 벡터 테이블을 참조하여 적절한 인터럽트 서비스 루틴(ISR: Interrupt Service Routine) 위치 확인&lt;/li>
&lt;li>인터럽트 서비스 루틴(ISR: Interrupt Service Routine) 실행&lt;/li>
&lt;li>인터럽트 처리 완료 후 원래 프로세스로 복귀&lt;/li>
&lt;/ol>
&lt;h3>인터럽트의 종류&lt;/h3>&lt;p>인터럽트는 크게 두 가지로 분류된다.&lt;/p>
&lt;h4>하드웨어 인터럽트&lt;/h4>&lt;p>외부 장치에 의해 발생하는 인터럽트로, 다음과 같은 예가 있다:&lt;/p>
&lt;ul>
&lt;li>키보드 입력&lt;/li>
&lt;li>마우스 움직임&lt;/li>
&lt;li>타이머 인터럽트&lt;/li>
&lt;li>I/O 장치의 데이터 전송 완료&lt;/li>
&lt;/ul>
&lt;p>하드웨어 인터럽트는 다시 마스크 가능 인터럽트와 마스크 불가능 인터럽트로 나뉜다.&lt;/p>
&lt;h4>소프트웨어 인터럽트&lt;/h4>&lt;p>프로그램 실행 중 발생하는 인터럽트로, 다음과 같은 경우에 발생한다:&lt;/p>
&lt;ul>
&lt;li>시스템 호출(system call)&lt;/li>
&lt;li>0으로 나누기 등의 예외 상황&lt;/li>
&lt;li>프로그램 오류&lt;/li>
&lt;li>특정 명령어 실행 (예: 인터럽트 명령어)&lt;/li>
&lt;/ul>
&lt;h3>인터럽트 우선순위&lt;/h3>&lt;p>모든 인터럽트가 동일한 중요도를 가지지 않는다.&lt;/p>
&lt;p>일반적인 우선순위는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>전원 이상 인터럽트 (가장 높음)&lt;/li>
&lt;li>기계 착오 인터럽트&lt;/li>
&lt;li>외부 인터럽트&lt;/li>
&lt;li>입출력 인터럽트&lt;/li>
&lt;li>프로그램 검사 인터럽트 (가장 낮음)&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>