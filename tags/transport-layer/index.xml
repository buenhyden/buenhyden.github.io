<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Transport-Layer</title><link>https://buenhyden.github.io/tags/transport-layer/</link><description>Recent content in Transport-Layer on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 27 Sep 2024 05:58:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/transport-layer/index.xml" rel="self" type="application/rss+xml"/><item><title>TCP/IP 4계층 - 3. Transport Layer</title><link>https://buenhyden.github.io/posts/networking-and-communications/tcp-ip-4-layers/tcpip-4-layers-3-transport-layer/</link><pubDate>Fri, 27 Sep 2024 05:58:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/tcp-ip-4-layers/tcpip-4-layers-3-transport-layer/</guid><description>
&lt;h2>Transport Layer&lt;span class="hx-absolute -hx-mt-20" id="transport-layer">&lt;/span>
&lt;a href="#transport-layer" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>전송 계층은 서로 다른 호스트에서 동작하는 애플리케이션 프로세스 간의 논리적 통신을 제공한다.&lt;br>
이 계층은 애플리케이션 계층과 인터넷 계층 사이에 위치하여 두 계층을 이어주는 역할을 수행하며, 데이터가 목적지 애플리케이션까지 안전하게 전달되도록 한다.&lt;br>
&lt;img src="../tcp-ip-model-vs-osi.png" alt="A side-by-side comparison illustration of the TCP/IP mod_el structure and OSI model structure_." loading="lazy" />&lt;br>
_Source: &lt;a href="https://cheapsslsecurity.com/blog/what-is-the-tcp-model-an-exploration-of-tcp-ip-layers/" target="_blank" rel="noopener">https://cheapsslsecurity.com/blog/what-is-the-tcp-model-an-exploration-of-tcp-ip-layers/&lt;/a> _&lt;/p>
&lt;h3>주요 기능&lt;span class="hx-absolute -hx-mt-20" id="주요-기능">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ea%b8%b0%eb%8a%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>데이터 분할 및 재조립: 애플리케이션 계층에서 받은 데이터를 세그먼트로 분할하고, 수신 측에서 다시 조립한다.&lt;/li>
&lt;li>포트 번호 관리: 애플리케이션을 구분하기 위해 포트 번호를 사용한다.&lt;/li>
&lt;li>연결 제어: TCP의 경우 연결 지향적 통신을 제공한다.&lt;/li>
&lt;li>신뢰성 있는 데이터 전송: TCP는 데이터의 정확한 전달과 순서를 보장한다.&lt;/li>
&lt;/ol>
&lt;h3>특징&lt;span class="hx-absolute -hx-mt-20" id="특징">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>종단 간 통신: 전송 계층 프로토콜은 네트워크 라우터가 아닌 종단 시스템에서 구현된다.&lt;/li>
&lt;li>다중화와 역다중화: 여러 애플리케이션의 데이터를 하나의 연결로 전송하고, 수신 측에서 다시 분리한다.&lt;/li>
&lt;li>흐름 제어와 혼잡 제어: TCP의 경우 이러한 기능을 제공하여 네트워크의 효율성을 높인다.&lt;/li>
&lt;/ol>
&lt;h3>데이터 단위&lt;span class="hx-absolute -hx-mt-20" id="데이터-단위">&lt;/span>
&lt;a href="#%eb%8d%b0%ec%9d%b4%ed%84%b0-%eb%8b%a8%ec%9c%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>단위: 세그먼트(TCP) / 데이터그램(UDP)&lt;/li>
&lt;li>구조: TCP/UDP 헤더 + 응용 계층 메시지&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">[TCP 헤더(20바이트)] [응용 계층 데이터]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">┌──────────┬──────────┬────────┬────────┬──────┐
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│출발지 포트│목적지 포트│시퀀스 번호│확인 응답│윈도우│ …
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ (16비트) │ (16비트) │(32비트) │(32비트)│(16비트)│
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└──────────┴──────────┴────────┴────────┴──────┘&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>전송 계층의 서비스 품질&lt;span class="hx-absolute -hx-mt-20" id="전송-계층의-서비스-품질">&lt;/span>
&lt;a href="#%ec%a0%84%ec%86%a1-%ea%b3%84%ec%b8%b5%ec%9d%98-%ec%84%9c%eb%b9%84%ec%8a%a4-%ed%92%88%ec%a7%88" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>전송 계층은 다양한 서비스 품질(QoS) 요구사항을 지원한다:&lt;/p>
&lt;ol>
&lt;li>신뢰성이 필요한 경우: TCP 사용
&lt;ul>
&lt;li>파일 전송&lt;/li>
&lt;li>이메일&lt;/li>
&lt;li>웹 브라우징&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>속도가 중요한 경우: UDP 사용
&lt;ul>
&lt;li>실시간 스트리밍&lt;/li>
&lt;li>온라인 게임&lt;/li>
&lt;li>VoIP 통화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>OSI 7 Layers - 4. Transport Layer</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/osi-7-layers-4-transport-layer/</link><pubDate>Wed, 25 Sep 2024 07:17:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/osi-7-layers-4-transport-layer/</guid><description>
&lt;h2>Transport Layer(전송 계층)&lt;span class="hx-absolute -hx-mt-20" id="transport-layer전송-계층">&lt;/span>
&lt;a href="#transport-layer%ec%a0%84%ec%86%a1-%ea%b3%84%ec%b8%b5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>전송 계층은 OSI 모델의 4번째 계층으로, 종단 간(end-to-end) 통신을 담당한다.&lt;br>
이 계층은 상위 계층에서 받은 데이터를 세그먼트로 분할하고, 목적지에서 다시 조립하여 신뢰성 있는 데이터 전송을 보장한다.&lt;/p>
&lt;p>전송 계층은 네트워크 통신의 신뢰성과 효율성을 보장하는 중요한 역할을 수행하며, 상위 계층의 애플리케이션에 투명한 데이터 전송 서비스를 제공한다.&lt;/p>
&lt;p>
&lt;figure>
&lt;img src="../osi_model_transport_layer_4.png" title="Transport Layer" alt="Transport Layer" loading="lazy" />
&lt;figcaption>Transport Layer&lt;/figcaption>
&lt;/figure> _Source: &lt;a href="https://www.cloudflare.com/ko-kr/learning/ddos/glossary/open-systems-interconnection-model-osi/" target="_blank" rel="noopener">https://www.cloudflare.com/ko-kr/learning/ddos/glossary/open-systems-interconnection-model-osi/&lt;/a> _&lt;/p>
&lt;h3>역할과 기능&lt;span class="hx-absolute -hx-mt-20" id="역할과-기능">&lt;/span>
&lt;a href="#%ec%97%ad%ed%95%a0%ea%b3%bc-%ea%b8%b0%eb%8a%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>세그멘테이션과 재조립: 데이터를 세그먼트로 분할하고 목적지에서 재조립한다.&lt;/li>
&lt;li>연결 제어: 연결 지향적(TCP) 또는 비연결형(UDP) 서비스를 제공한다.&lt;/li>
&lt;li>흐름 제어: 송신자와 수신자 간의 데이터 전송 속도를 조절한다.&lt;/li>
&lt;li>오류 제어: 데이터 전송 중 발생한 오류를 감지하고 수정한다.&lt;/li>
&lt;li>다중화와 역다중화: 여러 애플리케이션의 데이터를 하나의 연결로 전송하고 수신 시 분리한다.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>세그멘테이션 (Segmentation)&lt;/p>
&lt;ul>
&lt;li>상위 계층에서 받은 큰 데이터를 더 작은 단위인 세그먼트로 나누는 과정이다.&lt;/li>
&lt;li>효율적인 오류 처리: 세그먼트 단위로 오류를 처리할 수 있어, 문제가 발생했을 때 해당 세그먼트만 재전송하면 된다.&lt;/li>
&lt;li>네트워크 자원의 효율적 사용: 작은 단위로 나누어 전송함으로써 네트워크 대역폭을 효율적으로 사용할 수 있다.&lt;/li>
&lt;li>다중화(Multiplexing) 가능: 여러 애플리케이션의 데이터를 동시에 전송할 수 있다.&lt;/li>
&lt;li>작동 방식
&lt;ol>
&lt;li>데이터 분할 애플리케이션 계층에서 받은 데이터를 적절한 크기의 세그먼트로 나눈다.&lt;br>
TCP의 경우, Maximum Segment Size(MSS)를 기준으로 데이터를 나눈다.&lt;br>
MSS는 일반적으로 MTU에서 IP와 TCP 헤더 크기를 뺀 값이다.&lt;/li>
&lt;li>순서 번호 할당 각 세그먼트에는 순서 번호(Sequence Number)가 부여된다.&lt;br>
이는 수신측에서 데이터를 올바른 순서로 재조립할 수 있게 해준다.&lt;/li>
&lt;li>헤더 추가 각 세그먼트에는 TCP 또는 UDP 헤더가 추가된다.&lt;br>
TCP 헤더의 경우 다음과 같은 중요한 정보를 포함한다:
&lt;ul>
&lt;li>출발지/목적지 포트 번호&lt;/li>
&lt;li>순서 번호(Sequence Number)&lt;/li>
&lt;li>확인 응답 번호(Acknowledgment Number)&lt;/li>
&lt;li>윈도우 크기&lt;/li>
&lt;li>체크섬&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>세그멘테이션 관련 고려사항
&lt;ol>
&lt;li>세그먼트 크기 선택
&lt;ul>
&lt;li>너무 크면: 재전송 시 비효율적&lt;/li>
&lt;li>너무 작으면: 헤더 오버헤드 증가&lt;/li>
&lt;li>최적의 크기 선택이 중요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>버퍼 관리: 수신측에서 세그먼트를 저장하고 재조립할 수 있는 충분한 버퍼 공간이 필요하다.&lt;/li>
&lt;li>타이밍 관리: 재전송 타이머, 확인 응답 대기 시간 등을 적절히 관리해야 한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>TCP와 UDP의 세그멘테이션 차이
&lt;ul>
&lt;li>TCP와 UDP는 세그멘테이션을 다르게 처리한다.&lt;/li>
&lt;li>TCP의 세그멘테이션:
&lt;ul>
&lt;li>신뢰성 있는 전송을 보장&lt;/li>
&lt;li>순서 보장&lt;/li>
&lt;li>흐름 제어와 혼잡 제어 제공&lt;/li>
&lt;li>세그먼트 손실 시 재전송&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>UDP의 세그멘테이션:
&lt;ul>
&lt;li>단순히 데이터그램으로 나누기만 함&lt;/li>
&lt;li>순서 보장 없음&lt;/li>
&lt;li>신뢰성 보장 없음&lt;/li>
&lt;li>더 빠른 전송 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3>특징&lt;span class="hx-absolute -hx-mt-20" id="특징">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>종단 간 통신을 제공한다.&lt;/li>
&lt;li>신뢰성 있는 데이터 전송을 보장한다.&lt;/li>
&lt;li>포트 번호를 사용하여 애플리케이션을 식별한다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>port (포트)&lt;br>
네트워크에서 서로 다른 프로세스들이 통신할 수 있도록 구분해주는 논리적인 접속 위치.&lt;br>
각 포트는 16 비트 숫자로 표현되며, 범위는 0~65535&lt;br>
역할&lt;/p>
&lt;ul>
&lt;li>데이터 트래픽 분류: 포트는 컴퓨터가 받는 네트워크 트래픽을 종류별로 구분하는 데 도움을 준다.&lt;/li>
&lt;li>서비스 식별: 각 포트는 특정 서비스나 애플리케이션과 연결되어 있어, 데이터가 어떤 서비스로 전달되어야 하는 식별&lt;/li>
&lt;li>다중화 (Multiplexing): 하나의 네트워크 연결을 통해 여러 서비스나 애플리케이션이 동시에 통신할 수 있게 됨.&lt;br>
기능&lt;/li>
&lt;li>통신 엔드포인트 제공: 네트워크 상의 특정 서비스나 프로세스와의 통신을 위한 엔드포인트&lt;/li>
&lt;li>데이터 라우팅: 들어오는 데이터를 올바른 애플리케이션이나 서비스로 전달&lt;/li>
&lt;li>프로토콜 구분: 각 포트는 특정 네트워크 프로토콜 (예: HTTP(80), HTTPS(443), FTP(21), SMTP(25)) 과 연관되어 있어 프로토콜 별 통신을 가능하게 함.&lt;/li>
&lt;li>동시 연결 관리: 하나의 IP 주소에서 여러 개의 네트워크 연결을 동시에 관리할 수 있게 한다.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3>데이터 단위와 구조&lt;span class="hx-absolute -hx-mt-20" id="데이터-단위와-구조">&lt;/span>
&lt;a href="#%eb%8d%b0%ec%9d%b4%ed%84%b0-%eb%8b%a8%ec%9c%84%ec%99%80-%ea%b5%ac%ec%a1%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>데이터 단위: 세그먼트(TCP) 또는 데이터그램(UDP)&lt;br>
기본 구조: 헤더 + 데이터&lt;br>
헤더 필드:&lt;/p>
&lt;ul>
&lt;li>출발지 포트 번호&lt;/li>
&lt;li>목적지 포트 번호&lt;/li>
&lt;li>시퀀스 번호 (TCP)&lt;/li>
&lt;li>확인 응답 번호 (TCP)&lt;/li>
&lt;li>체크섬&lt;/li>
&lt;/ul>
&lt;h3>작동 방식&lt;span class="hx-absolute -hx-mt-20" id="작동-방식">&lt;/span>
&lt;a href="#%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>애플리케이션 계층에서 데이터를 받는다.&lt;/li>
&lt;li>데이터를 세그먼트로 분할한다.&lt;/li>
&lt;li>각 세그먼트에 헤더를 추가한다.&lt;/li>
&lt;li>네트워크 계층으로 세그먼트를 전달한다.&lt;/li>
&lt;li>수신 측에서는 세그먼트를 재조립하여 애플리케이션 계층으로 전달한다.&lt;/li>
&lt;/ol>
&lt;h3>주요 프로토콜&lt;span class="hx-absolute -hx-mt-20" id="주요-프로토콜">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ed%94%84%eb%a1%9c%ed%86%a0%ec%bd%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>TCP (Transmission Control Protocol):
&lt;ul>
&lt;li>연결 지향적이고 신뢰성 있는 데이터 전송을 제공한다.&lt;/li>
&lt;li>데이터의 순서를 보장하고 손실된 데이터를 재전송한다.&lt;/li>
&lt;li>흐름 제어와 혼잡 제어 제공&lt;/li>
&lt;li>3-way handshake: TCP 연결을 설정하는 과정.
&lt;ol>
&lt;li>SYN: 연결 요청&lt;/li>
&lt;li>SYN-ACK: 요청 승인&lt;/li>
&lt;li>ACK: 연결 설정 완료&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>4-way Handshake: 클라이언트와 서버 간의 연결을 종료하는 과정.
&lt;ol>
&lt;li>FIN (클라이언트 → 서버): 클라이언트가 연결 종료를 요청.&lt;/li>
&lt;li>ACK (서버 → 클라이언트): 서버가 FIN을 받았음을 확인. 클라이언트→서버 방향의 연결이 닫힌다.&lt;/li>
&lt;li>FIN (서버 → 클라이언트): 서버가 모든 데이터 전송을 완료하고 연결 종료를 요청한다.&lt;/li>
&lt;li>ACK (클라이언트 → 서버): 클라이언트가 서버의 FIN을 확인한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>UDP (User Datagram Protocol):
&lt;ul>
&lt;li>비연결형이고 신뢰성이 낮지만 빠른 전송을 제공한다.&lt;/li>
&lt;li>순서나 신뢰성 보장 없음&lt;/li>
&lt;li>실시간 애플리케이션에 적합하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>주의 사항&lt;span class="hx-absolute -hx-mt-20" id="주의-사항">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9d%98-%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>네트워크 혼잡을 방지하기 위한 적절한 흐름 제어가 필요하다.&lt;/li>
&lt;li>TCP와 UDP의 특성을 이해하고 적절히 선택해야 한다.&lt;/li>
&lt;li>포트 번호 충돌을 피해야 한다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>