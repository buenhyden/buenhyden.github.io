<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Caching</title><link>https://buenhyden.github.io/tags/caching/</link><description>Recent content in Caching on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 19 Oct 2024 14:14:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/caching/index.xml" rel="self" type="application/rss+xml"/><item><title>캐싱 (Caching)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/</link><pubDate>Sat, 19 Oct 2024 14:14:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/</guid><description>
&lt;h2>캐싱 (Caching)&lt;span class="hx-absolute -hx-mt-20" id="캐싱-caching">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%b1-caching" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>캐싱은 자주 사용되는 데이터나 계산 결과를 빠르게 접근할 수 있는 위치에 임시로 저장하는 기술이다.&lt;br>
이는 데이터를 다시 계산하거나 원래 위치에서 다시 가져올 필요 없이 빠르게 접근할 수 있게 해준다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 캐싱의 기본 프로세스를 보여주는 예제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">CachingProcess&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">storage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1"># 캐시 저장소&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stats&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;hits&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;misses&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="c1"># 캐싱 효율성 측정&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 1. 캐시 확인 단계&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">storage&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stats&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;hits&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_handle_cache_hit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 2. 캐시 미스 처리 단계&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stats&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;misses&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_fetch_from_source&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 3. 캐시 저장 단계&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_store_in_cache&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">_handle_cache_hit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 캐시 히트 시의 처리 로직&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">storage&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">_fetch_from_source&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 원본 소스에서 데이터를 가져오는 로직&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Data for &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">_store_in_cache&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 캐시 저장 로직&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">storage&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>캐싱의 목적&lt;span class="hx-absolute -hx-mt-20" id="캐싱의-목적">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%b1%ec%9d%98-%eb%aa%a9%ec%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>성능 향상: 데이터 접근 속도를 높여 전체적인 시스템 성능을 개선한다.&lt;/li>
&lt;li>서버 부하 감소: 반복적인 요청을 줄여 서버의 작업량을 감소시킨다.&lt;/li>
&lt;li>네트워크 대역폭 절약: 데이터 전송량을 줄여 네트워크 리소스를 절약한다.&lt;/li>
&lt;/ol>
&lt;h3>캐싱(Caching)의 주요 요소&lt;span class="hx-absolute -hx-mt-20" id="캐싱caching의-주요-요소">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%b1caching%ec%9d%98-%ec%a3%bc%ec%9a%94-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>캐시(Cache): 데이터를 임시 저장하는 공간&lt;/li>
&lt;li>캐시 정책(Cache Policy): 데이터를 저장하고 관리하는 규칙&lt;/li>
&lt;li>캐시 전략(Cache Strategy): 캐시를 효율적으로 활용하는 방법&lt;/li>
&lt;li>캐시 무효화(Cache Invalidation): 원본 데이터와 캐시된 데이터의 동기화&lt;/li>
&lt;li>캐시 일관성(Cache Coherence)&lt;/li>
&lt;/ol>
&lt;h3>캐싱의 작동 원리&lt;span class="hx-absolute -hx-mt-20" id="캐싱의-작동-원리">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%b1%ec%9d%98-%ec%9e%91%eb%8f%99-%ec%9b%90%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>데이터 요청: 프로그램이 데이터를 요청한다.&lt;/li>
&lt;li>캐시 확인: 시스템은 먼저 캐시에서 해당 데이터를 찾는다.&lt;/li>
&lt;li>캐시 히트(Cache Hit): 데이터가 캐시에 있으면 즉시 반환한다.&lt;/li>
&lt;li>캐시 미스(Cache Miss): 데이터가 캐시에 없으면 원본 소스에서 가져와 캐시에 저장한 후 반환한다.&lt;/li>
&lt;/ol>
&lt;h3>캐싱의 적용 분야&lt;span class="hx-absolute -hx-mt-20" id="캐싱의-적용-분야">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%b1%ec%9d%98-%ec%a0%81%ec%9a%a9-%eb%b6%84%ec%95%bc" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>웹 페이지 캐싱: 정적 콘텐츠를 저장하여 빠르게 제공한다.&lt;/li>
&lt;li>데이터베이스 캐싱: 쿼리 결과를 저장하여 반복적인 요청에 대한 응답 시간을 단축한다.&lt;/li>
&lt;li>CDN(Content Delivery Network): 전 세계에 분산된 서버에 콘텐츠를 캐싱하여 빠른 로딩 속도를 제공한다.&lt;/li>
&lt;/ol>
&lt;h3>캐싱의 장점&lt;span class="hx-absolute -hx-mt-20" id="캐싱의-장점">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%b1%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>빠른 응답 시간: 사용자 경험을 개선한다.&lt;/li>
&lt;li>서버 부하 감소: 시스템의 확장성과 안정성을 향상시킨다.&lt;/li>
&lt;li>비용 절감: 데이터 전송 및 처리 비용을 줄인다.&lt;/li>
&lt;/ol>
&lt;h3>캐싱 구현 시 고려사항&lt;span class="hx-absolute -hx-mt-20" id="캐싱-구현-시-고려사항">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%b1-%ea%b5%ac%ed%98%84-%ec%8b%9c-%ea%b3%a0%eb%a0%a4%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>캐시 크기: 너무 작으면 효과가 적고, 너무 크면 메모리 낭비가 됩니다.&lt;/li>
&lt;li>캐시 갱신 정책: 데이터 일관성을 유지하기 위해 적절한 갱신 전략이 필요합니다.&lt;/li>
&lt;li>캐시 교체 알고리즘: LRU, LFU, FIFO 등 상황에 맞는 알고리즘을 선택해야 한다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>캐시 (Cache)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache/</link><pubDate>Sat, 19 Oct 2024 13:25:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache/</guid><description>
&lt;h2>캐시 (Cache)&lt;span class="hx-absolute -hx-mt-20" id="캐시-cache">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%9c-cache" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>캐시(Cache)는 컴퓨터 과학에서 데이터나 값을 미리 복사해 놓는 임시 저장소를 의미한다.&lt;br>
데이터 접근 속도를 높이고 시스템 성능을 향상시킬 수 있다.&lt;br>
자주 사용되는 데이터는 빠르게 접근할 수 있는 위치에 복사해두는데 이 위치를 캐시(Cache)라고 말한다.&lt;/p>
&lt;h3>캐시의 특징&lt;span class="hx-absolute -hx-mt-20" id="캐시의-특징">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%9c%ec%9d%98-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>속도: 주 메모리나 디스크보다 훨씬 빠르다.&lt;/li>
&lt;li>용량: 일반적으로 주 메모리보다 작다.&lt;/li>
&lt;li>비용: 고속이기 때문에 상대적으로 비싸다.&lt;/li>
&lt;/ol>
&lt;h3>캐시의 장점&lt;span class="hx-absolute -hx-mt-20" id="캐시의-장점">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%9c%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>빠른 데이터 접근: 자주 사용되는 데이터에 빠르게 접근할 수 있다.&lt;/li>
&lt;li>시스템 성능 향상: 전체적인 시스템 응답 시간을 줄인다.&lt;/li>
&lt;li>리소스 절약: 반복적인 데이터 요청을 줄여 서버 부하를 감소시킨다.&lt;/li>
&lt;/ol>
&lt;h3>캐시 사용 시 주의점&lt;span class="hx-absolute -hx-mt-20" id="캐시-사용-시-주의점">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%9c-%ec%82%ac%ec%9a%a9-%ec%8b%9c-%ec%a3%bc%ec%9d%98%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>일관성 유지: 원본 데이터가 변경될 때 캐시도 업데이트해야 한다.&lt;/li>
&lt;li>캐시 크기 관리: 너무 크면 메모리 낭비, 너무 작으면 효율이 떨어진다.&lt;/li>
&lt;li>캐시 교체 정책: 캐시가 가득 찼을 때 어떤 데이터를 제거할지 결정해야 한다.&lt;/li>
&lt;/ol>
&lt;h3>캐시의 동작 과정&lt;span class="hx-absolute -hx-mt-20" id="캐시의-동작-과정">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%9c%ec%9d%98-%eb%8f%99%ec%9e%91-%ea%b3%bc%ec%a0%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>데이터 요청: 프로그램이 데이터를 요청한다.&lt;/li>
&lt;li>캐시 확인: 시스템은 먼저 캐시에서 데이터를 찾는다.&lt;/li>
&lt;li>캐시 히트(Cache Hit): 데이터가 캐시에 있으면 즉시 반환한다.&lt;/li>
&lt;li>캐시 미스(Cache Miss): 데이터가 캐시에 없으면 주 메모리나 디스크에서 가져와 캐시에 저장한 후 반환한다.&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 캐시의 기본 작동 원리를 보여주는 예제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SimpleCache&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cache&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1"># 데이터를 저장할 공간&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 1. 캐시에서 먼저 찾아봅니다&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;캐시에서 데이터를 찾았습니다!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 2. 캐시에 없다면 원본 소스에서 가져옵니다&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;캐시에 없어서 원본에서 가져옵니다…&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fetch_from_source&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 3. 다음 사용을 위해 캐시에 저장합니다&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">data&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>캐시의 종류&lt;span class="hx-absolute -hx-mt-20" id="캐시의-종류">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%9c%ec%9d%98-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>CPU 캐시: CPU와 주 메모리 사이에 위치한 고속의 소용량 메모리&lt;br>
역할:&lt;/p>
&lt;ul>
&lt;li>자주 사용되는 데이터와 명령어를 저장&lt;/li>
&lt;li>CPU와 주 메모리 간의 속도 차이를 완화&lt;br>
특징:&lt;/li>
&lt;li>L1, L2, L3 등 여러 레벨로 구성&lt;/li>
&lt;li>L1이 가장 빠르고 용량이 작으며, 레벨이 올라갈수록 용량은 증가하고 속도는 감소&lt;/li>
&lt;li>CPU에 직접 통합되어 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>메모리 캐시: 주 메모리(RAM)의 일부를 캐시로 사용하는 기술&lt;br>
역할:&lt;/p>
&lt;ul>
&lt;li>자주 접근하는 데이터를 임시 저장&lt;/li>
&lt;li>메모리 접근 시간 단축&lt;br>
특징:&lt;/li>
&lt;li>운영체제에 의해 관리됨&lt;/li>
&lt;li>페이지 캐시 등의 형태로 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>디스크 캐시: 하드 디스크의 데이터를 임시로 저장하는 메모리 영역&lt;br>
역할:&lt;/p>
&lt;ul>
&lt;li>디스크 접근 횟수를 줄여 I/O 성능 향상&lt;/li>
&lt;li>읽기/쓰기 작업 속도 개선&lt;br>
특징:&lt;/li>
&lt;li>하드 디스크 컨트롤러에 내장되거나 운영체제에 의해 관리됨&lt;/li>
&lt;li>읽기 캐시와 쓰기 캐시로 구분될 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>웹 캐시: 웹 페이지, 이미지 등의 웹 콘텐츠를 임시 저장하는 기술&lt;br>
역할:&lt;/p>
&lt;ul>
&lt;li>웹 페이지 로딩 속도 향상&lt;/li>
&lt;li>서버 부하 및 네트워크 트래픽 감소&lt;br>
특징:&lt;/li>
&lt;li>브라우저 캐시, 프록시 캐시, CDN 등 다양한 형태로 구현&lt;/li>
&lt;li>HTTP 헤더를 통해 캐시 정책 제어 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>데이터베이스 캐시: 데이터베이스 쿼리 결과를 임시 저장하는 메모리 영역&lt;br>
역할:&lt;/p>
&lt;ul>
&lt;li>반복적인 쿼리 실행 시간 단축&lt;/li>
&lt;li>데이터베이스 서버 부하 감소&lt;br>
특징:&lt;/li>
&lt;li>인메모리 데이터베이스나 별도의 캐시 서버로 구현 가능&lt;/li>
&lt;li>쿼리 결과 또는 자주 사용되는 데이터 세트를 저장&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>애플리케이션 캐시: 애플리케이션 레벨에서 구현되는 캐시 메커니즘&lt;br>
역할:&lt;/p>
&lt;ul>
&lt;li>애플리케이션 성능 향상&lt;/li>
&lt;li>반복적인 연산이나 데이터 접근 최소화&lt;br>
특징:&lt;/li>
&lt;li>개발자가 직접 구현하거나 프레임워크에서 제공하는 기능 활용&lt;/li>
&lt;li>메모이제이션, 객체 캐싱 등 다양한 기법 적용 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>이러한 다양한 캐시 유형들은 각각의 특성에 맞게 시스템의 여러 계층에서 활용되어 전반적인 성능 향상에 기여한다.&lt;/p>
&lt;h3>캐시의 지역성&lt;span class="hx-absolute -hx-mt-20" id="캐시의-지역성">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%9c%ec%9d%98-%ec%a7%80%ec%97%ad%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>캐시의 지역성(Locality)은 프로그램이 메모리에 접근하는 패턴에 관한 중요한 개념이다.&lt;br>
이는 캐시의 효율성을 극대화하기 위해 사용되는 원리로, 크게 두 가지 유형으로 나눌 수 있다:&lt;/p>
&lt;ol>
&lt;li>시간 지역성 (Temporal Locality)&lt;br>
시간 지역성은 최근에 참조된 데이터가 가까운 미래에 다시 참조될 가능성이 높다는 원리이다.
&lt;ul>
&lt;li>예시: 반복문에서 같은 변수를 여러 번 사용하는 경우&lt;/li>
&lt;li>장점: 자주 사용되는 데이터를 캐시에 유지함으로써 접근 속도를 향상시킨다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>공간 지역성 (Spatial Locality)&lt;br>
공간 지역성은 최근 참조된 데이터의 주변 데이터도 곧 참조될 가능성이 높다는 원리이다.
&lt;ul>
&lt;li>예시: 배열의 요소를 순차적으로 접근하는 경우&lt;/li>
&lt;li>장점: 연속된 메모리 주소의 데이터를 미리 캐시에 로드하여 성능을 개선한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>캐시의 지역성 개념은 다른 메모리 구조와 비교했을 때 다음과 같은 주요 차이점이 있다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>데이터 접근 패턴:&lt;br>
캐시는 시간적, 공간적 지역성을 활용하여 자주 사용되는 데이터를 빠르게 접근할 수 있도록 하지만, 다른 메모리 구조는 일반적으로 순차적이거나 무작위적인 접근 패턴을 가진다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>메모리 레이아웃:&lt;br>
캐시는 연속된 메모리 주소의 데이터를 캐시 라인 단위로 저장하여 공간적 지역성을 극대화하며, 다른 메모리 구조는 데이터가 연속적으로 저장되지 않을 수 있어 접근 속도가 상대적으로 느리다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>성능 최적화:&lt;br>
캐시는 지역성을 활용하여 캐시 히트율을 높이고 전체 시스템 성능을 향상시며, 다른 메모리 구조는 지역성 개념을 적용하기 어려워 성능 최적화에 제한이 있을 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>데이터 구조 선택:&lt;br>
캐시는 배열과 같이 연속된 메모리를 사용하는 구조가 캐시 지역성을 잘 활용하며, 다른 메모리 구조는 링크드 리스트와 같이 비연속적인 메모리를 사용하는 구조는 캐시 효율성이 떨어질 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>프로그래밍 방식:&lt;br>
캐시: 지역성을 고려한 코드 작성이 성능 향상에 중요하며, 다른 메모리 구조는 지역성에 대한 고려 없이 코드를 작성할 수 있지만, 성능 최적화에 제한이 있을 수 있다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>캐시의 지역성은 다음과 같은 요인으로 중요하게 여겨진다.&lt;/p>
&lt;ol>
&lt;li>캐시 효율성 향상: 지역성은 캐시의 적중률(hit-rate)을 극대화하여 캐시의 효율성을 크게 높인다.&lt;/li>
&lt;li>시스템 성능 개선: 높은 캐시 적중률은 CPU와 주 메모리 간의 속도 차이로 인한 병목 현상을 줄여 전체 시스템 성능을 향상시킨다.&lt;/li>
&lt;li>예측 가능성: 지역성 원리를 통해 CPU가 다음에 필요로 할 데이터를 예측할 수 있어, 효율적인 데이터 pre-fetching이 가능해진다.&lt;/li>
&lt;li>리소스 절약: 시간적, 공간적 지역성을 활용하면 상대적으로 작은 크기의 캐시로도 높은 효율성을 얻을 수 있다.&lt;/li>
&lt;li>프로그램 최적화: 개발자가 지역성 원리를 이해하고 활용하면, 더 효율적인 코드 작성이 가능해진다.&lt;/li>
&lt;/ol>
&lt;p>캐시의 지역성을 고려한 프로그래밍은 성능 최적화에 중요하다.&lt;/p>
&lt;ol>
&lt;li>데이터 구조 설계: 연관된 데이터를 메모리상에서 가깝게 배치한다.&lt;/li>
&lt;li>루프 최적화: 데이터 접근 패턴을 개선하여 캐시 효율성을 높인다.&lt;/li>
&lt;li>함수 호출 최소화: 불필요한 컨텍스트 전환을 줄여 캐시 오염을 방지한다.&lt;br>
캐시의 지역성을 활용함으로써, 제한된 캐시 용량으로도 시스템의 전반적인 성능을 크게 향상시킬 수 있다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3></description></item><item><title>Cache Coherence</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-coherence/</link><pubDate>Sat, 19 Oct 2024 03:30:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-coherence/</guid><description>
&lt;h2>Cache Coherence&lt;span class="hx-absolute -hx-mt-20" id="cache-coherence">&lt;/span>
&lt;a href="#cache-coherence" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Cache Invalidation</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-invalidation/</link><pubDate>Sat, 19 Oct 2024 03:30:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-invalidation/</guid><description>
&lt;h2>Cache Invalidation&lt;span class="hx-absolute -hx-mt-20" id="cache-invalidation">&lt;/span>
&lt;a href="#cache-invalidation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Cache Policy</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy/</link><pubDate>Sat, 19 Oct 2024 03:30:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy/</guid><description>
&lt;h2>Cache Policy&lt;span class="hx-absolute -hx-mt-20" id="cache-policy">&lt;/span>
&lt;a href="#cache-policy" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>Cache Consistent Policies&lt;span class="hx-absolute -hx-mt-20" id="cache-consistent-policies">&lt;/span>
&lt;a href="#cache-consistent-policies" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h3>Cache Replacement Policies&lt;span class="hx-absolute -hx-mt-20" id="cache-replacement-policies">&lt;/span>
&lt;a href="#cache-replacement-policies" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>LRU (Least Recently Used), LFU (Least Frequently Used), FIFO (First In First Out) 캐시 전략은 각각 다른 방식으로 캐시 공간을 관리합니다. 이들의 주요 차이점은 다음과 같습니다&lt;/p>
&lt;p>LRU (Least Recently Used)&lt;br>
LFU (Least Frequently Used)&lt;br>
FIFO (First In First Out)&lt;br>
MRU (Most Recently Used)&lt;br>
Random Replacement&lt;/p>
&lt;h3>LRU (Least Recently Used)&lt;span class="hx-absolute -hx-mt-20" id="lru-least-recently-used">&lt;/span>
&lt;a href="#lru-least-recently-used" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>가장 오랫동안 사용되지 않은 항목을 제거합니다.&lt;/li>
&lt;li>최근 접근 시간을 기준으로 항목을 관리합니다.&lt;/li>
&lt;li>시간적 지역성(temporal locality)이 있는 워크로드에 효과적입니다.&lt;/li>
&lt;li>구현이 비교적 간단하고 적응성이 좋습니다.&lt;/li>
&lt;/ul>
&lt;h3>LFU (Least Frequently Used)&lt;span class="hx-absolute -hx-mt-20" id="lfu-least-frequently-used">&lt;/span>
&lt;a href="#lfu-least-frequently-used" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>가장 적게 사용된 항목을 제거합니다.&lt;/li>
&lt;li>각 항목의 접근 빈도를 추적하여 관리합니다.&lt;/li>
&lt;li>장기적인 인기도를 반영하는 데 효과적입니다.&lt;/li>
&lt;li>구현이 복잡하고 변화하는 접근 패턴에 적응하는 데 시간이 걸릴 수 있습니다.&lt;/li>
&lt;/ul>
&lt;h3>FIFO (First In First Out)&lt;span class="hx-absolute -hx-mt-20" id="fifo-first-in-first-out">&lt;/span>
&lt;a href="#fifo-first-in-first-out" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>가장 먼저 추가된 항목을 제거합니다.&lt;/li>
&lt;li>항목이 추가된 순서만을 고려합니다.&lt;/li>
&lt;li>구현이 매우 간단하고 오버헤드가 낮습니다.&lt;/li>
&lt;li>접근 빈도나 최근 사용을 고려하지 않아 성능이 떨어질 수 있습니다.&lt;/li>
&lt;/ul>
&lt;p>각 전략의 특성을 비교하면:&lt;/p>
&lt;ul>
&lt;li>복잡성: FIFO &amp;lt; LRU &amp;lt; LFU&lt;/li>
&lt;li>적응성: FIFO &amp;lt; LFU &amp;lt; LRU&lt;/li>
&lt;li>시간적 지역성 성능: FIFO &amp;lt; LFU &amp;lt; LRU&lt;/li>
&lt;li>빈도 기반 패턴 성능: FIFO &amp;lt; LRU &amp;lt; LFU&lt;br>
M&lt;br>
캐시 전략 선택 시에는 애플리케이션의 특성, 데이터 접근 패턴, 그리고 구현의 복잡성을 고려해야 합니다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Cache Strategy</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-strategy/</link><pubDate>Sat, 19 Oct 2024 03:30:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-strategy/</guid><description>
&lt;h2>Cache Strategy&lt;span class="hx-absolute -hx-mt-20" id="cache-strategy">&lt;/span>
&lt;a href="#cache-strategy" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Caching Techniques</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/caching-techniques/</link><pubDate>Sat, 19 Oct 2024 02:37:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/caching-techniques/</guid><description>
&lt;h2>Caching Techniques&lt;span class="hx-absolute -hx-mt-20" id="caching-techniques">&lt;/span>
&lt;a href="#caching-techniques" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>캐싱 기법
Memoization (함수 결과 캐싱)
Write-Through Caching
Write-Back Caching
Write-Around Caching
Read-Through Caching&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>