<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Approximation-Algorithm</title><link>https://buenhyden.github.io/tags/approximation-algorithm/</link><description>Recent content in Approximation-Algorithm on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 31 Oct 2024 05:23:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/approximation-algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>근사 알고리즘 (Approximation algorithm)</title><link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/approximation-algorithm/</link><pubDate>Thu, 31 Oct 2024 05:23:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/approximation-algorithm/</guid><description>
&lt;h2>근사 알고리즘 (Approximation algorithm)&lt;span class="hx-absolute -hx-mt-20" id="근사-알고리즘-approximation-algorithm">&lt;/span>
&lt;a href="#%ea%b7%bc%ec%82%ac-%ec%95%8c%ea%b3%a0%eb%a6%ac%ec%a6%98-approximation-algorithm" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>컴퓨터 과학에서 우리가 마주치는 많은 문제들 중에는 정확한 해답을 찾는 것이 현실적으로 매우 어려운 문제들이 있다.&lt;br>
예를 들어, 외판원 문제(Traveling Salesman Problem)는 도시들을 모두 한 번씩만 방문하면서 가장 짧은 경로를 찾는 문제인데, 도시의 수가 증가하면 가능한 모든 경로를 확인하는 데 너무 많은 시간이 걸린다.&lt;/p>
&lt;p>이런 상황에서 우리는 다음과 같은 선택을 할 수 있다:&lt;/p>
&lt;ol>
&lt;li>정확한 해답을 찾되 매우 오랜 시간이 걸리는 것을 감수한다&lt;/li>
&lt;li>정확하지는 않지만 &amp;lsquo;충분히 좋은&amp;rsquo; 해답을 빠르게 찾는다&lt;br>
근사 알고리즘은 두 번째 접근 방식을 택한다.&lt;/li>
&lt;/ol>
&lt;p>근사 알고리즘(Approximation algorithm)은 최적해(가장 좋은 해답)를 찾는 대신, 최적해에 &amp;lsquo;충분히 가까운&amp;rsquo; 해답을 찾는 알고리즘이다.&lt;br>
여기서 중요한 점은 근사 알고리즘이 얼마나 좋은 해답을 찾을 수 있는지 수학적으로 보장한다는 것이다.&lt;br>
예를 들어, &amp;ldquo;이 알고리즘은 항상 최적해의 1.5배 이내의 해답을 찾는다&amp;quot;와 같이 성능을 보장할 수 있다.&lt;/p>
&lt;p>이 기법은 특히 NP-난해(NP-hard) 문제와 같이 정확한 해를 다항 시간 내에 찾기 어려운 문제들을 다룰 때 유용하다.&lt;/p>
&lt;p>근사 알고리즘은 다음과 같은 특징을 가진다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>최적해의 근사값 제공&lt;/strong>: 정확한 최적해 대신 그에 근접한 해답을 찾는다.&lt;/li>
&lt;li>&lt;strong>다항 시간 내 실행&lt;/strong>: 효율적으로 실행되어 빠른 시간 내에 결과를 제공한다.&lt;/li>
&lt;li>&lt;strong>성능 보장&lt;/strong>: 찾은 해답이 최적해와 얼마나 차이 나는지에 대한 이론적 보장을 제공한다.&lt;/li>
&lt;/ol>
&lt;h3>목적과 필요성&lt;span class="hx-absolute -hx-mt-20" id="목적과-필요성">&lt;/span>
&lt;a href="#%eb%aa%a9%ec%a0%81%ea%b3%bc-%ed%95%84%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>근사 알고리즘의 주요 목적은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>정확한 최적해를 찾는 대신 합리적인 시간 내에 &amp;lsquo;충분히 좋은&amp;rsquo; 해답을 제공한다.&lt;/li>
&lt;li>NP-난해 문제와 같이 다항 시간 내에 최적해를 찾기 어려운 문제에 대한 실용적인 해결책을 제시한다.&lt;/li>
&lt;/ol>
&lt;p>근사 알고리즘이 필요한 이유는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>많은 실제 문제들이 NP-난해하여 정확한 해답을 효율적으로 찾기 어렵다.&lt;/li>
&lt;li>대규모 데이터를 다루는 현대 응용에서는 빠른 해답이 필요한 경우가 많다.&lt;/li>
&lt;li>일부 상황에서는 최적해가 아니더라도 &amp;lsquo;충분히 좋은&amp;rsquo; 해답으로 만족할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>근사 알고리즘의 필요성&lt;span class="hx-absolute -hx-mt-20" id="근사-알고리즘의-필요성">&lt;/span>
&lt;a href="#%ea%b7%bc%ec%82%ac-%ec%95%8c%ea%b3%a0%eb%a6%ac%ec%a6%98%ec%9d%98-%ed%95%84%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>근사 알고리즘이 필요한 이유는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>NP-난해 문제 해결&lt;/strong>: 많은 최적화 문제들이 NP-난해(NP-hard)하여 다항 시간 내에 정확한 해답을 찾기 어렵다.&lt;/li>
&lt;li>&lt;strong>실용적인 해결책 제공&lt;/strong>: 빠른 시간 내에 &amp;lsquo;충분히 좋은&amp;rsquo; 해답을 찾아 실제 문제에 적용할 수 있다.&lt;/li>
&lt;li>&lt;strong>계산 자원의 효율적 사용&lt;/strong>: 제한된 시간과 메모리로 복잡한 문제를 해결할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>근사 알고리즘의 장단점&lt;span class="hx-absolute -hx-mt-20" id="근사-알고리즘의-장단점">&lt;/span>
&lt;a href="#%ea%b7%bc%ec%82%ac-%ec%95%8c%ea%b3%a0%eb%a6%ac%ec%a6%98%ec%9d%98-%ec%9e%a5%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>장점:&lt;/p>
&lt;ol>
&lt;li>실행 시간이 빠르다.&lt;/li>
&lt;li>해답의 품질을 수학적으로 보장한다.&lt;/li>
&lt;li>대규모 문제에 적용 가능하다.&lt;/li>
&lt;/ol>
&lt;p>단점:&lt;/p>
&lt;ol>
&lt;li>정확한 최적해를 찾지는 못한다.&lt;/li>
&lt;li>모든 문제에 대해 좋은 근사 알고리즘이 존재하는 것은 아니다.&lt;/li>
&lt;/ol>
&lt;h3>특성과 핵심 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="특성과-핵심-구성-요소">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%84%b1%ea%b3%bc-%ed%95%b5%ec%8b%ac-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>근사 알고리즘의 주요 특성은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>근사 비율(Approximation Ratio): 알고리즘이 찾은 해답의 값을 A라 하고, 최적해의 값을 OPT라 할 때, 근사 비율 α는 다음과 같이 정의다:
&lt;ul>
&lt;li>최소화 문제의 경우: A ≤ α × OPT&lt;/li>
&lt;li>최대화 문제의 경우: A ≥ (1/α) × OPT&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>성능 보장(Performance Guarantee): 근사 알고리즘은 찾은 해답이 최적해와 얼마나 차이가 날 수 있는지에 대한 이론적 상한을 제공한다. 이는 알고리즘의 품질을 평가하는 중요한 지표가 된다.&lt;/li>
&lt;li>다항 시간 복잡도: 근사 알고리즘은 문제의 크기에 대해 다항 시간 내에 실행되어야 한다.&lt;/li>
&lt;/ol>
&lt;h3>근사 알고리즘의 작동 원리&lt;span class="hx-absolute -hx-mt-20" id="근사-알고리즘의-작동-원리">&lt;/span>
&lt;a href="#%ea%b7%bc%ec%82%ac-%ec%95%8c%ea%b3%a0%eb%a6%ac%ec%a6%98%ec%9d%98-%ec%9e%91%eb%8f%99-%ec%9b%90%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>근사 알고리즘의 핵심 원리는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>근사비(Approximation ratio)&lt;/strong>: 알고리즘이 찾은 해의 품질을 측정하는 지표이다. 최적해와 근사해의 비율로 표현된다..&lt;/li>
&lt;li>&lt;strong>탐욕적 선택(Greedy choice)&lt;/strong>: 각 단계에서 지역적으로 최선의 선택을 한다. 이는 항상 전체적인 최적해를 보장하지는 않지만, 많은 경우 좋은 근사해를 제공한다.&lt;/li>
&lt;li>&lt;strong>반복적 개선&lt;/strong>: 초기 해답을 점진적으로 개선하여 더 나은 근사해를 찾는다.&lt;/li>
&lt;/ol>
&lt;h3>좋은 근사 알고리즘의 조건&lt;span class="hx-absolute -hx-mt-20" id="좋은-근사-알고리즘의-조건">&lt;/span>
&lt;a href="#%ec%a2%8b%ec%9d%80-%ea%b7%bc%ec%82%ac-%ec%95%8c%ea%b3%a0%eb%a6%ac%ec%a6%98%ec%9d%98-%ec%a1%b0%ea%b1%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>좋은 근사 알고리즘은 다음과 같은 특성을 가져야 한다:&lt;/p>
&lt;ol>
&lt;li>효율성: 빠른 실행 시간을 가져야 한다&lt;/li>
&lt;li>정확성: 근사 비율이 작아야 한다 (최적해에 가까운 해답을 찾아야 함)&lt;/li>
&lt;li>안정성: 입력이 조금 변경되어도 결과가 크게 달라지지 않아야 한다&lt;/li>
&lt;li>단순성: 이해하고 구현하기 쉬워야 한다다&lt;/li>
&lt;/ol>
&lt;h3>예시 코드&lt;span class="hx-absolute -hx-mt-20" id="예시-코드">&lt;/span>
&lt;a href="#%ec%98%88%ec%8b%9c-%ec%bd%94%eb%93%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>집합 커버 문제(Set Cover Problem)&lt;span class="hx-absolute -hx-mt-20" id="집합-커버-문제set-cover-problem">&lt;/span>
&lt;a href="#%ec%a7%91%ed%95%a9-%ec%bb%a4%eb%b2%84-%eb%ac%b8%ec%a0%9cset-cover-problem" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;blockquote>
&lt;p>집합 커버 문제(Set Cover Problem)&amp;gt;&lt;/p>
&lt;ul>
&lt;li>직관적인 이해&lt;br>
도서관에서 독서 모임을 운영하는 상황을 생각해보자.&lt;br>
100명의 회원들이 각자 다른 시간대에 참석 가능하다고 할 때, 모든 회원이 최소 하나의 모임에 참석할 수 있도록 하는 최소 개수의 모임 시간을 정하는 것이 집합 커버 문제의 한 예시이다.&lt;/li>
&lt;li>수학적 정의&lt;br>
집합 커버 문제는 다음과 같이 정의된다:
&lt;ul>
&lt;li>전체 집합 U (universe)가 주어진다.&lt;/li>
&lt;li>U의 부분집합들의 모음 F = {S1, S2, …, Sm}가 주어진다.&lt;/li>
&lt;li>목표는 F의 부분집합들 중 가능한 한 적은 수의 집합을 선택하여 U의 모든 원소를 커버하는 것.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>신도시 학교 배치 문제: 10개의 마을로 구성된 신도시에 학교를 배치하는 문제.&lt;/p>
&lt;ul>
&lt;li>전체 집합 U = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} (마을 번호)&lt;/li>
&lt;li>부분집합 F = {S1, S2, S3, S4, S5, S6, S7, S8, S9, S10}
&lt;ul>
&lt;li>여기서 각 Si는 해당 마을에 학교를 지었을 때 15분 이내에 등교 가능한 마을들의 집합이다.&lt;/li>
&lt;li>예를 들어:
&lt;ul>
&lt;li>S1 = {1, 2, 3, 8}&lt;/li>
&lt;li>S2 = {1, 2, 3, 4, 8}&lt;/li>
&lt;li>S3 = {1, 2, 3, 4}&lt;/li>
&lt;li>S4 = {2, 3, 4, 5, 7, 8}&lt;/li>
&lt;li>S5 = {4, 5, 6, 7}&lt;/li>
&lt;li>S6 = {5, 6, 7, 9, 10}&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>목표는 모든 마을을 커버하는 최소 개수의 부분집합(즉, 학교 위치)을 찾는 것이다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 탐욕적 방법으로 집합 커버 문제를 해결하는 함수&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># universe: 전체 집합 (모든 마을들)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># subsets: 각 학교 위치별로 15분 내 통학 가능한 마을들의 집합을 담은 리스트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">greedy_set_cover&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">universe&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">subsets&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 아직 학교가 배정되지 않은 마을들을 추적하기 위한 집합&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 처음에는 모든 마을이 미배정 상태&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uncovered&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">universe&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 선택된 학교 위치들(부분집합들)을 저장할 리스트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cover&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 모든 마을이 학교에 배정될 때까지 반복&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">uncovered&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 현재 미배정된 마을들 중에서 가장 많은 마을을 커버할 수 있는 학교 위치 선택&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># key 함수는 각 부분집합과 미배정 마을들의 교집합 크기를 반환&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 즉, 해당 위치에 학교를 지었을 때 새롭게 커버되는 마을의 수를 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">best_subset&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">subsets&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uncovered&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 선택된 학교 위치를 결과 리스트에 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cover&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">best_subset&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 선택된 학교가 커버하는 마을들을 미배정 집합에서 제거&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># -= 연산자는 차집합 연산을 수행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uncovered&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">best_subset&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 이미 선택된 학교 위치는 다시 선택되지 않도록 후보 리스트에서 제거&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">subsets&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">best_subset&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 선택된 모든 학교 위치들의 리스트 반환&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">cover&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 테스트를 위한 입력 데이터 설정&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># universe: 1부터 10까지의 모든 마을 번호&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">universe&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># subsets: 각 위치에 학교를 지었을 때 15분 내 통학 가능한 마을들의 집합&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 예: 첫 번째 집합 {1, 2, 3, 8}은 1번 위치에 학교를 지으면&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 1, 2, 3, 8번 마을의 학생들이 15분 내 통학 가능함을 의미&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">subsets&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="c1"># 1번 위치의 학교가 커버하는 마을들&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="c1"># 2번 위치의 학교가 커버하는 마을들&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="c1"># 3번 위치의 학교가 커버하는 마을들&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">},&lt;/span>&lt;span class="c1"># 4번 위치의 학교가 커버하는 마을들&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="c1"># 5번 위치의 학교가 커버하는 마을들&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="c1"># 6번 위치의 학교가 커버하는 마을들&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="c1"># 7번 위치의 학교가 커버하는 마을들&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="c1"># 8번 위치의 학교가 커버하는 마을들&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="c1"># 9번 위치의 학교가 커버하는 마을들&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="c1"># 10번 위치의 학교가 커버하는 마을들&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 알고리즘 실행 및 결과 출력&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cover&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">greedy_set_cover&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">universe&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">subsets&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Approximate Set Cover:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cover&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이 알고리즘은 다음과 같이 작동한다:&lt;/p>
&lt;ol>
&lt;li>아직 커버되지 않은 원소를 가장 많이 포함하는 부분집합을 선택한다.&lt;/li>
&lt;li>선택된 부분집합의 원소들을 커버된 것으로 표시한다.&lt;/li>
&lt;li>모든 원소가 커버될 때까지 1-2를 반복한다.&lt;/li>
&lt;/ol>
&lt;h4>Bin Packing Problem(빈 포장 문제)&lt;span class="hx-absolute -hx-mt-20" id="bin-packing-problem빈-포장-문제">&lt;/span>
&lt;a href="#bin-packing-problem%eb%b9%88-%ed%8f%ac%ec%9e%a5-%eb%ac%b8%ec%a0%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>빈 포장 문제는 주어진 크기의 여러 물건들을 동일한 크기의 빈(컨테이너)에 모두 넣으려고 할 때, 필요한 최소한의 빈 개수를 찾는 문제.&lt;br>
이는 NP-hard 문제이므로, 근사 알고리즘을 사용하여 해결하는 것이 효율적이다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Bin&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">capacity&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 빈(컨테이너) 객체를 초기화합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> capacity (float): 빈의 최대 용량
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">capacity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">capacity&lt;/span> &lt;span class="c1"># 빈의 최대 용량&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="c1"># 빈에 담긴 아이템들을 저장하는 리스트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">used_capacity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1"># 현재 사용된 용량&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">can_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 주어진 아이템을 현재 빈에 추가할 수 있는지 확인합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> item (float): 추가하려는 아이템의 크기
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Returns:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> bool: 아이템 추가 가능 여부
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">used_capacity&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">capacity&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 빈에 아이템을 추가합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> item (float): 추가할 아이템의 크기
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Returns:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> bool: 아이템 추가 성공 여부
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">can_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">used_capacity&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">item&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">first_fit_decreasing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bin_capacity&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> First-Fit Decreasing 알고리즘을 사용하여 빈 포장 문제를 해결합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 이 알고리즘은 항상 최적해의 1.7배 이내의 해답을 보장합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> items (list): 포장할 아이템들의 크기 리스트
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> bin_capacity (float): 각 빈의 용량
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Returns:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> list: 사용된 빈들의 리스트
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 아이템들을 내림차순으로 정렬&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sorted_items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">sorted&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">reverse&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 첫 번째 빈을 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bins&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">Bin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bin_capacity&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 각 아이템에 대해&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">sorted_items&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 아이템이 빈의 용량보다 큰 경우 처리 불가&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bin_capacity&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Item size &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> exceeds bin capacity &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">bin_capacity&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 기존 빈에 아이템을 넣을 수 있는지 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">item_packed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nb">bin&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">bins&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">bin&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">item_packed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 기존 빈에 넣을 수 없다면 새로운 빈 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">item_packed&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_bin&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Bin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bin_capacity&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_bin&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bins&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">new_bin&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">bins&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 알고리즘 사용 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">print_packing_solution&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bins&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 빈 포장 결과를 출력합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> bins (list): 사용된 빈들의 리스트
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;총 사용된 빈의 개수: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bins&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">bin&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">enumerate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bins&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">빈 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;사용된 용량: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">bin&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">used_capacity&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">bin&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">capacity&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;담긴 아이템들: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">bin&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 테스트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 테스트 데이터 준비&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bin_capacity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 알고리즘 실행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result_bins&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">first_fit_decreasing&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bin_capacity&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 결과 출력&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">=== 빈 포장 문제 해결 결과 ===&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;전체 아이템: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;빈 용량: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">bin_capacity&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">print_packing_solution&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result_bins&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">except&lt;/span> &lt;span class="ne">ValueError&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;오류 발생: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">****&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이 코드는 다음과 같은 특징과 장점이 있다:&lt;/p>
&lt;ol>
&lt;li>근사 알고리즘 특성:
&lt;ul>
&lt;li>First-Fit Decreasing 방식은 이론적으로 최적해의 1.7배 이내의 해답을 보장한다.&lt;/li>
&lt;li>실제로는 대부분의 경우 이보다 더 좋은 결과를 얻을 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>구현 방식:
&lt;ul>
&lt;li>아이템들을 내림차순으로 정렬하여 큰 아이템부터 처리한다.&lt;/li>
&lt;li>각 아이템에 대해 첫 번째로 들어갈 수 있는 빈을 찾아 배치한다.&lt;/li>
&lt;li>기존 빈에 넣을 수 없는 경우 새로운 빈을 생성한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>코드 구조:
&lt;ul>
&lt;li>&lt;code>Bin&lt;/code> 클래스로 각 컨테이너의 상태를 관리한다.&lt;/li>
&lt;li>메인 알고리즘은 &lt;code>first_fit_decreasing&lt;/code> 함수에 구현되어 있다.&lt;/li>
&lt;li>결과 출력을 위한 보조 함수도 포함되어 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>