<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cloud-Native on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/cloud-native/</link>
    <description>Recent content in Cloud-Native on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.149.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 25 Jul 2025 05:37:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/cloud-native/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Istio</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/service-mesh/implementations/istio/</link>
      <pubDate>Fri, 25 Jul 2025 05:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/service-mesh/implementations/istio/</guid>
      <description>Istio 는 컨테이너 오케스트레이션 환경에서 마이크로서비스 간 트래픽 관리, 보안, 정책, 관측을 위해 제공되는 대표적인 서비스 메시 솔루션으로, 애플리케이션 코드 변경 없이 다양한 네트워크 기능을 지원하여 시스템의 일관성과 안정성을 높인다.</description>
    </item>
    <item>
      <title>Multi-Cloud Architecture</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-patterns/multi-cloud/</link>
      <pubDate>Sun, 06 Jul 2025 02:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-patterns/multi-cloud/</guid>
      <description>멀티클라우드 아키텍처 (Multi-Cloud Architecture) 는 둘 이상의 퍼블릭 클라우드 제공자를 활용해 애플리케이션이나 인프라를 분산 배치하는 전략이다. 이를 통해 유연성, 가용성, 비용 최적화, 벤더 종속성 해소, 규제 준수, 혁신 가속 등 다양한 이점을 얻을 수 있으며, 복잡한 관리와 보안, 네트워크, 데이터 일관성 등 도전 과제가 동반된다.</description>
    </item>
    <item>
      <title>Microservices Architecture</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/microservices/</link>
      <pubDate>Sat, 01 Feb 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/microservices/</guid>
      <description>마이크로서비스 아키텍처는 하나의 애플리케이션을 독립적으로 배포 가능한 작은 서비스들의 집합으로 구성하는 소프트웨어 아키텍처 스타일이다. 각 서비스는 특정 비즈니스 기능을 담당하며, API 를 통해 통신하고, 자체 데이터베이스를 보유한다. 확장성, 유연성, 기술적 다양성을 제공하여 현대 클라우드 네이티브 애플리케이션 개발의 핵심 방식으로 자리잡았다.</description>
    </item>
    <item>
      <title>Service Mesh</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/container-based/service-mesh/</link>
      <pubDate>Wed, 13 Nov 2024 09:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/container-based/service-mesh/</guid>
      <description>서비스 메시는 **마이크로서비스 간 통신을 Sidecar 프록시 기반 Data Plane**으로 추상화하고, **Control Plane**에서 정책·보안·관찰 기능을 외부화하는 인프라 계층이다.  이를 통해 서비스 간 보안 (mTLS), 로드밸런싱, 리트라이, 트래픽 제어, 모니터링 등을 코드 수정 없이 적용할 수 있다.</description>
    </item>
  </channel>
</rss>
