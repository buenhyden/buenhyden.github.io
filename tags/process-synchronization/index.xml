<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Process-Synchronization on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/process-synchronization/</link>
    <description>Recent content in Process-Synchronization on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.150.1</generator>
    <language>en</language>
    <lastBuildDate>Tue, 20 May 2025 14:46:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/process-synchronization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mutual Exclusion</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/thread-programming/thread-synchronization/mutual-exclusion/</link>
      <pubDate>Tue, 20 May 2025 14:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/thread-programming/thread-synchronization/mutual-exclusion/</guid>
      <description>**상호 배제(Mutual Exclusion)**는 여러 스레드나 프로세스가 공유 자원에 동시에 접근하지 못하도록 제어하여 데이터 일관성과 시스템 안정성을 보장하는 동시성 제어 기법이다. **임계 구역(Critical Section)**에 한 번에 하나의 실행 단위만 진입하도록 제한하며, **경쟁 상태(Race Condition)**를 방지한다. 구현에는 락(Lock), 세마포어(Semaphore), 뮤텍스(Mutex), 모니터(Monitor) 등이 사용되며, 분산 환경과 실시간 시스템에서도 필수적으로 활용된다.</description>
    </item>
  </channel>
</rss>
