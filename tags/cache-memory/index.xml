<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Cache-Memory</title><link>https://buenhyden.github.io/tags/cache-memory/</link><description>Recent content in Cache-Memory on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 19 Oct 2024 11:36:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/cache-memory/index.xml" rel="self" type="application/rss+xml"/><item><title>Cache Memory</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/cache-memory/</link><pubDate>Sat, 19 Oct 2024 11:36:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/cache-memory/</guid><description>
&lt;h2>Cache Memory&lt;span class="hx-absolute -hx-mt-20" id="cache-memory">&lt;/span>
&lt;a href="#cache-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>캐시 메모리(Cache Memory)는 컴퓨터 아키텍처에서 중요한 역할을 하는 CPU와 주 메모리(RAM) 사이에 위치한 소규모의 고속 메모리이다.&lt;br>
주요 목적은 자주 사용되는 데이터와 명령어를 CPU 가까이에 저장하여 접근 시간을 줄이고 전체 시스템 성능을 향상시키는 것이다.&lt;/p>
&lt;h3>특징&lt;span class="hx-absolute -hx-mt-20" id="특징">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>속도: RAM보다 10-100배 빠르며, 응답 시간은 몇 나노초에 불과하다.&lt;/li>
&lt;li>용량: RAM보다 작지만 더 빠른 SRAM을 사용한다.&lt;/li>
&lt;li>비용: 단위 용량당 RAM보다 비싸지만 성능이 월등히 높다.&lt;/li>
&lt;li>위치: CPU 칩 내부 또는 매우 가까운 곳에 위치한다.&lt;/li>
&lt;/ol>
&lt;h3>작동 원리&lt;span class="hx-absolute -hx-mt-20" id="작동-원리">&lt;/span>
&lt;a href="#%ec%9e%91%eb%8f%99-%ec%9b%90%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>지역성 원리: 최근 접근한 데이터나 명령어는 가까운 미래에 다시 사용될 가능성이 높다는 원리를 활용한다.&lt;/li>
&lt;li>캐시 히트와 미스: CPU가 데이터를 요청할 때 캐시에서 찾으면 &amp;lsquo;캐시 히트&amp;rsquo;, 찾지 못하면 &amp;lsquo;캐시 미스&amp;rsquo;가 발생한다.&lt;/li>
&lt;li>캐시 정책: 어떤 데이터를 캐시에 유지할지 결정하는 정책으로, LRU(Least Recently Used)나 MRU(Most Recently Used) 등이 있다.&lt;/li>
&lt;/ol>
&lt;h3>캐시 레벨&lt;span class="hx-absolute -hx-mt-20" id="캐시-레벨">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%9c-%eb%a0%88%eb%b2%a8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>L1 캐시: CPU에 가장 가까운 최소, 최고속 캐시로, 보통 명령어용(L1i)과 데이터용(L1d)으로 나뉜다.&lt;/li>
&lt;li>L2 캐시: L1보다 크고 느리지만 여전히 고속인 캐시이다.&lt;/li>
&lt;li>L3 캐시: 더 큰 용량을 제공하며, 여러 코어가 공유할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>캐시 매핑 기법&lt;span class="hx-absolute -hx-mt-20" id="캐시-매핑-기법">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%9c-%eb%a7%a4%ed%95%91-%ea%b8%b0%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>직접 매핑: 각 메모리 블록이 특정 캐시 라인에 매핑된다.&lt;/li>
&lt;li>완전 연관 매핑: 메모리 블록이 어느 캐시 라인에나 로드될 수 있다.&lt;/li>
&lt;li>집합 연관 매핑: 직접과 완전 연관의 절충안으로, 메모리 블록이 특정 집합 내 어느 라인에나 로드될 수 있다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>