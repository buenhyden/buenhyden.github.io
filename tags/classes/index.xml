<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Classes on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/classes/</link>
    <description>Recent content in Classes on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 27 Dec 2024 01:03:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/classes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Non-deterministic Polynomial Time vs. Polynomial Time</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-time/non-deterministic-polynomial-time-vs-polynomial-time/</link>
      <pubDate>Fri, 27 Dec 2024 01:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-time/non-deterministic-polynomial-time-vs-polynomial-time/</guid>
      <description>계산 복잡도 이론에서 P와 NP는 가장 중요한 복잡도 클래스 중 두 가지로, 문제의 계산적 어려움을 분류하는 근본적인 개념이다.</description>
    </item>
    <item>
      <title>NP-Hard vs. NP-Complete</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-hard/np-hard-vs-np-complete/</link>
      <pubDate>Fri, 27 Dec 2024 01:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-hard/np-hard-vs-np-complete/</guid>
      <description>NP-Complete는 NP 클래스 내에서 가장 어려운 문제들을 나타내며, NP-Hard는 NP-Complete를 포함하여 더 넓은 범위의 어려운 문제들을 포괄한다.</description>
    </item>
    <item>
      <title>NP-난해(NP-Hard)</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-hard/</link>
      <pubDate>Thu, 12 Dec 2024 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-hard/</guid>
      <description>문제 H가 NP-Hard라는 것은, 모든 NP 문제가 다항 시간 내에 H로 환원(reduce)될 수 있다는 것을 의미한다.</description>
    </item>
    <item>
      <title>다항 공간(Polynomial Space) 클래스</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/polynomial-space/</link>
      <pubDate>Thu, 12 Dec 2024 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/polynomial-space/</guid>
      <description>PSPACE는 결정론적 튜링 기계에서 다항 크기의 메모리를 사용하여 해결할 수 있는 모든 결정 문제의 집합이다.</description>
    </item>
    <item>
      <title>지수 시간(Exponential Time) 복잡도</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/exponential-time/</link>
      <pubDate>Thu, 12 Dec 2024 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/exponential-time/</guid>
      <description>지수 시간(Exponential Time) 복잡도는 알고리즘의 실행 시간이 입력 크기에 대해 지수적으로 증가하는 경우를 나타낸다.</description>
    </item>
    <item>
      <title>NP-완전(NP-Complete)</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-complete/</link>
      <pubDate>Thu, 12 Dec 2024 14:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-complete/</guid>
      <description>NP-완전 문제는 NP 클래스 내에서 가장 &amp;#34;어려운&amp;#34; 문제들이다.</description>
    </item>
    <item>
      <title>다항 시간(Polynomial Time, P)</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/polynomial-time/</link>
      <pubDate>Thu, 12 Dec 2024 14:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/polynomial-time/</guid>
      <description>다항 시간(Polynomial Time)이란 알고리즘의 실행 시간이 입력 크기 n에 대한 다항식 함수로 표현될 수 있음을 의미한다.  즉, 알고리즘의 시간 복잡도가 O(n^k) 형태로 표현되는 경우를 말한다.</description>
    </item>
    <item>
      <title>비결정론적 다항 시간(Non-deterministic Polynomial Time, NP)</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-time/</link>
      <pubDate>Thu, 12 Dec 2024 14:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-time/</guid>
      <description>비결정론적 다항 시간(NP)은 비결정론적 튜링 기계(Non-deterministic Turing Machine)에서 다항 시간 내에 해결할 수 있는 결정 문제들의 집합을 의미한다. 좀 더 직관적인 정의로는 &amp;#34;해답이 주어졌을 때 그 해답이 올바른지 다항 시간 내에 검증할 수 있는 문제들의 집합&amp;#34;이라고 할 수 있다.</description>
    </item>
    <item>
      <title>Python-Special Methods</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/special-methods/</link>
      <pubDate>Mon, 25 Nov 2024 23:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/special-methods/</guid>
      <description>클래스에 특별한 기능을 부여하는 특수한 메소드</description>
    </item>
    <item>
      <title>Python - Iterators</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/iterators/</link>
      <pubDate>Mon, 25 Nov 2024 17:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/iterators/</guid>
      <description>데이터 컬렉션의 요소들을 순차적으로 접근할 수 있게 해주는 객체</description>
    </item>
    <item>
      <title>Classes</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/</link>
      <pubDate>Mon, 25 Nov 2024 12:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/</guid>
      <description>Python의 클래스(class)는 객체 지향 프로그래밍의 핵심 개념으로, 데이터와 그 데이터를 조작하는 메서드를 하나의 단위로 묶는 틀이다.</description>
    </item>
    <item>
      <title>name mangling</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/name-mangling/</link>
      <pubDate>Mon, 25 Nov 2024 09:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/name-mangling/</guid>
      <description>파이썬에서 &amp;#34;name mangling&amp;#34;은 클래스 내부의 속성이나 메서드의 이름을 변경하는 기능이다.  이 기능은 주로 정보 은닉과 캡슐화를 위해 사용된다.</description>
    </item>
    <item>
      <title>Python Super</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/super/</link>
      <pubDate>Mon, 25 Nov 2024 02:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/super/</guid>
      <description>super()는 상속 관계에서 부모 클래스의 메서드를 호출하는 데 사용되는 중요한 도구.</description>
    </item>
    <item>
      <title>Method Resolution Order (MRO)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/method-resolution-order/</link>
      <pubDate>Mon, 25 Nov 2024 01:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/method-resolution-order/</guid>
      <description>파이썬에서 클래스의 상속 관계에서 메서드를 찾는 순서를 정의하는 규칙</description>
    </item>
  </channel>
</rss>
