<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Distributed on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/distributed/</link>
    <description>Recent content in Distributed on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Jul 2025 15:44:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/distributed/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Request Response Cycle</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/communication-patterns/request-response-cycle/</link>
      <pubDate>Thu, 10 Jul 2025 15:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/communication-patterns/request-response-cycle/</guid>
      <description>Request Response Cycle(요청 - 응답 사이클) 은 클라이언트가 서버에 요청 (Request) 을 보내고, 서버가 이에 대한 응답 (Response) 을 반환하는 일련의 흐름이다. 이는 웹, API, 네트워크 등 다양한 백엔드 시스템에서 데이터 교환의 표준 패턴으로, 효율적이고 안정적인 서비스 제공을 위해 반드시 이해해야 하는 핵심 개념이다.</description>
    </item>
    <item>
      <title>Cell-Based Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed/cell-based-architecture/</link>
      <pubDate>Wed, 09 Jul 2025 01:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed/cell-based-architecture/</guid>
      <description>Cell-Based Architecture 는 대규모 분산 시스템을 독립적인 셀 (Cell) 단위로 분해하여 장애 격리와 확장성을 제공하는 아키텍처 패턴이다. 각 셀은 완전한 기능을 가진 독립적인 단위로 작동하며, 마이크로서비스의 한계를 극복하고 시스템 전체의 가용성을 향상시킨다.</description>
    </item>
    <item>
      <title>Distributed Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed/</link>
      <pubDate>Sun, 27 Apr 2025 11:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed/</guid>
      <description>Distributed Architecture 는 하나의 시스템을 여러 네트워크 연결 노드에 분산 배포해 처리 성능, 장애 복원력, 확장성을 확보하는 구조이다. 클라우드, 마이크로서비스, P2P, 브로커, 공유 - 낫싱 등 다양한 패턴이 포함되며, 메시징, 이벤트 기반, RPC, API 게이트웨이 등을 통해 모듈 간 통신을 설계한다.</description>
    </item>
    <item>
      <title>Space-Based Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed/space-based-architecture/</link>
      <pubDate>Fri, 27 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed/space-based-architecture/</guid>
      <description>Space-Based Architecture 는 튜플 스페이스 패러다임을 기반으로 한 분산 컴퓨팅 아키텍처로, 데이터와 처리 로직을 여러 노드에 분산시켜 확장성과 성능을 극대화한다. 인메모리 데이터 그리드를 활용하여 데이터베이스 병목 현상을 제거하고, 수평적 확장을 통해 선형적 성능 향상을 제공한다.</description>
    </item>
    <item>
      <title>Peer-to-Peer Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed/peer-to-peer-architecture/</link>
      <pubDate>Fri, 27 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed/peer-to-peer-architecture/</guid>
      <description>Peer-to-Peer Architecture(피어 투 피어 아키텍처) 는 모든 노드가 동등하게 참여하며, 중앙 서버 없이 각 노드가 직접 데이터를 공유·전송하는 분산 네트워크 구조이다. 확장성과 자원 활용성이 뛰어나며, 파일 공유, 블록체인 등 다양한 분야에서 활용된다.</description>
    </item>
    <item>
      <title>Client Server Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed/client-server-architecture/</link>
      <pubDate>Thu, 26 Sep 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed/client-server-architecture/</guid>
      <description>Client‑Server Architecture 는 클라이언트가 요청 (request) 을 보내면 서버가 응답 (response) 하는 구조로, 역할과 책임을 분리하고 중앙화된 자원 관리, 보안성, 확장성을 제공한다. 웹, 데이터베이스, 이메일 시스템 등 대부분의 네트워크 기반 애플리케이션의 기본 모델이다.</description>
    </item>
  </channel>
</rss>
