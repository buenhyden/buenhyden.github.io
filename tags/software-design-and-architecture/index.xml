<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software-Design-and-Architecture :: Tag :: hyunyoun's Blog</title><link>https://buenhyden.github.io/tags/software-design-and-architecture.html</link><description/><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Thu, 16 Jan 2025 14:06:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/software-design-and-architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Programming Paradigm</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms.html</link><pubDate>Sat, 05 Oct 2024 04:38:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms.html</guid><description>코드를 효율적이고 유지보수가 용이하게 작성하기 위한 다양한 접근 방식</description></item><item><title>Software Architecture Principles</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles.html</link><pubDate>Mon, 13 Jan 2025 05:27:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles.html</guid><description>Software Architecture Principles는 효율적이고 유지보수가 용이한 소프트웨어 시스템을 설계하기 위한 핵심 지침이다. 이러한 원칙들을 적절히 적용함으로써, 개발자들은 유지보수가 용이하고, 확장 가능하며, 재사용성이 높은 소프트웨어 시스템을 설계할 수 있다.</description></item><item><title>Software Design Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns.html</link><pubDate>Thu, 10 Oct 2024 07:57:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns.html</guid><description>자주 발생하는 문제들을 해결하기 위한 재사용 가능한 설계 템플릿</description></item><item><title>MSA 패턴 유형별 비교</title><link>https://buenhyden.github.io/til/2025/01/msa-%ED%8C%A8%ED%84%B4-%EC%9C%A0%ED%98%95%EB%B3%84-%EB%B9%84%EA%B5%90.html</link><pubDate>Sat, 04 Jan 2025 02:45:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/til/2025/01/msa-%ED%8C%A8%ED%84%B4-%EC%9C%A0%ED%98%95%EB%B3%84-%EB%B9%84%EA%B5%90.html</guid><description>MSA의 주요 패턴 유형들을 체계적으로 정리한 것.</description></item><item><title>Software Architecture Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns.html</link><pubDate>Sun, 10 Nov 2024 05:46:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns.html</guid><description>주어진 상황에서의 소프트웨어 아키텍쳐에서 일반적으로 발생하는 문제점들에 대한 일반화되고 재사용 가능한 솔루션이다. 아키텍쳐 패턴은 소프트웨어 디자인 패턴과 유사하지만 더 큰 범주에 속한다.</description></item><item><title>MSA Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns.html</link><pubDate>Tue, 19 Nov 2024 09:15:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns.html</guid><description>마이크로서비스 아키텍처의 주요 패턴</description></item><item><title>Event-Driven Architecture vs Event Sourcing Pattern vs Publisher-Subscriber Pattern vs Producer-Consumer Pattern</title><link>https://buenhyden.github.io/til/2025/01/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern.html</link><pubDate>Thu, 16 Jan 2025 03:37:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/til/2025/01/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern.html</guid><description>EDA는 이벤트 중심의 시스템 설계를 위한 상위 수준의 아키텍처 스타일이며, Publisher-Subscriber Pattern과 Producer-Consumer Pattern은 EDA를 구현하는 데 사용되는 구체적인 통신 모델이다. 그리고 Event Sourcing Pattern은 EDA의 한 구현 방식으로 볼 수 있으며, 이벤트를 저장하고 관리하는 방법을 제공한다.</description></item><item><title>멀티 테넌시(Multi-tenancy)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/multi-tenancy.html</link><pubDate>Thu, 16 Jan 2025 14:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/multi-tenancy.html</guid><description>하나의 소프트웨어 애플리케이션이나 시스템이 여러 고객(테넌트)에게 서비스를 제공하는 아키텍처이다.</description></item><item><title>Producer-Consumer Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/producer-consumer-pattern.html</link><pubDate>Thu, 16 Jan 2025 01:12:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/producer-consumer-pattern.html</guid><description>이 패턴은 데이터를 생성하는 프로듀서(Producer)와 데이터를 소비하는 컨슈머(Consumer) 사이의 작업을 분리하여 효율적인 데이터 처리를 가능하게 한다.</description></item><item><title>Service-oriented architecture</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/service-oriented-architecture.html</link><pubDate>Mon, 13 Jan 2025 09:19:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/service-oriented-architecture.html</guid><description>Service-oriented architecture 참고 및 출처</description></item><item><title>Message Queues and Streams</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/message-queues-and-streams.html</link><pubDate>Mon, 13 Jan 2025 09:01:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/message-queues-and-streams.html</guid><description>Message Queues and Streams 참고 및 출처</description></item><item><title>Abstract class</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/abstract-class.html</link><pubDate>Mon, 13 Jan 2025 05:39:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/abstract-class.html</guid><description>추상 클래스는 하나 이상의 추상 메서드를 포함하는 클래스이다. 추상 메서드는 선언만 되고 구현되지 않은 메서드를 말한다.</description></item><item><title>Interface vs Abstract class</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/interface-vs-abstract-class.html</link><pubDate>Mon, 13 Jan 2025 05:39:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/interface-vs-abstract-class.html</guid><description>인터페이스는 클래스가 '무엇을 해야 하는지'를 정의하는 계약(contract)과 같은 역할을 하며, 추상 클래스(Abstract Class)는 하나 이상의 추상 메서드를 포함하는 클래스이다.</description></item><item><title>Encapsulation</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/encapsulation.html</link><pubDate>Sat, 11 Jan 2025 02:26:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/encapsulation.html</guid><description>캡슐화는 데이터와 그 데이터를 처리하는 메서드를 하나의 단위로 묶고, 외부로부터 접근을 제한하는 것을 의미한다.</description></item><item><title>Distributed State Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/distributed-state-pattern.html</link><pubDate>Sat, 04 Jan 2025 04:02:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/distributed-state-pattern.html</guid><description>Distributed State Pattern 참고 및 출처</description></item><item><title>Session State Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/session-state-pattern.html</link><pubDate>Sat, 04 Jan 2025 04:02:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/session-state-pattern.html</guid><description>Session State Pattern 참고 및 출처</description></item><item><title>Stateless Service Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/stateless-service-pattern.html</link><pubDate>Sat, 04 Jan 2025 04:02:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/stateless-service-pattern.html</guid><description>Stateless Service Pattern 참고 및 출처</description></item><item><title>Content Negotiation Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/content-negotiation-pattern.html</link><pubDate>Sat, 04 Jan 2025 04:01:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/content-negotiation-pattern.html</guid><description>Content Negotiation Pattern 참고 및 출처</description></item><item><title>Media Type Versioning Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/media-type-versioning-pattern.html</link><pubDate>Sat, 04 Jan 2025 04:01:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/media-type-versioning-pattern.html</guid><description>Media Type Versioning Pattern 참고 및 출처</description></item><item><title>URI Versioning Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/uri-versioning-pattern.html</link><pubDate>Sat, 04 Jan 2025 04:01:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/uri-versioning-pattern.html</guid><description>URI Versioning Pattern 참고 및 출처</description></item><item><title>Consumer-Driven Contract Testing Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/consumer-driven-contract-testing-pattern.html</link><pubDate>Sat, 04 Jan 2025 03:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/consumer-driven-contract-testing-pattern.html</guid><description>Consumer-Driven Contract Testing Pattern 참고 및 출처</description></item><item><title>End-to-End Testing Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/end-to-end-testing-pattern.html</link><pubDate>Sat, 04 Jan 2025 03:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/end-to-end-testing-pattern.html</guid><description>End-to-End Testing Pattern 참고 및 출처</description></item><item><title>Service Component Test Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/service-component-test-pattern.html</link><pubDate>Sat, 04 Jan 2025 03:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/service-component-test-pattern.html</guid><description>Service Component Test Pattern 참고 및 출처</description></item><item><title>State Management Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management.html</link><pubDate>Sat, 04 Jan 2025 02:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management.html</guid><description>State Management Patterns 참고 및 출처</description></item><item><title>Testing Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing.html</link><pubDate>Sat, 04 Jan 2025 02:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing.html</guid><description>Testing Patterns 참고 및 출처</description></item><item><title>Versioning Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning.html</link><pubDate>Sat, 04 Jan 2025 02:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning.html</guid><description>Versioning Patterns 참고 및 출처</description></item><item><title>Service Registry Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/service-registry-pattern.html</link><pubDate>Fri, 03 Jan 2025 04:02:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/service-registry-pattern.html</guid><description>Service Registry Pattern 참고 및 출처</description></item><item><title>Third-Party Registration Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/third-party-registration-pattern.html</link><pubDate>Fri, 03 Jan 2025 04:02:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/third-party-registration-pattern.html</guid><description>Third-Party Registration Pattern 참고 및 출처</description></item><item><title>Self-Registration Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/self-registration-pattern.html</link><pubDate>Fri, 03 Jan 2025 04:01:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/self-registration-pattern.html</guid><description>Self-Registration Pattern 참고 및 출처</description></item><item><title>Elastic Scale Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/elastic-scale-pattern.html</link><pubDate>Fri, 03 Jan 2025 04:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/elastic-scale-pattern.html</guid><description>Elastic Scale Pattern 참고 및 출처</description></item><item><title>Horizontal Scaling Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/horizontal-scaling-pattern.html</link><pubDate>Fri, 03 Jan 2025 04:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/horizontal-scaling-pattern.html</guid><description>Horizontal Scaling Pattern 참고 및 출처</description></item><item><title>Scale Cube Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/scale-cube-pattern.html</link><pubDate>Fri, 03 Jan 2025 04:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/scale-cube-pattern.html</guid><description>Scale Cube Pattern 참고 및 출처</description></item><item><title>Service Registry Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry.html</link><pubDate>Fri, 03 Jan 2025 02:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry.html</guid><description>Service Registry Patterns 참고 및 출처</description></item><item><title>Resilience Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience.html</link><pubDate>Fri, 03 Jan 2025 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience.html</guid><description>Resilience Patterns 참고 및 출처</description></item><item><title>Scalability Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability.html</link><pubDate>Fri, 03 Jan 2025 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability.html</guid><description>Scalability Patterns 참고 및 출처</description></item><item><title>Data Lake Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-lake-pattern.html</link><pubDate>Thu, 02 Jan 2025 03:56:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-lake-pattern.html</guid><description>Data Lake Pattern 참고 및 출처</description></item><item><title>Data Mesh Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-mesh-pattern.html</link><pubDate>Thu, 02 Jan 2025 03:56:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-mesh-pattern.html</guid><description>Data Mesh Pattern 참고 및 출처</description></item><item><title>Data Pipeline Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-pipeline-pattern.html</link><pubDate>Thu, 02 Jan 2025 03:56:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-pipeline-pattern.html</guid><description>Data Pipeline Pattern 참고 및 출처</description></item><item><title>API Security Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/api-security-pattern.html</link><pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/api-security-pattern.html</guid><description>API Security Pattern 참고 및 출처</description></item><item><title>OAuth and OpenID Connect Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/oauth-and-openid-connect-pattern.html</link><pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/oauth-and-openid-connect-pattern.html</guid><description>OAuth/ OpenID Connect Pattern 참고 및 출처</description></item><item><title>Service-to-Service Authentication</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/service-to-service-authentication.html</link><pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/service-to-service-authentication.html</guid><description>Service-to-Service Authentication 참고 및 출처</description></item><item><title>Vault Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/vault-pattern.html</link><pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/vault-pattern.html</guid><description>Vault Pattern 참고 및 출처</description></item><item><title>Zero Trust Security Model</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/zero-trust-security-model.html</link><pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/zero-trust-security-model.html</guid><description>Zero Trust Security Model 참고 및 출처</description></item><item><title>Security Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security.html</link><pubDate>Thu, 02 Jan 2025 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security.html</guid><description>Security Patterns 참고 및 출처</description></item><item><title>Data Management Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management.html</link><pubDate>Thu, 02 Jan 2025 02:18:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management.html</guid><description>Data Management Patterns 참고 및 출처</description></item><item><title>Circuit Breaker Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/circuit-breaker-pattern.html</link><pubDate>Wed, 01 Jan 2025 10:05:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/circuit-breaker-pattern.html</guid><description>Circuit Breaker Pattern 참고 및 출처</description></item><item><title>Lazy Loading Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/lazy-loading-pattern.html</link><pubDate>Wed, 01 Jan 2025 04:01:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/lazy-loading-pattern.html</guid><description>Lazy Loading Pattern 참고 및 출처</description></item><item><title>Caching Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/caching-pattern.html</link><pubDate>Wed, 01 Jan 2025 04:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/caching-pattern.html</guid><description>Caching Pattern 참고 및 출처</description></item><item><title>Throttling Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/throttling-pattern.html</link><pubDate>Wed, 01 Jan 2025 04:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/throttling-pattern.html</guid><description>Throttling Pattern 참고 및 출처</description></item><item><title>Bulkhead Isolation Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/bulkhead-isolation-pattern.html</link><pubDate>Wed, 01 Jan 2025 02:24:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/bulkhead-isolation-pattern.html</guid><description>Bulkhead Isolation Pattern 참고 및 출처</description></item><item><title>Fallback Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/fallback-pattern.html</link><pubDate>Wed, 01 Jan 2025 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/fallback-pattern.html</guid><description>Fallback Pattern 참고 및 출처</description></item><item><title>Performance Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance.html</link><pubDate>Wed, 01 Jan 2025 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance.html</guid><description>Performance Patterns 참고 및 출처</description></item><item><title>Timeout Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/timeout-pattern.html</link><pubDate>Wed, 01 Jan 2025 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/timeout-pattern.html</guid><description>Timeout Pattern 참고 및 출처</description></item><item><title>Retry Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/retry-pattern.html</link><pubDate>Wed, 01 Jan 2025 02:18:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/retry-pattern.html</guid><description>Retry Pattern 참고 및 출처</description></item><item><title>Configuration-as-Code Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/configuration-as-code-pattern.html</link><pubDate>Mon, 30 Dec 2024 04:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/configuration-as-code-pattern.html</guid><description>Configuration-as-Code는 시스템의 구성을 버전 관리가 가능한 소스 코드 형태로 정의하고 관리하는 방식이다.</description></item><item><title>Dynamic Configuration Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/dynamic-configuration-pattern.html</link><pubDate>Mon, 30 Dec 2024 04:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/dynamic-configuration-pattern.html</guid><description>Dynamic Configuration Pattern은 애플리케이션의 동작을 재배포 없이 실시간으로 변경할 수 있게 해주는 패턴</description></item><item><title>Configuration Management Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management.html</link><pubDate>Mon, 30 Dec 2024 02:17:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management.html</guid><description>구성 관리 패턴은 애플리케이션의 설정 정보를 효율적으로 관리하고 유지하기 위한 방법들을 정의한다. 적절한 구성 관리는 시스템의 안정성과 유연성을 보장하는 데 필수적이다.</description></item><item><title>외부 구성 저장소 패턴(External Configuration Store Pattern)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/external-configuration-store.html</link><pubDate>Mon, 30 Dec 2024 01:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/external-configuration-store.html</guid><description>외부 구성 저장소 패턴(External Configuration Store Pattern)은 마이크로서비스 아키텍처(MSA)에서 구성 관리 패턴 중 하나로 애플리케이션의 구성 정보를 외부 저장소로 분리하여 관리하는 방식을 제안한다.</description></item><item><title>Observability Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability.html</link><pubDate>Sun, 29 Dec 2024 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability.html</guid><description>Observability Patterns 참고 및 출처</description></item><item><title>Synthetic Monitoring</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/synthetic-monitoring.html</link><pubDate>Sun, 29 Dec 2024 02:20:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/synthetic-monitoring.html</guid><description>Synthetic Monitoring 참고 및 출처</description></item><item><title>Audit Logging</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/audit-logging.html</link><pubDate>Sun, 29 Dec 2024 02:13:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/audit-logging.html</guid><description>Audit Logging 참고 및 출처</description></item><item><title>Exception Tracking</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/exception-tracking.html</link><pubDate>Sun, 29 Dec 2024 02:12:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/exception-tracking.html</guid><description>Exception Tracking 참고 및 출처</description></item><item><title>Distributed Tracing</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/distributed-tracing.html</link><pubDate>Sun, 29 Dec 2024 01:59:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/distributed-tracing.html</guid><description>Distributed Tracing 참고 및 출처</description></item><item><title>Health Check</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/health-check.html</link><pubDate>Sun, 29 Dec 2024 01:59:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/health-check.html</guid><description>Health Check 참고 및 출처</description></item><item><title>Log Aggregation</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/log-aggregation.html</link><pubDate>Sun, 29 Dec 2024 01:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/log-aggregation.html</guid><description>Log Aggregation 참고 및 출처</description></item><item><title>Performance Metrics</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/performance-metrics.html</link><pubDate>Sun, 29 Dec 2024 01:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/performance-metrics.html</guid><description>Performance Metrics 참고 및 출처</description></item><item><title>Communication Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication.html</link><pubDate>Sat, 28 Dec 2024 12:41:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication.html</guid><description>통신 패턴들은 마이크로서비스 아키텍처에서 서비스 간의 효율적인 통신을 가능하게 하며, 시스템의 확장성, 유연성, 성능을 향상시키는 데 중요한 역할을 한다.</description></item><item><title>Event-Driven Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/event-driven-pattern.html</link><pubDate>Sat, 28 Dec 2024 10:05:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/event-driven-pattern.html</guid><description>이 패턴은 시스템의 상태 변화를 이벤트로 표현하고, 이를 기반으로 서비스 간 통신을 구현하는 방식이다.</description></item><item><title>Behavioral Design Patterns vs Creational Design Patterns vs Structural Design Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns-vs-creational-design-patterns-vs-structural-design-patterns.html</link><pubDate>Sat, 28 Dec 2024 08:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns-vs-creational-design-patterns-vs-structural-design-patterns.html</guid><description>소프트웨어 설계에서 자주 발생하는 문제들을 해결하기 위한 일반화된 솔루션을 제공하는 디자인 패턴의 세 가지 주요 카테고리</description></item><item><title>발행/구독 패턴 (Publisher-Subscriber Pattern)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/publisher-subscriber-pattern.html</link><pubDate>Sat, 28 Dec 2024 07:05:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/publisher-subscriber-pattern.html</guid><description>발행/구독 패턴은 메시지를 생성하는 발행자(Publisher)와 메시지를 수신하는 구독자(Subscriber) 사이의 비동기 통신 모델이다.</description></item><item><title>Request-Response Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/request-response-pattern.html</link><pubDate>Sat, 28 Dec 2024 06:18:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/request-response-pattern.html</guid><description>Request-Response Pattern은 한 서비스(클라이언트)가 다른 서비스(서버)에 요청을 보내고, 서버가 이 요청을 처리한 후 응답을 반환하는 방식의 통신이다.</description></item><item><title>Message-based Communication Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/message-based-communication-pattern.html</link><pubDate>Sat, 28 Dec 2024 03:56:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/message-based-communication-pattern.html</guid><description>Message-based Communication Pattern은 마이크로서비스 간 통신을 위해 메시지를 사용하는 방식으로 각 서비스는 메시지를 생성하고 수신하며, 이 메시지들은 메시지 브로커를 통해 전달된다.</description></item><item><title>Synchronous Communication Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/synchronous-communication-pattern.html</link><pubDate>Sat, 28 Dec 2024 03:56:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/synchronous-communication-pattern.html</guid><description>Synchronous Communication Pattern은 한 서비스가 다른 서비스에 요청을 보내고 응답을 받을 때까지 기다리는 방식이다.</description></item><item><title>비동기 통신 패턴(Asynchronous Communication Pattern)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/asynchronous-communication-pattern.html</link><pubDate>Sat, 28 Dec 2024 03:56:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/asynchronous-communication-pattern.html</guid><description>비동기 통신 패턴은 마이크로서비스 간의 통신에서 요청자가 응답을 기다리지 않고 다음 작업을 수행할 수 있게 하는 패턴이다.</description></item><item><title>Auto-Scaling-Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/auto-scaling-pattern.html</link><pubDate>Thu, 26 Dec 2024 02:39:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/auto-scaling-pattern.html</guid><description>Auto-Scaling-Pattern 참고 및 출처</description></item><item><title>Deployment Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment.html</link><pubDate>Thu, 26 Dec 2024 02:19:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment.html</guid><description>Deployment 참고 및 출처</description></item><item><title>Multiple Service Instances per Host</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/multiple-service-instances-per-host.html</link><pubDate>Thu, 26 Dec 2024 02:14:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/multiple-service-instances-per-host.html</guid><description>Multiple Service Instances per Host 참고 및 출처</description></item><item><title>Service Instance per Container</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/service-instance-per-container.html</link><pubDate>Thu, 26 Dec 2024 02:14:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/service-instance-per-container.html</guid><description>Service Instance per Container 참고 및 출처</description></item><item><title>Single Service per Host</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/single-service-per-host.html</link><pubDate>Thu, 26 Dec 2024 02:14:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/single-service-per-host.html</guid><description>Single Service per Host 참고 및 출처</description></item><item><title>Blue-Green Deployment Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/blue-green-deployment-pattern.html</link><pubDate>Thu, 26 Dec 2024 02:13:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/blue-green-deployment-pattern.html</guid><description>Blue-Green Deployment Pattern 참고 및 출처</description></item><item><title>Canary Deployment Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/canary-deployment-pattern.html</link><pubDate>Thu, 26 Dec 2024 02:13:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/canary-deployment-pattern.html</guid><description>Canary Deployment Pattern 참고 및 출처</description></item><item><title>Rolling Update Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/rolling-update-pattern.html</link><pubDate>Thu, 26 Dec 2024 02:13:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/rolling-update-pattern.html</guid><description>Rolling Update Pattern 참고 및 출처</description></item><item><title>Decomposition Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition.html</link><pubDate>Sun, 22 Dec 2024 02:19:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition.html</guid><description>Decomposition 참고 및 출처</description></item><item><title>Decompose by Business Capability</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-business-capability.html</link><pubDate>Sun, 22 Dec 2024 01:20:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-business-capability.html</guid><description>Decompose by Business Capability 참고 및 출처</description></item><item><title>Decompose by Subdomain</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-subdomain.html</link><pubDate>Sun, 22 Dec 2024 01:20:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-subdomain.html</guid><description>Decompose by Subdomain 참고 및 출처</description></item><item><title>Decompose by Transactions</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-transactions.html</link><pubDate>Sun, 22 Dec 2024 01:20:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-transactions.html</guid><description>Decompose by Transactions 참고 및 출처</description></item><item><title>Strangler Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/strangler-pattern.html</link><pubDate>Sun, 22 Dec 2024 01:20:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/strangler-pattern.html</guid><description>Strangler Pattern 참고 및 출처</description></item><item><title>Interpreter Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/interpreter-pattern.html</link><pubDate>Tue, 17 Dec 2024 08:27:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/interpreter-pattern.html</guid><description>Interpreter Pattern 참고 및 출처</description></item><item><title>Visitor Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/visitor-pattern.html</link><pubDate>Tue, 17 Dec 2024 08:27:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/visitor-pattern.html</guid><description>Visitor Pattern 참고 및 출처</description></item><item><title>Chain of Responsibility</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/chain-of-responsibility.html</link><pubDate>Tue, 17 Dec 2024 08:26:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/chain-of-responsibility.html</guid><description>Chain of Responsibility 참고 및 출처</description></item><item><title>Mediator Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/mediator-pattern.html</link><pubDate>Tue, 17 Dec 2024 08:26:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/mediator-pattern.html</guid><description>Mediator Pattern 참고 및 출처</description></item><item><title>Memento Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/memento-pattern.html</link><pubDate>Tue, 17 Dec 2024 08:26:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/memento-pattern.html</guid><description>Memento Pattern 참고 및 출처</description></item><item><title>Broker Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/broker-pattern.html</link><pubDate>Fri, 13 Dec 2024 08:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/broker-pattern.html</guid><description>분산 시스템에서 컴포넌트들 간의 통신을 조정하고 중개하는 구조적 패턴</description></item><item><title>Event-Bus Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-bus-pattern.html</link><pubDate>Fri, 13 Dec 2024 08:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-bus-pattern.html</guid><description>소프트웨어 시스템의 컴포넌트 간 통신을 단순화하고 유연성을 높이는 아키텍처 패턴</description></item><item><title>Flyweight Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/structural-design-patterns/flyweight-pattern.html</link><pubDate>Fri, 13 Dec 2024 08:25:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/structural-design-patterns/flyweight-pattern.html</guid><description>Flyweight Pattern 참고 및 출처</description></item><item><title>Composite Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/structural-design-patterns/composite-pattern.html</link><pubDate>Fri, 13 Dec 2024 08:24:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/structural-design-patterns/composite-pattern.html</guid><description>Composite Pattern 참고 및 출처</description></item><item><title>Rate Limiting Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/rate-limiting-pattern.html</link><pubDate>Mon, 09 Dec 2024 11:41:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/rate-limiting-pattern.html</guid><description>Rate Limiting Pattern 참고 및 출처</description></item><item><title>Retry Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/retry-pattern.html</link><pubDate>Mon, 09 Dec 2024 11:31:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/retry-pattern.html</guid><description>Retry Pattern 참고 및 출처</description></item><item><title>다형성 (Polymorphism)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/polymorphism.html</link><pubDate>Mon, 02 Dec 2024 10:25:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/polymorphism.html</guid><description>다형성(Polymorphism)은 객체지향 프로그래밍의 핵심 특징 중 하나로, "여러 가지 형태를 가질 수 있는 능력"을 의미한다</description></item><item><title>상속 (Inheritance)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/inheritance.html</link><pubDate>Mon, 02 Dec 2024 10:10:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/inheritance.html</guid><description>상속은 객체지향 프로그래밍의 핵심 특징 중 하나로, 기존 클래스의 특성을 다른 클래스가 물려받아 재사용하고 확장할 수 있게 해주는 메커니즘</description></item><item><title>CQRS Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/cqrs-pattern.html</link><pubDate>Wed, 27 Nov 2024 10:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/cqrs-pattern.html</guid><description>CQRS Pattern 참고 및 출처</description></item><item><title>Saga Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/saga-pattern.html</link><pubDate>Wed, 27 Nov 2024 10:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/saga-pattern.html</guid><description>Saga Pattern 참고 및 출처</description></item><item><title>Database per Service Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/database-per-service-pattern.html</link><pubDate>Wed, 27 Nov 2024 10:05:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/database-per-service-pattern.html</guid><description>Database per Service Pattern 참고 및 출처</description></item><item><title>Multi-tenant Database Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/multi-tenant-database-pattern.html</link><pubDate>Wed, 27 Nov 2024 02:20:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/multi-tenant-database-pattern.html</guid><description>Multi-tenant Database Pattern 참고 및 출처</description></item><item><title>Polyglot Persistence Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/polyglot-persistence-pattern.html</link><pubDate>Wed, 27 Nov 2024 02:16:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/polyglot-persistence-pattern.html</guid><description>Polyglot Persistence Pattern 참고 및 출처</description></item><item><title>Event Sourcing</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/event-sourcing.html</link><pubDate>Wed, 27 Nov 2024 01:54:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/event-sourcing.html</guid><description>Event Sourcing 참고 및 출처</description></item><item><title>Shared Database per Service</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/shared-database-per-service.html</link><pubDate>Wed, 27 Nov 2024 01:54:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/shared-database-per-service.html</guid><description>Shared Database per Service 참고 및 출처</description></item><item><title>Serverless Architecture</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/serverless-architecture.html</link><pubDate>Tue, 26 Nov 2024 11:41:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/serverless-architecture.html</guid><description>Serverless Architecture 참고 및 출처</description></item><item><title>동시성 프로그래밍 (Concurrency Programming)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/concurrency-programming.html</link><pubDate>Mon, 25 Nov 2024 23:42:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/concurrency-programming.html</guid><description>여러 작업을 동시에 수행할 수 있도록 프로그램을 설계하는 기법</description></item><item><title>Anti-Corruption Layer Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/anti-corruption-layer-pattern.html</link><pubDate>Sun, 24 Nov 2024 10:07:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/anti-corruption-layer-pattern.html</guid><description>Anti-Corruption Layer Pattern 참고 및 출처</description></item><item><title>Backend for Frontend Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/backend-for-frontend-pattern.html</link><pubDate>Sun, 24 Nov 2024 10:07:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/backend-for-frontend-pattern.html</guid><description>Backend for Frontend Pattern 참고 및 출처</description></item><item><title>Intergration Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/intergration-patterns.html</link><pubDate>Sun, 24 Nov 2024 02:19:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/intergration-patterns.html</guid><description>Intergration Patterns 참고 및 출처</description></item><item><title>Client-Side UI Composition Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/client-side-ui-composition-pattern.html</link><pubDate>Sun, 24 Nov 2024 02:01:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/client-side-ui-composition-pattern.html</guid><description>Client-Side UI Composition Pattern 참고 및 출처</description></item><item><title>Aggregator Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/aggregator-pattern.html</link><pubDate>Sun, 24 Nov 2024 02:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/aggregator-pattern.html</guid><description>Aggregator Pattern 참고 및 출처</description></item><item><title>Gateway Routing Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/gateway-routing-pattern.html</link><pubDate>Sun, 24 Nov 2024 02:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/gateway-routing-pattern.html</guid><description>Gateway Routing Pattern 참고 및 출처</description></item><item><title>Proxy Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/proxy-pattern.html</link><pubDate>Sun, 24 Nov 2024 02:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/proxy-pattern.html</guid><description>Proxy Pattern 참고 및 출처</description></item><item><title>API Gateway Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/api-gateway-pattern.html</link><pubDate>Sun, 24 Nov 2024 01:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/api-gateway-pattern.html</guid><description>API Gateway Pattern 참고 및 출처</description></item><item><title>Event-Driven Architecture</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-driven-architecture.html</link><pubDate>Sat, 23 Nov 2024 11:38:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-driven-architecture.html</guid><description>Event-Driven Architecture (EDA)는 현대 소프트웨어 아키텍처 패턴 중 하나로, 시스템 내에서 발생하는 이벤트를 중심으로 동작하는 설계 방식이다.</description></item><item><title>Monolithic Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/monolithic-pattern.html</link><pubDate>Sat, 23 Nov 2024 11:14:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/monolithic-pattern.html</guid><description>애플리케이션의 모든 구성 요소가 단일 코드베이스와 단일 실행 단위로 통합된 형태</description></item><item><title>Software Architecture pattern and Software Design Pattern</title><link>https://buenhyden.github.io/til/2024/11/software-architecture-pattern-and-software-design-pattern.html</link><pubDate>Sat, 23 Nov 2024 08:19:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/til/2024/11/software-architecture-pattern-and-software-design-pattern.html</guid><description>Software Architecture Pattern과 Software Design Pattern은 소프트웨어 개발에서 반복적으로 발생하는 문제들에 대한 검증된 해결책을 제공하는 개념이다. 이 두 패턴은 서로 다른 수준의 추상화와 범위를 다루고 있다.</description></item><item><title>Domain-Driven Design</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/domain-driven-design.html</link><pubDate>Fri, 22 Nov 2024 08:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/domain-driven-design.html</guid><description>복잡한 소프트웨어 시스템을 개발하기 위한 접근 방식으로, 비즈니스 도메인을 중심으로 소프트웨어를 설계하고 개발하는 방법론</description></item><item><title>Space-Based Architecture</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/space-based-architecture.html</link><pubDate>Fri, 22 Nov 2024 08:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/space-based-architecture.html</guid><description>분산 컴퓨팅 시스템을 위한 소프트웨어 아키텍처 패턴으로, 복잡성을 증가시키지 않으면서 애플리케이션과 시스템의 확장성을 높이는 것을 목표로 한다.</description></item><item><title>Component-Based Architecture</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/component-based-architecture.html</link><pubDate>Thu, 21 Nov 2024 11:48:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/component-based-architecture.html</guid><description>Component-Based Architecture 참고 및 출처</description></item><item><title>Model-View-ViewModel-Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/model-view-viewmodel-pattern.html</link><pubDate>Thu, 21 Nov 2024 11:26:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/model-view-viewmodel-pattern.html</guid><description>Model-View-ViewModel-Pattern 참고 및 출처</description></item><item><title>Microkernel Architecture</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/microkernel-architecture.html</link><pubDate>Thu, 21 Nov 2024 08:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/microkernel-architecture.html</guid><description>시스템의 핵심 기능을 최소화하고 확장성과 유연성을 극대화하는 설계 방식</description></item><item><title>Hexagonal Architecture</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/hexagonal-architecture.html</link><pubDate>Thu, 21 Nov 2024 08:29:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/hexagonal-architecture.html</guid><description>애플리케이션의 핵심 비즈니스 로직을 외부 요소로부터 분리하여 유연하고 유지보수가 용이한 시스템을 구축하는 것을 목표로 한다</description></item><item><title>Model-View-Controller Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/model-view-controller-pattern.html</link><pubDate>Thu, 21 Nov 2024 08:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/model-view-controller-pattern.html</guid><description>애플리케이션을 세 가지 주요 구성 요소로 분리하여 개발의 유연성과 유지보수성을 향상시킨다.</description></item><item><title>Layered Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/layered-pattern.html</link><pubDate>Thu, 21 Nov 2024 08:26:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/layered-pattern.html</guid><description>애플리케이션의 구성 요소를 수평적 계층으로 조직화하여 각 계층이 특정 기능을 담당하도록 한다.</description></item><item><title>Publisher-Subscriber Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/publisher-subscriber-pattern.html</link><pubDate>Wed, 20 Nov 2024 11:40:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/publisher-subscriber-pattern.html</guid><description>이 패턴은 메시지를 보내는 발행자(Publisher)와 메시지를 받는 구독자(Subscriber) 사이의 느슨한 결합(Loose Coupling)을 제공하는 메시징 패턴으로, 발행자는 메시지를 특정 주제(Topic)나 채널로 발행하고, 해당 주제를 구독하는 모든 구독자들이 그 메시지를 받게 된다.</description></item><item><title>Event Sourcing Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-sourcing-pattern.html</link><pubDate>Wed, 20 Nov 2024 11:17:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-sourcing-pattern.html</guid><description>Event Sourcing Pattern은 데이터 처리와 저장에 대한 접근 방식을 정의하는 아키텍처 패턴으로, 시스템의 상태 변화를 일련의 이벤트로 기록하고 저장하는 방식을 채택한다.</description></item><item><title>CQRS 패턴 (Command Query Responsibility Segregation)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/cqrs.html</link><pubDate>Wed, 20 Nov 2024 08:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/cqrs.html</guid><description>애플리케이션의 명령(Command)과 쿼리(Query)의 책임을 분리하는 소프트웨어 아키텍처 패턴</description></item><item><title>Repository Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/repository-pattern.html</link><pubDate>Wed, 20 Nov 2024 08:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/repository-pattern.html</guid><description>데이터 접근 로직을 추상화하고 캡슐화하여 비즈니스 로직과 데이터 저장소 간의 의존성을 줄이는 소프트웨어 아키텍처 패턴</description></item><item><title>Blackboard Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/blackboard-pattern.html</link><pubDate>Wed, 20 Nov 2024 08:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/blackboard-pattern.html</guid><description>Blackboard 패턴은 복잡하고 비결정적인 문제를 해결하기 위한 소프트웨어 아키텍처 패턴으로 여러 전문화된 구성 요소(지식 소스 또는 에이전트)가 협력하여 문제를 해결하는 방식을 제공한다.</description></item><item><title>Master-Slave Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/master-slave-pattern.html</link><pubDate>Wed, 20 Nov 2024 08:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/master-slave-pattern.html</guid><description>하나의 마스터 컴포넌트와 여러 슬레이브 컴포넌트로 구성되어 있으며, 작업을 효율적으로 분배하고 관리하는 데 사용된다</description></item><item><title>Peer-to-Peer Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/peer-to-peer-pattern.html</link><pubDate>Wed, 20 Nov 2024 08:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/peer-to-peer-pattern.html</guid><description>분산 네트워크 아키텍처의 한 형태로, 각 노드(피어)가 클라이언트와 서버의 역할을 동시에 수행하는 구조</description></item><item><title>Pipe-Filter Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/pipe-filter-pattern.html</link><pubDate>Wed, 20 Nov 2024 08:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/pipe-filter-pattern.html</guid><description>데이터 스트림을 처리하는 시스템에서 사용되는 소프트웨어 아키텍처 패턴</description></item><item><title>Client-Server Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/client-server-pattern.html</link><pubDate>Wed, 20 Nov 2024 08:27:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/client-server-pattern.html</guid><description>서비스를 제공하는 서버와 서비스를 요청하는 클라이언트로 구성되는 소프트웨어 아키텍처 패턴</description></item><item><title>Ambassador Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/ambassador-pattern.html</link><pubDate>Tue, 19 Nov 2024 10:07:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/ambassador-pattern.html</guid><description>Ambassador Pattern은 클라이언트와 마이크로서비스 사이에 별도의 서비스(Ambassador)를 두어 통신을 관리하는 디자인 패턴이다.</description></item><item><title>Sidecar Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/sidecar-pattern.html</link><pubDate>Tue, 19 Nov 2024 10:07:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/sidecar-pattern.html</guid><description>Sidecar Pattern은 마치 오토바이의 사이드카처럼, 주 애플리케이션 컨테이너 옆에 보조 컨테이너를 배치하여 추가 기능을 제공한다.</description></item><item><title>Service Discovery Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-discovery-pattern.html</link><pubDate>Tue, 19 Nov 2024 10:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-discovery-pattern.html</guid><description>Service Discovery Pattern은 클라이언트가 서비스의 정확한 위치(IP 주소와 포트)를 알지 못해도 서비스를 호출할 수 있게 해주는 메커니즘</description></item><item><title>Service Mesh</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-mesh.html</link><pubDate>Tue, 19 Nov 2024 09:47:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-mesh.html</guid><description>마이크로서비스 아키텍처에서 서비스 간 통신을 관리하고 제어하기 위한 인프라 계층</description></item><item><title>Cross-Cutting Concern Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern.html</link><pubDate>Tue, 19 Nov 2024 02:18:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern.html</guid><description>Ambassador pattern, Service Discovery pattern, Service Mesh pattern, 그리고 Sidecar pattern은 모두 마이크로서비스 아키텍처에서 발생하는 cross-cutting concern(횡단 관심사)를 해결하기 위한 디자인 패턴들이다.</description></item><item><title>오버라이딩(Overriding)과 오버로딩(Overloading)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/overriding-and-overloading.html</link><pubDate>Tue, 12 Nov 2024 04:56:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/overriding-and-overloading.html</guid><description>오버라이딩(Overriding)과 오버로딩(Overloading)에 대해 알아보고 비교 분석해보자.</description></item><item><title>Command Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/command-pattern.html</link><pubDate>Sun, 13 Oct 2024 06:17:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/command-pattern.html</guid><description>요청을 객체의 형태로 캡슐화하여 나중에 사용할 수 있도록 하는 행동 디자인 패턴</description></item><item><title>State Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/state-pattern.html</link><pubDate>Sun, 13 Oct 2024 06:17:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/state-pattern.html</guid><description>객체의 내부 상태가 변경될 때 객체의 행동이 변경되도록 하는 행동 디자인 패턴</description></item><item><title>Strategy Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/strategy-pattern.html</link><pubDate>Sun, 13 Oct 2024 06:17:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/strategy-pattern.html</guid><description>알고리즘의 집합을 정의하고, 각각을 캡슐화하여 교환 가능하게 만드는 행동 디자인 패턴</description></item><item><title>Template Method Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/template-method-pattern.html</link><pubDate>Sun, 13 Oct 2024 06:17:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/template-method-pattern.html</guid><description>알고리즘의 구조를 정의하고 일부 단계를 서브클래스에서 구현할 수 있도록 하는 행동 디자인 패턴</description></item><item><title>Observer Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/observer-pattern.html</link><pubDate>Sun, 13 Oct 2024 06:16:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/observer-pattern.html</guid><description>객체의 상태 변화를 관찰하는 관찰자들, 즉 옵저버들의 목록을 객체에 등록하여 상태 변화가 있을 때마다 메서드 등을 통해 객체가 직접 목록의 각 옵저버에게 통지하도록 하는 디자인 패턴</description></item><item><title>Bridge Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/structural-design-patterns/bridge-pattern.html</link><pubDate>Sat, 12 Oct 2024 06:14:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/structural-design-patterns/bridge-pattern.html</guid><description>복잡한 시스템에서 추상화(abstraction)와 구현(implementation)을 분리하여 독립적으로 변형과 확장이 가능하도록 하는 구조 패턴</description></item><item><title>Decorator Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/structural-design-patterns/decorator-pattern.html</link><pubDate>Sat, 12 Oct 2024 06:14:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/structural-design-patterns/decorator-pattern.html</guid><description>객체에 동적으로 새로운 책임을 추가할 수 있게 해주는 구조적 디자인 패턴</description></item><item><title>Facade Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/structural-design-patterns/facade-pattern.html</link><pubDate>Sat, 12 Oct 2024 06:14:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/structural-design-patterns/facade-pattern.html</guid><description>복잡한 서브시스템에 대한 간단한 인터페이스를 제공하는 구조적 디자인 패턴</description></item><item><title>Proxy Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/structural-design-patterns/proxy-pattern.html</link><pubDate>Sat, 12 Oct 2024 06:14:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/structural-design-patterns/proxy-pattern.html</guid><description>객체에 대한 접근을 제어하기 위한 대리인(또는 대변인) 역할을 하는 객체를 제공하는 구조적 디자인 패턴</description></item><item><title>Adapter Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/structural-design-patterns/adapter-pattern.html</link><pubDate>Sat, 12 Oct 2024 06:13:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/structural-design-patterns/adapter-pattern.html</guid><description>호환되지 않는 인터페이스를 가진 객체들이 협력할 수 있도록 하는 구조적 디자인 패턴</description></item><item><title>Builder Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/creational-design-patterns/builder-pattern.html</link><pubDate>Sat, 12 Oct 2024 06:09:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/creational-design-patterns/builder-pattern.html</guid><description>복잡한 객체의 생성 과정과 표현 방법을 분리하여, 동일한 생성 절차에서 서로 다른 표현 결과를 만들 수 있게 하는 생성 패턴</description></item><item><title>Factory Method Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/creational-design-patterns/factory-method-pattern.html</link><pubDate>Fri, 11 Oct 2024 18:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/creational-design-patterns/factory-method-pattern.html</guid><description>객체 생성을 위한 인터페이스를 정의하지만, 실제 어떤 클래스의 인스턴스를 생성할지는 서브클래스가 결정하도록 하는 디자인 패턴</description></item><item><title>Singleton Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/creational-design-patterns/singleton-pattern.html</link><pubDate>Fri, 11 Oct 2024 18:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/creational-design-patterns/singleton-pattern.html</guid><description>클래스의 인스턴스가 프로그램 전체에서 오직 하나만 생성되도록 보장하는 소프트웨어 디자인 패턴.</description></item><item><title>Class and Instance</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/class-and-instance.html</link><pubDate>Fri, 11 Oct 2024 12:38:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/class-and-instance.html</guid><description>클래스란 객체를 생성하기 위한 템플릿 또는 청사진이고, 인스턴스는 클래스를 기반으로 생성된 실제 객체</description></item><item><title>Abstract Factory Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/creational-design-patterns/abstract-factory-pattern.html</link><pubDate>Fri, 11 Oct 2024 06:09:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/creational-design-patterns/abstract-factory-pattern.html</guid><description>구체적인 클래스를 지정하지 않고도 관련된 객체들의 집합을 생성할 수 있게 해주는 생성 패턴</description></item><item><title>Prototype Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/creational-design-patterns/prototype-pattern.html</link><pubDate>Fri, 11 Oct 2024 06:09:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/creational-design-patterns/prototype-pattern.html</guid><description>기존 객체를 복제하여 새로운 객체를 생성하는 생성 패턴</description></item><item><title>객체 지향 프로그래밍 (Object-Oriented Programming)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop.html</link><pubDate>Wed, 09 Oct 2024 09:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop.html</guid><description>현실 세계의 개체를 소프트웨어 객체로 모델링하는 프로그래밍 방식으로 데이터(속성)와 그 데이터를 처리하는 메서드(행동)를 하나의 단위인 객체로 묶는다.</description></item><item><title>구조적 프로그래밍 (Structured Programming)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/structured-programming.html</link><pubDate>Wed, 09 Oct 2024 09:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/structured-programming.html</guid><description>구조적 프로그래밍은 1960년대에 등장한 프로그래밍 패러다임으로, 프로그램을 순차, 선택, 반복의 세 가지 기본 제어 구조로 구성하여 코드의 흐름을 체계적으로 관리하는 방식</description></item><item><title>절차적 프로그래밍 (Procedural Programming)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/procedural-programming.html</link><pubDate>Wed, 09 Oct 2024 09:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/procedural-programming.html</guid><description>프로그램의 실행 흐름을 일련의 절차나 함수로 구성하는 프로그래밍 패러다임</description></item><item><title>제약 프로그래밍 (Constraint programming)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/constraint-programming.html</link><pubDate>Wed, 09 Oct 2024 09:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/constraint-programming.html</guid><description>문제를 변수와 이들 변수에 대한 제약 조건의 형태로 표현하는 프로그래밍 방식</description></item><item><title>논리 프로그래밍 (Logic Programming)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/logic-programming.html</link><pubDate>Wed, 09 Oct 2024 09:05:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/logic-programming.html</guid><description>형식 논리에 기반한 프로그래밍 패러다임</description></item><item><title>함수형 프로그래밍 (Functional Programming)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/functional-programming.html</link><pubDate>Wed, 09 Oct 2024 09:05:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/functional-programming.html</guid><description>프로그램을 순수 함수들의 조합으로 구성하는 방식</description></item><item><title>프로그램 설계 방법론</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%84%A4%EA%B3%84-%EB%B0%A9%EB%B2%95%EB%A1%A0.html</link><pubDate>Thu, 03 Oct 2024 05:52:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%84%A4%EA%B3%84-%EB%B0%A9%EB%B2%95%EB%A1%A0.html</guid><description>소프트웨어 개발 과정에서 시스템을 구조화하고 모듈화하는 체계적인 접근 방식</description></item><item><title>Software Design and Architecture</title><link>https://buenhyden.github.io/posts/software-design-and-architecture.html</link><pubDate>Tue, 01 Oct 2024 10:14:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture.html</guid><description>Software Architecture란 소프트웨어 시스템의 기본적인 구조와 조직을 정의하는 것이다.</description></item><item><title>추상화 (Abstraction)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/abstraction.html</link><pubDate>Mon, 30 Sep 2024 06:46:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/abstraction.html</guid><description>프로그래밍에서 핵심적인 개념으로, 복잡한 시스템이나 데이터를 단순화하여 필수적인 특징만을 강조하는 과정</description></item><item><title>Interface</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/interface.html</link><pubDate>Sat, 28 Sep 2024 09:49:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/interface.html</guid><description>소프트웨어나 애플리케이션에서 인터페이스(Interface)는 두 개의 시스템, 프로그램, 장치 또는 구성 요소 간의 상호 작용을 가능하게 하는 연결점 또는 접점을 의미한다.</description></item><item><title>KISS Principle</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/kiss-principle.html</link><pubDate>Tue, 24 Sep 2024 01:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/kiss-principle.html</guid><description>시스템이나 코드의 복잡성을 최소화하라.</description></item><item><title>YAGNI Principle</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/yagni-principle.html</link><pubDate>Tue, 24 Sep 2024 00:59:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/yagni-principle.html</guid><description>당장 필요하지 않은 기능을 미리 구현하지 마라.</description></item><item><title>DRY Principle</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/dry-principle.html</link><pubDate>Tue, 24 Sep 2024 00:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/dry-principle.html</guid><description>코드 중복을 피하고 로직을 한 곳에서 관리하도록 권장하는 원칙.</description></item><item><title>SOLID Principles</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/solid-principles.html</link><pubDate>Tue, 24 Sep 2024 00:57:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/solid-principles.html</guid><description>객체 지향 프로그래밍 및 설계의 다섯 가지 기본 원칙.</description></item><item><title>클린 코드 (Clean Code)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/clean-code.html</link><pubDate>Sun, 22 Sep 2024 05:44:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/clean-code.html</guid><description>프로그램의 동작을 보장하면서도 가독성이 뛰어나고 유지보수가 쉬운 코드</description></item></channel></rss>