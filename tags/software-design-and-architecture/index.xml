<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Software-Design-and-Architecture</title><link>https://buenhyden.github.io/tags/software-design-and-architecture/</link><description>Recent content in Software-Design-and-Architecture on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 16 Jan 2025 14:06:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/software-design-and-architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Programming Paradigm</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/</link><pubDate>Sat, 05 Oct 2024 04:38:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/</guid><description>
&lt;h2>Programming Paradigm&lt;/h2>&lt;p>프로그램을 설계하고 구현할 때 따르는 기본적인 접근 방식이나 철학을 의미한다.&lt;br>
프로그램 구조와 실행 방식을 결정하며, 문제 해결을 위한 사고방식에 큰 영향을 준다.&lt;br>
**명령형(Imperative)**과 **선언형(Declarative)**으로 구분되며, 각 패러다임 아래에 다양한 하위 범주가 존재한다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Software%20Design%20and%20Architecture/Programming%20Paradigms/Programming_paradigms.svg"
alt="Programming paradigms"
loading="lazy" />
&lt;/figure>&lt;/p>
&lt;h3>프로그래밍 패러다임의 주요 전환점&lt;/h3>&lt;ol>
&lt;li>상태 관리 방식의 진화&lt;/li>
&lt;li>명명되지 않은 상태(Unnamed state)에서 명명된 상태(Named state)로의 전환&lt;br>
초기의 순차적/동시성 프로그래밍에서 명시적 상태 관리로 발전&lt;br>
프로그램의 예측 가능성과 유지보수성 향상&lt;/li>
&lt;li>패러다임의 융합&lt;/li>
&lt;li>선언형과 명령형의 통합&lt;br>
순수한 선언형/명령형에서 두 패러다임의 장점을 결합하는 방향으로 발전&lt;br>
함수형 프로그래밍과 객체지향 프로그래밍의 특성을 혼합&lt;/li>
&lt;li>동시성 처리의 발전&lt;br>
단순 순차적 실행에서 복잡한 동시성 모델로 진화&lt;br>
스레드 기반에서 메시지 패싱, 반응형 프로그래밍으로 발전&lt;/li>
&lt;li>추상화 수준의 향상&lt;/li>
&lt;li>저수준에서 고수준으로의 전환&lt;br>
하드웨어 중심의 명령형에서 문제 도메인 중심의 추상화로 발전&lt;br>
선언적 프로그래밍을 통한 높은 수준의 문제 해결 방식 도입&lt;/li>
&lt;/ol>
&lt;h3>주요 분류 체계&lt;/h3>&lt;ul>
&lt;li>Unnamed state: 순차적 또는 동시성 상태를 다루는 방식&lt;/li>
&lt;li>Undeterministic state: 비결정적 상태를 다루는 방식&lt;/li>
&lt;li>Named state: 명명된 상태를 다루는 방식&lt;/li>
&lt;/ul>
&lt;h3>프로그래밍 패러다임의 분류&lt;/h3>&lt;h4>선언형 프로그래밍 (Declarative Programming)&lt;/h4>&lt;p>프로그램이 수행해야 할 결과나 목표를 명시하는 방식으로, &amp;ldquo;무엇을(What)&amp;rdquo; 해결할지에 초점을 맞춘다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 선언형 프로그래밍 방식&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">get_even_sum_declarative&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">numbers&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 실행 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;선언형 결과:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">get_even_sum_declarative&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># - 리스트 컴프리헨션과 sum() 함수를 사용하여 &amp;#34;무엇을&amp;#34; 할 것인지만 명시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># - 짝수를 필터링하고 합을 구하는 과정을 추상화&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># - 코드가 간결하고 의도가 명확&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h5>특징&lt;/h5>&lt;ul>
&lt;li>높은 수준의 추상화 제공&lt;/li>
&lt;li>제어 흐름을 명시적으로 기술하지 않음&lt;/li>
&lt;li>순수 함수와 불변 데이터 구조 사용&lt;/li>
&lt;/ul>
&lt;h5>&lt;strong>장점&lt;/strong>&lt;/h5>&lt;ul>
&lt;li>코드의 가독성과 유지보수성 향상&lt;/li>
&lt;li>자동화된 최적화 가능&lt;/li>
&lt;li>병렬 처리에 용이&lt;/li>
&lt;li>부작용 최소화&lt;/li>
&lt;/ul>
&lt;h5>단점&lt;/h5>&lt;ul>
&lt;li>익숙하지 않은 표기법&lt;/li>
&lt;li>세부적인 제어가 어려움&lt;/li>
&lt;li>디버깅이 복잡할 수 있음&lt;/li>
&lt;/ul>
&lt;h5>&lt;strong>하위 패러다임&lt;/strong>&lt;/h5>&lt;ol>
&lt;li>함수형 프로그래밍 (Functional Programming)&lt;br>
수학적 함수의 개념을 바탕으로, 상태 변경과 가변 데이터를 피하고 순수 함수를 통해 프로그램을 구성하는 패러다임
&lt;ul>
&lt;li>특징:&lt;/li>
&lt;li>불변성(Immutability): 한 번 생성된 데이터는 변경되지 않는다.&lt;/li>
&lt;li>순수 함수(Pure Functions): 동일한 입력에 대해 항상 동일한 출력을 반환한다.&lt;/li>
&lt;li>고차 함수(Higher-order Functions): 함수를 인자로 받거나 반환할 수 있다.&lt;/li>
&lt;li>부작용 없음(No Side Effects): 함수는 외부 상태를 변경하지 않는다.&lt;/li>
&lt;li>재귀 (Recursion)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 함수형 프로그래밍 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 순수 함수들의 조합
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="kr">double&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">isEven&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 함수형 체이닝
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">numbers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">double&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 모든 숫자를 2배로
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">isEven&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 짝수만 선택
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="nx">reduce&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">sum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">sum&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">num&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 합계 계산
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 함수형 프로그래밍 스타일&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">)))&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="2">
&lt;li>논리 프로그래밍 (Logic Programming)&lt;br>
논리적 규칙과 사실들을 정의하고, 이를 바탕으로 추론을 통해 문제를 해결하는 패러다임
&lt;ul>
&lt;li>특징:&lt;/li>
&lt;li>선언적 규칙 정의&lt;/li>
&lt;li>자동 추론 기능&lt;/li>
&lt;li>패턴 매칭&lt;/li>
&lt;li>백트래킹을 통한 해결책 탐색&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">pyDatalog&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">pyDatalog&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pyDatalog&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create_terms&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;parent, grandparent, X, Y, Z&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 사실 정의&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">+&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;John&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Mary&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">+&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Mary&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Tom&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 규칙 정의&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">grandparent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 쿼리 실행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">grandparent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;John&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Z&lt;/span>&lt;span class="p">))&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="3">
&lt;li>제약 프로그래밍 (Constraint programming)&lt;br>
문제를 제약 조건들의 집합으로 정의하고, 이를 만족하는 해결책을 찾는 패러다임
&lt;ul>
&lt;li>특징:&lt;/li>
&lt;li>제약 조건 기반 문제 해결&lt;/li>
&lt;li>선언적 문제 명세&lt;/li>
&lt;li>자동화된 해결책 탐색&lt;/li>
&lt;li>최적화 문제 해결에 적합&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># with python-constraint&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">constraint&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 스케줄링 문제 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">problem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Problem&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 변수와 도메인 정의 (작업과 시간대)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">tasks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Task1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Task2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Task3&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">problem&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">addVariables&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tasks&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 제약조건 추가: 모든 작업은 서로 다른 시간에 실행되어야 함&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">problem&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">addConstraint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AllDifferentConstraint&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 해결책 찾기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">solutions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">problem&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getSolutions&lt;/span>&lt;span class="p">()&lt;/span> &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># with OR-Tools&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">ortools.sat.python&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">cp_model&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">model&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cp_model&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CpModel&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">model&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">NewIntVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;x&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">model&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">NewIntVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;y&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">model&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">model&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>명령형 프로그래밍 (Imperative Programming)&lt;/h4>&lt;p>프로그램이 어떻게 작동해야 하는지를 순차적으로 설명하는 방식으로, &amp;ldquo;어떻게(How)&amp;rdquo; 해결할 것인지 상세하게 서술하는 방식.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 명령형 프로그래밍 방식&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">get_even_sum_imperative&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">num&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">total&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 실행 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;명령형 결과:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">get_even_sum_imperative&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># - 변수를 선언하고 반복문을 사용하여 &amp;#34;어떻게&amp;#34; 할 것인지를 상세히 서술&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># - 상태(total 변수)를 직접 변경&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># - 각 단계가 명시적으로 드러남&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h5>특징&lt;/h5>&lt;ul>
&lt;li>실행 절차를 중시&lt;/li>
&lt;li>상태 변경이 명시적&lt;/li>
&lt;li>프로그램의 흐름을 직접 제어&lt;/li>
&lt;li>하드웨어의 동작 방식과 유사&lt;/li>
&lt;/ul>
&lt;h5>장점&lt;/h5>&lt;ul>
&lt;li>실행 과정을 정확히 제어 가능&lt;/li>
&lt;li>성능 최적화가 용이&lt;/li>
&lt;li>직관적인 코드 작성&lt;/li>
&lt;li>하드웨어 자원을 효율적으로 활용&lt;/li>
&lt;/ul>
&lt;h5>단점&lt;/h5>&lt;ul>
&lt;li>코드가 길어지고 복잡해질 수 있음&lt;/li>
&lt;li>유지보수가 어려울 수 있음&lt;/li>
&lt;li>병렬 처리가 어려움&lt;/li>
&lt;li>부수 효과로 인한 버그 발생 가능성&lt;/li>
&lt;/ul>
&lt;h5>&lt;strong>하위 패러다임&lt;/strong>&lt;/h5>&lt;ol>
&lt;li>절차적 프로그래밍 (Procedural Programming)&lt;br>
프로그램을 절차적인 명령어들의 순차적 실행으로 구성하는 패러다임
&lt;ul>
&lt;li>특징:&lt;/li>
&lt;li>순차적 실행&lt;/li>
&lt;li>모듈화된 프로시저/함수&lt;/li>
&lt;li>전역 데이터 구조 사용&lt;/li>
&lt;li>명시적 제어 흐름&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 예제1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">calculate_student_grades&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">scores&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 절차적으로 평균 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">score&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">scores&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">total&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">score&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 평균 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">average&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">count&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 등급 결정&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">average&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">average&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 예제2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">calculate_sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">total&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">num&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">total&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">calculate_sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="2">
&lt;li>객체 지향 프로그래밍 (Object-Oriented Programming)&lt;br>
데이터와 해당 데이터를 처리하는 메소드를 객체라는 단위로 캡슐화하여 프로그램을 구성하는 패러다임
&lt;ul>
&lt;li>특징:&lt;/li>
&lt;li>캡슐화(Encapsulation)&lt;/li>
&lt;li>상속(Inheritance)&lt;/li>
&lt;li>다형성(Polymorphism)&lt;/li>
&lt;li>추상화(Abstraction)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 예제1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Student&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">scores&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">scores&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scores&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">calculate_average&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">scores&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">scores&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_grade&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">average&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">calculate_average&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">average&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">average&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;B&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 객체 생성 및 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">student&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Student&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">85&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">92&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">grade&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">student&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_grade&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 예제2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Car&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">brand&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">brand&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">brand&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">model&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">model&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">display_info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;This is a &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">brand&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">model&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">my_car&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Car&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Toyota&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Corolla&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">my_car&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">display_info&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="3">
&lt;li>구조적 프로그래밍 (Structured Programming)&lt;br>
프로그램을 구조화된 제어 흐름과 모듈로 구성하는 패러다임
&lt;ul>
&lt;li>특징:&lt;/li>
&lt;li>순차, 선택, 반복 구조 사용&lt;/li>
&lt;li>모듈화된 설계&lt;/li>
&lt;li>goto문 사용 제한&lt;/li>
&lt;li>코드의 가독성과 유지보수성 강조&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">process_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data_list&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">validate_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 데이터 검증 로직&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">float&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">transform_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 데이터 변환 로직&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">processed_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 구조적인 데이터 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">data_list&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">validate_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">transformed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">transform_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">processed_data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">transformed&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">processed_data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 함수 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">process_data&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">])&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">processData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">result&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">processData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">numbers&lt;/span>&lt;span class="p">));&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>프로그래밍 패러다임의 현대적 발전 방향&lt;/h3>&lt;ol>
&lt;li>
&lt;p>멀티 패러다임 지원&lt;/p>
&lt;ul>
&lt;li>대부분의 현대 프로그래밍 언어들은 여러 패러다임을 동시에 지원.&lt;/li>
&lt;li>Python, C++, PHP 등은 절차적, 객체지향적, 함수형 프로그래밍 모두 지원&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>동시성 처리 강화&lt;/p>
&lt;ul>
&lt;li>스레드 기반 프로그래밍&lt;/li>
&lt;li>이벤트 루프 방식&lt;/li>
&lt;li>메시지 패싱 모델&lt;/li>
&lt;li>액터 모델 도입&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>반응형 프로그래밍&lt;/p>
&lt;ul>
&lt;li>함수형 반응형 프로그래밍 (FRP)&lt;/li>
&lt;li>동기식/비동기식 프로그래밍의 통합&lt;/li>
&lt;li>이벤트 중심 프로그래밍&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>현대적 프로그래밍 패러다임의 특징을 보여주는 예시 코드&lt;/h4>&lt;p>예시 코드는 실시간 주식 가격을 생성하고, 이를 분석하여 거래 신호를 생성하는 간단한 트레이딩 시스템이다.&lt;/p>
&lt;h5>구현 내용&lt;/h5>&lt;ol>
&lt;li>
&lt;p>멀티 패러다임 지원:&lt;/p>
&lt;ul>
&lt;li>객체지향 프로그래밍: 클래스 기반 구조 설계&lt;/li>
&lt;li>함수형 프로그래밍: 불변 데이터 구조와 순수 함수 사용&lt;/li>
&lt;li>절차적 프로그래밍: 순차적인 실행 흐름&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>동시성 처리:&lt;/p>
&lt;ul>
&lt;li>Python: asyncio를 사용한 비동기 프로그래밍&lt;/li>
&lt;li>Node.js: 이벤트 루프와 Promise 기반 비동기 처리&lt;/li>
&lt;li>큐(Queue)를 사용한 메시지 패싱 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>반응형 프로그래밍:&lt;/p>
&lt;ul>
&lt;li>Observable 패턴을 통한 이벤트 스트림 처리&lt;/li>
&lt;li>구독자 패턴을 통한 데이터 흐름 관리&lt;/li>
&lt;li>실시간 데이터 처리와 반응형 업데이트&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>현대적 프로그래밍의 특징인 비동기 처리, 이벤트 기반 프로그래밍, 그리고 반응형 프로그래밍의 개념들을 실제로 적용하여 보여준다.&lt;br>
이러한 접근 방식은 실시간 데이터 처리, 확장성, 그리고 유지보수성을 향상시키는 현대적 소프트웨어 개발의 트렌드를 반영한다.&lt;/p>
&lt;h5>Python&lt;/h5>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">asyncio&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">dataclasses&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">dataclass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Callable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">datetime&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">datetime&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">asyncio&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Queue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">random&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">random&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">functools&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">partial&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 불변 데이터 클래스 정의 (함수형 프로그래밍 특징)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@dataclass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">frozen&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">StockPrice&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">symbol&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">price&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">float&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">timestamp&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">datetime&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 반응형 스트림을 구현하는 클래스 (반응형 프로그래밍)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Observable&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_observers&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Callable&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">observer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Callable&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_observers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">observer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">lambda&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_observers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">observer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 구독 취소 함수 반환&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">notify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">observer&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_observers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">observer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 주식 거래소 시뮬레이터 (동시성 처리)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">StockExchange&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">price_stream&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Observable&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_running&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">price_generator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">symbol&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;비동기적으로 주가 데이터를 생성하는 제너레이터&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">base_price&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">100.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_running&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">price&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">base_price&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mf">0.5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">stock_price&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StockPrice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">symbol&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">price&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stock_price&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 1초마다 새로운 가격 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">process_prices&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;큐에서 가격을 처리하고 구독자들에게 알림&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_running&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">price&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">price_stream&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">notify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">price&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">task_done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 주식 거래 전략 (객체지향 프로그래밍)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">TradingStrategy&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">symbol&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">symbol&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">symbol&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">prices&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">float&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">process_price&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">price&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">StockPrice&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;새로운 가격을 처리하고 거래 신호를 생성&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">price&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">symbol&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">symbol&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">prices&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">price&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">price&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">prices&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">prices&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">analyze_trend&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">analyze_trend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;간단한 이동평균 기반 거래 전략&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">avg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">prices&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">prices&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_price&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">prices&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">current_price&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">avg&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">1.02&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;매도 신호: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">symbol&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> @ &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">current_price&lt;/span>&lt;span class="si">:&lt;/span>&lt;span class="s2">.2f&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">current_price&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">avg&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.98&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;매수 신호: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">symbol&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> @ &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">current_price&lt;/span>&lt;span class="si">:&lt;/span>&lt;span class="s2">.2f&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 메인 실행 함수&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 거래소 초기화&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exchange&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">StockExchange&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 거래 전략 설정&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">strategy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TradingStrategy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;AAPL&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exchange&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">price_stream&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">strategy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process_price&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 비동기 태스크 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">tasks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exchange&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">price_generator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;AAPL&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">exchange&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process_prices&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 10초 동안 실행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">exchange&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_running&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 태스크 정리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">task&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">tasks&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cancel&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">gather&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">except&lt;/span> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">CancelledError&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">())&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h5>Node&lt;/h5>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">EventEmitter&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;events&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 불변 데이터 클래스 (함수형 프로그래밍 특징)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">StockPrice&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">symbol&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">price&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">timestamp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">freeze&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">symbol&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">symbol&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">price&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">price&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">timestamp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">timestamp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 반응형 스트림 구현 (반응형 프로그래밍)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">Observable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emitter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">EventEmitter&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">observer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emitter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">observer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 구독 취소 함수 반환
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emitter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">observer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">notify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emitter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;data&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 주식 거래소 시뮬레이터 (동시성 처리)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">StockExchange&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">priceStream&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Observable&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isRunning&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">priceGenerator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">symbol&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">basePrice&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">100.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isRunning&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">price&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">basePrice&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mf">0.5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">stockPrice&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">StockPrice&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">symbol&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">price&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stockPrice&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processing&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processPrices&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resolve&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">processPrices&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isRunning&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">price&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">shift&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">priceStream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">notify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">price&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resolve&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">setImmediate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 주식 거래 전략 (객체지향 프로그래밍)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">TradingStrategy&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">symbol&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">symbol&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">symbol&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prices&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">processPrice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">price&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">price&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">symbol&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">symbol&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">price&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">price&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">shift&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">analyzeTrend&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">analyzeTrend&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">avg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">reduce&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">currentPrice&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prices&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prices&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">currentPrice&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nx">avg&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">1.02&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`매도 신호: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">symbol&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> @ &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">currentPrice&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toFixed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">currentPrice&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">avg&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.98&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`매수 신호: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">symbol&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> @ &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">currentPrice&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toFixed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 메인 실행 함수
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">exchange&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">StockExchange&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">strategy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">TradingStrategy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;AAPL&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 반응형 스트림 구독
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">unsubscribe&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">exchange&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">priceStream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscribe&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">price&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">strategy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">processPrice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">price&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 가격 생성 시작
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">exchange&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">priceGenerator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;AAPL&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 10초 후 종료
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resolve&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10000&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">exchange&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isRunning&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">unsubscribe&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 프로그램 실행
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">main&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Software Architecture Principles</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/</link><pubDate>Mon, 13 Jan 2025 05:27:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/</guid><description>
&lt;h2>Software Architecture Principles&lt;/h2>&lt;p>Software Architecture Principles는 효율적이고 유지보수가 용이한 소프트웨어 시스템을 설계하기 위한 핵심 지침이다.&lt;br>
이러한 원칙들을 적절히 적용함으로써, 개발자들은 유지보수가 용이하고, 확장 가능하며, 재사용성이 높은 소프트웨어 시스템을 설계할 수 있다.&lt;/p>
&lt;h3>Maintainability (유지보수성)&lt;/h3>&lt;p>유지보수성은 소프트웨어를 쉽게 수정하고 업데이트할 수 있는 능력을 의미한다.&lt;/p>
&lt;ul>
&lt;li>코드의 가독성과 이해도를 높이는 것이 중요하다.&lt;/li>
&lt;li>모듈화와 추상화를 통해 시스템의 복잡성을 관리한다.&lt;/li>
&lt;li>테스트 용이성을 고려하여 설계해야 한다.&lt;br>
유지보수성 향상을 위한 주요 원칙들:&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>명확한 코드 구조&lt;/li>
&lt;li>적절한 문서화&lt;/li>
&lt;li>일관된 코딩 스타일&lt;/li>
&lt;li>단위 테스트 가능성&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Bad Example - 낮은 유지보수성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">process_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Good Example - 높은 유지보수성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">calculate_positive_numbers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">add_previous_values&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">process_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">calculate_positive_numbers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">add_previous_values&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Reusability (재사용성)&lt;/h3>&lt;p>재사용성은 코드나 컴포넌트를 다른 프로젝트나 시스템에서 재사용할 수 있는 정도를 나타낸다.&lt;/p>
&lt;ul>
&lt;li>추상화와 인터페이스를 활용하여 재사용 가능한 컴포넌트를 설계한다.&lt;/li>
&lt;li>DRY(Don&amp;rsquo;t Repeat Yourself) 원칙을 적용하여 코드 중복을 최소화한다.&lt;br>
재사용성을 높이기 위한 방법들:&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>일반화된 인터페이스 설계&lt;/li>
&lt;li>의존성 최소화&lt;/li>
&lt;li>설정 가능한 컴포넌트 생성&lt;/li>
&lt;li>명확한 문서화와 예제 제공&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Bad Example - 낮은 재사용성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">calculate_circle_area&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">radius&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mf">3.14&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">radius&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">radius&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Good Example - 높은 재사용성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">math&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Shape&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">calculate_area&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">NotImplementedError&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Circle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Shape&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">radius&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">radius&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">radius&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">calculate_area&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pi&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">radius&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mi">2&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Modularity (모듈성)&lt;/h3>&lt;p>모듈성은 시스템을 독립적이고 교체 가능한 모듈로 분할하는 원칙이다.&lt;/p>
&lt;ul>
&lt;li>각 모듈은 특정 기능이나 책임을 가진다.&lt;/li>
&lt;li>모듈 간 의존성을 최소화하여 유지보수와 확장을 용이하게 한다.&lt;/li>
&lt;li>병렬 개발을 가능하게 하여 개발 효율성을 높인다.&lt;br>
모듈성의 주요 특징:&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>독립적인 기능 단위&lt;/li>
&lt;li>명확한 인터페이스&lt;/li>
&lt;li>내부 구현 은닉&lt;/li>
&lt;li>쉬운 테스트와 디버깅&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 모듈성이 높은 설계 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">DatabaseConnection&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">disconnect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">DataProcessor&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">database&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">database&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">database&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">DataValidator&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">validate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 각 모듈을 조합하여 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">db&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DatabaseConnection&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">validator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DataValidator&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">processor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DataProcessor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Extensibility (확장성)&lt;/h3>&lt;p>확장성은 새로운 기능이나 변경사항을 쉽게 추가할 수 있는 능력을 의미한다.&lt;/p>
&lt;ul>
&lt;li>Open-Closed Principle(OCP)를 적용하여 확장에는 열려있고 수정에는 닫혀있는 설계를 지향한다.&lt;/li>
&lt;li>인터페이스와 추상 클래스를 활용하여 유연한 구조를 만든다.&lt;br>
확장성을 높이기 위한 전략:&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>인터페이스 기반 설계&lt;/li>
&lt;li>플러그인 아키텍처 활용&lt;/li>
&lt;li>설정 기반 기능 확장&lt;/li>
&lt;li>개방-폐쇄 원칙 준수&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 확장성이 높은 설계 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PaymentProcessor&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">payment_methods&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">register_payment_method&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">payment_methods&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">handler&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">process_payment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">method&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">method&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">payment_methods&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Unsupported payment method&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">payment_methods&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">method&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 새로운 결제 방식 쉽게 추가 가능&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">CreditCardPayment&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Processing $&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> via Credit Card&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PayPalPayment&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Processing $&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> via PayPal&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Coupling and Cohesion (결합도와 응집도)&lt;/h3>&lt;p>결합도는 모듈 간의 상호 의존성을 나타내며, 응집도는 모듈 내부 요소들의 관련성을 의미한다.&lt;/p>
&lt;ul>
&lt;li>Coupling (결합도)
&lt;ul>
&lt;li>낮은 결합도를 지향하여 모듈 간 독립성을 높인다.&lt;/li>
&lt;li>인터페이스를 통한 통신으로 결합도를 낮춘다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cohesion (응집도)
&lt;ul>
&lt;li>높은 응집도를 목표로 하여 모듈의 책임을 명확히 한다.&lt;/li>
&lt;li>단일 책임 원칙(SRP)을 적용하여 각 모듈이 하나의 기능에 집중하도록 한다.&lt;br>
결합도와 응집도 개선을 위한 방법:&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>의존성 주입 활용&lt;/li>
&lt;li>인터페이스 기반 통신&lt;/li>
&lt;li>단일 책임 원칙 준수&lt;/li>
&lt;li>적절한 추상화 수준 유지&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 높은 결합도, 낮은 응집도의 예&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">UserManager&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">database&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Database&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">logger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Logger&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">email_sender&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">EmailSender&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">create_user&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">user_data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">database&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user_data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;User created&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">email_sender&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_welcome_email&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;email&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 낮은 결합도, 높은 응집도의 예&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">UserRepository&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">database&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">database&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">database&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">user_data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">database&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user_data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">UserNotifier&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">email_service&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">email_service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">email_service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">send_welcome_message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">email&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">email_service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_welcome_email&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Software Design Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/</link><pubDate>Thu, 10 Oct 2024 07:57:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/</guid><description>
&lt;h2>Software Design Patterns&lt;/h2>&lt;p>자주 발생하는 문제들을 해결하기 위한 재사용 가능한 설계 템플릿.&lt;br>
코드의 재사용성, 유지 보수성, 확장성을 향상시키는 데 도움을 준다.&lt;br>
&lt;strong>생성 패턴&lt;/strong>, &lt;strong>구조 패턴&lt;/strong>, &lt;strong>행위 패턴&lt;/strong>의 세 가지로 분류된다.&lt;/p>
&lt;h3>생성 패턴 (Creatinal Patterns)&lt;/h3>&lt;p>객체 생성과 관련된 문제를 해결한다.&lt;br>
객체의 생성과정을 캡슐화하여 시스템의 유연성과 확장성을 높인다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>싱글톤 패턴 (Singleton Pattern)&lt;/strong>: 클래스의 인스턴스를 하나만 생성하고 전역적으로 접근할 수 있도록 보장한다..&lt;/li>
&lt;li>&lt;strong>팩토리 메서드 패턴 (Factory Method Pattern)&lt;/strong>: 객체 생성을 서브클래스에 위임하여 다양한 객체를 생성할 수 있도록 한다.&lt;/li>
&lt;li>&lt;strong>추상 팩토리 패턴 (Abstract Factory Pattern)&lt;/strong>: 관련 객체들의 집합을 생성하기 위한 인터페이스를 제공한다.&lt;/li>
&lt;li>&lt;strong>빌더 패턴 (Builder Pattern)&lt;/strong>: 복잡한 객체의 생성 과정을 단순화하고 단계적으로 구성한다.&lt;/li>
&lt;li>&lt;strong>프로토타입 패턴 (Prototype Pattern)&lt;/strong>: 기존 객체를 복제하여 새로운 객체를 생성한다.&lt;/li>
&lt;/ul>
&lt;h3>구조 패턴 (Structural Patterns)&lt;/h3>&lt;p>클래스나 객체를 조합하여 더 큰 구조를 만드는 방법을 다룬다.&lt;br>
객체 간의 관계를 효과적으로 구성하여 유지보수 및 재사용성을 향상시킨다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>어댑터 패턴 (Adapter Pattern)&lt;/strong>: 호환되지 않는 인터페이스를 가진 객체들이 협업할 수 있도록 변환기를 제공하는 패턴.&lt;/li>
&lt;li>&lt;strong>브리지 패턴 (Bridge Pattern)&lt;/strong>: 추상화와 구현을 분리하여 독립적으로 확장할 수 있게 한다.&lt;/li>
&lt;li>&lt;strong>데코레이터 패턴 (Decorator Pattern)&lt;/strong>: 객체에 동적으로 새로운 기능을 추가할 수 있도록 한다.&lt;/li>
&lt;li>&lt;strong>퍼사드 패턴 (Facade Pattern)&lt;/strong>: 복잡한 시스템에 대한 단순한 인터페이스를 제공한다.&lt;/li>
&lt;li>&lt;strong>프록시 패턴 (Proxy Pattern)&lt;/strong>: 다른 객체에 대한 대리자를 제공하여 접근 제어 등을 구현한다.&lt;/li>
&lt;/ul>
&lt;h3>행위 패턴 (Behavioral Patterns)&lt;/h3>&lt;p>객체나 클래스 사이의 알고리즘 및 책임 분배와 관련된 문제를 해결한다.&lt;br>
객체 간의 상호작용을 조율하여 시스템의 효율성과 유연성을 높인다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>옵저버 패턴 (Observer Pattern)&lt;/strong>: 한 객체의 상태 변화가 다른 객체들에게 자동으로 통지되도록 한다.&lt;/li>
&lt;li>&lt;strong>전략 패턴 (Strategy Pattern)&lt;/strong>: 알고리즘을 캡슐화하여 독립적으로 변경할 수 있게 한다.&lt;/li>
&lt;li>&lt;strong>커맨드 패턴 (Command Pattern)&lt;/strong>: 요청을 객체로 캡슐화하여 요청을 매개변수화하고 실행을 지연시킨다.&lt;/li>
&lt;li>&lt;strong>상태 패턴 (State Pattern)&lt;/strong>: 객체의 상태에 따라 행동이 변경되도록 한다.&lt;/li>
&lt;li>&lt;strong>템플릿 메서드 패턴 (Template Method Pattern)&lt;/strong>: 알고리즘의 구조를 정의하면서 하위 클래스가 각 단계의 구현을 제공한다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3>Reference&lt;/h3></description></item><item><title>MSA 패턴 유형별 비교</title><link>https://buenhyden.github.io/til/2025/01/msa-%ED%8C%A8%ED%84%B4-%EC%9C%A0%ED%98%95%EB%B3%84-%EB%B9%84%EA%B5%90/</link><pubDate>Sat, 04 Jan 2025 02:45:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/msa-%ED%8C%A8%ED%84%B4-%EC%9C%A0%ED%98%95%EB%B3%84-%EB%B9%84%EA%B5%90/</guid><description>
&lt;h2>MSA 패턴 유형별 비교&lt;/h2>&lt;p>아래 표는 MSA의 주요 패턴 유형들을 체계적으로 정리한 것이다.&lt;/p>
&lt;h3>기본 인프라 관련 패턴&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>패턴 유형&lt;/th>
&lt;th>목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>주요 패턴 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Cross-cutting Concern Patterns&lt;/td>
&lt;td>여러 서비스에 공통적으로 적용되는 기능을 분리하여 관리&lt;/td>
&lt;td>인프라 수준에서 공통 관심사 처리&lt;/td>
&lt;td>• 코드 중복 감소&lt;br>• 일관성 있는 처리&lt;br>• 유지보수 용이&lt;/td>
&lt;td>• 추가적인 인프라 필요&lt;br>• 복잡도 증가&lt;/td>
&lt;td>• Service Mesh&lt;br>• Sidecar&lt;br>• Ambassador&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Configuration Management Patterns&lt;/td>
&lt;td>서비스 구성 정보를 외부화하여 중앙 관리&lt;/td>
&lt;td>환경별 설정 분리 및 동적 구성 지원&lt;/td>
&lt;td>• 유연한 설정 변경&lt;br>• 환경별 구성 용이&lt;/td>
&lt;td>• 구성 정보 관리 복잡&lt;br>• 보안 고려 필요&lt;/td>
&lt;td>• External Configuration&lt;br>• Config Server&lt;br>• Environment Variables&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Service Registry Patterns&lt;/td>
&lt;td>서비스 위치 정보를 동적으로 관리&lt;/td>
&lt;td>서비스 등록 및 발견 자동화&lt;/td>
&lt;td>• 동적 확장 용이&lt;br>• 자동 장애 감지&lt;/td>
&lt;td>• 추가 인프라 필요&lt;br>• 의존성 증가&lt;/td>
&lt;td>• Service Discovery&lt;br>• Service Registry&lt;br>• Client-side Discovery&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>데이터 관련 패턴&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>패턴 유형&lt;/th>
&lt;th>목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>주요 패턴 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Database Patterns&lt;/td>
&lt;td>데이터 저장소 설계 및 관리 전략&lt;/td>
&lt;td>서비스별 독립적 데이터 관리&lt;/td>
&lt;td>• 데이터 독립성&lt;br>• 확장성 향상&lt;/td>
&lt;td>• 데이터 일관성 관리 어려움&lt;br>• 복잡도 증가&lt;/td>
&lt;td>• Database per Service&lt;br>• CQRS&lt;br>• Saga&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Data Management Patterns&lt;/td>
&lt;td>데이터 처리 및 동기화 전략&lt;/td>
&lt;td>분산 데이터 관리&lt;/td>
&lt;td>• 데이터 일관성 보장&lt;br>• 효율적 처리&lt;/td>
&lt;td>• 구현 복잡도&lt;br>• 성능 오버헤드&lt;/td>
&lt;td>• Event Sourcing&lt;br>• Materialized View&lt;br>• Shared Data&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>State Management Patterns&lt;/td>
&lt;td>서비스 상태 관리 전략&lt;/td>
&lt;td>상태 정보의 일관성 유지&lt;/td>
&lt;td>• 상태 추적 용이&lt;br>• 복구 용이&lt;/td>
&lt;td>• 구현 복잡도&lt;br>• 성능 영향&lt;/td>
&lt;td>• Stateless Service&lt;br>• Session State&lt;br>• Distributed Cache&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>서비스 구조 및 통신 관련 패턴&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>패턴 유형&lt;/th>
&lt;th>목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>주요 패턴 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Decomposition Patterns&lt;/td>
&lt;td>서비스 분할 전략&lt;/td>
&lt;td>비즈니스 기능 기반 분할&lt;/td>
&lt;td>• 독립적 개발/배포&lt;br>• 확장성 향상&lt;/td>
&lt;td>• 서비스 경계 설정 어려움&lt;br>• 통신 복잡도 증가&lt;/td>
&lt;td>• Business Capability&lt;br>• Domain-Driven&lt;br>• Strangler&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Communication Patterns&lt;/td>
&lt;td>서비스 간 통신 방식 정의&lt;/td>
&lt;td>동기/비동기 통신 지원&lt;/td>
&lt;td>• 유연한 통신&lt;br>• 느슨한 결합&lt;/td>
&lt;td>• 메시지 관리 복잡&lt;br>• 디버깅 어려움&lt;/td>
&lt;td>• Synchronous RPC&lt;br>• Event-Driven&lt;br>• Message Queue&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Integration Patterns&lt;/td>
&lt;td>서비스 통합 전략&lt;/td>
&lt;td>다양한 통합 방식 제공&lt;/td>
&lt;td>• 유연한 통합&lt;br>• 재사용성&lt;/td>
&lt;td>• 구현 복잡도&lt;br>• 관리 어려움&lt;/td>
&lt;td>• API Gateway&lt;br>• BFF&lt;br>• Aggregator&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>운영 및 품질 관련 패턴&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>패턴 유형&lt;/th>
&lt;th>목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>주요 패턴 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Deployment Patterns&lt;/td>
&lt;td>서비스 배포 전략&lt;/td>
&lt;td>무중단 배포 지원&lt;/td>
&lt;td>• 안정적 배포&lt;br>• 위험 감소&lt;/td>
&lt;td>• 인프라 비용&lt;br>• 복잡도 증가&lt;/td>
&lt;td>• Blue-Green&lt;br>• Canary&lt;br>• Rolling Update&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Testing Patterns&lt;/td>
&lt;td>서비스 테스트 전략&lt;/td>
&lt;td>다양한 수준의 테스트 지원&lt;/td>
&lt;td>• 품질 보장&lt;br>• 신뢰성 향상&lt;/td>
&lt;td>• 테스트 환경 구축 비용&lt;br>• 실행 시간 증가&lt;/td>
&lt;td>• Consumer-Driven&lt;br>• Contract Test&lt;br>• End-to-End Test&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Observability Patterns&lt;/td>
&lt;td>서비스 모니터링 전략&lt;/td>
&lt;td>시스템 상태 가시화&lt;/td>
&lt;td>• 문제 감지 용이&lt;br>• 분석 용이&lt;/td>
&lt;td>• 데이터 양 증가&lt;br>• 저장/분석 비용&lt;/td>
&lt;td>• Distributed Tracing&lt;br>• Log Aggregation&lt;br>• Health Check&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>성능 및 보안 관련 패턴&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>패턴 유형&lt;/th>
&lt;th>목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>주요 패턴 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Scalability Patterns&lt;/td>
&lt;td>서비스 확장성 확보&lt;/td>
&lt;td>동적 확장/축소 지원&lt;/td>
&lt;td>• 자원 효율성&lt;br>• 비용 최적화&lt;/td>
&lt;td>• 구현 복잡도&lt;br>• 관리 어려움&lt;/td>
&lt;td>• Horizontal Scaling&lt;br>• Sharding&lt;br>• Load Balancer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Performance Patterns&lt;/td>
&lt;td>성능 최적화 전략&lt;/td>
&lt;td>응답 시간 및 처리량 개선&lt;/td>
&lt;td>• 사용자 경험 향상&lt;br>• 자원 효율성&lt;/td>
&lt;td>• 구현 복잡도&lt;br>• 유지보수 어려움&lt;/td>
&lt;td>• Caching&lt;br>• Async Processing&lt;br>• Throttling&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Versioning Patterns&lt;/td>
&lt;td>API 버전 관리 전략&lt;/td>
&lt;td>하위 호환성 보장&lt;/td>
&lt;td>• 안정적 변경&lt;br>• 클라이언트 독립성&lt;/td>
&lt;td>• 관리 복잡도&lt;br>• 테스트 부담&lt;/td>
&lt;td>• URI Versioning&lt;br>• Header Versioning&lt;br>• Content Negotiation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Resilience Patterns&lt;/td>
&lt;td>장애 대응 전략&lt;/td>
&lt;td>시스템 복원력 향상&lt;/td>
&lt;td>• 안정성 향상&lt;br>• 가용성 보장&lt;/td>
&lt;td>• 구현 복잡도&lt;br>• 성능 영향&lt;/td>
&lt;td>• Circuit Breaker&lt;br>• Bulkhead&lt;br>• Retry&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Security Patterns&lt;/td>
&lt;td>보안 통제 전략&lt;/td>
&lt;td>다층적 보안 구현&lt;/td>
&lt;td>• 보안성 향상&lt;br>• 규정 준수&lt;/td>
&lt;td>• 구현 복잡도&lt;br>• 성능 영향&lt;/td>
&lt;td>• OAuth/OIDC&lt;br>• API Security&lt;br>• Zero Trust&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>패턴 선택 시 고려사항&lt;/h3>&lt;p>실제 구현 시에는 비즈니스 요구사항, 기술적 제약사항, 팀의 역량 등을 고려하여 적절한 패턴을 선택하고 조합해야 한다.&lt;br>
또한, 각 패턴은 독립적으로 사용될 수도 있지만, 대부분의 경우 여러 패턴을 함께 사용하여 시너지를 얻을 수 있다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>비즈니스 요구사항&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>시스템의 규모와 복잡도&lt;/li>
&lt;li>성능 요구사항&lt;/li>
&lt;li>보안 요구사항&lt;/li>
&lt;li>확장성 요구사항&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>기술적 제약사항&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>기존 시스템과의 통합&lt;/li>
&lt;li>팀의 기술력&lt;/li>
&lt;li>인프라 환경&lt;/li>
&lt;li>비용 제약&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>운영 환경&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>모니터링 요구사항&lt;/li>
&lt;li>배포 환경&lt;/li>
&lt;li>유지보수 용이성&lt;/li>
&lt;li>장애 대응 체계&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>성공적인 구현을 위한 제언&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>점진적 도입&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>핵심 패턴부터 순차적 적용&lt;/li>
&lt;li>파일럿 프로젝트로 검증&lt;/li>
&lt;li>팀 역량 강화 병행&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>모니터링 강화&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>핵심 메트릭 정의&lt;/li>
&lt;li>알림 체계 구축&lt;/li>
&lt;li>성능 지표 수집&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>지속적인 개선&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>피드백 루프 구축&lt;/li>
&lt;li>패턴 적용 효과 측정&lt;/li>
&lt;li>문제점 조기 발견 및 대응&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3>참고 및 출처&lt;/h3></description></item><item><title>Software Architecture Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/</link><pubDate>Sun, 10 Nov 2024 05:46:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/</guid><description>
&lt;h2>Software Architecture Pattern&lt;/h2>&lt;p>주어진 상황에서의 소프트웨어 아키텍쳐에서 일반적으로 발생하는 문제점들에 대한 일반화되고 재사용 가능한 솔루션이다. 아키텍쳐 패턴은 소프트웨어 디자인 패턴과 유사하지만 더 큰 범주에 속한다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Software%20Design%20and%20Architecture/Software%20Architecture%20Patterns/86fdda13-d57b-4d9c-b868-ac35d3c52569_1600x1582.webp"
alt="Software Architecture Patrterns"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://blog.bytebytego.com/p/software-architecture-patterns" target="_blank" rel="noopener">https://blog.bytebytego.com/p/software-architecture-patterns&lt;/a> _&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>패턴 이름&lt;/th>
&lt;th>핵심 개념&lt;/th>
&lt;th>주요 구성요소&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>활용 사례&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Monolithic Pattern&lt;/td>
&lt;td>단일 실행 파일로 구성된 전통적인 아키텍처&lt;/td>
&lt;td>- 단일 코드베이스&lt;br>- 단일 데이터베이스&lt;br>- 통합된 비즈니스 로직&lt;/td>
&lt;td>- 모든 기능이 하나의 프로세스로 실행&lt;br>- 강한 결합도&lt;br>- 단순한 배포 구조&lt;/td>
&lt;td>- 개발 단순성&lt;br>- 쉬운 테스트&lt;br>- 성능 최적화 용이&lt;/td>
&lt;td>- 확장성 제한&lt;br>- 유지보수 어려움&lt;br>- 기술 스택 제한&lt;/td>
&lt;td>- 작은 규모 애플리케이션&lt;br>- 프로토타입&lt;br>- 단순한 비즈니스 로직&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Layered Pattern&lt;/td>
&lt;td>관심사의 수직적 분리를 통한 계층화&lt;/td>
&lt;td>- 프레젠테이션 계층&lt;br>- 비즈니스 계층&lt;br>- 데이터 계층&lt;br>- 인프라 계층&lt;/td>
&lt;td>- 계층간 단방향 의존성&lt;br>- 관심사 분리&lt;br>- 모듈화&lt;/td>
&lt;td>- 유지보수성&lt;br>- 테스트 용이성&lt;br>- 역할 분리 명확&lt;/td>
&lt;td>- 성능 오버헤드&lt;br>- 불필요한 계층 통과&lt;br>- 유연성 제한&lt;/td>
&lt;td>- 엔터프라이즈 시스템&lt;br>- 웹 애플리케이션&lt;br>- 데이터 중심 애플리케이션&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Client-Server Pattern&lt;/td>
&lt;td>서비스 제공자와 소비자의 분리&lt;/td>
&lt;td>- 클라이언트&lt;br>- 서버&lt;br>- 통신 프로토콜&lt;/td>
&lt;td>- 중앙 집중식 리소스 관리&lt;br>- 역할 분리&lt;br>- 네트워크 기반 통신&lt;/td>
&lt;td>- 리소스 중앙화&lt;br>- 보안 통제 용이&lt;br>- 유지보수 편의&lt;/td>
&lt;td>- 서버 의존성&lt;br>- 네트워크 지연&lt;br>- 단일 실패점&lt;/td>
&lt;td>- 웹 서비스&lt;br>- 데이터베이스 시스템&lt;br>- 네트워크 애플리케이션&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Master-Slave Pattern&lt;/td>
&lt;td>작업 분배와 결과 통합&lt;/td>
&lt;td>- 마스터 노드&lt;br>- 슬레이브 노드&lt;br>- 작업 분배기&lt;/td>
&lt;td>- 병렬 처리&lt;br>- 중앙 제어&lt;br>- 결과 취합&lt;/td>
&lt;td>- 성능 향상&lt;br>- 확장성&lt;br>- 신뢰성&lt;/td>
&lt;td>- 마스터 병목&lt;br>- 복잡한 구현&lt;br>- 오버헤드&lt;/td>
&lt;td>- 데이터베이스 복제&lt;br>- 병렬 컴퓨팅&lt;br>- 분산 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Pipe-Filter Pattern&lt;/td>
&lt;td>데이터 스트림 처리의 단계적 변환&lt;/td>
&lt;td>- 파이프&lt;br>- 필터&lt;br>- 데이터 스트림&lt;/td>
&lt;td>- 순차적 처리&lt;br>- 단방향 데이터 흐름&lt;br>- 모듈식 구성&lt;/td>
&lt;td>- 재사용성&lt;br>- 유연한 조합&lt;br>- 병렬 처리 가능&lt;/td>
&lt;td>- 데이터 형식 변환&lt;br>- 처리 지연&lt;br>- 리소스 소비&lt;/td>
&lt;td>- ETL 프로세스&lt;br>- 텍스트 처리&lt;br>- 이미지 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Broker Pattern&lt;/td>
&lt;td>분산 서비스의 조정 및 통신&lt;/td>
&lt;td>- 브로커&lt;br>- 클라이언트&lt;br>- 서버&lt;br>- 브릿지&lt;/td>
&lt;td>- 서비스 중개&lt;br>- 위치 투명성&lt;br>- 상호운용성&lt;/td>
&lt;td>- 확장성&lt;br>- 유연성&lt;br>- 재사용성&lt;/td>
&lt;td>- 복잡성&lt;br>- 성능 오버헤드&lt;br>- 단일 실패점&lt;/td>
&lt;td>- 메시지 큐&lt;br>- 서비스 중개&lt;br>- 분산 시스템&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Peer-to-Peer Pattern&lt;/td>
&lt;td>분산된 피어 간의 직접 통신&lt;/td>
&lt;td>- 피어 노드&lt;br>- 리소스 공유&lt;br>- 검색 메커니즘&lt;/td>
&lt;td>- 탈중앙화&lt;br>- 자율성&lt;br>- 리소스 공유&lt;/td>
&lt;td>- 확장성&lt;br>- 견고성&lt;br>- 비용 효율성&lt;/td>
&lt;td>- 보안 관리&lt;br>- 일관성 유지&lt;br>- 신뢰성&lt;/td>
&lt;td>- 파일 공유&lt;br>- 블록체인&lt;br>- 협업 도구&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Event-Bus Pattern&lt;/td>
&lt;td>이벤트 기반 통신을 위한 중앙 버스&lt;/td>
&lt;td>- 이벤트 버스&lt;br>- 발행자&lt;br>- 구독자&lt;br>- 이벤트 핸들러&lt;/td>
&lt;td>- 느슨한 결합&lt;br>- 비동기 통신&lt;br>- 다대다 통신&lt;/td>
&lt;td>- 확장성&lt;br>- 유연성&lt;br>- 모듈성&lt;/td>
&lt;td>- 디버깅 어려움&lt;br>- 성능 병목&lt;br>- 복잡성&lt;/td>
&lt;td>- GUI 시스템&lt;br>- 메시징 시스템&lt;br>- 이벤트 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MVC Pattern&lt;/td>
&lt;td>사용자 인터페이스와 비즈니스 로직의 분리&lt;/td>
&lt;td>- 모델&lt;br>- 뷰&lt;br>- 컨트롤러&lt;/td>
&lt;td>- 관심사 분리&lt;br>- 데이터와 표현 분리&lt;br>- 재사용성&lt;/td>
&lt;td>- 유지보수성&lt;br>- 병렬 개발&lt;br>- 유연성&lt;/td>
&lt;td>- 복잡성&lt;br>- 오버헤드&lt;br>- 학습 곡선&lt;/td>
&lt;td>- 웹 애플리케이션&lt;br>- 데스크톱 앱&lt;br>- 모바일 앱&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Microservices Pattern&lt;/td>
&lt;td>독립적으로 배포 가능한 작은 서비스들의 집합&lt;/td>
&lt;td>- 서비스&lt;br>API 게이트웨이&lt;br>- 서비스 레지스트리&lt;/td>
&lt;td>- 서비스 독립성&lt;br>- 분산 데이터 관리&lt;br>- 자동화된 배포&lt;/td>
&lt;td>- 확장성&lt;br>- 기술 다양성&lt;br>- 장애 격리&lt;/td>
&lt;td>- 분산 복잡성&lt;br>- 운영 부담&lt;br>- 일관성 관리&lt;/td>
&lt;td>- 대규모 시스템&lt;br>- 클라우드 네이티브&lt;br>- 확장 가능 서비스&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Hexagonal Architecture&lt;/td>
&lt;td>포트와 어댑터를 통한 외부 시스템 격리&lt;/td>
&lt;td>- 도메인 코어&lt;br>- 포트&lt;br>- 어댑터&lt;/td>
&lt;td>- 의존성 역전&lt;br>- 도메인 중심&lt;br>- 테스트 용이성&lt;/td>
&lt;td>- 유지보수성&lt;br>- 테스트 용이&lt;br>- 유연성&lt;/td>
&lt;td>- 복잡성&lt;br>- 학습 곡선&lt;br>- 초기 개발 시간&lt;/td>
&lt;td>- 비즈니스 애플리케이션&lt;br>- 도메인 중심 설계&lt;br>- 레거시 현대화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Space-Based Architecture&lt;/td>
&lt;td>메모리 내 데이터 그리드 기반 확장&lt;/td>
&lt;td>- 처리 유닛&lt;br>- 가상 미들웨어&lt;br>- 데이터 그리드&lt;/td>
&lt;td>- 선형 확장성&lt;br>- 인메모리 처리&lt;br>- 고가용성&lt;/td>
&lt;td>- 성능&lt;br>- 확장성&lt;br>- 응답성&lt;/td>
&lt;td>- 복잡성&lt;br>- 비용&lt;br>- 데이터 일관성&lt;/td>
&lt;td>- 고성능 시스템&lt;br>- 실시간 처리&lt;br>- 대규모 트래픽&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Microkernel Architecture&lt;/td>
&lt;td>플러그인 기반의 확장 가능한 시스템&lt;/td>
&lt;td>- 코어 시스템&lt;br>- 플러그인&lt;br>- 확장 포인트&lt;/td>
&lt;td>- 모듈식 설계&lt;br>- 확장성&lt;br>- 유연성&lt;/td>
&lt;td>- 커스터마이징&lt;br>- 유지보수성&lt;br>- 안정성&lt;/td>
&lt;td>- 성능 오버헤드&lt;br>- 버전 관리&lt;br>- 통합 복잡성&lt;/td>
&lt;td>- IDE&lt;br>- 브라우저&lt;br>- 플러그인 기반 시스템&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CQRS&lt;/td>
&lt;td>읽기와 쓰기 모델의 분리&lt;/td>
&lt;td>- 명령 모델&lt;br>- 쿼리 모델&lt;br>- 동기화 메커니즘&lt;/td>
&lt;td>- 성능 최적화&lt;br>- 확장성&lt;br>- 복잡성 관리&lt;/td>
&lt;td>- 성능&lt;br>- 확장성&lt;br>- 유연성&lt;/td>
&lt;td>- 복잡성&lt;br>- 일관성 관리&lt;br>- 학습 곡선&lt;/td>
&lt;td>- 고성능 시스템&lt;br>- 복잡한 도메인&lt;br>- 이벤트 소싱&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Domain-Driven Design&lt;/td>
&lt;td>복잡한 도메인의 모델링과 설계&lt;/td>
&lt;td>- 도메인 모델&lt;br>- 바운디드 컨텍스트&lt;br>- 애그리게잇&lt;/td>
&lt;td>- 도메인 중심&lt;br>- 유비쿼터스 언어&lt;br>- 컨텍스트 경계&lt;/td>
&lt;td>- 비즈니스 정렬&lt;br>- 복잡성 관리&lt;br>- 명확한 경계&lt;/td>
&lt;td>- 학습 곡선&lt;br>- 초기 투자&lt;br>- 오버엔지니어링&lt;/td>
&lt;td>- 복잡한 비즈니스&lt;br>- 대규모 시스템&lt;br>- 도메인 중심 시스템&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Repository Pattern&lt;/td>
&lt;td>데이터 접근 계층의 추상화&lt;/td>
&lt;td>- 리포지토리&lt;br>- 엔티티&lt;br>- 데이터 매퍼&lt;/td>
&lt;td>- 데이터 접근 추상화&lt;br>- 영속성 로직 분리&lt;br>- 테스트 용이성&lt;/td>
&lt;td>- 유지보수성&lt;br>- 테스트 용이&lt;br>- 코드 재사용&lt;/td>
&lt;td>- 추가 계층&lt;br>- 복잡성&lt;br>- 성능 영향&lt;/td>
&lt;td>- 데이터 중심 앱&lt;br>ORM 시스템&lt;br>- 엔터프라이즈 앱&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>MSA Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/</link><pubDate>Tue, 19 Nov 2024 09:15:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/</guid><description>
&lt;h2>MSA&lt;/h2>&lt;p>현대적인 소프트웨어 개발 접근 방식으로, 복잡한 애플리케이션을 작고 독립적인 서비스로 분할하는 아키텍처 스타일.&lt;/p>
&lt;h3>주요 특징&lt;/h3>&lt;ol>
&lt;li>독립성: 각 마이크로서비스는 독립적으로 개발, 배포, 확장이 가능합니다.&lt;/li>
&lt;li>느슨한 결합: 서비스 간 의존성을 최소화하여 유연성을 높입니다.&lt;/li>
&lt;li>기술 다양성: 각 서비스에 최적화된 기술 스택을 선택할 수 있습니다.&lt;/li>
&lt;li>API 기반 통신: 서비스 간 통신은 표준화된 API를 통해 이루어집니다.&lt;/li>
&lt;li>분산 데이터 관리: 각 서비스는 자체 데이터베이스를 관리합니다.&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;/h3>&lt;ol>
&lt;li>확장성: 개별 서비스 단위로 독립적인 확장이 가능합니다.&lt;/li>
&lt;li>유연성: 빠른 개발 및 배포 주기를 지원합니다.&lt;/li>
&lt;li>장애 격리: 한 서비스의 문제가 전체 시스템에 영향을 미치지 않습니다.&lt;/li>
&lt;li>팀 생산성 향상: 작은 팀이 특정 서비스에 집중할 수 있습니다.&lt;/li>
&lt;/ol>
&lt;h3>단점&lt;/h3>&lt;ol>
&lt;li>복잡성 증가: 분산 시스템 관리의 복잡성이 높아집니다.&lt;/li>
&lt;li>운영 비용 증가: 더 많은 서비스를 관리해야 하므로 비용이 증가할 수 있습니다.&lt;/li>
&lt;li>데이터 일관성 유지의 어려움: 분산된 데이터베이스로 인해 일관성 유지가 어려울 수 있습니다.&lt;/li>
&lt;li>보안 복잡성: 여러 서비스에 걸친 보안 관리가 더 복잡해집니다.&lt;/li>
&lt;/ol>
&lt;p>MSA는 대규모, 복잡한 애플리케이션 개발에 적합하며, 빠른 변화와 확장이 필요한 비즈니스 환경에서 특히 유용하다.&lt;br>
현의 복잡성과 운영 비용을 고려해야 하며, 조직의 요구사항과 역량에 맞게 신중히 도입해야 한다.&lt;/p>
&lt;h3>서비스 관리&lt;/h3>&lt;p>MSA(Microservice Architecture)에서 독립적인 서비스는 다음과 같은 방식으로 관리된다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>서비스 레지스트리와 디스커버리:&lt;br>
서비스 레지스트리는 마이크로서비스의 메타데이터(위치, 호스트, 포트 등)를 중앙에서 관리한다.&lt;br>
서비스는 시작 시 레지스트리에 등록되고, 종료 시 등록 해제된다.&lt;br>
소비자는 서비스 레지스트리를 통해 사용 가능한 서비스와 위치를 찾을 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>분산 데이터 관리:&lt;br>
각 마이크로서비스는 자체 데이터베이스를 가지며, 다른 서비스의 데이터베이스에 직접 접근할 수 없다.&lt;br>
이를 통해 서비스 간 결합도를 낮추고 독립성을 유지한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>독립적인 개발 및 배포:&lt;br>
각 서비스는 독립적으로 개발, 배포, 확장될 수 있다.&lt;br>
이를 통해 빠른 개발 주기와 유연한 확장성을 제공한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>API 기반 통신:&lt;br>
서비스 간 통신은 잘 정의된 API를 통해 이루어진다.&lt;br>
이는 서비스의 독립성을 유지하면서도 필요한 상호작용을 가능하게 한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>중앙화된 모니터링 및 관찰성:&lt;br>
서비스 메트릭, 로깅, 추적 데이터는 중앙화된 도구를 통해 관리된다.&lt;br>
이를 통해 전체 시스템의 상태를 모니터링하고 문제를 신속하게 파악할 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>API 관리:&lt;br>
선택된 서비스들을 관리형 API로 노출할 때는 API 관리 기술을 활용한다.&lt;br>
이는 MSA에서 중앙화된 컴포넌트로 구현된다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>서비스 간 통신 관리&lt;/h3>&lt;p>MSA(Microservice Architecture)에서 서비스 간 통신은 다음과 같은 방식으로 관리된다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>동기식 통신&lt;/p>
&lt;ul>
&lt;li>RESTful API를 통한 HTTP/HTTPS 통신&lt;/li>
&lt;li>gRPC를 이용한 원격 프로시저 호출&lt;/li>
&lt;li>WebSocket을 활용한 실시간 양방향 통신&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>비동기식 통신&lt;/p>
&lt;ul>
&lt;li>메시징 큐(RabbitMQ, Apache Kafka, Amazon SQS 등)를 이용한 이벤트 기반 통신&lt;/li>
&lt;li>이벤트 스트리밍 플랫폼을 활용한 실시간 이벤트 처리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>서비스 메시&lt;/p>
&lt;ul>
&lt;li>서비스 디스커버리, 로드 밸런싱, 암호화, 모니터링 등의 기능 제공&lt;/li>
&lt;li>사이드카 프록시를 통한 서비스 간 통신 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>보안&lt;/p>
&lt;ul>
&lt;li>상호 TLS(mTLS)를 통한 인증 및 암호화&lt;/li>
&lt;li>OpenID Connect(OIDC)를 이용한 인증&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>트랜잭션 관리&lt;/p>
&lt;ul>
&lt;li>Saga 패턴을 활용한 분산 트랜잭션 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>모니터링 및 관찰성&lt;/p>
&lt;ul>
&lt;li>중앙화된 로깅 및 모니터링 시스템 구축&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>문서화 및 교육&lt;/p>
&lt;ul>
&lt;li>서비스 간 통신 프로토콜, 도구, 모범 사례에 대한 포괄적인 문서화 및 교육 제공&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>구현에 중요한 기술적 요소&lt;/h3>&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Software%20Design%20and%20Architecture/MSA%20Patterns/microservices-logical.png"
alt="Microservice Architecture"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://learn.microsoft.com/ko-kr/azure/architecture/guide/architecture-styles/microservices" target="_blank" rel="noopener">https://learn.microsoft.com/ko-kr/azure/architecture/guide/architecture-styles/microservices&lt;/a> _&lt;/p>
&lt;ol>
&lt;li>
&lt;p>API Gateway&lt;br>
모든 클라이언트 요청이 먼저 도착하는 관문.&lt;br>
역할:&lt;/p>
&lt;ul>
&lt;li>인증/인가&lt;/li>
&lt;li>요청 라우팅&lt;/li>
&lt;li>로드 밸런싱&lt;/li>
&lt;li>응답 캐싱&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Service Discovery&lt;br>
서비스들의 위치를 자동으로 찾아주는 기능.&lt;br>
Netflix Eureka나 Consul과 같은 도구들이 이 역할을 수행.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>서비스 간 통신&lt;br>
마이크로서비스들은 다음과 같은 방식으로 통신한다.&lt;br>
- 동기 통신: REST API, gRPC&lt;br>
- 비동기 통신: Kafka, RabbitMQ&lt;br>
예를 들어, 주문 서비스가 결제 서비스에 결제 요청을 보내고, 결제가 완료되면 배송 서비스에 알림을 보내는 식.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>데이터 관리&lt;br>
각 서비스는 자신만의 데이터베이스를 가진다.&lt;br>
이를 데이터베이스 per 서비스 패턴이라고 한다.&lt;br>
예를 들어:&lt;/p>
&lt;ul>
&lt;li>상품 서비스: MySQL&lt;/li>
&lt;li>검색 서비스: Elasticsearch&lt;/li>
&lt;li>장바구니 서비스: Redis&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>장애 처리&lt;br>
MSA에서는 장애가 전파되지 않도록 하는 것이 중요하다.&lt;br>
이를 위해 다음과 같은 패턴들을 사용한다:&lt;/p>
&lt;ul>
&lt;li>Circuit Breaker: 서비스 장애 시 빠른 실패 처리&lt;/li>
&lt;li>Fallback: 대체 로직 실행&lt;/li>
&lt;li>Bulkhead: 자원 격리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>데이터 일관성을 유지하는 주요 방법&lt;/h3>&lt;p>MSA(Microservice Architecture)에서 데이터 일관성을 유지하는 주요 방법은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>최종 일관성 (Eventual Consistency)&lt;/p>
&lt;ul>
&lt;li>일시적인 불일치를 허용하되, 시간이 지나면 모든 서비스의 데이터가 일관성을 갖도록 합니다.&lt;/li>
&lt;li>즉시 일관성이 필요하지 않은 경우에 적합합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Saga 패턴&lt;/p>
&lt;ul>
&lt;li>분산 트랜잭션을 관리하기 위한 패턴입니다.&lt;/li>
&lt;li>각 서비스가 로컬 트랜잭션을 수행하고, 실패 시 보상 트랜잭션으로 변경사항을 취소한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>CQRS (Command Query Responsibility Segregation)&lt;/p>
&lt;ul>
&lt;li>읽기 작업과 쓰기 작업을 분리하여 처리합니다.&lt;/li>
&lt;li>이벤트를 통해 변경사항을 전파하여 일관성을 유지합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>데이터베이스 per 서비스&lt;/p>
&lt;ul>
&lt;li>각 서비스가 자체 데이터베이스를 관리합니다.&lt;/li>
&lt;li>서비스 간 결합도를 낮추고 독립성을 높입니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>이벤트 소싱 (Event Sourcing)&lt;/p>
&lt;ul>
&lt;li>상태 변경을 이벤트로 저장하고 이를 기반으로 현재 상태를 재구성합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>변경 데이터 캡처 (Change Data Capture, CDC)&lt;/p>
&lt;ul>
&lt;li>데이터 변경을 감지하고 이벤트로 발행하여 다른 서비스에 전파합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>분산 캐싱&lt;/p>
&lt;ul>
&lt;li>자주 사용되는 데이터를 여러 위치에 캐싱하여 일관성을 유지합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>보상 트랜잭션&lt;/p>
&lt;ul>
&lt;li>실패한 트랜잭션의 영향을 취소하기 위한 역방향 트랜잭션을 수행합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>MSA Pattern&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>패턴 이름&lt;/th>
&lt;th>목적&lt;/th>
&lt;th>주요 구성요소&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>적용 시나리오&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>API Gateway 패턴&lt;/td>
&lt;td>클라이언트와 마이크로서비스 간의 중앙 집중식 진입점 제공&lt;/td>
&lt;td>- API Gateway 서버&lt;br>- 라우팅 규칙&lt;br>- 프록시 서비스&lt;br>- 인증/인가 필터&lt;/td>
&lt;td>- 단일 진입점으로 보안 강화&lt;br>- 클라이언트 요청 통합 처리&lt;br>- 횡단 관심사 중앙화&lt;/td>
&lt;td>- 단일 실패점 가능성&lt;br>- 추가적인 네트워크 홉&lt;br>- 관리 복잡도 증가&lt;/td>
&lt;td>- 다수의 클라이언트 지원&lt;br>API 버전 관리 필요&lt;br>- 인증/인가 통합 필요&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Event-Driven 패턴&lt;/td>
&lt;td>서비스 간 느슨한 결합을 위한 이벤트 기반 통신&lt;/td>
&lt;td>- 이벤트 브로커&lt;br>- 이벤트 생산자&lt;br>- 이벤트 소비자&lt;br>- 이벤트 채널&lt;/td>
&lt;td>- 느슨한 결합&lt;br>- 확장성 향상&lt;br>- 비동기 처리&lt;/td>
&lt;td>- 디버깅 어려움&lt;br>- 일관성 보장 어려움&lt;br>- 복잡한 이벤트 추적&lt;/td>
&lt;td>- 실시간 데이터 처리&lt;br>- 비동기 워크플로우&lt;br>- 확장 가능한 시스템&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Database per Service&lt;/td>
&lt;td>각 서비스별 독립적인 데이터베이스 운영&lt;/td>
&lt;td>- 독립 데이터베이스&lt;br>- 서비스별 스키마&lt;br>- 데이터 동기화 메커니즘&lt;/td>
&lt;td>- 데이터 독립성&lt;br>- 스키마 변경 용이&lt;br>- 확장성 향상&lt;/td>
&lt;td>- 데이터 중복&lt;br>- 일관성 관리 어려움&lt;br>- 통합 쿼리 복잡&lt;/td>
&lt;td>- 서비스 독립성 중요&lt;br>- 다른 스키마 필요&lt;br>- 독립 확장 필요&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Circuit Breaker&lt;/td>
&lt;td>장애 전파 방지를 위한 자동 차단 메커니즘&lt;/td>
&lt;td>- 상태 모니터&lt;br>- 임계값 설정&lt;br>- 폴백 메커니즘&lt;br>- 재시도 로직&lt;/td>
&lt;td>- 장애 전파 방지&lt;br>- 시스템 복원력 향상&lt;br>- 자동 복구&lt;/td>
&lt;td>- 설정 복잡&lt;br>- 임계값 조정 어려움&lt;br>- 오버헤드 발생&lt;/td>
&lt;td>- 외부 서비스 호출&lt;br>- 네트워크 불안정&lt;br>- 종속성 관리&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Saga&lt;/td>
&lt;td>분산 트랜잭션 관리를 위한 보상 트랜잭션 패턴&lt;/td>
&lt;td>- 사가 오케스트레이터&lt;br>- 보상 트랜잭션&lt;br>- 상태 관리자&lt;/td>
&lt;td>- 데이터 일관성&lt;br>- 롤백 가능&lt;br>- 장애 복구&lt;/td>
&lt;td>- 구현 복잡&lt;br>- 디버깅 어려움&lt;br>- 성능 오버헤드&lt;/td>
&lt;td>- 분산 트랜잭션&lt;br>- 장기 실행 프로세스&lt;br>- 다중 서비스 조정&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CQRS&lt;/td>
&lt;td>읽기와 쓰기 작업의 분리&lt;/td>
&lt;td>- 명령 모델&lt;br>- 쿼리 모델&lt;br>- 동기화 메커니즘&lt;br>- 이벤트 저장소&lt;/td>
&lt;td>- 성능 최적화&lt;br>- 확장성 향상&lt;br>- 모델 분리&lt;/td>
&lt;td>- 복잡도 증가&lt;br>- 일관성 지연&lt;br>- 학습 곡선&lt;/td>
&lt;td>- 복잡한 도메인&lt;br>- 높은 읽기 부하&lt;br>- 이벤트 소싱 필요&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Service Discovery&lt;/td>
&lt;td>동적 서비스 위치 탐색 및 로드밸런싱&lt;/td>
&lt;td>- 서비스 레지스트리&lt;br>- 헬스체크&lt;br>- 로드밸런서&lt;/td>
&lt;td>- 동적 확장&lt;br>- 자동 장애 복구&lt;br>- 로드밸런싱&lt;/td>
&lt;td>- 추가 인프라 필요&lt;br>- 설정 복잡&lt;br>- 지연 가능성&lt;/td>
&lt;td>- 동적 환경&lt;br>- 클라우드 배포&lt;br>- 자동 확장/축소&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bulkhead&lt;/td>
&lt;td>서비스 격리를 통한 장애 전파 방지&lt;/td>
&lt;td>- 격리 컴파트먼트&lt;br>- 자원 할당&lt;br>- 모니터링&lt;/td>
&lt;td>- 장애 격리&lt;br>- 리소스 보호&lt;br>- 안정성 향상&lt;/td>
&lt;td>- 리소스 낭비&lt;br>- 설정 복잡&lt;br>- 비용 증가&lt;/td>
&lt;td>- 중요 서비스 보호&lt;br>- 리소스 분리&lt;br>- 멀티테넌시&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Backend for Frontend&lt;/td>
&lt;td>클라이언트별 최적화된 API 제공&lt;/td>
&lt;td>- 클라이언트별 API&lt;br>- 데이터 변환&lt;br>- 캐싱 레이어&lt;/td>
&lt;td>- 클라이언트 최적화&lt;br>- 성능 향상&lt;br>- 유지보수성&lt;/td>
&lt;td>- 코드 중복&lt;br>- 관리 복잡&lt;br>- 개발 부담&lt;/td>
&lt;td>- 다양한 클라이언트&lt;br>- 다른 데이터 요구사항&lt;br>UI 최적화 필요&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Strangler Fig&lt;/td>
&lt;td>점진적인 시스템 마이그레이션&lt;/td>
&lt;td>- 프록시 레이어&lt;br>- 변환 컴포넌트&lt;br>- 라우팅 규칙&lt;/td>
&lt;td>- 점진적 전환&lt;br>- 리스크 감소&lt;br>- 검증 용이&lt;/td>
&lt;td>- 장기 관리 필요&lt;br>- 복잡도 증가&lt;br>- 성능 영향&lt;/td>
&lt;td>- 레거시 마이그레이션&lt;br>- 점진적 현대화&lt;br>- 위험 완화&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Sidecar&lt;/td>
&lt;td>서비스에 부가 기능 제공&lt;/td>
&lt;td>- 사이드카 컨테이너&lt;br>- 프록시&lt;br>- 모니터링 에이전트&lt;/td>
&lt;td>- 재사용성&lt;br>- 독립적 업데이트&lt;br>- 언어 중립적&lt;/td>
&lt;td>- 리소스 오버헤드&lt;br>- 복잡도 증가&lt;br>- 네트워크 지연&lt;/td>
&lt;td>- 크로스커팅 관심사&lt;br>- 레거시 확장&lt;br>- 공통 기능 추가&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ambassador&lt;/td>
&lt;td>서비스 프록시 및 네트워크 추상화&lt;/td>
&lt;td>- 프록시 서버&lt;br>- 프로토콜 변환&lt;br>- 로깅/모니터링&lt;/td>
&lt;td>- 프로토콜 추상화&lt;br>- 모니터링 용이&lt;br>- 보안 강화&lt;/td>
&lt;td>- 추가 홉&lt;br>- 복잡도 증가&lt;br>- 지연 가능성&lt;/td>
&lt;td>- 레거시 통합&lt;br>- 프로토콜 변환&lt;br>- 보안 강화&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Anti-corruption Layer&lt;/td>
&lt;td>레거시 시스템과의 통합 인터페이스&lt;/td>
&lt;td>- 변환 레이어&lt;br>- 어댑터&lt;br>- 캐싱&lt;/td>
&lt;td>- 도메인 격리&lt;br>- 변환 단순화&lt;br>- 유지보수성&lt;/td>
&lt;td>- 추가 레이어&lt;br>- 성능 영향&lt;br>- 복잡도 증가&lt;/td>
&lt;td>- 레거시 통합&lt;br>- 도메인 변환&lt;br>- 점진적 현대화&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>재시도(Retry) 패턴&lt;/td>
&lt;td>일시적 장애 복구를 위한 자동 재시도&lt;/td>
&lt;td>- 재시도 정책&lt;br>- 백오프 전략&lt;br>- 실패 감지기&lt;/td>
&lt;td>- 복원력 향상&lt;br>- 자동 복구&lt;br>- 안정성 향상&lt;/td>
&lt;td>- 리소스 소비&lt;br>- 지연 증가&lt;br>- 상태 관리 복잡&lt;/td>
&lt;td>- 네트워크 불안정&lt;br>- 일시적 장애&lt;br>- 외부 서비스 호출&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 패턴들은 특정 문제를 해결하기 위해 설계되었으며, 실제 구현 시에는 여러 패턴을 조합하여 사용하는 것이 일반적입니다.&lt;br>
예를 들어:&lt;/p>
&lt;ul>
&lt;li>Strangler Fig 패턴과 Anti-Corruption Layer 패턴을 함께 사용하여 레거시 시스템을 안전하게 마이그레이션할 수 있다.&lt;/li>
&lt;li>Service Registry &amp;amp; Discovery 패턴과 Sidecar 패턴을 조합하여 동적이고 확장 가능한 서비스 메시를 구축할 수 있다.&lt;/li>
&lt;li>Backend for Frontend 패턴과 Ambassador 패턴을 통해 클라이언트별로 최적화된 안전한 API를 제공할 수 있다.&lt;/li>
&lt;li>API Gateway 패턴과 Circuit Breaker 패턴을 함께 사용하여 시스템의 안정성을 높일 수 있다.&lt;/li>
&lt;li>Event-Driven 패턴과 Saga 패턴을 조합하여 복잡한 비즈니스 프로세스를 처리할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3>패턴 선택 시 고려해야 할 핵심 사항들&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시스템 요구사항&lt;/p>
&lt;ul>
&lt;li>확장성 필요성&lt;/li>
&lt;li>성능 요구사항&lt;/li>
&lt;li>보안 요구사항&lt;/li>
&lt;li>유지보수성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>조직적 맥락&lt;/p>
&lt;ul>
&lt;li>팀의 기술적 역량&lt;/li>
&lt;li>개발 및 운영 리소스&lt;/li>
&lt;li>비즈니스 우선순위&lt;/li>
&lt;li>시간 제약&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>기술적 제약&lt;/p>
&lt;ul>
&lt;li>기존 인프라스트럭처&lt;/li>
&lt;li>통합해야 할 시스템들&lt;/li>
&lt;li>사용 가능한 도구와 플랫폼&lt;/li>
&lt;li>비용 제약&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Event-Driven Architecture vs Event Sourcing Pattern vs Publisher-Subscriber Pattern vs Producer-Consumer Pattern</title><link>https://buenhyden.github.io/til/2025/01/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</link><pubDate>Thu, 16 Jan 2025 03:37:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</guid><description>
&lt;h2>Event-Driven Architecture Vs Event Sourcing Pattern Vs Publisher-Subscriber Pattern Vs Producer-Consumer Pattern&lt;/h2>&lt;p>Event Sourcing Pattern, Publisher-Subscriber Pattern, Event-Driven Architecture, Producer-Consumer Pattern은 모두 소프트웨어 아키텍처에서 중요한 역할을 하는 패턴들이며, 서로 밀접한 관계를 가지고 있다.&lt;br>
이들의 관계를 다음과 같이 설명할 수 있다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Event-Driven Architecture (EDA)와 다른 패턴들의 관계:&lt;/p>
&lt;ul>
&lt;li>EDA는 이벤트 중심의 시스템 설계를 위한 상위 수준의 아키텍처 스타일.&lt;/li>
&lt;li>Publisher-Subscriber Pattern과 Producer-Consumer Pattern은 EDA를 구현하는 데 사용되는 구체적인 통신 모델이다.&lt;/li>
&lt;li>Event Sourcing Pattern은 EDA의 한 구현 방식으로 볼 수 있으며, 이벤트를 저장하고 관리하는 방법을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Publisher-Subscriber Pattern과 Producer-Consumer Pattern의 관계:&lt;/p>
&lt;ul>
&lt;li>두 패턴 모두 비동기 메시징을 위한 디자인 패턴이지만, 약간의 차이가 있다.&lt;/li>
&lt;li>Publisher-Subscriber Pattern은 메시지를 특정 주제(topic)에 발행하고, 해당 주제를 구독하는 모든 구독자에게 메시지를 전달한다.&lt;/li>
&lt;li>Producer-Consumer Pattern은 일반적으로 메시지를 큐에 넣고, 하나의 소비자가 메시지를 처리한다.&lt;/li>
&lt;li>Publisher-Subscriber Pattern은 Producer-Consumer Pattern의 확장된 형태로 볼 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Event Sourcing Pattern과 다른 패턴들의 관계:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Event Sourcing은 시스템의 상태 변화를 이벤트로 저장하는 방식.&lt;/li>
&lt;li>이 패턴은 Publisher-Subscriber 또는 Producer-Consumer 패턴을 활용하여 이벤트를 발행하고 구독할 수 있다.&lt;/li>
&lt;li>Event Sourcing은 EDA의 핵심 구성 요소 중 하나로, 이벤트의 저장과 재생을 통해 시스템의 상태를 관리한다.&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>통합적 관점:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>EDA는 이러한 패턴들을 포괄하는 상위 개념으로, 시스템 전체의 이벤트 중심 설계를 지향한다.&lt;/li>
&lt;li>Publisher-Subscriber와 Producer-Consumer 패턴은 EDA 내에서 이벤트의 생성과 소비를 관리하는 메커니즘을 제공한다.&lt;/li>
&lt;li>Event Sourcing은 이벤트의 지속성과 시스템 상태 관리를 담당하며, EDA의 이벤트 처리 방식을 보완한다.&lt;/li>
&lt;/ul>
&lt;p>이러한 패턴들은 서로 보완적인 관계를 가지며, 복잡한 분산 시스템에서 함께 사용되어 시너지 효과를 낼 수 있다.&lt;br>
예를 들어, Event Sourcing을 통해 저장된 이벤트는 Publisher-Subscriber 패턴을 통해 다른 서비스에 전파될 수 있으며, 이는 전체적인 Event-Driven Architecture의 일부로 작동할 수 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Event-Driven Architecture&lt;/th>
&lt;th>Event Sourcing Pattern&lt;/th>
&lt;th>Publisher-Subscriber Pattern&lt;/th>
&lt;th>Producer-Consumer Pattern&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>주요 목적&lt;/td>
&lt;td>이벤트 중심의 시스템 설계&lt;/td>
&lt;td>모든 상태 변경을 이벤트로 저장하고 재구성&lt;/td>
&lt;td>메시지 발행자와 구독자 간 느슨한 결합 제공&lt;/td>
&lt;td>데이터 생성과 소비 작업 분리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>핵심 구성 요소&lt;/td>
&lt;td>이벤트 생성자, 이벤트 채널, 이벤트 처리자&lt;/td>
&lt;td>이벤트 스토어, 이벤트 생성자, 이벤트 소비자&lt;/td>
&lt;td>발행자, 구독자, 메시지 브로커&lt;/td>
&lt;td>프로듀서, 컨슈머, 공유 버퍼(큐)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 흐름&lt;/td>
&lt;td>이벤트 발생 → 채널 → 처리&lt;/td>
&lt;td>이벤트 생성 → 저장 → 재생&lt;/td>
&lt;td>메시지 발행 → 브로커 → 구독자 전달&lt;/td>
&lt;td>데이터 생성 → 버퍼 저장 → 소비&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 사용 사례&lt;/td>
&lt;td>마이크로서비스, IoT, 실시간 분석&lt;/td>
&lt;td>감사, 규정 준수, 복잡한 도메인 모델링&lt;/td>
&lt;td>실시간 알림, 데이터 동기화&lt;/td>
&lt;td>작업 큐, 로그 처리, 스트리밍 데이터&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>장점&lt;/td>
&lt;td>높은 확장성, 반응성&lt;/td>
&lt;td>완전한 감사 추적, 시간 기반 쿼리&lt;/td>
&lt;td>느슨한 결합, 실시간 데이터 처리&lt;/td>
&lt;td>비동기 처리, 부하 분산&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>단점&lt;/td>
&lt;td>시스템 복잡도 증가, 일관성 유지 어려움&lt;/td>
&lt;td>구현 복잡성, 스키마 변경 어려움&lt;/td>
&lt;td>메시지 순서 보장 어려움, 복잡한 디버깅&lt;/td>
&lt;td>버퍼 관리 복잡성, 메모리 사용량 증가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>전체 시스템 확장성 제공&lt;/td>
&lt;td>이벤트 저장소 확장성에 의존&lt;/td>
&lt;td>메시지 브로커 확장성에 의존&lt;/td>
&lt;td>프로듀서와 컨슈머 독립 확장 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 저장&lt;/td>
&lt;td>패턴에 따라 다름&lt;/td>
&lt;td>모든 이벤트 영구 저장&lt;/td>
&lt;td>일시적 저장 또는 즉시 처리&lt;/td>
&lt;td>일시적 버퍼 저장&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>복잡성 수준&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>중간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>상태 관리&lt;/td>
&lt;td>이벤트 기반 상태 변경&lt;/td>
&lt;td>이벤트 기반 상태 재구성&lt;/td>
&lt;td>현재 상태 중심&lt;/td>
&lt;td>현재 상태 중심&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Publisher-Subscriber Pattern Vs Producer-Consumer Pattern&lt;/h3>&lt;p>Producer-Consumer Pattern과 Publisher-Subscriber Pattern은 비동기 통신을 위한 소프트웨어 아키텍처 패턴이지만, 몇 가지 중요한 차이점이 있다:&lt;/p>
&lt;p>Producer-Consumer Pattern과 Publisher-Subscriber Pattern의 주요 차이점을 다음 표로 정리했습니다:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Producer-Consumer Pattern&lt;/th>
&lt;th>Publisher-Subscriber Pattern&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>통신 방식&lt;/td>
&lt;td>일대일 또는 일대다&lt;/td>
&lt;td>일대다&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메시지 처리&lt;/td>
&lt;td>각 메시지는 단일 소비자에 의해 처리&lt;/td>
&lt;td>하나의 메시지가 여러 구독자에 의해 동시에 처리 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결합도&lt;/td>
&lt;td>생산자와 소비자 간의 결합도가 상대적으로 높음&lt;/td>
&lt;td>발행자와 구독자 간의 결합도가 낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메시지 분배&lt;/td>
&lt;td>작업 큐를 통해 메시지 분배&lt;/td>
&lt;td>토픽/채널을 통해 메시지 분배&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>소비자 추가로 처리량 증가, 각 메시지는 하나의 소비자만 처리&lt;/td>
&lt;td>새로운 구독자를 쉽게 추가 가능, 모든 구독자가 메시지를 받을 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용 사례&lt;/td>
&lt;td>작업 큐, 부하 분산, 비동기 처리&lt;/td>
&lt;td>이벤트 기반 아키텍처, 실시간 업데이트, 다중 수신자에게 메시지 브로드캐스팅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메시지 보존&lt;/td>
&lt;td>일반적으로 처리 후 메시지 삭제&lt;/td>
&lt;td>메시지 브로커에 따라 메시지 보존 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡성&lt;/td>
&lt;td>상대적으로 단순&lt;/td>
&lt;td>메시지 필터링, 라우팅 등으로 인해 더 복잡할 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>동기화&lt;/td>
&lt;td>생산자와 소비자 간 동기화 필요&lt;/td>
&lt;td>발행자와 구독자 간 동기화 불필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>백프레셔 관리&lt;/td>
&lt;td>큐 크기 제한으로 백프레셔 관리 가능&lt;/td>
&lt;td>메시지 브로커를 통한 백프레셔 관리&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>멀티 테넌시(Multi-tenancy)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/multi-tenancy/</link><pubDate>Thu, 16 Jan 2025 14:06:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/multi-tenancy/</guid><description>
&lt;h2>멀티 테넌시(Multi-tenancy)&lt;/h2>&lt;p>멀티 테넌시(Multi-tenancy)는 소프트웨어 아키텍처의 한 형태로, 단일 소프트웨어 인스턴스가 여러 사용자 그룹(테넌트)에게 서비스를 제공하는 구조를 말한다. 즉, 하나의 소프트웨어 애플리케이션이나 시스템이 여러 고객(테넌트)에게 서비스를 제공하는 아키텍처이다.&lt;br>
각 테넌트는 공통 인프라를 공유하면서도 자신만의 독립된 환경을 가진 것처럼 작동한다.&lt;/p>
&lt;p>주요 특징:&lt;/p>
&lt;ul>
&lt;li>단일 인스턴스로 여러 사용자 그룹 서비스&lt;/li>
&lt;li>데이터와 구성의 논리적 분리&lt;/li>
&lt;li>각 테넌트에 대한 개별화된 사용자 경험 제공&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Software%20Design%20and%20Architecture/Software%20Architecture%20Patterns/1707088537021.jpg"
alt="Multi-tenancy"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.linkedin.com/pulse/saas-architecture-right-way-sk-reddy-2ozuc/" target="_blank" rel="noopener">https://www.linkedin.com/pulse/saas-architecture-right-way-sk-reddy-2ozuc/&lt;/a> _&lt;/p>
&lt;h3>멀티 테넌시의 유형&lt;/h3>&lt;p>멀티 테넌시는 다양한 형태로 구현될 수 있다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>단일 인스턴스, 단일 데이터베이스&lt;/strong>: 모든 테넌트가 동일한 애플리케이션 인스턴스와 데이터베이스를 공유한다. 비용 효율적이지만 확장성에 제한이 있을 수 있다.&lt;/li>
&lt;li>&lt;strong>단일 인스턴스, 다중 데이터베이스&lt;/strong>: 애플리케이션 인스턴스는 공유하지만 각 테넌트가 별도의 데이터베이스를 가진다. 데이터 격리 수준이 높아진다.&lt;/li>
&lt;li>&lt;strong>다중 인스턴스, 다중 데이터베이스&lt;/strong>: 각 테넌트가 독립된 애플리케이션 인스턴스와 데이터베이스를 가진다. 가장 높은 수준의 격리를 제공하지만 비용이 증가한다.&lt;/li>
&lt;/ol>
&lt;h3>멀티 테넌시의 장점&lt;/h3>&lt;ol>
&lt;li>&lt;strong>비용 효율성&lt;/strong>: 인프라와 리소스를 공유함으로써 개발, 유지보수, 운영 비용을 절감할 수 있다.&lt;/li>
&lt;li>&lt;strong>효율적인 리소스 관리&lt;/strong>: 여러 고객이 동일한 인프라를 공유하므로 리소스 활용도가 높아진다.&lt;/li>
&lt;li>&lt;strong>간편한 업데이트와 유지보수&lt;/strong>: 단일 인스턴스를 업데이트하면 모든 테넌트에게 동시에 적용되어 관리가 용이하다.&lt;/li>
&lt;li>&lt;strong>확장성&lt;/strong>: 사용자 수나 데이터 양이 증가할 때 쉽게 확장할 수 있다.&lt;/li>
&lt;li>&lt;strong>데이터 통합 용이성&lt;/strong>: 모든 테넌트의 데이터가 중앙 집중화되어 있어 분석과 인사이트 도출이 용이하다.&lt;/li>
&lt;/ol>
&lt;h3>멀티 테넌시의 단점과 과제&lt;/h3>&lt;ol>
&lt;li>&lt;strong>보안과 데이터 격리&lt;/strong>: 여러 테넌트의 데이터가 공존하므로 데이터 유출 위험이 있다. 철저한 보안 조치가 필요하다.&lt;/li>
&lt;li>&lt;strong>복잡한 아키텍처&lt;/strong>: 개인화와 데이터 격리를 위해 복잡한 설계가 필요하다.&lt;/li>
&lt;li>&lt;strong>성능 관리&lt;/strong>: 한 테넌트의 과도한 리소스 사용이 다른 테넌트에게 영향을 줄 수 있다.&lt;/li>
&lt;li>&lt;strong>규정 준수&lt;/strong>: 다양한 테넌트의 데이터를 처리할 때 각종 법적 규정과 프라이버시 요구사항을 준수해야 한다.&lt;/li>
&lt;li>&lt;strong>커스터마이징의 한계&lt;/strong>: 각 테넌트별로 세부적인 커스터마이징에 제한이 있을 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>멀티 테넌시 구현 시 고려사항&lt;/h3>&lt;ol>
&lt;li>&lt;strong>데이터 모델 설계&lt;/strong>: 테넌트 간 데이터 격리를 위한 효과적인 데이터 모델 설계가 필요하다.&lt;/li>
&lt;li>&lt;strong>보안 메커니즘&lt;/strong>: 강력한 인증, 권한 부여, 암호화 등의 보안 메커니즘 구현이 중요하다.&lt;/li>
&lt;li>&lt;strong>확장성 계획&lt;/strong>: 테넌트 수와 데이터 양 증가에 대비한 확장 계획을 수립해야 한다.&lt;/li>
&lt;li>&lt;strong>성능 모니터링&lt;/strong>: 각 테넌트의 리소스 사용량을 모니터링하고 최적화하는 시스템이 필요하다.&lt;/li>
&lt;li>&lt;strong>백업 및 복구 전략&lt;/strong>: 테넌트별 데이터 백업 및 복구 전략을 수립해야 한다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Producer-Consumer Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/producer-consumer-pattern/</link><pubDate>Thu, 16 Jan 2025 01:12:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/producer-consumer-pattern/</guid><description>
&lt;h2>Producer-Consumer Pattern&lt;/h2>&lt;p>Producer-Consumer Pattern은 소프트웨어 아키텍처에서 중요한 디자인 패턴 중 하나로, 주로 동시성 프로그래밍과 분산 시스템에서 사용된다.&lt;br>
이 패턴은 데이터를 생성하는 프로듀서(Producer)와 데이터를 소비하는 컨슈머(Consumer) 사이의 작업을 분리하여 효율적인 데이터 처리를 가능하게 한다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Software%20Design%20and%20Architecture/Software%20Architecture%20Patterns/producer-consumer-1.png"
alt="Producer-Consumer Pattern"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://jenkov.com/tutorials/java-concurrency/producer-consumer.html" target="_blank" rel="noopener">https://jenkov.com/tutorials/java-concurrency/producer-consumer.html&lt;/a> _&lt;/p>
&lt;h3>주요 구성 요소&lt;/h3>&lt;ol>
&lt;li>&lt;strong>프로듀서 (Producer)&lt;/strong>: 데이터나 작업을 생성하는 엔티티.&lt;/li>
&lt;li>&lt;strong>컨슈머 (Consumer)&lt;/strong>: 프로듀서가 생성한 데이터나 작업을 처리하는 엔티티.&lt;/li>
&lt;li>&lt;strong>버퍼 (Buffer)&lt;/strong>: 프로듀서와 컨슈머 사이에서 데이터를 임시 저장하는 공유 자원. 주로 큐(Queue)의 형태로 구현된다.&lt;/li>
&lt;/ol>
&lt;h3>작동 방식&lt;/h3>&lt;ol>
&lt;li>프로듀서는 데이터나 작업을 생성하여 버퍼에 추가한다.&lt;/li>
&lt;li>컨슈머는 버퍼에서 데이터나 작업을 가져와 처리한다.&lt;/li>
&lt;li>버퍼는 프로듀서와 컨슈머 사이의 중간 저장소 역할을 하며, 동기화를 관리한다.&lt;/li>
&lt;/ol>
&lt;h3>주요 특징&lt;/h3>&lt;ol>
&lt;li>&lt;strong>비동기 처리&lt;/strong>: 프로듀서와 컨슈머가 독립적으로 작동하여 비동기 처리가 가능하다.&lt;/li>
&lt;li>&lt;strong>버퍼링&lt;/strong>: 버퍼를 통해 생산과 소비 속도의 차이를 조절할 수 있다.&lt;/li>
&lt;li>&lt;strong>병렬 처리&lt;/strong>: 여러 프로듀서와 컨슈머가 동시에 작업할 수 있어 병렬 처리가 가능하다.&lt;/li>
&lt;li>&lt;strong>느슨한 결합&lt;/strong>: 프로듀서와 컨슈머는 서로에 대해 직접적인 의존성이 없다.&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;/h3>&lt;ol>
&lt;li>&lt;strong>처리량 향상&lt;/strong>: 생산과 소비를 병렬로 수행하여 전체 시스템의 처리량을 높일 수 있다.&lt;/li>
&lt;li>&lt;strong>유연성&lt;/strong>: 프로듀서와 컨슈머를 독립적으로 확장할 수 있다.&lt;/li>
&lt;li>&lt;strong>부하 분산&lt;/strong>: 버퍼를 통해 작업 부하를 균등하게 분산시킬 수 있다.&lt;/li>
&lt;li>&lt;strong>피크 부하 관리&lt;/strong>: 일시적인 부하 증가를 버퍼를 통해 완화할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>단점&lt;/h3>&lt;ol>
&lt;li>&lt;strong>복잡성&lt;/strong>: 동기화와 버퍼 관리로 인해 시스템 복잡도가 증가할 수 있다.&lt;/li>
&lt;li>&lt;strong>메모리 사용&lt;/strong>: 버퍼가 큰 경우 메모리 사용량이 증가할 수 있다.&lt;/li>
&lt;li>&lt;strong>지연 가능성&lt;/strong>: 버퍼가 가득 차거나 비어있을 때 지연이 발생할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>적용 사례&lt;/h3>&lt;ol>
&lt;li>&lt;strong>작업 큐 시스템&lt;/strong>: 백그라운드 작업 처리, 이메일 발송 등의 비동기 작업 관리&lt;/li>
&lt;li>&lt;strong>로그 처리 시스템&lt;/strong>: 대량의 로그 데이터를 효율적으로 수집하고 분석&lt;/li>
&lt;li>&lt;strong>스트리밍 데이터 처리&lt;/strong>: 실시간 데이터 스트림의 처리 및 분석&lt;/li>
&lt;li>&lt;strong>멀티스레드 애플리케이션&lt;/strong>: 스레드 간 작업 분배 및 동기화&lt;/li>
&lt;/ol>
&lt;h3>구현 시 고려사항&lt;/h3>&lt;ol>
&lt;li>&lt;strong>동기화 메커니즘&lt;/strong>: 버퍼 접근 시 적절한 동기화 방법(예: 세마포어, 뮤텍스) 사용&lt;/li>
&lt;li>&lt;strong>버퍼 크기 조정&lt;/strong>: 시스템 요구사항에 맞는 적절한 버퍼 크기 설정&lt;/li>
&lt;li>&lt;strong>예외 처리&lt;/strong>: 버퍼 오버플로우, 언더플로우 등의 예외 상황 관리&lt;/li>
&lt;li>&lt;strong>종료 조건&lt;/strong>: 프로듀서와 컨슈머의 적절한 종료 시점 및 방법 정의&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Service-oriented architecture</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/service-oriented-architecture/</link><pubDate>Mon, 13 Jan 2025 09:19:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/service-oriented-architecture/</guid><description>
&lt;h2>Service-oriented architecture&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Message Queues and Streams</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/message-queues-and-streams/</link><pubDate>Mon, 13 Jan 2025 09:01:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/message-queues-and-streams/</guid><description>
&lt;h2>Message Queues and Streams&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Abstract class</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/abstract-class/</link><pubDate>Mon, 13 Jan 2025 05:39:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/abstract-class/</guid><description>
&lt;h2>Abstract Class&lt;/h2>&lt;p>추상 클래스는 하나 이상의 추상 메서드를 포함하는 클래스이다.&lt;br>
추상 메서드는 선언만 되고 구현되지 않은 메서드를 말한다.&lt;br>
이는 기본적인 구조는 정의하지만 세부적인 구현은 하위 클래스에 맡긴다.&lt;/p>
&lt;p>기본 구조:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">abc&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ABC&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">abstractmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ABC&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@abstractmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">calculate_area&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;도형의 넓이를 계산하는 추상 메서드&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@abstractmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">calculate_perimeter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;도형의 둘레를 계산하는 추상 메서드&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_description&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;일반 메서드 - 모든 하위 클래스가 공유&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;이것은 2차원 도형입니다.&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>주요 특징&lt;/h3>&lt;ol>
&lt;li>인스턴스화 불가: 추상 클래스는 직접 객체를 생성할 수 없다.&lt;/li>
&lt;li>상속 목적: 다른 클래스들의 기본 클래스 역할을 한다.&lt;/li>
&lt;li>추상 및 구체 메서드 포함: 추상 메서드와 구현된 메서드를 모두 가질 수 있다.&lt;/li>
&lt;li>공통 인터페이스 제공: 관련된 클래스들에 대한 공통 인터페이스나 동작을 정의한다.&lt;/li>
&lt;/ol>
&lt;h4>추상 클래스의 구현과 활용&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Circle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Shape&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">radius&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">radius&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">radius&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">calculate_area&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;원의 넓이 계산 구현&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mf">3.14&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">radius&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">radius&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">calculate_perimeter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;원의 둘레 계산 구현&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">3.14&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">radius&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Rectangle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Shape&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">width&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">height&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">calculate_area&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;직사각형의 넓이 계산 구현&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">width&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">height&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">calculate_perimeter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;직사각형의 둘레 계산 구현&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">width&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>사용 목적&lt;/h3>&lt;ol>
&lt;li>계층 구조 생성: 관련 클래스들의 공통 속성과 메서드를 정의한다.&lt;/li>
&lt;li>템플릿 메서드 패턴: 알고리즘의 골격을 정의하고 일부 단계를 하위 클래스에서 구현하도록 한다.&lt;/li>
&lt;li>프레임워크 개발: API나 프레임워크에서 기본 구조를 정의하는 데 사용된다.&lt;/li>
&lt;/ol>
&lt;h3>예시&lt;/h3>&lt;p>Java에서 추상 클래스 선언 예:&lt;br>
이 예시에서 Shape는 추상 클래스로, draw() 메서드는 추상 메서드이며 setColor() 메서드는 구체적인 구현을 가진다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">abstract&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Shape&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">abstract&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">draw&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">setColor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">color&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Interface vs Abstract class</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/interface-vs-abstract-class/</link><pubDate>Mon, 13 Jan 2025 05:39:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/interface-vs-abstract-class/</guid><description>
&lt;h2>Interface Vs Abstract Class&lt;/h2>&lt;p>인터페이스는 클래스가 &amp;lsquo;무엇을 해야 하는지&amp;rsquo;를 정의하는 계약(contract)과 같은 역할을 한다.&lt;br>
모든 메서드가 추상 메서드로 이루어져 있으며, 구현부가 없는 메서드 선언만을 포함한다.&lt;br>
이는 마치 설계 명세서와 같아서, 클래스가 반드시 구현해야 하는 기능들을 정의한다.&lt;/p>
&lt;p>추상 클래스(Abstract Class)는 하나 이상의 추상 메서드를 포함하는 클래스이다.&lt;br>
일반 메서드와 추상 메서드를 모두 가질 수 있으며, 관련된 클래스들의 공통적인 특성과 행위를 정의한다. 이는 마치 미완성된 설계도와 같아서, 기본적인 구조는 제공하지만 일부 세부사항은 하위 클래스에서 완성해야 한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Interface&lt;/th>
&lt;th>Abstract Class&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>완전히 추상화된 클래스, 메서드 시그니처만 정의&lt;/td>
&lt;td>부분적으로 구현된 클래스, 추상 메서드와 구체 메서드 모두 포함 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메서드&lt;/td>
&lt;td>추상 메서드만 가능&lt;/td>
&lt;td>추상 메서드와 구체 메서드 모두 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>변수&lt;/td>
&lt;td>public static final 상수만 가능&lt;/td>
&lt;td>모든 종류의 변수 선언 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>생성자&lt;/td>
&lt;td>생성자를 가질 수 없음&lt;/td>
&lt;td>생성자를 가질 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>다중 상속&lt;/td>
&lt;td>다중 구현 가능&lt;/td>
&lt;td>단일 상속만 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>접근 제어자&lt;/td>
&lt;td>모든 메서드는 public (암묵적)&lt;/td>
&lt;td>모든 접근 제어자 사용 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>인스턴스화&lt;/td>
&lt;td>직접 인스턴스화 불가능&lt;/td>
&lt;td>직접 인스턴스화 불가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용 목적&lt;/td>
&lt;td>클래스의 행동을 정의하는 계약&lt;/td>
&lt;td>관련 클래스들의 공통 특성을 정의하고 일부 구현 제공&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>쉽게 확장 가능&lt;/td>
&lt;td>확장에 제한이 있을 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡성&lt;/td>
&lt;td>상대적으로 간단&lt;/td>
&lt;td>더 복잡할 수 있음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>주요 차이점과 특징&lt;/h3>&lt;ol>
&lt;li>구현 수준의 차이: 인터페이스는 메서드의 선언만을 포함하지만, 추상 클래스는 일부 구현된 메서드를 포함할 수 있다. 이는 코드 재사용성 측면에서 중요한 차이를 만든다.&lt;/li>
&lt;li>목적의 차이: 인터페이스는 클래스의 행위를 규정하는 계약의 역할을 하며, 추상 클래스는 관련된 클래스들의 공통 기능을 제공하고 확장성을 부여한다.&lt;/li>
&lt;li>사용 시나리오: 인터페이스는 서로 다른 클래스들이 동일한 방식으로 동작해야 할 때 사용된다. 예를 들어, 다양한 결제 방식(신용카드, 현금, 모바일 결제 등)을 구현할 때 유용하다.&lt;/li>
&lt;/ol>
&lt;p>추상 클래스는 비슷한 특성을 가진 클래스들의 공통 기능을 정의할 때 사용된다.&lt;br>
예를 들어, 다양한 도형 클래스들의 공통 특성을 정의할 때 적합하다.&lt;/p>
&lt;ol start="4">
&lt;li>다중 상속/구현: 한 클래스는 여러 인터페이스를 동시에 구현할 수 있지만, 추상 클래스는 단일 상속만 가능하다. 이는 설계의 유연성에 큰 영향을 미친다.&lt;/li>
&lt;li>멤버 변수와 메서드: 인터페이스는 일반적으로 상수와 추상 메서드만을 포함할 수 있다. 반면 추상 클래스는 인스턴스 변수, 생성자, 일반 메서드, 추상 메서드 등 모든 종류의 멤버를 가질 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>인터페이스와 추상 클래스를 함께 사용하는 예시&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Drawable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ABC&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@abstractmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ABC&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">color&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">color&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_color&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">color&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@abstractmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">calculate_area&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Circle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Shape&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Drawable&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">color&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">radius&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">radius&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">radius&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Drawing a &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> circle&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">calculate_area&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mf">3.14&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">radius&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">radius&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이 예시에서 Drawable은 인터페이스의 역할을, Shape는 추상 클래스의 역할을 한다.&lt;br>
Circle 클래스는 둘 다의 특성을 상속받아 구체적인 기능을 구현한다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Encapsulation</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/encapsulation/</link><pubDate>Sat, 11 Jan 2025 02:26:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/encapsulation/</guid><description>
&lt;h2>Encapsulation&lt;/h2>&lt;p>캡슐화는 데이터와 그 데이터를 처리하는 메서드를 하나의 단위로 묶고, 외부로부터 접근을 제한하는 것을 의미한다.&lt;br>
이는 마치 약캡슐이 내용물을 보호하고 외부와의 상호작용을 제한하는 것과 유사하다.&lt;/p>
&lt;p>실제 코드로 보면 다음과 같다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">BankAccount&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1"># private 변수&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_transaction_count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1"># protected 변수&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">deposit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;입금 메서드&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">amount&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__balance&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">amount&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_transaction_count&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">withdraw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;출금 메서드&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">amount&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__balance&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__balance&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">amount&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_transaction_count&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_balance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;잔액 조회 메서드&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__balance&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>캡슐화의 주요 특징과 장점&lt;/h3>&lt;h4>데이터 은닉&lt;/h4>&lt;p>객체의 내부 상태를 외부에서 직접 접근하지 못하도록 한다. 이는 주로 private 접근 제어자를 사용하여 구현된다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Employee&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">salary&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="c1"># private &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__salary&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">salary&lt;/span> &lt;span class="c1"># private&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_salary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__salary&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">give_raise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">amount&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__salary&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">amount&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>인터페이스 제공&lt;/h4>&lt;p>객체의 상태를 변경하거나 조회할 때는 public 메서드를 통해 접근한다. 이를 통해 객체의 내부 구현을 숨기고 필요한 기능만을 외부에 노출한다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Database&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">connection_string&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__connection&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">connection_string&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">__connect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">connection_string&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;데이터베이스 연결 (구현 세부사항 숨김)&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 연결 로직 구현&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">execute_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">query&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;공개 인터페이스&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__validate_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__connection&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">execute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">__validate_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">query&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;쿼리 유효성 검사 (내부 구현)&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 검증 로직 구현&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>유지보수성 향상&lt;/h4>&lt;p>내부 구현을 변경하더라도 외부 인터페이스가 변경되지 않으면, 다른 코드에 영향을 미치지 않는다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ShoppingCart&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">add_item&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;아이템 추가&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__items&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__update_total&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">remove_item&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;아이템 제거&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__items&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__items&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__update_total&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">__update_total&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;총액 업데이트 (내부 구현 변경 가능)&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">price&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__items&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>코드의 안정성&lt;/h4>&lt;p>객체의 상태를 직접 변경할 수 없으므로, 의도치 않은 상태 변경을 방지할 수 있다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Product&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">price&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="c1"># protected &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__price&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">price&lt;/span> &lt;span class="c1"># private &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="c1"># public&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@property&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">price&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;가격 조회를 위한 프로퍼티&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__price&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@price.setter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">price&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">new_price&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;가격 설정을 위한 프로퍼티&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">new_price&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__price&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_price&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>모듈화&lt;/h4>&lt;p>관련된 데이터와 기능을 하나의 단위로 묶어 코드의 구조를 개선한다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">GameCharacter&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__health&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__experience&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">take_damage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;데미지 처리&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__health&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__health&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__check_status&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">gain_experience&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;경험치 획득&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__experience&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">amount&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__level_up_check&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">__check_status&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;상태 확인 (내부 로직)&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__health&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__handle_death&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">__handle_death&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;사망 처리 (내부 로직)&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 사망 관련 로직 구현&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>캡슐화를 통한 객체 설계 원칙&lt;/h3>&lt;ol>
&lt;li>
&lt;p>최소 권한의 원칙:&lt;br>
객체의 속성과 메서드는 가능한 한 최소한의 접근 권한만을 가져야 한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>인터페이스와 구현의 분리:&lt;br>
공개 인터페이스는 안정적으로 유지하면서, 내부 구현은 자유롭게 변경할 수 있어야 한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>데이터 무결성 보장:&lt;br>
객체의 상태는 해당 객체의 메서드를 통해서만 변경되어야 한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Distributed State Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/distributed-state-pattern/</link><pubDate>Sat, 04 Jan 2025 04:02:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/distributed-state-pattern/</guid><description>
&lt;h2>Distributed State Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Session State Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/session-state-pattern/</link><pubDate>Sat, 04 Jan 2025 04:02:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/session-state-pattern/</guid><description>
&lt;h2>Session State Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Stateless Service Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/stateless-service-pattern/</link><pubDate>Sat, 04 Jan 2025 04:02:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/stateless-service-pattern/</guid><description>
&lt;h2>Stateless Service Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Content Negotiation Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/content-negotiation-pattern/</link><pubDate>Sat, 04 Jan 2025 04:01:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/content-negotiation-pattern/</guid><description>
&lt;h2>Content Negotiation Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Media Type Versioning Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/media-type-versioning-pattern/</link><pubDate>Sat, 04 Jan 2025 04:01:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/media-type-versioning-pattern/</guid><description>
&lt;h2>Media Type Versioning Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>URI Versioning Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/uri-versioning-pattern/</link><pubDate>Sat, 04 Jan 2025 04:01:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/uri-versioning-pattern/</guid><description>
&lt;h2>URI Versioning Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Consumer-Driven Contract Testing Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/consumer-driven-contract-testing-pattern/</link><pubDate>Sat, 04 Jan 2025 03:58:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/consumer-driven-contract-testing-pattern/</guid><description>
&lt;h2>Consumer-Driven Contract Testing Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>End-to-End Testing Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/end-to-end-testing-pattern/</link><pubDate>Sat, 04 Jan 2025 03:58:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/end-to-end-testing-pattern/</guid><description>
&lt;h2>End-to-End Testing Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Service Component Test Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/service-component-test-pattern/</link><pubDate>Sat, 04 Jan 2025 03:58:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/service-component-test-pattern/</guid><description>
&lt;h2>Service Component Test Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>State Management Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/</link><pubDate>Sat, 04 Jan 2025 02:22:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/</guid><description>
&lt;h2>State Management Patterns&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Testing Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/</link><pubDate>Sat, 04 Jan 2025 02:22:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/</guid><description>
&lt;h2>Testing Patterns&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Versioning Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/</link><pubDate>Sat, 04 Jan 2025 02:22:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/</guid><description>
&lt;h2>Versioning Patterns&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Service Registry Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/service-registry-pattern/</link><pubDate>Fri, 03 Jan 2025 04:02:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/service-registry-pattern/</guid><description>
&lt;h2>Service Registry Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Third-Party Registration Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/third-party-registration-pattern/</link><pubDate>Fri, 03 Jan 2025 04:02:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/third-party-registration-pattern/</guid><description>
&lt;h2>Third-Party Registration Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Self-Registration Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/self-registration-pattern/</link><pubDate>Fri, 03 Jan 2025 04:01:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/self-registration-pattern/</guid><description>
&lt;h2>Self-Registration Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Elastic Scale Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/elastic-scale-pattern/</link><pubDate>Fri, 03 Jan 2025 04:00:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/elastic-scale-pattern/</guid><description>
&lt;h2>Elastic Scale Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Horizontal Scaling Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/horizontal-scaling-pattern/</link><pubDate>Fri, 03 Jan 2025 04:00:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/horizontal-scaling-pattern/</guid><description>
&lt;h2>Horizontal Scaling Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Scale Cube Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/scale-cube-pattern/</link><pubDate>Fri, 03 Jan 2025 04:00:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/scale-cube-pattern/</guid><description>
&lt;h2>Scale Cube Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Service Registry Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/</link><pubDate>Fri, 03 Jan 2025 02:22:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/</guid><description>
&lt;h2>Service Registry Patterns&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Resilience Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/</link><pubDate>Fri, 03 Jan 2025 02:21:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/</guid><description>
&lt;h2>Resilience Patterns&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Scalability Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/</link><pubDate>Fri, 03 Jan 2025 02:21:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/</guid><description>
&lt;h2>Scalability Patterns&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Data Lake Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-lake-pattern/</link><pubDate>Thu, 02 Jan 2025 03:56:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-lake-pattern/</guid><description>
&lt;h2>Data Lake Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Data Mesh Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-mesh-pattern/</link><pubDate>Thu, 02 Jan 2025 03:56:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-mesh-pattern/</guid><description>
&lt;h2>Data Mesh Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Data Pipeline Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-pipeline-pattern/</link><pubDate>Thu, 02 Jan 2025 03:56:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-pipeline-pattern/</guid><description>
&lt;h2>Data Pipeline Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>API Security Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/api-security-pattern/</link><pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/api-security-pattern/</guid><description>
&lt;h2>API Security Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>OAuth and OpenID Connect Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/oauth-and-openid-connect-pattern/</link><pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/oauth-and-openid-connect-pattern/</guid><description>
&lt;h2>OAuth/ OpenID Connect Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Service-to-Service Authentication</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/service-to-service-authentication/</link><pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/service-to-service-authentication/</guid><description>
&lt;h2>Service-to-Service Authentication&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Vault Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/vault-pattern/</link><pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/vault-pattern/</guid><description>
&lt;h2>Vault Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Zero Trust Security Model</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/zero-trust-security-model/</link><pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/zero-trust-security-model/</guid><description>
&lt;h2>Zero Trust Security Model&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Security Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/</link><pubDate>Thu, 02 Jan 2025 02:21:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/</guid><description>
&lt;h2>Security Patterns&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Data Management Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/</link><pubDate>Thu, 02 Jan 2025 02:18:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/</guid><description>
&lt;h2>Data Management Patterns&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Circuit Breaker Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/circuit-breaker-pattern/</link><pubDate>Wed, 01 Jan 2025 10:05:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/circuit-breaker-pattern/</guid><description>
&lt;h2>Circuit Breaker Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Lazy Loading Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/lazy-loading-pattern/</link><pubDate>Wed, 01 Jan 2025 04:01:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/lazy-loading-pattern/</guid><description>
&lt;h2>Lazy Loading Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Caching Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/caching-pattern/</link><pubDate>Wed, 01 Jan 2025 04:00:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/caching-pattern/</guid><description>
&lt;h2>Caching Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Throttling Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/throttling-pattern/</link><pubDate>Wed, 01 Jan 2025 04:00:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/throttling-pattern/</guid><description>
&lt;h2>Throttling Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Bulkhead Isolation Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/bulkhead-isolation-pattern/</link><pubDate>Wed, 01 Jan 2025 02:24:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/bulkhead-isolation-pattern/</guid><description>
&lt;h2>Bulkhead Isolation Pattern&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>