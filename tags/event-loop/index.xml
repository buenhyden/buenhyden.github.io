<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Event-Loop</title><link>https://buenhyden.github.io/tags/event-loop/</link><description>Recent content in Event-Loop on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 17 Dec 2024 12:44:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/event-loop/index.xml" rel="self" type="application/rss+xml"/><item><title>Event Loop</title><link>https://buenhyden.github.io/posts/programming-languages/javascript/event-loop/</link><pubDate>Tue, 17 Dec 2024 12:44:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/programming-languages/javascript/event-loop/</guid><description>
&lt;h2>Event Loop&lt;/h2>&lt;p>이벤트 루프(Event Loop)는 자바스크립트의 비동기 작업을 관리하고 실행하는 핵심 메커니즘으로, 싱글 스레드 언어인 자바스크립트가 비동기적으로 동작할 수 있게 해주는 중요한 요소이다.&lt;/p>
&lt;p>끊임없이 실행되는 프로세스로, 콜 스택이 비어있는지 확인하고 태스크 큐에서 콜백 함수를 가져와 실행하며, 자바스크립트 엔진이 아닌 호스팅 환경(브라우저 또는 Node.js)에서 제공되는 메커니즘이다. 또한, 비동기 작업의 완료 및 해당 콜백의 실행을 조정한다.&lt;/p>
&lt;h3>Event Loop의 구성 요소&lt;/h3>&lt;ol>
&lt;li>콜 스택 (Call Stack): 현재 실행 중인 함수들이 쌓이는 곳. 후입선출(LIFO) 구조&lt;/li>
&lt;li>웹 API (Web APIs): 브라우저에서 제공하는 비동기 작업을 처리하는 API.&lt;/li>
&lt;li>콜백 큐 (Callback Queue): 비동기 작업이 완료된 후 실행될 콜백 함수들이 대기하는 곳. 선입선출(FIFO) 구조&lt;/li>
&lt;li>이벤트 루프 (Event Loop): 콜 스택과 콜백 큐를 모니터링하며 작업을 조율.&lt;/li>
&lt;/ol>
&lt;h3>Event Loop의 동작 과정&lt;/h3>&lt;ol>
&lt;li>JavaScript 코드가 실행되면 함수 호출은 콜 스택에 쌓인다.&lt;/li>
&lt;li>비동기 함수(예: setTimeout, fetch)를 만나면 웹 API로 보내져 별도로 처리된다.&lt;/li>
&lt;li>웹 API에서 작업이 완료되면 해당 콜백 함수를 콜백 큐로 보낸다.&lt;/li>
&lt;li>이벤트 루프는 지속적으로 콜 스택이 비어있는지 확인한다.&lt;/li>
&lt;li>콜 스택이 비어있다면, 이벤트 루프는 콜백 큐에서 가장 오래된 콜백을 콜 스택으로 이동시킨다.&lt;/li>
&lt;li>이 과정을 반복한다.&lt;/li>
&lt;/ol>
&lt;h3>Event Loop의 기본 개념: 식당 시나리오&lt;/h3>&lt;p>상황: 바쁜 식당에서 일하는 웨이터를 생각해보자.&lt;/p>
&lt;ol>
&lt;li>웨이터 = JavaScript의 메인 스레드&lt;/li>
&lt;li>주문 접수 데스크 = 콜 스택(Call Stack)&lt;/li>
&lt;li>주방 = Web APIs (비동기 작업이 실행되는 곳)&lt;/li>
&lt;li>주문 대기 선반 = 콜백 큐(Callback Queue)&lt;/li>
&lt;li>매니저 = Event Loop&lt;/li>
&lt;/ol>
&lt;h4>동작 방식&lt;/h4>&lt;ol>
&lt;li>웨이터(메인 스레드)는 주문 접수 데스크(콜 스택)에서 한 번에 하나의 주문만 처리할 수 있다.&lt;/li>
&lt;li>주문이 들어오면 다음과 같이 처리된다.
&lt;ul>
&lt;li>즉시 처리 가능한 주문 → 바로 처리 (동기 작업)&lt;/li>
&lt;li>조리가 필요한 주문 → 주방으로 전달 (비동기 작업)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>주방(Web APIs)에서 음식이 완성되면 주문 대기 선반(콜백 큐)에 놓는다.&lt;/li>
&lt;li>매니저(Event Loop)는 지속적으로:
&lt;ul>
&lt;li>주문 접수 데스크가 비어있는지 확인&lt;/li>
&lt;li>대기 선반에 완성된 주문이 있는지 확인&lt;/li>
&lt;li>있다면 웨이터에게 전달하여 손님에게 서빙하도록 함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>동작 예시&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;손님이 입장했습니다.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 1번: 즉시 실행
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;주문하신 음식이 나왔습니다.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 3번: 2초 후 실행
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="mi">2000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;메뉴를 고르는 중입니다.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 2번: 즉시 실행
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이 코드의 실행 순서:&lt;/p>
&lt;ol>
&lt;li>&amp;ldquo;손님이 입장했습니다.&amp;rdquo; 출력 (동기 작업)&lt;/li>
&lt;li>setTimeout은 Web APIs로 전달 (비동기 작업)&lt;/li>
&lt;li>&amp;ldquo;메뉴를 고르는 중입니다.&amp;rdquo; 출력 (동기 작업)&lt;/li>
&lt;li>2초 후, 콜백이 큐에 추가됨&lt;/li>
&lt;li>Event Loop가 콜백을 스택으로 이동&lt;/li>
&lt;li>&amp;ldquo;주문하신 음식이 나왔습니다.&amp;rdquo; 출력&lt;/li>
&lt;/ol>
&lt;h3>마이크로태스크와 매크로태스크&lt;/h3>&lt;p>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>구분&lt;/th>
&lt;th>마이크로태스크 (Microtask)&lt;/th>
&lt;th>매크로태스크 (Macrotask)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>우선순위&lt;/strong>&lt;/td>
&lt;td>높음 (매크로태스크보다 먼저 실행)&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>실행 시점&lt;/strong>&lt;/td>
&lt;td>현재 매크로태스크 완료 직후&lt;/td>
&lt;td>다음 이벤트 루프 사이클&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주요 예시&lt;/strong>&lt;/td>
&lt;td>Promise.then/catch/finally&lt;br>process.nextTick&lt;br>queueMicrotask&lt;br>MutationObserver&lt;/td>
&lt;td>setTimeout/setInterval&lt;br>setImmediate&lt;br>requestAnimationFrame&lt;br>I/O 작업&lt;br>UI 렌더링&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>실행 특성&lt;/strong>&lt;/td>
&lt;td>큐의 모든 태스크가 완료될 때까지 연속 실행&lt;/td>
&lt;td>한 번에 하나씩 실행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 사용&lt;/strong>&lt;/td>
&lt;td>일반적으로 더 적은 메모리 사용&lt;/td>
&lt;td>상대적으로 더 많은 메모리 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>사용 목적&lt;/strong>&lt;/td>
&lt;td>즉각적인 상태 업데이트&lt;br>데이터 일관성 유지&lt;/td>
&lt;td>무거운 계산&lt;br>I/O 작업&lt;br>타이밍 기반 작업&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>에러 처리&lt;/strong>&lt;/td>
&lt;td>동기적으로 처리 가능&lt;/td>
&lt;td>try-catch로 직접 처리 불가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>실행 컨텍스트&lt;/strong>&lt;/td>
&lt;td>현재 실행 컨텍스트 유지&lt;/td>
&lt;td>새로운 실행 컨텍스트 생성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>디버깅&lt;/strong>&lt;/td>
&lt;td>상대적으로 쉬움&lt;/td>
&lt;td>비동기 특성으로 인해 더 복잡&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>태스크 취소&lt;/strong>&lt;/td>
&lt;td>일반적으로 불가능&lt;/td>
&lt;td>clearTimeout 등으로 가능&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이제 각각의 특징을 자세히 살펴보겠습니다:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>마이크로태스크&lt;/th>
&lt;th>매크로태스크&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>실행 시점&lt;/td>
&lt;td>현재 작업 완료 직후, 렌더링 전&lt;/td>
&lt;td>마이크로태스크 큐가 비어있을 때&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>처리 방식&lt;/td>
&lt;td>큐가 비워질 때까지 연속 실행&lt;/td>
&lt;td>한 번에 하나씩 실행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>큐 처리&lt;/td>
&lt;td>모든 마이크로태스크 처리 후 매크로태스크로 이동&lt;/td>
&lt;td>각 매크로태스크 사이에 마이크로태스크 확인&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>마이크로태스크 (Microtasks)&lt;/h4>&lt;p>마이크로태스크는 현재 실행 중인 스크립트나 태스크가 완료된 직후에 실행되는 작은 태스크.&lt;br>
이들은 높은 우선순위를 가지며, 다른 매크로태스크나 렌더링 작업보다 먼저 처리된다.&lt;/p>
&lt;p>주요 특징:&lt;/p>
&lt;ul>
&lt;li>높은 우선순위&lt;/li>
&lt;li>현재 작업 완료 직후 실행&lt;/li>
&lt;li>모든 마이크로태스크가 처리될 때까지 계속 실행&lt;/li>
&lt;/ul>
&lt;p>예시:&lt;/p>
&lt;ul>
&lt;li>Promise 콜백 (.then,.catch,.finally)&lt;/li>
&lt;li>process.nextTick (Node.js)&lt;/li>
&lt;li>queueMicrotask()&lt;/li>
&lt;li>MutationObserver 콜백&lt;/li>
&lt;/ul>
&lt;h4>매크로태스크 (Macrotasks)&lt;/h4>&lt;p>매크로태스크는 일반적인 비동기 작업을 나타내며, 마이크로태스크보다 낮은 우선순위를 가진다.&lt;br>
이들은 마이크로태스크 큐가 비어있을 때만 실행된다.&lt;/p>
&lt;p>주요 특징:&lt;/p>
&lt;ul>
&lt;li>낮은 우선순위&lt;/li>
&lt;li>마이크로태스크 큐가 비어있을 때 실행&lt;/li>
&lt;li>한 번에 하나씩 처리됨&lt;/li>
&lt;/ul>
&lt;p>예시:&lt;/p>
&lt;ul>
&lt;li>setTimeout, setInterval&lt;/li>
&lt;li>I/O 작업&lt;/li>
&lt;li>UI 렌더링&lt;/li>
&lt;li>requestAnimationFrame&lt;/li>
&lt;/ul>
&lt;h3>Event Loop의 중요성&lt;/h3>&lt;ol>
&lt;li>
&lt;p>비차단 실행 (Non-blocking Execution)&lt;/p>
&lt;ul>
&lt;li>긴 작업이 있어도 UI가 멈추지 않음&lt;/li>
&lt;li>사용자 경험 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>효율적인 리소스 사용&lt;/p>
&lt;ul>
&lt;li>단일 스레드로도 동시성 처리 가능&lt;/li>
&lt;li>메모리 사용 효율화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>확장성&lt;/p>
&lt;ul>
&lt;li>많은 동시 연결 처리 가능&lt;/li>
&lt;li>서버 사이드 JavaScript의 핵심 장점&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>주의할 점&lt;/h3>&lt;ol>
&lt;li>
&lt;p>콜 스택 블로킹 피하기&lt;/p>
&lt;ul>
&lt;li>무거운 계산은 Web Worker로 분리&lt;/li>
&lt;li>긴 동기 작업 피하기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>콜백 큐 관리&lt;/p>
&lt;ul>
&lt;li>너무 많은 비동기 작업 동시 실행 피하기&lt;/li>
&lt;li>적절한 에러 처리 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>실행 순서 이해&lt;/p>
&lt;ul>
&lt;li>마이크로태스크와 매크로태스크의 우선순위 파악&lt;/li>
&lt;li>비동기 작업의 실행 순서 예측&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>