<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – CTM</title><link>https://buenhyden.github.io/tags/ctm/</link><description>Recent content in CTM on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 11 Dec 2024 09:58:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/ctm/index.xml" rel="self" type="application/rss+xml"/><item><title>분류 트리 방법 (Classification Tree Method)</title><link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/classification-tree-method/</link><pubDate>Wed, 11 Dec 2024 09:58:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/classification-tree-method/</guid><description>
&lt;h2>분류 트리 방법 (Classification Tree Method, CTM)&lt;span class="hx-absolute -hx-mt-20" id="분류-트리-방법-classification-tree-method-ctm">&lt;/span>
&lt;a href="#%eb%b6%84%eb%a5%98-%ed%8a%b8%eb%a6%ac-%eb%b0%a9%eb%b2%95-classification-tree-method-ctm" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>CTM은 1993년 Grimm과 Grochtmann에 의해 개발된 테스트 설계 방법으로, 소프트웨어의 테스트 관련 측면을 체계적으로 분류하고 조합하여 테스트 케이스를 생성한다.&lt;/p>
&lt;p>분류 트리 방법은 테스트 대상 시스템의 입력 도메인을 여러 분류(Classifications)로 나누고, 각 분류 아래에 클래스(Classes)들을 정의하는 방식으로 작동한다.&lt;br>
여기서 분류는 테스트할 특성이나 매개변수를 의미하고, 클래스는 그 특성이 가질 수 있는 구체적인 값들을 의미한다.&lt;/p>
&lt;p>예를 들어, 온라인 쇼핑몰의 주문 시스템을 테스트한다고 가정해보자:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>분류: 결제 방법&lt;/p>
&lt;ul>
&lt;li>클래스: 신용카드, 계좌이체, 휴대폰 결제&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>분류: 배송 옵션&lt;/p>
&lt;ul>
&lt;li>클래스: 일반배송, 특급배송, 해외배송&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>분류: 주문 금액&lt;/p>
&lt;ul>
&lt;li>클래스: 1만원 미만, 1-5만원, 5만원 이상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>주요 단계&lt;span class="hx-absolute -hx-mt-20" id="주요-단계">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%eb%8b%a8%ea%b3%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>분류(Classification): 테스트 관련 측면(classifications)과 해당 값(classes)을 식별한다.&lt;/li>
&lt;li>조합(Combination): 다양한 분류의 클래스들을 조합하여 테스트 케이스를 생성한다.&lt;/li>
&lt;li>명세(Specification): 생성된 조합을 바탕으로 실제 테스트 케이스를 작성한다.&lt;/li>
&lt;/ol>
&lt;h3>특징&lt;span class="hx-absolute -hx-mt-20" id="특징">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>블랙박스 테스팅 방법으로, 다양한 유형의 시스템에 적용 가능하다.&lt;/li>
&lt;li>등가 분할(Equivalence Partitioning)과 경계값 분석(Boundary Value Analysis) 원칙을 활용한다.&lt;/li>
&lt;li>그래픽 기반 기법으로, 루트, 브랜치, 리프로 구성된 트리 구조를 사용한다.&lt;/li>
&lt;li>테스트 케이스 간의 관계를 시각적으로 표현하여 테스트 커버리지를 쉽게 이해할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>체계적인 접근: 테스트 프로세스에 구조화된 접근 방식을 제공한다.&lt;/li>
&lt;li>효율성: 테스트 케이스 설계와 생성 과정을 효율적으로 만든다.&lt;/li>
&lt;li>가시성: 테스트 케이스 간의 관계를 시각적으로 표현하여 이해도를 높인다.&lt;/li>
&lt;/ol>
&lt;h3>최근 발전&lt;span class="hx-absolute -hx-mt-20" id="최근-발전">&lt;/span>
&lt;a href="#%ec%b5%9c%ea%b7%bc-%eb%b0%9c%ec%a0%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>우선순위 기반 테스트 케이스 생성: 요소에 가중치를 할당하여 테스트 케이스의 우선순위를 결정할 수 있다.&lt;/li>
&lt;li>테스트 시퀀스 생성: 클래스 간 유효한 전이를 정의하여 자동으로 테스트 시퀀스를 생성할 수 있다.&lt;/li>
&lt;/ol>
&lt;p>CTM은 테스트 설계를 체계화하고 효율화하는 강력한 도구이지만, 복잡한 시스템에서는 트리가 매우 복잡해질 수 있다는 점에 유의해야 한다.&lt;br>
따라서 적절한 수준의 추상화와 분류가 중요하다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>