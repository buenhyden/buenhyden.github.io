<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>APIs on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/apis/</link>
    <description>Recent content in APIs on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 02 Jan 2025 05:36:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/apis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>APIs</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/</link>
      <pubDate>Thu, 02 Jan 2025 05:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/</guid>
      <description>&lt;h2 id=&#34;apis&#34;&gt;APIs&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Making API Calls</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/making-api-calls/</link>
      <pubDate>Thu, 02 Jan 2025 05:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/making-api-calls/</guid>
      <description>&lt;h2 id=&#34;making-api-calls&#34;&gt;Making API Calls&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Authentication</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/authentication/</link>
      <pubDate>Thu, 02 Jan 2025 05:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/authentication/</guid>
      <description>&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>ExpressJS vs. NestJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-nestjs/</link>
      <pubDate>Tue, 24 Dec 2024 10:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-nestjs/</guid>
      <description>&lt;h2 id=&#34;expressjs-vs-nestjs&#34;&gt;ExpressJS vs. NestJS&lt;/h2&gt;
&lt;p&gt;ExpressJS와 NestJS의 주요 특징들을 상세히 비교 분석하여 표로 정리해드리겠습니다.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;비교 기준&lt;/th&gt;
          &lt;th&gt;ExpressJS&lt;/th&gt;
          &lt;th&gt;NestJS&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;프레임워크 특성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;미니멀리스트, 유연한 Node.js 웹 프레임워크&lt;/td&gt;
          &lt;td&gt;TypeScript 기반의 구조화된 풀스택 프레임워크&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;아키텍처 스타일&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;자유로운 구조 (개발자가 직접 설계)&lt;/td&gt;
          &lt;td&gt;Angular 스타일의 모듈식 아키텍처 (강제됨)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;언어 지원&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;JavaScript 중심 (TypeScript도 사용 가능)&lt;/td&gt;
          &lt;td&gt;TypeScript 중심 (JavaScript도 사용 가능)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;학습 곡선&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;낮음 (시작하기 쉬움)&lt;/td&gt;
          &lt;td&gt;높음 (많은 개념과 패턴 학습 필요)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;기본 구조&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;최소한의 구조만 제공&lt;/td&gt;
          &lt;td&gt;모듈, 컨트롤러, 서비스 등 세분화된 구조&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;라우팅 예시&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;javascript app.get(&#39;/users&#39;, (req, res) =&amp;gt; { res.send(&#39;Users list&#39;); });&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;typescript @Controller(&#39;users&#39;) export class UsersController { @Get() findAll(): string { return &#39;Users list&#39;; } }&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;의존성 주입&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;없음 (수동으로 구현 필요)&lt;/td&gt;
          &lt;td&gt;내장된 강력한 DI 시스템 제공&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;데코레이터 지원&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;지원하지 않음&lt;/td&gt;
          &lt;td&gt;광범위한 데코레이터 지원&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;미들웨어 처리&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;직관적이고 단순한 미들웨어 체인&lt;/td&gt;
          &lt;td&gt;복잡하지만 강력한 미들웨어 시스템&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;테스트 용이성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;별도 테스트 도구 설정 필요&lt;/td&gt;
          &lt;td&gt;내장된 테스트 도구 제공&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;확장성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;수동 구성 필요&lt;/td&gt;
          &lt;td&gt;모듈 시스템을 통한 쉬운 확장&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;성능&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;매우 가벼움 (적은 오버헤드)&lt;/td&gt;
          &lt;td&gt;약간의 오버헤드 존재&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;실시간 처리&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;WebSocket 수동 구현 필요&lt;/td&gt;
          &lt;td&gt;WebSocket 데코레이터 제공&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;유효성 검사&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;외부 라이브러리 필요&lt;/td&gt;
          &lt;td&gt;내장 파이프를 통한 유효성 검사&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;문서화&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Swagger 등 수동 설정 필요&lt;/td&gt;
          &lt;td&gt;자동 API 문서 생성 지원&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;적합한 프로젝트&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;- 작은 규모의 프로젝트&lt;br&gt;- 빠른 프로토타이핑&lt;br&gt;- 마이크로서비스&lt;/td&gt;
          &lt;td&gt;- 대규모 엔터프라이즈 애플리케이션&lt;br&gt;- 복잡한 비즈니스 로직&lt;br&gt;- 팀 프로젝트&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;개발 생산성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;초기에는 빠르나 규모가 커지면 관리 어려움&lt;/td&gt;
          &lt;td&gt;초기 설정에 시간이 걸리나 장기적으로 생산성 높음&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;커뮤니티/생태계&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;매우 큰 커뮤니티, 풍부한 미들웨어&lt;/td&gt;
          &lt;td&gt;성장하는 커뮤니티, 내장 기능 많음&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;에러 처리&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;수동 구현 필요&lt;/td&gt;
          &lt;td&gt;내장된 예외 필터 시스템&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;데이터베이스 통합&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;ORM 선택 자유&lt;/td&gt;
          &lt;td&gt;TypeORM/Sequelize 등과 쉬운 통합&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;보안 기능&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;외부 미들웨어 필요&lt;/td&gt;
          &lt;td&gt;내장된 보안 기능 제공&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;모니터링/로깅&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;외부 도구 통합 필요&lt;/td&gt;
          &lt;td&gt;내장된 로깅 시스템 제공&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;선택 가이드:&lt;/p&gt;</description>
    </item>
    <item>
      <title>ExpressJS vs. FastAPI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-fastapi/</link>
      <pubDate>Tue, 24 Dec 2024 10:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-fastapi/</guid>
      <description>&lt;h2 id=&#34;expressjs-vs-fastapi&#34;&gt;ExpressJS vs. FastAPI&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>ExpressJS vs. Flask</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-flask/</link>
      <pubDate>Tue, 24 Dec 2024 10:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-flask/</guid>
      <description>&lt;h2 id=&#34;expressjs-vs-flask&#34;&gt;ExpressJS vs. Flask&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>ExpressJS vs. Django</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-django/</link>
      <pubDate>Tue, 24 Dec 2024 03:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-django/</guid>
      <description>&lt;h2 id=&#34;expressjs-vs-django&#34;&gt;ExpressJS vs. Django&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Fastify</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/fastify/</link>
      <pubDate>Fri, 22 Nov 2024 13:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/fastify/</guid>
      <description>Fastify는 Node.js를 위한 빠르고 낮은 오버헤드의 웹 프레임워크</description>
    </item>
    <item>
      <title>Koa</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/koa/</link>
      <pubDate>Fri, 22 Nov 2024 13:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/koa/</guid>
      <description>Node.js를 위한 경량 웹 프레임워크로, Express.js 팀에 의해 개발되었다. Koa는 더 작고, 더 표현력이 풍부하며, 더 강력한 웹 애플리케이션과 API의 기초를 제공하기 위해 설계되었다.</description>
    </item>
    <item>
      <title>Javascript Web Framework</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/</link>
      <pubDate>Fri, 22 Nov 2024 09:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/</guid>
      <description>Javascript Web Framework의 프론트엔드 영역과 백엔드 영역의 대표적인 프레임워크와 라이브러리에 대해 비교분석해본다.</description>
    </item>
    <item>
      <title>ExpressJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/</link>
      <pubDate>Fri, 22 Nov 2024 03:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/</guid>
      <description>Express.js는 Node.js를 위한 빠르고 개방적인 웹 프레임워크</description>
    </item>
    <item>
      <title>NestJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/nestjs/</link>
      <pubDate>Fri, 22 Nov 2024 01:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/nestjs/</guid>
      <description>Nest.js는 효율적이고 확장 가능한 Node.js 서버 측 애플리케이션을 구축하기 위한 프레임워크</description>
    </item>
  </channel>
</rss>
