<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Quality-Assurance on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/quality-assurance/</link>
    <description>Recent content in Quality-Assurance on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 30 Dec 2024 07:13:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/quality-assurance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Scenario Testing vs Use Case Testing</title>
      <link>https://buenhyden.github.io/til/2024/12/16/scenario-testing-vs-use-case-testing/</link>
      <pubDate>Mon, 16 Dec 2024 17:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/12/16/scenario-testing-vs-use-case-testing/</guid>
      <description>Scenario Testing과 Use Case Testing은 소프트웨어 테스팅 기법으로, 사용자 관점에서 시스템의 기능과 동작을 검증하는 데 사용된다.</description>
    </item>
    <item>
      <title>System Test vs End-to-End Test</title>
      <link>https://buenhyden.github.io/til/2024/12/27/system-test-vs-end-to-end-test/</link>
      <pubDate>Fri, 27 Dec 2024 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/12/27/system-test-vs-end-to-end-test/</guid>
      <description>System Testing과 End-to-End Testing은 소프트웨어 테스팅 과정에서 사용되는 두 가지 중요한 테스트 방법이다. 이 두 방법은 소프트웨어의 품질을 보장하기 위해 사용되지만, 그 범위와 목적에 차이가 있다.</description>
    </item>
    <item>
      <title>동적테스트(Dynamic Test) vs 정적테스트(Static Test)</title>
      <link>https://buenhyden.github.io/til/2024/11/28/dynamic-test-vs-static-test/</link>
      <pubDate>Thu, 28 Nov 2024 02:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/11/28/dynamic-test-vs-static-test/</guid>
      <description>소프트웨어 테스팅은 프로그램의 품질을 확인하고 오류를 찾아내는 과정.</description>
    </item>
    <item>
      <title>QA vs QC vs Testing</title>
      <link>https://buenhyden.github.io/til/2024/12/30/quality-assurance-vs-quality-control-vs-testing/</link>
      <pubDate>Mon, 30 Dec 2024 07:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/12/30/quality-assurance-vs-quality-control-vs-testing/</guid>
      <description>Quality Assurance (QA)는 제품이나 서비스의 품질을 보장하기 위한 계획적이고 체계적인 활동들의 집합이며, Quality Control (QC)는 개발된 제품이나 서비스가 정해진 품질 기준을 충족하는지 확인하는 활동이고, Testing은 소프트웨어가 예상대로 작동하는지 확인하는 구체적인 실행 활동이다.</description>
    </item>
    <item>
      <title>용량 테스트 (Volume Test)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/performance-test/volume-test/</link>
      <pubDate>Mon, 30 Dec 2024 02:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/performance-test/volume-test/</guid>
      <description>용량 테스트는 소프트웨어 시스템이 대량의 데이터를 처리할 때 어떻게 동작하는지 확인하는 성능 테스트의 한 유형이다.</description>
    </item>
    <item>
      <title>확장성 테스트 (Scalability Test)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/performance-test/scalability-test/</link>
      <pubDate>Mon, 30 Dec 2024 02:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/performance-test/scalability-test/</guid>
      <description>확장성 테스트는 소프트웨어 시스템이 증가하는 부하나 규모에 얼마나 잘 대응할 수 있는지를 평가하는 성능 테스트의 한 유형이다</description>
    </item>
    <item>
      <title>스파이크 테스트(Spike Test)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/performance-test/spike-test/</link>
      <pubDate>Mon, 30 Dec 2024 01:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/performance-test/spike-test/</guid>
      <description>스파이크 테스트는 시스템에 갑작스럽고 극단적인 부하를 주어 시스템의 반응을 측정하는 성능 테스트의 한 유형이다.</description>
    </item>
    <item>
      <title>지속성 테스트(Endurance Test)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/performance-test/endurance-test/</link>
      <pubDate>Mon, 30 Dec 2024 01:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/performance-test/endurance-test/</guid>
      <description>지속성 테스트는 소프트웨어 시스템이 장기간 동안 지속적인 부하 상태에서 어떻게 동작하는지 확인하는 성능 테스트의 한 유형이다</description>
    </item>
    <item>
      <title>Black-box Test and White-box Test</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-test-and-white-box-test/</link>
      <pubDate>Sat, 21 Dec 2024 02:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-test-and-white-box-test/</guid>
      <description>Black-box Testing(블랙박스 테스팅)은 소프트웨어의 내부 구조나 동작 원리를 모르는 상태에서 진행하는 테스트 방식이다. 반면 White-box Testing(화이트박스 테스팅)은 소프트웨어의 내부 로직을 알고 있는 상태에서 진행하는 테스트이다.</description>
    </item>
    <item>
      <title>Security Vulnerability Scanning</title>
      <link>https://buenhyden.github.io/posts/qa/qc/technical-verification/security-vulnerability-scanning/</link>
      <pubDate>Tue, 17 Dec 2024 16:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/technical-verification/security-vulnerability-scanning/</guid>
      <description>보안 취약점 스캔은 자동화된 도구를 사용하여 시스템과 소프트웨어의 보안 약점을 찾아내는 과정으로, 시스템, 네트워크, 소프트웨어의 보안 취약점을 식별하고 분석하는 프로세스이다</description>
    </item>
    <item>
      <title>Formal Review and Informal Review</title>
      <link>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/formal-review-and-informal-review/</link>
      <pubDate>Sun, 15 Dec 2024 05:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/formal-review-and-informal-review/</guid>
      <description>소프트웨어 개발 과정에서 품질 보증을 위해 사용되는 두 가지 주요 검토 방식이다.</description>
    </item>
    <item>
      <title>Desk Check</title>
      <link>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/informal-review/desk-check/</link>
      <pubDate>Sat, 14 Dec 2024 07:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/informal-review/desk-check/</guid>
      <description>데스크 체크는 가장 기본적인 비형식 리뷰 방법 중 하나로, 개발자가 자신의 코드를 스스로 검토하는 과정</description>
    </item>
    <item>
      <title>워크스루(Walkthrough)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/informal-review/walkthrough/</link>
      <pubDate>Sat, 14 Dec 2024 07:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/informal-review/walkthrough/</guid>
      <description>워크스루는 코드 작성자가 다른 개발자들에게 코드를 단계별로 설명하며 진행하는 비형식적 리뷰 방식</description>
    </item>
    <item>
      <title>코드 리뷰 (Code Review)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/informal-review/code-review/</link>
      <pubDate>Sat, 14 Dec 2024 07:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/informal-review/code-review/</guid>
      <description>코드 리뷰는 개발자가 작성한 코드를 다른 개발자들이 검토하고 피드백을 제공하는 과정이다.</description>
    </item>
    <item>
      <title>패스 어라운드(Pass Around)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/informal-review/pass-around/</link>
      <pubDate>Sat, 14 Dec 2024 07:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/informal-review/pass-around/</guid>
      <description>패스 어라운드는 비형식적 코드 리뷰의 한 형태로, 코드가 여러 리뷰어들 사이를 &amp;#34;돌아다니며&amp;#34; 검토되는 방식을 말한다.</description>
    </item>
    <item>
      <title>감사(Audit)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/formal-review/audit/</link>
      <pubDate>Sat, 14 Dec 2024 07:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/formal-review/audit/</guid>
      <description>독립적인 검토자들이 소프트웨어 산출물과 프로세스를 체계적으로 검사하고 평가하는 공식적인 검토 과정이다.</description>
    </item>
    <item>
      <title>페어 프로그래밍(Pair Programming)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/informal-review/pair-programming/</link>
      <pubDate>Sat, 14 Dec 2024 07:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/informal-review/pair-programming/</guid>
      <description>페어 프로그래밍은 두 명의 개발자가 하나의 컴퓨터에서 함께 작업하는 협력적인 개발 방식</description>
    </item>
    <item>
      <title>Inspection</title>
      <link>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/formal-review/inspection/</link>
      <pubDate>Sat, 14 Dec 2024 07:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/formal-review/inspection/</guid>
      <description>인스펙션은 FTR(Formal Technical Review)라고도 불리며, 정형화된 절차와 체크리스트를 사용하여 소프트웨어 산출물의 결함을 찾아내는 방법이다.</description>
    </item>
    <item>
      <title>관리 검토(Management Review)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/formal-review/management-review/</link>
      <pubDate>Sat, 14 Dec 2024 07:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/formal-review/management-review/</guid>
      <description>관리 검토는 소프트웨어 개발 프로젝트의 진행 상황, 목표 달성도, 리스크 등을 경영진과 프로젝트 관리자가 검토하는 공식적인 프로세스</description>
    </item>
    <item>
      <title>기술 검토(Technical Review)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/formal-review/technical-review/</link>
      <pubDate>Sat, 14 Dec 2024 07:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/formal-review/technical-review/</guid>
      <description>기술 검토는 소프트웨어의 기술적 측면을 전문가들이 체계적으로 평가하는 공식적인 검토 프로세스이다.</description>
    </item>
    <item>
      <title>Use Case Testing</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/use-case-testing/</link>
      <pubDate>Thu, 12 Dec 2024 17:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/use-case-testing/</guid>
      <description>유즈케이스 테스팅은 유즈케이스나 비즈니스 시나리오를 기반으로 테스트를 명세화하는 블랙박스 테스트 설계 기법</description>
    </item>
    <item>
      <title>Boundary Value Analysis</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/boundary-value-analysis/</link>
      <pubDate>Thu, 12 Dec 2024 09:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/boundary-value-analysis/</guid>
      <description>경계값 분석은 입력 또는 출력 범위의 경계 근처에서 결함이 발생할 가능성이 높다는 경험적 관찰에 기반한 테스트 기법</description>
    </item>
    <item>
      <title>Cause-Effect Graphing</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/cause-effect-graphing/</link>
      <pubDate>Thu, 12 Dec 2024 09:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/cause-effect-graphing/</guid>
      <description>원인-결과 그래프 검사(Cause-Effect Graph Testing)는 블랙박스 테스트 기법 중 하나로, 입력 조건(원인)과 출력 결과(결과) 사이의 관계를 체계적으로 분석하고 모델링하여 효과적인 테스트 케이스를 도출하는 방법.</description>
    </item>
    <item>
      <title>Decision Table Testing</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/decision-table-testing/</link>
      <pubDate>Thu, 12 Dec 2024 09:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/decision-table-testing/</guid>
      <description>여러 조건(conditions)과 그에 따른 행동(actions)의 모든 가능한 조합을 표 형태로 정리하여 테스트 케이스를 도출하는 기법</description>
    </item>
    <item>
      <title>State Transition Testing</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/state-transition-testing/</link>
      <pubDate>Thu, 12 Dec 2024 09:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/state-transition-testing/</guid>
      <description>상태 전이 테스트는 시스템이나 객체의 상태 변화를 모델링하고, 이벤트에 따른 상태 전이와 그 결과를 검증하는 기법이다.</description>
    </item>
    <item>
      <title>비교 검사(Comparison Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/comparison-testing/</link>
      <pubDate>Thu, 12 Dec 2024 00:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/comparison-testing/</guid>
      <description>비교 검사는 블랙박스 테스팅 기법 중 하나로, 동일한 기능을 수행하는 여러 버전의 소프트웨어나 시스템을 비교하여 테스트하는 방법으로 동일한 입력값을 여러 버전의 소프트웨어에 제공하고, 그 출력값을 비교하는 방식으로 진행된다.</description>
    </item>
    <item>
      <title>Function Coverage</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/function-coverage/</link>
      <pubDate>Wed, 11 Dec 2024 10:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/function-coverage/</guid>
      <description>함수 커버리지는 프로그램 내의 모든 함수가 테스트 중에 최소한 한 번 이상 호출되었는지를 측정하는 지표이다.</description>
    </item>
    <item>
      <title>Requirements-based Testing</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/requirements-based-testing/</link>
      <pubDate>Wed, 11 Dec 2024 10:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/requirements-based-testing/</guid>
      <description>시스템의 요구사항을 기반으로 테스트 케이스를 설계하고 수행하는 방법</description>
    </item>
    <item>
      <title>Metamorphic Testing</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/metamorphic-testing/</link>
      <pubDate>Wed, 11 Dec 2024 10:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/metamorphic-testing/</guid>
      <description>메타모픽 테스팅은 소프트웨어의 의도된 기능에 대한 필수적인 속성인 메타모픽 관계(Metamorphic Relations, MRs)를 활용하여 테스트를 수행</description>
    </item>
    <item>
      <title>분류 트리 방법 (Classification Tree Method)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/classification-tree-method/</link>
      <pubDate>Wed, 11 Dec 2024 09:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/classification-tree-method/</guid>
      <description>CTM은 1993년 Grimm과 Grochtmann에 의해 개발된 테스트 설계 방법으로, 소프트웨어의 테스트 관련 측면을 체계적으로 분류하고 조합하여 테스트 케이스를 생성한다.</description>
    </item>
    <item>
      <title>Equivalence Partitioning</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/equivalence-partitioning/</link>
      <pubDate>Wed, 11 Dec 2024 09:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/equivalence-partitioning/</guid>
      <description>동등 분할은 입력 또는 출력 데이터를 의미 있는 그룹으로 나누어 테스트하는 기법으로 핵심 아이디어는 같은 그룹에 속한 데이터는 프로그램에서 동일한 방식으로 처리될 것이라는 가정에 기반한다.</description>
    </item>
    <item>
      <title>Scenario Testing</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/scenario-testing/</link>
      <pubDate>Wed, 11 Dec 2024 09:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/scenario-testing/</guid>
      <description>시나리오 테스팅은 실제 상황을 시뮬레이션하여 소프트웨어를 검증하는 강력한 기술이다. 개별 기능에 초점을 맞춘 기존 테스트 케이스와 달리 시나리오 테스트에서는 일련의 이벤트나 상호 작용이 발생할 때 시스템이 어떻게 작동하는지 검사한다.</description>
    </item>
    <item>
      <title>조합 테스트 설계 기법 (Combinatorial Test Design Techniques)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/combinatorial-test-design-techniques/</link>
      <pubDate>Wed, 11 Dec 2024 09:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/combinatorial-test-design-techniques/</guid>
      <description>조합 테스트 설계는 입력 매개변수의 다양한 조합을 사용하여 소프트웨어 애플리케이션을 테스트하는 방법이다.</description>
    </item>
    <item>
      <title>랜덤 테스팅(Random Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/random-testing/</link>
      <pubDate>Wed, 11 Dec 2024 07:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/random-testing/</guid>
      <description>임의로 생성된 입력 데이터를 사용하여 프로그램을 테스트하는 방법</description>
    </item>
    <item>
      <title>구문 테스팅(Syntax Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/syntax-testing/</link>
      <pubDate>Wed, 11 Dec 2024 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/syntax-testing/</guid>
      <description>구문 테스팅(Syntax Testing)은 화이트박스 테스트 기법 중 하나로, 소프트웨어의 내부 구조와 코드를 검증하는 방법</description>
    </item>
    <item>
      <title>페어와이즈 테스팅(Pairwise Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/pairwise-testing/</link>
      <pubDate>Wed, 11 Dec 2024 07:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/specification-based-test/pairwise-testing/</guid>
      <description>페어와이즈 테스팅은 모든 가능한 입력 값 조합을 테스트하는 대신, 입력 매개변수의 모든 쌍(pair)을 최소한 한 번씩 테스트하는 기법이다.</description>
    </item>
    <item>
      <title>Path Coverage</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/path-coverage/</link>
      <pubDate>Tue, 10 Dec 2024 15:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/path-coverage/</guid>
      <description>프로그램의 모든 가능한 실행 경로를 최소한 한 번씩 테스트하는 것을 목표로 한다.</description>
    </item>
    <item>
      <title>조건 커버리지 (Condition Coverage)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/condition-coverage/</link>
      <pubDate>Tue, 10 Dec 2024 15:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/condition-coverage/</guid>
      <description>조건 커버리지는 결정 포인트 내의 각 개별 조건식이 참(true)과 거짓(false)의 결과를 최소한 한 번씩 갖도록 테스트하는 기법</description>
    </item>
    <item>
      <title>Decision Coverage</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/decision-coverage/</link>
      <pubDate>Tue, 10 Dec 2024 15:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/decision-coverage/</guid>
      <description>결정 커버리지는 프로그램의 모든 결정 포인트(조건문)에서 전체 조건식이 최소한 한 번씩 참(True)과 거짓(False)의 결과를 가지도록 테스트하는 방법</description>
    </item>
    <item>
      <title>Statement Coverage</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/statement-coverage/</link>
      <pubDate>Tue, 10 Dec 2024 15:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/statement-coverage/</guid>
      <description>프로그램을 구성하는 모든 문장들이 최소한 한 번은 실행될 수 있는 입력 데이터를 테스트 데이터로 선정하는 기준</description>
    </item>
    <item>
      <title>다중 조건 테스팅 (Branch Condition Combination Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/branch-condition-combination-testing/</link>
      <pubDate>Tue, 10 Dec 2024 10:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/branch-condition-combination-testing/</guid>
      <description>다중 조건 테스팅(Branch Condition Combination Testing)은 화이트박스 테스트 기법 중 하나로, 조건문 내의 모든 가능한 조건 조합을 테스트하는 방법이다</description>
    </item>
    <item>
      <title>Data Flow Testing</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/data-flow-testing/</link>
      <pubDate>Tue, 10 Dec 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/data-flow-testing/</guid>
      <description>데이터 흐름 테스팅(Data Flow Testing)은 소프트웨어 테스트 기법 중 하나로, 프로그램 내에서 데이터의 정의와 사용에 초점을 맞춰 테스트를 수행하는 방법</description>
    </item>
    <item>
      <title>변경 조건/결정 커버리지 테스팅 (Modified Condition/Decision Coverage Testing, MC/DC)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/modified-condition-decision-coverage-testing/</link>
      <pubDate>Tue, 10 Dec 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/white-box-testing/modified-condition-decision-coverage-testing/</guid>
      <description>MC/DC는 결정문 내의 각 조건이 독립적으로 결정의 결과에 영향을 미치는지 확인하는 테스트 기법</description>
    </item>
    <item>
      <title>체크리스트 기반 테스팅 (Checklist-based Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/experience-based-test/checklist-based-testing/</link>
      <pubDate>Sun, 08 Dec 2024 08:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/experience-based-test/checklist-based-testing/</guid>
      <description>Checklist-based Testing은 소프트웨어 테스팅 기법 중 하나로, 미리 정의된 체크리스트를 사용하여 체계적으로 테스트를 수행하는 방법</description>
    </item>
    <item>
      <title>탐색적 테스팅(Exploratory Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/experience-based-test/exploratory-testing/</link>
      <pubDate>Sun, 08 Dec 2024 07:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/experience-based-test/exploratory-testing/</guid>
      <description>탐색적 테스팅(Exploratory Testing)은 소프트웨어 테스팅의 한 접근 방식으로, 테스터의 창의성, 경험, 직관을 활용하여 소프트웨어를 자유롭게 탐색하며 결함을 발견하는 과정</description>
    </item>
    <item>
      <title>오류 예측 검사(Error Guessing)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/experience-based-test/error-guessing/</link>
      <pubDate>Sun, 08 Dec 2024 00:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/experience-based-test/error-guessing/</guid>
      <description>오류 예측 검사(Error Guessing)는 블랙박스 테스트 기법 중 하나로, 테스터의 **경험, 지식, 직관**을 활용하여 소프트웨어에서 발생할 가능성이 높은 오류를 예측하고 이를 기반으로 테스트 케이스를 설계하는 방법</description>
    </item>
    <item>
      <title>성능 프로파일링 (Performance Profiling)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/technical-verification/performance-profiling/</link>
      <pubDate>Tue, 03 Dec 2024 16:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/technical-verification/performance-profiling/</guid>
      <description>성능 프로파일링(Performance Profiling)은 소프트웨어의 실행 동작을 분석하여 성능을 측정하고 개선하는 기술이다</description>
    </item>
    <item>
      <title>Beta Test</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/fundamental-testing/acceptance-test/beta-test/</link>
      <pubDate>Tue, 03 Dec 2024 06:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/fundamental-testing/acceptance-test/beta-test/</guid>
      <description>베타 테스트는 소프트웨어 개발 주기의 마지막 단계에서 수행되는 테스트로, 제품이 일반 대중에게 공개되기 전 최종 단계에서 실제 사용자들이 참여하여 진행하는 테스트이다.</description>
    </item>
    <item>
      <title>Alpha Test</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/fundamental-testing/acceptance-test/alpha-test/</link>
      <pubDate>Tue, 03 Dec 2024 06:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/fundamental-testing/acceptance-test/alpha-test/</guid>
      <description>알파 테스트는 소프트웨어 개발 주기의 후반부에 수행되는 중요한 테스트 단계로 개발 중인 소프트웨어를 실제 환경과 유사한 조건에서 테스트하는 과정이다.</description>
    </item>
    <item>
      <title>Fakes</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-mgmt/test-double/fakes/</link>
      <pubDate>Sun, 01 Dec 2024 21:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-mgmt/test-double/fakes/</guid>
      <description>실제 객체의 간단한 구현을 제공하는 테스트용 객체</description>
    </item>
    <item>
      <title>Dummy Objects</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-mgmt/test-double/dummy-objects/</link>
      <pubDate>Sun, 01 Dec 2024 21:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-mgmt/test-double/dummy-objects/</guid>
      <description>테스트 과정에서 실제로는 사용되지 않지만 메서드의 파라미터를 채우기 위해 전달되는 객체</description>
    </item>
    <item>
      <title>Spies</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-mgmt/test-double/spies/</link>
      <pubDate>Sun, 01 Dec 2024 21:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-mgmt/test-double/spies/</guid>
      <description>실제 객체의 메서드 호출을 추적하고 기록하는 데 사용</description>
    </item>
    <item>
      <title>부하 테스트(Load Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/performance-test/load-testing/</link>
      <pubDate>Sun, 01 Dec 2024 14:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/performance-test/load-testing/</guid>
      <description>부하 테스트는 소프트웨어 시스템이 예상되는 사용자 부하 하에서 어떻게 동작하는지 확인하는 성능 테스트의 한 유형이다.</description>
    </item>
    <item>
      <title>스트레스 테스트 (Stress Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/performance-test/stress-testing/</link>
      <pubDate>Sun, 01 Dec 2024 14:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/performance-test/stress-testing/</guid>
      <description>스트레스 테스트는 소프트웨어 시스템을 극한의 조건에서 테스트하여 그 한계를 파악하는 성능 테스트의 한 유형이다.</description>
    </item>
    <item>
      <title>회귀 테스트 (Regression Test)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/regression-test/</link>
      <pubDate>Sat, 30 Nov 2024 14:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/regression-test/</guid>
      <description>회귀 테스트는 소프트웨어의 변경이나 수정 후에 기존 기능이 여전히 올바르게 작동하는지 확인하는 테스트이다.</description>
    </item>
    <item>
      <title>사용성 테스트 (Usability Test)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/usability-test/</link>
      <pubDate>Sat, 30 Nov 2024 14:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/usability-test/</guid>
      <description>사용성 테스트는 제품이나 서비스를 실제 사용자가 사용해보면서 그 과정을 관찰하고 분석하는 테스트 방법이다.</description>
    </item>
    <item>
      <title>Stubs</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-mgmt/test-double/stubs/</link>
      <pubDate>Sat, 30 Nov 2024 09:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-mgmt/test-double/stubs/</guid>
      <description>테스트에서 사용되는 기법으로, 실제 객체나 아직 구현되지 않은 코드를 대신하여 미리 정의된 응답을 제공하는 메커니즘</description>
    </item>
    <item>
      <title>Mocks</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/test-mgmt/test-double/mocks/</link>
      <pubDate>Sat, 30 Nov 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/test-mgmt/test-double/mocks/</guid>
      <description>소프트웨어 테스트에서 사용되는 중요한 기법으로, 실제 객체를 모방하는 가짜 객체를 만들어 테스트하는 방법</description>
    </item>
    <item>
      <title>호환성 테스트 (Compatibility Test)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/compatibility-test/</link>
      <pubDate>Sat, 30 Nov 2024 03:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/compatibility-test/</guid>
      <description>호환성 테스트는 소프트웨어가 다양한 하드웨어, 운영체제, 네트워크 환경 등에서 올바르게 작동하는지 확인하기 위해 수행되는 테스트이다.</description>
    </item>
    <item>
      <title>시스템 테스트 (System test)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/fundamental-testing/system-test/</link>
      <pubDate>Fri, 29 Nov 2024 06:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/fundamental-testing/system-test/</guid>
      <description>개발된 소프트웨어 시스템 전체를 검사하는 과정으로, 모든 개별 모듈과 구성 요소가 통합된 후 전체 시스템이 예상대로 작동하는지 확인한다.</description>
    </item>
    <item>
      <title>보안 테스트 (Security Test)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/security-test/</link>
      <pubDate>Fri, 29 Nov 2024 05:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/security-test/</guid>
      <description>소프트웨어 시스템의 보안성을 평가하기 위한 일련의 활동</description>
    </item>
    <item>
      <title>스모크 테스트 (Smoke Test)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/smoke-test/</link>
      <pubDate>Fri, 29 Nov 2024 02:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/smoke-test/</guid>
      <description>스모크 테스트는 소프트웨어의 가장 중요한 기능이 제대로 작동하는지 빠르게 확인하는 예비 테스트이다</description>
    </item>
    <item>
      <title>기능 테스트 (Functional Test)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/functional-test/</link>
      <pubDate>Fri, 29 Nov 2024 02:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/functional-test/</guid>
      <description>기능 테스트는 소프트웨어가 사용자의 요구사항을 충족하는지 확인하는 테스트 방법이다. 이는 시스템이 &amp;#34;무엇을 하는지&amp;#34;에 초점을 맞추며, 사용자 관점에서 소프트웨어의 기능을 검증한다.</description>
    </item>
    <item>
      <title>엔드투엔드 테스트(End-to-End Test, E2E Test)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/end-to-end-test/</link>
      <pubDate>Fri, 29 Nov 2024 02:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/end-to-end-test/</guid>
      <description>이는 사용자의 관점에서 전체 애플리케이션의 흐름을 테스트하여 모든 구성 요소가 올바르게 작동하는지 확인한다.</description>
    </item>
    <item>
      <title>통합 테스트 (Integration Test)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/fundamental-testing/integration-test/</link>
      <pubDate>Fri, 29 Nov 2024 02:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/fundamental-testing/integration-test/</guid>
      <description>통합 테스트는 소프트웨어 개발 과정에서 개별적으로 테스트된 모듈들을 결합하여 전체 시스템으로서의 상호작용을 검증하는 과정이다</description>
    </item>
    <item>
      <title>단위 테스트 (Unit Test)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/fundamental-testing/unit-test/</link>
      <pubDate>Fri, 29 Nov 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/fundamental-testing/unit-test/</guid>
      <description>단위 테스트는 소프트웨어의 가장 작은 단위인 개별 모듈이나 컴포넌트를 독립적으로 테스트하는 과정이다.</description>
    </item>
    <item>
      <title>Validation and Verification</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/validation-and-verification/</link>
      <pubDate>Thu, 28 Nov 2024 08:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/validation-and-verification/</guid>
      <description>Verification은 &amp;#34;제품을 올바르게 만들고 있는가?&amp;#34;를 확인하는 과정이고, Validation은 &amp;#34;올바른 제품을 만들고 있는가?&amp;#34;를 확인하는 과정이다.</description>
    </item>
    <item>
      <title>정적 코드 분석 (Static Code analysis)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/technical-verification/static-code-analysis/</link>
      <pubDate>Thu, 28 Nov 2024 06:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/technical-verification/static-code-analysis/</guid>
      <description>정적 코드 분석은 프로그램을 실행하지 않고 소스 코드를 분석하여 잠재적인 결함, 취약점, 코딩 표준 위반 등을 찾아내는 기술이다</description>
    </item>
    <item>
      <title>소프트웨어 라이선스 (Software License)</title>
      <link>https://buenhyden.github.io/posts/qa/standards-and-policies/software-license/</link>
      <pubDate>Fri, 01 Nov 2024 12:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/standards-and-policies/software-license/</guid>
      <description>소프트웨어의 사용, 수정, 배포에 대한 권리와 제한을 정의하는 법적 도구</description>
    </item>
  </channel>
</rss>
