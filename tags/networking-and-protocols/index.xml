<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Networking-and-Protocols on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/networking-and-protocols/</link>
    <description>Recent content in Networking-and-Protocols on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.151.2</generator>
    <language>en</language>
    <lastBuildDate>Thu, 02 Oct 2025 13:55:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/networking-and-protocols/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/web/</link>
      <pubDate>Wed, 04 Dec 2024 12:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/web/</guid>
      <description>Web(월드 와이드 웹)은 인터넷을 통해 접근할 수 있는 정보의 거대한 네트워크이다.</description>
    </item>
    <item>
      <title>OSI Model</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/network-models/osi-model/</link>
      <pubDate>Wed, 16 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/network-models/osi-model/</guid>
      <description>OSI 7계층은 통신 기능을 물리→데이터링크→네트워크→전송→세션→표현→응용의 7단계로 분리한 개념적 참조모델(ISO/IEC 7498-1)이다. 계층별 캡슐화와 표준화로 상호운용성·문제추적·설계 기준을 제공하며, 실제 구현은 TCP/IP 모델과 혼재되어 사용된다.</description>
    </item>
    <item>
      <title>TCP/IP Model</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/network-models/tcp-ip-model/</link>
      <pubDate>Thu, 17 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/network-models/tcp-ip-model/</guid>
      <description>TCP/IP 4계층 모델은 네트워크 액세스·인터넷·전송·응용의 네 계층으로 구성된 실무 기준 프로토콜 스택이다. 각 계층은 캡슐화로 역할을 분리해 주소 지정·라우팅·신뢰성·서비스 제공을 담당하며, QUIC/HTTP3 같은 현대 전송 기술도 이 구조 내에서 기능적으로 자리잡는다.</description>
    </item>
    <item>
      <title>OSI vs.TCP/IP Model</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/network-models/osi-vs-tcp-ip-model/</link>
      <pubDate>Sat, 19 Oct 2024 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/network-models/osi-vs-tcp-ip-model/</guid>
      <description>TCP/IP는 인터넷의 실무적 구현을 지배하는 간결한 4계층 모델로 프로토콜 매핑과 상호운용성에 최적화되어 있다. OSI는 7계층으로 개념적 분해와 교육·설계에 유리하다. 실무에선 TCP/IP를 기준으로 구현하되 OSI 사고틀로 설계·분석하는 병행 접근이 효과적이다.</description>
    </item>
    <item>
      <title>PDU(Protocol Data Unit, 프로토콜 데이터 단위)</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/data-transmission/pdu/</link>
      <pubDate>Thu, 02 Oct 2025 13:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/data-transmission/pdu/</guid>
      <description>PDU(Protocol Data Unit)는 각 계층이 *상위 계층의 SDU(Service Data Unit)를 자신의 제어정보(PCI: Protocol Control Information)로 감싸* 만들어 내는 전송 단위다. 계층마다 명칭·형식·오류제어가 달라지며, MTU/MSS, 단편화, 오프로딩(TSO/GRO) 등 성능·신뢰·보안 이슈와 직결된다.</description>
    </item>
    <item>
      <title>SDU(Service Data Unit, 서비스 데이터 단위)</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/data-transmission/pdu/sdu/</link>
      <pubDate>Thu, 02 Oct 2025 13:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/data-transmission/pdu/sdu/</guid>
      <description>SDU(Service Data Unit)는 네트워크 계층 구조에서 상위 계층이 하위 계층에 전달하는 데이터 단위로, 각 계층은 이 SDU를 수신해 헤더를 덧붙여 PDU(Protocol Data Unit)로 변환하여 전송한다. 이 과정은 데이터 전송 효율 및 신뢰성을 높이며, OSI 모델 등 다양한 네트워크 아키텍처에서 핵심적인 역할을 한다.</description>
    </item>
    <item>
      <title>Socket Address</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/socket-address/</link>
      <pubDate>Fri, 05 Sep 2025 04:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/socket-address/</guid>
      <description>소켓 주소는 통신 엔드포인트 식별자이며 주소 패밀리(AFam), IP 주소(IPv4/IPv6/Unix), 포트 번호(16비트, 네트워크 바이트순서), 필요시 스코프 정보를 포함한다. bind/connect/accept/getpeername/getsockname 호출의 기본 인자로 작동하고 소스·목적지의 4-튜플로 세션을 규정해 라우팅·보안·디버깅에 핵심 역할을 한다.</description>
    </item>
    <item>
      <title>Port Address</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/port-address/</link>
      <pubDate>Thu, 04 Sep 2025 02:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/port-address/</guid>
      <description>포트 주소는 전송 계층에서 서비스/프로세스를 구분하는 16비트 값이다. IANA가 시스템·등록·동적 범위를 관리한다. TCP·UDP·SCTP·DCCP는 헤더의 출발지/목적지 포트로 다중 통신을 지원하며, ICMP는 포트를 쓰지 않는다. NAT의 NAPT는 포트 변환으로 다수 호스트를 한 공인 IP에 연결한다.</description>
    </item>
    <item>
      <title>Addressing</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/</link>
      <pubDate>Thu, 04 Sep 2025 02:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/</guid>
      <description>네트워크 주소 지정은 노드와 서비스를 고유 식별해 라우팅과 통신을 가능하게 하는 체계다. MAC·IP·포트·DNS·DHCP·ARP/NDP·NAT 등으로 구성되며, 주소계획(CIDR/서브넷), IPv6 전환, 보안(RPKI/소스검증), 프라이버시 및 클라우드·컨테이너 환경의 오버레이 전략이 핵심 고려사항이다.</description>
    </item>
    <item>
      <title>Traffic Management</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/performance-optimization/traffic-management/</link>
      <pubDate>Thu, 28 Aug 2025 04:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/performance-optimization/traffic-management/</guid>
      <description>트래픽 관리는 네트워크와 애플리케이션 전 구간에서 데이터 흐름을 제어하고 최적화해 성능, 안정성, 보안을 보장하는 기술 체계다. QoS, AQM, 혼잡 제어, 로드 밸런싱, Rate Limiting, 서비스 메시 등이 활용되며, ECN·DiffServ·QUIC 같은 표준과 AI 기반 자동화가 최신 동향이다.</description>
    </item>
    <item>
      <title>Networking &amp; Protocols</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/</link>
      <pubDate>Fri, 22 Aug 2025 06:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/</guid>
      <description></description>
    </item>
    <item>
      <title>Event Broker</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/message-infrastructure/message-brokers-vs-event-brokers/event-broker/</link>
      <pubDate>Fri, 18 Jul 2025 05:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/message-infrastructure/message-brokers-vs-event-brokers/event-broker/</guid>
      <description>이벤트 브로커는 이벤트 발행자와 구독자 간의 메시지 교환을 중개하는 미들웨어로, 비동기 통신, 실시간 데이터 분배, 서비스 간 결합도 감소, 확장성 및 장애 복원력을 제공한다. Pub/Sub, 스트리밍, 다양한 QoS(서비스 품질) 와 같은 고급 기능을 지원하며, 현대 백엔드 아키텍처의 핵심 역할을 담당한다.</description>
    </item>
    <item>
      <title>Message Broker</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/message-infrastructure/message-brokers-vs-event-brokers/message-broker/</link>
      <pubDate>Fri, 18 Jul 2025 05:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/message-infrastructure/message-brokers-vs-event-brokers/message-broker/</guid>
      <description>메시지 브로커 (Message Broker) 는 송신자 (Sender) 와 수신자 (Receiver) 간의 메시지를 비동기적으로 중개하고 라우팅하는 미들웨어이다. 큐 (Queue) 나 토픽 (Topic) 기반의 메시지 전달로 시스템 간 결합도를 낮추고, 신뢰성, 확장성, 장애 복원력 있는 데이터 통신을 지원한다.</description>
    </item>
    <item>
      <title>Event Broker vs. Message Broker</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/message-infrastructure/message-brokers-vs-event-brokers/</link>
      <pubDate>Fri, 18 Jul 2025 05:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/message-infrastructure/message-brokers-vs-event-brokers/</guid>
      <description>Event Broker 와 Message Broker 는 분산 시스템에서 애플리케이션 간 비동기 통신을 담당하는 미들웨어이다.  Message Broker 는 전통적인 큐 기반 메시지 전달에 특화되어 있으며, Event Broker 는 이벤트 스트리밍과 로그 기반 아키텍처를 통해 대용량 실시간 데이터 처리에 최적화되어 있다.</description>
    </item>
    <item>
      <title>Cross-Layer Functions</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/network-models/cross-layer-functions/</link>
      <pubDate>Mon, 12 May 2025 03:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/network-models/cross-layer-functions/</guid>
      <description>Cross-Layer Functions는 계층 경계의 정보를 선택적으로 공유·연동해 성능, 지연, 전력, 보안 등을 전역 최적화하는 설계 방식이다. 무선·IoT·V2X·엣지 AI 등에서 활용되며, DiffServ/ECN/PMTUD/QUIC/5G QoS 등 표준과의 연계 및 SDN·미들웨어 기반 제어로 구현된다. 이점(효율·QoS 향상)과 리스크(복잡성·상호운용성·보안)를 균형 있게 설계해야 효과적이다</description>
    </item>
    <item>
      <title>IP Address</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/ip-address/</link>
      <pubDate>Thu, 24 Apr 2025 06:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/ip-address/</guid>
      <description>IP 주소는 네트워크의 식별자이자 위치 정보로, IPv4/IPv6·CIDR·서브넷팅으로 구조화된다. DHCP/SLAAC로 배포하고 DNS/ARP·NDP로 해석한다. IPv4 고갈로 NAT가 쓰이지만 가시성·보안·운영 영향을 고려해 IPAM·로그·IPv6 전환 정책을 병행해야 한다.</description>
    </item>
    <item>
      <title>Message Systems</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/message-infrastructure/message-systems/</link>
      <pubDate>Tue, 22 Apr 2025 13:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/message-infrastructure/message-systems/</guid>
      <description>메시징 시스템은 분산 애플리케이션의 구성 요소 간 비동기 통신을 지원하여 결합도를 낮추고, 신뢰성·확장성·유연성을 제공합니다. 메시지 큐, 이벤트 스트리밍, 태스크 큐 등 다양한 형태가 존재하며, 실시간 데이터 처리, 작업 분산, 장애 복원력 등 다양한 요구에 대응한다.</description>
    </item>
    <item>
      <title>Cloud Networking</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/modern-networking/cloud-networking/</link>
      <pubDate>Sun, 20 Oct 2024 17:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/modern-networking/cloud-networking/</guid>
      <description>클라우드 네트워킹은 클라우드 컴퓨팅 환경에서 리소스들을 연결하고 통신할 수 있게 해주는 인프라를 의미한다.</description>
    </item>
    <item>
      <title>네트워크 기능 가상화(Network Functions Virtualization, NFV)</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/modern-networking/network-virtualization/nfv/</link>
      <pubDate>Sun, 20 Oct 2024 02:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/modern-networking/network-virtualization/nfv/</guid>
      <description>NFV는 전통적으로 전용 하드웨어 장비에서 실행되던 네트워크 기능들을 가상화하여 소프트웨어로 구현하는 네트워크 아키텍처 개념이다.</description>
    </item>
    <item>
      <title>서브넷팅 (Subnetting)</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/core-protocols/internet-layer/internet-protocol/ip-fundamentals/subnetting--vlsm/subnetting/</link>
      <pubDate>Thu, 17 Oct 2024 13:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/core-protocols/internet-layer/internet-protocol/ip-fundamentals/subnetting--vlsm/subnetting/</guid>
      <description>서브넷팅(Subnetting)은 네트워크를 더 작은 단위의 네트워크로 분할하는 기술로 IP 주소의 효율적인 사용과 네트워크 관리를 개선하기 위해 사용된다.</description>
    </item>
    <item>
      <title>CIDR (Classless Inter-Domain Routing)</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/core-protocols/internet-layer/internet-protocol/ip-fundamentals/cidr/</link>
      <pubDate>Thu, 17 Oct 2024 11:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/core-protocols/internet-layer/internet-protocol/ip-fundamentals/cidr/</guid>
      <description>CIDR는 도메인 간 라우팅에 사용되는 인터넷 주소를 기존의 IP 주소 클래스 체계보다 더 유연하게 할당하고 지정하는 방식</description>
    </item>
    <item>
      <title>Delivery Modes</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/core-protocols/internet-layer/internet-protocol/ip-fundamentals/delivery-modes/</link>
      <pubDate>Thu, 17 Oct 2024 07:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/core-protocols/internet-layer/internet-protocol/ip-fundamentals/delivery-modes/</guid>
      <description>IP 전송 방식은 수신자 집합을 결정하는 방법이다. Unicast는 1:1, Broadcast는 같은 링크의 모든 호스트, Multicast는 가입 그룹, Anycast는 라우팅으로 가장 가까운 인스턴스로 전달된다. 각 방식은 효율성·제어성·확장성에서 상호 보완적 트레이드오프가 존재한다.</description>
    </item>
    <item>
      <title>Media Access Control Address (MAC Address)</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/mac-address/</link>
      <pubDate>Wed, 16 Oct 2024 12:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/basic-concepts/addressing/mac-address/</guid>
      <description>MAC 주소(EUI-48)는 데이터 링크 계층(L2)에서 사용되는 48비트 식별자로, IEEE가 OUI/MA-L 등으로 제조사 블록을 관리한다. U/L 비트로 로컬/글로벌, I/G 비트로 단일/그룹을 구분하며 스위치 포워딩·ARP/NDP 연동에 필수적이다. 다만 OS·무선 랜덤화·가상화로 변경·랜덤화가 가능하므로 인증·접근제어는 MAC 단독 의존을 피하고 802.1X·NAC·IPAM 등으로 보완해야 한다.</description>
    </item>
    <item>
      <title>Network Traffic</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/performance-optimization/network-traffic/</link>
      <pubDate>Wed, 16 Oct 2024 02:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/performance-optimization/network-traffic/</guid>
      <description>네트워크 트래픽은 일정 시간 내 데이터 흐름으로, 성능은 처리량·지연·손실의 균형으로 정의된다. 최적화는 혼잡제어, AQM, QoS, CDN, 로드밸런싱, 보안 대응을 포함하며, QUIC/HTTP3·eBPF·IPFIX 기반 관측성과 클라우드·AI 자동화로 측정→분석→최적화→검증 사이클을 완성한다.</description>
    </item>
  </channel>
</rss>
