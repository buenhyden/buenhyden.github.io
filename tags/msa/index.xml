<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – MSA</title><link>https://buenhyden.github.io/tags/msa/</link><description>Recent content in MSA on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 19 Nov 2024 09:47:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/msa/index.xml" rel="self" type="application/rss+xml"/><item><title>Service Mesh</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-mesh/</link><pubDate>Tue, 19 Nov 2024 09:47:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-mesh/</guid><description>
&lt;h2>서비스 메시 (Service Mesh)&lt;span class="hx-absolute -hx-mt-20" id="서비스-메시-service-mesh">&lt;/span>
&lt;a href="#%ec%84%9c%eb%b9%84%ec%8a%a4-%eb%a9%94%ec%8b%9c-service-mesh" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>마이크로서비스 아키텍처에서 서비스 간 통신을 관리하고 제어하기 위한 인프라 계층.&lt;/p>
&lt;p>현대의 마이크로서비스 아키텍처에서는 수많은 서비스들이 서로 통신하면서 복잡한 네트워크를 형성한다.&lt;br>
이러한 환경에서 서비스 간 통신의 안정성, 보안, 관찰 가능성을 확보하는 것이 매우 중요한 과제가 되었고, 이러한 문제들을 해결하고 애플리케이션 코드 변경 없이 인프라 수준에서 통신을 제어하기 위해 서비스 메시가 등장하였다.&lt;/p>
&lt;p>서비스 메시는 사이드카 프록시(Sidecar Proxy)를 사용하여 서비스 간 통신을 처리한다.&lt;br>
각 서비스 인스턴스 옆에 프록시가 배치되어, 마치 오토바이의 사이드카처럼 함께 동작한다.&lt;/p>
&lt;p>서비스 메시 패턴은 Istio, Linkerd, Consul Connect 등의 구현체를 통해 실제로 적용할 수 있다.&lt;/p>
&lt;p>
&lt;img src="../1686129455408.png" alt="Understanding Microservice Meshes: Architecture, Operation, and Examples" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.linkedin.com/pulse/understanding-microservice-meshes-architecture-luis-soares-m-sc-/" target="_blank" rel="noopener">https://www.linkedin.com/pulse/understanding-microservice-meshes-architecture-luis-soares-m-sc-/&lt;/a> _&lt;/p>
&lt;h3>구성 요소 및 기능&lt;span class="hx-absolute -hx-mt-20" id="구성-요소-및-기능">&lt;/span>
&lt;a href="#%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c-%eb%b0%8f-%ea%b8%b0%eb%8a%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>데이터 플레인 (Data Plane):&lt;/p>
&lt;ul>
&lt;li>각 서비스에 사이드카 프록시로 배치&lt;/li>
&lt;li>서비스 간 모든 네트워크 통신 처리&lt;/li>
&lt;li>주요 기능:&lt;/li>
&lt;li>로드 밸런싱&lt;/li>
&lt;li>서킷 브레이킹&lt;/li>
&lt;li>재시도 및 타임아웃&lt;/li>
&lt;li>메트릭 수집&lt;/li>
&lt;li>TLS 암호화&lt;/li>
&lt;li>접근 제어&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>컨트롤 플레인 (Control Plane):&lt;/p>
&lt;ul>
&lt;li>데이터 플레인의 프록시 구성 및 관리&lt;/li>
&lt;li>정책 설정 및 배포&lt;/li>
&lt;li>서비스 디스커버리 및 인증 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>구현 방식&lt;span class="hx-absolute -hx-mt-20" id="구현-방식">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>서비스 메시는 주로 사이드카 프록시 패턴을 사용하여 구현된다.&lt;br>
각 서비스 인스턴스와 함께 프록시가 배포되어 모든 인바운드 및 아웃바운드 트래픽을 처리한다.&lt;/p>
&lt;h3>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>애플리케이션 코드 복잡성 감소&lt;/li>
&lt;li>보안 강화 (제로 트러스트 모델 적용)&lt;/li>
&lt;li>트래픽 관리 용이성 (A/B 테스트, 블루/그린 배포 등)&lt;/li>
&lt;li>관측성 향상으로 문제 해결 및 최적화 용이&lt;/li>
&lt;li>서비스 간 통신의 표준화 및 일관성 유지&lt;/li>
&lt;/ul>
&lt;h3>사용 사례&lt;span class="hx-absolute -hx-mt-20" id="사용-사례">&lt;/span>
&lt;a href="#%ec%82%ac%ec%9a%a9-%ec%82%ac%eb%a1%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>대규모 마이크로서비스 환경&lt;/li>
&lt;li>멀티 클라우드 또는 하이브리드 클라우드 배포&lt;/li>
&lt;li>레거시 시스템과 현대적인 애플리케이션의 통합&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Istio</title><link>https://buenhyden.github.io/posts/system-design/distributed-system/istio/</link><pubDate>Fri, 18 Oct 2024 06:11:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/system-design/distributed-system/istio/</guid><description>
&lt;h2>Istio&lt;span class="hx-absolute -hx-mt-20" id="istio">&lt;/span>
&lt;a href="#istio" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>마이크로서비스 아키텍처에서 서비스 간 통신을 관리하고 제어하는 서비스 메시(Service Mesh) 플랫폼.&lt;/p>
&lt;p>Istio는 마이크로서비스 아키텍처에서 서비스 간 통신을 관리하고 보안, 관찰성, 트래픽 제어를 제공하는 도구로, Kubernetes의 기능을 확장하여 복잡한 마이크로서비스 환경을 효과적으로 운영할 수 있게 해준다.&lt;/p>
&lt;h3>Istio의 주요 기능&lt;span class="hx-absolute -hx-mt-20" id="istio의-주요-기능">&lt;/span>
&lt;a href="#istio%ec%9d%98-%ec%a3%bc%ec%9a%94-%ea%b8%b0%eb%8a%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>트래픽 관리:&lt;/p>
&lt;ul>
&lt;li>로드 밸런싱, 서비스 간 트래픽 라우팅&lt;/li>
&lt;li>A/B 테스트, 카나리 배포 지원&lt;/li>
&lt;li>재시도, 타임아웃, 서킷 브레이커 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>보안:&lt;/p>
&lt;ul>
&lt;li>서비스 간 상호 TLS(mTLS) 암호화&lt;/li>
&lt;li>강력한 인증 및 권한 부여 정책 적용&lt;/li>
&lt;li>제로 트러스트 네트워크 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>관찰 가능성:&lt;/p>
&lt;ul>
&lt;li>분산 추적&lt;/li>
&lt;li>메트릭 수집&lt;/li>
&lt;li>로깅&lt;/li>
&lt;li>서비스 그래프 시각화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>플랫폼 지원:&lt;/p>
&lt;ul>
&lt;li>Kubernetes뿐만 아니라 VM 기반 워크로드도 지원&lt;/li>
&lt;li>멀티 클러스터, 하이브리드, 멀티 클라우드 환경 지원&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>정책 관리:&lt;br>
서비스에 대한 다양한 정책을 적용할 수 있다:&lt;/p>
&lt;ul>
&lt;li>속도 제한&lt;/li>
&lt;li>할당량 관리&lt;/li>
&lt;li>IP 기반 필터링&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>Istio의 아키텍처&lt;span class="hx-absolute -hx-mt-20" id="istio의-아키텍처">&lt;/span>
&lt;a href="#istio%ec%9d%98-%ec%95%84%ed%82%a4%ed%85%8d%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Istio는 데이터 플레인과 컨트롤 플레인으로 구성된다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>컨트롤 플레인:&lt;br>
istiod라고 불리는 중앙 제어 시스템으로, 다음과 같은 핵심 기능을 제공한다:&lt;/p>
&lt;ul>
&lt;li>서비스 디스커버리&lt;/li>
&lt;li>구성 관리&lt;/li>
&lt;li>인증서 관리&lt;/li>
&lt;li>정책 적용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>데이터 플레인:&lt;br>
Envoy 프록시를 사이드카로 배포하여 서비스 간 모든 통신을 처리한다.&lt;br>
각 서비스 포드 옆에 배치되어 다음과 같은 기능을 수행한다:&lt;/p>
&lt;ul>
&lt;li>트래픽 라우팅&lt;/li>
&lt;li>로드 밸런싱&lt;/li>
&lt;li>보안 통신&lt;/li>
&lt;li>메트릭 수집&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>Istio의 장점&lt;span class="hx-absolute -hx-mt-20" id="istio의-장점">&lt;/span>
&lt;a href="#istio%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>애플리케이션 코드 변경 없이 기능 추가 가능&lt;/li>
&lt;li>마이크로서비스 환경의 복잡성 관리 용이&lt;/li>
&lt;li>보안 강화 및 정책 일관성 유지&lt;/li>
&lt;li>상세한 모니터링 및 문제 해결 지원&lt;/li>
&lt;li>트래픽 제어를 통한 안정적인 서비스 운영&lt;/li>
&lt;/ol>
&lt;p>Istio는 Kubernetes 환경에서 마이크로서비스 아키텍처를 효과적으로 관리하고 운영하는 데 필수적인 도구로 자리잡고 있다.&lt;br>
복잡한 분산 시스템의 운영을 단순화하고 안정성, 보안성, 관찰성을 크게 향상시킨다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>