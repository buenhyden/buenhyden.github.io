<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CI-and-CD on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/ci-and-cd/</link>
    <description>Recent content in CI-and-CD on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 27 Sep 2024 12:47:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/ci-and-cd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shadow Deployment</title>
      <link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/deployment-strategies/shadow-deployment/</link>
      <pubDate>Fri, 27 Sep 2024 12:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/deployment-strategies/shadow-deployment/</guid>
      <description>&lt;h2 id=&#34;shadow-deployment&#34;&gt;Shadow Deployment&lt;/h2&gt;
&lt;p&gt;Shadow Deployment는 소프트웨어 배포 전략 중 하나로, 새로운 버전의 애플리케이션을 기존 버전과 병행하여 실행하되 사용자에게는 영향을 주지 않는 방식이다.&lt;/p&gt;
&lt;p&gt;Shadow Deployment는 새로운 버전의 애플리케이션을 프로덕션 환경에 배포하고 실제 트래픽을 복제하여 새 버전으로 전송하지만, 그 결과는 사용자에게 반환하지 않는 방식이다. 이는 실제 환경에서 새로운 버전을 안전하게 테스트할 수 있게 해준다.&lt;/p&gt;
&lt;p&gt;Shadow Deployment는 실제 환경에서 새로운 버전을 안전하게 테스트할 수 있는 전략이다. 하지만 구현 복잡성과 리소스 사용 증가 등의 단점도 있으므로, 프로젝트의 특성과 요구사항을 고려하여 적절히 사용해야 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Feature Flags</title>
      <link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/deployment-strategies/feature-flags/</link>
      <pubDate>Fri, 27 Sep 2024 12:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/deployment-strategies/feature-flags/</guid>
      <description>Feature flags는 조건문을 사용하여 코드의 특정 부분을 동적으로 제어하는 소프트웨어 개발 기법</description>
    </item>
    <item>
      <title>A/B Testing</title>
      <link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/deployment-strategies/a-b-testing/</link>
      <pubDate>Fri, 27 Sep 2024 02:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/deployment-strategies/a-b-testing/</guid>
      <description>&lt;h2 id=&#34;ab-testing&#34;&gt;A/B Testing&lt;/h2&gt;
&lt;p&gt;A/B Testing은 소프트웨어 배포 전략 중 하나로, 두 가지 이상의 버전을 사용자에게 제공하여 어떤 버전이 더 효과적인지 비교하는 방법이다.&lt;/p&gt;
&lt;p&gt;A/B Testing은 두 가지 이상의 버전(A와 B)을 사용자 그룹에게 무작위로 제공하여 각 버전의 성능을 비교하는 실험적 접근 방식이다. 이는 웹사이트, 모바일 앱, 마케팅 캠페인 등 다양한 분야에서 사용된다.&lt;/p&gt;
&lt;p&gt;A/B Testing은 데이터 기반의 의사결정을 가능하게 한다. 하지만 올바른 설계와 분석이 필수적이며, 단기적 결과에만 집중하지 않도록 주의해야 한다. 지속적인 학습과 개선을 통해 사용자 경험을 향상시키고 비즈니스 목표를 달성하는 데 큰 도움이 될 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blue-Green Deployment</title>
      <link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/deployment-strategies/blue-green-deployment/</link>
      <pubDate>Fri, 27 Sep 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/deployment-strategies/blue-green-deployment/</guid>
      <description>Blue-Green Deployment Pattern은 무중단 배포 전략 중 하나로, 애플리케이션의 새 버전을 안전하고 효율적으로 배포하는 방법이다.</description>
    </item>
    <item>
      <title>Canary Deployment</title>
      <link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/deployment-strategies/canary-deployment/</link>
      <pubDate>Fri, 27 Sep 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/deployment-strategies/canary-deployment/</guid>
      <description>카나리 배포(Canary Deployment) 패턴은 새로운 버전의 애플리케이션을 점진적으로 배포하는 전략이다.</description>
    </item>
    <item>
      <title>Rolling Deployment</title>
      <link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/deployment-strategies/rolling-deployment/</link>
      <pubDate>Fri, 27 Sep 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/deployment-strategies/rolling-deployment/</guid>
      <description>Rolling Deployment는 애플리케이션의 새 버전을 점진적으로 배포하는 무중단 배포 전략이다.</description>
    </item>
  </channel>
</rss>
