<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Page-Fault</title><link>https://buenhyden.github.io/tags/page-fault/</link><description>Recent content in Page-Fault on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 20 Dec 2024 13:37:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/page-fault/index.xml" rel="self" type="application/rss+xml"/><item><title>가상 메모리 (Virtual Memory)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/virtual-memory/</link><pubDate>Fri, 20 Dec 2024 13:37:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/virtual-memory/</guid><description>
&lt;h2>가상 메모리 (Virtual Memory)&lt;/h2>&lt;p>가상 메모리(Virtual Memory)는 운영체제의 메모리 관리 기법 중 하나로, 물리적 메모리의 한계를 극복하고 더 큰 메모리 공간을 제공하는 기술이다.&lt;br>
실제 물리적 메모리(RAM)의 크기에 관계없이 프로그램이 사용할 수 있는 메모리 공간을 확장하며, 프로그램의 주소 공간을 실제 메모리에서 분리하여 가상 주소 공간을 제공한다.&lt;/p>
&lt;p>가상 메모리가 필요한 이유:&lt;/p>
&lt;ol>
&lt;li>메모리 제약 극복&lt;br>
프로그램의 크기가 실제 물리적 메모리보다 클 수 있다.&lt;br>
예를 들어 16GB RAM을 가진 컴퓨터에서 20GB가 필요한 프로그램을 실행할 수 있게 된다.&lt;/li>
&lt;li>메모리 보호&lt;br>
각 프로세스는 자신만의 가상 주소 공간을 가지므로, 다른 프로세스의 메모리에 접근할 수 없다.&lt;/li>
&lt;li>메모리 효율성&lt;br>
실제로 사용되는 부분만 물리적 메모리에 적재함으로써 메모리를 효율적으로 사용할 수 있다.&lt;/li>
&lt;/ol>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Memory%20Mgmt/Memory%20Mgmt%20Techniques/erx44XE.jpg"
alt="Virtual Memory"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://cse.poriyaan.in/topic/virtual-memory-50746/#google_vignette" target="_blank" rel="noopener">https://cse.poriyaan.in/topic/virtual-memory-50746/#google_vignette&lt;/a> _&lt;/p>
&lt;h3>주요 특징&lt;/h3>&lt;ol>
&lt;li>메모리 확장: 물리적 메모리보다 큰 프로그램 실행 가능&lt;/li>
&lt;li>메모리 보호: 각 프로세스에 독립된 가상 주소 공간 제공&lt;/li>
&lt;li>효율적 메모리 사용: 필요한 부분만 물리 메모리에 적재&lt;/li>
&lt;li>다중 프로세스 실행: 여러 프로그램의 동시 실행 지원&lt;/li>
&lt;/ol>
&lt;h3>동작 원리&lt;/h3>&lt;ol>
&lt;li>페이징 시스템 사용: 프로그램을 일정 크기의 페이지로 나눔&lt;/li>
&lt;li>요구 페이징: 필요한 페이지만 메모리에 적재&lt;/li>
&lt;li>페이지 테이블: 가상 주소와 물리 주소 간 매핑 정보 저장&lt;/li>
&lt;li>MMU(Memory Management Unit): 주소 변환 담당 하드웨어&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;/h3>&lt;p>가상 메모리의 주요 장점은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>확장된 메모리 공간: 물리적 메모리 크기에 구애받지 않고 더 큰 메모리 공간을 제공한다.&lt;/li>
&lt;li>메모리 보호: 각 프로세스에 독립적인 가상 주소 공간을 제공하여 다른 프로세스의 메모리 접근을 방지한다.&lt;/li>
&lt;li>효율적인 메모리 사용: 필요한 부분만 물리 메모리에 적재하여 메모리 사용 효율을 높인다.&lt;/li>
&lt;li>다중 프로세스 실행 지원: 여러 프로그램을 동시에 실행할 수 있도록 한다.&lt;/li>
&lt;li>프로그래밍 용이성: 프로그래머가 물리적 메모리 크기를 고려하지 않고 개발할 수 있다.&lt;/li>
&lt;li>메모리 관리의 단순화: 통일된 주소 공간을 제공하여 메모리 관리를 용이하게 한다.&lt;/li>
&lt;li>시스템 안정성 향상: 프로세스 간 메모리 침범을 방지하여 시스템의 안정성을 높인다.&lt;/li>
&lt;/ol>
&lt;h3>단점&lt;/h3>&lt;p>가상 메모리의 주요 단점은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>성능 저하: 가상 메모리는 하드 디스크나 SSD를 사용하기 때문에 RAM보다 훨씬 느리다. 이로 인해 애플리케이션의 속도가 느려질 수 있다.&lt;/li>
&lt;li>디스크 공간 소비: 가상 메모리는 하드 디스크 공간을 사용하므로 사용 가능한 저장 공간이 줄어든다.&lt;/li>
&lt;li>시스템 안정성 저하: 과도한 가상 메모리 사용은 시스템의 전반적인 안정성을 떨어뜨릴 수 있다.&lt;/li>
&lt;li>애플리케이션 전환 지연: 가상 메모리를 사용할 때 애플리케이션 간 전환에 더 많은 시간이 소요될 수 있다.&lt;/li>
&lt;li>스레싱(Thrashing): 물리적 메모리가 부족할 경우, 시스템이 가상 메모리와 물리적 메모리 사이를 지속적으로 전환하면서 성능이 크게 저하될 수 있다.&lt;/li>
&lt;li>저장 장치 수명 단축: SSD와 같은 저장 장치를 가상 메모리로 사용할 경우, 잦은 읽기/쓰기 작업으로 인해 장치의 수명이 단축될 수 있다.&lt;/li>
&lt;li>복잡성 증가: 가상 메모리 관리 알고리즘의 구현이 복잡하며, 이는 시스템의 전반적인 복잡성을 증가시킨다.&lt;/li>
&lt;/ol>
&lt;h4>페이지 폴트 (Page Fault)&lt;/h4>&lt;p>페이지 폴트(Page Fault)는 프로그램이 현재 물리적 메모리(RAM)에 없는 페이지에 접근하려고 할 때 발생하는 예외 상황이다. 이는 가상 메모리 시스템에서 중요한 메커니즘이다.&lt;/p>
&lt;p>발생원인:&lt;/p>
&lt;ul>
&lt;li>요구 페이징: 필요한 페이지가 아직 메모리에 로드되지 않은 경우&lt;/li>
&lt;li>유효하지 않은 메모리 접근: 프로그램이 할당되지 않은 메모리에 접근하려 할 때&lt;/li>
&lt;li>보호 위반: 읽기 전용 페이지에 쓰기를 시도하는 경우&lt;/li>
&lt;/ul>
&lt;p>처리 과정:&lt;/p>
&lt;ul>
&lt;li>CPU가 페이지 폴트를 감지하고 운영체제에 제어권을 넘깁니다.&lt;/li>
&lt;li>운영체제는 요청된 페이지의 디스크 위치를 확인합니다.&lt;/li>
&lt;li>필요한 경우 기존 페이지를 디스크로 스왑아웃합니다.&lt;/li>
&lt;li>요청된 페이지를 디스크에서 메모리로 로드합니다.&lt;/li>
&lt;li>페이지 테이블을 업데이트하여 새 페이지 위치를 반영합니다.&lt;/li>
&lt;li>프로그램 실행을 재개합니다.&lt;/li>
&lt;/ul>
&lt;p>페이지 폴트의 종류:&lt;/p>
&lt;ul>
&lt;li>경미한 페이지 폴트: 페이지가 이미 메모리에 있지만 페이지 테이블에 등록되지 않은 경우&lt;/li>
&lt;li>주요 페이지 폴트: 페이지를 디스크에서 메모리로 가져와야 하는 경우&lt;/li>
&lt;/ul>
&lt;p>성능 영향:&lt;/p>
&lt;ul>
&lt;li>페이지 폴트 처리는 상대적으로 시간이 많이 소요되는 작업입니다.&lt;/li>
&lt;li>과도한 페이지 폴트는 시스템 성능을 크게 저하시킬 수 있습니다(스레싱).&lt;/li>
&lt;/ul>
&lt;p>최적화 전략:&lt;/p>
&lt;ul>
&lt;li>작업 세트 모델 사용: 프로세스의 자주 사용되는 페이지들을 메모리에 유지&lt;/li>
&lt;li>페이지 교체 알고리즘 최적화: LRU(Least Recently Used) 등의 효율적인 알고리즘 사용&lt;/li>
&lt;li>메모리 용량 증가: 물리적 메모리를 늘려 페이지 폴트 발생 빈도 감소&lt;/li>
&lt;/ul>
&lt;h3>가상 메모리 구현시 필요한 알고리즘&lt;/h3>&lt;p>가상 메모리를 구현할 때 필요한 주요 알고리즘은 다음과 같다:&lt;/p>
&lt;h4>페이지 교체 알고리즘 (Page Replacement Algorithm)&lt;/h4>&lt;p>페이지 교체 알고리즘(Page Replacement Algorithm)은 운영체제에서 페이징 기반의 가상 메모리 관리를 위해 사용되는 중요한 메커니즘이다.&lt;br>
이 알고리즘은 메모리가 가득 찼을 때 어떤 페이지를 교체할지 결정한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>알고리즘&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>FIFO (First-In-First-Out)&lt;/td>
&lt;td>가장 오래된 페이지를 교체&lt;/td>
&lt;td>- 구현이 간단&lt;/td>
&lt;td>- 성능이 좋지 않음&lt;br>- Belady의 모순 발생 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LRU (Least Recently Used)&lt;/td>
&lt;td>가장 오랫동안 사용되지 않은 페이지 교체&lt;/td>
&lt;td>- 효율적&lt;br>- 지역성 원리 활용&lt;/td>
&lt;td>- 구현이 복잡&lt;br>- 추가 데이터 구조 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Optimal&lt;/td>
&lt;td>가장 오랫동안 사용되지 않을 페이지 교체&lt;/td>
&lt;td>- 이론적으로 가장 효율적&lt;/td>
&lt;td>- 실제 구현 불가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Second Chance (Clock)&lt;/td>
&lt;td>FIFO의 변형, 참조 비트 사용&lt;/td>
&lt;td>- FIFO보다 성능 우수&lt;br>- 구현 비교적 간단&lt;/td>
&lt;td>- FIFO의 단점 일부 존재&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Random&lt;/td>
&lt;td>무작위로 페이지 선택하여 교체&lt;/td>
&lt;td>- 구현이 매우 간단&lt;/td>
&lt;td>- 성능 예측 어려움&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>Belady의 모순(Belady&amp;rsquo;s Anomaly)&lt;br>
페이지 교체 알고리즘에서 발생하는 특이한 현상으로, 페이지 프레임의 수를 증가시켰을 때 오히려 페이지 폴트(page fault)의 수가 증가하는 현상을 말한다.&lt;/p>
&lt;ul>
&lt;li>발생 원인
&lt;ol>
&lt;li>주로 FIFO(First-In-First-Out) 페이지 교체 알고리즘에서 발생한다.&lt;/li>
&lt;li>메모리 크기 증가로 인해 일부 페이지가 예상보다 일찍 교체되어 나중에 다시 필요해질 때 페이지 폴트가 발생한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>특징
&lt;ol>
&lt;li>직관에 반하는 현상: 일반적으로 메모리 크기가 증가하면 성능이 향상될 것으로 예상되지만, 이 경우 오히려 성능이 저하된다.&lt;/li>
&lt;li>모든 알고리즘에서 발생하지 않음: LRU(Least Recently Used)나 Optimal 알고리즘과 같은 스택 기반 알고리즘에서는 발생하지 않는다.&lt;br>
예시:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>검색 결과에 제시된 예에서, 3개의 프레임을 사용했을 때 9번의 페이지 폴트가 발생했지만, 4개의 프레임을 사용했을 때 10번의 페이지 폴트가 발생했다.&lt;br>
중요성:&lt;/li>
&lt;li>Belady의 모순은 메모리 관리 알고리즘의 선택과 최적화에 중요한 영향을 미치며, 시스템 성능에 직접적인 영향을 줄 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h4>기타&lt;/h4>&lt;ol>
&lt;li>
&lt;p>프레임 할당 알고리즘 (Frame Allocation Algorithm):&lt;/p>
&lt;ul>
&lt;li>여러 프로세스가 존재할 때 각 프로세스에 메모리 프레임을 어떻게 할당할지 결정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>요구 페이징 알고리즘 (Demand Paging Algorithm):&lt;/p>
&lt;ul>
&lt;li>필요한 페이지만 메모리에 적재하는 방식을 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>페이지 테이블 관리 알고리즘:&lt;/p>
&lt;ul>
&lt;li>가상 주소를 물리 주소로 변환하는 페이지 테이블을 효율적으로 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>스레싱 방지 알고리즘:&lt;/p>
&lt;ul>
&lt;li>과도한 페이지 부재로 인한 성능 저하를 방지하기 위한 알고리즘&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>가상 메모리와 물리적 메모리의 비교&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>가상 메모리&lt;/th>
&lt;th>물리적 메모리&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>실제 물리적 메모리보다 큰 메모리 공간을 제공하는 추상화된 메모리&lt;/td>
&lt;td>컴퓨터에 실제로 장착된 RAM&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주소 체계&lt;/td>
&lt;td>논리적 주소 (가상 주소)&lt;/td>
&lt;td>물리적 주소&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>크기&lt;/td>
&lt;td>CPU의 주소 지정 능력에 따라 결정 (예: 32비트 시스템에서 최대 4GB)&lt;/td>
&lt;td>실제 설치된 RAM의 크기로 제한&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>접근 속도&lt;/td>
&lt;td>상대적으로 느림 (페이지 폴트 발생 시)&lt;/td>
&lt;td>빠름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 저장 위치&lt;/td>
&lt;td>RAM과 디스크의 스왑 영역&lt;/td>
&lt;td>RAM&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로세스 격리&lt;/td>
&lt;td>각 프로세스에 독립적인 주소 공간 제공&lt;/td>
&lt;td>직접적인 격리 기능 없음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 관리&lt;/td>
&lt;td>운영체제가 페이징 등의 기법으로 관리&lt;/td>
&lt;td>하드웨어 수준에서 직접 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 장점&lt;/td>
&lt;td>큰 주소 공간, 메모리 효율성, 프로세스 보호&lt;/td>
&lt;td>빠른 접근 속도&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 단점&lt;/td>
&lt;td>페이지 폴트로 인한 성능 저하 가능성&lt;/td>
&lt;td>크기 제한, 비용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡성&lt;/td>
&lt;td>높음 (페이지 테이블, MMU 등 필요)&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 공유&lt;/td>
&lt;td>쉬움 (같은 물리 메모리를 다른 가상 주소에 매핑 가능)&lt;/td>
&lt;td>직접적인 공유 어려움&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol>
&lt;li>
&lt;p>정의와 구현:&lt;/p>
&lt;ul>
&lt;li>물리적 메모리: 실제 하드웨어 RAM으로, CPU가 직접 접근할 수 있는 메모리.&lt;/li>
&lt;li>가상 메모리: 운영 체제가 제공하는 추상화된 메모리 공간으로, 물리적 메모리의 한계를 극복하기 위해 사용된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>용량:&lt;/p>
&lt;ul>
&lt;li>물리적 메모리: 실제 설치된 RAM의 크기로 제한된다.&lt;/li>
&lt;li>가상 메모리: 하드 디스크나 SSD를 활용하여 물리적 메모리보다 큰 용량을 제공할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>속도:&lt;/p>
&lt;ul>
&lt;li>물리적 메모리: 빠른 데이터 접근 속도를 제공한다.&lt;/li>
&lt;li>가상 메모리: 디스크를 사용하기 때문에 물리적 메모리보다 접근 속도가 느리다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>주소 체계:&lt;/p>
&lt;ul>
&lt;li>물리적 메모리: 직접적인 물리 주소를 사용한다.&lt;/li>
&lt;li>가상 메모리: 논리적 주소를 사용하며, 이는 MMU에 의해 물리 주소로 변환된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>데이터 지속성:&lt;/p>
&lt;ul>
&lt;li>물리적 메모리: 전원이 꺼지면 저장된 정보가 손실된다.&lt;/li>
&lt;li>가상 메모리: 디스크를 활용하므로 전원이 꺼져도 일부 정보를 유지할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>메모리 관리:&lt;/p>
&lt;ul>
&lt;li>물리적 메모리: 직접적인 관리가 필요하다.&lt;/li>
&lt;li>가상 메모리: 운영 체제가 페이징 등의 기법을 통해 자동으로 관리한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>