<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Synchronization on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/synchronization/</link>
    <description>Recent content in Synchronization on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 05 Oct 2024 11:25:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/synchronization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lock and Mutex</title>
      <link>https://buenhyden.github.io/posts/computer-science/lock-and-mutex/</link>
      <pubDate>Sat, 05 Oct 2024 11:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/lock-and-mutex/</guid>
      <description>Lock과 Mutex는 둘 다 여러 스레드가 공유 자원에 동시에 접근하는 것을 방지하는 동기화 도구이다. 한 스레드가 자원을 사용할 때 다른 스레드의 접근을 막는 것이다.</description>
    </item>
    <item>
      <title>Deadlock vs Livelock</title>
      <link>https://buenhyden.github.io/posts/computer-science/deadlock-vs-livelock/</link>
      <pubDate>Sat, 05 Oct 2024 07:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/deadlock-vs-livelock/</guid>
      <description>데드락(Deadlock)과 라이브락(Livelock)은 둘 다 동시성 프로그래밍에서 발생할 수 있는 문제 상황으로, 데드락과 라이브락은 모두 시스템의 진행을 방해하는 심각한 문제이다</description>
    </item>
    <item>
      <title>교착상태 (Deadlock)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/deadlock/</link>
      <pubDate>Thu, 03 Oct 2024 23:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/deadlock/</guid>
      <description>둘 이상의 프로세스가 서로가 가진 자원을 기다리며 더 이상 진행할 수 없는 상태</description>
    </item>
    <item>
      <title>Race Condition</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/race-condition/</link>
      <pubDate>Thu, 03 Oct 2024 23:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/race-condition/</guid>
      <description>여러 프로세스나 스레드가 공유 자원에 동시에 접근할 때, 접근의 타이밍이나 순서에 따라 결과가 달라질 수 있는 상황</description>
    </item>
    <item>
      <title>라이브락 (Livelock)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/livelock/</link>
      <pubDate>Thu, 03 Oct 2024 09:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/livelock/</guid>
      <description>멀티스레딩 환경에서 발생할 수 있는 문제 상황으로, 프로세스나 스레드가 계속 실행 중이지만 실제로는 유용한 작업을 수행하지 못하는 상태</description>
    </item>
    <item>
      <title>Starvation</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/starvation/</link>
      <pubDate>Thu, 03 Oct 2024 07:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/starvation/</guid>
      <description>운영 체제 및 동시성 프로그래밍에서 중요한 문제로, 특정 프로세스가 필요한 자원을 지속적으로 얻지 못해 실행되지 못하는 상황</description>
    </item>
    <item>
      <title>동기화 (Synchronization)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/synchronization/</link>
      <pubDate>Wed, 02 Oct 2024 07:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/synchronization/</guid>
      <description>여러 프로세스나 스레드가 공유 자원에 접근할 때 데이터의 일관성과 무결성을 보장하기 위한 메커니즘</description>
    </item>
  </channel>
</rss>
