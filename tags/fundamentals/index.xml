<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Fundamentals on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/fundamentals/</link>
    <description>Recent content in Fundamentals on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 06 Mar 2025 03:09:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/fundamentals/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic Syntax</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/</link>
      <pubDate>Fri, 20 Dec 2024 12:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/</guid>
      <description>Python의 기본 구문법</description>
    </item>
    <item>
      <title>어셈블러(Assembler)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/assembler/</link>
      <pubDate>Thu, 05 Dec 2024 03:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/assembler/</guid>
      <description>Assembler는 어셈블리 언어로 작성된 소스 코드를 컴퓨터가 직접 실행할 수 있는 기계어 코드로 변환하는 번역 도구</description>
    </item>
    <item>
      <title>Control Structures</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/control-structures/</link>
      <pubDate>Thu, 05 Dec 2024 03:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/control-structures/</guid>
      <description>Control Structures는 프로그램 내에서 실행 흐름을 제어하는 기본적이고 필수적인 구성 요소이다.  이 구조들은 코드의 순차적 실행, 조건에 따른 분기 처리, 그리고 반복문 실행을 통해 프로그램이 동적으로 동작할 수 있도록 돕는다.</description>
    </item>
    <item>
      <title>TCPIP 4 Layers vs. OSI 7 Layers</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-vs-osi-7-layers/</link>
      <pubDate>Sat, 19 Oct 2024 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-vs-osi-7-layers/</guid>
      <description>OSI 7계층은 네트워크 통신의 표준 참조 모델이며, TCP/IP 4계층은 이를 바탕으로 구현된 실제 인터넷 통신의 기반이 된다.</description>
    </item>
    <item>
      <title>TCP/IP 4 Layers - 1. Network Access Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-1-network-access-layer/</link>
      <pubDate>Thu, 17 Oct 2024 05:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-1-network-access-layer/</guid>
      <description>데이터를 전송 매체에 맞게 포맷팅하고 물리적 하드웨어 주소를 기반으로 데이터를 주소 지정한다</description>
    </item>
    <item>
      <title>OSI 7 Layers - 1. Phygical Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-1-phygical-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-1-phygical-layer/</guid>
      <description>OSI 7계층의 가장 첫 번째 계층으로, 실제 데이터가 전기 신호나 빛으로 변환되어 전송되는 곳</description>
    </item>
    <item>
      <title>Native Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/types/native-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 15:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/types/native-compiler/</guid>
      <description>Native Compiler는 소스 코드를 현재 컴파일러가 실행되고 있는 시스템의 운영체제와 하드웨어 아키텍처에 최적화된 기계어로 변환하는 컴파일러</description>
    </item>
    <item>
      <title>Language Syntax</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/</link>
      <pubDate>Fri, 04 Oct 2024 03:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/</guid>
      <description>프로그래밍 언어의 구문(Language Syntax)은 코드의 구조와 형식을 결정하는 규칙 집합으로, 코드가 올바르게 실행되기 위한 기초 역할을 한다.</description>
    </item>
    <item>
      <title>Data Types</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/</link>
      <pubDate>Wed, 29 Jan 2025 01:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/</guid>
      <description>&lt;h2 id=&#34;data-types&#34;&gt;Data Types&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Low-Level Virtual Machine</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/low-level-virtual-machine/</link>
      <pubDate>Thu, 05 Dec 2024 03:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/low-level-virtual-machine/</guid>
      <description>LLVM은 소스 코드를 최적화하고 대상 플랫폼에 맞는 기계어로 변환하는 모듈식 컴파일러 프레임워크</description>
    </item>
    <item>
      <title>Functions</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/functions/</link>
      <pubDate>Thu, 05 Dec 2024 01:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/functions/</guid>
      <description>함수는 프로그래밍의 핵심 구성 요소로, 특정 작업을 수행하는 독립적이고 재사용 가능한 코드 블록이다.</description>
    </item>
    <item>
      <title>TCP/IP 4계층 - 2. Internet Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-2-internet-layer/</link>
      <pubDate>Thu, 17 Oct 2024 05:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-2-internet-layer/</guid>
      <description>인터넷 계층은 TCP/IP 프로토콜 스택에서 네트워크 간의 통신을 담당하는 핵심 계층으로, 네트워크 간 데이터 전송을 담당하며, 데이터 패킷이 출발지에서 목적지까지 효율적으로 전달되도록 라우팅과 주소 지정(Addressing)을 수행한다.</description>
    </item>
    <item>
      <title>OSI 7 Layers - 2. DataLink Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-2-datalink-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-2-datalink-layer/</guid>
      <description>OSI 7계층에서 두 번째 계층으로, 직접 연결된 두 장치 간의 안전한 데이터 전송을 담당</description>
    </item>
    <item>
      <title>OSI 7Layers</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/</link>
      <pubDate>Wed, 16 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/</guid>
      <description>표준 프로토콜을 사용하여 다양한 통신 시스템이 통신할 수 있도록 국제표준화기구(ISO)에서 만든 개념 모델</description>
    </item>
    <item>
      <title>Cross Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/types/cross-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 15:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/types/cross-compiler/</guid>
      <description>크로스 컴파일러는 현재 코드를 실행하는 환경(호스트)와는 다른 플랫폼(대상)에서 실행될 수 있는 실행 파일이나 바이너리를 생성하는 컴파일러</description>
    </item>
    <item>
      <title>컴파일러(Compiler)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/</link>
      <pubDate>Sun, 06 Oct 2024 05:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/</guid>
      <description>우리가 작성한 프로그래밍 언어(고급 언어)를 컴퓨터가 이해할 수 있는 기계어(저급 언어)로 번역해주는 특별한 프로그램</description>
    </item>
    <item>
      <title>Type Casting</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/type-casting/</link>
      <pubDate>Tue, 04 Mar 2025 10:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/type-casting/</guid>
      <description>&lt;h2 id=&#34;type-casting&#34;&gt;Type Casting&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>LLVM vs 기존 컴파일러 비교</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/llvm-vs-%EA%B8%B0%EC%A1%B4-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC-%EB%B9%84%EA%B5%90/</link>
      <pubDate>Thu, 05 Dec 2024 07:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/llvm-vs-%EA%B8%B0%EC%A1%B4-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC-%EB%B9%84%EA%B5%90/</guid>
      <description>LLVM은 현대 컴파일러 인프라스트럭처의 중요한 혁신으로, 모듈화된 설계, 강력한 최적화 기능, 다양한 언어와 타겟 지원을 통해 소프트웨어 개발 환경을 크게 발전시켰다.  전통적인 컴파일러와 비교할 때, LLVM은 재사용성, 확장성, 개발자 친화적 도구 측면에서 큰 강점을 가지고 있다.</description>
    </item>
    <item>
      <title>TCP/IP 4계층 - 3. Transport Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-3-transport-layer/</link>
      <pubDate>Thu, 17 Oct 2024 05:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-3-transport-layer/</guid>
      <description>전송 계층은 서로 다른 호스트에서 동작하는 애플리케이션 프로세스 간의 논리적 통신을 제공한다.</description>
    </item>
    <item>
      <title>TCP/IP 4Layers</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/</link>
      <pubDate>Thu, 17 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/</guid>
      <description>인터넷 프로토콜 스위트의 구조를 설명하는 계층화된 모델.</description>
    </item>
    <item>
      <title>OSI 7 Layers - 3. Network Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/</guid>
      <description>3계층으로, 서로 다른 네트워크 간의 데이터 전송을 담당</description>
    </item>
    <item>
      <title>Ahead-of-Time Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/types/ahead-of-time-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 18:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/types/ahead-of-time-compiler/</guid>
      <description>**Ahead-of-Time(AOT) 컴파일러**는 프로그램 실행 전에 소스 코드나 중간 언어(예: 바이트코드)를 **네이티브 머신 코드로 미리 변환**하는 기술</description>
    </item>
    <item>
      <title>Programming Language Control Structures</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/programming-language-control-structures/</link>
      <pubDate>Sun, 06 Oct 2024 11:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/programming-language-control-structures/</guid>
      <description>프로그래밍에서 코드의 실행 흐름을 제어하는 핵심적인 구문이다.</description>
    </item>
    <item>
      <title>인터프리터(Interpreter)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/interpreter/</link>
      <pubDate>Sun, 06 Oct 2024 05:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/interpreter/</guid>
      <description>프로그래밍 언어의 소스 코드를 직접 실행하는 프로그램 또는 환경</description>
    </item>
    <item>
      <title>Compiler vs Interpreter vs Assembler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler-vs-interpreter-vs-assembler/</link>
      <pubDate>Thu, 05 Dec 2024 03:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler-vs-interpreter-vs-assembler/</guid>
      <description>컴파일러, 인터프리터, 어셈블러는 소스 코드를 기계가 이해할 수 있는 형태로 변환하는 서로 다른 언어 처리 도구이다.</description>
    </item>
    <item>
      <title>의사코드(Pseudocode)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/pseudo-code/</link>
      <pubDate>Thu, 05 Dec 2024 01:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/pseudo-code/</guid>
      <description>의사코드(Pseudocode)는 알고리즘을 설명하기 위한 비공식적이고 고수준의 표현 방식으로, 특정 프로그래밍 언어의 문법에 얽매이지 않고 간단한 텍스트 형태로 작성된다.</description>
    </item>
    <item>
      <title>TCP/IP 4계층 - 4. Application Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-4-application-layer/</link>
      <pubDate>Thu, 17 Oct 2024 05:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-4-application-layer/</guid>
      <description>TCP/IP 프로토콜 스택에서 가장 상위 계층으로, 사용자와 가장 가까운 계층으로 이메일, 웹 서핑, 파일 전송 등의 서비스를 위한 프로토콜들이 모여 있는 계층이다.</description>
    </item>
    <item>
      <title>OSI 7 Layers - 4. Transport Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-4-transport-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-4-transport-layer/</guid>
      <description>4번째 계층으로, 데이터 전송의 신뢰성과 효율성을 담당하는 중요한 역할을 한다</description>
    </item>
    <item>
      <title>Network Traffic</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/network-traffic/</link>
      <pubDate>Wed, 16 Oct 2024 02:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/network-traffic/</guid>
      <description>네트워크 트래픽은 컴퓨터 네트워크를 통해 이동하는 데이터의 양을 의미한다.</description>
    </item>
    <item>
      <title>Just-In-Time (JIT) Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/types/just-in-time-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 17:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/types/just-in-time-compiler/</guid>
      <description>**JIT(Just-In-Time) 컴파일**은 프로그램 실행 시점에 코드를 기계어로 변환하는 기술로, **인터프리터의 유연성**과 **컴파일러의 성능**을 결합한 혁신적인 방식</description>
    </item>
    <item>
      <title>Native Compiler vs Cross Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/native-compiler-vs-cross-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 03:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/native-compiler-vs-cross-compiler/</guid>
      <description>Native Compiler와 Cross Compiler는 모두 프로그래밍 언어로 작성된 소스 코드를 기계어 또는 실행 가능한 바이너리로 변환하는 컴파일 도구이지만, 그들이 생성하는 산출물이 실행되는 대상이 서로 다르다는 점에서 구분된다.</description>
    </item>
    <item>
      <title>Runtime</title>
      <link>https://buenhyden.github.io/posts/computer-science/fundamentals/runtime/</link>
      <pubDate>Thu, 05 Dec 2024 04:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/fundamentals/runtime/</guid>
      <description>컴퓨터 과학에서 **런타임(runtime)** 은 프로그램이 실제로 실행되는 기간과 그 실행 환경 전체를 의미한다.</description>
    </item>
    <item>
      <title>OSI 7 Layers - 5. Session Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-5-session-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-5-session-layer/</guid>
      <description>세션 계층은 OSI 모델의 5번째 계층으로, 통신 세션을 구성하는 계층으로 응용 프로그램 간의 대화를 유지하기 위한 구조를 제공하고, 프로세스들의 논리적인 연결을 담당한다.</description>
    </item>
    <item>
      <title>JIT Compiler vs AOT Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/jit-compiler-vs-aot-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 18:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/jit-compiler-vs-aot-compiler/</guid>
      <description>JIT 컴파일러와 AOT 컴파일러는 모두 소스 코드 또는 중간 표현(바이트코드)을 기계어 코드로 변환한다는 공통점을 가지지만, 언제 그리고 어떻게 컴파일하는지에 큰 차이가 있다</description>
    </item>
    <item>
      <title>AOT Vs JIT Vs Interpreter</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/aot-vs-jit-vs-interpreter/</link>
      <pubDate>Mon, 14 Oct 2024 00:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/aot-vs-jit-vs-interpreter/</guid>
      <description>AOT, JIT, 그리고 인터프리터는 모두 소스 코드를 실행 가능한 형태로 변환하는 언어 처리 방식이지만, 언제 어떻게 변환이 이루어지는지에 따라 큰 차이가 있다.</description>
    </item>
    <item>
      <title>언어 프로세서(Language Processor)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/</link>
      <pubDate>Thu, 05 Dec 2024 03:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/</guid>
      <description>소스 코드나 어셈블리어 등 인간이 이해하기 편한 언어로 작성된 코드를 컴퓨터가 실행할 수 있는 기계어나 그에 가까운 형태로 변환하는 역할을 한다.</description>
    </item>
    <item>
      <title>OSI 7 Layers - 6. Presentation Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-6-presentation-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-6-presentation-layer/</guid>
      <description>OSI 7계층 모델에서 6번째 계층으로, 데이터의 표현과 암호화를 담당하는 중요한 역할을 한다.</description>
    </item>
    <item>
      <title>OSI 7 Layers - 7. Application Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-7-application-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-7-application-layer/</guid>
      <description>OSI 7계층 모델에서 최상위 계층으로, 사용자와 네트워크 간의 직접적인 상호작용을 담당한다</description>
    </item>
    <item>
      <title>가비지 컬렉션 (Garbage Collection, GC)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/</link>
      <pubDate>Sun, 06 Oct 2024 10:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/</guid>
      <description>프로그래밍 언어의 메모리 관리 기법 중 하나로, 프로그램이 동적으로 할당했던 메모리 영역 중에서 더 이상 사용하지 않는 영역을 자동으로 찾아내어 해제하는 기능</description>
    </item>
    <item>
      <title>Asynchronous JavaScript</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/</link>
      <pubDate>Mon, 23 Dec 2024 01:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/</guid>
      <description>&lt;h2 id=&#34;asynchronous-javascript&#34;&gt;Asynchronous JavaScript&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>import vs require</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/modules/import-vs-require/</link>
      <pubDate>Sat, 23 Nov 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/modules/import-vs-require/</guid>
      <description>`require`는 Node.js에서 사용되는 CommonJS 모듈 시스템의 키워드로, 동기적으로 모듈을 로드하며 프로그램의 어느 지점에서나 호출할 수 있다. 반면에 `import`는 ES6에서 도입된 모듈 시스템의 키워드로, 코드 실행 전에 모듈을 미리 로드하며 파일의 시작 부분에서만 사용할 수 있다.</description>
    </item>
    <item>
      <title>Communication Methods</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/communication-methods/</link>
      <pubDate>Thu, 06 Mar 2025 03:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/communication-methods/</guid>
      <description>&lt;h2 id=&#34;communication-methods&#34;&gt;Communication Methods&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Network Types</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/network-types/</link>
      <pubDate>Thu, 06 Mar 2025 03:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/network-types/</guid>
      <description>&lt;h2 id=&#34;network-types&#34;&gt;Network Types&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;img alt=&#34;Data Networks classification by spatial scope|400&#34; loading=&#34;lazy&#34; src=&#34;https://buenhyden.github.io/img/Data_Networks_classification_by_spatial_scope.svg&#34;&gt;&lt;figcaption&gt;https://ko.wikipedia.org/wiki/%EC%BB%B4%ED%93%A8%ED%84%B0_%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;nano-network---나노-네트워크&#34;&gt;Nano Network - 나노 네트워크&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨팅, 데이터 저장, 감지 및 작동과 같은 매우 간단한 작업만 수행할 수 있는 상호 연결된 나노머신 (최대 크기가 수백 나노미터 또는 수 마이크로미터인 장치) 의 집합.&lt;/li&gt;
&lt;li&gt;IEEE P1906.1 에 정의.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ban-body-area-network---인체-통신망-인체-영역-통신망&#34;&gt;BAN (Body Area Network) - 인체 통신망, 인체 영역 통신망&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;착용식 컴퓨팅 장치의 무선 네트워크.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pan-personal-area-network---개인-통신망&#34;&gt;PAN (Personal Area Network) - 개인 통신망&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;개인의 작업 공간을 중심으로 장치들을 서로 연결하기 위한 컴퓨터 네트워크.&lt;/li&gt;
&lt;li&gt;원론적으로 개인 통신망은 개인의 주위를 커버하는 컴퓨터 통신망을 의미하므로 데스크톱 환경에서의 주변기기 연결까지도 개인 통신망으로 포함이 가능하지만, 보통의 경우 모바일 컴퓨팅 (Mobile Computing) 이나 웨어러블 컴퓨팅 (Wearable Computing) 적인 성격이 강하고, Bluetooth 나 UWB 등의 기술을 이용하여 개인 휴대 기기 사이에서 구성된 무선 연결망을 의미한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lan-local-area-network---근거리-통신망-로컬-영역-네트워크&#34;&gt;LAN (Local Area Network) - 근거리 통신망, 로컬 영역 네트워크&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;네트워크 매체를 이용하여 집, 사무실, 학교 등의 건물과 같은 가까운 지역을 한데 묶는 네트워크.&lt;/li&gt;
&lt;li&gt;표준화 기구인 미국 전기전자 기술자협회 (IEEE) 와 국제 표준화 기구 (ISO) 에서는 다음과 같이 정의한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;    - 한정된 지역에서 컴퓨터를 기본으로 하는 여러 가지 전자기기 사이의 자유로운 정보교환.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Async and Await</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/promises/async-and-await/</link>
      <pubDate>Tue, 04 Mar 2025 09:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/promises/async-and-await/</guid>
      <description>&lt;h2 id=&#34;async-and-await&#34;&gt;Async and Await&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Closures</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/functions/scope-and-function-stack/closures/</link>
      <pubDate>Tue, 04 Mar 2025 09:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/functions/scope-and-function-stack/closures/</guid>
      <description>&lt;h2 id=&#34;closures&#34;&gt;Closures&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Object</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/object/</link>
      <pubDate>Wed, 29 Jan 2025 01:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/object/</guid>
      <description>&lt;h2 id=&#34;object&#34;&gt;Object&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Event Loop</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/fundamentals/async-programming/event-loop/</link>
      <pubDate>Thu, 26 Dec 2024 14:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/fundamentals/async-programming/event-loop/</guid>
      <description>Node.js의 이벤트 루프는 Node.js 애플리케이션의 핵심 작동 원리로, 비동기 I/O 작업을 효율적으로 처리하는 메커니즘이다.</description>
    </item>
    <item>
      <title>Currying vs. Partial Application</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/currying-vs-partial-application/</link>
      <pubDate>Thu, 26 Dec 2024 10:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/currying-vs-partial-application/</guid>
      <description>&lt;h2 id=&#34;currying-vs-partial-application&#34;&gt;Currying vs. Partial Application&lt;/h2&gt;
&lt;p&gt;자바스크립트의 함수형 프로그래밍에서 가장 중요한 개념 중 두 가지는 커링(Currying)과 부분 적용(Partial Application)이다. 이 두 기법은 콜백 함수를 다루는 강력한 패턴으로, 코드의 재사용성과 모듈성을 크게 향상시킨다.&lt;/p&gt;
&lt;p&gt;커링과 부분 적용은 자바스크립트의 콜백 함수를 더 효과적으로 다루기 위한 강력한 기법이다.&lt;br&gt;
두 패턴 모두 함수의 재사용성을 높이고 코드를 더 모듈화하는 데 도움이 된다.&lt;/p&gt;
&lt;p&gt;두 기법의 핵심 차이는 인자 처리 방식과 최종 함수의 구조에 있다.&lt;br&gt;
커링은 항상 단일 인자 함수의 체인을 만들고, 부분 적용은 일부 인자를 고정한 새로운 함수를 만든다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Partial Application</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/partial-application/</link>
      <pubDate>Thu, 26 Dec 2024 09:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/partial-application/</guid>
      <description>부분 적용이란 여러 개의 인자를 받는 함수에 일부 인자를 미리 제공하여, 나머지 인자만 받는 새로운 함수를 생성하는 기법이다.</description>
    </item>
    <item>
      <title>Event Emitter</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/fundamentals/async-programming/event-loop/event-emitter/</link>
      <pubDate>Thu, 26 Dec 2024 08:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/fundamentals/async-programming/event-loop/event-emitter/</guid>
      <description>&lt;h2 id=&#34;event-emitter&#34;&gt;Event Emitter&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Memoization</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/memoization/</link>
      <pubDate>Thu, 26 Dec 2024 07:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/memoization/</guid>
      <description>&lt;h2 id=&#34;memoization&#34;&gt;Memoization&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Debouncing</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/debouncing/</link>
      <pubDate>Thu, 26 Dec 2024 07:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/debouncing/</guid>
      <description>&lt;h2 id=&#34;debouncing&#34;&gt;Debouncing&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Throttling</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/throttling/</link>
      <pubDate>Thu, 26 Dec 2024 07:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/throttling/</guid>
      <description>&lt;h2 id=&#34;throttling&#34;&gt;Throttling&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Currying</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/currying/</link>
      <pubDate>Thu, 26 Dec 2024 07:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/currying/</guid>
      <description>&lt;h2 id=&#34;currying&#34;&gt;Currying&lt;/h2&gt;
&lt;p&gt;커링(Currying)은 함수형 프로그래밍에서 유래한 중요한 개념으로, 여러 개의 인자를 받는 함수를 단일 인자를 받는 일련의 함수들로 변환하는 기법이다.&lt;br&gt;
이 기법은 수학자이자 논리학자인 하스켈 커리(Haskell Curry)의 이름을 따서 명명되었다.&lt;br&gt;
커링은 자바스크립트의 함수형 프로그래밍 패러다임에서 특히 유용하며, 함수 합성과 부분 적용을 가능하게 하는 강력한 도구이다.&lt;/p&gt;
&lt;p&gt;커링은 자바스크립트에서 함수형 프로그래밍을 구현하는 데 중요한 기법 중 하나이다.&lt;br&gt;
이 기법은 코드의 재사용성과 모듈성을 높이고, 함수 조합을 용이하게 하며, 복잡한 로직을 더 작고 관리하기 쉬운 단위로 분해하는 데 도움이 된다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tree Shaking</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/build-tools/module-bundlers/tree-shaking/</link>
      <pubDate>Thu, 26 Dec 2024 07:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/build-tools/module-bundlers/tree-shaking/</guid>
      <description>트리 쉐이킹(Tree Shaking)은 사용되지 않는 코드를 최종 번들에서 제거하는 프로세스</description>
    </item>
    <item>
      <title>Temporal Dead Zone</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/temporal-dead-zone/</link>
      <pubDate>Wed, 25 Dec 2024 15:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/temporal-dead-zone/</guid>
      <description>일시적 사각지대(Temporal Dead Zone, TDZ)는 JavaScript에서 변수가 선언되었지만 아직 초기화되지 않은 상태로 존재하는 코드 영역을 의미한다.</description>
    </item>
    <item>
      <title>Block</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/scopes/block/</link>
      <pubDate>Wed, 25 Dec 2024 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/scopes/block/</guid>
      <description>JavaScript에서 블록 스코프(Block Scope) 는 중괄호(`{}`)로 감싸진 코드 블록 내에서 선언된 변수나 함수가 해당 블록 내부에서만 유효한 범위를 의미한다</description>
    </item>
    <item>
      <title>Function</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/scopes/function/</link>
      <pubDate>Wed, 25 Dec 2024 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/scopes/function/</guid>
      <description>함수 스코프란 함수 내부에 선언된 변수와 함수가 해당 함수 내부에서만 접근 가능하다는 JavaScript의 특성을 의미한다.</description>
    </item>
    <item>
      <title>Global</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/scopes/global/</link>
      <pubDate>Wed, 25 Dec 2024 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/scopes/global/</guid>
      <description>자바스크립트에서 글로벌 스코프는 코드 전체에서 접근할 수 있는 가장 넓은 범위를 의미하며, 여기서 선언된 변수나 함수는 프로그램 전반에서 사용이 가능하다.</description>
    </item>
    <item>
      <title>Hoisting</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/hoisting/</link>
      <pubDate>Wed, 25 Dec 2024 14:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/hoisting/</guid>
      <description>JavaScript 엔진이 코드를 실행하기 전에 변수, 함수, 클래스 또는 임포트의 선언부를 스코프의 최상단으로 끌어올리는 것처럼 동작하는 JavaScript의 메커니즘으로, 이름 그대로 &amp;#39;끌어올린다(hoist)&amp;#39;는 의미를 가진다.</description>
    </item>
    <item>
      <title>Variable Declarations</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/variable-declarations/</link>
      <pubDate>Wed, 25 Dec 2024 14:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/variable-declarations/</guid>
      <description>프로그램에서 데이터를 저장하고 참조하는 데 사용되는 중요한 개념이다. 변수 선언 방식에 따라 변수의 **유효 범위(Scope)**와 **재할당 가능 여부** 등이 결정된다.</description>
    </item>
    <item>
      <title>변수 명명 규칙(Variable Naming Rules)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/naming-rules/</link>
      <pubDate>Wed, 25 Dec 2024 14:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/naming-rules/</guid>
      <description>JavaScript의 변수 명명 규칙(Variable Naming Rules)</description>
    </item>
    <item>
      <title>Built-in objects</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/object/built-in-objects/</link>
      <pubDate>Wed, 25 Dec 2024 01:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/object/built-in-objects/</guid>
      <description>&lt;h2 id=&#34;built-in-objects&#34;&gt;Built-in objects&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Prototypal Inheritance</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/object/prototypal-inheritance/</link>
      <pubDate>Wed, 25 Dec 2024 01:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/object/prototypal-inheritance/</guid>
      <description>&lt;h2 id=&#34;prototypal-inheritance&#34;&gt;Prototypal Inheritance&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Prototypes</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/object/prototypes/</link>
      <pubDate>Wed, 25 Dec 2024 01:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/object/prototypes/</guid>
      <description>&lt;h2 id=&#34;prototypes&#34;&gt;Prototypes&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Primitive Types</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/primitive-types/</link>
      <pubDate>Wed, 25 Dec 2024 01:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/primitive-types/</guid>
      <description>&lt;h2 id=&#34;primitive-types&#34;&gt;Primitive Types&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>scopes</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/scopes/</link>
      <pubDate>Wed, 25 Dec 2024 00:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/scopes/</guid>
      <description>JavaScript의 스코프는 변수와 함수의 접근성과 생존 기간을 결정하는 중요한 개념으로, 변수나 함수가 **유효하게 접근할 수 있는 범위**를 의미한다.</description>
    </item>
    <item>
      <title>Type Casting</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/data-types/type-casting/</link>
      <pubDate>Tue, 24 Dec 2024 13:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/data-types/type-casting/</guid>
      <description>파이썬에서는 다양한 내장 함수를 사용하여 데이터 타입을 변환할 수 있다.</description>
    </item>
    <item>
      <title>Data Types</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/data-types/</link>
      <pubDate>Tue, 24 Dec 2024 11:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/data-types/</guid>
      <description>Python은 동적 타입 언어로, 변수를 선언할 때 명시적으로 타입을 지정할 필요가 없다.  하지만 각 데이터 타입을 이해하는 것은 효율적인 코딩과 디버깅에 필수적이다.</description>
    </item>
    <item>
      <title>ES Modules Vs CommonJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/modules/es-modules-vs-commonjs/</link>
      <pubDate>Sun, 22 Dec 2024 04:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/modules/es-modules-vs-commonjs/</guid>
      <description>ES Modules(ESM)과 CommonJS(CJS)는 JavaScript에서 사용되는 두 가지 주요 모듈 시스템이다.</description>
    </item>
    <item>
      <title>CommonJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/modules/commonjs/</link>
      <pubDate>Sun, 22 Dec 2024 04:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/modules/commonjs/</guid>
      <description>자바스크립트를 브라우저 외부 환경, 특히 서버 사이드에서 사용하기 위해 만들어진 모듈 시스템</description>
    </item>
    <item>
      <title>ES Modules</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/modules/es-modules/</link>
      <pubDate>Sun, 22 Dec 2024 04:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/modules/es-modules/</guid>
      <description>JavaScript 코드를 모듈 단위로 구성하고 관리할 수 있게 해주는 공식 표준 모듈 시스템이다.  이 시스템은 ECMAScript 2015(ES6)에서 처음 도입되었으며, 코드의 재사용성, 유지보수성, 그리고 의존성 관리를 크게 향상시켰다</description>
    </item>
    <item>
      <title>Incremental Collection</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/algorithms/incremental-collection/</link>
      <pubDate>Fri, 20 Dec 2024 06:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/algorithms/incremental-collection/</guid>
      <description>&lt;h2 id=&#34;incremental-collection&#34;&gt;Incremental Collection&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Mark-Sweep</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/algorithms/mark-sweep/</link>
      <pubDate>Fri, 20 Dec 2024 06:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/algorithms/mark-sweep/</guid>
      <description>&lt;h2 id=&#34;mark-sweep&#34;&gt;Mark-Sweep&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Generational Collection</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/algorithms/generational-collection/</link>
      <pubDate>Fri, 20 Dec 2024 02:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/algorithms/generational-collection/</guid>
      <description>&lt;h2 id=&#34;generational-collection&#34;&gt;Generational Collection&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Reference Counting</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/algorithms/reference-counting/</link>
      <pubDate>Fri, 20 Dec 2024 02:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/algorithms/reference-counting/</guid>
      <description>&lt;h2 id=&#34;reference-counting&#34;&gt;Reference Counting&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Lazy Initialization</title>
      <link>https://buenhyden.github.io/posts/computer-science/fundamentals/lazy-initialization/</link>
      <pubDate>Wed, 18 Dec 2024 10:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/fundamentals/lazy-initialization/</guid>
      <description>&lt;h2 id=&#34;lazy-initialization&#34;&gt;Lazy Initialization&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Structural Pattern Matching</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/conditionals/structural-pattern-matching/</link>
      <pubDate>Mon, 25 Nov 2024 14:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/conditionals/structural-pattern-matching/</guid>
      <description>Python 3.10부터 도입된 **구조적 패턴 매칭(Structural Pattern Matching)** 은 데이터의 구조와 값을 기반으로 코드의 흐름을 제어한다.</description>
    </item>
    <item>
      <title>Decorator</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/decorators/</link>
      <pubDate>Sun, 24 Nov 2024 18:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/decorators/</guid>
      <description>&lt;h2 id=&#34;decorators&#34;&gt;Decorators&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Conditionals</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/conditionals/</link>
      <pubDate>Sun, 24 Nov 2024 12:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/conditionals/</guid>
      <description>Python의 조건문(Conditional Statements)은 프로그램의 흐름을 제어하는 데 사용된다.</description>
    </item>
    <item>
      <title>Comments</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/comments/</link>
      <pubDate>Sun, 24 Nov 2024 11:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/comments/</guid>
      <description>주석은 코드에 대한 설명이나 메모를 추가하는 데 사용되는 텍스트</description>
    </item>
    <item>
      <title>Docstring</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/comments/docstring/</link>
      <pubDate>Sun, 24 Nov 2024 03:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/comments/docstring/</guid>
      <description>python에서 함수, 클래스, 모듈에 대한 문서화를 위해 사용되는 문자열</description>
    </item>
    <item>
      <title>연산자(Operators)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/operators/</link>
      <pubDate>Sun, 24 Nov 2024 00:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/operators/</guid>
      <description>연산자는 프로그래밍의 기본적인 구성 요소로, 데이터를 조작하고 계산하는 데 사용된다.</description>
    </item>
    <item>
      <title>Java Keywords</title>
      <link>https://buenhyden.github.io/posts/programming-languages/java/fundamentals/keywords/</link>
      <pubDate>Wed, 20 Nov 2024 02:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/java/fundamentals/keywords/</guid>
      <description>키워드들은 Java 언어의 기본 구성 요소이며, 각각이 특정한 프로그래밍 목적을 위해 설계되었다.  변수, 메서드, 클래스, 제어문 등 다양한 요소를 정의하고 제어하는 데 필수적인 역할을 한다.</description>
    </item>
    <item>
      <title>소프트웨어 정의 네트워킹 (Software-Defined Networking, SDN)</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/software-defined-networking/</link>
      <pubDate>Sun, 20 Oct 2024 02:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/software-defined-networking/</guid>
      <description>네트워크의 제어 기능을 네트워크 장비에서 분리하여 소프트웨어 기반 컨트롤러로 중앙집중화하는 네트워크 아키텍처.</description>
    </item>
    <item>
      <title>PDU and SDU</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/pdu-and-sdu/</link>
      <pubDate>Sat, 19 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/pdu-and-sdu/</guid>
      <description>데이터에 헤더 (Header) 를 붙이고 아래 계층에 보내는 것을 캡슐화 (Encapsulation), 데이터에 헤더를 제거하고 위 계층에 보내는 것을 역캡슐화 (Decapsulation)</description>
    </item>
    <item>
      <title>Media Access Control Address (MAC Address)</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/hardwares/media-access-control-address/</link>
      <pubDate>Wed, 16 Oct 2024 12:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/hardwares/media-access-control-address/</guid>
      <description>네트워크 장비를 식별하기 위한 고유한 하드웨어 주소</description>
    </item>
    <item>
      <title>Packet</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/packet/</link>
      <pubDate>Wed, 16 Oct 2024 10:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/packet/</guid>
      <description>패킷(Packet)은 네트워크를 통해 전송되는 데이터의 기본 단위</description>
    </item>
    <item>
      <title>Routing</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/routing/</link>
      <pubDate>Wed, 16 Oct 2024 10:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/routing/</guid>
      <description>데이터 패킷이 출발지에서 목적지까지 가장 효율적인 경로로 전달되도록 하는 과정.</description>
    </item>
    <item>
      <title>Network Hop</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/network-hop/</link>
      <pubDate>Wed, 16 Oct 2024 09:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/network-hop/</guid>
      <description>네트워크 홉(Network Hop)은 데이터 패킷이 출발지에서 목적지로 이동하는 과정에서 거치는 네트워크 장비(주로 라우터)의 횟수를 의미한다.</description>
    </item>
    <item>
      <title>프래그먼테이션 (Fragmentation)</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/fragmentation/</link>
      <pubDate>Wed, 16 Oct 2024 02:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/fragmentation/</guid>
      <description>Fragmentation은 큰 데이터 패킷을 네트워크의 최대 전송 단위(Maximum Transmission Unit, MTU)보다 작은 조각으로 나누는 과정이다.</description>
    </item>
    <item>
      <title>Network and Communication Devices</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/hardwares/</link>
      <pubDate>Wed, 16 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/hardwares/</guid>
      <description>컴퓨터 네트워크와 통신 시스템에서 데이터를 전송, 수신, 처리하는데 사용되는 하드웨어 장치.</description>
    </item>
    <item>
      <title>비결정성 (Non-determinism)</title>
      <link>https://buenhyden.github.io/posts/computer-science/fundamentals/non-determinism/</link>
      <pubDate>Sun, 13 Oct 2024 09:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/fundamentals/non-determinism/</guid>
      <description>알고리즘이나 시스템에서 동일한 입력에 대해 매번 다른 과정을 거쳐 다른 결과를 도출할 수 있는 특성</description>
    </item>
  </channel>
</rss>
