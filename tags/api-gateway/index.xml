<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – API-Gateway</title><link>https://buenhyden.github.io/tags/api-gateway/</link><description>Recent content in API-Gateway on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 26 Nov 2024 09:40:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/api-gateway/index.xml" rel="self" type="application/rss+xml"/><item><title>API Gateway</title><link>https://buenhyden.github.io/til/2024/11/api-gateway/</link><pubDate>Tue, 26 Nov 2024 09:40:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/11/api-gateway/</guid><description>
&lt;h2>API Gateway&lt;/h2>&lt;p>클라이언트와 백엔드 서비스 사이에서 중개자 역할을 하는 서버로, 여러 마이크로서비스나 백엔드 시스템에 대한 단일 진입점을 제공하는 중요한 컴포넌트&lt;/p>
&lt;h3>주요 기능&lt;/h3>&lt;ol>
&lt;li>
&lt;p>요청 라우팅 및 프록시&lt;br>
API Gateway는 클라이언트의 요청을 받아 적절한 백엔드 서비스로 라우팅한다.&lt;br>
이는 여러 마이크로서비스의 엔드포인트를 단일화하여 관리를 용이하게 한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>인증 및 권한 부여&lt;br>
클라이언트의 요청에 대한 인증(Authentication)과 권한 부여(Authorization)를 처리한다.&lt;br>
이를 통해 각 마이크로서비스에서 중복으로 보안 로직을 구현할 필요가 없어진다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>프로토콜 변환&lt;br>
클라이언트와 서버 간의 다양한 프로토콜을 지원하고 필요에 따라 변환한다.&lt;br>
예를 들어, REST API와 WebSocket API를 모두 지원할 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>로드 밸런싱&lt;br>
여러 백엔드 서버로 트래픽을 분산시켜 시스템의 부하를 관리한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>캐싱&lt;br>
자주 요청되는 데이터를 캐시하여 응답 시간을 개선하고 백엔드 서버의 부하를 줄인다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>모니터링 및 로깅&lt;br>
API 호출에 대한 모니터링과 로깅을 중앙에서 관리한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;/h3>&lt;ol>
&lt;li>&lt;strong>단일 진입점&lt;/strong>: 클라이언트는 여러 서비스에 대해 하나의 엔드포인트만 알면 된다.&lt;/li>
&lt;li>&lt;strong>보안 강화&lt;/strong>: 인증, 권한 부여 등의 보안 기능을 중앙에서 관리할 수 있다.&lt;/li>
&lt;li>&lt;strong>캡슐화&lt;/strong>: 내부 시스템 구조를 클라이언트로부터 숨길 수 있다.&lt;/li>
&lt;li>&lt;strong>성능 최적화&lt;/strong>: 캐싱, 로드 밸런싱 등을 통해 전체 시스템의 성능을 향상시킬 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>단점&lt;/h3>&lt;ol>
&lt;li>&lt;strong>단일 장애 지점&lt;/strong>: API Gateway 자체가 다운되면 전체 시스템에 영향을 줄 수 있다.&lt;/li>
&lt;li>&lt;strong>추가 네트워크 홉&lt;/strong>: API Gateway를 거치는 추가적인 네트워크 홉으로 인해 약간의 지연이 발생할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>구현 방식&lt;/h3>&lt;ol>
&lt;li>&lt;strong>오픈소스 솔루션&lt;/strong>: 직접 운영하는 방식으로, 커스터마이징이 가능하지만 관리 부담이 있다.&lt;/li>
&lt;li>&lt;strong>클라우드 서비스&lt;/strong>: AWS API Gateway, Azure API Management 등의 관리형 서비스를 이용하는 방식&lt;/li>
&lt;/ol>
&lt;h3>사용 사례&lt;/h3>&lt;ol>
&lt;li>&lt;strong>마이크로서비스 아키텍처&lt;/strong>: 여러 마이크로서비스를 하나의 API로 통합하여 제공한다.&lt;/li>
&lt;li>&lt;strong>레거시 시스템 통합&lt;/strong>: 기존 레거시 시스템과 새로운 서비스를 통합하는 인터페이스로 사용된다.&lt;/li>
&lt;li>&lt;strong>멀티 클라우드 환경&lt;/strong>: 여러 클라우드 환경에 분산된 서비스를 단일 인터페이스로 제공한다.&lt;/li>
&lt;/ol>
&lt;p>API Gateway는 현대적인 분산 시스템 아키텍처에서 중요한 역할을 하며, 시스템의 확장성, 보안, 성능을 향상시키는 데 크게 기여한다.&lt;br>
그러나 구현 시 단일 장애 지점이 되지 않도록 주의해야 하며, 적절한 모니터링과 관리가 필요하다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>