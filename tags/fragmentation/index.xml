<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Fragmentation</title><link>https://buenhyden.github.io/tags/fragmentation/</link><description>Recent content in Fragmentation on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 05 Jan 2025 02:40:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/fragmentation/index.xml" rel="self" type="application/rss+xml"/><item><title>OSI 7 Layers - 3. Network Layer</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/network-layer/</link><pubDate>Wed, 25 Sep 2024 07:17:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/network-layer/</guid><description>
&lt;h2>Network Layer(네트워크 계층)&lt;span class="hx-absolute -hx-mt-20" id="network-layer네트워크-계층">&lt;/span>
&lt;a href="#network-layer%eb%84%a4%ed%8a%b8%ec%9b%8c%ed%81%ac-%ea%b3%84%ec%b8%b5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>네트워크 계층은 OSI 모델의 3계층으로, 데이터를 목적지까지 가장 안전하고 빠르게 전달하는 기능을 담당한다.&lt;br>
이 계층은 라우팅, 패킷 포워딩, 인터네트워킹 등을 수행한다.&lt;/p>
&lt;p>네트워크 계층은 데이터의 종단 간 전달을 담당하는 중요한 계층으로, 효율적인 라우팅과 주소 지정을 통해 복잡한 네트워크 환경에서도 안정적인 통신을 가능하게 한다.&lt;/p>
&lt;p>&lt;figure>
&lt;img src="osi_model_network_layer_3.png" title="Network Layer" alt="Network Layer" loading="lazy" />
&lt;figcaption>Network Layer&lt;/figcaption>
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.cloudflare.com/ko-kr/learning/ddos/glossary/open-systems-interconnection-model-osi/" target="_blank" rel="noopener">https://www.cloudflare.com/ko-kr/learning/ddos/glossary/open-systems-interconnection-model-osi/&lt;/a> _&lt;/p>
&lt;h3>역할과 기능&lt;span class="hx-absolute -hx-mt-20" id="역할과-기능">&lt;/span>
&lt;a href="#%ec%97%ad%ed%95%a0%ea%b3%bc-%ea%b8%b0%eb%8a%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>라우팅&lt;/strong>: 데이터 패킷의 최적 경로를 결정한다.&lt;/li>
&lt;li>논리적 주소 지정: IP 주소를 사용하여 장치를 식별한다.&lt;/li>
&lt;li>패킷 포워딩: 패킷을 다음 네트워크 노드로 전달한다.&lt;/li>
&lt;li>패킷화: 상위 계층에서 받은 데이터를 패킷으로 분할한다.&lt;/li>
&lt;li>인터네트워킹: 서로 다른 네트워크 간의 통신을 가능하게 한다.&lt;/li>
&lt;/ol>
&lt;h3>특징&lt;span class="hx-absolute -hx-mt-20" id="특징">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>비연결성 서비스를 제공한다.&lt;/li>
&lt;li>종단 간 통신을 담당한다.&lt;/li>
&lt;li>QoS(Quality of Service)를 제공한다.&lt;/li>
&lt;/ul>
&lt;h3>데이터 단위와 구조&lt;span class="hx-absolute -hx-mt-20" id="데이터-단위와-구조">&lt;/span>
&lt;a href="#%eb%8d%b0%ec%9d%b4%ed%84%b0-%eb%8b%a8%ec%9c%84%ec%99%80-%ea%b5%ac%ec%a1%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>데이터 단위: 패킷(Packet)&lt;/li>
&lt;li>기본 구조: 헤더 + 데이터
&lt;ul>
&lt;li>헤더: 출발지 IP 주소, 목적지 IP 주소, 프로토콜 정보 등&lt;/li>
&lt;li>데이터: 상위 계층에서 전달받은 정보&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4>IPv4 와 IPv6 의 Header 비교&lt;span class="hx-absolute -hx-mt-20" id="ipv4-와-ipv6-의-header-비교">&lt;/span>
&lt;a href="#ipv4-%ec%99%80-ipv6-%ec%9d%98-header-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>&lt;img src="comparing-ipv4-and-ipv6-headers.png" alt="IPv4 Header vs IPv6 Header" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.networkacademy.io/ccna/ipv6/ipv4-vs-ipv6" target="_blank" rel="noopener">https://www.networkacademy.io/ccna/ipv6/ipv4-vs-ipv6&lt;/a> _&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>필드&lt;/th>
&lt;th>IPv4&lt;/th>
&lt;th>IPv6&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>Bit&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Version&lt;/td>
&lt;td>Version&lt;/td>
&lt;td>Version&lt;/td>
&lt;td>IP 프로토콜 버전&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IHL&lt;/td>
&lt;td>IHL&lt;/td>
&lt;td>-&lt;/td>
&lt;td>헤더 길이 (IPv6 에서는 고정 길이로 제거됨)&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Type of Service&lt;/td>
&lt;td>Type of Service&lt;/td>
&lt;td>Traffic Class&lt;/td>
&lt;td>패킷 우선순위 또는 서비스 유형 지정 지정&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Total Length&lt;/td>
&lt;td>Total Length&lt;/td>
&lt;td>Payload Length&lt;/td>
&lt;td>데이터 페이로드 길이&lt;/td>
&lt;td>16&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Identification&lt;/td>
&lt;td>Identification&lt;/td>
&lt;td>-&lt;/td>
&lt;td>단편화 관련 필드 (IPv6 에서는 제거됨)&lt;/td>
&lt;td>16&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Flags&lt;/td>
&lt;td>Flags&lt;/td>
&lt;td>-&lt;/td>
&lt;td>단편화 관련 필드 (IPv6 에서는 제거됨)&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Fragment Offset&lt;/td>
&lt;td>Fragment Offset&lt;/td>
&lt;td>-&lt;/td>
&lt;td>단편화 관련 필드 (IPv6 에서는 제거됨)&lt;/td>
&lt;td>13&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TTL&lt;/td>
&lt;td>TTL&lt;/td>
&lt;td>Hop Limit&lt;/td>
&lt;td>패킷의 최대 홉 수&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Protocol&lt;/td>
&lt;td>Protocol&lt;/td>
&lt;td>Next Header&lt;/td>
&lt;td>상위 계층 프로토콜 식별&lt;/td>
&lt;td>8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Header Checksum&lt;/td>
&lt;td>Header Checksum&lt;/td>
&lt;td>-&lt;/td>
&lt;td>오류 검출 (IPv6 에서는 제거됨)&lt;/td>
&lt;td>16&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Source Address&lt;/td>
&lt;td>Source Address&lt;/td>
&lt;td>Source Address&lt;/td>
&lt;td>송신자의 IP 주소&lt;/td>
&lt;td>IPv4: 32&lt;br>IPv6: 128&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Destination Address&lt;/td>
&lt;td>Destination Address&lt;/td>
&lt;td>Destination Address&lt;/td>
&lt;td>수신자의 IP 주소&lt;/td>
&lt;td>IPv4: 32&lt;br>IPv6: 128&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Options&lt;/td>
&lt;td>Options&lt;/td>
&lt;td>-&lt;/td>
&lt;td>추가 옵션 (IPv6 에서는 확장 헤더로 대체됨)&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Padding&lt;/td>
&lt;td>Padding&lt;/td>
&lt;td>-&lt;/td>
&lt;td>패딩 (IPv6 에서는 제거됨)&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Flow Label&lt;/td>
&lt;td>-&lt;/td>
&lt;td>Flow Label&lt;/td>
&lt;td>플로우 식별을 위한 레이블&lt;/td>
&lt;td>20&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>작동 방식&lt;span class="hx-absolute -hx-mt-20" id="작동-방식">&lt;/span>
&lt;a href="#%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>상위 계층으로부터 데이터를 받아 패킷으로 분할한다.&lt;/li>
&lt;li>각 패킷에 출발지와 목적지 IP 주소를 포함한 헤더를 추가한다.&lt;/li>
&lt;li>라우팅 알고리즘을 사용하여 최적의 경로를 결정한다.&lt;/li>
&lt;li>패킷을 다음 홉(hop)으로 전달한다.&lt;/li>
&lt;li>목적지에 도착할 때까지 3-4 과정을 반복한다.&lt;/li>
&lt;/ol>
&lt;h4>라우팅 프로토콜과 알고리즘&lt;span class="hx-absolute -hx-mt-20" id="라우팅-프로토콜과-알고리즘">&lt;/span>
&lt;a href="#%eb%9d%bc%ec%9a%b0%ed%8c%85-%ed%94%84%eb%a1%9c%ed%86%a0%ec%bd%9c%ea%b3%bc-%ec%95%8c%ea%b3%a0%eb%a6%ac%ec%a6%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>네트워크 계층에서는 다양한 라우팅 프로토콜을 사용한다:&lt;/p>
&lt;ul>
&lt;li>정적 라우팅: 수동으로 설정된 경로를 사용한다.&lt;/li>
&lt;li>동적 라우팅: 자동으로 최적의 경로를 찾아 업데이트한다.&lt;/li>
&lt;/ul>
&lt;h3>주의 사항&lt;span class="hx-absolute -hx-mt-20" id="주의-사항">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9d%98-%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>네트워크 계층은 신뢰성 있는 데이터 전송을 보장하지 않는다. 이는 상위 계층(전송 계층)의 역할이다.&lt;/li>
&lt;li>IP 주소 충돌을 방지해야 한다.&lt;/li>
&lt;li>라우팅 테이블의 최신성과 정확성을 유지해야 한다.&lt;/li>
&lt;/ul>
&lt;h3>네트워크 계층의 중요성&lt;span class="hx-absolute -hx-mt-20" id="네트워크-계층의-중요성">&lt;/span>
&lt;a href="#%eb%84%a4%ed%8a%b8%ec%9b%8c%ed%81%ac-%ea%b3%84%ec%b8%b5%ec%9d%98-%ec%a4%91%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>네트워크 계층은 다음과 같은 이유로 중요하다:&lt;/p>
&lt;ol>
&lt;li>다양한 네트워크 연결: 서로 다른 유형의 네트워크를 연결할 수 있게 한다.&lt;/li>
&lt;li>확장성: 큰 규모의 네트워크를 효율적으로 관리할 수 있다.&lt;/li>
&lt;li>유연성: 다양한 라우팅 프로토콜을 사용하여 네트워크 환경에 적응할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>네트워크 계층의 주요 프로토콜&lt;span class="hx-absolute -hx-mt-20" id="네트워크-계층의-주요-프로토콜">&lt;/span>
&lt;a href="#%eb%84%a4%ed%8a%b8%ec%9b%8c%ed%81%ac-%ea%b3%84%ec%b8%b5%ec%9d%98-%ec%a3%bc%ec%9a%94-%ed%94%84%eb%a1%9c%ed%86%a0%ec%bd%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>IP(Internet Protocol): 가장 기본적인 네트워크 계층 프로토콜.&lt;/li>
&lt;li>ICMP(Internet Control Message Protocol): 네트워크 상태와 오류를 보고하는 프로토콜.&lt;/li>
&lt;li>RIP, OSPF와 같은 라우팅 프로토콜: 라우터들이 경로 정보를 교환하는 프로토콜.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>프래그먼테이션 (Fragmentation)</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/network-layer/fragmentation/</link><pubDate>Sun, 05 Jan 2025 02:40:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/network-layer/fragmentation/</guid><description>
&lt;h2>프래그먼테이션 (Fragmentation)&lt;span class="hx-absolute -hx-mt-20" id="프래그먼테이션-fragmentation">&lt;/span>
&lt;a href="#%ed%94%84%eb%9e%98%ea%b7%b8%eb%a8%bc%ed%85%8c%ec%9d%b4%ec%85%98-fragmentation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Fragmentation은 큰 데이터 패킷을 네트워크의 최대 전송 단위(Maximum Transmission Unit, MTU)보다 작은 조각으로 나누는 과정이다.&lt;/p>
&lt;p>이는 다음과 같은 목적을 가진다:&lt;/p>
&lt;ol>
&lt;li>다양한 MTU를 가진 네트워크 간의 통신 가능&lt;/li>
&lt;li>네트워크 성능 향상&lt;/li>
&lt;li>대역폭 활용도 개선&lt;/li>
&lt;/ol>
&lt;h3>프래그먼테이션이 필요한 이유&lt;span class="hx-absolute -hx-mt-20" id="프래그먼테이션이-필요한-이유">&lt;/span>
&lt;a href="#%ed%94%84%eb%9e%98%ea%b7%b8%eb%a8%bc%ed%85%8c%ec%9d%b4%ec%85%98%ec%9d%b4-%ed%95%84%ec%9a%94%ed%95%9c-%ec%9d%b4%ec%9c%a0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>네트워크마다 처리할 수 있는 최대 패킷 크기가 다르다.&lt;br>
이를 MTU(Maximum Transmission Unit)라고 한다.&lt;br>
예를 들어:&lt;/p>
&lt;ul>
&lt;li>이더넷의 MTU: 1500 바이트&lt;/li>
&lt;li>PPP의 MTU: 576 바이트&lt;/li>
&lt;li>Wi-Fi의 MTU: 2304 바이트&lt;br>
만약 4000 바이트 크기의 데이터를 MTU가 1500 바이트인 이더넷 네트워크로 전송하려면, 이 데이터는 반드시 더 작은 조각들로 나뉘어야 한다.&lt;/li>
&lt;/ul>
&lt;h3>Fragmentation의 작동 방식&lt;span class="hx-absolute -hx-mt-20" id="fragmentation의-작동-방식">&lt;/span>
&lt;a href="#fragmentation%ec%9d%98-%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>프래그먼트 생성 원본 패킷은 여러 개의 작은 프래그먼트로 나뉜다.&lt;br>
각 프래그먼트는:&lt;/p>
&lt;ul>
&lt;li>원본 패킷의 헤더 정보를 포함&lt;/li>
&lt;li>고유한 프래그먼트 오프셋 값을 가짐&lt;/li>
&lt;li>More Fragments(MF) 플래그로 추가 프래그먼트 여부를 표시&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>프래그먼트 전송 각 프래그먼트는 독립적으로 목적지로 전송된다.&lt;br>
이때:&lt;/p>
&lt;ul>
&lt;li>각각 다른 경로로 전송될 수 있음&lt;/li>
&lt;li>순서가 뒤바뀔 수 있음&lt;/li>
&lt;li>일부가 손실될 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>재조립 과정 목적지에서는 다음과 같은 방식으로 프래그먼트들을 재조립한다:&lt;/p>
&lt;ul>
&lt;li>프래그먼트 오프셋을 이용해 올바른 순서 확인&lt;/li>
&lt;li>MF 플래그로 모든 프래그먼트 수신 여부 확인&lt;/li>
&lt;li>타임아웃을 통해 손실된 프래그먼트 처리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>구체적인 예시를 통한 이해&lt;span class="hx-absolute -hx-mt-20" id="구체적인-예시를-통한-이해">&lt;/span>
&lt;a href="#%ea%b5%ac%ec%b2%b4%ec%a0%81%ec%9d%b8-%ec%98%88%ec%8b%9c%eb%a5%bc-%ed%86%b5%ed%95%9c-%ec%9d%b4%ed%95%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>4000 바이트 크기의 데이터 패킷이 1500 바이트 MTU 네트워크를 통과해야 하는 경우:&lt;/p>
&lt;ul>
&lt;li>1번 프래그먼트:
&lt;ul>
&lt;li>크기: 1500 바이트&lt;/li>
&lt;li>오프셋: 0&lt;/li>
&lt;li>MF 플래그: 1 (더 있음)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>2번 프래그먼트:
&lt;ul>
&lt;li>크기: 1500 바이트&lt;/li>
&lt;li>오프셋: 1480&lt;/li>
&lt;li>MF 플래그: 1 (더 있음)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>3번 프래그먼트:
&lt;ul>
&lt;li>크기: 1000 바이트&lt;/li>
&lt;li>오프셋: 2960&lt;/li>
&lt;li>MF 플래그: 0 (마지막)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3>Fragmentation의 주요 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="fragmentation의-주요-구성-요소">&lt;/span>
&lt;a href="#fragmentation%ec%9d%98-%ec%a3%bc%ec%9a%94-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>Identification Field (16 비트): 같은 원본 패킷의 조각들을 식별한다.&lt;/li>
&lt;li>Fragment Offset Field (13 비트): 조각의 순서를 나타낸다.&lt;/li>
&lt;li>More Fragments Field (MF): 더 많은 조각이 있는지 표시한다.&lt;/li>
&lt;li>Don&amp;rsquo;t Fragment Field (DF): 패킷의 분할을 금지할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>Fragmentation의 장단점&lt;span class="hx-absolute -hx-mt-20" id="fragmentation의-장단점">&lt;/span>
&lt;a href="#fragmentation%ec%9d%98-%ec%9e%a5%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>장점:&lt;/p>
&lt;ul>
&lt;li>다양한 네트워크 환경에서의 통신 가능&lt;/li>
&lt;li>네트워크 리소스의 효율적 사용&lt;/li>
&lt;/ul>
&lt;p>단점:&lt;/p>
&lt;ul>
&lt;li>재조립 과정에서의 복잡성 증가&lt;/li>
&lt;li>패킷 손실 시 전체 데이터의 재전송 필요&lt;/li>
&lt;li>보안 문제 발생 가능성 (일부 방화벽에서 문제 발생)&lt;/li>
&lt;/ul>
&lt;h3>IPv6에서의 프래그먼테이션&lt;span class="hx-absolute -hx-mt-20" id="ipv6에서의-프래그먼테이션">&lt;/span>
&lt;a href="#ipv6%ec%97%90%ec%84%9c%ec%9d%98-%ed%94%84%eb%9e%98%ea%b7%b8%eb%a8%bc%ed%85%8c%ec%9d%b4%ec%85%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>IPv6에서는 중간 라우터에서의 프래그먼테이션을 금지하고, 대신:&lt;/p>
&lt;ul>
&lt;li>Path MTU Discovery를 통해 적절한 패킷 크기 결정&lt;/li>
&lt;li>출발지에서만 프래그먼테이션 수행&lt;/li>
&lt;li>더 효율적인 전송 보장&lt;/li>
&lt;/ul>
&lt;h3>Fragmentation 회피 기술&lt;span class="hx-absolute -hx-mt-20" id="fragmentation-회피-기술">&lt;/span>
&lt;a href="#fragmentation-%ed%9a%8c%ed%94%bc-%ea%b8%b0%ec%88%a0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>Path MTU Discovery: 경로상의 최소 MTU를 찾아 패킷 크기를 조절한다.&lt;/li>
&lt;li>TCP MSS (Maximum Segment Size) 조정: TCP 세그먼트 크기를 MTU에 맞게 조절한다.&lt;/li>
&lt;/ol>
&lt;h3>실제 응용 사례&lt;span class="hx-absolute -hx-mt-20" id="실제-응용-사례">&lt;/span>
&lt;a href="#%ec%8b%a4%ec%a0%9c-%ec%9d%91%ec%9a%a9-%ec%82%ac%eb%a1%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>파일 전송을 예로 들어보면:&lt;br>
10MB 크기의 파일을 전송할 경우:&lt;/p>
&lt;ol>
&lt;li>응용 프로그램 계층: 파일을 세그먼트로 분할&lt;/li>
&lt;li>IP 계층: 필요한 경우 추가 프래그먼테이션 수행&lt;/li>
&lt;li>네트워크: MTU에 맞는 크기로 전송&lt;/li>
&lt;li>수신측: 순차적 재조립 후 파일 복원&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>