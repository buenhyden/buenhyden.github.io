<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Architecture on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/architecture/</link>
    <description>Recent content in Architecture on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Sun, 25 May 2025 09:46:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Architecture</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/overview/architecture/</link>
      <pubDate>Sun, 25 May 2025 09:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/overview/architecture/</guid>
      <description>소프트웨어 아키텍처는 시스템의 구성 요소, 구조, 상호작용, 기술 선택, 품질 속성 등을 정의하는 설계의 청사진이다. 이는 유지보수성, 확장성, 성능, 보안 등 비기능 요구사항을 충족시키며, 시스템의 성공적 개발과 장기적 진화를 이끄는 핵심 역할을 한다.</description>
    </item>
    <item>
      <title>System Design and Architecture</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/overview/</link>
      <pubDate>Thu, 19 Sep 2024 21:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/overview/</guid>
      <description>시스템 디자인은 복잡한 소프트웨어 시스템의 구조와 구성 요소를 정의하여 안정적이고 확장 가능한 시스템을 구축하는 과정이다. 사용자 요구사항을 분석하고, 구조적 설계를 통해 시스템 구성요소와 인터페이스를 정의하며, 성능, 보안, 유지보수성을 고려하여 최적의 아키텍처를 구축한다. 현대 소프트웨어 개발에서 필수적인 역할을 수행한다.</description>
    </item>
    <item>
      <title>Decompose by Business Capability vs Decompose by Subdomain</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/microservices/service-decomposition/decompose-by-business-capability-vs-decompose-by-subdomain/</link>
      <pubDate>Wed, 13 Nov 2024 01:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/microservices/service-decomposition/decompose-by-business-capability-vs-decompose-by-subdomain/</guid>
      <description>Decompose by Business Capability는 조직의 기능적 관점에서 시스템을 구조화할 때 적합하며, 비즈니스와 기술의 연계를 중시하는 경우에 유용하다.  Decompose by Subdomain은 도메인의 문제를 세분화하고 기술적 복잡성을 다루기 위해 설계된 방식으로, 도메인 주도 설계 원칙을 사용하는 프로젝트에 더 적합하다.</description>
    </item>
    <item>
      <title>Cloud-Native Architecture</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/</link>
      <pubDate>Sun, 27 Apr 2025 07:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/</guid>
      <description>Cloud‑Native Architecture 는 컨테이너, 마이크로서비스, 자동화, 선언형 인터페이스를 이용해 클라우드의 유연성, 확장성, 관찰성, 복원력을 최대한 활용하는 현대 애플리케이션 설계 방식이다. 이를 통해 빠른 배포, 운영 자동화, 장애 복구, 비용 최적화를 지원한다.</description>
    </item>
    <item>
      <title>Serverless Architecture</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/serverless/</link>
      <pubDate>Wed, 19 Mar 2025 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/serverless/</guid>
      <description>Serverless Architecture 는 개발자가 인프라 관리 없이 코드 (함수) 를 클라우드에 배포하고, 이벤트 기반으로 자동 실행·확장하며 **비용 효율성**, **운영 오버헤드 감소**, **빠른 시장 출시**를 달성하는 클라우드 네이티브 구성이며, FaaS 와 BaaS 가 핵심이다.</description>
    </item>
    <item>
      <title>Self-contained Service</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/microservices/service-decomposition/self-contained-service/</link>
      <pubDate>Wed, 13 Nov 2024 10:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/microservices/service-decomposition/self-contained-service/</guid>
      <description>단일 비즈니스 기능을 완전히 독립적으로 구현한 서비스를 의미한다.  이 서비스는 자체적으로 데이터를 저장하고, 비즈니스 로직을 처리하며, 사용자 인터페이스를 제공할 수 있다.</description>
    </item>
    <item>
      <title>Service per team</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/microservices/service-decomposition/service-per-team/</link>
      <pubDate>Wed, 13 Nov 2024 10:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/microservices/service-decomposition/service-per-team/</guid>
      <description>각 마이크로서비스를 개별 팀이 소유하고 관리하는 방식</description>
    </item>
    <item>
      <title>Decompose by Business Capability</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/microservices/service-decomposition/decompose-by-business-capability/</link>
      <pubDate>Wed, 13 Nov 2024 01:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/microservices/service-decomposition/decompose-by-business-capability/</guid>
      <description>이 패턴은 비즈니스 능력을 기반으로 애플리케이션을 마이크로서비스로 분해하는 방법을 제시한다.</description>
    </item>
    <item>
      <title>Decompose by Subdomain</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/microservices/service-decomposition/decompose-by-subdomain/</link>
      <pubDate>Wed, 13 Nov 2024 01:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/microservices/service-decomposition/decompose-by-subdomain/</guid>
      <description>비즈니스 도메인을 여러 하위 도메인으로 나누어 마이크로서비스를 설계하는 방법</description>
    </item>
    <item>
      <title>Client Server Architecture</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/traditional-patterns/client-server/</link>
      <pubDate>Thu, 26 Sep 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/traditional-patterns/client-server/</guid>
      <description>Client‑Server Architecture 는 클라이언트가 요청 (request) 을 보내면 서버가 응답 (response) 하는 구조로, 역할과 책임을 분리하고 중앙화된 자원 관리, 보안성, 확장성을 제공한다. 웹, 데이터베이스, 이메일 시스템 등 대부분의 네트워크 기반 애플리케이션의 기본 모델이다.</description>
    </item>
  </channel>
</rss>
