<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Thread-Management on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/thread-management/</link>
    <description>Recent content in Thread-Management on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Mon, 12 May 2025 03:11:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/thread-management/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Multithreading vs. Multiprocessing vs Multitasking</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/thread-programming/multithreading/multithreading-vs-multiprocessing-vs-multitasking/</link>
      <pubDate>Sat, 05 Oct 2024 14:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/thread-programming/multithreading/multithreading-vs-multiprocessing-vs-multitasking/</guid>
      <description>Multithreading, Multiprocessing, Multitasking은 컴퓨터 시스템에서 동시성과 병렬성을 구현하는 세 가지 주요 개념이다.</description>
    </item>
    <item>
      <title>Thread Management</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/thread-programming/thread-management/</link>
      <pubDate>Mon, 12 May 2025 03:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/thread-programming/thread-management/</guid>
      <description>스레드 관리는 프로세스 내 여러 실행 흐름을 효율적으로 생성, 스케줄링, 동기화, 종료하는 운영체제의 핵심 기능이다. 이를 통해 CPU 자원 활용도를 높이고, 동시성 및 병렬성을 확보할 수 있다. 동기화와 자원 관리가 중요하다.</description>
    </item>
    <item>
      <title>코루틴(Coroutine)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/thread-programming/thread/coroutine/</link>
      <pubDate>Sat, 05 Oct 2024 06:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/thread-programming/thread/coroutine/</guid>
      <description>코루틴은 &amp;#34;협력적인 루틴&amp;#34;이라는 의미로, 여러 작업이 협력하여 실행되는 방식을 말한다. 일반 함수와 달리, 코루틴은 실행 중간에 일시 중단되었다가 나중에 다시 재개될 수 있다.</description>
    </item>
    <item>
      <title>Threads</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/thread-programming/thread/</link>
      <pubDate>Fri, 04 Oct 2024 23:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/thread-programming/thread/</guid>
      <description>스레드는 프로세스 내에서 실행되는 가장 작은 단위로, 자원을 공유하며 병렬성과 동시성을 구현한다. 사용자 수준/커널 수준 스레드로 나뉘며, 경량 스레드(Java Virtual Thread 등)와 같은 최신 모델도 사용된다. 동기화 문제와 성능 오버헤드 고려가 필수다.</description>
    </item>
  </channel>
</rss>
