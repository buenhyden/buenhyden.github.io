<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Von-Neumann-Architecture</title><link>https://buenhyden.github.io/tags/von-neumann-architecture/</link><description>Recent content in Von-Neumann-Architecture on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 14 Jan 2025 01:51:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/von-neumann-architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Von Neumann architecture</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/von-neumann-architecture/</link><pubDate>Tue, 14 Jan 2025 01:51:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/von-neumann-architecture/</guid><description>
&lt;h2>Von Neumann Architecture&lt;/h2>&lt;p>Von Neumann architecture는 1945년 John von Neumann이 제안한 컴퓨터 아키텍처로, 현대 대부분의 컴퓨터 시스템의 기본이 되는 설계이다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Computer%20Architecture/Processor%20Architecture/Von_Neumann_architecture_basic_structure.png"
alt=""
loading="lazy" />
&lt;/figure>&lt;/p>
&lt;h3>특징&lt;/h3>&lt;ol>
&lt;li>
&lt;p>순차적 실행:&lt;/p>
&lt;ul>
&lt;li>명령어를 메모리에서 한 번에 하나씩 순차적으로 가져와 실행&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>레지스터:&lt;/p>
&lt;ul>
&lt;li>프로그램 카운터 (PC): 다음 실행할 명령어의 주소 저장&lt;/li>
&lt;li>명령어 레지스터 (CIR): 현재 실행 중인 명령어 저장&lt;/li>
&lt;li>메모리 주소 레지스터 (MAR): 접근할 메모리 주소 저장&lt;/li>
&lt;li>메모리 데이터 레지스터 (MDR): 메모리와 주고받는 데이터 저장&lt;/li>
&lt;li>누산기 (Accumulator): 연산 결과 임시 저장&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>버스 시스템:&lt;/p>
&lt;ul>
&lt;li>데이터 버스: CPU와 메모리, 입출력 장치 간 데이터 전송&lt;/li>
&lt;li>주소 버스: 메모리 주소 전송&lt;/li>
&lt;li>제어 버스: 제어 신호 전송&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Fetch-Decode-Execute 사이클:&lt;/p>
&lt;ul>
&lt;li>명령어 인출 (Fetch)&lt;/li>
&lt;li>명령어 해독 (Decode)&lt;/li>
&lt;li>명령어 실행 (Execute)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>핵심 구성 요소&lt;/h3>&lt;ol>
&lt;li>
&lt;p>제어 장치 (Control Unit):&lt;/p>
&lt;ul>
&lt;li>프로그램의 명령어를 해석하고 실행을 제어한다.&lt;/li>
&lt;li>다른 모든 구성 요소들의 동작을 조정한다.&lt;/li>
&lt;li>마치 오케스트라의 지휘자와 같은 역할을 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>산술 논리 장치 (Arithmetic Logic Unit, ALU):&lt;/p>
&lt;ul>
&lt;li>실제 계산과 논리 연산을 수행한다.&lt;/li>
&lt;li>덧셈, 뺄셈, 곱셈, 나눗셈과 같은 수학적 연산을 처리한다.&lt;/li>
&lt;li>AND, OR, NOT과 같은 논리 연산도 수행한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>메모리 (Memory):&lt;/p>
&lt;ul>
&lt;li>프로그램과 데이터를 모두 저장한다.&lt;/li>
&lt;li>각 메모리 위치는 고유한 주소를 가진다.&lt;/li>
&lt;li>현대 컴퓨터에서는 RAM이 이 역할을 담당한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>입력 장치 (Input Devices):&lt;/p>
&lt;ul>
&lt;li>외부로부터 데이터를 받아들인다.&lt;/li>
&lt;li>키보드, 마우스, 스캐너 등이 해당된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>출력 장치 (Output Devices):&lt;/p>
&lt;ul>
&lt;li>처리된 결과를 외부로 전달한다.&lt;/li>
&lt;li>모니터, 프린터, 스피커 등이 해당된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>작동 방식&lt;/h3>&lt;p>폰 노이만 아키텍처의 작동 과정을 단계별로 살펴보자:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>명령어 인출 (Fetch):&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>Program Counter → Memory Address
Memory → Instruction Register&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>프로그램 카운터가 가리키는 메모리 주소에서 다음 실행할 명령어를 가져온다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>명령어 해석 (Decode):&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>Control Unit analyzes instruction:
- Operation to perform
- Data locations
- Next instruction&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>제어 장치가 명령어를 해석하여 수행할 작업을 결정한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>실행 (Execute):&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>ALU performs operation:
IF addition:
result = operand1 &amp;#43; operand2
ELSE IF comparison:
result = compare(operand1, operand2)
…&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>ALU나 다른 하드웨어 구성 요소가 명령어를 실행한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>저장 (Store):&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>IF result needs storing:
Memory[destination] = result
Program Counter &amp;#43;= instruction_length&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>결과를 메모리에 저장하고 다음 명령어로 이동한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>폰 노이만 아키텍처의 특징과 장단점&lt;/h3>&lt;p>장점:&lt;/p>
&lt;ol>
&lt;li>단순성: 명확한 구조로 인해 설계와 구현이 비교적 단순하다.&lt;/li>
&lt;li>유연성: 프로그램을 쉽게 수정하고 업데이트할 수 있다.&lt;/li>
&lt;li>범용성: 다양한 종류의 프로그램을 실행할 수 있다.&lt;/li>
&lt;/ol>
&lt;p>단점:&lt;/p>
&lt;ol>
&lt;li>폰 노이만 병목 현상: 메모리와 처리 장치 사이의 단일 통로로 인한 성능 제한이 있다.&lt;/li>
&lt;li>순차적 실행: 명령어가 순차적으로 실행되어 병렬 처리가 제한된다.&lt;/li>
&lt;li>저장 프로그램 개념:
&lt;ul>
&lt;li>프로그램과 데이터를 동일한 메모리에 저장&lt;/li>
&lt;li>이로 인해 프로그램의 수정과 실행이 용이해짐&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>현대적 발전과 적용&lt;/h3>&lt;p>현대 컴퓨터는 기본적으로 폰 노이만 아키텍처를 따르지만, 여러 가지 개선 사항을 도입했다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>캐시 메모리:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>Memory Hierarchy:
L1 Cache (Fastest, Smallest)
L2 Cache
L3 Cache
RAM (Main Memory)
Hard Drive (Storage)&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>파이프라이닝:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>Instruction Pipeline:
Fetch → Decode → Execute → Store
Fetch → Decode → Execute → Store
Fetch → Decode → Execute → Store&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>병렬 처리:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>Multiple Cores:
Core 1: Instruction Stream 1
Core 2: Instruction Stream 2
Core N: Instruction Stream N&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>