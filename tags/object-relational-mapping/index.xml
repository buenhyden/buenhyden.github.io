<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Object-Relational-Mapping</title><link>https://buenhyden.github.io/tags/object-relational-mapping/</link><description>Recent content in Object-Relational-Mapping on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 25 Oct 2024 03:42:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/object-relational-mapping/index.xml" rel="self" type="application/rss+xml"/><item><title>ORM(Object-Relational Mapping)</title><link>https://buenhyden.github.io/posts/backend/database-systems/orm/</link><pubDate>Fri, 25 Oct 2024 03:42:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/backend/database-systems/orm/</guid><description>
&lt;h2>ORM(Object-Relational Mapping)&lt;span class="hx-absolute -hx-mt-20" id="ormobject-relational-mapping">&lt;/span>
&lt;a href="#ormobject-relational-mapping" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>객체 지향 프로그래밍 언어와 관계형 데이터베이스 사이의 불일치를 해결하기 위한 기술&lt;/p>
&lt;p>특징:&lt;/p>
&lt;ol>
&lt;li>객체와 데이터베이스 테이블 간의 매핑&lt;/li>
&lt;li>SQL 쿼리 대신 객체 지향적 방식으로 데이터베이스 조작&lt;/li>
&lt;li>데이터베이스 독립성 제공&lt;/li>
&lt;/ol>
&lt;p>장점:&lt;/p>
&lt;ol>
&lt;li>직관적이고 가독성 좋은 코드 작성 가능&lt;/li>
&lt;li>생산성 향상: 개발자가 비즈니스 로직에 집중 가능&lt;/li>
&lt;li>재사용성과 유지보수성 증가&lt;/li>
&lt;li>데이터베이스 종속성 감소&lt;/li>
&lt;/ol>
&lt;p>단점:&lt;/p>
&lt;ol>
&lt;li>성능 저하 가능성: 복잡한 쿼리의 경우 최적화가 어려울 수 있음&lt;/li>
&lt;li>학습 곡선: ORM 사용법을 익히는 데 시간이 필요&lt;/li>
&lt;li>복잡한 쿼리 처리의 한계: 매우 복잡한 쿼리는 직접 SQL 작성이 필요할 수 있음&lt;/li>
&lt;/ol>
&lt;p>ORM과 raw query 사이에는 성능 차이가 존재한다.&lt;br>
일반적으로 raw SQL이 ORM보다 더 나은 성능을 보인다.&lt;br>
주요 차이점은 다음과 같습니다:&lt;/p>
&lt;ol>
&lt;li>실행 속도: raw SQL 쿼리가 ORM보다 더 빠른 실행 속도를 보인다. ORM은 추상화 계층으로 인한 오버헤드가 있어 성능이 저하될 수 있다.&lt;/li>
&lt;li>복잡한 쿼리 처리: raw SQL은 복잡한 데이터베이스 작업에서 더 효율적이다. 개발자가 데이터베이스 특정 기능과 최적화를 직접 활용할 수 있기 때문이다.&lt;/li>
&lt;li>쿼리 최적화: raw SQL을 사용하면 개발자가 쿼리를 세밀하게 조정하고 최적화할 수 있다. ORM이 생성하는 쿼리는 항상 최적화되지 않을 수 있다.&lt;/li>
&lt;li>대규모 데이터 처리: 대량 삽입, 업데이트, 삭제 작업에서 ORM은 raw SQL보다 느릴 수 있다.&lt;br>
그러나 ORM도 캐싱 메커니즘을 통해 성능을 개선할 수 있으며, 간단한 CRUD 작업이나 중소규모 애플리케이션에서는 충분히 효과적일 수 있다. 따라서 프로젝트의 요구사항과 복잡성에 따라 적절한 방식을 선택해야 한다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>