<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Validation</title><link>https://buenhyden.github.io/tags/validation/</link><description>Recent content in Validation on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 28 Nov 2024 08:03:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/validation/index.xml" rel="self" type="application/rss+xml"/><item><title>Validation and Verification</title><link>https://buenhyden.github.io/til/2024/11/validation-and-verification/</link><pubDate>Thu, 28 Nov 2024 08:03:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/11/validation-and-verification/</guid><description>
&lt;h2>Validation and Verification&lt;span class="hx-absolute -hx-mt-20" id="validation-and-verification">&lt;/span>
&lt;a href="#validation-and-verification" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>소프트웨어 테스팅에서 Validation과 Verification은 서로 다른 관점과 목적을 가지고 있다.&lt;br>
Verification은 &amp;ldquo;제품을 올바르게 만들고 있는가?&amp;ldquo;를 확인하는 과정이고, Validation은 &amp;ldquo;올바른 제품을 만들고 있는가?&amp;ldquo;를 확인하는 과정이다.&lt;br>
이러한 근본적인 차이는 테스트 방법과 접근 방식에 큰 영향을 미친다.&lt;/p>
&lt;h3>Verification&lt;span class="hx-absolute -hx-mt-20" id="verification">&lt;/span>
&lt;a href="#verification" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Verification은 &lt;strong>&amp;ldquo;우리가 제품을 올바르게 만들고 있는가?&amp;rdquo;&lt;/strong> 라는 질문에 답하는 프로세스로, 개발 과정 중에 제품이 명세된 요구사항과 설계 문서에 따라 정확하게 구현되고 있는지를 검증한다.&lt;/p>
&lt;p>개발자와 테스터가 수행하며, 코드 레벨에서의 정확성과 기술적 완성도를 중요시한다.&lt;br>
예를 들어, 특정 함수가 입력값에 대해 정확한 출력값을 반환하는지, 데이터베이스 쿼리가 예상대로 작동하는지 등을 확인한다.&lt;/p>
&lt;h3>Validation&lt;span class="hx-absolute -hx-mt-20" id="validation">&lt;/span>
&lt;a href="#validation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Validation은 &lt;strong>&amp;ldquo;우리가 올바른 제품을 만들고 있는가?&amp;rdquo;&lt;/strong> 라는 질문에 답하는 프로세스로, 개발된 제품이 실제 사용자의 요구사항과 기대를 충족시키는지 확인하는 과정이다.&lt;/p>
&lt;p>사용자 관점에서의 테스트가 주를 이루며, 실제 운영 환경에서의 적합성과 사용성을 중요시한다.&lt;br>
예를 들어, 사용자가 웹사이트에서 원하는 정보를 쉽게 찾을 수 있는지, 모바일 앱의 인터페이스가 직관적인지 등을 확인한다.&lt;/p>
&lt;h3>프로세스와 방법론의 차이&lt;span class="hx-absolute -hx-mt-20" id="프로세스와-방법론의-차이">&lt;/span>
&lt;a href="#%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4%ec%99%80-%eb%b0%a9%eb%b2%95%eb%a1%a0%ec%9d%98-%ec%b0%a8%ec%9d%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Verification은 주로 정적 테스팅 방법을 사용한다.&lt;br>
코드 리뷰, 문서 검토, 정적 분석 등이 여기에 해당한다.&lt;br>
Validation은 동적 테스팅 방법을 주로 사용하며, 실제 시스템을 실행하면서 테스트를 수행한다.&lt;br>
사용자 시나리오 테스트, 성능 테스트, 사용성 테스트 등이 이에 해당한다.&lt;/p>
&lt;h3>품질 보증에서의 역할&lt;span class="hx-absolute -hx-mt-20" id="품질-보증에서의-역할">&lt;/span>
&lt;a href="#%ed%92%88%ec%a7%88-%eb%b3%b4%ec%a6%9d%ec%97%90%ec%84%9c%ec%9d%98-%ec%97%ad%ed%95%a0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>두 테스트 방식은 상호 보완적인 관계에 있다.&lt;br>
Verification이 제품의 기술적 완성도를 보장한다면, Validation은 제품의 실용적 가치를 보장한다.&lt;br>
따라서 효과적인 품질 보증을 위해서는 두 가지 접근 방식을 모두 적절히 활용해야 한다.&lt;/p>
&lt;h3>Validation and Verification&lt;span class="hx-absolute -hx-mt-20" id="validation-and-verification-1">&lt;/span>
&lt;a href="#validation-and-verification-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>비교 기준&lt;/th>
&lt;th>Verification (검증)&lt;/th>
&lt;th>Validation (확인)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>제품을 올바르게 만들고 있는지 검증 (Building the product right)&lt;/td>
&lt;td>올바른 제품을 만들고 있는지 확인 (Building the right product)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>목적&lt;/td>
&lt;td>개발 중인 제품이 명세와 표준을 준수하는지 확인&lt;/td>
&lt;td>개발된 제품이 실제 사용자의 요구사항을 충족하는지 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>수행 시점&lt;/td>
&lt;td>개발 단계에서 지속적으로 수행&lt;/td>
&lt;td>개발 후반부나 완료 단계에서 수행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>수행 주체&lt;/td>
&lt;td>개발팀, QA팀, 테스트 엔지니어&lt;/td>
&lt;td>최종 사용자, 고객, QA팀&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>검증 대상&lt;/td>
&lt;td>코드, 문서, 설계 명세, 기술 표준 준수 여부&lt;/td>
&lt;td>사용자 요구사항, 비즈니스 목표 달성 여부&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 활동&lt;/td>
&lt;td>- 코드 리뷰&lt;br>- 정적 분석&lt;br>- 단위 테스트&lt;br>- 통합 테스트&lt;br>- 기술 명세 검토&lt;/td>
&lt;td>- 시스템 테스트&lt;br>- 인수 테스트&lt;br>- 베타 테스트&lt;br>- 사용성 테스트&lt;br>- 성능 테스트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 방식&lt;/td>
&lt;td>- 화이트박스 테스팅&lt;br>- 정적 테스팅&lt;br>- 구조 기반 테스팅&lt;/td>
&lt;td>- 블랙박스 테스팅&lt;br>- 동적 테스팅&lt;br>- 행위 기반 테스팅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>평가 기준&lt;/td>
&lt;td>- 코딩 표준 준수&lt;br>- 기술 명세 충족&lt;br>- 설계 요구사항 만족&lt;/td>
&lt;td>- 사용자 요구사항 충족&lt;br>- 비즈니스 목표 달성&lt;br>- 실제 환경에서의 적합성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 산출물&lt;/td>
&lt;td>- 코드 리뷰 보고서&lt;br>- 테스트 결과 문서&lt;br>- 정적 분석 보고서&lt;br>- 기술 검토 문서&lt;/td>
&lt;td>- 사용자 인수 테스트 보고서&lt;br>- 시스템 테스트 결과&lt;br>- 성능 테스트 보고서&lt;br>- 베타 테스트 피드백&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>오류 발견 시점&lt;/td>
&lt;td>개발 초기 단계에서 발견 가능&lt;/td>
&lt;td>개발 후반부나 실제 사용 단계에서 발견&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>비용 영향&lt;/td>
&lt;td>초기에 문제 발견으로 수정 비용 최소화&lt;/td>
&lt;td>후반부 발견으로 수정 비용이 상대적으로 높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>적용 범위&lt;/td>
&lt;td>개별 컴포넌트나 모듈 수준의 검증&lt;/td>
&lt;td>전체 시스템 수준의 검증&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자동화 가능성&lt;/td>
&lt;td>높은 자동화 가능성 (단위 테스트, 정적 분석 등)&lt;/td>
&lt;td>부분적 자동화 가능 (일부 시스템 테스트)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>품질 관점&lt;/td>
&lt;td>내부 품질 (기술적 완성도) 중심&lt;/td>
&lt;td>외부 품질 (사용자 만족도) 중심&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>리스크 관리&lt;/td>
&lt;td>기술적 리스크 감소에 중점&lt;/td>
&lt;td>비즈니스 리스크 감소에 중점&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>