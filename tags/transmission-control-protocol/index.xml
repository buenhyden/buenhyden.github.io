<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Transmission-Control-Protocol</title><link>https://buenhyden.github.io/tags/transmission-control-protocol/</link><description>Recent content in Transmission-Control-Protocol on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 02 Oct 2024 04:21:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/transmission-control-protocol/index.xml" rel="self" type="application/rss+xml"/><item><title>TCP</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/tcp/</link><pubDate>Wed, 02 Oct 2024 04:21:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/tcp/</guid><description>
&lt;h2>TCP (Transmission Control Protocol)&lt;/h2>&lt;p>인터넷 프로토콜 스위트의 핵심 프로토콜 중 하나로, IP(Internet Protocol)와 함께 TCP/IP로 널리 알려져 있다.&lt;br>
TCP는 연결 지향적이며, 신뢰성 있는 데이터 전송을 보장하는 전송 계층 프로토콜이다.&lt;/p>
&lt;p>OSI 7계층에서 TCP는 전송 계층(Transport Layer)인 4계층에 위치하며,&lt;br>
TCP/IP 4계층 모델에서도 마찬가지로 전송 계층에 해당한다.&lt;br>
이 위치에서 TCP는 데이터의 신뢰성 있는 전송을 담당하는 핵심적인 역할을 수행한다.&lt;/p>
&lt;p>TCP의 가장 중요한 특징은 연결 지향성과 신뢰성이다.&lt;br>
연결 지향성이란 데이터를 주고받기 전에 먼저 연결을 설정하는 것을 의미하는데, 이는 3-way handshaking이라는 과정을 통해 이루어진다.&lt;br>
신뢰성은 데이터가 손실없이 순서대로 전달되는 것을 보장한다는 의미이다.&lt;/p>
&lt;h3>주요 특징&lt;/h3>&lt;ol>
&lt;li>&lt;strong>신뢰성 보장&lt;/strong>: TCP는 데이터가 정확하게, 순서대로, 그리고 오류 없이 전달되도록 보장한다.&lt;/li>
&lt;li>&lt;strong>연결 지향적&lt;/strong>: 데이터 전송 전에 연결을 설정하고, 전송 후에는 연결을 종료한다.&lt;/li>
&lt;li>&lt;strong>흐름 제어&lt;/strong>: 수신자의 처리 능력에 맞춰 데이터 전송 속도를 조절한다.&lt;/li>
&lt;li>&lt;strong>혼잡 제어&lt;/strong>: 네트워크의 혼잡 상태를 감지하고 데이터 전송 속도를 조절한다.&lt;/li>
&lt;li>&lt;strong>전이중(Full-Duplex) 통신&lt;/strong>: 양방향으로 동시에 데이터 전송이 가능하다.&lt;/li>
&lt;li>&lt;strong>점대점(Point to Point) 통신&lt;/strong>: 정확히 2개의 종단점을 가진다.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>Window Size:&lt;br>
한 번에 전송할 수 있는 데이터의 양을 조절하는 값.&lt;br>
이는 흐름제어와 직접적인 관련이 있으며, 수신측의 처리 능력에 따라 동적으로 조절된다.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>MSS(Maximum Segment Size):&lt;br>
TCP가 한 번에 전송할 수 있는 최대 세그먼트 크기를 의미한다.&lt;br>
이는 네트워크의 특성을 고려하여 설정된다.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>타임아웃과 재전송:&lt;br>
일정 시간 내에 ACK를 받지 못하면 패킷 손실로 간주하고 재전송을 수행한다.&lt;br>
이는 데이터의 신뢰성을 보장하는 중요한 메커니즘이다.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Slow Start:&lt;br>
네트워크 혼잡을 방지하기 위해 처음에는 적은 양의 데이터부터 전송을 시작한다.&lt;/p>
&lt;/blockquote>
&lt;h3>장점&lt;/h3>&lt;ol>
&lt;li>신뢰성 있는 데이터 전송&lt;/li>
&lt;li>순서 보장&lt;/li>
&lt;li>오류 검출 및 복구&lt;/li>
&lt;li>흐름 제어를 통한 효율적인 네트워크 사용&lt;/li>
&lt;li>다양한 애플리케이션 지원 (웹 브라우징, 이메일, 파일 전송 등)&lt;/li>
&lt;/ol>
&lt;h3>동작 방식&lt;/h3>&lt;pre class="mermaid hx-mt-6">%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '12px'}, 'flowchart': {'width': 400, 'height': 250, 'diagramPadding': 8}}}%%
sequenceDiagram
participant Client
participant Server
Note over Client,Server: 3-way Handshake (연결 수립)
Client->>Server: SYN (Seq = x)
Server-->>Client: SYN + ACK (Seq = y, Ack = x+1)
Client->>Server: ACK (Seq = x+1, Ack = y+1)
Note over Client,Server: 데이터 전송
Note over Client,Server: 4-way Handshake (연결 종료)
Client->>Server: FIN
Server-->>Client: ACK
Note right of Server: CLOSE_WAIT 상태
Server->>Client: FIN
Note left of Client: TIME_WAIT 상태
Client-->>Server: ACK&lt;/pre>&lt;ol start="2">
&lt;li>
&lt;p>데이터 전송:&lt;/p>
&lt;ul>
&lt;li>순차번호(Sequence Number)를 사용하여 패킷의 순서를 보장한다.&lt;/li>
&lt;li>확인응답(ACK)을 통해 패킷의 수신을 확인한다.&lt;/li>
&lt;li>흐름제어와 혼잡제어를 통해 네트워크의 효율성을 관리한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>연결 종료 (4-way handshaking):&lt;/p>
&lt;ul>
&lt;li>FIN과 ACK 패킷을 주고받으며 연결을 종료한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>연결 설정: 3-way Handshake&lt;br>
목적: 클라이언트와 서버 간의 연결을 설정하고 초기 시퀀스 번호를 동기화&lt;br>
과정&lt;/p>
&lt;ol>
&lt;li>SYN (클라이언트 → 서버)
&lt;ul>
&lt;li>클라이언트가 연결을 시작하려고 SYN 패킷을 보낸다.&lt;/li>
&lt;li>SYN 플래그가 1로 설정된다.&lt;/li>
&lt;li>초기 시퀀스 번호(ISN)를 포함한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>SYN-ACK (서버 → 클라이언트)
&lt;ul>
&lt;li>서버가 SYN을 받고 응답한다.&lt;/li>
&lt;li>SYN과 ACK 플래그가 모두 1로 설정된다.&lt;/li>
&lt;li>서버의 ISN을 포함합니다.&lt;/li>
&lt;li>확인 응답 번호는 클라이언트의 ISN + 1입니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ACK (클라이언트 → 서버)
&lt;ul>
&lt;li>클라이언트가 서버의 응답을 확인합니다.&lt;/li>
&lt;li>ACK 플래그가 1로 설정됩니다.&lt;/li>
&lt;li>확인 응답 번호는 서버의 ISN + 1입니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>이 과정이 완료되면 연결이 설정되고 데이터 전송이 시작될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>데이터 전송&lt;br>
연결이 설정된 후, TCP는 다음과 같은 방식으로 데이터를 전송한다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>세그먼트 분할&lt;/strong>: 큰 데이터를 작은 조각(세그먼트)으로 나눈다.&lt;/li>
&lt;li>&lt;strong>순서 번호 부여&lt;/strong>: 각 세그먼트에 번호를 매겨 순서를 보장한다.&lt;/li>
&lt;li>&lt;strong>확인 응답&lt;/strong>: 수신자는 받은 데이터에 대해 확인 응답을 보낸다.&lt;/li>
&lt;li>&lt;strong>재전송&lt;/strong>: 손실된 데이터는 자동으로 재전송된다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>연결 종료: 4-way Handshake&lt;br>
목적: 클라이언트와 서버 간의 연결을 안전하게 종료한다.&lt;br>
과정&lt;/p>
&lt;ol>
&lt;li>FIN (클라이언트 → 서버)
&lt;ul>
&lt;li>클라이언트가 연결 종료를 요청한다.&lt;/li>
&lt;li>FIN 플래그가 1로 설정된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ACK (서버 → 클라이언트)
&lt;ul>
&lt;li>서버가 FIN을 받았음을 확인한다.&lt;/li>
&lt;li>ACK 플래그가 1로 설정된다.&lt;/li>
&lt;li>이 시점에서 클라이언트→서버 방향의 연결이 닫힌다.&lt;br>
3.FIN (서버 → 클라이언트)&lt;/li>
&lt;li>서버가 모든 데이터 전송을 완료하고 연결 종료를 요청한다.&lt;/li>
&lt;li>FIN 플래그가 1로 설정된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ACK (클라이언트 → 서버)
&lt;ul>
&lt;li>클라이언트가 서버의 FIN을 확인한다.&lt;/li>
&lt;li>ACK 플래그가 1로 설정된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>이 과정이 완료되면 연결이 완전히 종료된다.&lt;/li>
&lt;li>클라이언트는 마지막 ACK 전송 후 일정 시간 (일반적으로 2MSL) 동안 TIME_WAIT 상태를 유지하여 지연된 패킷을 처리한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>데이터를 세그먼트로 나누는 이유&lt;/h3>&lt;ol>
&lt;li>네트워크 제한 사항 준수
&lt;ol>
&lt;li>MTU(Maximum Transmission Unit) 제한: 네트워크 계층 프로토콜마다 MTU가 다르며, TCP는 이를 초과하지 않도록 데이터를 분할한다.&lt;/li>
&lt;li>효율적인 전송: 큰 데이터 스트림을 작은 세그먼트로 나누어 네트워크 패킷에 맞게 전송한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>신뢰성 향상
&lt;ol>
&lt;li>오류 처리: 작은 세그먼트로 나누면 오류 발생 시 해당 세그먼트만 재전송할 수 있어 효율적이다.&lt;/li>
&lt;li>순서 보장: 각 세그먼트에 시퀀스 번호를 할당하여 수신 측에서 올바른 순서로 재조립할 수 있다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>흐름 제어 및 혼잡 제어
&lt;ol>
&lt;li>수신자 처리 능력 고려: 세그먼트 단위로 전송함으로써 수신자의 처리 능력에 맞춰 데이터 전송 속도를 조절할 수 있다.&lt;/li>
&lt;li>네트워크 상태 대응: 세그먼트 단위로 전송하면 네트워크 혼잡 상황에 더 유연하게 대응할 수 있다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h4>세그먼트로 나누는 데이터가 에러를 감지하는 방법&lt;/h4>&lt;p>TCP는 세그먼트로 나눈 데이터의 에러를 감지하기 위해 다음과 같은 방법들을 사용한다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>체크섬(Checksum)&lt;/p>
&lt;ul>
&lt;li>각 세그먼트에는 16비트 체크섬 필드가 포함된다.&lt;/li>
&lt;li>송신자는 데이터를 기반으로 체크섬을 계산하여 세그먼트에 포함시킨다.&lt;/li>
&lt;li>수신자는 받은 세그먼트의 체크섬을 다시 계산하여 송신자의 체크섬과 비교한다.&lt;/li>
&lt;li>두 체크섬이 일치하지 않으면 해당 세그먼트는 손상된 것으로 간주하고 폐기한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>시퀀스 번호(Sequence Numbers)&lt;/p>
&lt;ul>
&lt;li>TCP는 각 데이터 세그먼트에 고유한 시퀀스 번호를 할당한다.&lt;/li>
&lt;li>이를 통해 수신자는 데이터의 순서를 확인하고 누락된 세그먼트를 감지할 수 있다.&lt;/li>
&lt;li>순서가 맞지 않는 세그먼트를 받으면 에러로 간주한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>확인 응답(Acknowledgements)&lt;/p>
&lt;ul>
&lt;li>수신자는 성공적으로 받은 데이터에 대해 확인 응답(ACK)을 보낸다.&lt;/li>
&lt;li>송신자는 일정 시간 내에 ACK를 받지 못하면 해당 세그먼트가 손실되었다고 판단한다.&lt;/li>
&lt;li>중복된 ACK를 연속으로 받으면 특정 세그먼트의 손실을 감지할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>