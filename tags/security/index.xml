<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Security on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/security/</link>
    <description>Recent content in Security on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Sun, 17 Nov 2024 21:22:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Common Security Attacks</title>
      <link>https://buenhyden.github.io/posts/security/security-attacks/</link>
      <pubDate>Sat, 16 Nov 2024 19:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-attacks/</guid>
      <description>Common Security Attacks in the OSI Layer Model</description>
    </item>
    <item>
      <title>보안 취약점 (Security Vulnerability)</title>
      <link>https://buenhyden.github.io/posts/security/security-vulnerability/</link>
      <pubDate>Sun, 10 Nov 2024 07:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-vulnerability/</guid>
      <description>보안 취약점(Security Vulnerability)은 정보 시스템이나 소프트웨어에 존재하는 보안상의 약점으로, 공격자가 악용하여 시스템에 무단으로 접근하거나 데이터를 유출, 변조할 수 있는 결함을 말한다.</description>
    </item>
    <item>
      <title>인증 (authentication)</title>
      <link>https://buenhyden.github.io/posts/security/authentication/</link>
      <pubDate>Sun, 17 Nov 2024 05:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/authentication/</guid>
      <description>JWT, OAuth 2.0, Token Auth, Cookie Based, OpenID Connect, SAML, Session Based 비교 분석</description>
    </item>
    <item>
      <title>암호화(Encryption) and 복호화(Decryption)</title>
      <link>https://buenhyden.github.io/posts/security/encryption-and-decryption/</link>
      <pubDate>Sun, 17 Nov 2024 00:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/encryption-and-decryption/</guid>
      <description>데이터를 보호하기 위한 핵심적인 기술로, 원본 데이터를 알고리즘을 통해 암호문으로 변환하는 과정</description>
    </item>
    <item>
      <title>권한 부여 (Authorization)</title>
      <link>https://buenhyden.github.io/posts/security/authorization/</link>
      <pubDate>Fri, 15 Nov 2024 11:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/authorization/</guid>
      <description>인증된 사용자가 특정 리소스나 기능에 접근할 수 있는 권한을 가지고 있는지 확인하는 프로세스</description>
    </item>
    <item>
      <title>IT Security</title>
      <link>https://buenhyden.github.io/posts/security/</link>
      <pubDate>Fri, 20 Sep 2024 14:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/</guid>
      <description>정보 기술 시스템과 데이터를 보호하기 위한 포괄적인 접근 방식으로,조직의 정보 자산을 보호하기 위한 모든 활동과 기술을 포함한다.</description>
    </item>
    <item>
      <title>CCE vs CVE vs CWE</title>
      <link>https://buenhyden.github.io/til/2024/11/15/cce-vs-cve-vs-cwe/</link>
      <pubDate>Fri, 15 Nov 2024 07:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/11/15/cce-vs-cve-vs-cwe/</guid>
      <description>CCE, CVE, CWE는 모두 컴퓨터 시스템과 소프트웨어의 보안 취약점을 식별하고 분류하기 위한 표준화된 체계이다.</description>
    </item>
    <item>
      <title>비대칭키 암호화 (Asymmetric Encryption)</title>
      <link>https://buenhyden.github.io/posts/security/encryption-and-decryption/asymmetric-encryption/</link>
      <pubDate>Sun, 17 Nov 2024 21:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/encryption-and-decryption/asymmetric-encryption/</guid>
      <description>공개키 암호화라고도 불리며, 암호화와 복호화에 서로 다른 두 개의 키를 사용하는 암호화 방식</description>
    </item>
    <item>
      <title>해시 함수 (Hash Functions)</title>
      <link>https://buenhyden.github.io/posts/security/encryption-and-decryption/hash-functions/</link>
      <pubDate>Sun, 17 Nov 2024 21:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/encryption-and-decryption/hash-functions/</guid>
      <description>임의의 길이의 데이터를 고정된 길이의 데이터로 매핑하는 함수</description>
    </item>
    <item>
      <title>대칭키 암호화 (Symmetric Encryption)</title>
      <link>https://buenhyden.github.io/posts/security/encryption-and-decryption/symmetric-encryption/</link>
      <pubDate>Sun, 17 Nov 2024 21:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/encryption-and-decryption/symmetric-encryption/</guid>
      <description>동일한 키를 사용하여 데이터를 암호화하고 복호화하는 방식</description>
    </item>
    <item>
      <title>암호화 모드 (Modes of Operation)</title>
      <link>https://buenhyden.github.io/posts/security/encryption-and-decryption/modes-of-operation/</link>
      <pubDate>Sun, 17 Nov 2024 13:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/encryption-and-decryption/modes-of-operation/</guid>
      <description>암호화 모드는 블록 암호를 사용하여 한 블록보다 긴 평문을 안전하게 암호화하는 방법을 정의한다</description>
    </item>
    <item>
      <title>동형 암호화(Homomorphic Encryption)</title>
      <link>https://buenhyden.github.io/posts/security/encryption-and-decryption/homomorphic-encryption/</link>
      <pubDate>Sun, 17 Nov 2024 13:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/encryption-and-decryption/homomorphic-encryption/</guid>
      <description>동형 암호화는 암호화된 데이터를 복호화하지 않은 상태에서 연산을 수행할 수 있게 해주는 암호화 기술</description>
    </item>
    <item>
      <title>양자 암호화(quantum cryptography)</title>
      <link>https://buenhyden.github.io/posts/security/encryption-and-decryption/quantum-cryptography/</link>
      <pubDate>Sun, 17 Nov 2024 13:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/encryption-and-decryption/quantum-cryptography/</guid>
      <description>양자역학의 원리를 활용하여 완벽한 보안을 실현하는 암호화 기술</description>
    </item>
    <item>
      <title>영지식 증명(Zero-Knowledge Proof, ZKP)</title>
      <link>https://buenhyden.github.io/posts/security/encryption-and-decryption/zero-knowledge-proof/</link>
      <pubDate>Sun, 17 Nov 2024 13:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/encryption-and-decryption/zero-knowledge-proof/</guid>
      <description>영지식 증명은 어떤 명제가 참이라는 것을 증명하면서도, 그 명제에 대한 구체적인 정보는 전혀 공개하지 않는 암호학적 방법.</description>
    </item>
    <item>
      <title>Session based Auth</title>
      <link>https://buenhyden.github.io/posts/security/authentication/session-based-auth/</link>
      <pubDate>Sun, 17 Nov 2024 11:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/authentication/session-based-auth/</guid>
      <description>웹 애플리케이션에서 사용자의 인증 상태를 유지하는 전통적인 방법</description>
    </item>
    <item>
      <title>SAML</title>
      <link>https://buenhyden.github.io/posts/security/authentication/saml/</link>
      <pubDate>Sun, 17 Nov 2024 11:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/authentication/saml/</guid>
      <description>웹 애플리케이션에서 사용자 인증과 권한 부여를 위한 개방형 표준 프로토콜</description>
    </item>
    <item>
      <title>Basic Authentication</title>
      <link>https://buenhyden.github.io/posts/security/authentication/basic-authentication/</link>
      <pubDate>Sun, 17 Nov 2024 11:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/authentication/basic-authentication/</guid>
      <description>HTTP 헤더에 사용자의 인증 정보를 포함시켜 전송하는 방식</description>
    </item>
    <item>
      <title>Cookie Based Auth</title>
      <link>https://buenhyden.github.io/posts/security/authentication/cookie-based-auth/</link>
      <pubDate>Sun, 17 Nov 2024 11:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/authentication/cookie-based-auth/</guid>
      <description>웹 애플리케이션에서 사용자 세션을 유지하는 전통적인 방법</description>
    </item>
    <item>
      <title>JWT</title>
      <link>https://buenhyden.github.io/posts/security/authentication/jwt/</link>
      <pubDate>Sun, 17 Nov 2024 11:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/authentication/jwt/</guid>
      <description>당사자 간에 정보를 안전하게 전송하기 위한 컴팩트하고 자체 포함된 방식을 정의하는 개방형 표준(RFC 7519)</description>
    </item>
    <item>
      <title>OAuth</title>
      <link>https://buenhyden.github.io/posts/security/authentication/oauth/</link>
      <pubDate>Sun, 17 Nov 2024 11:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/authentication/oauth/</guid>
      <description>사용자의 비밀번호를 공유하지 않고도 제3자 애플리케이션이 사용자의 데이터에 안전하게 접근할 수 있도록 하는 표준 프로토콜</description>
    </item>
    <item>
      <title>OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/security/authentication/openid-connect/</link>
      <pubDate>Sun, 17 Nov 2024 11:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/authentication/openid-connect/</guid>
      <description> OAuth 2.0 프로토콜 위에 구축된 인증 계층으로, 사용자 인증과 기본적인 프로필 정보 획득을 위한 표준화된 방법을 제공</description>
    </item>
    <item>
      <title>Token Authentication</title>
      <link>https://buenhyden.github.io/posts/security/authentication/token-authentication/</link>
      <pubDate>Sun, 17 Nov 2024 11:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/authentication/token-authentication/</guid>
      <description>사용자 자격 증명 대신 고유한 토큰을 사용하여 인증을 수행하며, 반복적인 로그인 없이 지속적인 접근을 가능하게 한다.</description>
    </item>
    <item>
      <title>디지털 서명 (digital signature)</title>
      <link>https://buenhyden.github.io/posts/security/encryption-and-decryption/digital-signature/</link>
      <pubDate>Sun, 17 Nov 2024 06:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/encryption-and-decryption/digital-signature/</guid>
      <description>전자 문서나 메시지의 진위성, 무결성, 그리고 부인 방지를 보장하기 위해 사용되는 암호화 기술</description>
    </item>
    <item>
      <title>Content Security Policy</title>
      <link>https://buenhyden.github.io/til/2024/11/16/content-security-policy/</link>
      <pubDate>Sat, 16 Nov 2024 19:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/11/16/content-security-policy/</guid>
      <description>신뢰된 웹 페이지 콘텍스트에서 악의적인 콘텐츠를 실행하게 하는 사이트 간 스크립팅, 클릭재킹, 그리고 기타 코드 인젝션 공격을 예방하기 위해 도입된 컴퓨터 보안 표준</description>
    </item>
    <item>
      <title>Nonce</title>
      <link>https://buenhyden.github.io/posts/security/cryptography/nonce/</link>
      <pubDate>Sat, 16 Nov 2024 15:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/cryptography/nonce/</guid>
      <description>&amp;#34;Number used Once&amp;#34;의 약자로 단 한 번만 사용되는 임의의 숫자</description>
    </item>
    <item>
      <title>Message Authentication Code</title>
      <link>https://buenhyden.github.io/posts/security/cryptography/message-authentication-code/</link>
      <pubDate>Sat, 16 Nov 2024 13:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/cryptography/message-authentication-code/</guid>
      <description>Message Authentication Code는 메시지의 무결성(integrity)과 출처 인증(authentication)을 동시에 보장하기 위한 암호학적 도구로, 메시지와 비밀키를 입력으로 받아 고정된 길이의 값을 생성하며, 이 값은 메시지에 대한 일종의 디지털 지문 역할을 한다.</description>
    </item>
    <item>
      <title>The Open Web Application Security Project</title>
      <link>https://buenhyden.github.io/til/2024/11/16/the-open-web-application-security-project/</link>
      <pubDate>Sat, 16 Nov 2024 11:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/11/16/the-open-web-application-security-project/</guid>
      <description>웹 애플리케이션의 가장 심각한 보안 위험 10가지를 정리한 보고서</description>
    </item>
    <item>
      <title>Server Security</title>
      <link>https://buenhyden.github.io/til/2024/11/16/server-security/</link>
      <pubDate>Sat, 16 Nov 2024 07:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/11/16/server-security/</guid>
      <description>서버를 무단 액세스, 데이터 유출 및 기타 보안 위협으로부터 보호하기 위한 프로세스와 도구를 의미</description>
    </item>
    <item>
      <title>방화벽 (Firewall)</title>
      <link>https://buenhyden.github.io/posts/security/security-tools/firewall/</link>
      <pubDate>Sat, 16 Nov 2024 06:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-tools/firewall/</guid>
      <description>네트워크 보안의 핵심 요소로, 내부 네트워크를 외부의 위협으로부터 보호하는 시스템.</description>
    </item>
    <item>
      <title>IDS and IPS</title>
      <link>https://buenhyden.github.io/posts/security/security-tools/ids-and-ips/</link>
      <pubDate>Sat, 16 Nov 2024 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-tools/ids-and-ips/</guid>
      <description>IDS(침입 탐지 시스템)와 IPS(침입 방지 시스템)는 네트워크 보안을 위한 중요한 개념이다. 이 두 시스템은 네트워크 상의 악의적인 활동을 탐지하고 대응하는 데 사용된다.</description>
    </item>
    <item>
      <title>Session base Auth and Cookie base Auth</title>
      <link>https://buenhyden.github.io/til/2024/11/16/session-base-auth-and-cookie-base-auth/</link>
      <pubDate>Sat, 16 Nov 2024 02:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/11/16/session-base-auth-and-cookie-base-auth/</guid>
      <description>세션 기반 인증(Session Based Authentication)과 쿠키 기반 인증(Cookie Based Authentication)은 웹 애플리케이션에서 사용자 인증을 처리하는 두 가지 주요 방식이다.</description>
    </item>
    <item>
      <title>제로 트러스트 (Zero Trust)</title>
      <link>https://buenhyden.github.io/til/2024/11/16/zero-trust/</link>
      <pubDate>Sat, 16 Nov 2024 01:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/11/16/zero-trust/</guid>
      <description> &amp;#34;절대 신뢰하지 말고, 항상 검증하라(Never trust, always verify)&amp;#34;라는 보안 철학에 기반을 둔 현대적인 보안 접근 방식</description>
    </item>
    <item>
      <title>DAC</title>
      <link>https://buenhyden.github.io/posts/security/authorization/dac/</link>
      <pubDate>Fri, 15 Nov 2024 23:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/authorization/dac/</guid>
      <description> 리소스의 소유자가 해당 리소스에 대한다른  사용자들의 접근 권한을 직접 제어할 수 있는 접근 제어 방식</description>
    </item>
    <item>
      <title>MAC</title>
      <link>https://buenhyden.github.io/posts/security/authorization/mac/</link>
      <pubDate>Fri, 15 Nov 2024 23:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/authorization/mac/</guid>
      <description>시스템 전체에 걸쳐 중앙에서 정의된 보안 정책에 따라 접근 권한을 강제로 적용하는 접근 제어 방식.</description>
    </item>
    <item>
      <title>PBAC</title>
      <link>https://buenhyden.github.io/posts/security/authorization/pbac/</link>
      <pubDate>Fri, 15 Nov 2024 23:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/authorization/pbac/</guid>
      <description>중앙에서 정의된 정책들을 기반으로 접근 권한을 결정하는 접근 제어 방식.  각 정책은 &amp;#34;누가&amp;#34;, &amp;#34;무엇을&amp;#34;, &amp;#34;어떤 조건에서&amp;#34; 할 수 있는지를 정의하며, 이러한 정책들은 프로그래밍 방식으로 표현되고 평가된다.</description>
    </item>
    <item>
      <title>ABAC</title>
      <link>https://buenhyden.github.io/posts/security/authorization/abac/</link>
      <pubDate>Fri, 15 Nov 2024 23:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/authorization/abac/</guid>
      <description>ABAC는 주체(사용자), 객체(리소스), 작업, 환경 조건의 속성을 조합하여 접근 제어 정책을 정의한다.</description>
    </item>
    <item>
      <title>RBAC</title>
      <link>https://buenhyden.github.io/posts/security/authorization/rbac/</link>
      <pubDate>Fri, 15 Nov 2024 23:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/authorization/rbac/</guid>
      <description>RBAC는 &amp;#34;만약 ~라면 ~할 수 있다&amp;#34;와 같은 형태의 규칙들을 사용하여 접근 권한을 제어한다. 각 규칙은 조건부와 결과부로 구성되며, 시스템은 이러한 규칙들을 순차적으로 평가하여 접근 허용 여부를 결정한다.</description>
    </item>
    <item>
      <title>CCE(Common Configuration Enumeration)</title>
      <link>https://buenhyden.github.io/posts/security/security-vulnerability/cce/</link>
      <pubDate>Sun, 10 Nov 2024 07:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-vulnerability/cce/</guid>
      <description>CCE(Common Configuration Enumeration)는 시스템의 보안 설정과 관련된 취약점을 식별하고 관리하기 위한 표준화된 명명 체계</description>
    </item>
    <item>
      <title>CVE</title>
      <link>https://buenhyden.github.io/posts/security/security-vulnerability/cve/</link>
      <pubDate>Sun, 10 Nov 2024 07:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-vulnerability/cve/</guid>
      <description>CVE(Common Vulnerabilities and Exposures)는 공개적으로 알려진 컴퓨터 보안 취약점을 식별하고 카탈로그화하는 표준화된 시스템</description>
    </item>
    <item>
      <title>CVSS(Common Vulnerability Scoring System)</title>
      <link>https://buenhyden.github.io/posts/security/security-vulnerability/cvss/</link>
      <pubDate>Sun, 10 Nov 2024 07:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-vulnerability/cvss/</guid>
      <description>CVSS(Common Vulnerability Scoring System)는 보안 취약점의 심각도를 평가하고 수치화하는 표준화된 시스템</description>
    </item>
    <item>
      <title>CWE(Common Weakness Enumeration)</title>
      <link>https://buenhyden.github.io/posts/security/security-vulnerability/cwe/</link>
      <pubDate>Sun, 10 Nov 2024 07:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-vulnerability/cwe/</guid>
      <description>CWE(Common Weakness Enumeration)는 소프트웨어와 하드웨어의 보안 약점을 체계적으로 분류하고 나열한 표준화된 목록</description>
    </item>
    <item>
      <title>SSL and TLS</title>
      <link>https://buenhyden.github.io/posts/networking-and-communications/protocol/ssl-and-tls/</link>
      <pubDate>Wed, 23 Oct 2024 08:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/ssl-and-tls/</guid>
      <description>인터넷 상에서 데이터를 안전하게 전송하기 위한 암호화 프로토콜.</description>
    </item>
    <item>
      <title>암호화 알고리즘 (Encryption Algorithm)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/encryption-algorithms/</link>
      <pubDate>Mon, 14 Oct 2024 15:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/encryption-algorithms/</guid>
      <description>데이터를 안전하게 보호하기 위해 사용되는 수학적 방법</description>
    </item>
    <item>
      <title>API Key Authentication</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/api-key-authentication/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/api-key-authentication/</guid>
      <description>&lt;h2 id=&#34;api-key-authentication&#34;&gt;API Key Authentication&lt;/h2&gt;
&lt;p&gt;API Key Authentication은 마이크로서비스 아키텍처(MSA)에서 보안을 위해 사용되는 중요한 인증 방식이다.&lt;/p&gt;
&lt;p&gt;API Key Authentication은 클라이언트가 API에 접근할 때 고유한 식별자(API 키)를 사용하여 인증하는 방식이다. 이 키는 서버에서 생성하여 클라이언트에게 제공되며, 클라이언트는 API 요청 시 이 키를 포함시켜 자신의 신원을 증명한다.&lt;/p&gt;
&lt;p&gt;API Key Authentication은 구현이 간단하고 사용하기 쉽다는 장점이 있지만, 보안 측면에서는 제한적이다. 따라서 중요한 데이터나 높은 보안이 요구되는 서비스에는 OAuth2나 JWT와 같은 더 강력한 인증 방식을 고려해야 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CORS</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/cors/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/cors/</guid>
      <description>&lt;h2 id=&#34;cors&#34;&gt;CORS&lt;/h2&gt;
&lt;p&gt;마이크로서비스 아키텍처(MSA) 패턴의 보안 측면에서 CORS(Cross-Origin Resource Sharing)는 매우 중요한 역할을 한다.&lt;/p&gt;
&lt;p&gt;CORS는 웹 브라우저에서 구현된 보안 메커니즘으로, 다른 출처(도메인, 프로토콜, 포트)의 리소스에 접근할 수 있도록 허용하는 체계이다. 이는 동일 출처 정책(Same-Origin Policy)의 제한을 안전하게 우회할 수 있게 해준다.&lt;/p&gt;
&lt;p&gt;CORS는 MSA 환경에서 안전하고 유연한 리소스 공유를 가능하게 하는 핵심 메커니즘으로 올바르게 구현된 CORS는 마이크로서비스 간의 안전한 통신을 보장하며, 전체 시스템의 보안을 강화한다.&lt;/p&gt;
&lt;h3 id=&#34;cors의-작동-원리&#34;&gt;CORS의 작동 원리&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;브라우저가 다른 출처로 HTTP 요청을 보낼 때 Origin 헤더를 추가한다.&lt;/li&gt;
&lt;li&gt;서버는 Access-Control-Allow-Origin 헤더로 응답하여 해당 출처의 접근을 허용할지 결정한다.&lt;/li&gt;
&lt;li&gt;브라우저는 이 헤더를 확인하여 요청을 허용하거나 차단한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Origin의 정의&lt;br&gt;
Origin은 다음 세 가지 요소로 구성된다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mutual TLS</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/mutual-tls/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/mutual-tls/</guid>
      <description>&lt;h2 id=&#34;mutual-tls&#34;&gt;Mutual TLS&lt;/h2&gt;
&lt;p&gt;마이크로서비스 아키텍처(MSA) 패턴의 보안 측면에서 Mutual TLS(mTLS)는 매우 중요한 역할을 한다.&lt;/p&gt;
&lt;p&gt;mTLS는 마이크로서비스 아키텍처에서 보안을 강화하는 핵심 기술로, 서비스 간 통신의 신뢰성과 안전성을 크게 향상시킨다. 적절히 구현된 mTLS는 MSA 환경에서 강력한 보안 계층을 제공하여 전체 시스템의 안정성을 높이는 데 기여한다.&lt;/p&gt;
&lt;p&gt;Mutual TLS는 상호 TLS 또는 양방향 TLS라고도 불린다. 이는 클라이언트와 서버 간의 통신에서 양쪽 모두가 서로의 신원을 확인하는 인증 방식이다.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;img alt=&#34;mTLS&#34; loading=&#34;lazy&#34; src=&#34;https://buenhyden.github.io/img/how_mtls_works-what_is_mutual_tls.webp&#34;&gt;&lt;figcaption&gt;https://www.cloudflare.com/ko-kr/learning/access-management/what-is-mutual-tls/&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;일반-tls와의-차이점&#34;&gt;일반 TLS와의 차이점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;일반 TLS: 서버만 인증서를 제공하고 클라이언트가 서버의 신원을 확인한다.&lt;/li&gt;
&lt;li&gt;mTLS: 서버와 클라이언트 모두 인증서를 제공하고 서로의 신원을 확인한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;mtls의-작동-원리&#34;&gt;mTLS의 작동 원리&lt;/h3&gt;
&lt;p&gt;mTLS는 다음과 같은 단계로 작동한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OAuth2/OIDC (OpenID Connect)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/oauth2-oidc/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/oauth2-oidc/</guid>
      <description>&lt;h2 id=&#34;oauth2oidc-openid-connect&#34;&gt;OAuth2/OIDC (OpenID Connect)&lt;/h2&gt;
&lt;p&gt;MSA(Microservice Architecture) 패턴의 보안 측면에서 OAuth2와 OIDC(OpenID Connect)는 매우 중요한 역할을 한다. 이 두 프로토콜은 분산 시스템에서의 인증과 권한 부여를 효과적으로 처리할 수 있게 해준다.&lt;/p&gt;
&lt;p&gt;OAuth 2.0과 OIDC를 적절히 활용하면 MSA 환경에서 안전하고 효율적인 인증 및 권한 부여 시스템을 구축할 수 있다. 이는 마이크로서비스 간의 안전한 통신과 사용자 데이터 보호에 큰 도움이 된다.&lt;/p&gt;
&lt;h3 id=&#34;oauth-20&#34;&gt;OAuth 2.0&lt;/h3&gt;
&lt;p&gt;OAuth 2.0은 권한 부여를 위한 업계 표준 프로토콜이다.&lt;br&gt;
주요 특징은 다음과 같다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rate Limiting</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/rate-limiting/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/rate-limiting/</guid>
      <description>&lt;h2 id=&#34;rate-limiting&#34;&gt;Rate Limiting&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Secret Management</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/secret-management/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/secret-management/</guid>
      <description>&lt;h2 id=&#34;secret-management&#34;&gt;Secret Management&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Access Token</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/access-token/</link>
      <pubDate>Sat, 05 Oct 2024 11:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/access-token/</guid>
      <description>&lt;h2 id=&#34;access-token&#34;&gt;Access Token&lt;/h2&gt;
&lt;p&gt;Access Token은 마이크로서비스 아키텍처(MSA)에서 인증과 권한 부여를 위해 사용되는 보안 메커니즘이다.&lt;/p&gt;
&lt;p&gt;Access Token은 사용자의 인증 정보를 담고 있는 암호화된 문자열이다. 이 토큰은 클라이언트가 서버의 보호된 리소스에 접근할 수 있는 권한을 증명하는 데 사용된다.&lt;/p&gt;
&lt;p&gt;Access Token은 MSA 환경에서 효율적이고 안전한 인증 메커니즘을 제공한다.&lt;br&gt;
그러나 적절한 구현과 보안 조치가 필수적이며, 시스템의 요구사항에 맞게 신중하게 설계해야 한다.&lt;/p&gt;
&lt;h3 id=&#34;access-token의-특징&#34;&gt;Access Token의 특징&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;유한한 수명: 보통 짧은 유효 기간(예: 1시간)을 가진다.&lt;/li&gt;
&lt;li&gt;Stateless: 서버에 상태를 저장하지 않아 확장성이 높다.&lt;/li&gt;
&lt;li&gt;암호화: 대개 JWT(JSON Web Token) 형식으로 구현된다.&lt;/li&gt;
&lt;li&gt;포함 정보: 사용자 ID, 권한 범위, 만료 시간 등을 포함할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;access-token의-동작-방식&#34;&gt;Access Token의 동작 방식&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;사용자 인증: 사용자가 로그인하면 서버는 Access Token을 발급한다.&lt;/li&gt;
&lt;li&gt;토큰 저장: 클라이언트는 받은 토큰을 안전하게 저장한다(예: 로컬 스토리지).&lt;/li&gt;
&lt;li&gt;요청 시 사용: API 요청 시 Authorization 헤더에 토큰을 포함시킨다.&lt;/li&gt;
&lt;li&gt;서버 검증: 서버는 토큰의 유효성을 검사하고 요청을 처리한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;access-token의-장점&#34;&gt;Access Token의 장점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;확장성: Stateless 특성으로 서버 확장이 용이하다.&lt;/li&gt;
&lt;li&gt;보안성: 암호화된 정보로 중요 데이터를 안전하게 전송한다.&lt;/li&gt;
&lt;li&gt;효율성: 매 요청마다 사용자 정보를 조회할 필요가 없다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;access-token의-단점&#34;&gt;Access Token의 단점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;토큰 탈취 위험: XSS 공격 등으로 토큰이 탈취될 수 있다.&lt;/li&gt;
&lt;li&gt;제한된 정보량: 토큰 크기 제한으로 포함할 수 있는 정보가 제한적이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;access-token과-refresh-token&#34;&gt;Access Token과 Refresh Token&lt;/h3&gt;
&lt;p&gt;보안 강화를 위해 Access Token과 함께 Refresh Token을 사용한다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Security</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/</link>
      <pubDate>Sat, 05 Oct 2024 11:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/</guid>
      <description>&lt;h2 id=&#34;security&#34;&gt;Security&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
  </channel>
</rss>
