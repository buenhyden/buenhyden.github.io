<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CI-CD-Automation on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/ci-cd-automation/</link>
    <description>Recent content in CI-CD-Automation on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.149.1</generator>
    <language>en</language>
    <lastBuildDate>Wed, 02 Oct 2024 08:10:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/ci-cd-automation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CI/CD Automation</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/engineering-operations/devops--ci-cd/ci-cd-fundamentals/automation/</link>
      <pubDate>Wed, 02 Oct 2024 08:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/engineering-operations/devops--ci-cd/ci-cd-fundamentals/automation/</guid>
      <description>CI/CD Automation 은 소프트웨어 개발 라이프사이클 전반의 빌드, 테스트, 배포 과정을 자동화해 개발 효율성과 품질을 향상시키는 DevOps 핵심 전략이다. 지속적 통합 (CI) 은 개발자들이 코드를 주기적으로 통합하고 검증하는 과정을, 지속적 배포 (CD) 는 검증된 코드를 자동으로 프로덕션 환경에 배포하는 과정을 자동화한다. 이 자동화 시스템은 개발 주기를 단축하고, 코드 품질을 향상시키며, 배포 위험을 줄인다. 효과적인 CI/CD 파이프라인은 빌드 자동화, 포괄적인 테스트, 무중단 배포 전략, 롤백 메커니즘을 갖추고 있다.</description>
    </item>
  </channel>
</rss>
