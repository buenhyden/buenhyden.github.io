<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Architecture-Patterns</title><link>https://buenhyden.github.io/tags/architecture-patterns/</link><description>Recent content in Architecture-Patterns on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 23 Nov 2024 08:19:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/architecture-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Software Architecture pattern and Software Design Pattern</title><link>https://buenhyden.github.io/til/2024/11/software-architecture-pattern-and-software-design-pattern/</link><pubDate>Sat, 23 Nov 2024 08:19:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/11/software-architecture-pattern-and-software-design-pattern/</guid><description>
&lt;h2>Software Architecture Pattern and Software Design Pattern&lt;/h2>&lt;p>Software Architecture Pattern과 Software Design Pattern은 소프트웨어 개발에서 반복적으로 발생하는 문제들에 대한 검증된 해결책을 제공하는 개념이다.&lt;br>
이 두 패턴은 서로 다른 수준의 추상화와 범위를 다루고 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>비교 항목&lt;/th>
&lt;th>Software Architecture Pattern&lt;/th>
&lt;th>Software Design Pattern&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>소프트웨어 시스템의 전체적인 구조와 주요 컴포넌트 간의 관계를 정의하는 패턴&lt;/td>
&lt;td>특정 설계 문제에 대한 일반적이고 재사용 가능한 해결책을 제공하는 패턴&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>범위&lt;/td>
&lt;td>시스템 전체 또는 대규모 하위 시스템&lt;/td>
&lt;td>개별 컴포넌트나 모듈 수준&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>추상화 수준&lt;/td>
&lt;td>높은 수준의 추상화&lt;/td>
&lt;td>상대적으로 낮은 수준의 추상화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>목적&lt;/td>
&lt;td>시스템의 전반적인 구조와 상호작용 정의&lt;/td>
&lt;td>특정 설계 문제에 대한 해결책 제공&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>영향&lt;/td>
&lt;td>전체 시스템의 성능, 확장성, 유지보수성에 영향&lt;/td>
&lt;td>코드의 구조, 품질, 재사용성에 영향&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>예시&lt;/td>
&lt;td>마이크로서비스, 레이어드 아키텍처, 이벤트 드리븐 아키텍처&lt;/td>
&lt;td>싱글톤, 팩토리, 옵저버, 전략 패턴&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>적용 시점&lt;/td>
&lt;td>시스템 설계 초기 단계&lt;/td>
&lt;td>상세 설계 및 구현 단계&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>유연성&lt;/td>
&lt;td>시스템 수준의 변경에 대한 유연성 제공&lt;/td>
&lt;td>컴포넌트 수준의 변경에 대한 유연성 제공&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>재사용성&lt;/td>
&lt;td>전체 시스템 구조의 재사용&lt;/td>
&lt;td>특정 문제 해결 방식의 재사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>복잡성&lt;/td>
&lt;td>시스템 전체의 복잡성 관리&lt;/td>
&lt;td>특정 설계 문제의 복잡성 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>문서화&lt;/td>
&lt;td>시스템 아키텍처 다이어그램, 컴포넌트 명세&lt;/td>
&lt;td>클래스 다이어그램, 시퀀스 다이어그램&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 고려사항&lt;/td>
&lt;td>확장성, 성능, 보안, 유지보수성&lt;/td>
&lt;td>코드 재사용, 유연성, 결합도, 응집도&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>아키텍처 패턴은 시스템 전체의 구조와 관련된 더 큰 규모의 결정을 다루는 반면, 디자인 패턴은 특정 코드 수준의 문제를 해결하는 데 중점을 둔다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>