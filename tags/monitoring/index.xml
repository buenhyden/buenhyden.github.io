<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Monitoring</title><link>https://buenhyden.github.io/tags/monitoring/</link><description>Recent content in Monitoring on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 25 Dec 2024 08:23:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/monitoring/index.xml" rel="self" type="application/rss+xml"/><item><title>Monitoring and Observability</title><link>https://buenhyden.github.io/til/2024/12/monitoring-and-observability/</link><pubDate>Wed, 25 Dec 2024 08:23:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/12/monitoring-and-observability/</guid><description>
&lt;h2>Monitoring and Observability&lt;span class="hx-absolute -hx-mt-20" id="monitoring-and-observability">&lt;/span>
&lt;a href="#monitoring-and-observability" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>비교 항목&lt;/th>
&lt;th>Observability&lt;/th>
&lt;th>Monitoring&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>시스템의 내부 상태를 외부 출력을 통해 이해하고 추론할 수 있는 능력&lt;/td>
&lt;td>시스템의 동작과 성능을 지속적으로 관찰하고 추적하는 활동&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>목적&lt;/td>
&lt;td>예측하지 못한 문제의 근본 원인을 파악하고 시스템의 동작을 심층적으로 이해&lt;/td>
&lt;td>알려진 문제와 패턴을 감지하고 사전 정의된 임계값을 모니터링&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 수집 방식&lt;/td>
&lt;td>이벤트, 로그, 트레이스, 메트릭스 등 다양한 형태의 원시 데이터 수집&lt;/td>
&lt;td>주로 미리 정의된 메트릭과 상태 정보 수집&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 분석 방식&lt;/td>
&lt;td>동적이고 탐색적인 분석, 실시간 질의 및 상관관계 분석&lt;/td>
&lt;td>사전 정의된 대시보드와 알림 규칙 기반 분석&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>문제 해결 접근법&lt;/td>
&lt;td>귀납적 접근 - 데이터를 통해 문제의 패턴과 원인을 발견&lt;/td>
&lt;td>연역적 접근 - 알려진 문제 패턴에 기반한 탐지&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>도구의 특성&lt;/td>
&lt;td>유연하고 탐색적인 도구 (예: Jaeger, OpenTelemetry)&lt;/td>
&lt;td>고정된 대시보드와 알림 시스템 (예: Nagios, Prometheus)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 저장 기간&lt;/td>
&lt;td>일반적으로 더 긴 기간 (문제 패턴 분석을 위해)&lt;/td>
&lt;td>상대적으로 짧은 기간 (실시간 모니터링 중심)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용자 관점&lt;/td>
&lt;td>개발자, SRE, 운영팀의 심층 분석 도구&lt;/td>
&lt;td>운영팀의 일상적인 모니터링 도구&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>비용 구조&lt;/td>
&lt;td>상대적으로 높은 초기 비용과 운영 비용&lt;/td>
&lt;td>상대적으로 낮은 초기 비용과 예측 가능한 운영 비용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡도&lt;/td>
&lt;td>높음 (다양한 데이터 소스와 분석 도구 통합 필요)&lt;/td>
&lt;td>중간 (표준화된 메트릭 수집과 알림 구성)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>매우 유연한 확장성 (새로운 데이터 소스와 분석 방법 추가 가능)&lt;/td>
&lt;td>제한된 확장성 (미리 정의된 메트릭과 알림 중심)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>필요한 기술 수준&lt;/td>
&lt;td>높은 수준의 기술적 이해와 분석 능력 필요&lt;/td>
&lt;td>중간 수준의 운영 지식으로 충분&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>문제 감지 범위&lt;/td>
&lt;td>알려지지 않은 문제까지 포함한 광범위한 감지&lt;/td>
&lt;td>알려진 문제와 패턴 중심의 감지&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>응답 시간&lt;/td>
&lt;td>상대적으로 길음 (심층 분석 필요)&lt;/td>
&lt;td>즉각적 (사전 정의된 알림 기반)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 사용 사례&lt;/td>
&lt;td>복잡한 분산 시스템의 문제 해결, 성능 최적화&lt;/td>
&lt;td>시스템 상태 모니터링, SLA 준수 확인&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 차이점들은 각각이 서로 다른 목적과 상황에서 중요한 역할을 한다는 것을 보여준다.&lt;br>
Monitoring이 시스템의 기본적인 건강 상태를 확인하는 데 중점을 둔다면, Observability는 더 심층적인 시스템 이해와 문제 해결을 가능하게 한다.&lt;/p>
&lt;p>현대의 복잡한 시스템에서는 두 가지 접근 방식을 모두 적절히 활용하는 것이 중요하다.&lt;br>
Monitoring을 통해 기본적인 시스템 상태를 지속적으로 확인하고, Observability를 통해 더 복잡한 문제를 해결하고 시스템을 최적화할 수 있다.&lt;br>
특히 마이크로서비스 아키텍처나 분산 시스템에서는 두 접근 방식의 조화로운 활용이 더욱 중요해지고 있다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>