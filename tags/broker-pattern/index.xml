<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Broker-Pattern</title><link>https://buenhyden.github.io/tags/broker-pattern/</link><description>Recent content in Broker-Pattern on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 13 Dec 2024 08:28:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/broker-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Broker Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/broker-pattern/</link><pubDate>Fri, 13 Dec 2024 08:28:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/broker-pattern/</guid><description>
&lt;h2>Broker Pattern&lt;/h2>&lt;p>이 패턴은 클라이언트와 서버 간의 직접적인 상호작용을 줄이고, 브로커라는 중개자를 통해 통신을 관리한다.&lt;br>
이를 통해 시스템의 유연성 및 확장성을 높이고, 다양한 서비스가 서로 원활하게 협력할 수 있도록 한다.&lt;/p>
&lt;p>다음과 같은 상황에서 사용된다:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>분산 시스템&lt;/strong>: 여러 컴포넌트가 서로 다른 위치에 존재하며, 원격 서비스 호출을 통해 상호작용할 필요가 있는 경우.&lt;/li>
&lt;li>&lt;strong>서비스의 캡슐화&lt;/strong>: 클라이언트가 서비스의 구체적인 구현이나 위치를 알 필요 없이 요청할 수 있도록 하여, 시스템의 복잡성을 줄인다.&lt;/li>
&lt;li>&lt;strong>동적 구성&lt;/strong>: 런타임에 컴포넌트를 추가하거나 교체할 수 있어 시스템의 유연성을 제공한다.&lt;/li>
&lt;/ul>
&lt;h3>장점&lt;/h3>&lt;ol>
&lt;li>느슨한 결합(Loose Coupling): 클라이언트와 서버가 서로를 직접 알 필요가 없어 시스템의 유연성이 증가합니다.&lt;/li>
&lt;li>확장성: 새로운 서버나 서비스를 쉽게 추가할 수 있습니다.&lt;/li>
&lt;li>중앙화된 관리: 보안, 로깅, 로드 밸런싱 등을 중앙에서 처리할 수 있습니다.&lt;/li>
&lt;li>시스템 독립성: 다른 플랫폼이나 언어로 작성된 컴포넌트들도 브로커를 통해 통신할 수 있습니다.&lt;/li>
&lt;/ol>
&lt;h3>실제 활용 사례&lt;/h3>&lt;ol>
&lt;li>메시지 큐 시스템: Apache Kafka, RabbitMQ 등&lt;/li>
&lt;li>마이크로서비스 아키텍처의 API 게이트웨이&lt;/li>
&lt;li>IoT 시스템의 메시지 브로커&lt;/li>
&lt;li>클라우드 서비스의 로드 밸런서&lt;/li>
&lt;/ol>
&lt;h3>주의할 점&lt;/h3>&lt;ol>
&lt;li>브로커가 단일 실패 지점(Single Point of Failure)이 될 수 있습니다.&lt;/li>
&lt;li>브로커를 통한 간접 통신으로 인해 약간의 성능 오버헤드가 발생할 수 있습니다.&lt;/li>
&lt;li>시스템의 복잡성이 증가할 수 있습니다.&lt;/li>
&lt;/ol>
&lt;h3>작동 방식&lt;/h3>&lt;ol>
&lt;li>&lt;strong>서버 등록&lt;/strong>: 서버는 자신의 기능과 서비스를 브로커에 등록합니다.&lt;/li>
&lt;li>&lt;strong>서비스 요청&lt;/strong>: 클라이언트는 브로커에 특정 서비스 요청을 보냅니다.&lt;/li>
&lt;li>&lt;strong>요청 전달&lt;/strong>: 브로커는 클라이언트의 요청을 적절한 서버로 전달합니다.&lt;/li>
&lt;li>&lt;strong>응답 반환&lt;/strong>: 서버는 요청을 처리한 후 결과를 브로커에 반환하고, 브로커는 이 결과를 다시 클라이언트에게 전달합니다.&lt;/li>
&lt;/ol>
&lt;h3>주요 구성요소&lt;/h3>&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Software%20Design%20and%20Architecture/Software%20Architecture%20Patterns/Broker-Pattern-Diagrm-1024x512.webp"
alt="Broker pattern diagram"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://apptraitsolutions.com/different-software-architectural-patterns-and-how-to-choose-the-right-one-for-your-app/" target="_blank" rel="noopener">https://apptraitsolutions.com/different-software-architectural-patterns-and-how-to-choose-the-right-one-for-your-app/&lt;/a> _&lt;/p>
&lt;ol>
&lt;li>브로커(Broker): 시스템의 중심 컴포넌트로, 클라이언트의 요청을 적절한 서버로 전달하고 응답을 다시 클라이언트에게 전달합니다.&lt;/li>
&lt;li>클라이언트(Clients): 서비스를 요청하는 컴포넌트입니다.&lt;/li>
&lt;li>서버(Servers): 실제 서비스를 제공하는 컴포넌트입니다.&lt;/li>
&lt;li>브로커 레지스트리: 사용 가능한 서버들과 그들이 제공하는 서비스 정보를 관리합니다.&lt;/li>
&lt;/ol>
&lt;h3>구현 예시&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Broker&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">servers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1"># 서비스 레지스트리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">register_server&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">service_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">server&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 서버 등록&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">service_name&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">servers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">servers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">service_name&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">servers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">service_name&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">route_request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">service_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 요청을 적절한 서버로 라우팅&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">service_name&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">servers&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">servers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">service_name&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">servers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">service_name&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1"># 간단한 예시로 첫 번째 서버 선택&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">server&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process_request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Service not available&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Server&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">process_request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Server &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> processed request: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Client&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">broker&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">broker&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">broker&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">send_request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">service_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">broker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">route_request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">service_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 사용 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">broker&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Broker&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">server1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Server&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;PaymentServer&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">broker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">register_server&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;payment&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">server1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Client&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">broker&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;payment&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;process_payment&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 출력: Server PaymentServer processed request: process_payment&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>