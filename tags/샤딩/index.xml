<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – 샤딩</title><link>https://buenhyden.github.io/tags/%EC%83%A4%EB%94%A9/</link><description>Recent content in 샤딩 on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 03 Dec 2024 06:27:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/%EC%83%A4%EB%94%A9/index.xml" rel="self" type="application/rss+xml"/><item><title>샤딩 (sharding)</title><link>https://buenhyden.github.io/posts/backend/database-systems/distributed-database/sharding/</link><pubDate>Tue, 03 Dec 2024 06:27:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/backend/database-systems/distributed-database/sharding/</guid><description>
&lt;h2>샤딩 (sharding)&lt;span class="hx-absolute -hx-mt-20" id="샤딩-sharding">&lt;/span>
&lt;a href="#%ec%83%a4%eb%94%a9-sharding" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>대규모 데이터베이스 시스템에서 데이터를 수평적으로 분할하여 여러 서버에 분산 저장하는 기술.&lt;br>
각각의 분할된 데이터 조각을 &amp;lsquo;샤드(shard)&amp;lsquo;라고 부른다.&lt;br>
이 기술은 데이터베이스의 성능, 확장성, 가용성을 향상시키는 데 중요한 역할을 한다.&lt;/p>
&lt;p>예를 들어 전자상거래 사이트의 사용자 데이터를 지역별로 나누어 관리한다고 가정해보자.&lt;br>
서울 지역 사용자의 데이터는 샤드 A에, 부산 지역 사용자의 데이터는 샤드 B에 저장하는 식. 이렇게 하면 각 지역의 서버가 해당 지역 사용자의 데이터만 처리하면 되므로 시스템 부하를 분산할 수 있다.&lt;/p>
&lt;p>특징:&lt;/p>
&lt;ol>
&lt;li>수평 분할: 샤딩은 데이터를 동일한 스키마를 가진 여러 개의 작은 데이터베이스(샤드)로 나눈다.&lt;/li>
&lt;li>분산 저장: 각 샤드는 독립적인 서버에 저장되어 운영된다.&lt;/li>
&lt;li>샤드 키: 데이터를 분할하고 분산 저장하는 기준이 되는 키를 사용한다.
&lt;ul>
&lt;li>사용자 ID, 지역 코드, 시간대 등이 샤딩 키로 자주 사용된다.&lt;/li>
&lt;li>이 키의 선택은 시스템의 성능과 확장성에 직접적인 영향을 미친다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>라우팅: 샤드 서버에는 각 샤드에 작업을 분배하는 라우팅 기능이 있다.&lt;/li>
&lt;/ol>
&lt;p>장점:&lt;/p>
&lt;ol>
&lt;li>성능 향상: 데이터를 여러 서버에 분산함으로써 처리 속도가 향상된다.&lt;/li>
&lt;li>확장성: 데이터 양이 증가해도 새로운 샤드를 추가하여 시스템을 확장할 수 있다.&lt;/li>
&lt;li>가용성: 한 샤드에 문제가 발생해도 다른 샤드는 정상 작동하여 전체 시스템의 가용성이 향상된다.&lt;/li>
&lt;li>부하 분산: 데이터와 트래픽이 여러 샤드에 균등하게 분산되어 처리된다.&lt;/li>
&lt;li>비용 효율성: 고성능 하드웨어 대신 여러 대의 저렴한 서버를 사용할 수 있다.&lt;/li>
&lt;/ol>
&lt;p>단점:&lt;/p>
&lt;ol>
&lt;li>복잡성: 데이터가 여러 곳에 분산되어 있어 관리와 조회가 복잡해질 수 있다.&lt;/li>
&lt;li>데이터 일관성: 여러 샤드에 걸친 데이터의 일관성을 유지하기 어려울 수 있다.&lt;/li>
&lt;li>조인 연산의 어려움: 여러 샤드에 걸친 데이터를 조인하는 것이 어렵다.&lt;/li>
&lt;li>데이터 불균형: 특정 샤드에 데이터가 집중될 경우 성능 저하가 발생할 수 있다.&lt;/li>
&lt;li>관리 복잡성: 여러 샤드를 관리하고 모니터링하는 것이 단일 데이터베이스보다 복잡하다.&lt;/li>
&lt;/ol>
&lt;h3>샤딩 방식&lt;span class="hx-absolute -hx-mt-20" id="샤딩-방식">&lt;/span>
&lt;a href="#%ec%83%a4%eb%94%a9-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>범위 기반 샤딩 (Range Based Sharding)&lt;br>
범위 기반 샤딩은 데이터를 연속된 범위로 나누어 각 샤드에 할당하는 방식.&lt;br>
예를 들어, 고객 ID가 1-1000번까지는 첫 번째 샤드에, 1001-2000번까지는 두 번째 샤드에 저장하는 식.&lt;/p>
&lt;p>이 방식은 구현이 비교적 간단하고 이해하기 쉽다.&lt;br>
특정 범위의 데이터가 다른 범위보다 더 자주 접근되는 경우, 해당 샤드에 과도한 부하가 발생할 수 있다.&lt;br>
예를 들어 최근에 가입한 사용자들의 활동이 더 많다면, 높은 ID 범위를 담당하는 샤드에 트래픽이 집중될 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>해시 기반 샤딩 (Hash Based Sharding)&lt;br>
해시 기반 샤딩은 샤딩 키를 해시 함수에 통과시켜 나온 값을 기준으로 데이터를 분산하는 방식.&lt;/p>
&lt;p>해시 함수는 입력값을 고르게 분산시키는 특성이 있어, 데이터를 여러 샤드에 균등하게 분배할 수 있다.&lt;br>
예를 들어, 사용자 ID를 해시 함수에 넣어 나온 값을 샤드 수로 나눈 나머지를 기준으로 샤드를 결정할 수 있다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">shard_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">hash&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user_id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">number_of_shards&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이 방식의 장점은 데이터가 고르게 분산된다.&lt;/p>
&lt;p>하지만 샤드의 수를 변경하면 대부분의 데이터가 재배치되어야 하는 단점이 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>디렉토리 기반 샤딩 (Directory Based Sharding)&lt;br>
디렉토리 기반 샤딩은 별도의 조회 테이블을 사용하여 각 데이터가 어느 샤드에 있는지를 추적하는 방식.&lt;br>
이 방식은 가장 유연한 샤딩 방식으로, 동적으로 샤드 매핑을 변경할 수 있다.&lt;/p>
&lt;p>예를 들어, 다음과 같은 매핑 테이블을 유지할 수 있습니다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">shard_directory&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">key_range&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">shard_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INT&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">shard_location&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이 방식의 장점은 매우 세밀한 제어가 가능하다.&lt;br>
특정 데이터를 다른 샤드로 이동시키기 쉽고, 샤드 간의 데이터 균형을 동적으로 조정할 수 있다.&lt;/p>
&lt;p>하지만 조회 테이블이 단일 실패 지점이 될 수 있으며, 모든 쿼리가 이 테이블을 먼저 조회해야 하므로 약간의 성능 오버헤드가 발생한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>지리적 샤딩 (Geographic Sharding)&lt;br>
지리적 샤딩은 사용자의 물리적 위치를 기준으로 데이터를 분산하는 방식.&lt;br>
예를 들어, 아시아 지역 사용자의 데이터는 아시아에 위치한 서버에, 유럽 사용자의 데이터는 유럽 서버에 저장하는 식.&lt;/p>
&lt;p>이 방식의 큰 장점은 사용자와 가까운 곳에서 데이터를 제공할 수 있어 지연 시간을 크게 줄일 수 있다는 것.&lt;br>
또한 데이터 관련 규제(예: GDPR)를 준수하기 쉽다.&lt;/p>
&lt;p>하지만 사용자가 여행을 가는 등 위치가 변경될 때 성능이 저하될 수 있으며, 지역 간 데이터 동기화가 필요한 경우 복잡성이 증가한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>기능 기반 샤딩 (Feature Based Sharding)&lt;br>
기능 기반 샤딩은 애플리케이션의 특정 기능이나 모듈별로 데이터를 분리하는 방식.&lt;br>
예를 들어, 전자상거래 플랫폼에서 주문 관련 데이터는 한 샤드 그룹에, 제품 카탈로그는 다른 샤드 그룹에 저장하는 식.&lt;/p>
&lt;p>이 방식은 각 기능별로 최적화된 데이터베이스 구성을 사용할 수 있다.&lt;br>
또한 특정 기능의 트래픽 증가가 다른 기능에 영향을 미치지 않는다.&lt;/p>
&lt;p>하지만 기능 간의 데이터 조인이 필요한 경우 복잡성이 크게 증가할 수 있다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>샤딩 방식을 선택할 때는 다음과 같은 요소들을 고려해야 한다.&lt;/p>
&lt;ul>
&lt;li>데이터의 성격과 접근 패턴&lt;/li>
&lt;li>확장성 요구사항&lt;/li>
&lt;li>데이터 일관성 요구사항&lt;/li>
&lt;li>운영 복잡성 관리 능력&lt;/li>
&lt;li>애플리케이션의 쿼리 패턴&lt;/li>
&lt;li>데이터 지역성 요구사항&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>