<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>System-and-Software-Architecture on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/system-and-software-architecture/</link>
    <description>Recent content in System-and-Software-Architecture on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.7</generator>
    <language>en</language>
    <lastBuildDate>Tue, 03 Jun 2025 05:43:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/system-and-software-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Clean Code</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/clean-code/</link>
      <pubDate>Thu, 19 Sep 2024 05:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/clean-code/</guid>
      <description>클린 코드는 읽기 쉽고, 이해와 유지보수가 용이한 코드를 작성하는 원칙과 기법을 의미한다. 명확한 네이밍, 단순화, 일관성, 중복 최소화, 테스트 가능성 등 다양한 원칙을 통해 소프트웨어 품질과 개발 생산성을 높이며, 협업과 장기적인 유지보수에 큰 이점을 제공한다.</description>
    </item>
    <item>
      <title>Framework vs. Library</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/inversion-of-control/framework-vs.-library/</link>
      <pubDate>Wed, 20 Nov 2024 06:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/inversion-of-control/framework-vs.-library/</guid>
      <description>프레임워크와 라이브러리는 재사용 가능한 코드를 제공하지만, 제어의 주체가 다르다. 라이브러리는 개발자가 직접 호출해 사용하는 반면, 프레임워크는 전체 구조와 흐름을 제어하며 개발자의 코드를 필요할 때 호출한다. 이 차이는 &amp;#39; 할리우드 원칙 &amp;#39;(제어의 역전) 으로 설명된다.</description>
    </item>
    <item>
      <title>Data Pipeline Pattern</title>
      <link>https://buenhyden.github.io/posts/data-engineering/data-pipelines/data-pipeline-pattern/</link>
      <pubDate>Tue, 19 Nov 2024 03:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-engineering/data-pipelines/data-pipeline-pattern/</guid>
      <description>데이터 파이프라인 패턴은 데이터를 원천에서 목적지로 이동시키는 과정을 자동화하고 최적화하는 아키텍처 패턴이다.</description>
    </item>
    <item>
      <title>MVC pattern vs MVVC pattern vs MVP pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/structural/layered/mvc/mvc-pattern-vs-mvvc-pattern-vs-mvp-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 01:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/structural/layered/mvc/mvc-pattern-vs-mvvc-pattern-vs-mvp-pattern/</guid>
      <description>MVC, MVP, MVVM 아키텍처 패턴은 모두 **관심사 분리(SoC)** 원칙에 기반하며, 각기 다른 방식으로 UI 로직과 비즈니스 로직을 분리한다.</description>
    </item>
    <item>
      <title>보안 코딩 (Secure Coding)</title>
      <link>https://buenhyden.github.io/posts/security-engineering/web-and-application-security/secure-coding/</link>
      <pubDate>Thu, 19 Sep 2024 01:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/web-and-application-security/secure-coding/</guid>
      <description>Secure Coding은 소프트웨어 개발 과정에서 보안 취약점을 최소화하고 안전한 소프트웨어를 만들기 위한 코딩 기법이다.</description>
    </item>
    <item>
      <title>Modeling</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/modeling/</link>
      <pubDate>Sun, 25 May 2025 09:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/modeling/</guid>
      <description>&amp;#34;Principles and Modeling&amp;#34; 은 소프트웨어 시스템의 설계와 구축을 위한 근본적인 원칙들과 이를 시각적으로 표현하고 분석하는 모델링 기법들을 통합한 분야이다. 원칙은 설계와 구현의 방향성을 제시하며, 모델링은 복잡한 시스템을 시각적으로 구조화해 이해와 의사소통, 검증, 최적화를 가능하게 한다. SOLID 원칙과 같은 설계 원칙을 통해 시스템의 품질과 유지보수성을 확보하고, UML 과 같은 모델링 언어로 시스템의 구조와 동작을 명확하게 표현하여 개발팀 간의 소통과 시스템 이해를 촉진하는 것이 핵심이다.</description>
    </item>
    <item>
      <title>Programming Paradigms</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/</link>
      <pubDate>Sun, 22 Sep 2024 04:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/</guid>
      <description>코드를 효율적이고 유지보수가 용이하게 작성하기 위한 다양한 접근 방식</description>
    </item>
    <item>
      <title>Design Principles</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/</link>
      <pubDate>Thu, 29 May 2025 03:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/</guid>
      <description>Design Principles 는 소프트웨어 시스템의 구조적 안정성, 유지보수성, 확장성을 보장하기 위한 핵심 규칙이다. 모듈화, 관심사 분리, 단일 책임 원칙 등이 대표적이며, 이는 시스템 아키텍처 설계 시 복잡성 관리와 효율적인 리소스 활용을 가능하게 한다. 실무에서는 마이크로서비스, 계층화 아키텍처, CI/CD 파이프라인 등에 적용되어 신뢰성 있는 시스템 구축을 지원한다.</description>
    </item>
    <item>
      <title>MSA 패턴 유형별 비교</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/use-cases/industry-patterns/msa-pattern-comparison/</link>
      <pubDate>Tue, 19 Nov 2024 02:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/use-cases/industry-patterns/msa-pattern-comparison/</guid>
      <description>MSA의 주요 패턴 유형들을 체계적으로 정리한 것.</description>
    </item>
    <item>
      <title>System Design and Architecture</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/system-design/system-design-and-architecture/</link>
      <pubDate>Thu, 19 Sep 2024 21:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/system-design/system-design-and-architecture/</guid>
      <description>시스템 디자인은 복잡한 소프트웨어 시스템의 구조와 구성 요소를 정의하여 안정적이고 확장 가능한 시스템을 구축하는 과정이다. 사용자 요구사항을 분석하고, 구조적 설계를 통해 시스템 구성요소와 인터페이스를 정의하며, 성능, 보안, 유지보수성을 고려하여 최적의 아키텍처를 구축한다. 현대 소프트웨어 개발에서 필수적인 역할을 수행한다.</description>
    </item>
    <item>
      <title>Software Design Patterns</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/software-design-patterns/</link>
      <pubDate>Sat, 21 Dec 2024 05:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/software-design-patterns/</guid>
      <description>소프트웨어 디자인 패턴은 소프트웨어 설계에서 반복적으로 발생하는 문제에 대한 검증된 재사용 가능한 해결책이다. 이는 코드 자체가 아닌 문제 해결을 위한 템플릿이며, 생성 (Creational), 구조 (Structural), 행동 (Behavioral) 패턴으로 분류됩니다. 디자인 패턴은 개발 과정을 가속화하고, 유지보수성을 높이며, 개발자 간 커뮤니케이션을 개선한다.</description>
    </item>
    <item>
      <title>Interface vs Abstract class</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/paradigm-features/interface-vs-abstract-class/</link>
      <pubDate>Sun, 22 Sep 2024 05:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/paradigm-features/interface-vs-abstract-class/</guid>
      <description>인터페이스는 클래스가 &amp;#39;무엇을 해야 하는지&amp;#39;를 정의하는 계약(contract)과 같은 역할을 하며, 추상 클래스(Abstract Class)는 하나 이상의 추상 메서드를 포함하는 클래스이다.</description>
    </item>
    <item>
      <title>Decompose by Business Capability vs Decompose by Subdomain</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/service-oriented/microservices-architecture/decomposition/decompose-by-business-capability-vs-decompose-by-subdomain/</link>
      <pubDate>Wed, 13 Nov 2024 01:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/service-oriented/microservices-architecture/decomposition/decompose-by-business-capability-vs-decompose-by-subdomain/</guid>
      <description>Decompose by Business Capability는 조직의 기능적 관점에서 시스템을 구조화할 때 적합하며, 비즈니스와 기술의 연계를 중시하는 경우에 유용하다.  Decompose by Subdomain은 도메인의 문제를 세분화하고 기술적 복잡성을 다루기 위해 설계된 방식으로, 도메인 주도 설계 원칙을 사용하는 프로젝트에 더 적합하다.</description>
    </item>
    <item>
      <title>Mediator Pattern vs Observer Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/mediator-pattern/mediator-pattern-vs-observer-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/mediator-pattern/mediator-pattern-vs-observer-pattern/</guid>
      <description>Mediator 패턴과 Observer 패턴은 객체 간 통신을 관리하는 디자인 패턴이지만, 그 접근 방식과 용도에 차이가 있다.</description>
    </item>
    <item>
      <title>Liskov Substitution Principle</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/solid/liskov-substitution-principle/</link>
      <pubDate>Tue, 03 Jun 2025 05:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/solid/liskov-substitution-principle/</guid>
      <description>Liskov Substitution Principle(리스코프 치환 원칙, LSP)은 상위 타입의 객체를 하위 타입의 객체로 치환해도 프로그램의 동작과 정확성이 변하지 않아야 한다는 원칙이다. 이는 상속과 다형성에서 하위 클래스가 상위 클래스의 계약과 기대를 반드시 준수해야 함을 의미하며, 안정적이고 확장 가능한 설계를 가능하게 한다.</description>
    </item>
    <item>
      <title>Open/Closed Principle</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/solid/open-closed-principle/</link>
      <pubDate>Tue, 03 Jun 2025 05:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/solid/open-closed-principle/</guid>
      <description>Open/Closed Principle 은 소프트웨어 구성 요소가 **확장에는 열려 (Open)** 있고, **수정에는 닫혀 (Closed)** 있어야 한다는 설계 원칙으로, 기존 코드를 변경하지 않고 새로운 기능을 추가할 수 있도록 유연한 구조를 지향한다.</description>
    </item>
    <item>
      <title>Single Responsibility Principle</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/solid/single-responsibility-principle/</link>
      <pubDate>Tue, 03 Jun 2025 05:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/solid/single-responsibility-principle/</guid>
      <description>Single Responsibility Principle(SRP) 는 클래스나 모듈이 하나의 책임만을 가져야 한다는 객체 지향 설계 원칙이다. 이는 변경 이유를 하나로 제한하여 코드의 응집도를 높이고 유지보수를 용이하게 한다.</description>
    </item>
    <item>
      <title>Inversion of Control</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/inversion-of-control/</link>
      <pubDate>Tue, 03 Jun 2025 03:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/inversion-of-control/</guid>
      <description>Inversion of Control(제어의 역전) 은 소프트웨어 구성 요소 간 결합도를 낮추고, 제어 흐름을 외부 프레임워크나 컨테이너에 위임함으로써 유연성, 확장성, 테스트 용이성을 높이는 설계 원칙이다. 주로 의존성 주입 (Dependency Injection) 등으로 구현되며, 모듈화와 유지보수성 향상에 핵심적 역할을 한다.</description>
    </item>
    <item>
      <title>GRASP vs. SOLID</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/grasp/grasp-vs-solid/</link>
      <pubDate>Tue, 03 Jun 2025 03:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/grasp/grasp-vs-solid/</guid>
      <description>GRASP 와 SOLID 는 객체지향 설계에서 널리 사용되는 원칙과 패턴이다. GRASP 는 책임 할당과 객체 간 협력에 중점을 두고, SOLID 는 유지보수성과 확장성을 위한 다섯 가지 구체적 원칙을 제시한다. 두 원칙 모두 소프트웨어 품질 향상에 필수적이나, 적용 범위와 구체성이 다르다.</description>
    </item>
    <item>
      <title>GRASP</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/grasp/</link>
      <pubDate>Fri, 30 May 2025 12:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/grasp/</guid>
      <description>GRASP 는 객체지향 설계에서 객체와 클래스에 책임을 효과적으로 할당하기 위한 9 가지 실용적 설계 원칙의 집합이다.  Information Expert, Creator, Controller, Low Coupling, High Cohesion, Polymorphism, Pure Fabrication, Indirection, Protected Variations 로 구성되어 있으며 각 원칙은 객체의 역할, 책임, 협력, 결합도, 응집도 등 시스템의 구조적 품질을 높이기 위해 사용된다.</description>
    </item>
    <item>
      <title>POSA(Pattern-Oriented Software Architecture)</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/posa/</link>
      <pubDate>Sat, 05 Apr 2025 01:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/posa/</guid>
      <description>POSA(패턴 지향 소프트웨어 아키텍처) 는 복잡한 소프트웨어 시스템 설계 문제에 대한 검증된 해결책을 패턴 형태로 제공하는 아키텍처 접근 방식이다. 다양한 수준의 추상화에서 재사용 가능한 디자인 패턴을 체계적으로 적용하여 소프트웨어의 품질, 유지보수성 및 확장성을 향상시키는 방법론을 제시한다.</description>
    </item>
    <item>
      <title>명령형 프로그래밍(Imperative Programming) vs. 선언적 프로그래밍(Declarative Programming)</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/imperative-programming/imperative-programming-vs-declarative-programming/</link>
      <pubDate>Sun, 09 Feb 2025 12:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/imperative-programming/imperative-programming-vs-declarative-programming/</guid>
      <description>명령형 프로그래밍은 세밀한 제어와 최적화가 필요한 영역에서 강점을 발휘하며, 선언적 프로그래밍은 높은 수준의 추상화와 간결함이 중요한 영역에서 유리하다.</description>
    </item>
    <item>
      <title>Hollywood Principle</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/inversion-of-control/hollywood-principle/</link>
      <pubDate>Tue, 04 Feb 2025 14:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/inversion-of-control/hollywood-principle/</guid>
      <description>Hollywood Principle 은 &amp;#34;Don&amp;#39;t call us, we&amp;#39;ll call you&amp;#34; 라는 구호로, 저수준 컴포넌트가 고수준 컴포넌트를 직접 호출하지 않고, 고수준 컴포넌트가 필요할 때 저수준 컴포넌트를 호출하도록 제어의 흐름을 역전시키는 설계 원칙이다. 이를 통해 느슨한 결합과 확장성을 확보할 수 있다.</description>
    </item>
    <item>
      <title>Program Against Abstractions</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/program-against-abstractions/</link>
      <pubDate>Tue, 04 Feb 2025 14:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/program-against-abstractions/</guid>
      <description>Program Against Abstractions 는 소프트웨어 설계에서 구체 구현이 아닌 추상화 (인터페이스, 추상 클래스) 에 의존해 프로그래밍하는 원칙이다. 이를 통해 시스템의 유연성과 확장성, 유지보수성을 높이고, 코드 변경 시 영향 범위를 최소화할 수 있다.</description>
    </item>
    <item>
      <title>Composition Over Inheritance</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/composition-over-inheritance/</link>
      <pubDate>Tue, 04 Feb 2025 14:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/composition-over-inheritance/</guid>
      <description>&amp;#34;Composition Over Inheritance&amp;#34; 는 객체지향 설계에서 상속 (Inheritance) 보다 컴포지션 (Composition, 구성) 을 우선시하라는 원칙이다. 객체간 &amp;#34;is-a&amp;#34; 관계보다 &amp;#34;has-a&amp;#34; 관계를 통해 코드 재사용과 유연성을 달성하고자 한다. 이는 코드의 유연성과 재사용성을 높이고, 변화에 강한 구조를 만들기 위함이다. 상속의 단점을 보완하며, 다양한 기능을 조합해 객체를 설계할 수 있다.</description>
    </item>
    <item>
      <title>Encapsulate What Varies</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/encapsulate-what-varies/</link>
      <pubDate>Tue, 04 Feb 2025 14:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/encapsulate-what-varies/</guid>
      <description>Encapsulate What Varies(변하는 것을 캡슐화하라) 는 시스템에서 자주 변경되거나 확장될 가능성이 있는 부분을 별도의 모듈, 클래스, 인터페이스 등으로 분리해 관리하는 설계 원칙이다. 이를 통해 코드의 유연성, 유지보수성, 확장성을 효과적으로 높일 수 있다.</description>
    </item>
    <item>
      <title>Law of Demeter</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/law-of-demeter/</link>
      <pubDate>Tue, 04 Feb 2025 14:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/law-of-demeter/</guid>
      <description>Law of Demeter 는 객체지향 설계에서 객체 간의 결합도를 줄이기 위한 설계 원칙으로, 객체는 직접적인 친구들과만 상호작용해야 하며 메서드 체이닝을 피해야 한다는 &amp;#39; 최소 지식의 원칙 &amp;#39; 이다.</description>
    </item>
    <item>
      <title>Microservices Architecture</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/service-oriented/microservices-architecture/</link>
      <pubDate>Sat, 01 Feb 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/service-oriented/microservices-architecture/</guid>
      <description>마이크로서비스 아키텍처는 단일 애플리케이션을 작고 독립적인 서비스 집합으로 개발하는 접근 방식이다.</description>
    </item>
    <item>
      <title>Event Driven Architecture</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/event-driven/</link>
      <pubDate>Sat, 01 Feb 2025 03:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/event-driven/</guid>
      <description>이벤트 기반 아키텍처는 시스템 내에서 발생하는 상태 변화나 중요한 사건을 &amp;#39;이벤트&amp;#39;로 정의하고, 이러한 이벤트의 생성, 전송, 처리를 중심으로 시스템을 구성하는 방식이다.</description>
    </item>
    <item>
      <title>Event-Driven Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/event-driven/event-driven-pattern/</link>
      <pubDate>Sat, 28 Dec 2024 10:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/event-driven/event-driven-pattern/</guid>
      <description>이 패턴은 시스템의 상태 변화를 이벤트로 표현하고, 이를 기반으로 서비스 간 통신을 구현하는 방식이다.</description>
    </item>
    <item>
      <title>Architectue Patterns</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/</link>
      <pubDate>Sat, 21 Dec 2024 05:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/</guid>
      <description>주어진 상황에서의 소프트웨어 아키텍쳐에서 일반적으로 발생하는 문제점들에 대한 일반화되고 재사용 가능한 솔루션이다. 아키텍쳐 패턴은 소프트웨어 디자인 패턴과 유사하지만 더 큰 범주에 속한다.</description>
    </item>
    <item>
      <title>Boundaries</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/architecture-principles/boundaries/</link>
      <pubDate>Sat, 21 Dec 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/architecture-principles/boundaries/</guid>
      <description>경계 (Boundaries) 는 소프트웨어 아키텍처에서 서로 다른 구성 요소 간의 분리선과 계약을 정의하는 핵심 원칙으로, 단일 책임 원칙과 느슨한 결합을 통해 시스템의 모듈성, 유지보수성, 확장성을 향상시키며, 도메인 주도 설계와 마이크로서비스 아키텍처에서 특히 중요한 역할을 한다.</description>
    </item>
    <item>
      <title>Component Principles</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/architecture-principles/component-principles/</link>
      <pubDate>Sat, 21 Dec 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/architecture-principles/component-principles/</guid>
      <description>컴포넌트 원칙 (Component Principles)은 소프트웨어를 재사용 가능하고 독립적으로 배포할 수 있는 단위로 분할하는 아키텍처 설계 지침이다. 주요 원칙은 재사용/릴리즈 동등성, 공통 폐쇄, 공통 재사용, 안정적 의존성, 안정적 추상화 등으로, 시스템의 유지보수성, 확장성, 품질을 크게 높인다.</description>
    </item>
    <item>
      <title>Coupling and Cohesion</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/architecture-principles/coupling-and-cohesion/</link>
      <pubDate>Sat, 21 Dec 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/architecture-principles/coupling-and-cohesion/</guid>
      <description>커플링과 응집도는 소프트웨어 모듈 간의 상호의존성 정도와 모듈 내부 요소들의 기능적 연관성을 측정하는 핵심 설계 원칙이다. 낮은 커플링과 높은 응집도를 통해 유지보수가 용이하고 확장 가능한 시스템을 구축할 수 있으며, 이는 모든 우수한 소프트웨어 아키텍처의 기반이 된다.</description>
    </item>
    <item>
      <title>Policy vs. Detail</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/architecture-principles/policy-vs-detail/</link>
      <pubDate>Sat, 21 Dec 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/architecture-principles/policy-vs-detail/</guid>
      <description>Policy vs. Detail 은 소프트웨어 시스템을 고수준 정책 (비즈니스 규칙, 핵심 로직) 과 저수준 세부사항 (프레임워크, 데이터베이스, UI) 으로 분리하는 아키텍처 원칙이다. 의존성 규칙을 통해 세부사항이 정책에 의존하도록 하여 변경에 유연하고 테스트 가능한 시스템을 만들 수 있다.</description>
    </item>
    <item>
      <title>Polling publisher</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/asynchronous-processing/transactional-messaging/polling-publisher/</link>
      <pubDate>Tue, 19 Nov 2024 11:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/asynchronous-processing/transactional-messaging/polling-publisher/</guid>
      <description>Outbox 테이블에 저장된 메시지를 주기적으로 조회(polling)하여 메시지 브로커로 발행한다.  데이터베이스 트랜잭션의 일부로 메시지를 Outbox 테이블에 저장한 후, 별도의 프로세스에서 이를 읽어 발행한다.</description>
    </item>
    <item>
      <title>Transaction log tailing</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/asynchronous-processing/transactional-messaging/transaction-log-tailing/</link>
      <pubDate>Tue, 19 Nov 2024 11:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/asynchronous-processing/transactional-messaging/transaction-log-tailing/</guid>
      <description>데이터베이스의 트랜잭션 로그를 실시간으로 읽어 변경사항을 메시지 브로커에 발행하는 방식이다.</description>
    </item>
    <item>
      <title>Transactional Outbox</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/asynchronous-processing/transactional-messaging/transactional-outbox/</link>
      <pubDate>Tue, 19 Nov 2024 11:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/asynchronous-processing/transactional-messaging/transactional-outbox/</guid>
      <description>Transactional Outbox 패턴은 데이터베이스 업데이트와 메시지 발행을 원자적으로 처리하기 위한 방법으로, 데이터베이스 트랜잭션과 메시지 발행 사이의 일관성을 보장하는 것을 목적으로 한다.</description>
    </item>
    <item>
      <title>Client-side UI composition</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/use-cases/integration-patterns/ui-integration/client-side-ui-composition/</link>
      <pubDate>Tue, 19 Nov 2024 11:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/use-cases/integration-patterns/ui-integration/client-side-ui-composition/</guid>
      <description>이 패턴은 각 서비스가 독립적으로 UI 컴포넌트를 제공하고, 클라이언트가 이를 조합하여 최종 화면을 렌더링하는 방식으로 동작한다.</description>
    </item>
    <item>
      <title>Server-side page fragment composition</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/use-cases/integration-patterns/ui-integration/server-side-page-fragment-composition/</link>
      <pubDate>Tue, 19 Nov 2024 11:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/use-cases/integration-patterns/ui-integration/server-side-page-fragment-composition/</guid>
      <description>마이크로서비스 아키텍처(MSA)에서 여러 서비스로부터 HTML 조각(프래그먼트)을 수집하여 서버에서 최종 웹 페이지를 구성하는 패턴</description>
    </item>
    <item>
      <title>UI</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/use-cases/integration-patterns/ui-integration/</link>
      <pubDate>Tue, 19 Nov 2024 11:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/use-cases/integration-patterns/ui-integration/</guid>
      <description>&lt;h2 id=&#34;ui&#34;&gt;UI&lt;/h2&gt;
&lt;h2 id=&#34;client-side-composition-vs-server-side-composition&#34;&gt;&lt;strong&gt;Client-side Composition vs. Server-side Composition&lt;/strong&gt;&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;특징&lt;/th&gt;
          &lt;th&gt;Client-side Composition&lt;/th&gt;
          &lt;th&gt;Server-side Composition&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;렌더링 위치&lt;/td&gt;
          &lt;td&gt;브라우저(클라이언트)&lt;/td&gt;
          &lt;td&gt;서버&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;초기 로딩 속도&lt;/td&gt;
          &lt;td&gt;느림&lt;/td&gt;
          &lt;td&gt;빠름&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;SEO&lt;/td&gt;
          &lt;td&gt;불리함&lt;/td&gt;
          &lt;td&gt;유리함&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;서버 부하&lt;/td&gt;
          &lt;td&gt;낮음&lt;/td&gt;
          &lt;td&gt;높음&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;실시간 업데이트&lt;/td&gt;
          &lt;td&gt;유리함&lt;/td&gt;
          &lt;td&gt;제한적&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;복잡성&lt;/td&gt;
          &lt;td&gt;프론트엔드 복잡성 증가&lt;/td&gt;
          &lt;td&gt;백엔드 복잡성 증가&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Cloud Native Principles</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/architecture-principles/cloud-native-principles/</link>
      <pubDate>Tue, 19 Nov 2024 01:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/architecture-principles/cloud-native-principles/</guid>
      <description>클라우드 네이티브 원칙(Cloud Native Principles)는 클라우드 환경에서 애플리케이션을 설계하고 운영하는 핵심 원칙을 정의한다. 마이크로서비스, 컨테이너화, 불변 인프라, 선언적 API, 서비스 메시, 자동화 등을 통해 느슨하게 결합된 복원력 있는 시스템을 구현하여 비즈니스 민첩성과 운영 효율성을 극대화하는 아키텍처 접근법이다.</description>
    </item>
    <item>
      <title>Twelve-Factor App methodology</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/architecture-principles/12-factor-app/</link>
      <pubDate>Tue, 19 Nov 2024 01:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/architecture-principles/12-factor-app/</guid>
      <description>Twelve-Factor App Methodology 는 클라우드 환경에서 확장 가능하고 유지보수하기 쉬운 애플리케이션을 개발하기 위한 12 가지 원칙을 제시한다. 이 원칙들은 코드베이스 관리, 구성 설정, 종속성 선언 등 다양한 측면을 포괄하며, 현대 소프트웨어 개발의 모범 사례로 널리 채택되고 있다.</description>
    </item>
    <item>
      <title>API Key Authentication</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/security/api-key-authentication/</link>
      <pubDate>Mon, 18 Nov 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/security/api-key-authentication/</guid>
      <description>API Key Authentication은 클라이언트가 API에 접근할 때 고유한 식별자(API 키)를 사용하여 인증하는 방식이다</description>
    </item>
    <item>
      <title>CORS</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/security/cors/</link>
      <pubDate>Mon, 18 Nov 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/security/cors/</guid>
      <description>CORS는 웹 브라우저에서 구현된 보안 메커니즘으로, 다른 출처(도메인, 프로토콜, 포트)의 리소스에 접근할 수 있도록 허용하는 체계이다. 이는 동일 출처 정책(Same-Origin Policy)의 제한을 안전하게 우회할 수 있게 해준다.</description>
    </item>
    <item>
      <title>Mutual TLS</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/security/mutual-tls/</link>
      <pubDate>Mon, 18 Nov 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/security/mutual-tls/</guid>
      <description>클라이언트와 서버 간의 통신에서 양쪽 모두가 서로의 신원을 확인하는 인증 방식이다.</description>
    </item>
    <item>
      <title>OAuth2/OIDC (OpenID Connect)</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/security/oauth2-oidc/</link>
      <pubDate>Mon, 18 Nov 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/security/oauth2-oidc/</guid>
      <description>분산 시스템에서의 인증과 권한 부여를 효과적으로 처리할 수 있게 해준다.</description>
    </item>
    <item>
      <title>Rate Limiting</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/performance-and-rate-limiting/rate-limiting/</link>
      <pubDate>Mon, 18 Nov 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/performance-and-rate-limiting/rate-limiting/</guid>
      <description>클라이언트/서비스 간 요청 처리량을 제어하는 메커니즘으로, 특히 API 기반 마이크로서비스 통신에서 중요하다.</description>
    </item>
    <item>
      <title>Secret Management</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/security/secret-management/</link>
      <pubDate>Mon, 18 Nov 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/security/secret-management/</guid>
      <description>민감한 자격 증명(API 키, 데이터베이스 비밀번호, 토큰 등)을 안전하게 저장, 관리, 배포하는 핵심 보안 메커니즘이다.</description>
    </item>
    <item>
      <title>Access Token</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/security/access-token/</link>
      <pubDate>Mon, 18 Nov 2024 11:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/security/access-token/</guid>
      <description>Access Token은 사용자의 인증 정보를 담고 있는 암호화된 문자열이다</description>
    </item>
    <item>
      <title>Consumer-side contract test</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/test-and-quality/consumer-side-contract-test/</link>
      <pubDate>Mon, 18 Nov 2024 10:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/test-and-quality/consumer-side-contract-test/</guid>
      <description>테스팅 패턴 중 하나로, 서비스 간 상호작용을 검증하는 중요한 방법이다.</description>
    </item>
    <item>
      <title>Consumer-Driven Contract Testing</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/test-and-quality/consumer-driven-contract-testing/</link>
      <pubDate>Mon, 18 Nov 2024 03:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/test-and-quality/consumer-driven-contract-testing/</guid>
      <description>서비스 소비자(consumer)와 제공자(provider) 간의 상호작용을 검증하는 방법</description>
    </item>
    <item>
      <title>Service Component Test</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/test-and-quality/service-component-test/</link>
      <pubDate>Mon, 18 Nov 2024 03:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/test-and-quality/service-component-test/</guid>
      <description>개별 서비스 컴포넌트를 테스트하기 위한 중요한 패턴이다.</description>
    </item>
    <item>
      <title>Bulkhead</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/reliability/bulkhead/bulkhead/</link>
      <pubDate>Sun, 17 Nov 2024 12:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/reliability/bulkhead/bulkhead/</guid>
      <description>Bulkhead 패턴은 마이크로서비스 아키텍처(MSA)에서 시스템의 복원력과 장애 격리를 향상시키기 위해 사용되는 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Cache-Aside</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/implementation/caching/cache-strategy/cache-aside/</link>
      <pubDate>Sun, 17 Nov 2024 12:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/implementation/caching/cache-strategy/cache-aside/</guid>
      <description>애플리케이션이 데이터를 읽을 때 먼저 캐시를 확인하고, 캐시에 데이터가 없을 경우 데이터베이스에서 데이터를 가져와 캐시에 저장하는 방식이다.</description>
    </item>
    <item>
      <title>Fail Fast</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/performance-and-rate-limiting/fail-fast/</link>
      <pubDate>Sun, 17 Nov 2024 12:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/performance-and-rate-limiting/fail-fast/</guid>
      <description>Fail Fast는 시스템에서 문제가 발생했을 때 즉시 실패를 보고하고 정상 작동을 중지하는 설계 원칙</description>
    </item>
    <item>
      <title>Anti-Corruption Layer</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/other/anti-corruption-layer/</link>
      <pubDate>Sun, 17 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/other/anti-corruption-layer/</guid>
      <description>이 패턴은 서로 다른 도메인 모델이나 통신 프로토콜을 가진 시스템 간의 통합을 위해 사용된다.</description>
    </item>
    <item>
      <title>Circuit Breaker</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/reliability/circuit-breaker/circuit-breaker/</link>
      <pubDate>Sun, 17 Nov 2024 10:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/reliability/circuit-breaker/circuit-breaker/</guid>
      <description>서킷 브레이커 패턴(Circuit Breaker Pattern)은 마이크로서비스 아키텍처에서 시스템의 안정성과 복원력을 향상시키기 위해 사용되는 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Timeout Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/reliability/timeout/</link>
      <pubDate>Sun, 17 Nov 2024 02:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/reliability/timeout/</guid>
      <description>서비스가 다른 서비스로부터의 응답을 무한정 기다리지 않도록 하여 시스템의 안정성과 응답성을 향상시킨다.</description>
    </item>
    <item>
      <title>Retry Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/reliability/retry/retry/</link>
      <pubDate>Sun, 17 Nov 2024 02:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/reliability/retry/retry/</guid>
      <description>Retry Pattern은 일시적인 오류가 발생했을 때 동일한 작업을 자동으로 재시도하여 시스템의 안정성과 신뢰성을 향상시키는 패턴이다.</description>
    </item>
    <item>
      <title>Strangler Application</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/other/strangler-application/</link>
      <pubDate>Sun, 17 Nov 2024 01:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/other/strangler-application/</guid>
      <description>Strangler Application 패턴은 기존의 모놀리식 애플리케이션을 점진적으로 새로운 마이크로서비스 기반 시스템으로 대체하는 방법이다.</description>
    </item>
    <item>
      <title>API Composition</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/data-management/api-composition/</link>
      <pubDate>Sat, 16 Nov 2024 10:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/data-management/api-composition/</guid>
      <description>이 패턴은 여러 마이크로서비스의 데이터를 조합하여 클라이언트에게 단일 응답으로 제공하는 방식이다.</description>
    </item>
    <item>
      <title>CQRS</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/data-management/cqrs/</link>
      <pubDate>Sat, 16 Nov 2024 10:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/data-management/cqrs/</guid>
      <description>CQRS는 시스템의 명령(Command)과 조회(Query) 작업을 분리하여 각각의 책임을 명확히 하는 패턴이다.</description>
    </item>
    <item>
      <title>Dead Letter Queue</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/dead-letter-queue/</link>
      <pubDate>Fri, 15 Nov 2024 12:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/dead-letter-queue/</guid>
      <description>Dead Letter Queue는 메시징 시스템에서 정상적으로 처리되지 못한 메시지를 저장하는 특별한 큐</description>
    </item>
    <item>
      <title>Message Broker</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/message-broker/</link>
      <pubDate>Fri, 15 Nov 2024 12:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/message-broker/</guid>
      <description>메시지 브로커(Message Broker)는 마이크로서비스 아키텍처(MSA)에서 중요한 역할을 하는 소프트웨어 컴포넌트로, 서비스 간 메시지를 안전하고 효율적으로 전달하는 중간 역할을 한다. 이를 통해 비동기 통신과 시스템 간의 느슨한 결합(loose coupling)을 가능하게 한다.</description>
    </item>
    <item>
      <title>Competing Consumers</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/competing-consumers/</link>
      <pubDate>Fri, 15 Nov 2024 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/competing-consumers/</guid>
      <description>여러 소비자(Consumer)가 동일한 메시지 채널에서 동시에 메시지를 처리하는 방식이다. 이 패턴을 통해 시스템의 처리량을 높이고 확장성과 가용성을 개선할 수 있다.</description>
    </item>
    <item>
      <title>Message Filter</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/message-filter/</link>
      <pubDate>Fri, 15 Nov 2024 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/message-filter/</guid>
      <description>Message Filter는 특정 기준에 따라 원하지 않는 메시지를 제거하고 원하는 메시지만 통과시키는 패턴</description>
    </item>
    <item>
      <title>Message Router</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/message-router/</link>
      <pubDate>Fri, 15 Nov 2024 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/message-router/</guid>
      <description>Message Router는 메시지의 내용이나 메타데이터를 기반으로 메시지를 적절한 목적지로 전달하는 컴포넌트이다. 이는 메시지의 흐름을 제어하고 시스템의 유연성을 높이는 데 중요한 역할을 한다.</description>
    </item>
    <item>
      <title>Idempotent Consumer</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/idempotent-consumer/</link>
      <pubDate>Fri, 15 Nov 2024 11:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/idempotent-consumer/</guid>
      <description>Idempotent Consumer는 동일한 메시지를 여러 번 처리하더라도 시스템의 상태가 변하지 않도록 설계된 소비자를 의미한다</description>
    </item>
    <item>
      <title>Domain event</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/tradeoffs-and-theorems/maintaining-data-consistency/domain-event/</link>
      <pubDate>Fri, 15 Nov 2024 11:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/tradeoffs-and-theorems/maintaining-data-consistency/domain-event/</guid>
      <description>도메인 이벤트는 도메인 내에서 발생한 중요한 상태 변화를 나타내는 객체이다.</description>
    </item>
    <item>
      <title>Saga Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/reliability/saga/</link>
      <pubDate>Fri, 15 Nov 2024 10:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/reliability/saga/</guid>
      <description>Saga Pattern은 마이크로서비스 아키텍처에서 분산 트랜잭션을 관리하기 위한 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Aggregate Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/data-management/aggregate/</link>
      <pubDate>Fri, 15 Nov 2024 02:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/data-management/aggregate/</guid>
      <description>Aggregate 패턴은 도메인 주도 설계(DDD)에서 유래한 개념으로, 관련된 객체들을 하나의 단위로 묶어 데이터 변경 시 일관성을 유지한다.</description>
    </item>
    <item>
      <title>Event Sourcing</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/data-management/event-sourcing/</link>
      <pubDate>Fri, 15 Nov 2024 01:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/data-management/event-sourcing/</guid>
      <description>이 패턴은 시스템의 상태 변화를 일련의 이벤트로 저장하고 관리하는 방식을 말한다.</description>
    </item>
    <item>
      <title>3rd party registration</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/integration/service-discovery/3rd-party-registration/</link>
      <pubDate>Thu, 14 Nov 2024 11:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/integration/service-discovery/3rd-party-registration/</guid>
      <description>이 패턴에서는 서비스 인스턴스가 직접 자신을 서비스 레지스트리에 등록하지 않고, 별도의 외부 컴포넌트가 서비스의 등록과 해제를 담당한다.</description>
    </item>
    <item>
      <title>Self registration</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/integration/service-discovery/self-registration/</link>
      <pubDate>Thu, 14 Nov 2024 11:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/integration/service-discovery/self-registration/</guid>
      <description>각 마이크로서비스 인스턴스가 자신의 정보를 서비스 레지스트리에 직접 등록하고 관리하는 패턴이다</description>
    </item>
    <item>
      <title>Server-side discovery</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/integration/service-discovery/server-side-discovery/</link>
      <pubDate>Thu, 14 Nov 2024 11:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/integration/service-discovery/server-side-discovery/</guid>
      <description>Server-side Discovery는 클라이언트가 서비스의 위치를 직접 찾지 않고, 중간에 위치한 로드 밸런서나 프록시 서버가 서비스 위치를 찾아 요청을 라우팅하는 방식이다.</description>
    </item>
    <item>
      <title>Service registry</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/integration/service-discovery/service-registry/</link>
      <pubDate>Thu, 14 Nov 2024 11:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/integration/service-discovery/service-registry/</guid>
      <description>각 서비스 인스턴스의 네트워크 위치(IP 주소와 포트)를 저장하고 관리하는 중앙화된 데이터베이스</description>
    </item>
    <item>
      <title>Client-side discovery</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/integration/service-discovery/client-side-discovery/</link>
      <pubDate>Thu, 14 Nov 2024 11:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/integration/service-discovery/client-side-discovery/</guid>
      <description>Client-side Discovery는 서비스 클라이언트가 직접 서비스 레지스트리에 질의하여 필요한 서비스의 위치 정보를 얻고, 그 정보를 바탕으로 서비스를 호출하는 방식이다.</description>
    </item>
    <item>
      <title>Service deployment platform</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/deployment-and-operations/service-deployment-platform/</link>
      <pubDate>Wed, 13 Nov 2024 11:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/deployment-and-operations/service-deployment-platform/</guid>
      <description>마이크로서비스 아키텍처(MSA)에서 서비스를 효율적으로 배포하고 관리하기 위한 플랫폼</description>
    </item>
    <item>
      <title>Service per VM</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/deployment-and-operations/service-per-vm/</link>
      <pubDate>Wed, 13 Nov 2024 11:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/deployment-and-operations/service-per-vm/</guid>
      <description>각 마이크로서비스를 독립적인 가상 머신(VM)에 배포하는 방식</description>
    </item>
    <item>
      <title>Multiple Services per Host</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/deployment-and-operations/multiple-services-per-host/</link>
      <pubDate>Wed, 13 Nov 2024 11:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/deployment-and-operations/multiple-services-per-host/</guid>
      <description>하나의 물리적 또는 가상 호스트에 여러 개의 마이크로서비스 인스턴스를 배포하는 방식이다</description>
    </item>
    <item>
      <title>Service per Container</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/deployment-and-operations/service-per-container/</link>
      <pubDate>Wed, 13 Nov 2024 11:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/deployment-and-operations/service-per-container/</guid>
      <description>각 마이크로서비스를 독립적인 컨테이너에 배포하는 방식이다</description>
    </item>
    <item>
      <title>Single Service per Host</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/deployment-and-operations/single-service-per-host/</link>
      <pubDate>Wed, 13 Nov 2024 11:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/deployment-and-operations/single-service-per-host/</guid>
      <description>각 서비스 인스턴스를 독립적인 호스트에 배포하는 방식</description>
    </item>
    <item>
      <title>Serverless deployment</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/deployment-and-operations/serverless-deployment/</link>
      <pubDate>Wed, 13 Nov 2024 11:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/deployment-and-operations/serverless-deployment/</guid>
      <description>Serverless deployment는 개발자가 서버를 관리할 필요가 없는 클라우드 컴퓨팅 모델 중 하나이다. 즉, 서버 관리를 개발자가 아닌 클라우드 제공자가 알아서 해주는 것이다.</description>
    </item>
    <item>
      <title>Self-contained Service</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/service-oriented/microservices-architecture/decomposition/self-contained-service/</link>
      <pubDate>Wed, 13 Nov 2024 10:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/service-oriented/microservices-architecture/decomposition/self-contained-service/</guid>
      <description>단일 비즈니스 기능을 완전히 독립적으로 구현한 서비스를 의미한다.  이 서비스는 자체적으로 데이터를 저장하고, 비즈니스 로직을 처리하며, 사용자 인터페이스를 제공할 수 있다.</description>
    </item>
    <item>
      <title>Service per team</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/service-oriented/microservices-architecture/decomposition/service-per-team/</link>
      <pubDate>Wed, 13 Nov 2024 10:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/service-oriented/microservices-architecture/decomposition/service-per-team/</guid>
      <description>각 마이크로서비스를 개별 팀이 소유하고 관리하는 방식</description>
    </item>
    <item>
      <title>Sidecar Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/integration/sidecar-pattern/sidecar/</link>
      <pubDate>Wed, 13 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/integration/sidecar-pattern/sidecar/</guid>
      <description>Sidecar Pattern은 마치 오토바이의 사이드카처럼, 주 애플리케이션 컨테이너 옆에 보조 컨테이너를 배치하여 추가 기능을 제공한다.</description>
    </item>
    <item>
      <title>Decompose by Business Capability</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/service-oriented/microservices-architecture/decomposition/decompose-by-business-capability/</link>
      <pubDate>Wed, 13 Nov 2024 01:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/service-oriented/microservices-architecture/decomposition/decompose-by-business-capability/</guid>
      <description>이 패턴은 비즈니스 능력을 기반으로 애플리케이션을 마이크로서비스로 분해하는 방법을 제시한다.</description>
    </item>
    <item>
      <title>Decompose by Subdomain</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/service-oriented/microservices-architecture/decomposition/decompose-by-subdomain/</link>
      <pubDate>Wed, 13 Nov 2024 01:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/service-oriented/microservices-architecture/decomposition/decompose-by-subdomain/</guid>
      <description>비즈니스 도메인을 여러 하위 도메인으로 나누어 마이크로서비스를 설계하는 방법</description>
    </item>
    <item>
      <title>Externalized configuration</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/integration/external-configuration-store/externalized-configuration/</link>
      <pubDate>Tue, 12 Nov 2024 11:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/integration/external-configuration-store/externalized-configuration/</guid>
      <description>이 패턴은 애플리케이션의 구성 정보를 코드와 분리하여 외부에서 관리하는 방식을 말한다.</description>
    </item>
    <item>
      <title>Database per Service Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/data-management/database-per-service/</link>
      <pubDate>Tue, 12 Nov 2024 10:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/data-management/database-per-service/</guid>
      <description>Database per Service Pattern은 각 마이크로서비스가 자체적인 독립된 데이터베이스를 가지는 구조를 말한다.  이는 서비스 간의 느슨한 결합을 촉진하고, 각 서비스의 자율성을 높이는 것을 목표로 한다.</description>
    </item>
    <item>
      <title>Shared Database</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/data-management/shared-database/</link>
      <pubDate>Tue, 12 Nov 2024 07:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/data-management/shared-database/</guid>
      <description>여러 마이크로서비스가 동일한 데이터베이스 인스턴스를 사용하여 데이터를 저장하고 접근하는 방식이다</description>
    </item>
    <item>
      <title>Rate Limiting Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/performance-and-rate-limiting/rate-limiting-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 11:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/performance-and-rate-limiting/rate-limiting-pattern/</guid>
      <description>Rate Limiting은 특정 시간 동안 클라이언트나 서비스가 보낼 수 있는 요청 수를 제한하는 메커니즘이다.</description>
    </item>
    <item>
      <title>Publisher-Subscriber Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/publisher-subscriber/publisher-subscriber-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 11:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/publisher-subscriber/publisher-subscriber-pattern/</guid>
      <description>이 패턴은 메시지를 보내는 발행자(Publisher)와 메시지를 받는 구독자(Subscriber) 사이의 느슨한 결합(Loose Coupling)을 제공하는 메시징 패턴으로, 발행자는 메시지를 특정 주제(Topic)나 채널로 발행하고, 해당 주제를 구독하는 모든 구독자들이 그 메시지를 받게 된다.</description>
    </item>
    <item>
      <title>Retry Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/reliability/retry/retry-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 11:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/reliability/retry/retry-pattern/</guid>
      <description>분산 시스템이나 마이크로서비스 아키텍처에서 일시적인 오류(Transient Failure)를 처리하기 위한 핵심 설계 패턴이다.</description>
    </item>
    <item>
      <title>Model-View-ViewModel Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/structural/layered/mvc/model-view-viewmodel-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 11:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/structural/layered/mvc/model-view-viewmodel-pattern/</guid>
      <description>MVVM(Model-View-ViewModel) 패턴은 소프트웨어 아키텍처 패턴 중 하나로, 사용자 인터페이스(UI)와 비즈니스 로직을 효과적으로 분리하여 코드의 유지보수성과 재사용성을 향상시키는 데 중점을 둔다.</description>
    </item>
    <item>
      <title>Service-oriented architecture</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/service-oriented/service-oriented-architecture/</link>
      <pubDate>Fri, 27 Sep 2024 09:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/service-oriented/service-oriented-architecture/</guid>
      <description>**Service-Oriented Architecture(SOA)**는 기업의 복잡한 IT 시스템을 **비즈니스 기능 단위의 서비스**로 모듈화하고, 이를 조합해 유연한 애플리케이션을 구축하는 소프트웨어 설계 패턴이다.</description>
    </item>
    <item>
      <title>Model–view–presenter Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/structural/layered/mvc/model-view-presenter-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 09:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/structural/layered/mvc/model-view-presenter-pattern/</guid>
      <description>Model-View-Presenter(MVP) 패턴은 사용자 인터페이스 개발을 위한 아키텍처 패턴으로, **관심사 분리** 원칙에 기반해 UI 로직과 비즈니스 로직을 분리한다.</description>
    </item>
    <item>
      <title>Message Queues and Streams</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/message-queues-and-streams/</link>
      <pubDate>Fri, 27 Sep 2024 09:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/message-queues-and-streams/</guid>
      <description>메시지 큐는 작업의 안정적인 처리와 시스템 간 결합도 감소에 적합하며, 스트림은 실시간 데이터 처리와 분석에 더 적합하다.</description>
    </item>
    <item>
      <title>Master-Slave Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/reliability/master-slave-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/reliability/master-slave-pattern/</guid>
      <description>하나의 마스터 컴포넌트와 여러 슬레이브 컴포넌트로 구성되어 있으며, 작업을 효율적으로 분배하고 관리하는 데 사용된다</description>
    </item>
    <item>
      <title>Peer-to-Peer Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/distributed/peer-to-peer/</link>
      <pubDate>Fri, 27 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/distributed/peer-to-peer/</guid>
      <description>분산 네트워크 아키텍처의 한 형태로, 각 노드(피어)가 클라이언트와 서버의 역할을 동시에 수행하는 구조</description>
    </item>
    <item>
      <title>Pipe-Filter Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/data-management/pipes-and-filters/pipe-filter-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/data-management/pipes-and-filters/pipe-filter-pattern/</guid>
      <description>데이터 스트림을 처리하는 시스템에서 사용되는 소프트웨어 아키텍처 패턴</description>
    </item>
    <item>
      <title>Producer-Consumer Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/producer-consumer-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 01:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/producer-consumer-pattern/</guid>
      <description>이 패턴은 데이터를 생성하는 프로듀서(Producer)와 데이터를 소비하는 컨슈머(Consumer) 사이의 작업을 분리하여 효율적인 데이터 처리를 가능하게 한다.</description>
    </item>
    <item>
      <title>Component-Based</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/structural/component-based/</link>
      <pubDate>Thu, 26 Sep 2024 11:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/structural/component-based/</guid>
      <description>애플리케이션을 독립적이고 재사용 가능한 단위인 &amp;#39;컴포넌트&amp;#39;로 구성하는 방식을 말한다.</description>
    </item>
    <item>
      <title>Domain-Driven Design</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/modeling/domain-modeling/domain-driven-design/</link>
      <pubDate>Thu, 26 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/modeling/domain-modeling/domain-driven-design/</guid>
      <description>복잡한 소프트웨어 시스템을 개발하기 위한 접근 방식으로, 비즈니스 도메인을 중심으로 소프트웨어를 설계하고 개발하는 방법론</description>
    </item>
    <item>
      <title>Event-Bus Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/event-bus-pattern/</link>
      <pubDate>Thu, 26 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-patterns/messaging/event-bus-pattern/</guid>
      <description>소프트웨어 시스템의 컴포넌트 간 통신을 단순화하고 유연성을 높이는 아키텍처 패턴</description>
    </item>
    <item>
      <title>Client Server Architecture</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/distributed/client-server/</link>
      <pubDate>Thu, 26 Sep 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/distributed/client-server/</guid>
      <description>클라이언트-서버 아키텍처는 네트워크 환경에서 **클라이언트**와 **서버**가 역할을 분담하여 상호작용하는 모델이다. 클라이언트(Client)가 요청(Request)을 보내고, 서버(Server)가 요청을 처리하여 응답(Response)한다.</description>
    </item>
    <item>
      <title>Client-Server Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/distributed/client-server/client-server-pattern/</link>
      <pubDate>Thu, 26 Sep 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/architecture/architectue-styles/distributed/client-server/client-server-pattern/</guid>
      <description>서비스를 제공하는 서버와 서비스를 요청하는 클라이언트로 구성되는 소프트웨어 아키텍처 패턴</description>
    </item>
    <item>
      <title>Factory Method Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/creational/factory-method-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 18:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/creational/factory-method-pattern/</guid>
      <description>객체 생성을 위한 인터페이스를 정의하지만, 실제 어떤 클래스의 인스턴스를 생성할지는 서브클래스가 결정하도록 하는 디자인 패턴</description>
    </item>
    <item>
      <title>Singleton Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/creational/singleton-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 18:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/creational/singleton-pattern/</guid>
      <description>클래스의 인스턴스가 프로그램 전체에서 오직 하나만 생성되도록 보장하는 소프트웨어 디자인 패턴.</description>
    </item>
    <item>
      <title>Flyweight Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/structural/flyweight-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 08:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/structural/flyweight-pattern/</guid>
      <description>플라이웨이트 패턴은 재사용 가능한 객체 인스턴스를 공유하여 메모리 사용량을 최소화하는 구조 패턴이다.  간단히 말하면 캐시(Cache) 개념을 코드로 패턴화한 것으로, 자주 변화하는 속성(extrinsic)과 변하지 않는 속성(intrinsic)을 분리하고 변하지 않는 속성을 캐시하여 재사용함으로써 메모리 사용을 줄이는 방식이다.</description>
    </item>
    <item>
      <title>Composite Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/structural/composite-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 08:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/structural/composite-pattern/</guid>
      <description>Composite Pattern은 구조적 디자인 패턴 중 하나로, 객체들을 트리 구조로 구성하여 부분-전체 계층을 표현하는 패턴이다.</description>
    </item>
    <item>
      <title>Decorator Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/structural/decorator-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/structural/decorator-pattern/</guid>
      <description>객체에 동적으로 새로운 책임을 추가할 수 있게 해주는 구조적 디자인 패턴</description>
    </item>
    <item>
      <title>Adapter Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/structural/adapter-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/structural/adapter-pattern/</guid>
      <description>호환되지 않는 인터페이스를 가진 객체들이 협력할 수 있도록 하는 구조적 디자인 패턴</description>
    </item>
    <item>
      <title>Abstract Factory Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/creational/abstract-factory-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/creational/abstract-factory-pattern/</guid>
      <description>구체적인 클래스를 지정하지 않고도 관련된 객체들의 집합을 생성할 수 있게 해주는 생성 패턴</description>
    </item>
    <item>
      <title>Builder Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/creational/builder-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/creational/builder-pattern/</guid>
      <description>복잡한 객체의 생성 과정과 표현 방법을 분리하여, 동일한 생성 절차에서 서로 다른 표현 결과를 만들 수 있게 하는 생성 패턴</description>
    </item>
    <item>
      <title>Prototype Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/creational/prototype-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/creational/prototype-pattern/</guid>
      <description>기존 객체를 복제하여 새로운 객체를 생성하는 생성 패턴</description>
    </item>
    <item>
      <title>Interpreter Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/interpreter-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/interpreter-pattern/</guid>
      <description>Interpreter 패턴은 행동 디자인 패턴의 하나로, 특정 언어의 문법을 해석하고 실행하는 방법을 정의한다.</description>
    </item>
    <item>
      <title>Visitor Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/visitor-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/visitor-pattern/</guid>
      <description>Visitor Pattern은 객체 구조와 알고리즘을 분리하는 행위 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Behavioral Design Patterns</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/</link>
      <pubDate>Tue, 24 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/</guid>
      <description>Behavioral Design Patterns 는 객체 및 클래스 간의 상호작용과 책임 분산에 집중한 디자인 패턴군으로, 복잡한 시스템에서 객체들의 행위를 유연하게 조정하고 기능 확장 및 유지보수를 용이하게 만든다. 실무에서 프로그램의 확장성과 코드 품질 향상을 위해 필수적으로 활용된다.</description>
    </item>
    <item>
      <title>Chain of Responsibility</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/chain-of-responsibility/</link>
      <pubDate>Tue, 24 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/chain-of-responsibility/</guid>
      <description>Chain of Responsibility 패턴은 요청을 보내는 객체와 이를 처리하는 객체들 간의 결합도를 낮추기 위한 행위 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Mediator Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/mediator-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/mediator-pattern/</guid>
      <description>Mediator Pattern(중재자 패턴)은 소프트웨어 디자인 패턴 중 하나로, 객체 간의 상호작용을 캡슐화하여 서로 직접 통신하지 않고 중재자 객체를 통해서만 소통하도록 설계된 행동 패턴이다.</description>
    </item>
    <item>
      <title>Memento Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/memento-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/memento-pattern/</guid>
      <description>Mediator 패턴은 객체 지향 소프트웨어 디자인 패턴 중 하나로, 객체들 간의 복잡한 상호작용을 캡슐화하여 객체 간 결합도를 낮추는 행위 패턴이다.</description>
    </item>
    <item>
      <title>Command Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/command-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/command-pattern/</guid>
      <description>요청을 객체의 형태로 캡슐화하여 나중에 사용할 수 있도록 하는 행동 디자인 패턴</description>
    </item>
    <item>
      <title>State Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/state-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/state-pattern/</guid>
      <description>객체의 내부 상태가 변경될 때 객체의 행동이 변경되도록 하는 행동 디자인 패턴</description>
    </item>
    <item>
      <title>Template Method Pattern</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/template-method-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/design-patterns/gof/behavioral/template-method-pattern/</guid>
      <description>알고리즘의 구조를 정의하고 일부 단계를 서브클래스에서 구현할 수 있도록 하는 행동 디자인 패턴</description>
    </item>
    <item>
      <title>Access Modifiers</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/components/access-modifiers/</link>
      <pubDate>Mon, 23 Sep 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/components/access-modifiers/</guid>
      <description>객체지향 프로그래밍(OOP)에서 접근 제어자(Access Modifiers)는 클래스, 메서드, 변수 등의 접근 범위를 제어하는 중요한 개념이다.</description>
    </item>
    <item>
      <title>KISS Principle</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/kiss/</link>
      <pubDate>Mon, 23 Sep 2024 01:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/kiss/</guid>
      <description>KISS(Keep It Simple, Stupid) 원칙은 소프트웨어 개발에서 불필요한 복잡성을 피하고, 가능한 한 단순하게 설계·구현하라는 설계 원칙이다. 이를 통해 코드의 가독성, 유지보수성, 확장성을 높이고, 오류 발생 가능성을 줄일 수 있다.</description>
    </item>
    <item>
      <title>YAGNI Principle</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/yagni/</link>
      <pubDate>Mon, 23 Sep 2024 00:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/yagni/</guid>
      <description>YAGNI 는 &amp;#34;You Ain&amp;#39;t Gonna Need It&amp;#34; 의 약어로, 실제로 필요하지 않은 기능은 구현하지 말라는 소프트웨어 개발 원칙이다. 이 원칙은 개발 시간을 절약하고 코드의 복잡성을 줄이며, 유지보수를 용이하게 한다.</description>
    </item>
    <item>
      <title>DRY Principle</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/dry/</link>
      <pubDate>Mon, 23 Sep 2024 00:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/dry/</guid>
      <description>DRY 원칙은 &amp;#34; 모든 지식이나 로직은 시스템 내에서 단일하고 명확하며 권위 있는 표현을 가져야 한다 &amp;#34; 는 소프트웨어 개발 원칙이다. 코드 중복을 제거하여 유지보수성과 일관성을 향상시키고, 오류 발생 가능성을 줄이며, 개발 효율성을 높이는 것을 목표로 한다.</description>
    </item>
    <item>
      <title>SOLID Principles</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/solid/</link>
      <pubDate>Mon, 23 Sep 2024 00:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/solid/</guid>
      <description>SOLID 는 객체지향 설계의 5 대 원칙 (SRP, OCP, LSP, ISP, DIP) 으로, 소프트웨어의 유지보수성과 확장성을 높이고 코드의 품질을 개선한다. 각 원칙은 단일 책임, 확장성, 대체 가능성, 인터페이스 분리, 의존성 역전을 강조한다.</description>
    </item>
    <item>
      <title>Class and Instance</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/components/class/class-and-instance/</link>
      <pubDate>Sun, 22 Sep 2024 12:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/components/class/class-and-instance/</guid>
      <description>클래스란 객체를 생성하기 위한 템플릿 또는 청사진이고, 인스턴스는 클래스를 기반으로 생성된 실제 객체</description>
    </item>
    <item>
      <title>다형성 (Polymorphism)</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/primary-principles/polymorphism/</link>
      <pubDate>Sun, 22 Sep 2024 10:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/primary-principles/polymorphism/</guid>
      <description>다형성(Polymorphism)은 객체지향 프로그래밍의 핵심 특징 중 하나로, &amp;#34;여러 가지 형태를 가질 수 있는 능력&amp;#34;을 의미한다</description>
    </item>
    <item>
      <title>상속 (Inheritance)</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/primary-principles/inheritance/</link>
      <pubDate>Sun, 22 Sep 2024 10:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/primary-principles/inheritance/</guid>
      <description>상속은 객체지향 프로그래밍의 핵심 특징 중 하나로, 기존 클래스의 특성을 다른 클래스가 물려받아 재사용하고 확장할 수 있게 해주는 메커니즘</description>
    </item>
    <item>
      <title>객체 지향 프로그래밍 (Object-Oriented Programming)</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/</link>
      <pubDate>Sun, 22 Sep 2024 09:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/</guid>
      <description>&lt;h2 id=&#34;객체-지향-프로그래밍-object-oriented-programming&#34;&gt;객체 지향 프로그래밍 (Object-Oriented Programming)&lt;/h2&gt;
&lt;h3 id=&#34;1-주제의-분류-적합성-분석&#34;&gt;1. 주제의 분류 적합성 분석&lt;/h3&gt;
&lt;p&gt;&amp;rsquo; 객체 지향 프로그래밍 (Object-Oriented Programming, OOP)&amp;rsquo; 은 프로그래밍 패러다임 중 하나로, 소프트웨어 설계의 원칙과 구조에 깊이 관여한다. OOP 는 프로그램의 구조와 설계, 유지보수, 확장성에 직접적인 영향을 주며, &amp;ldquo;Computer Science and Engineering &amp;gt; System and Software Architecture &amp;gt; Principles &amp;gt; Design Principles &amp;gt; Programming Paradigms&amp;rdquo; 분류는 OOP 의 본질과 역할을 정확히 반영한다. 실제로 OOP 는 소프트웨어 아키텍처와 설계 원칙의 핵심 패러다임으로 널리 분류된다 [1][2][4].&lt;/p&gt;</description>
    </item>
    <item>
      <title>함수형 프로그래밍 (Functional Programming)</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/declarative-programming/functional-programming/</link>
      <pubDate>Sun, 22 Sep 2024 09:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/declarative-programming/functional-programming/</guid>
      <description>프로그램을 순수 함수들의 조합으로 구성하는 방식</description>
    </item>
    <item>
      <title>명령형 프로그래밍(Imperative Programming)</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/imperative-programming/</link>
      <pubDate>Sun, 22 Sep 2024 08:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/imperative-programming/</guid>
      <description>프로그램이 &amp;#39;어떻게&amp;#39; 작업을 수행해야 하는지를 명확하게 서술하는 프로그래밍 패러다임이다</description>
    </item>
    <item>
      <title>선언적 프로그래밍(Declarative Programming)</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/declarative-programming/</link>
      <pubDate>Sun, 22 Sep 2024 08:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/declarative-programming/</guid>
      <description>계산의 로직을 표현하되, 그것이 어떻게 수행되는지에 대한 제어 흐름은 추상화한다.</description>
    </item>
    <item>
      <title>추상화 (Abstraction)</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/primary-principles/abstraction/</link>
      <pubDate>Sun, 22 Sep 2024 06:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/primary-principles/abstraction/</guid>
      <description>프로그래밍에서 핵심적인 개념으로, 복잡한 시스템이나 데이터를 단순화하여 필수적인 특징만을 강조하는 과정</description>
    </item>
    <item>
      <title>Abstract Classes</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/paradigm-features/abstract-classes/</link>
      <pubDate>Sun, 22 Sep 2024 04:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/paradigm-features/abstract-classes/</guid>
      <description>추상 클래스는 하나 이상의 추상 메서드를 포함하는 클래스이다. 추상 메서드는 선언만 되고 구현되지 않은 메서드를 말한다.</description>
    </item>
    <item>
      <title>Interfaces</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/paradigm-features/interfaces/</link>
      <pubDate>Sun, 22 Sep 2024 04:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/paradigm-features/interfaces/</guid>
      <description>소프트웨어나 애플리케이션에서 인터페이스(Interface)는 두 개의 시스템, 프로그램, 장치 또는 구성 요소 간의 상호 작용을 가능하게 하는 연결점 또는 접점을 의미한다.</description>
    </item>
    <item>
      <title>오버라이딩(Overriding)과 오버로딩(Overloading)</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/overriding-and-overloading/</link>
      <pubDate>Sun, 22 Sep 2024 04:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/overriding-and-overloading/</guid>
      <description>오버라이딩(Overriding)과 오버로딩(Overloading)에 대해 알아보고 비교 분석해보자.</description>
    </item>
    <item>
      <title>Encapsulation</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/primary-principles/encapsulation/</link>
      <pubDate>Sun, 22 Sep 2024 02:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/programming-paradigms/object-oriented-programming/primary-principles/encapsulation/</guid>
      <description>캡슐화는 데이터와 그 데이터를 처리하는 메서드를 하나의 단위로 묶고, 외부로부터 접근을 제한하는 것을 의미한다.</description>
    </item>
    <item>
      <title>System and Software Architecture</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/</link>
      <pubDate>Thu, 19 Sep 2024 10:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/</guid>
      <description>시스템 아키텍처와 소프트웨어 아키텍처는 시스템의 구조와 구성요소 정의에 중점을 두지만, 소프트웨어 아키텍처는 소프트웨어 시스템의 고수준 구조와 컴포넌트 간 관계를 정의하는 반면, 시스템 아키텍처는 하드웨어, 소프트웨어, 네트워크 등 전체 시스템의 구조적 설계를 다룬다.  소프트웨어 아키텍처는 시스템 아키텍처의 일부분으로 볼 수 있다.</description>
    </item>
  </channel>
</rss>
