<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – CPU</title><link>https://buenhyden.github.io/tags/cpu/</link><description>Recent content in CPU on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 23 Sep 2024 16:44:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/cpu/index.xml" rel="self" type="application/rss+xml"/><item><title>CPU</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/cpu/</link><pubDate>Mon, 23 Sep 2024 16:44:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/cpu/</guid><description>
&lt;h2>CPU&lt;/h2>&lt;p>CPU(중앙처리장치)는 컴퓨터 시스템의 핵심 구성요소로, 프로그램의 명령어를 해석하고 실행하는 역할을 한다.&lt;/p>
&lt;h3>CPU의 주요 구성요소&lt;/h3>&lt;p>CPU는 크게 세 가지 주요 구성요소로 이루어져 있다&lt;/p>
&lt;ol>
&lt;li>제어장치 (Control Unit, CU)&lt;/li>
&lt;li>산술논리장치 (Arithmetic Logic Unit, ALU)&lt;/li>
&lt;li>레지스터 (Registers)&lt;/li>
&lt;/ol>
&lt;h4>제어장치 (Control Unit)&lt;/h4>&lt;p>제어장치는 CPU의 &amp;lsquo;교통 경찰&amp;rsquo; 역할을 한다.&lt;/p>
&lt;p>주요 기능:&lt;/p>
&lt;ul>
&lt;li>명령어를 순서대로 실행할 수 있도록 제어&lt;/li>
&lt;li>주기억장치로부터 프로그램 명령을 순차적으로 가져와 해독&lt;/li>
&lt;li>명령어 실행에 필요한 제어 신호를 기억장치, 연산장치, 입출력 장치 등으로 전송&lt;/li>
&lt;/ul>
&lt;h4>산술논리장치 (ALU)&lt;/h4>&lt;p>ALU는 CPU 내에서 실제 연산을 수행하는 부분&lt;/p>
&lt;p>주요 기능:&lt;/p>
&lt;ul>
&lt;li>산술 연산 (덧셈, 뺄셈, 곱셈, 나눗셈)&lt;/li>
&lt;li>논리 연산 (AND, OR, NOT 등)&lt;/li>
&lt;li>비교 연산&lt;/li>
&lt;/ul>
&lt;h4>레지스터 (Registers)&lt;/h4>&lt;p>레지스터는 CPU 내부의 고속 소규모 기억장치&lt;/p>
&lt;p>주요 특징:&lt;/p>
&lt;ul>
&lt;li>명령어 주소, 코드, 연산에 필요한 데이터, 연산 결과 등을 임시로 저장&lt;/li>
&lt;li>메모리 계층의 최상위에 위치하며 가장 빠른 속도로 접근 가능&lt;/li>
&lt;li>용도에 따라 범용 레지스터와 특수 목적 레지스터로 구분&lt;/li>
&lt;/ul>
&lt;h3>CPU의 작동 과정&lt;/h3>&lt;p>CPU의 작동 과정은 크게 명령어 사이클(Instruction Cycle)로 설명할 수 있다.&lt;br>
이 사이클은 다음과 같은 단계로 구성된다.:&lt;/p>
&lt;ol>
&lt;li>인출 (Fetch)&lt;/li>
&lt;li>해독 (Decode)&lt;/li>
&lt;li>실행 (Execute)&lt;/li>
&lt;li>쓰기 (Write-back)&lt;/li>
&lt;/ol>
&lt;h4>1. 인출 (Fetch)&lt;/h4>&lt;ul>
&lt;li>프로그램 카운터(PC)에 저장된 주소를 메모리 주소 레지스터(MAR)로 전달&lt;/li>
&lt;li>MAR에 저장된 주소를 이용해 주기억장치에서 명령어를 가져옴&lt;/li>
&lt;li>가져온 명령어를 메모리 버퍼 레지스터(MBR)에 저장&lt;/li>
&lt;li>다음 명령어를 위해 PC 값을 증가시킴&lt;/li>
&lt;li>MBR의 내용을 명령어 레지스터(IR)로 전달&lt;/li>
&lt;/ul>
&lt;h4>2. 해독 (Decode)&lt;/h4>&lt;p>제어장치가 IR에 저장된 명령어를 해석하여 수행해야 할 작업을 결정한다.&lt;/p>
&lt;h4>3. 실행 (Execute)&lt;/h4>&lt;p>해독된 명령어에 따라 ALU나 다른 CPU 구성요소가 실제 연산을 수행한다.&lt;/p>
&lt;h4>4. 쓰기 (Write-back)&lt;/h4>&lt;p>연산 결과를 메모리나 레지스터에 저장한다.&lt;/p>
&lt;h3>고급 CPU 기능&lt;/h3>&lt;p>현대의 CPU는 성능 향상을 위해 다양한 기술을 사용한다.&lt;/p>
&lt;ol>
&lt;li>캐시 메모리&lt;br>
CPU는 자주 사용되는 데이터와 명령어를 캐시에 저장하여 접근 속도를 높인다.&lt;/li>
&lt;li>명령어 파이프라이닝&lt;br>
CPU는 여러 명령어를 동시에 처리하기 위해 파이프라이닝 기법을 사용한다.&lt;br>
한 명령어가 해독 단계에 있을 때 다른 명령어의 인출을 시작하는 방식으로 작동한다.&lt;/li>
&lt;li>인터럽트 처리&lt;br>
CPU는 키보드나 마우스 같은 주변 장치로부터의 입력을 처리하기 위해 인터럽트 메커니즘을 사용한다.&lt;br>
인터럽트가 발생하면 CPU는 현재 작업을 일시 중단하고 인터럽트를 처리한 후 원래 작업으로 돌아간다.&lt;br>
이러한 복잡한 메커니즘을 통해 CPU는 초당 수십억 개의 명령어를 처리할 수 있으며, 이는 현대 컴퓨터 시스템의 핵심 성능을 결정짓는 요소가 된다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>