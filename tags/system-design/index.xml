<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>System-Design on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/system-design/</link>
    <description>Recent content in System-Design on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.149.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 05 Aug 2025 08:02:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/system-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>System Design Overview</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/overview/system-design/</link>
      <pubDate>Tue, 27 May 2025 08:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/overview/system-design/</guid>
      <description>System Design 은 사용자의 요구사항을 바탕으로 시스템의 전반적인 아키텍처를 설계하는 작업으로, 컴포넌트 간의 인터페이스, 데이터 흐름, 확장성, 성능, 가용성, 유지보수를 고려한 설계이다. 이 과정은 견고한 시스템 구축 및 운영 효율성 확보에 필수적이다.</description>
    </item>
    <item>
      <title>Performance vs Scalability</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/quality-attributes-tradeoffs/general-architecture/performance-vs-scalability/</link>
      <pubDate>Tue, 18 Feb 2025 05:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/quality-attributes-tradeoffs/general-architecture/performance-vs-scalability/</guid>
      <description>성능 (Performance) 과 확장성 (Scalability) 은 시스템 설계에서 상호 보완적이면서도 때로는 상충하는 핵심 속성이다.  성능은 단일 작업을 얼마나 빠르게 처리할 수 있는지를 나타내는 반면, 확장성은 부하가 증가할 때 시스템이 이를 효과적으로 처리할 수 있는 능력을 의미한다.  성능이 좋은 시스템이 반드시 확장성이 좋은 것은 아니며, 그 반대도 마찬가지이다. 이 두 특성의 균형을 맞추는 것은 현대 시스템 설계의 핵심 과제로, 분산 시스템, 로드 밸런싱, 캐싱, 데이터베이스 샤딩 등의 기술을 통해 해결할 수 있다.</description>
    </item>
    <item>
      <title>Latency vs Throughput</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/quality-attributes-tradeoffs/distributed-systems/latency-vs-throughput/</link>
      <pubDate>Tue, 18 Feb 2025 05:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/quality-attributes-tradeoffs/distributed-systems/latency-vs-throughput/</guid>
      <description>지연시간 (Latency) 은 요청이 시작된 시점부터 응답을 받을 때까지 걸리는 시간을 의미하며, 처리량 (Throughput) 은 시스템이 단위 시간당 처리할 수 있는 작업의 양을 나타낸다. 이 두 개념은 시스템 성능의 핵심 지표로, 서로 상충관계 (trade-off) 를 가지며 시스템 설계에서 균형 있는 최적화가 중요하다. 적절한 지연시간과 처리량 관리는 효율적인 시스템 설계의 기반이 된다.</description>
    </item>
    <item>
      <title>Availability vs. Consistency</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/quality-attributes-tradeoffs/distributed-systems/availability-vs-consistency/</link>
      <pubDate>Tue, 18 Feb 2025 05:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/quality-attributes-tradeoffs/distributed-systems/availability-vs-consistency/</guid>
      <description>가용성과 일관성은 분산 시스템 설계에서 핵심적인 특성으로, CAP 정리에 따라 네트워크 분할이 발생할 때 둘 중 하나만 완벽하게 보장할 수 있다. 가용성은 모든 요청이 성공 또는 실패 응답을 받을 수 있도록 하는 특성인 반면, 일관성은 모든 노드가 동일한 시점에 동일한 데이터를 볼 수 있도록 보장한다. 시스템 설계자는 비즈니스 요구사항에 따라 두 특성 간의 균형을 찾아야 하며, 이는 데이터베이스 선택부터 아키텍처 설계까지 전반적인 결정에 영향을 미친다.</description>
    </item>
    <item>
      <title>Architecture</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/overview/architecture/</link>
      <pubDate>Sun, 25 May 2025 09:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/overview/architecture/</guid>
      <description>소프트웨어 아키텍처는 시스템의 구성 요소, 구조, 상호작용, 기술 선택, 품질 속성 등을 정의하는 설계의 청사진이다. 이는 유지보수성, 확장성, 성능, 보안 등 비기능 요구사항을 충족시키며, 시스템의 성공적 개발과 장기적 진화를 이끄는 핵심 역할을 한다.</description>
    </item>
    <item>
      <title>Cloud Native Platforms</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-native-platforms/</link>
      <pubDate>Thu, 08 May 2025 04:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-native-platforms/</guid>
      <description>클라우드 네이티브 플랫폼은 컨테이너, 오케스트레이션, 마이크로서비스 등 최신 기술을 활용해 클라우드 환경에서 애플리케이션을 유연하고 확장성 있게 운영하는 구조이다.  자동화, 복원력, 보안이 주요 특징이며, DevOps 와 긴밀히 통합되어 빠른 배포와 운영을 지원한다.</description>
    </item>
    <item>
      <title>분산 시스템(Distributed Systems)</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/</link>
      <pubDate>Mon, 11 Nov 2024 02:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/</guid>
      <description>분산 시스템은 여러 독립적인 컴퓨터 (노드) 가 네트워크를 통해 상호작용하며, 하나의 통합된 시스템처럼 동작하도록 설계된 구조이다. 확장성, 장애 허용성, 자원 효율성, 고가용성 등 현대 IT 인프라의 핵심 요구사항을 충족한다.</description>
    </item>
    <item>
      <title>Infrastructure</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/overview/infrastructure/</link>
      <pubDate>Sun, 10 Nov 2024 01:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/overview/infrastructure/</guid>
      <description>Infrastructure(인프라스트럭처)는 조직의 IT 환경을 지원하고 운영하는 데 필요한 기본적인 구성 요소들의 집합이다. 이는 하드웨어, 소프트웨어, 네트워크 리소스 및 서비스를 포함한다.</description>
    </item>
    <item>
      <title>Web Server</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/access--network-entry/web-server/</link>
      <pubDate>Mon, 21 Oct 2024 05:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/access--network-entry/web-server/</guid>
      <description>웹 서버 (Web Server) 는 HTTP 프로토콜을 통해 클라이언트의 요청을 받아 정적 또는 동적 웹 콘텐츠를 제공하는 서버 소프트웨어이다. 요청 - 응답 아키텍처를 기반으로 HTML, CSS, JavaScript 등의 웹 리소스를 전달하며, 현대 웹 애플리케이션의 핵심 인프라로 활용된다.</description>
    </item>
    <item>
      <title>Consistency Models</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/consistency-models/</link>
      <pubDate>Wed, 09 Oct 2024 00:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/consistency-models/</guid>
      <description>분산 시스템에서 **일관성 패턴**은 시스템의 요구사항, 성능, 가용성, 지연 시간 간의 균형을 맞추기 위한 핵심 전략이다. 대표적인 패턴으로는 **Strong, Eventual, Causal, Weak Consistency** 등이 있으며, 시스템 요구 사항에 따라 다르게 적용되며 서로 다른 트레이드오프를 제공한다. 실무에서는 하이브리드 일관성 모델을 활용하거나, 동적으로 일관성을 조정하는 구조가 확대되고 있다. 2025 년에는 AI 기반 예측, Adaptive Consistency, 규제 대응 설계 전략 등이 주목받고 있다.</description>
    </item>
    <item>
      <title>System Design and Architecture</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/overview/</link>
      <pubDate>Thu, 19 Sep 2024 21:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/overview/</guid>
      <description>시스템 디자인은 복잡한 소프트웨어 시스템의 구조와 구성 요소를 정의하여 안정적이고 확장 가능한 시스템을 구축하는 과정이다. 사용자 요구사항을 분석하고, 구조적 설계를 통해 시스템 구성요소와 인터페이스를 정의하며, 성능, 보안, 유지보수성을 고려하여 최적의 아키텍처를 구축한다. 현대 소프트웨어 개발에서 필수적인 역할을 수행한다.</description>
    </item>
    <item>
      <title>Database Systems and Data Management</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/overview/database-systems-and-data-management/</link>
      <pubDate>Sun, 08 Jun 2025 05:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/overview/database-systems-and-data-management/</guid>
      <description>데이터베이스 시스템 및 데이터 관리는 구조화된 데이터의 저장, 검색, 수정, 관리를 효율적으로 수행하는 컴퓨터 시스템으로, DBMS (Database Management System) 를 통해 ACID 속성을 보장하며 다양한 데이터 모델과 아키텍처를 제공하여 현대 정보 시스템의 핵심 기반 기술 역할을 담당한다.</description>
    </item>
    <item>
      <title>Web Application Server</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/application--execution-core/web-application-servers/</link>
      <pubDate>Mon, 21 Oct 2024 15:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/application--execution-core/web-application-servers/</guid>
      <description>웹 애플리케이션 서버(Web Application Server, WAS)는 웹 애플리케이션의 실행 환경을 제공하고, 동적인 콘텐츠를 처리하며, 데이터베이스와의 연동을 지원하는 소프트웨어 프레임워크이다.</description>
    </item>
    <item>
      <title>Availability Patterns</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/performance--scalability/quality-attributes/reliability-attributes/availability/availability-patterns/</link>
      <pubDate>Wed, 09 Oct 2024 00:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/performance--scalability/quality-attributes/reliability-attributes/availability/availability-patterns/</guid>
      <description>가용성 패턴은 분산 시스템과 클라우드 환경에서 서비스의 안정적인 운영을 보장하기 위한 설계 패턴이다. 이 패턴들은 시스템의 일부가 실패하더라도 전체 시스템의 가용성을 유지하고, 장애에 대한 복원력을 제공하며, 사용자에게 지속적인 서비스를 제공하는 것을 목표로 한다. 서킷 브레이커, 벌크헤드, 헬스 엔드포인트 모니터링 등 다양한 패턴을 포함한다.</description>
    </item>
    <item>
      <title>Search Engines</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/application--execution-core/search-engines/</link>
      <pubDate>Mon, 21 Oct 2024 05:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/application--execution-core/search-engines/</guid>
      <description>방대한 양의 정보에서 필요한 데이터를 효율적으로 찾아내는 특화된 시스템이다. 단순한 키워드 매칭을 넘어서, 오늘날의 검색 엔진은 복잡한 데이터 분석과 실시간 처리를 위한 고도화된 기술을 구현하고 있다.</description>
    </item>
    <item>
      <title>Cloud vs. On-Premise</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-fundamentals/cloud-vs-on-premise/</link>
      <pubDate>Sun, 10 Nov 2024 10:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-fundamentals/cloud-vs-on-premise/</guid>
      <description>Cloud와 On-Premise는 기업의 IT 인프라를 구축하고 관리하는 두 가지 주요 방식을 설명하는 개념이다.</description>
    </item>
    <item>
      <title>Synchronous Execution</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/performance--scalability/performance-design/execution-strategies/synchronous-execution/</link>
      <pubDate>Tue, 05 Aug 2025 08:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/performance--scalability/performance-design/execution-strategies/synchronous-execution/</guid>
      <description>동기 실행(Synchronous Execution)은 작업이 순차적으로 진행되어 이전 작업이 완료된 후에야 다음 작업이 시작되는 차단형 모델입니다. 구조가 단순하고 흐름 예측이 쉬우며 디버깅이 용이하지만, I/O·네트워크 지연 시 전체 처리 속도가 저하되고 리소스 활용성이 떨어질 수 있습니다. 주로 일관성과 순차성이 중요한 트랜잭션, 배치 처리, 상태 의존 로직에 사용됩니다.</description>
    </item>
    <item>
      <title>Asynchronous Execution</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/performance--scalability/performance-design/execution-strategies/asynchronous-execution/</link>
      <pubDate>Tue, 05 Aug 2025 08:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/performance--scalability/performance-design/execution-strategies/asynchronous-execution/</guid>
      <description>비동기 실행은 작업 완료를 기다리지 않고 다른 작업을 병행 처리하는 모델로, I/O 지연을 줄이고 자원을 효율적으로 활용해 응답성을 높인다. 이벤트 루프 기반의 태스크 스케줄링으로 구현되며, 콜백·프로미스·async/await 등이 사용된다. I/O-bound에 유리하지만 복잡성과 디버깅 난이도가 단점이다.</description>
    </item>
    <item>
      <title>Multi-tenancy</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/multi-tenancy/</link>
      <pubDate>Sun, 27 Jul 2025 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/multi-tenancy/</guid>
      <description>**멀티테넌시(Multi-tenancy)**는 단일 소프트웨어 인스턴스가 다수의 테넌트를 논리적으로 분리된 구조로 서비스하는 아키텍처로, 리소스를 공유하면서도 데이터 격리를 보장한다. 비용 절감, 확장성, 운영 효율성이 강점이며, 보안, 성능 격리, 커스터마이즈 관리가 도전 과제이다.</description>
    </item>
    <item>
      <title>Ingress Controller</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/ingress-controller/</link>
      <pubDate>Fri, 25 Jul 2025 05:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/ingress-controller/</guid>
      <description>인그레스 컨트롤러 (Ingress Controller) 는 쿠버네티스를 포함한 클라우드 네이티브 환경에서 외부 트래픽을 클러스터 내부 서비스로 안전하고 효율적으로 라우팅하는 핵심 컴포넌트다. 다양한 라우팅 규칙, 인증, SSL 종료 등 고급 트래픽 관리 기능도 함께 제공한다.</description>
    </item>
    <item>
      <title>Istio</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/service-mesh/implementations/istio/</link>
      <pubDate>Fri, 25 Jul 2025 05:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/service-mesh/implementations/istio/</guid>
      <description>Istio 는 컨테이너 오케스트레이션 환경에서 마이크로서비스 간 트래픽 관리, 보안, 정책, 관측을 위해 제공되는 대표적인 서비스 메시 솔루션으로, 애플리케이션 코드 변경 없이 다양한 네트워크 기능을 지원하여 시스템의 일관성과 안정성을 높인다.</description>
    </item>
    <item>
      <title>Forward Proxy</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/access--network-entry/proxy/forward-proxy/</link>
      <pubDate>Wed, 23 Jul 2025 09:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/access--network-entry/proxy/forward-proxy/</guid>
      <description>순방향 프록시 (Forward Proxy) 는 클라이언트가 외부 인터넷에 직접 접근하지 않고 프록시 서버를 통해 요청을 중계하도록 하는 시스템 컴포넌트다. 이를 통해 보안 강화, 정책적 접근 통제, 캐싱, 익명성 등 다양한 네트워크 관리 및 보호 기능을 실현한다.</description>
    </item>
    <item>
      <title>Distributed Locking</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/distribution-fundamentals/coordination/distributed-locking/</link>
      <pubDate>Sun, 13 Jul 2025 04:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/distribution-fundamentals/coordination/distributed-locking/</guid>
      <description>분산 락킹(Distributed Locking)은 분산 시스템에서 여러 노드가 공유 자원에 동시에 접근하지 못하도록 상호 배제를 보장하는 메커니즘입니다. 데이터 일관성과 무결성을 확보하며, Redlock, ZooKeeper, Etcd 등 다양한 방식으로 구현되고, 리더 선출, 중복 실행 방지, 트랜잭션 제어 등 실무에서 활용됩니다.</description>
    </item>
    <item>
      <title>Distributed Coordination</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/distribution-fundamentals/coordination/</link>
      <pubDate>Mon, 07 Jul 2025 14:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/distribution-fundamentals/coordination/</guid>
      <description>Distributed Coordination 은 다중 노드 환경에서 **합의 (consensus)**, **리더 선출 (leader election)**, **락 (locking)**, **상태 동기화 (state synchronization)** 등을 통해 **일관성과 안정성**을 보장하는 필수 메커니즘으로, Paxos·Raft·2PC 같은 프로토콜을 기반으로 구성된다.</description>
    </item>
    <item>
      <title>Container-Based Architecture</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/container-based/</link>
      <pubDate>Sat, 05 Jul 2025 05:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/container-based/</guid>
      <description>Container-Based Architecture는 애플리케이션과 종속성을 격리된 컨테이너 단위로 패키징하여 일관성 있는 실행 환경을 제공하는 아키텍처 패턴이다. 마이크로서비스, 클라우드 네이티브 환경에서 확장성, 이식성, 자동화를 실현하며 현대적 소프트웨어 배포의 핵심 기반이 된다.</description>
    </item>
    <item>
      <title>Cloud Computing</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-fundamentals/cloud-computing/</link>
      <pubDate>Sun, 15 Jun 2025 07:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-fundamentals/cloud-computing/</guid>
      <description>클라우드 컴퓨팅은 가상화된 서버, 스토리지, 네트워킹, 데이터베이스, 분석 툴 등을 온디맨드 방식으로 서비스 형태로 제공하는 모델이다. 이를 통해 기업은 초기 투자 없이 빠르게 확장 가능하며, 글로벌 접근성, 비용 효율성과 혁신 가속화가 가능하다.</description>
    </item>
    <item>
      <title>Failback vs. Fail Over</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/reliability--resilience/recovery-patterns/fallback/failback-vs-fail-over/</link>
      <pubDate>Sun, 18 May 2025 12:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/reliability--resilience/recovery-patterns/fallback/failback-vs-fail-over/</guid>
      <description>Failover 는 주 시스템에 장애 발생 시 대기 시스템으로 자동 전환하여 서비스 연속성을 유지하는 방식이며, Failback 은 주 시스템이 복구된 후 원래 상태로 되돌리는 과정이다. 이 두 메커니즘은 고가용성 시스템에서 다운타임을 최소화하고 비즈니스 연속성을 보장하는 필수적인 재해 복구 전략을 구성한다.</description>
    </item>
    <item>
      <title>Failback</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/reliability--resilience/recovery-patterns/fallback/</link>
      <pubDate>Sun, 18 May 2025 12:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/reliability--resilience/recovery-patterns/fallback/</guid>
      <description>Failback 은 장애 발생 시 예비 시스템으로 전환된 (Failover) 서비스를 원본 시스템으로 복구하는 프로세스이다. 데이터 동기화, 서비스 재개, 자원 재배치 등을 통해 시스템의 정상 운영 상태를 복원하며, 계획된 유지보수나 비상 복구 시나리오에서 필수적으로 적용된다.</description>
    </item>
    <item>
      <title>Availability in Numbers</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/performance--scalability/quality-attributes/reliability-attributes/availability/availability-in-numbers/</link>
      <pubDate>Thu, 15 May 2025 05:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/performance--scalability/quality-attributes/reliability-attributes/availability/availability-in-numbers/</guid>
      <description>시스템 설계에서 &amp;#34;Availability in Numbers&amp;#34; 는 시스템이 정상적으로 작동하는 시간의 비율을 수치화하여 가용성을 측정하는 개념이다. 일반적으로 &amp;#39;9 의 개수 &amp;#39; 로 표현되며, 시스템의 중요도에 따라 다양한 가용성 수준 (99%, 99.9%, 99.999% 등) 을 목표로 한다. 이를 달성하기 위해 중복성, 장애 감지 및 복구 메커니즘 등 다양한 패턴과 전략이 적용되며, 비즈니스 요구사항과 비용 사이의 균형을 고려해 설계한다.</description>
    </item>
    <item>
      <title>ACID Properties</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/acid-properties/</link>
      <pubDate>Thu, 15 May 2025 02:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/acid-properties/</guid>
      <description>ACID는 데이터베이스 트랜잭션이 전부 수행 또는 전부 취소(원자성), 일관된 규칙 준수(일관성), 동시 실행 간 간섭 방지(격리성), **결과 영구 저장(지속성)**을 보장하는 원칙이다. 이를 통해 장애나 동시성 경쟁 상황에서도 데이터 무결성과 신뢰성을 유지하며, 현대 DB·분산 환경 설계의 핵심 기반이 된다.</description>
    </item>
    <item>
      <title>Transaction Isolation</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/</link>
      <pubDate>Mon, 12 May 2025 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/</guid>
      <description>트랜잭션 격리(Transaction Isolation)는 ACID 속성 중 하나로, 동시에 실행되는 트랜잭션 간 간섭을 제어해 데이터 일관성을 보장한다. SQL 표준 격리 수준은 Read Uncommitted, Read Committed, Repeatable Read, Serializable로, 각 수준에 따라 Dirty/Non-Repeatable/Phantom Read 허용 여부와 성능이 달라진다.</description>
    </item>
    <item>
      <title>Message Systems</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/message-infrastructure/message-systems/</link>
      <pubDate>Tue, 22 Apr 2025 13:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/message-infrastructure/message-systems/</guid>
      <description>메시징 시스템은 분산 애플리케이션의 구성 요소 간 비동기 통신을 지원하여 결합도를 낮추고, 신뢰성·확장성·유연성을 제공합니다. 메시지 큐, 이벤트 스트리밍, 태스크 큐 등 다양한 형태가 존재하며, 실시간 데이터 처리, 작업 분산, 장애 복원력 등 다양한 요구에 대응한다.</description>
    </item>
    <item>
      <title>Reverse Proxy</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/access--network-entry/proxy/reverse-proxy/</link>
      <pubDate>Fri, 18 Apr 2025 15:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/access--network-entry/proxy/reverse-proxy/</guid>
      <description>Reverse Proxy 는 클라이언트 요청을 받아 내부 서버에 전달하고, 그 응답을 다시 클라이언트에 반환하는 중간 서버로, 로드 밸런싱, 보안, 캐싱 등 다양한 기능을 수행한다.</description>
    </item>
    <item>
      <title>Domain Name System</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/core-protocols/internet-layer/network-services/dns/</link>
      <pubDate>Tue, 01 Apr 2025 02:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/core-protocols/internet-layer/network-services/dns/</guid>
      <description>Domain Name System(도메인 네임 시스템, DNS) 은 사용자가 기억하기 쉬운 도메인 명을 실제 IP 주소로 변환해주는 핵심 인터넷 인프라 서비스이다. DNS 를 통해 네트워크상의 다양한 자원에 쉽고 신뢰성 있게 접근할 수 있으며, 분산된 아키텍처와 계층적 구조로 빠르고 안정적인 네임 해석을 제공한다.</description>
    </item>
    <item>
      <title>Implementations of API Gateway</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/api-gateway/implementations/</link>
      <pubDate>Sun, 23 Mar 2025 04:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/api-gateway/implementations/</guid>
      <description>API 게이트웨이는 현대적인 애플리케이션 아키텍처의 핵심 구성 요소로, 클라이언트 요청을 처리하고 다양한 마이크로서비스로 라우팅하는 중앙 진입점 역할을 한다.</description>
    </item>
    <item>
      <title>Apache APISIX</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/api-gateway/implementations/apache-apisix/</link>
      <pubDate>Sun, 23 Mar 2025 01:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/api-gateway/implementations/apache-apisix/</guid>
      <description>Apache APISIX는 고성능 클라우드 네이티브 API 게이트웨이로, 2019년 CNCF(Cloud Native Computing Foundation) 샌드박스 프로젝트로 시작되어 2022년 10월에는 CNCF 인큐베이팅 프로젝트로 승격되었다.</description>
    </item>
    <item>
      <title>KrakenD</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/api-gateway/implementations/krakend/</link>
      <pubDate>Sun, 23 Mar 2025 01:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/api-gateway/implementations/krakend/</guid>
      <description>KrakenD는 고성능 API 게이트웨이로, 2016년에 오픈 소스 프로젝트로 시작되었으며 현재는 KrakenD 회사에서 개발 및 유지보수하고 있다. Go 언어로 작성되었으며, 마이크로서비스 아키텍처에서 백엔드 API들을 통합하고 최적화하기 위해 설계되었다.</description>
    </item>
    <item>
      <title>Tyk</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/api-gateway/implementations/tyk-gateway/</link>
      <pubDate>Sun, 23 Mar 2025 01:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/api-gateway/implementations/tyk-gateway/</guid>
      <description>Tyk는 강력한 오픈 소스 API 관리 플랫폼으로, 2014년 Martin Buhr에 의해 설립된 Tyk Technologies에서 개발했다. Go 언어로 작성되었으며, API 게이트웨이, 개발자 포털, API 분석 대시보드를 포함한 완전한 API 관리 솔루션을 제공한다.</description>
    </item>
    <item>
      <title>Kong</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/api-gateway/implementations/kong-gateway/</link>
      <pubDate>Sun, 23 Mar 2025 01:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/api-gateway/implementations/kong-gateway/</guid>
      <description>Kong은 마이크로서비스 아키텍처를 위한 클라우드 네이티브, 오픈 소스 API 게이트웨이 및 서비스 메시이다.</description>
    </item>
    <item>
      <title>Traefik</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/api-gateway/implementations/traefik/</link>
      <pubDate>Sun, 23 Mar 2025 01:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/api-gateway/implementations/traefik/</guid>
      <description>Traefik(트래픽이라고 발음)은 2015년 Containous(현재 Traefik Labs)에서 개발한 오픈 소스 API 게이트웨이이자 엣지 라우터이다.</description>
    </item>
    <item>
      <title>PACELC Theorem</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/distribution-fundamentals/theoretical-foundations/pacelc/</link>
      <pubDate>Sat, 22 Mar 2025 06:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/distribution-fundamentals/theoretical-foundations/pacelc/</guid>
      <description>PACELC 정리는 CAP 이론을 확장하여 네트워크 분할 (Partition) 발생 시 **A(가용성) vs C(일관성)**, 정상 시 **L(지연 시간) vs C(일관성)** 간 트레이드오프를 명시하는 이론이다. 이는 시스템 설계 시 필연적인 선택과 트레이드오프를 요구한다. 2025 년 현재 초대규모 분산 시스템에서 동적 리소스 할당과 AI 기반 자동 최적화 기술에 필수적으로 적용되며, 클라우드 네이티브 아키텍처 설계의 핵심 원칙으로 작용한다.</description>
    </item>
    <item>
      <title>CAP Theorem</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/distribution-fundamentals/theoretical-foundations/cap/</link>
      <pubDate>Thu, 20 Feb 2025 00:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/distribution-fundamentals/theoretical-foundations/cap/</guid>
      <description>CAP 이론은 분산 시스템에서 일관성 (Consistency), 가용성 (Availability), 파티션 내성 (Partition Tolerance) 세 가지 속성 중 동시에 두 가지만 보장할 수 있다는 원칙이다. 네트워크 파티션 발생 시 시스템은 일관성과 가용성 중 하나를 선택해야 하며, 이는 분산 데이터베이스와 같은 시스템 설계에 중요한 영향을 미친다. 파티션 내성은 현실적인 분산 환경에서 필수적이므로 실제로는 일관성과 가용성 사이의 트레이드오프가 핵심이다.</description>
    </item>
    <item>
      <title>Fail Over</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/reliability--resilience/recovery-patterns/failover-patterns/</link>
      <pubDate>Tue, 18 Feb 2025 05:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/reliability--resilience/recovery-patterns/failover-patterns/</guid>
      <description>페일오버(Failover)는 시스템의 주요 구성 요소가 실패했을 때 자동으로 대체 구성 요소로 전환하여 서비스 연속성을 보장하는 고가용성 아키텍처 패턴으로 장애 감지, 전환 메커니즘, 데이터 동기화가 핵심 요소이다. 단일 장애점을 해결하기 위해 중복성을 도입하고, 액티브 - 패시브, 액티브 - 액티브, N&#43;1 등 다양한 구현 방식을 통해 시스템 다운타임을 최소화하고 비즈니스 연속성을 유지한다.  현대 IT 환경에서는 클라우드 기반 페일오버, 컨테이너화된 환경의 자동화된 페일오버, AI 기반 사전 예측 페일오버 등으로 진화하고 있으며, 비즈니스 연속성과 사용자 경험 보장에 필수적이다.</description>
    </item>
    <item>
      <title>Load Balancer</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/load-balancer/</link>
      <pubDate>Mon, 17 Feb 2025 04:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/traffic-control-and-routing/load-balancer/</guid>
      <description>로드 밸런서 (Load Balancer) 는 복수의 서버에 트래픽을 효율적으로 분산하여 시스템 부하를 균등하게 분배하고, 장애 발생 시에도 서비스 연속성을 보장하는 장치 또는 기술이다. 다양한 알고리즘과 유형을 활용하여 확장성과 고가용성, 탄력성을 제공하는 시스템 핵심 구성 요소이다.</description>
    </item>
    <item>
      <title>Content Delivery Networks</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/network-infrastructure/internet-infrastructure/content-delivery-networks/</link>
      <pubDate>Mon, 17 Feb 2025 04:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/network-fundamentals/network-infrastructure/internet-infrastructure/content-delivery-networks/</guid>
      <description>콘텐츠 전송 네트워크 (CDN) 는 전 세계에 분산된 서버 네트워크를 통해 웹 콘텐츠를 사용자와 지리적으로 가까운 위치에서 제공함으로써 로딩 시간을 단축하고 대역폭 비용을 절감하는 기술이다. 정적/동적 콘텐츠 캐싱, 로드 밸런싱, 보안 기능을 제공하며, 엣지 컴퓨팅과 결합하여 더욱 발전하고 있다.</description>
    </item>
    <item>
      <title>Load Balancing</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/performance-optimization/traffic-management/load-balancing/</link>
      <pubDate>Thu, 13 Feb 2025 01:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/performance-optimization/traffic-management/load-balancing/</guid>
      <description>API 로드 밸런싱은 현대 웹 아키텍처와 분산 시스템의 필수적인 구성 요소로, 트래픽을 여러 서버에 효율적으로 분산하여 성능, 가용성, 안정성을 극대화한다.</description>
    </item>
    <item>
      <title>Transaction Isolation Levels</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/</link>
      <pubDate>Thu, 06 Feb 2025 04:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/</guid>
      <description>트랜잭션 격리 수준(Transaction Isolation Level)은 DBMS가 동시에 실행되는 트랜잭션 간 데이터 접근·갱신 방식을 제어해 Dirty Read, Non-repeatable Read, Phantom Read 등을 방지하는 메커니즘이다. SQL-92 표준의 4단계(Read Uncommitted~Serializable)와 Lock·MVCC 기반 구현을 통해 성능과 일관성 간 균형을 조정한다.</description>
    </item>
    <item>
      <title>Polling publisher</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/distributed-transactions/saga-pattern/transactional-messaging/outbox-pattern/polling-publisher/</link>
      <pubDate>Tue, 19 Nov 2024 11:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/distributed-transactions/saga-pattern/transactional-messaging/outbox-pattern/polling-publisher/</guid>
      <description>Outbox 테이블에 저장된 메시지를 주기적으로 조회(polling)하여 메시지 브로커로 발행한다.  데이터베이스 트랜잭션의 일부로 메시지를 Outbox 테이블에 저장한 후, 별도의 프로세스에서 이를 읽어 발행한다.</description>
    </item>
    <item>
      <title>Transaction log tailing</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/distributed-transactions/saga-pattern/transactional-messaging/outbox-pattern/transaction-log-tailing/</link>
      <pubDate>Tue, 19 Nov 2024 11:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/distributed-transactions/saga-pattern/transactional-messaging/outbox-pattern/transaction-log-tailing/</guid>
      <description>데이터베이스의 트랜잭션 로그를 실시간으로 읽어 변경사항을 메시지 브로커에 발행하는 방식이다.</description>
    </item>
    <item>
      <title>Transactional Outbox</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/distributed-transactions/saga-pattern/transactional-messaging/transactional-outbox/</link>
      <pubDate>Tue, 19 Nov 2024 11:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/distributed-transactions/saga-pattern/transactional-messaging/transactional-outbox/</guid>
      <description>Transactional Outbox 패턴은 데이터베이스 업데이트와 메시지 발행을 원자적으로 처리하기 위한 방법으로, 데이터베이스 트랜잭션과 메시지 발행 사이의 일관성을 보장하는 것을 목적으로 한다.</description>
    </item>
    <item>
      <title>Backpressure</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/performance--scalability/load-management/traffic-control/backpressure/</link>
      <pubDate>Sun, 17 Nov 2024 12:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/performance--scalability/load-management/traffic-control/backpressure/</guid>
      <description>시스템이 처리할 수 있는 양보다 더 많은 요청이 들어올 때, 이를 제어하는 메커니즘이다.</description>
    </item>
    <item>
      <title>Service Mesh</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/container-based/service-mesh/</link>
      <pubDate>Wed, 13 Nov 2024 09:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/container-based/service-mesh/</guid>
      <description>서비스 메시는 **마이크로서비스 간 통신을 Sidecar 프록시 기반 Data Plane**으로 추상화하고, **Control Plane**에서 정책·보안·관찰 기능을 외부화하는 인프라 계층이다.  이를 통해 서비스 간 보안 (mTLS), 로드밸런싱, 리트라이, 트래픽 제어, 모니터링 등을 코드 수정 없이 적용할 수 있다.</description>
    </item>
    <item>
      <title>AWS</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/engineering-operations/infrastructure-management/cloud-platforms/cloud-providers/aws/</link>
      <pubDate>Sun, 10 Nov 2024 15:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/engineering-operations/infrastructure-management/cloud-platforms/cloud-providers/aws/</guid>
      <description>AWS(Amazon Web Services)는 Amazon이 제공하는 클라우드 컴퓨팅 플랫폼으로, 2006년에 시작되어 현재 전 세계적으로 가장 포괄적이고 널리 채택된 클라우드 플랫폼이다.</description>
    </item>
    <item>
      <title>Cloud Providers</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/engineering-operations/infrastructure-management/cloud-platforms/cloud-providers/</link>
      <pubDate>Sun, 10 Nov 2024 10:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/engineering-operations/infrastructure-management/cloud-platforms/cloud-providers/</guid>
      <description>네이버 클라우드 플랫폼(NCP)과 AWS, Azure, Google Cloud Platform(GCP)의 주요 서비스를 비교하여 설명</description>
    </item>
    <item>
      <title>온프레미스(On-Premise)</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-fundamentals/cloud-vs-on-premise/on-premise/</link>
      <pubDate>Sun, 10 Nov 2024 10:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-fundamentals/cloud-vs-on-premise/on-premise/</guid>
      <description>On-Premise는 기업이 자체적으로 보유한 시설이나 건물에 IT 인프라를 구축하고 운영하는 방식을 의미한다.</description>
    </item>
    <item>
      <title>Cloud</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-fundamentals/cloud-vs-on-premise/cloud/</link>
      <pubDate>Sun, 10 Nov 2024 06:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-fundamentals/cloud-vs-on-premise/cloud/</guid>
      <description>클라우드 컴퓨팅은 컴퓨팅 리소스(서버, 스토리지, 데이터베이스, 네트워킹, 소프트웨어 등)를 인터넷을 통해 필요에 따라 제공하고 사용하는 기술</description>
    </item>
    <item>
      <title>Apache HTTP Server</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/access--network-entry/web-server/implementations/apache-http-server/</link>
      <pubDate>Mon, 21 Oct 2024 11:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/access--network-entry/web-server/implementations/apache-http-server/</guid>
      <description>Apache HTTP Server는 가장 널리 사용되는 오픈 소스 웹 서버 소프트웨어이다.</description>
    </item>
    <item>
      <title>Caddy</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/access--network-entry/web-server/implementations/caddy/</link>
      <pubDate>Mon, 21 Oct 2024 08:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/access--network-entry/web-server/implementations/caddy/</guid>
      <description>Caddy는 Go 언어로 작성된 현대적이고 강력한 오픈 소스 웹 서버이다.</description>
    </item>
    <item>
      <title>Nginx</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/access--network-entry/web-server/implementations/nginx/</link>
      <pubDate>Mon, 21 Oct 2024 08:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/access--network-entry/web-server/implementations/nginx/</guid>
      <description>Nginx는 고성능의 오픈 소스 웹 서버 소프트웨어로, 웹 서버, 리버스 프록시, 로드 밸런서 등 다양한 기능을 제공한다.</description>
    </item>
    <item>
      <title>API Gateway</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/service-integration/api-gateway/</link>
      <pubDate>Sun, 20 Oct 2024 09:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/service-integration/api-gateway/</guid>
      <description>API Gateway 는 마이크로서비스 아키텍처에서 핵심 라우터이자 진입점 역할을 수행한다. 요청의 인증, 라우팅, 로드 밸런싱, 변환, 모니터링 등을 통합적으로 처리하여 클라이언트와 백엔드 서비스 간의 결합도를 낮추고 보안/운영 효율성을 높인다.</description>
    </item>
    <item>
      <title>프록시(Proxy)</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/access--network-entry/proxy/</link>
      <pubDate>Sat, 19 Oct 2024 08:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/access--network-entry/proxy/</guid>
      <description>프록시 (Proxy) 는 클라이언트와 서버 사이에서 중개자 역할을 수행하는 서버로, 요청을 대신 처리하고 응답을 전달한다.  포워드 프록시 (Forward Proxy) 는 클라이언트를 보호하고, 리버스 프록시 (Reverse Proxy) 는 서버를 보호하며, 로드 밸런싱, 캐싱, 보안, SSL 종료 등의 기능을 제공한다.</description>
    </item>
    <item>
      <title>Sequential Consistency</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/consistency-models/strong/sequential-consistency/</link>
      <pubDate>Wed, 09 Oct 2024 08:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/consistency-models/strong/sequential-consistency/</guid>
      <description>Sequential Consistency 는 분산 시스템에서 연산이 실행된 순서를 유지하여, 모든 프로세스가 동일한 순서로 연산을 관찰하도록 보장하는 일관성 모델이다. 이는 시스템의 예측 가능성과 신뢰성을 높이지만, 구현 복잡성과 성능 저하를 초래할 수 있다.</description>
    </item>
    <item>
      <title>Linearizability</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/consistency-models/strong/linearizability/</link>
      <pubDate>Wed, 09 Oct 2024 08:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/consistency-models/strong/linearizability/</guid>
      <description>선형화 가능성은 분산 시스템에서 동시에 발생하는 작업들이 마치 단일 시스템에서 순차적으로 실행된 것처럼 보이게 하는 강력한 일관성 모델이다. 이는 모든 작업이 실시간 순서를 준수하면서 단일 순차적 순서대로 실행되는 것처럼 동작하도록 보장하여, 분산 환경에서도 마치 하나의 시스템처럼 일관된 상태를 유지한다.</description>
    </item>
    <item>
      <title>Causal Consistency</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/consistency-models/weak/causal-consistency/</link>
      <pubDate>Wed, 09 Oct 2024 08:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/consistency-models/weak/causal-consistency/</guid>
      <description>인과적 일관성은 분산 시스템에서 연산 간의 인과 관계를 유지하는 일관성 모델로, 관련된 연산은 동일한 순서로 보장하되, 독립적인 연산은 순서에 구애받지 않아 성능과 가용성을 향상시킨다.</description>
    </item>
    <item>
      <title>Eventual Consistency</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/consistency-models/weak/eventual-consistency/</link>
      <pubDate>Wed, 09 Oct 2024 05:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/consistency-models/weak/eventual-consistency/</guid>
      <description>Eventual Consistency 는 분산 시스템에서 데이터가 즉시 일관되지 않아도 시간이 지나면 모든 노드가 동일한 상태로 수렴함을 보장하는 일관성 모델이다. 이는 높은 가용성과 확장성을 지원하지만, 일시적인 데이터 불일치와 충돌 해결이 필요하다</description>
    </item>
    <item>
      <title>Strong Consistency</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/consistency-models/strong/</link>
      <pubDate>Wed, 09 Oct 2024 05:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/consistency-models/strong/</guid>
      <description>강한 일관성 (Strong Consistency) 은 분산 시스템에서 데이터 변경 시 모든 노드가 동시에 같은 데이터를 볼 수 있도록 보장하는 일관성 모델이다. 쓰기 작업이 완료되면 이후의 모든 읽기 작업은 즉시 최신 데이터를 반영하며, 이는 금융 시스템이나 중요한 트랜잭션에서 필수적이지만 성능과 가용성 측면에서 비용이 발생한다.</description>
    </item>
    <item>
      <title>Weak Consistency</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/consistency-models/weak/</link>
      <pubDate>Wed, 09 Oct 2024 05:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/consistency-models/weak/</guid>
      <description>약한 일관성 (Weak Consistency) 은 분산 시스템에서 데이터 일관성 모델 중 하나로, 데이터의 최신 상태를 즉시 보장하지 않으며, 일시적인 불일치 상태를 허용하는 모델입니다. 시스템의 가용성과 성능을 우선시하는 환경에서 유용하게 활용된다.</description>
    </item>
    <item>
      <title>캐시 (Cache)</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/data--state-management/cache/</link>
      <pubDate>Mon, 30 Sep 2024 13:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/data--state-management/cache/</guid>
      <description>캐시 (Cache) 는 자주 접근하는 데이터를 빠른 저장소에 임시 보관하여 시스템 성능을 향상시키는 하드웨어 또는 소프트웨어 구성 요소이다. CPU 캐시부터 웹 캐시까지 다양한 계층에서 활용되며, 지역성 원리를 기반으로 데이터 접근 속도를 대폭 개선한다.</description>
    </item>
  </channel>
</rss>
