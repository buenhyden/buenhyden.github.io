<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Deadlock-Prevention on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/deadlock-prevention/</link>
    <description>Recent content in Deadlock-Prevention on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.150.1</generator>
    <language>en</language>
    <lastBuildDate>Thu, 24 Oct 2024 15:22:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/deadlock-prevention/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Locking</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/</link>
      <pubDate>Thu, 24 Oct 2024 15:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/</guid>
      <description>락킹은 동시 트랜잭션이 같은 데이터를 안전하게 다루게 하는 메커니즘으로, 공유·배타·의도락 등 다양한 모드와 행·페이지·테이블 단위로 접근을 제어한다. 2PL 계열은 직렬성을 보장하지만 데드락과 대기 비용이 생기므로 MVCC나 낙관적 기법과 조합해 성능·일관성의 균형을 맞춘다. 분산 환경에서는 네트워크·타임 동기 문제를 추가로 고려해야 한다.</description>
    </item>
  </channel>
</rss>
