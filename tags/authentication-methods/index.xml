<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Authentication-Methods on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/authentication-methods/</link>
    <description>Recent content in Authentication-Methods on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.150.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 03 Apr 2025 14:02:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/authentication-methods/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OAuth 2.0 vs. OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-layer/protocols/identity--directory--aaa/federation--authorization/oauth-2.x/oauth-20-vs-openid-connect/</link>
      <pubDate>Thu, 03 Apr 2025 14:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-layer/protocols/identity--directory--aaa/federation--authorization/oauth-2.x/oauth-20-vs-openid-connect/</guid>
      <description>OAuth 2.0과 OpenID Connect(OIDC)는 사용자 인증 및 권한 부여를 처리하는 데 사용되는 프로토콜이지만, 목적과 기능에서 명확한 차이가 있다.</description>
    </item>
    <item>
      <title>JWT vs. OAuth 2.0</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-formats/jwt/jwt-vs-oauth-20/</link>
      <pubDate>Thu, 03 Apr 2025 07:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-formats/jwt/jwt-vs-oauth-20/</guid>
      <description>JWT는 당사자 간에 안전하게 정보를 JSON 객체로 전송하기 위한 방식이다. 주로 인증(Authentication)과 정보 교환을 위해 사용된다. OAuth 2.0은 사용자가 자신의 정보에 대한 접근 권한을 제3자 애플리케이션에 부여할 수 있게 해주는 인가(Authorization) 프레임워크이다. 사용자가 비밀번호를 공유하지 않고도 제한된 접근 권한을 제3자에게 제공할 수 있다.</description>
    </item>
    <item>
      <title>Token Authentication vs. SAML</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-based-authentication-vs-saml/</link>
      <pubDate>Thu, 03 Apr 2025 07:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-based-authentication-vs-saml/</guid>
      <description>토큰 인증은 사용자의 자격 증명(보통 사용자 이름과 비밀번호)을 검증한 후, 서버가 발급한 토큰을 통해 이후 요청에서 인증을 처리하는 방식이다. SAML은 서로 다른 도메인 간에 인증 및 권한 부여 데이터를 교환하기 위한 XML 기반 표준이다.</description>
    </item>
    <item>
      <title>Token Authentication vs. JWT</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-based-authentication-vs-jwt/</link>
      <pubDate>Thu, 03 Apr 2025 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-based-authentication-vs-jwt/</guid>
      <description>토큰 인증은 사용자의 인증 정보를 검증한 후 서버가 고유한 토큰을 발급하고, 클라이언트가 이후 요청 시 이 토큰을 제시하여 자신을 인증하는 광범위한 인증 패러다임이다. JWT는 토큰 인증의 한 형태로, 정보를 안전하게 전송하기 위한 컴팩트하고 자체 포함적인(self-contained) JSON 객체이다.</description>
    </item>
    <item>
      <title>Token Authentication vs. OAuth</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-based-authentication-vs-oauth-20/</link>
      <pubDate>Thu, 03 Apr 2025 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-based-authentication-vs-oauth-20/</guid>
      <description>토큰 인증은 사용자의 자격 증명을 한 번만 확인한 후, 서버가 서명된 토큰을 발급하여 클라이언트가 이 토큰을 사용해 자신을 인증하도록 하는 것이다. OAuth 2.0의 핵심 아이디어는 사용자(리소스 소유자)가 비밀번호를 공유하지 않고도 제3자 애플리케이션(클라이언트)에게 자신의 데이터에 대한 특정 접근 권한을 부여할 수 있도록 하는 것이다.</description>
    </item>
    <item>
      <title>Token Authentication vs. OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-based-authentication-vs-openid-connect/</link>
      <pubDate>Thu, 03 Apr 2025 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-based-authentication-vs-openid-connect/</guid>
      <description>토큰 인증은 사용자의 자격 증명(주로 사용자 이름과 비밀번호)을 검증한 후, 서버가 발급한 토큰을 통해 이후의 요청에서 인증을 수행하는 방식이다. OpenID Connect는 OAuth 2.0 프로토콜 위에 구축된 ID 계층으로, 클라이언트가 사용자의 신원을 확인하고 기본적인 프로필 정보를 얻을 수 있게 하는 인증 프로토콜이다.</description>
    </item>
    <item>
      <title>Token Authentication vs. Cookie-Based Auth</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-based-authentication-vs-cookie-based-auth/</link>
      <pubDate>Thu, 03 Apr 2025 07:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-based-authentication-vs-cookie-based-auth/</guid>
      <description>토큰 인증은 서버가 사용자의 인증 정보를 확인한 후 서명된 토큰을 발급하고, 클라이언트가 이 토큰을 이후의 요청에 포함시켜 자신을 인증하는 방식이다. 쿠키 기반 인증은 서버가 사용자 인증 후 세션 ID를 포함한 쿠키를 클라이언트에 전송하고, 클라이언트가 이 쿠키를 모든 요청에 자동으로 포함시켜 인증하는 방식이다.</description>
    </item>
    <item>
      <title>SAML vs. OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-layer/protocols/identity--directory--aaa/federation--authorization/saml-2.0/saml-vs-openid-connect/</link>
      <pubDate>Thu, 03 Apr 2025 05:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-layer/protocols/identity--directory--aaa/federation--authorization/saml-2.0/saml-vs-openid-connect/</guid>
      <description>SAML(Security Assertion Markup Language)과 OpenID Connect는 모두 사용자 인증 및 권한 부여를 위한 프로토콜</description>
    </item>
    <item>
      <title>jwt vs. Basic Authentication</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-formats/jwt/jwt-vs-basic-authentication/</link>
      <pubDate>Wed, 02 Apr 2025 02:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-formats/jwt/jwt-vs-basic-authentication/</guid>
      <description>JWT는 JSON 형식의 토큰을 사용하여 사용자 정보와 서명을 포함하는 상태 비저장(stateless) 인증 방식으로 토큰 자체에 모든 인증 정보가 포함된다. Basic Authentication는 사용자 ID와 비밀번호를 Base64로 인코딩하여 HTTP 헤더에 전송하는 상태 비저장 방식으로 매 요청마다 자격 증명을 전송한다.</description>
    </item>
    <item>
      <title>Session-Based Auth vs. Basic Authentication</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/authentication-implementation/session-based-authentication/session-based-auth-vs-basic-authentication/</link>
      <pubDate>Wed, 02 Apr 2025 02:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/authentication-implementation/session-based-authentication/session-based-auth-vs-basic-authentication/</guid>
      <description>기본 인증은 HTTP 프로토콜에 내장된 가장 단순한 인증 방식 중 하나이다. 세션 기반 인증은 서버 측에서 사용자의 상태를 유지하는 인증 방식이다.</description>
    </item>
    <item>
      <title>Cookie-Based Auth vs. Basic Authentication</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/authentication-implementation/cookie-based-authentication/cookie-based-auth-vs-basic-authentication/</link>
      <pubDate>Wed, 02 Apr 2025 02:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/authentication-implementation/cookie-based-authentication/cookie-based-auth-vs-basic-authentication/</guid>
      <description>웹 애플리케이션에서 사용자 인증을 처리하는 두 가지 주요 방식</description>
    </item>
    <item>
      <title>jwt vs. Cookie-Based Auth</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-formats/jwt/jwt-vs-cookie-based-auth/</link>
      <pubDate>Wed, 02 Apr 2025 02:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-formats/jwt/jwt-vs-cookie-based-auth/</guid>
      <description>JWT는 Stateless한 인증이 필요한 경우(예: API 중심 애플리케이션, 마이크로서비스)에 적합하다. Cookie 기반 인증은 전통적인 웹 애플리케이션에서 더 적합하며, 특히 보안 요구 사항이 높은 경우 유리한다.</description>
    </item>
    <item>
      <title>jwt vs. Session-based Auth</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-formats/jwt/jwt-vs-session-based-auth/</link>
      <pubDate>Wed, 02 Apr 2025 02:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-formats/jwt/jwt-vs-session-based-auth/</guid>
      <description>JWT는 Stateless가 필요한 API 중심 애플리케이션이나 마이크로서비스에 적합하다. 토큰을 안전하게 저장하려면 HttpOnly 쿠키 사용을 권장한다.세션 기반 인증은 보안이 우선시되는 금융 서비스나 소규모 웹 앱에서 유리하다.  Redis와 같은 인메모리 DB로 세션을 관리하면 확장성을 개선할 수 있다.</description>
    </item>
    <item>
      <title>Token Authentication vs. Session-based Auth</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-based-authentication-vs-session-based-auth/</link>
      <pubDate>Wed, 02 Apr 2025 02:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-based-authentication-vs-session-based-auth/</guid>
      <description>세션 기반 인증은 전통적인 인증 방식으로, 서버가 사용자의 로그인 상태를 세션으로 유지하는 방식이다. 토큰 인증은 클라이언트에게 서명된 토큰을 발급하여 인증하는 방식이다.</description>
    </item>
    <item>
      <title>JWT vs. OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-formats/jwt/jwt-vs-openid-connect/</link>
      <pubDate>Tue, 01 Apr 2025 14:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-formats/jwt/jwt-vs-openid-connect/</guid>
      <description>JWT는 당사자 간에 안전하게 정보를 전송하기 위한 개방형 표준(RFC 7519)으로, 컴팩트하고 자체 포함적인 방식으로 정보를 안전하게 전달한다. OpenID Connect는 OAuth 2.0 프로토콜 위에 구축된 인증 계층으로, 클라이언트가 사용자의 신원을 확인하고 기본적인 프로필 정보를 얻을 수 있도록 하는 표준이다.</description>
    </item>
    <item>
      <title>SAML vs. OAuth 2.0</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-layer/protocols/identity--directory--aaa/federation--authorization/saml-2.0/saml-vs-oauth-20/</link>
      <pubDate>Tue, 11 Mar 2025 13:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-layer/protocols/identity--directory--aaa/federation--authorization/saml-2.0/saml-vs-oauth-20/</guid>
      <description>SAML의 주요 목적은 신원 공급자(Identity Provider, IdP)와 서비스 공급자(Service Provider, SP) 사이에 인증 정보를 교환할 수 있는 표준화된 방법을 제공하는 것이고 OAuth 2.0의 주요 목적은 사용자가 자신의 자격 증명을 공유하지 않고도 타사 애플리케이션에 자신의 데이터에 대한 제한된 접근 권한을 부여할 수 있도록 하는 것이다.</description>
    </item>
    <item>
      <title>Session-Based Auth vs. Cookie-Based Auth</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/authentication-implementation/session-based-authentication/session-based-auth-vs-cookie-based-auth/</link>
      <pubDate>Tue, 11 Mar 2025 13:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/authentication-implementation/session-based-authentication/session-based-auth-vs-cookie-based-auth/</guid>
      <description>세션 기반 인증은 서버 측에 사용자 상태 정보를 저장하고, 클라이언트에는 세션을 식별하는 고유 ID만 제공하는 방식이다. 쿠키 기반 인증은 HTTP 쿠키를 사용하여 사용자의 인증 상태를 유지하는 방식이다.</description>
    </item>
    <item>
      <title>OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-layer/protocols/identity--directory--aaa/federation--authorization/openid-connect/</link>
      <pubDate>Tue, 11 Mar 2025 13:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-layer/protocols/identity--directory--aaa/federation--authorization/openid-connect/</guid>
      <description>OpenID Connect(OIDC)는 웹 기반 애플리케이션과 서비스를 위한 현대적인 인증 프로토콜로, OAuth 2.0 프레임워크를 기반으로 구축되었다. 이 프로토콜은 사용자의 신원을 검증하고, 안전하게 정보를 교환하는 표준화된 방법을 제공한다.</description>
    </item>
    <item>
      <title>SAML</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-layer/protocols/identity--directory--aaa/federation--authorization/saml-2.0/</link>
      <pubDate>Tue, 11 Mar 2025 13:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-layer/protocols/identity--directory--aaa/federation--authorization/saml-2.0/</guid>
      <description>SAML(Security Assertion Markup Language)은 기업과 조직에서 단일 로그인(SSO, Single Sign-On)과 신원 연합(Identity Federation)을 구현하기 위한 XML 기반 표준 프레임워크이다.</description>
    </item>
    <item>
      <title>Token-Based Authentication</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/</link>
      <pubDate>Tue, 11 Mar 2025 13:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/</guid>
      <description>토큰 기반 인증은 사용자가 자신의 자격 증명(일반적으로 사용자 이름과 비밀번호)을 인증 서버에 제출하면, 서버가 이를 검증한 후 디지털 토큰을 발급하는 방식이다.</description>
    </item>
    <item>
      <title>OIDC vs. OpenID</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-layer/protocols/identity--directory--aaa/federation--authorization/openid-connect/openid-connect-vs-openid/</link>
      <pubDate>Tue, 11 Mar 2025 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-layer/protocols/identity--directory--aaa/federation--authorization/openid-connect/openid-connect-vs-openid/</guid>
      <description>OpenID와 OpenID Connect는 사용자 인증을 위한 중요한 표준이다.</description>
    </item>
    <item>
      <title>Session-based Authentication</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/authentication-implementation/session-based-authentication/</link>
      <pubDate>Sun, 09 Mar 2025 15:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/authentication-implementation/session-based-authentication/</guid>
      <description>세션 기반 인증은 서버 측에서 사용자의 상태를 유지하는 인증 방식이다.</description>
    </item>
    <item>
      <title>Cookie-Based Authentication</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/authentication-implementation/cookie-based-authentication/</link>
      <pubDate>Sun, 09 Mar 2025 15:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/authentication-implementation/cookie-based-authentication/</guid>
      <description>HTTP 프로토콜의 무상태(stateless) 특성을 극복하고 사용자의 로그인 상태를 유지하기 위한 메커니즘으로, 오랜 시간 동안 웹의 핵심 인증 기술로 자리잡아 왔다.</description>
    </item>
    <item>
      <title>RFC 6749</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-layer/protocols/identity--directory--aaa/federation--authorization/oauth-2.x/rfc-6749/</link>
      <pubDate>Fri, 28 Feb 2025 11:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-layer/protocols/identity--directory--aaa/federation--authorization/oauth-2.x/rfc-6749/</guid>
      <description>RFC 6749는 OAuth 2.0 권한 부여 프레임워크(The OAuth 2.0 Authorization Framework)를 정의하는 인터넷 표준 문서이다.</description>
    </item>
    <item>
      <title>RFC 7519</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-formats/jwt/rfc-7519/</link>
      <pubDate>Thu, 06 Feb 2025 03:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/platform-development/backend-development/api-development/token-based-authentication/token-formats/jwt/rfc-7519/</guid>
      <description>2015년 5월에 Internet Engineering Task Force(IETF)에 의해 발행된 이 문서는 JWT의 구조, 형식, 서명 방법, 암호화 방법 등을 상세히 정의하고 있다.</description>
    </item>
    <item>
      <title>Authentication</title>
      <link>https://buenhyden.github.io/posts/security--compliance/identity--compliance/identity--access-management/authentication/</link>
      <pubDate>Wed, 06 Nov 2024 05:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security--compliance/identity--compliance/identity--access-management/authentication/</guid>
      <description>API 인증은 API를 사용하는 클라이언트의 신원을 확인하고 승인된 사용자만 API 리소스에 접근할 수 있도록 보장하는 핵심 보안 메커니즘이다.</description>
    </item>
  </channel>
</rss>
