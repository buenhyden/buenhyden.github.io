<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Stream-Processing on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/stream-processing/</link>
    <description>Recent content in Stream-Processing on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.151.2</generator>
    <language>en</language>
    <lastBuildDate>Mon, 14 Jul 2025 04:16:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/stream-processing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Processing Types</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-architecture/processing-paradigms/</link>
      <pubDate>Mon, 14 Jul 2025 04:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-architecture/processing-paradigms/</guid>
      <description>Batch Processing(배치 처리), Hybrid Processing(하이브리드 처리), Stream Processing(스트림 처리) 은 데이터 처리의 대표적인 방식이다. 배치 처리는 대용량 데이터를 일괄 처리하며, 스트림 처리는 실시간 데이터를 즉시 처리한다. 하이브리드 처리는 두 방식을 결합해 실시간성과 정확성을 동시에 추구한다.</description>
    </item>
    <item>
      <title>Stream Processing</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-architecture/processing-paradigms/stream-processing/</link>
      <pubDate>Sat, 12 Jul 2025 06:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-architecture/processing-paradigms/stream-processing/</guid>
      <description>스트림 처리 (Stream Processing) 는 변화하는 데이터를 실시간으로 연속적으로 분석·처리하는 기술로, 이벤트 기반 시스템에서 높은 처리량·낮은 지연을 달성한다. 실시간 모니터링, 이상탐지, 알림, 데이터 파이프라인 방식으로 활용되며, Kafka, Flink, Spark Streaming 등이 주요 구현체이다.</description>
    </item>
    <item>
      <title>Lambda Architecture</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-architecture/data-processing-architecture/lambda-architecture/</link>
      <pubDate>Sun, 06 Jul 2025 10:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-architecture/data-processing-architecture/lambda-architecture/</guid>
      <description>Lambda Architecture 는 배치 처리 (Batch Processing) 와 실시간 스트림 처리 (Real-time Stream Processing) 를 결합하여 대용량 데이터를 효과적으로 처리하는 하이브리드 아키텍처 패턴이다. 배치 레이어 (Batch Layer), 스피드 레이어 (Speed Layer), 서빙 레이어 (Serving Layer) 세 계층으로 구성되어 높은 처리량과 낮은 지연시간을 동시에 제공한다.</description>
    </item>
  </channel>
</rss>
