<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Structural on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/structural/</link>
    <description>Recent content in Structural on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.9</generator>
    <language>en</language>
    <lastBuildDate>Fri, 27 Sep 2024 11:26:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/structural/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MVC pattern vs MVVC pattern vs MVP pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/layered-architecture/mvc/mvc-pattern-vs-mvvc-pattern-vs-mvp-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 01:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/layered-architecture/mvc/mvc-pattern-vs-mvvc-pattern-vs-mvp-pattern/</guid>
      <description>MVC, MVP, MVVM 아키텍처 패턴은 모두 **관심사 분리(SoC)** 원칙에 기반하며, 각기 다른 방식으로 UI 로직과 비즈니스 로직을 분리한다.</description>
    </item>
    <item>
      <title>Structural</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/</link>
      <pubDate>Wed, 25 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/</guid>
      <description>&lt;h2 id=&#34;structural&#34;&gt;Structural&lt;/h2&gt;
&lt;p&gt;아래는 &amp;ldquo;Structural(구조 패턴)&amp;rdquo; 에 대한 체계적인 조사, 분석 및 정리 결과입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-주제에-대한-태그&#34;&gt;1. 주제에 대한 태그&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Structural-Pattern&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Object-Composition&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Class-Relationship&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GoF-Design-Patterns&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-태그-영문---사용&#34;&gt;1. 태그 (영문, &amp;lsquo;-&amp;rsquo; 사용)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Structural-Patterns&lt;/li&gt;
&lt;li&gt;Object-Composition&lt;/li&gt;
&lt;li&gt;Interface-Adapter&lt;/li&gt;
&lt;li&gt;GoF-Structural&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-카테고리-계층-구조-분석&#34;&gt;2. 카테고리 계층 구조 분석&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Structural&amp;rdquo; 패턴은 &lt;code&gt;Software Design Patterns &amp;gt; GoF &amp;gt; Structural&lt;/code&gt; 하위에 적합합니다.&lt;br&gt;
&lt;strong&gt;근거&lt;/strong&gt;: GoF 분류 체계에서는 &lt;strong&gt;Structural Patterns&lt;/strong&gt;가 객체와 클래스 간의 조합과 관계에 초점을 맞춘 별도의 범주로 정의되며, Adapter, Facade, Bridge, Composite, Decorator, Proxy, Flyweight 등이 여기에 속합니다 (&lt;a href=&#34;https://www.geeksforgeeks.org/system-design/gang-of-four-gof-design-patterns/?utm_source=chatgpt.com&#34; title=&#34;Gang of Four (GOF) Design Patterns - GeeksforGeeks&#34;&gt;geeksforgeeks.org&lt;/a&gt;, &lt;a href=&#34;https://refactoring.guru/design-patterns/go?utm_source=chatgpt.com&#34; title=&#34;Design Patterns in Go - Refactoring.Guru&#34;&gt;refactoring.guru&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Model-View-ViewModel Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/layered-architecture/mvvm/</link>
      <pubDate>Fri, 27 Sep 2024 11:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/layered-architecture/mvvm/</guid>
      <description>MVVM(Model-View-ViewModel) 패턴은 소프트웨어 아키텍처 패턴 중 하나로, 사용자 인터페이스(UI)와 비즈니스 로직을 효과적으로 분리하여 코드의 유지보수성과 재사용성을 향상시키는 데 중점을 둔다.</description>
    </item>
    <item>
      <title>Model–view–presenter Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/layered-architecture/mvp/</link>
      <pubDate>Fri, 27 Sep 2024 09:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/layered-architecture/mvp/</guid>
      <description>Model-View-Presenter(MVP) 패턴은 사용자 인터페이스 개발을 위한 아키텍처 패턴으로, **관심사 분리** 원칙에 기반해 UI 로직과 비즈니스 로직을 분리한다.</description>
    </item>
    <item>
      <title>Component-Based</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/component-based-architecture/</link>
      <pubDate>Thu, 26 Sep 2024 11:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/component-based-architecture/</guid>
      <description>애플리케이션을 독립적이고 재사용 가능한 단위인 &amp;#39;컴포넌트&amp;#39;로 구성하는 방식을 말한다.</description>
    </item>
    <item>
      <title>Flyweight Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/flyweight-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 08:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/flyweight-pattern/</guid>
      <description>플라이웨이트 패턴은 재사용 가능한 객체 인스턴스를 공유하여 메모리 사용량을 최소화하는 구조 패턴이다.  간단히 말하면 캐시(Cache) 개념을 코드로 패턴화한 것으로, 자주 변화하는 속성(extrinsic)과 변하지 않는 속성(intrinsic)을 분리하고 변하지 않는 속성을 캐시하여 재사용함으로써 메모리 사용을 줄이는 방식이다.</description>
    </item>
    <item>
      <title>Composite Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/composite-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 08:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/composite-pattern/</guid>
      <description>Composite Pattern은 구조적 디자인 패턴 중 하나로, 객체들을 트리 구조로 구성하여 부분-전체 계층을 표현하는 패턴이다.</description>
    </item>
    <item>
      <title>Decorator Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/decorator-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/decorator-pattern/</guid>
      <description>객체에 동적으로 새로운 책임을 추가할 수 있게 해주는 구조적 디자인 패턴</description>
    </item>
    <item>
      <title>Adapter Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/adapter-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/adapter-pattern/</guid>
      <description>호환되지 않는 인터페이스를 가진 객체들이 협력할 수 있도록 하는 구조적 디자인 패턴</description>
    </item>
  </channel>
</rss>
