<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Structural on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/structural/</link>
    <description>Recent content in Structural on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Sun, 27 Apr 2025 11:36:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/structural/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MVC pattern vs MVVC pattern vs MVP pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/layered-architecture/mvc/mvc-pattern-vs-mvvc-pattern-vs-mvp-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 01:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/layered-architecture/mvc/mvc-pattern-vs-mvvc-pattern-vs-mvp-pattern/</guid>
      <description>MVC, MVP, MVVM 아키텍처 패턴은 모두 **관심사 분리(SoC)** 원칙에 기반하며, 각기 다른 방식으로 UI 로직과 비즈니스 로직을 분리한다.</description>
    </item>
    <item>
      <title>Structural</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/</link>
      <pubDate>Wed, 25 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/</guid>
      <description>GoF의 Structural Patterns 는 **객체와 클래스 간의 관계를 구성하고 조합하는 설계 기법**으로, 유연성과 유지보수성을 강화한다. 이 패턴들은 Adapter 를 통한 인터페이스 호환, Bridge 를 통한 추상화 구현 분리, Composite 를 통한 트리 구조 관리, Decorator 로 기능 동적 추가, Facade 를 통한 서브시스템 단순화, Flyweight 로 메모리 최적화, Proxy 로 접근 제어 등을 통해 구조적 문제를 해결한다.</description>
    </item>
    <item>
      <title>Structural</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/</link>
      <pubDate>Sun, 27 Apr 2025 11:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/</guid>
      <description>Structural 아키텍처 스타일은 클래스, 객체, 모듈 간의 관계와 구조를 정의하여 시스템을 조직화하는 설계 접근법이다. 모듈화, 계층화, 재사용성을 통해 복잡성을 낮추고 확장성과 유지보수성을 향상시킨다.</description>
    </item>
    <item>
      <title>Model-View-ViewModel Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/layered-architecture/mvvm/</link>
      <pubDate>Fri, 27 Sep 2024 11:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/layered-architecture/mvvm/</guid>
      <description>MVVM(Model-View-ViewModel) 패턴은 소프트웨어 아키텍처 패턴 중 하나로, 사용자 인터페이스(UI)와 비즈니스 로직을 효과적으로 분리하여 코드의 유지보수성과 재사용성을 향상시키는 데 중점을 둔다.</description>
    </item>
    <item>
      <title>Model–view–presenter Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/layered-architecture/mvp/</link>
      <pubDate>Fri, 27 Sep 2024 09:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/layered-architecture/mvp/</guid>
      <description>Model-View-Presenter(MVP) 패턴은 사용자 인터페이스 개발을 위한 아키텍처 패턴으로, **관심사 분리** 원칙에 기반해 UI 로직과 비즈니스 로직을 분리한다.</description>
    </item>
    <item>
      <title>Component-Based Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/component-based-architecture/</link>
      <pubDate>Thu, 26 Sep 2024 11:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/component-based-architecture/</guid>
      <description>애플리케이션을 독립적이고 재사용 가능한 단위인 &amp;#39;컴포넌트&amp;#39;로 구성하는 방식을 말한다.</description>
    </item>
    <item>
      <title>Flyweight Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/flyweight-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 08:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/flyweight-pattern/</guid>
      <description>플라이웨이트 패턴은 대량의 유사한 객체들 간에 공통 상태를 공유하여 메모리 사용량을 최소화하는 구조적 디자인 패턴이다.  고유 상태 (Intrinsic State) 와 외부 상태 (Extrinsic State) 를 분리하여, 공유 가능한 고유 상태는 하나의 플라이웨이트 객체에 저장하고 외부 상태는 컨텍스트에서 관리함으로써 메모리 효율성과 성능을 향상시킨다.</description>
    </item>
    <item>
      <title>Bridge Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/bridge-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/bridge-pattern/</guid>
      <description>브리지 패턴 (Bridge Pattern) 은 추상화 (Abstraction) 와 구현 (Implementation) 을 분리하여 두 계층이 독립적으로 변화할 수 있도록 하는 구조적 디자인 패턴이다.  상속 대신 컴포지션을 사용하여 클래스 계층의 폭발적 증가를 방지하고, 런타임에 구현체를 변경할 수 있는 유연성을 제공한다. 크로스 플랫폼 애플리케이션, 데이터베이스 추상화 계층, API 게이트웨이 등에서 광범위하게 활용된다.</description>
    </item>
    <item>
      <title>Decorator Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/decorator-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/decorator-pattern/</guid>
      <description>Decorator Pattern 은 기존 객체에 동적으로 추가 기능을 부여하기 위해 사용되는 GoF 구조 패턴이다. 컴포넌트 인터페이스를 유지하면서 기능을 래핑하는 Decorator 클래스들을 체인 형태로 조합해, 상속 대신 조합을 통해 유연한 확장이 가능하게 한다. 주로 입력/출력 스트림, UI 요소, 로깅, 트랜잭션 처리 등에서 활용된다.</description>
    </item>
    <item>
      <title>Facade Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/facade-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/facade-pattern/</guid>
      <description>Facade Pattern(퍼사드 패턴) 은 복잡한 서브시스템의 인터페이스들을 통합하여 단순화된 단일 인터페이스를 제공하는 구조적 디자인 패턴이다. 클라이언트가 복잡한 시스템의 내부 구조를 알지 않고도 쉽게 사용할 수 있도록 하며, 시스템 간의 결합도를 낮추고 유지보수성을 향상시킨다.</description>
    </item>
    <item>
      <title>Adapter Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/adapter-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/adapter-pattern/</guid>
      <description>Adapter Pattern 은 호환되지 않는 인터페이스를 가진 클래스들이 함께 작동할 수 있도록 하는 구조적 설계 패턴이다. 기존 코드 수정 없이 레거시 시스템과 신규 시스템을 연결하는 브리지 역할을 하며, 인터페이스 변환을 통해 시스템 간 상호 운용성을 제공한다.</description>
    </item>
  </channel>
</rss>
