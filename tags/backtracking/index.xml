<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Backtracking</title><link>https://buenhyden.github.io/tags/backtracking/</link><description>Recent content in Backtracking on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 31 Oct 2024 05:23:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/backtracking/index.xml" rel="self" type="application/rss+xml"/><item><title>백트래킹 (Backtracking)</title><link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/backtracking/</link><pubDate>Thu, 31 Oct 2024 05:23:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/backtracking/</guid><description>
&lt;h2>백트래킹 (Backtracking)&lt;/h2>&lt;p>백트래킹은 &amp;lsquo;되돌아가기&amp;rsquo;라는 의미를 가지고 있다.&lt;br>
백트래킹은 가능한 모든 방법을 탐색하면서 문제를 해결하는 알고리즘으로, 현재의 선택이 잘못되었다고 판단되면 이전 단계로 돌아가서 다른 선택을 시도한다.&lt;br>
이 알고리즘은 문제의 해결책을 찾기 위해 가능한 모든 경우의 수를 체계적으로 탐색하는 방법이다.&lt;/p>
&lt;p>백트래킹의 핵심 아이디어는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>해결책을 찾아가는 과정에서 여러 선택지를 순차적으로 시도한다.&lt;/li>
&lt;li>현재의 선택이 해결책으로 이어질 가능성이 없다고 판단되면, 이전 단계로 돌아가 다른 선택지를 시도한다.&lt;/li>
&lt;li>이 과정을 반복하여 최종적으로 해결책을 찾거나, 모든 가능성을 탐색한다.&lt;/li>
&lt;/ol>
&lt;p>백트래킹은 단순한 완전 탐색(Exhaustive Search)과는 다르다.&lt;br>
백트래킹은 현재의 선택이 유망한지(promising) 판단하여, 유망하지 않다면 더 이상 그 방향으로 탐색하지 않고 이전 단계로 돌아간다. 이를 &amp;lsquo;가지치기(pruning)&amp;lsquo;라고 한다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Data%20Structure%20and%20Algorithm/Algorithm%20Design/Algorithm%20Design%20techniques/backtracking.png"
alt="Backtracking"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/introduction-to-backtracking-2/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/introduction-to-backtracking-2/&lt;/a> _&lt;/p>
&lt;ul>
&lt;li>그림에서 보여지는 것처럼,
&lt;ul>
&lt;li>&lt;strong>IS&lt;/strong>: 재귀 호출이 유효한 솔루션을 찾기 시작하는 &lt;strong>초기 상태&lt;/strong>를 나타낸다.&lt;/li>
&lt;li>&lt;strong>C&lt;/strong>: 재귀 호출에 대한 다른 &lt;strong>&lt;strong>체크포인트를&lt;/strong>&lt;/strong> 나타낸다.&lt;/li>
&lt;li>&lt;strong>TN&lt;/strong>: 더 이상 재귀 호출을 할 수 없는 &lt;strong>&lt;strong>터미널 노드를&lt;/strong>&lt;/strong> 나타낸다. 이러한 노드는 재귀의 기본 사례로 작용하며 이 상태에서 현재 솔루션이 유효한지 여부를 판별한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>각 체크포인트에서 프로그램은 몇 가지 결정을 내리고 다른 체크포인트로 이동하여 최종 노드에 도달한 후, 솔루션이 유효한지 여부를 확인한 후 프로그램은 체크포인트로 돌아가 다른 경로를 탐색하기 시작한다.&lt;br>
예를 들어 위의 이미지에서 &lt;strong>&lt;strong>TN1…TN5&lt;/strong>&lt;/strong> 는 솔루션이 허용되지 않는 최종 노드이고, &lt;strong>&lt;strong>TN6&lt;/strong>&lt;/strong> 은 유효한 솔루션을 찾은 상태이다.&lt;/li>
&lt;li>이미지 속 뒤로 가는 화살표는 동작의 후퇴를 보여주며, 어떤 체크포인트에서 변경한 내용을 되돌리는 것을 의미한다.&lt;/li>
&lt;/ul>
&lt;h3>백트래킹의 작동 원리&lt;/h3>&lt;p>백트래킹 알고리즘은 주로 깊이 우선 탐색(DFS) 방식을 사용하여 구현된다.&lt;br>
작동 원리는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>시작 상태에서 출발한다.&lt;/li>
&lt;li>현재 상태에서 가능한 모든 선택지를 확인한다.&lt;/li>
&lt;li>선택지 중 하나를 선택하여 다음 단계로 진행한다.&lt;/li>
&lt;li>선택한 경로가 해결책으로 이어질 가능성이 있는지 검사한다(이를 &amp;lsquo;유망성 검사&amp;rsquo;라고 한다).&lt;/li>
&lt;li>유망하지 않다고 판단되면, 이전 단계로 돌아가 다른 선택지를 시도한다(이를 &lt;strong>&amp;lsquo;백트래킹&amp;rsquo;&lt;/strong> 이라고 한다).&lt;/li>
&lt;li>해결책을 찾거나 모든 가능성을 탐색할 때까지 2-5 단계를 반복한다.&lt;/li>
&lt;/ol>
&lt;h3>백트래킹의 장단점&lt;/h3>&lt;p>장점:&lt;/p>
&lt;ol>
&lt;li>모든 가능한 해결책을 체계적으로 탐색할 수 있다.&lt;/li>
&lt;li>불필요한 탐색을 줄여 효율성을 높일 수 있다.&lt;/li>
&lt;li>복잡한 문제에 대해 해결책이 존재하는지 여부를 확실히 알 수 있다.&lt;/li>
&lt;/ol>
&lt;p>단점:&lt;/p>
&lt;ol>
&lt;li>최악의 경우 모든 경우의 수를 탐색해야 하므로 시간이 오래 걸릴 수 있다.&lt;/li>
&lt;li>문제의 크기가 커질수록 탐색해야 할 경우의 수가 기하급수적으로 증가할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>백트래킹 구현의 기본 구조&lt;/h3>&lt;p>백트래킹은 주로 재귀 함수를 사용하여 구현한다.&lt;br>
기본적인 구조는 다음과 같다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>function backtrack(현재 상태):
if 해결책을 찾았다면:
해결책 반환
for 가능한 각 선택지에 대해:
if 선택이 유망하다면:
선택을 적용
backtrack(새로운 상태)
선택을 취소 (백트래킹)&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이러한 구조를 통해 모든 가능한 경우를 체계적으로 탐색하면서, 불필요한 탐색을 줄일 수 있다.&lt;/p>
&lt;h3>좋은 알고리즘의 조건&lt;/h3>&lt;ol>
&lt;li>효과적인 가지치기 조건&lt;/li>
&lt;li>명확한 상태 표현&lt;/li>
&lt;li>효율적인 유망성 검사&lt;/li>
&lt;li>적절한 재귀 구조&lt;/li>
&lt;/ol>
&lt;h3>효율적인 구현을 위한 팁&lt;/h3>&lt;ol>
&lt;li>가지치기 조건을 최대한 일찍 적용&lt;/li>
&lt;li>상태를 효율적으로 표현하고 관리&lt;/li>
&lt;li>메모이제이션 기법 활용 고려&lt;/li>
&lt;li>반복문 대신 비트마스크 사용 검토&lt;/li>
&lt;/ol>
&lt;h3>실제 예시&lt;/h3>&lt;p>N-Queen 문제를 통해 백트래킹을 이해해보자.&lt;br>
이 문제는 N×N 크기의 체스판에 N개의 퀸을 서로 공격할 수 없게 배치하는 문제이다.&lt;/p>
&lt;p>다음은 4-Queen 문제를 해결하는 파이썬 코드:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">is_safe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">board&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">col&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 같은 열에 퀸이 있는지 검사&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">board&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">col&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 왼쪽 위 대각선 검사&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">zip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">col&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">board&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 오른쪽 위 대각선 검사&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">zip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">col&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">board&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">solve_n_queens&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">backtrack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">board&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 모든 퀸을 배치했다면 성공&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">row&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 현재 행의 각 열에 퀸을 놓아보기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">col&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">is_safe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">board&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">row&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">col&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 퀸을 배치&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">board&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">col&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 다음 행으로 진행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">backtrack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">board&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">row&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 실패하면 퀸을 제거(백트래킹)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">board&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">col&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 체스판 초기화&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">board&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)]&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">backtrack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">board&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">board&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 사용 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">solution&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">solve_n_queens&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">row&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">solution&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이 코드에서 백트래킹의 핵심 요소들을 볼 수 있다:&lt;/p>
&lt;ul>
&lt;li>선택: 각 행에서 퀸을 놓을 열을 선택한다.&lt;/li>
&lt;li>제약 조건 검사: is_safe 함수로 퀸이 서로 공격할 수 없는 위치인지 확인한다.&lt;/li>
&lt;li>백트래킹: 현재 선택이 해결책으로 이어지지 않으면 퀸을 제거하고 다른 위치를 시도한다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>