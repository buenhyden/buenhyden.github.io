<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>System-Bottleneck on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/system-bottleneck/</link>
    <description>Recent content in System-Bottleneck on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.150.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 20 May 2025 14:48:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/system-bottleneck/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Livelock</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/concurrency-problems/livelock/</link>
      <pubDate>Tue, 20 May 2025 14:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/concurrency-problems/livelock/</guid>
      <description>라이브락(Livelock)은 둘 이상의 스레드나 프로세스가 서로 상태 변화에 반응해 계속 동작하지만, 실제 작업은 전혀 진전되지 않는 동시성 문제. 데드락과 달리 블로킹 없이 실행되나 결과는 없음. 재시도 제한, 랜덤 백오프 등이 해결책.</description>
    </item>
  </channel>
</rss>
