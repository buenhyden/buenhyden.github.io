<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Migration-Strategies on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/migration-strategies/</link>
    <description>Recent content in Migration-Strategies on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Apr 2025 15:17:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/migration-strategies/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Circuit Breaker</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-recovery/retry-patterns/circuit-breaker/circuit-breaker/</link>
      <pubDate>Tue, 01 Apr 2025 15:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-recovery/retry-patterns/circuit-breaker/circuit-breaker/</guid>
      <description>소프트웨어 서킷 브레이커는 장애가 발생한 서비스에 대한 호출을 일시적으로 중단하여 시스템 전체의 안정성을 보호한다.</description>
    </item>
    <item>
      <title>Backpressure</title>
      <link>https://buenhyden.github.io/posts/programming-languages/programming-paradigms/concurrency-programming/async-programming-patterns/backpressure-management/backpressure/backpressure/</link>
      <pubDate>Tue, 01 Apr 2025 15:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/programming-paradigms/concurrency-programming/async-programming-patterns/backpressure-management/backpressure/backpressure/</guid>
      <description>**Backpressure**는 데이터 처리 시스템에서 수신 측이 송신 측에게 자신의 처리 용량을 알려 데이터 흐름을 제어하는 메커니즘이다.</description>
    </item>
    <item>
      <title>Graceful Degradation</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/service-continuity/graceful-degradation/</link>
      <pubDate>Tue, 01 Apr 2025 15:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/service-continuity/graceful-degradation/</guid>
      <description>그레이스풀 디그레이데이션은 시스템의 일부 구성 요소나 기능이 사용 불가능해도 기본 기능을 계속 유지할 수 있도록 하는 설계 원칙이다.</description>
    </item>
  </channel>
</rss>
