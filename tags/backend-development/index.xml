<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Backend-Development on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/backend-development/</link>
    <description>Recent content in Backend-Development on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Mon, 14 Apr 2025 07:13:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/backend-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>API Styles</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/</link>
      <pubDate>Wed, 26 Feb 2025 06:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/</guid>
      <description>API 스타일은 소프트웨어 아키텍처에서 중요한 설계 요소로, 다양한 시스템과 장치가 서로 쉽게 통신할 수 있도록 디지털 방식으로 연결하는 역할을 한다.</description>
    </item>
    <item>
      <title>Backend Development</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-development/backend-development/</link>
      <pubDate>Thu, 19 Sep 2024 01:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-development/backend-development/</guid>
      <description>백엔드 개발은 웹 애플리케이션의 서버 측 로직 및 데이터 처리를 담당하는 영역입니다. 이 섹션에서는 DNS, 웹 서버, API 설계, 이벤트 처리 시스템 등 백엔드 개발의 핵심 기술과 개념을 다룹니다. RESTful API, GraphQL 등 다양한 API 설계 방식과 인증, 권한 관리, 성능 최적화 등 실제 개발에 필요한 주제를 포함합니다. 이벤트 기반 아키텍처, 메시지 브로커, 검색 엔진 통합 등 현대적인 백엔드 시스템 구성에 필요한 지식도 제공합니다.</description>
    </item>
    <item>
      <title>API Design and Implementation</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/</link>
      <pubDate>Sat, 19 Oct 2024 17:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/</guid>
      <description>소프트웨어 애플리케이션 간의 통신을 가능하게 하는 중요한 도구</description>
    </item>
    <item>
      <title>API Performance</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-quality-and-performance/performance-considerations/api-performance/</link>
      <pubDate>Wed, 26 Feb 2025 06:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-quality-and-performance/performance-considerations/api-performance/</guid>
      <description>API 성능은 백엔드 시스템 설계에서 핵심적인 요소로, 최종 사용자 경험과 시스템 효율성에 직접적인 영향을 미친다.</description>
    </item>
    <item>
      <title>JSON vs. XML vs. Protobuf vs. MessagePack vs. Parquet</title>
      <link>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/data-exchange/json-vs-xml-vs-protobuf-vs-messagepack-vs-parquet/</link>
      <pubDate>Sat, 26 Oct 2024 11:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/data-exchange/json-vs-xml-vs-protobuf-vs-messagepack-vs-parquet/</guid>
      <description>데이터 직렬화 형식은 애플리케이션 간 데이터 교환의 핵심 요소이다.</description>
    </item>
    <item>
      <title>Real-time APIs</title>
      <link>https://buenhyden.github.io/posts/networking-and-communication/fundamentals/real-time-communication/</link>
      <pubDate>Fri, 31 Jan 2025 15:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-and-communication/fundamentals/real-time-communication/</guid>
      <description>실시간 API(Real-time API)는 클라이언트와 서버 간에 지속적인 연결을 유지하면서 데이터가 생성되거나 변경되는 즉시 자동으로 전송하는 API이다.</description>
    </item>
    <item>
      <title>Kafka vs RabbitMQ</title>
      <link>https://buenhyden.github.io/posts/tools-reference/communication-technologies/message-brokers/apache-kafka/kafka-vs-rabbitmq/</link>
      <pubDate>Tue, 22 Oct 2024 11:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/communication-technologies/message-brokers/apache-kafka/kafka-vs-rabbitmq/</guid>
      <description>Kafka와 RabbitMQ는 각각 고유한 강점을 가진 메시지 브로커 시스템이다. Kafka는 대용량 데이터 스트림 처리와 내구성에 탁월하며, RabbitMQ는 유연한 라우팅과 즉각적인 메시지 전달에 뛰어나다.</description>
    </item>
    <item>
      <title>Redis와 Valkey</title>
      <link>https://buenhyden.github.io/posts/tools-reference/database-systems/nosql-databases/key-value-stores/redis%EC%99%80-valkey/</link>
      <pubDate>Tue, 22 Oct 2024 01:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/database-systems/nosql-databases/key-value-stores/redis%EC%99%80-valkey/</guid>
      <description>Redis와 Valkey 모두 인메모리 데이터베이스로, 빠른 읽기/쓰기 성능을 제공하나, Redis의 라이선스 정책 변경으로 인해 Valkey가 fork되어 새로운 프로젝트가 되었다.</description>
    </item>
    <item>
      <title>Server-Sent Events vs. Webhook</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/server-sent-events/server-sent-events-vs-webhook/</link>
      <pubDate>Sat, 08 Mar 2025 06:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/server-sent-events/server-sent-events-vs-webhook/</guid>
      <description>Webhook과 Server-Sent Events(SSE)는 실시간 데이터 전송을 위한 웹 기술이다.</description>
    </item>
    <item>
      <title>Web Application Server (WAS) vs. Web Server</title>
      <link>https://buenhyden.github.io/posts/system-design/system-components/application-and-execution-core/web-application-servers/web-application-server-vs-web-server/</link>
      <pubDate>Tue, 22 Oct 2024 07:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/system-components/application-and-execution-core/web-application-servers/web-application-server-vs-web-server/</guid>
      <description>Web Application Server와 Web Server 비교 분석한다.</description>
    </item>
    <item>
      <title>Full-Text Search</title>
      <link>https://buenhyden.github.io/posts/system-design/system-components/application-and-execution-core/search-engines/search-engine-fundamentals/full-text-search/</link>
      <pubDate>Mon, 14 Apr 2025 07:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/system-components/application-and-execution-core/search-engines/search-engine-fundamentals/full-text-search/</guid>
      <description>전문 검색이란 **대량의 비정형 텍스트 데이터**에서 특정 단어/구문을 효율적으로 찾아 결과를 **관련성 순으로 정렬**하는 기술이다. 데이터베이스의 단순 패턴 매칭과 달리 자연어 처리(NLP) 기법을 활용해 의미와 맥락을 고려한다.</description>
    </item>
    <item>
      <title>FCM</title>
      <link>https://buenhyden.github.io/posts/tools-reference/communication-technologies/api-technologies/push-notification-technologies/fcm/</link>
      <pubDate>Fri, 04 Apr 2025 08:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/communication-technologies/api-technologies/push-notification-technologies/fcm/</guid>
      <description>Google에서 제공하는 크로스 플랫폼 메시징 솔루션으로, 안정적이고 효율적으로 메시지를 전송할 수 있는 서비스이다</description>
    </item>
    <item>
      <title>OAuth 2.0 vs. OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/oauth/oauth-20-vs-openid-connect/</link>
      <pubDate>Thu, 03 Apr 2025 14:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/oauth/oauth-20-vs-openid-connect/</guid>
      <description>OAuth 2.0과 OpenID Connect(OIDC)는 사용자 인증 및 권한 부여를 처리하는 데 사용되는 프로토콜이지만, 목적과 기능에서 명확한 차이가 있다.</description>
    </item>
    <item>
      <title>JWT vs. OAuth 2.0</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-oauth-20/</link>
      <pubDate>Thu, 03 Apr 2025 07:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-oauth-20/</guid>
      <description>JWT는 당사자 간에 안전하게 정보를 JSON 객체로 전송하기 위한 방식이다. 주로 인증(Authentication)과 정보 교환을 위해 사용된다. OAuth 2.0은 사용자가 자신의 정보에 대한 접근 권한을 제3자 애플리케이션에 부여할 수 있게 해주는 인가(Authorization) 프레임워크이다. 사용자가 비밀번호를 공유하지 않고도 제한된 접근 권한을 제3자에게 제공할 수 있다.</description>
    </item>
    <item>
      <title>Token Authentication vs. SAML</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-saml/</link>
      <pubDate>Thu, 03 Apr 2025 07:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-saml/</guid>
      <description>토큰 인증은 사용자의 자격 증명(보통 사용자 이름과 비밀번호)을 검증한 후, 서버가 발급한 토큰을 통해 이후 요청에서 인증을 처리하는 방식이다. SAML은 서로 다른 도메인 간에 인증 및 권한 부여 데이터를 교환하기 위한 XML 기반 표준이다.</description>
    </item>
    <item>
      <title>Token Authentication vs. JWT</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-jwt/</link>
      <pubDate>Thu, 03 Apr 2025 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-jwt/</guid>
      <description>토큰 인증은 사용자의 인증 정보를 검증한 후 서버가 고유한 토큰을 발급하고, 클라이언트가 이후 요청 시 이 토큰을 제시하여 자신을 인증하는 광범위한 인증 패러다임이다. JWT는 토큰 인증의 한 형태로, 정보를 안전하게 전송하기 위한 컴팩트하고 자체 포함적인(self-contained) JSON 객체이다.</description>
    </item>
    <item>
      <title>Token Authentication vs. OAuth</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-oauth-20/</link>
      <pubDate>Thu, 03 Apr 2025 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-oauth-20/</guid>
      <description>토큰 인증은 사용자의 자격 증명을 한 번만 확인한 후, 서버가 서명된 토큰을 발급하여 클라이언트가 이 토큰을 사용해 자신을 인증하도록 하는 것이다. OAuth 2.0의 핵심 아이디어는 사용자(리소스 소유자)가 비밀번호를 공유하지 않고도 제3자 애플리케이션(클라이언트)에게 자신의 데이터에 대한 특정 접근 권한을 부여할 수 있도록 하는 것이다.</description>
    </item>
    <item>
      <title>Token Authentication vs. OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-openid-connect/</link>
      <pubDate>Thu, 03 Apr 2025 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-openid-connect/</guid>
      <description>토큰 인증은 사용자의 자격 증명(주로 사용자 이름과 비밀번호)을 검증한 후, 서버가 발급한 토큰을 통해 이후의 요청에서 인증을 수행하는 방식이다. OpenID Connect는 OAuth 2.0 프로토콜 위에 구축된 ID 계층으로, 클라이언트가 사용자의 신원을 확인하고 기본적인 프로필 정보를 얻을 수 있게 하는 인증 프로토콜이다.</description>
    </item>
    <item>
      <title>Token Authentication vs. Cookie-Based Auth</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-cookie-based-auth/</link>
      <pubDate>Thu, 03 Apr 2025 07:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-cookie-based-auth/</guid>
      <description>토큰 인증은 서버가 사용자의 인증 정보를 확인한 후 서명된 토큰을 발급하고, 클라이언트가 이 토큰을 이후의 요청에 포함시켜 자신을 인증하는 방식이다. 쿠키 기반 인증은 서버가 사용자 인증 후 세션 ID를 포함한 쿠키를 클라이언트에 전송하고, 클라이언트가 이 쿠키를 모든 요청에 자동으로 포함시켜 인증하는 방식이다.</description>
    </item>
    <item>
      <title>SAML vs. OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/saml/saml-vs-openid-connect/</link>
      <pubDate>Thu, 03 Apr 2025 05:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/saml/saml-vs-openid-connect/</guid>
      <description>SAML(Security Assertion Markup Language)과 OpenID Connect는 모두 사용자 인증 및 권한 부여를 위한 프로토콜</description>
    </item>
    <item>
      <title>Apache Pulsar vs. Kafka</title>
      <link>https://buenhyden.github.io/posts/tools-reference/communication-technologies/message-brokers/apache-pulsar/apache-pulsar-vs-kafka/</link>
      <pubDate>Wed, 02 Apr 2025 06:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/communication-technologies/message-brokers/apache-pulsar/apache-pulsar-vs-kafka/</guid>
      <description>Apache Pulsar는 클라우드 네이티브 환경과 대규모 분산 시스템을 위해 설계되었으며, 높은 처리량과 낮은 지연 시간을 모두 달성하는 메시징 및 스트리밍 플랫폼이다. Kafka는 높은 처리량, 내구성, 확장성을 제공하는 로그 기반의 발행-구독(pub-sub) 메시징 시스템이다.</description>
    </item>
    <item>
      <title>Apache Pulsar vs. RabbitMQ</title>
      <link>https://buenhyden.github.io/posts/tools-reference/communication-technologies/message-brokers/apache-pulsar/apache-pulsar-vs-rabbitmq/</link>
      <pubDate>Wed, 02 Apr 2025 06:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/communication-technologies/message-brokers/apache-pulsar/apache-pulsar-vs-rabbitmq/</guid>
      <description>Apache Pulsar는 클라우드 네이티브 환경과 대규모 분산 시스템을 위해 설계되었으며, 높은 처리량과 낮은 지연 시간을 모두 달성하는 메시징 및 스트리밍 플랫폼이다. RabbitMQ는 AMQP(Advanced Message Queuing Protocol)를 구현한 가장 널리 사용되는 오픈 소스 메시지 브로커 중 하나이다.</description>
    </item>
    <item>
      <title>jwt vs. Basic Authentication</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-basic-authentication/</link>
      <pubDate>Wed, 02 Apr 2025 02:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-basic-authentication/</guid>
      <description>JWT는 JSON 형식의 토큰을 사용하여 사용자 정보와 서명을 포함하는 상태 비저장(stateless) 인증 방식으로 토큰 자체에 모든 인증 정보가 포함된다. Basic Authentication는 사용자 ID와 비밀번호를 Base64로 인코딩하여 HTTP 헤더에 전송하는 상태 비저장 방식으로 매 요청마다 자격 증명을 전송한다.</description>
    </item>
    <item>
      <title>Session-Based Auth vs. Basic Authentication</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/session-based-authentication/session-based-auth-vs-basic-authentication/</link>
      <pubDate>Wed, 02 Apr 2025 02:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/session-based-authentication/session-based-auth-vs-basic-authentication/</guid>
      <description>기본 인증은 HTTP 프로토콜에 내장된 가장 단순한 인증 방식 중 하나이다. 세션 기반 인증은 서버 측에서 사용자의 상태를 유지하는 인증 방식이다.</description>
    </item>
    <item>
      <title>Cookie-Based Auth vs. Basic Authentication</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/cookie-based-authentication/cookie-based-auth-vs-basic-authentication/</link>
      <pubDate>Wed, 02 Apr 2025 02:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/cookie-based-authentication/cookie-based-auth-vs-basic-authentication/</guid>
      <description>웹 애플리케이션에서 사용자 인증을 처리하는 두 가지 주요 방식</description>
    </item>
    <item>
      <title>jwt vs. Cookie-Based Auth</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-cookie-based-auth/</link>
      <pubDate>Wed, 02 Apr 2025 02:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-cookie-based-auth/</guid>
      <description>JWT는 Stateless한 인증이 필요한 경우(예: API 중심 애플리케이션, 마이크로서비스)에 적합하다. Cookie 기반 인증은 전통적인 웹 애플리케이션에서 더 적합하며, 특히 보안 요구 사항이 높은 경우 유리한다.</description>
    </item>
    <item>
      <title>jwt vs. Session-based Auth</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-session-based-auth/</link>
      <pubDate>Wed, 02 Apr 2025 02:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-session-based-auth/</guid>
      <description>JWT는 Stateless가 필요한 API 중심 애플리케이션이나 마이크로서비스에 적합하다. 토큰을 안전하게 저장하려면 HttpOnly 쿠키 사용을 권장한다.세션 기반 인증은 보안이 우선시되는 금융 서비스나 소규모 웹 앱에서 유리하다.  Redis와 같은 인메모리 DB로 세션을 관리하면 확장성을 개선할 수 있다.</description>
    </item>
    <item>
      <title>Token Authentication vs. Session-based Auth</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-session-based-auth/</link>
      <pubDate>Wed, 02 Apr 2025 02:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-session-based-auth/</guid>
      <description>세션 기반 인증은 전통적인 인증 방식으로, 서버가 사용자의 로그인 상태를 세션으로 유지하는 방식이다. 토큰 인증은 클라이언트에게 서명된 토큰을 발급하여 인증하는 방식이다.</description>
    </item>
    <item>
      <title>Circuit Breaker</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-recovery/retry-patterns/circuit-breaker/circuit-breaker/</link>
      <pubDate>Tue, 01 Apr 2025 15:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-recovery/retry-patterns/circuit-breaker/circuit-breaker/</guid>
      <description>소프트웨어 서킷 브레이커는 장애가 발생한 서비스에 대한 호출을 일시적으로 중단하여 시스템 전체의 안정성을 보호한다.</description>
    </item>
    <item>
      <title>Backpressure</title>
      <link>https://buenhyden.github.io/posts/programming-languages/programming-paradigms/concurrency-paradigms/asynchronous-programming/backpressure-management/backpressure/backpressure/</link>
      <pubDate>Tue, 01 Apr 2025 15:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/programming-paradigms/concurrency-paradigms/asynchronous-programming/backpressure-management/backpressure/backpressure/</guid>
      <description>**Backpressure**는 데이터 처리 시스템에서 수신 측이 송신 측에게 자신의 처리 용량을 알려 데이터 흐름을 제어하는 메커니즘이다.</description>
    </item>
    <item>
      <title>Graceful Degradation</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/service-continuity/graceful-degradation/</link>
      <pubDate>Tue, 01 Apr 2025 15:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/service-continuity/graceful-degradation/</guid>
      <description>그레이스풀 디그레이데이션은 시스템의 일부 구성 요소나 기능이 사용 불가능해도 기본 기능을 계속 유지할 수 있도록 하는 설계 원칙이다.</description>
    </item>
    <item>
      <title>JWT vs. OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-openid-connect/</link>
      <pubDate>Tue, 01 Apr 2025 14:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-openid-connect/</guid>
      <description>JWT는 당사자 간에 안전하게 정보를 전송하기 위한 개방형 표준(RFC 7519)으로, 컴팩트하고 자체 포함적인 방식으로 정보를 안전하게 전달한다. OpenID Connect는 OAuth 2.0 프로토콜 위에 구축된 인증 계층으로, 클라이언트가 사용자의 신원을 확인하고 기본적인 프로필 정보를 얻을 수 있도록 하는 표준이다.</description>
    </item>
    <item>
      <title>SOAP API vs. SOAP</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/rpc-oriented/soap/soap-api-vs-soap/</link>
      <pubDate>Tue, 01 Apr 2025 03:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/rpc-oriented/soap/soap-api-vs-soap/</guid>
      <description>SOAP는 메시지 교환 프로토콜이고, SOAP API는 이 프로토콜을 사용하여 구현된 웹 서비스이다.</description>
    </item>
    <item>
      <title>HIPAA</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/governance-and-management/compliance-and-regulations/hipaa/</link>
      <pubDate>Tue, 01 Apr 2025 02:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/governance-and-management/compliance-and-regulations/hipaa/</guid>
      <description>HIPAA는 1996년 미국에서 제정된 법률로, 의료 정보의 보호와 의료보험의 이식성을 보장하기 위한 규정을 제공한다.</description>
    </item>
    <item>
      <title>Domain Name</title>
      <link>https://buenhyden.github.io/posts/networking-and-communication/fundamentals/internet/domain-name/</link>
      <pubDate>Tue, 01 Apr 2025 02:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-and-communication/fundamentals/internet/domain-name/</guid>
      <description>도메인 이름은 인터넷에서 특정 위치를 식별하는 사람이 읽을 수 있는 주소이다.</description>
    </item>
    <item>
      <title>Mockoon</title>
      <link>https://buenhyden.github.io/posts/tools-reference/communication-technologies/api-technologies/api-testing-tools/mock-server-tools/mockoon/</link>
      <pubDate>Tue, 01 Apr 2025 02:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/communication-technologies/api-technologies/api-testing-tools/mock-server-tools/mockoon/</guid>
      <description>Mockoon은 개발자가 빠르고 쉽게 API를 모킹(가짜로 구현)할 수 있는 오픈 소스 데스크톱 애플리케이션이다.</description>
    </item>
    <item>
      <title>WireMock</title>
      <link>https://buenhyden.github.io/posts/tools-reference/communication-technologies/api-technologies/api-testing-tools/mock-server-tools/wiremock/</link>
      <pubDate>Tue, 01 Apr 2025 02:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/communication-technologies/api-technologies/api-testing-tools/mock-server-tools/wiremock/</guid>
      <description>WireMock은 HTTP 기반 API를 위한 시뮬레이션 도구로, Java 환경에서 개발되었으나 다양한 플랫폼에서 활용 가능하다.</description>
    </item>
    <item>
      <title>Hosting</title>
      <link>https://buenhyden.github.io/posts/networking-and-communication/fundamentals/internet/hosting/</link>
      <pubDate>Mon, 31 Mar 2025 23:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-and-communication/fundamentals/internet/hosting/</guid>
      <description>호스팅은 API, 웹사이트, 애플리케이션과 같은 디지털 자산을 인터넷을 통해 사용자에게 제공하기 위해 서버 공간과 자원을 제공하는 서비스이다.</description>
    </item>
    <item>
      <title>ReDoc</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-specification-and-documentation/openapi-specification/swagger/documentation-generation/redoc/</link>
      <pubDate>Mon, 31 Mar 2025 09:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-specification-and-documentation/openapi-specification/swagger/documentation-generation/redoc/</guid>
      <description>ReDoc은 OpenAPI(이전의 Swagger) 명세를 기반으로 한 오픈 소스 API 문서 생성 도구이다.</description>
    </item>
    <item>
      <title>Error Handling</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/rpc-oriented/rpc-based/grpc/error-handling/</link>
      <pubDate>Mon, 31 Mar 2025 08:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/rpc-oriented/rpc-based/grpc/error-handling/</guid>
      <description>gRPC는 이러한 다양한 오류 상황을 일관되고 체계적으로 처리하기 위한 포괄적인 오류 처리 메커니즘을 제공한다.</description>
    </item>
    <item>
      <title>Adaptive Polling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns-and-integration/communication-patterns/hybrid-communication/webhooks-vs-polling/polling/types/adaptive-polling/</link>
      <pubDate>Sun, 23 Mar 2025 04:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns-and-integration/communication-patterns/hybrid-communication/webhooks-vs-polling/polling/types/adaptive-polling/</guid>
      <description>어댑티브 폴링은 데이터 수집이나 시스템 모니터링 과정에서 폴링(polling) 주기를 상황과 필요에 따라 동적으로 조절하는 기술이다.</description>
    </item>
    <item>
      <title>Smart Polling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns-and-integration/communication-patterns/hybrid-communication/webhooks-vs-polling/polling/types/smart-polling/</link>
      <pubDate>Sun, 23 Mar 2025 04:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns-and-integration/communication-patterns/hybrid-communication/webhooks-vs-polling/polling/types/smart-polling/</guid>
      <description>스마트 폴링은 단순히 일정 주기로 데이터를 확인하는 전통적인 폴링과 달리, 다양한 컨텍스트 정보와 알고리즘을 활용하여 &amp;#39;언제&amp;#39;, &amp;#39;무엇을&amp;#39;, &amp;#39;어떻게&amp;#39; 폴링할지 지능적으로 결정한다.</description>
    </item>
    <item>
      <title>OpenAPI 사양(OpenAPI Specification, OAS)</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-specification-and-documentation/openapi-specification/</link>
      <pubDate>Fri, 14 Mar 2025 11:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-specification-and-documentation/openapi-specification/</guid>
      <description>OpenAPI 사양(OpenAPI Specification, OAS)은 REST API를 설계, 문서화 및 표준화하기 위한 언어에 구애받지 않는 정의 형식이다.</description>
    </item>
    <item>
      <title>SAML vs. OAuth 2.0</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/saml/saml-vs-oauth-20/</link>
      <pubDate>Tue, 11 Mar 2025 13:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/saml/saml-vs-oauth-20/</guid>
      <description>SAML의 주요 목적은 신원 공급자(Identity Provider, IdP)와 서비스 공급자(Service Provider, SP) 사이에 인증 정보를 교환할 수 있는 표준화된 방법을 제공하는 것이고 OAuth 2.0의 주요 목적은 사용자가 자신의 자격 증명을 공유하지 않고도 타사 애플리케이션에 자신의 데이터에 대한 제한된 접근 권한을 부여할 수 있도록 하는 것이다.</description>
    </item>
    <item>
      <title>Session-Based Auth vs. Cookie-Based Auth</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/session-based-authentication/session-based-auth-vs-cookie-based-auth/</link>
      <pubDate>Tue, 11 Mar 2025 13:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/session-based-authentication/session-based-auth-vs-cookie-based-auth/</guid>
      <description>세션 기반 인증은 서버 측에 사용자 상태 정보를 저장하고, 클라이언트에는 세션을 식별하는 고유 ID만 제공하는 방식이다. 쿠키 기반 인증은 HTTP 쿠키를 사용하여 사용자의 인증 상태를 유지하는 방식이다.</description>
    </item>
    <item>
      <title>OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/openid-connect/</link>
      <pubDate>Tue, 11 Mar 2025 13:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/openid-connect/</guid>
      <description>OpenID Connect(OIDC)는 웹 기반 애플리케이션과 서비스를 위한 현대적인 인증 프로토콜로, OAuth 2.0 프레임워크를 기반으로 구축되었다. 이 프로토콜은 사용자의 신원을 검증하고, 안전하게 정보를 교환하는 표준화된 방법을 제공한다.</description>
    </item>
    <item>
      <title>HTTP basic authentication</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/http-basic-authentication/basic-authentication/</link>
      <pubDate>Tue, 11 Mar 2025 13:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/http-basic-authentication/basic-authentication/</guid>
      <description>HTTP 프로토콜에서 가장 단순한 형태의 인증 방식으로, 클라이언트가 서버에 요청을 보낼 때 사용자의 ID와 비밀번호를 Base64로 인코딩하여 전송하는 방식</description>
    </item>
    <item>
      <title>SAML</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/saml/</link>
      <pubDate>Tue, 11 Mar 2025 13:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/saml/</guid>
      <description>SAML(Security Assertion Markup Language)은 기업과 조직에서 단일 로그인(SSO, Single Sign-On)과 신원 연합(Identity Federation)을 구현하기 위한 XML 기반 표준 프레임워크이다.</description>
    </item>
    <item>
      <title>Token-Based Authentication</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/</link>
      <pubDate>Tue, 11 Mar 2025 13:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/</guid>
      <description>토큰 기반 인증은 사용자가 자신의 자격 증명(일반적으로 사용자 이름과 비밀번호)을 인증 서버에 제출하면, 서버가 이를 검증한 후 디지털 토큰을 발급하는 방식이다.</description>
    </item>
    <item>
      <title>OpenID</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/openid/</link>
      <pubDate>Tue, 11 Mar 2025 13:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/openid/</guid>
      <description>OpenID는 사용자가 여러 웹사이트와 애플리케이션에 단일 자격 증명으로 로그인할 수 있게 해주는 분산형 인증 표준이다.</description>
    </item>
    <item>
      <title>OAuth</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/oauth/</link>
      <pubDate>Tue, 11 Mar 2025 12:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/oauth/</guid>
      <description>OAuth는 현대 웹과 모바일 애플리케이션의 인증 및 권한 부여 방식을 근본적으로 변화시킨 오픈 표준 프로토콜이다.</description>
    </item>
    <item>
      <title>OpenID vs. OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/openid/openid-vs-openid-connect/</link>
      <pubDate>Tue, 11 Mar 2025 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/openid/openid-vs-openid-connect/</guid>
      <description>OpenID와 OpenID Connect는 사용자 인증을 위한 중요한 표준이다.</description>
    </item>
    <item>
      <title>Postman</title>
      <link>https://buenhyden.github.io/posts/tools-reference/communication-technologies/api-technologies/api-testing-tools/api-testing/postman/</link>
      <pubDate>Mon, 10 Mar 2025 13:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/communication-technologies/api-technologies/api-testing-tools/api-testing/postman/</guid>
      <description>Postman은 API(Application Programming Interface) 개발, 테스트, 문서화 및 협업을 위한 종합적인 플랫폼이다.</description>
    </item>
    <item>
      <title>Swagger</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-specification-and-documentation/openapi-specification/swagger/</link>
      <pubDate>Mon, 10 Mar 2025 13:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-specification-and-documentation/openapi-specification/swagger/</guid>
      <description>Swagger는 RESTful API를 설계, 개발, 문서화, 테스트하기 위한 종합적인 도구 모음이다.</description>
    </item>
    <item>
      <title>API Testing</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance-and-testing/api-testing/</link>
      <pubDate>Mon, 10 Mar 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance-and-testing/api-testing/</guid>
      <description>API 테스팅은 애플리케이션 프로그래밍 인터페이스(API)의 기능성, 신뢰성, 성능 및 보안을 확인하는 프로세스이다.</description>
    </item>
    <item>
      <title>Unit Testing</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance-and-testing/api-testing/unit-testing/</link>
      <pubDate>Mon, 10 Mar 2025 02:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance-and-testing/api-testing/unit-testing/</guid>
      <description>단위 테스팅은 API 설계 과정에서 개별 컴포넌트나 함수를 독립적으로 테스트하여 각 부분이 올바르게 작동하는지 확인하는 과정이다.</description>
    </item>
    <item>
      <title>Contract Testing</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance-and-testing/api-testing/contract-testing/</link>
      <pubDate>Mon, 10 Mar 2025 02:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance-and-testing/api-testing/contract-testing/</guid>
      <description>계약 테스트(Contract Testing)는 서비스 간 상호작용이 명시된 계약을 준수하는지 확인하는 테스트 방법론이다.</description>
    </item>
    <item>
      <title>Functional Testing</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance-and-testing/api-testing/functional-testing/</link>
      <pubDate>Mon, 10 Mar 2025 02:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance-and-testing/api-testing/functional-testing/</guid>
      <description>API 기능 테스트는 API가 의도한 모든 기능을 올바르게 수행하는지 검증하는 과정이다.</description>
    </item>
    <item>
      <title>Integration Testing</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance-and-testing/api-testing/integration-testing/</link>
      <pubDate>Mon, 10 Mar 2025 02:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance-and-testing/api-testing/integration-testing/</guid>
      <description>API 통합 테스트는 API 개발 및 설계에서 필수적인 단계로, 개별 컴포넌트들이 서로 올바르게 상호작용하는지 검증하는 프로세스이다.</description>
    </item>
    <item>
      <title>Load Testing</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance-and-testing/api-testing/load-testing/</link>
      <pubDate>Mon, 10 Mar 2025 02:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance-and-testing/api-testing/load-testing/</guid>
      <description>API 부하 테스트는 API가 예상된 사용자 부하와 그 이상의 상황에서 어떻게 동작하는지 검증하는 중요한 성능 테스트 유형이다.</description>
    </item>
    <item>
      <title>Session-based Authentication</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/session-based-authentication/</link>
      <pubDate>Sun, 09 Mar 2025 15:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/session-based-authentication/</guid>
      <description>세션 기반 인증은 서버 측에서 사용자의 상태를 유지하는 인증 방식이다.</description>
    </item>
    <item>
      <title>Cookie-Based Authentication</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/cookie-based-authentication/</link>
      <pubDate>Sun, 09 Mar 2025 15:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/cookie-based-authentication/</guid>
      <description>HTTP 프로토콜의 무상태(stateless) 특성을 극복하고 사용자의 로그인 상태를 유지하기 위한 메커니즘으로, 오랜 시간 동안 웹의 핵심 인증 기술로 자리잡아 왔다.</description>
    </item>
    <item>
      <title>Web Socket vs. Long Polling</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/websocket/web-socket-vs-long-polling/</link>
      <pubDate>Sun, 09 Mar 2025 02:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/websocket/web-socket-vs-long-polling/</guid>
      <description>WebSocket은 TCP 연결을 통해 전이중(full-duplex) 통신 채널을 제공하는 프로토콜이다. Long Polling은 기존 HTTP 요청-응답 모델을 확장한 기법으로, 클라이언트가 서버에 요청을 보내면 서버는 새로운 정보가 있을 때까지 응답을 보류한다.</description>
    </item>
    <item>
      <title>Types of Polling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns-and-integration/communication-patterns/hybrid-communication/webhooks-vs-polling/polling/types/</link>
      <pubDate>Sun, 09 Mar 2025 02:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns-and-integration/communication-patterns/hybrid-communication/webhooks-vs-polling/polling/types/</guid>
      <description>클라이언트-서버 통신에서 폴링(Polling)은 클라이언트가 서버의 데이터 변경사항을 확인하기 위해 주기적으로 요청을 보내는 기법으로 다양한 폴링 메커니즘이 존재하며, 각각 고유한 특성과 적합한 사용 환경이 있다.</description>
    </item>
    <item>
      <title>WebSocket</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/websocket/</link>
      <pubDate>Sat, 08 Mar 2025 16:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/websocket/</guid>
      <description>웹 소켓은 클라이언트와 서버 간에 지속적인 양방향 통신 채널을 제공하는 프로토콜이다. 전통적인 HTTP 통신과 달리, 웹 소켓은 한 번 연결이 수립되면 지속적으로 유지되어 실시간으로 데이터를 주고받을 수 있다.</description>
    </item>
    <item>
      <title>Server sent Events</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/server-sent-events/</link>
      <pubDate>Sat, 08 Mar 2025 16:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/server-sent-events/</guid>
      <description>서버 전송 이벤트(Server-Sent Events, SSE)는 웹 서버가 클라이언트 브라우저로 데이터를 자동으로 푸시할 수 있게 해주는 웹 기술이다.</description>
    </item>
    <item>
      <title>Polling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns-and-integration/communication-patterns/hybrid-communication/webhooks-vs-polling/polling/</link>
      <pubDate>Sat, 08 Mar 2025 15:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns-and-integration/communication-patterns/hybrid-communication/webhooks-vs-polling/polling/</guid>
      <description>폴링은 클라이언트가 주기적으로 서버에 요청을 보내 새로운 정보나 상태 변화를 확인하는 통신 방식이다. 이는 &amp;#39;끌어오기(Pull)&amp;#39; 방식의 대표적인 예로, 클라이언트가 능동적으로 서버에서 정보를 요청한다.</description>
    </item>
    <item>
      <title>Webhook</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/webhook/</link>
      <pubDate>Sat, 08 Mar 2025 15:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/webhook/</guid>
      <description>webhook은 특정 이벤트가 발생했을 때 서버가 미리 지정된 클라이언트의 URL로 데이터를 능동적으로 보내는 방식이다.</description>
    </item>
    <item>
      <title>API Integration Patterns</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns-and-integration/integration-patterns/api-integration/</link>
      <pubDate>Thu, 06 Mar 2025 13:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns-and-integration/integration-patterns/api-integration/</guid>
      <description>API 통합 패턴은 다양한 시스템, 서비스, 애플리케이션이 효과적으로 통신하고 상호작용할 수 있도록 하는 설계 접근법이다.</description>
    </item>
    <item>
      <title>Apache Lucene</title>
      <link>https://buenhyden.github.io/posts/tools-reference/search-technologies/apache-lucene/</link>
      <pubDate>Mon, 03 Mar 2025 07:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/search-technologies/apache-lucene/</guid>
      <description>Apache Lucene은 오픈소스 검색 라이브러리로, 텍스트 기반 정보 검색 기능을 자바로 구현한 도구이다.</description>
    </item>
    <item>
      <title>Elasticssearch</title>
      <link>https://buenhyden.github.io/posts/tools-reference/search-technologies/elasticssearch/</link>
      <pubDate>Mon, 03 Mar 2025 06:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/search-technologies/elasticssearch/</guid>
      <description>Elasticsearch는 **분산형, RESTful 검색 및 분석 엔진**으로, 대량의 데이터를 저장, 검색 및 분석하는 데 최적화된 도구이다.</description>
    </item>
    <item>
      <title>Opensearch</title>
      <link>https://buenhyden.github.io/posts/tools-reference/search-technologies/opensearch/</link>
      <pubDate>Mon, 03 Mar 2025 06:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/search-technologies/opensearch/</guid>
      <description>OpenSearch는 강력한 오픈 소스 검색 및 분석 제품군으로, 대규모 데이터에서 실시간 검색, 모니터링, 분석 기능을 제공한다. 텍스트, 숫자, 지리 공간 데이터 등 다양한 유형의 데이터를 처리할 수 있는 유연한 플랫폼이다.</description>
    </item>
    <item>
      <title>GraphQL API</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/query-oriented/graphql/graphql-apis/</link>
      <pubDate>Mon, 03 Mar 2025 05:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/query-oriented/graphql/graphql-apis/</guid>
      <description>GraphQL은 API를 위한 쿼리 언어이자 서버 측에서 이러한 쿼리를 실행하기 위한 런타임이다</description>
    </item>
    <item>
      <title>Server-sent Events vs. Websocket</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/server-sent-events/server-sent-events-vs-websocket/</link>
      <pubDate>Mon, 03 Mar 2025 05:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/server-sent-events/server-sent-events-vs-websocket/</guid>
      <description>전통적인 HTTP 요청-응답 모델은 실시간 데이터 전송에 최적화되어 있지 않기 때문에, 이를 보완하기 위한 기술로 서버 전송 이벤트(Server-Sent Events, SSE)와 웹소켓(WebSocket)이 등장했다.</description>
    </item>
    <item>
      <title>Solr</title>
      <link>https://buenhyden.github.io/posts/tools-reference/search-technologies/apache-solr/</link>
      <pubDate>Mon, 03 Mar 2025 01:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/search-technologies/apache-solr/</guid>
      <description>Apache Solr는 고성능 오픈 소스 검색 플랫폼으로, 엔터프라이즈급 전문 검색(full-text search), 패싯 검색, 실시간 인덱싱, 동적 클러스터링, 데이터베이스 통합 및 풍부한 문서 처리 기능을 제공한다.</description>
    </item>
    <item>
      <title>RFC 6749</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/oauth/rfc-6749/</link>
      <pubDate>Fri, 28 Feb 2025 11:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/protocols/oauth/rfc-6749/</guid>
      <description>RFC 6749는 OAuth 2.0 권한 부여 프레임워크(The OAuth 2.0 Authorization Framework)를 정의하는 인터넷 표준 문서이다.</description>
    </item>
    <item>
      <title>Protocol Buffers</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/rpc-oriented/rpc-based/grpc/protocol-buffers/</link>
      <pubDate>Fri, 28 Feb 2025 04:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/rpc-oriented/rpc-based/grpc/protocol-buffers/</guid>
      <description>Protocol Buffers(이하 protobuf)는 Google에서 개발한 언어 중립적, 플랫폼 중립적, 확장 가능한 구조화된 데이터 직렬화 메커니즘이다.</description>
    </item>
    <item>
      <title>Push Notification</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/push-notification/</link>
      <pubDate>Fri, 28 Feb 2025 03:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/push-notification/</guid>
      <description>이벤트 기반 스타일의 푸시 알림은 사용자에게 실시간으로 정보를 전달하는 비동기 통신 메커니즘이다.</description>
    </item>
    <item>
      <title>Streaming APIs</title>
      <link>https://buenhyden.github.io/posts/system-design/distributed-systems/stream-processing-systems/streaming/streaming-apis/</link>
      <pubDate>Fri, 28 Feb 2025 03:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/distributed-systems/stream-processing-systems/streaming/streaming-apis/</guid>
      <description>스트리밍 API는 서버에서 클라이언트로 데이터를 연속적인 흐름(stream) 형태로 전송하는 인터페이스이다.</description>
    </item>
    <item>
      <title>Pub/Sub APIs</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/pub-sub-apis/</link>
      <pubDate>Fri, 28 Feb 2025 03:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/pub-sub-apis/</guid>
      <description>Pub/Sub(Publish-Subscribe) 패턴은 메시지 기반 아키텍처의 핵심 패러다임으로, 데이터를 생성하는 발행자(Publisher)와 데이터를 소비하는 구독자(Subscriber) 사이의 느슨한 결합(loose coupling)을 제공한다.</description>
    </item>
    <item>
      <title>Websocket API vs. Websocket</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/websocket/websocket-api-vs-websocket/</link>
      <pubDate>Fri, 28 Feb 2025 03:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/event-driven-apis/websocket/websocket-api-vs-websocket/</guid>
      <description>WebSocket은 통신 프로토콜 자체를 의미하며, 인터넷 상에서 메시지를 주고받는 방식을 정의하며 WebSocket API는 개발자가 웹 애플리케이션에서 WebSocket 프로토콜을 사용할 수 있게 해주는 프로그래밍 인터페이스이다.</description>
    </item>
    <item>
      <title>gRPC API vs. gRPC</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/rpc-oriented/rpc-based/grpc/grpc-api-vs-grpc/</link>
      <pubDate>Fri, 28 Feb 2025 03:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/rpc-oriented/rpc-based/grpc/grpc-api-vs-grpc/</guid>
      <description>gRPC는 기술적 프레임워크이고, gRPC API는 이 프레임워크를 사용하여 구축된 실제 응용 프로그램 인터페이스이다.</description>
    </item>
    <item>
      <title>API-First Design</title>
      <link>https://buenhyden.github.io/posts/system-design/cloud-computing/cloud-native-architecture/cloud-architecture-principles/cloud-native-principles/api-first-design/</link>
      <pubDate>Thu, 27 Feb 2025 13:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/cloud-computing/cloud-native-architecture/cloud-architecture-principles/cloud-native-principles/api-first-design/</guid>
      <description>API를 먼저 설계하고 이를 중심으로 개발을 진행함으로써, 다양한 클라이언트 플랫폼을 지원하고 개발 효율성을 높일 수 있다. 단순히 기술적 측면뿐만 아니라 비즈니스 민첩성, 개발자 경험, 제품 품질 등 여러 측면에서 이점을 제공한다. 올바르게 적용하기 위해서는 명확한 설계 표준, 적절한 도구, 그리고 팀 문화의 변화가 필요하다. 마이크로서비스 아키텍처, 클라우드 네이티브 애플리케이션, 그리고 다양한 디지털 채널을 통합해야 하는 현대 비즈니스 환경에서 그 중요성이 더욱 부각되고 있다.</description>
    </item>
    <item>
      <title>GraphQL API vs. GraphQL</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/query-oriented/graphql/graphql-apis/graphql-api-vs-graphql/</link>
      <pubDate>Thu, 27 Feb 2025 11:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/query-oriented/graphql/graphql-apis/graphql-api-vs-graphql/</guid>
      <description>GraphQL은 페이스북이 2012년에 개발하고 2015년에 오픈소스로 공개한 쿼리 언어와 서버 측 런타임 사양(specification)이다. 반면 GraphQL API는 이 GraphQL 사양을 구현한 실제 API 인터페이스를 의미한다.</description>
    </item>
    <item>
      <title>Error Handling</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/query-oriented/graphql/error-handling/</link>
      <pubDate>Thu, 27 Feb 2025 08:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/query-oriented/graphql/error-handling/</guid>
      <description>GraphQL에서의 오류 처리는 REST API와는 다른 접근 방식을 취한다. GraphQL은 단일 엔드포인트로 여러 리소스에 접근할 수 있기 때문에, 오류 처리도 더 복잡하고 구조화되어 있다.</description>
    </item>
    <item>
      <title>Pagination</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-development/api-development-and-implementation/api-implementation-fundamentals/request-response-handling/pagination/</link>
      <pubDate>Thu, 27 Feb 2025 02:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-development/api-development-and-implementation/api-implementation-fundamentals/request-response-handling/pagination/</guid>
      <description>페이지네이션을 통해 서버는 데이터를 작은 &amp;#34;페이지&amp;#34; 단위로 나누어 전달하여 성능, 사용자 경험, 리소스 사용을 모두 최적화할 수 있다.</description>
    </item>
    <item>
      <title>URI Design</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-development/api-development-and-implementation/api-implementation-fundamentals/endpoint-implementation/uri-design/</link>
      <pubDate>Thu, 27 Feb 2025 02:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-development/api-development-and-implementation/api-implementation-fundamentals/endpoint-implementation/uri-design/</guid>
      <description>잘 설계된 URI는 API의 직관성을 높이고, 학습 곡선을 완화하며, 리소스의 구조와 관계를 명확히 보여준다.</description>
    </item>
    <item>
      <title>Versioning Strategies</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-lifecycle-management/api-versioning-strategies/</link>
      <pubDate>Thu, 27 Feb 2025 02:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-lifecycle-management/api-versioning-strategies/</guid>
      <description>API 버전 관리는 현대 소프트웨어 개발의 핵심 요소로, 기존 클라이언트의 호환성을 유지하면서 API를 발전시키는 방법이다.</description>
    </item>
    <item>
      <title>Get-and-Patch</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/resource-oriented/rest/handling-crud-operations/get-and-patch/</link>
      <pubDate>Wed, 26 Feb 2025 11:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/resource-oriented/rest/handling-crud-operations/get-and-patch/</guid>
      <description>&amp;#34;Get-and-Patch&amp;#34;는 **리소스의 부분적 업데이트를 효율적으로 처리하기 위한 REST API 디자인 패턴**으로, 기존 CRUD(Create, Read, Update, Delete) 방식의 한계를 보완한다.</description>
    </item>
    <item>
      <title>Get-and-Set</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/resource-oriented/rest/handling-crud-operations/get-and-set/</link>
      <pubDate>Wed, 26 Feb 2025 11:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/resource-oriented/rest/handling-crud-operations/get-and-set/</guid>
      <description>&amp;#34;Get-and-Set&amp;#34;은 전통적인 CRUD(Create, Read, Update, Delete) 방식을 개선한 REST API 디자인 패턴으로, **리소스의 존재 여부와 관계없이 단순화된 작업 흐름**을 제공한다.</description>
    </item>
    <item>
      <title>Timestamp-Checked</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/resource-oriented/rest/handling-crud-operations/timestamp-checked/</link>
      <pubDate>Wed, 26 Feb 2025 11:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/resource-oriented/rest/handling-crud-operations/timestamp-checked/</guid>
      <description>Timestamp-Checked 방식은 동시성 제어를 위한 중요한 기법 중 하나로, 주로 낙관적 동시성 제어(Optimistic Concurrency Control)의 맥락에서 사용된다.</description>
    </item>
    <item>
      <title>Handling CRUD Operations</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/resource-oriented/rest/handling-crud-operations/</link>
      <pubDate>Wed, 26 Feb 2025 02:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/resource-oriented/rest/handling-crud-operations/</guid>
      <description>CRUD는 데이터 중심 애플리케이션에서 가장 기본적인 네 가지 작업인 생성(Create), 읽기(Read), 업데이트(Update), 삭제(Delete)를 의미한다.</description>
    </item>
    <item>
      <title>Error Handling</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/resource-oriented/rest/error-handling/</link>
      <pubDate>Wed, 26 Feb 2025 02:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/resource-oriented/rest/error-handling/</guid>
      <description>RESTful API의.오류 처리는 개발자 경험과 시스템 안정성에 중요한 영향을 미치는 핵심 요소이다.  오류 상황을 어떻게 다루고 전달하는지에 따라 API의 품질이 크게 달라질 수 있다.</description>
    </item>
    <item>
      <title>Types of Real-time APIs</title>
      <link>https://buenhyden.github.io/posts/networking-and-communication/fundamentals/real-time-communication/types-of-real-time-apis/</link>
      <pubDate>Sat, 15 Feb 2025 01:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-and-communication/fundamentals/real-time-communication/types-of-real-time-apis/</guid>
      <description>Real-time API는 클라이언트와 서버 간의 데이터를 거의 즉각적으로 주고받을 수 있는 API로, 실시간 데이터 교환을 가능하게 한다.</description>
    </item>
    <item>
      <title>Monitoring</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-development/api-development-and-implementation/api-deployment-and-operations/api-monitoring-implementation/api-monitoring/</link>
      <pubDate>Fri, 14 Feb 2025 01:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-development/api-development-and-implementation/api-deployment-and-operations/api-monitoring-implementation/api-monitoring/</guid>
      <description>API 모니터링은 단순한 로그 수집을 넘어서, API 시스템의 건강 상태를 종합적으로 관찰하고 평가하는 프로세스이다.</description>
    </item>
    <item>
      <title>Profiling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-development/api-development-and-implementation/api-deployment-and-operations/api-analytics/api-profiling/</link>
      <pubDate>Fri, 14 Feb 2025 01:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-development/api-development-and-implementation/api-deployment-and-operations/api-analytics/api-profiling/</guid>
      <description>API 프로파일링은 API의 성능, 행동, 리소스 사용 특성을 체계적으로 분석하는 프로세스로, 최적화 기회를 발견하고 성능 문제를 해결하는 데 필수적인 접근법이다</description>
    </item>
    <item>
      <title>Security</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/security-and-compliance/web-security/server-side-security/backend-security/</link>
      <pubDate>Thu, 13 Feb 2025 01:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/security-and-compliance/web-security/server-side-security/backend-security/</guid>
      <description>보안과 성능은 백엔드 시스템에서 상호 연결된 중요한 두 축이다.</description>
    </item>
    <item>
      <title>Error Handling and Retries</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-development/api-development-and-implementation/api-implementation-fundamentals/error-handling-implementation/error-handling-and-retries/</link>
      <pubDate>Thu, 13 Feb 2025 01:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-development/api-development-and-implementation/api-implementation-fundamentals/error-handling-implementation/error-handling-and-retries/</guid>
      <description>효과적인 오류 처리와 재시도 메커니즘은 안정적인 API 설계의 핵심 요소이다.</description>
    </item>
    <item>
      <title>Cache Strategy</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/performance-and-scalability/performance-optimization/caching-strategies/</link>
      <pubDate>Thu, 13 Feb 2025 01:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/performance-and-scalability/performance-optimization/caching-strategies/</guid>
      <description>캐싱은 API 설계에서 성능을 최적화하는 핵심 전략이다. 자주 요청되는 데이터를 임시 저장소에 저장함으로써 반복적인 계산, 데이터베이스 쿼리, 네트워크 요청을 줄이고 응답 시간을 대폭 향상시킬 수 있다.</description>
    </item>
    <item>
      <title>Performance Metrics</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-quality-and-performance/performance-considerations/performance-metrics/</link>
      <pubDate>Thu, 13 Feb 2025 01:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-quality-and-performance/performance-considerations/performance-metrics/</guid>
      <description>API 성능 메트릭스는 API의 효율성, 안정성, 그리고 전반적인 품질을 측정하는 중요한 지표이다.</description>
    </item>
    <item>
      <title>API Documentation</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-specification-and-documentation/api-documentation/</link>
      <pubDate>Wed, 12 Feb 2025 01:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-specification-and-documentation/api-documentation/</guid>
      <description>API 문서화란 API의 기능, 사용 방법, 엔드포인트, 매개변수, 응답 형식 등을 설명하는 기술 문서를 말한다.</description>
    </item>
    <item>
      <title>Performance Testing</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance-and-testing/api-testing/performance-testing/</link>
      <pubDate>Wed, 12 Feb 2025 01:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance-and-testing/api-testing/performance-testing/</guid>
      <description>성능 테스팅은 시스템이 예상된 부하 조건에서 어떻게 작동하는지 측정하고 평가하는 과정이다.</description>
    </item>
    <item>
      <title>Network</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-development/backend-development/backend-performance/network/</link>
      <pubDate>Wed, 12 Feb 2025 01:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-development/backend-development/backend-performance/network/</guid>
      <description>네트워크 최적화는 백엔드 성능을 향상시키는 핵심 요소 중 하나이다. 사용자 경험에 직접적인 영향을 미치는 지연 시간과 처리량을 개선함으로써 웹 애플리케이션의 전반적인 성능을 크게 향상시킬 수 있다.</description>
    </item>
    <item>
      <title>Optimize API Response</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-development/api-development-and-implementation/api-implementation-fundamentals/request-response-handling/optimize-api-response/</link>
      <pubDate>Wed, 12 Feb 2025 01:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-development/api-development-and-implementation/api-implementation-fundamentals/request-response-handling/optimize-api-response/</guid>
      <description>API 응답 최적화는 현대 웹 애플리케이션의 성능, 사용자 경험 및 자원 효율성을 크게 향상시키는 핵심 요소이다.</description>
    </item>
    <item>
      <title>Monitoring and Logging</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-development/backend-development/backend-performance/monitoring-and-logging/</link>
      <pubDate>Wed, 12 Feb 2025 01:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-development/backend-development/backend-performance/monitoring-and-logging/</guid>
      <description>모니터링과 로깅은 현대 백엔드 시스템의 건강 상태를 파악하고 성능을 최적화하는 데 필수적인 요소이다. 이러한 도구와 전략을 통해 시스템의 병목 현상을 식별하고, 문제가 발생하기 전에 예방적 조치를 취할 수 있으며, 사용자 경험을 크게 향상시킬 수 있다.</description>
    </item>
    <item>
      <title>Load Balancing and Scaling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-development/backend-development/backend-performance/load-balancing-and-scaling/</link>
      <pubDate>Wed, 12 Feb 2025 01:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-development/backend-development/backend-performance/load-balancing-and-scaling/</guid>
      <description>로드 밸런싱은 네트워크 트래픽을 여러 서버에 효율적으로 분산시켜 시스템의 안정성, 가용성, 응답 시간을 개선하는 기술이다.</description>
    </item>
    <item>
      <title>Databases</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-development/backend-development/backend-performance/database/</link>
      <pubDate>Wed, 12 Feb 2025 01:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-development/backend-development/backend-performance/database/</guid>
      <description>백엔드 성능 최적화는 현대 웹 애플리케이션 개발에서 필수적인 요소이다. 사용자 경험을 향상시키고, 서버 자원을 효율적으로 활용하며, 확장성을 보장하기 위해서는 데이터베이스의 최적화가 필수적이다.</description>
    </item>
    <item>
      <title>Code Optimization</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-development/backend-development/backend-performance/code-optimization/</link>
      <pubDate>Wed, 12 Feb 2025 01:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-development/backend-development/backend-performance/code-optimization/</guid>
      <description>백엔드 성능 최적화는 현대 웹 애플리케이션 개발에서 필수적인 요소이다. 사용자 경험을 향상시키고, 서버 자원을 효율적으로 활용하며, 확장성을 보장하기 위해서는 다양한 코드 최적화 기법을 적절히 적용해야 한다.</description>
    </item>
    <item>
      <title>Asynchronism</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-development/backend-development/backend-performance/asynchronism/</link>
      <pubDate>Wed, 12 Feb 2025 01:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-development/backend-development/backend-performance/asynchronism/</guid>
      <description>비동기 처리(Asynchronism)는 시스템의 응답성과 확장성을 크게 향상시킬 수 있다.</description>
    </item>
    <item>
      <title>Apache Pulsar</title>
      <link>https://buenhyden.github.io/posts/tools-reference/communication-technologies/message-brokers/apache-pulsar/</link>
      <pubDate>Thu, 06 Feb 2025 04:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/communication-technologies/message-brokers/apache-pulsar/</guid>
      <description>분산형 메시징 및 스트리밍 플랫폼이다. Pulsar는 기존의 메시지 큐와 스트리밍 시스템의 장점을 결합하여 높은 성능, 낮은 지연 시간, 그리고 강력한 내구성을 제공한다.</description>
    </item>
    <item>
      <title>RFC 7519</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/jwt/rfc-7519/</link>
      <pubDate>Thu, 06 Feb 2025 03:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/jwt/rfc-7519/</guid>
      <description>2015년 5월에 Internet Engineering Task Force(IETF)에 의해 발행된 이 문서는 JWT의 구조, 형식, 서명 방법, 암호화 방법 등을 상세히 정의하고 있다.</description>
    </item>
    <item>
      <title>Mocking APIs</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance-and-testing/api-testing/mocking-apis/</link>
      <pubDate>Wed, 05 Feb 2025 04:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance-and-testing/api-testing/mocking-apis/</guid>
      <description>목 API는 소프트웨어 개발 과정에서 실제 API를 대체하여 테스트, 개발, 디버깅을 용이하게 하는 가상의 API이다.</description>
    </item>
    <item>
      <title>Personal Identifiable Information (PII)</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/fundamentals/pii/</link>
      <pubDate>Sun, 02 Feb 2025 03:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/fundamentals/pii/</guid>
      <description>개인 식별 정보(Personal Identifiable Information, PII)는 개인의 신원을 식별하거나 추적하는 데 사용될 수 있는 정보를 의미한다.</description>
    </item>
    <item>
      <title>API Lifecycle Management</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-lifecycle-management/</link>
      <pubDate>Sun, 02 Feb 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-lifecycle-management/</guid>
      <description>API 라이프사이클 관리는 API의 계획 단계부터 폐기 단계까지 전체 수명주기를 체계적으로 관리하는 프로세스이다</description>
    </item>
    <item>
      <title>Short Polling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns-and-integration/communication-patterns/hybrid-communication/webhooks-vs-polling/polling/types/short-polling/</link>
      <pubDate>Sat, 01 Feb 2025 03:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns-and-integration/communication-patterns/hybrid-communication/webhooks-vs-polling/polling/types/short-polling/</guid>
      <description>Short polling은 클라이언트가 주기적으로 서버에 HTTP 요청을 보내 새로운 데이터가 있는지 확인하는 방식이다.</description>
    </item>
    <item>
      <title>Long Polling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns-and-integration/communication-patterns/hybrid-communication/webhooks-vs-polling/polling/types/long-polling/</link>
      <pubDate>Sat, 01 Feb 2025 03:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns-and-integration/communication-patterns/hybrid-communication/webhooks-vs-polling/polling/types/long-polling/</guid>
      <description>Long polling은 클라이언트가 서버에 HTTP 요청을 보내고, 서버는 새로운 정보가 있을 때까지 응답을 보류하는 방식이다.</description>
    </item>
    <item>
      <title>API key authentication</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/api-key-authentication/</link>
      <pubDate>Sat, 01 Feb 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/api-key-authentication/</guid>
      <description>API 키는 API에 접근하려는 클라이언트를 식별하고 인증하는 데 사용되는 고유한 문자열</description>
    </item>
    <item>
      <title>Messaging Queues</title>
      <link>https://buenhyden.github.io/posts/system-design/distributed-systems/message-oriented-systems/message-processing-systems/message-queues/</link>
      <pubDate>Sat, 01 Feb 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/distributed-systems/message-oriented-systems/message-processing-systems/message-queues/</guid>
      <description>메시징 큐는 비동기 통신을 가능하게 하는 중간 저장소로, 메시지 생산자(Producer)와 소비자(Consumer) 사이에서 데이터를 버퍼링하는 역할을 한다.</description>
    </item>
    <item>
      <title>Webhooks vs. Polling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns-and-integration/communication-patterns/hybrid-communication/webhooks-vs-polling/</link>
      <pubDate>Fri, 31 Jan 2025 15:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns-and-integration/communication-patterns/hybrid-communication/webhooks-vs-polling/</guid>
      <description>웹 애플리케이션에서 외부 시스템과 통신하거나 상태 변화를 감지하는 방식에는 대표적으로 웹훅(Webhooks)과 폴링(Polling)이 있다.</description>
    </item>
    <item>
      <title>inverted index</title>
      <link>https://buenhyden.github.io/posts/system-design/system-components/application-and-execution-core/search-engines/search-engine-fundamentals/inverted-index/</link>
      <pubDate>Thu, 02 Jan 2025 05:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/system-components/application-and-execution-core/search-engines/search-engine-fundamentals/inverted-index/</guid>
      <description>역인덱스는 이 관계를 &amp;#39;뒤집어&amp;#39; 단어나 용어를 키로 하고, 그 단어가 등장하는 문서들의 목록을 값으로 저장한다.</description>
    </item>
    <item>
      <title>RFC 9457</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/resource-oriented/rest/error-handling/rfc-9457/</link>
      <pubDate>Sun, 15 Dec 2024 14:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/resource-oriented/rest/error-handling/rfc-9457/</guid>
      <description>**RFC 9457**은 그 후속 버전으로, **HTTP API의 오류 응답을 구조화된 형식으로 전달하기 위한 표준**이다.</description>
    </item>
    <item>
      <title>RFC 7807</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/resource-oriented/rest/error-handling/rfc-7807/</link>
      <pubDate>Sun, 15 Dec 2024 14:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/resource-oriented/rest/error-handling/rfc-7807/</guid>
      <description>RFC 7807은 HTTP API에서 오류 상황을 일관되고 기계가 처리하기 쉬운 방식으로 전달하기 위한 표준이다.</description>
    </item>
    <item>
      <title>DAC</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authorization/authorization-models/dac/</link>
      <pubDate>Wed, 06 Nov 2024 23:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authorization/authorization-models/dac/</guid>
      <description>리소스의 소유자가 해당 리소스에 대한다른  사용자들의 접근 권한을 직접 제어할 수 있는 접근 제어 방식</description>
    </item>
    <item>
      <title>MAC</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authorization/authorization-models/mac/</link>
      <pubDate>Wed, 06 Nov 2024 23:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authorization/authorization-models/mac/</guid>
      <description>시스템 전체에 걸쳐 중앙에서 정의된 보안 정책에 따라 접근 권한을 강제로 적용하는 접근 제어 방식.</description>
    </item>
    <item>
      <title>PBAC</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authorization/authorization-models/pbac/</link>
      <pubDate>Wed, 06 Nov 2024 23:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authorization/authorization-models/pbac/</guid>
      <description>중앙에서 정의된 정책들을 기반으로 접근 권한을 결정하는 접근 제어 방식.  각 정책은 &amp;#34;누가&amp;#34;, &amp;#34;무엇을&amp;#34;, &amp;#34;어떤 조건에서&amp;#34; 할 수 있는지를 정의하며, 이러한 정책들은 프로그래밍 방식으로 표현되고 평가된다.</description>
    </item>
    <item>
      <title>ABAC</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authorization/authorization-models/abac/</link>
      <pubDate>Wed, 06 Nov 2024 23:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authorization/authorization-models/abac/</guid>
      <description>ABAC는 주체(사용자), 객체(리소스), 작업, 환경 조건의 속성을 조합하여 접근 제어 정책을 정의한다.</description>
    </item>
    <item>
      <title>RBAC</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authorization/authorization-models/rbac/</link>
      <pubDate>Wed, 06 Nov 2024 23:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authorization/authorization-models/rbac/</guid>
      <description>RBAC는 &amp;#34;만약 ~라면 ~할 수 있다&amp;#34;와 같은 형태의 규칙들을 사용하여 접근 권한을 제어한다. 각 규칙은 조건부와 결과부로 구성되며, 시스템은 이러한 규칙들을 순차적으로 평가하여 접근 허용 여부를 결정한다.</description>
    </item>
    <item>
      <title>Authorization Models</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authorization/authorization-models/</link>
      <pubDate>Wed, 06 Nov 2024 11:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authorization/authorization-models/</guid>
      <description>API 권한 부여(Authorization)는 인증(Authentication)이 완료된 후, 사용자가 어떤 리소스에 접근할 수 있는지를 결정하는 중요한 보안 메커니즘이다.</description>
    </item>
    <item>
      <title>JWT authentication</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/jwt/</link>
      <pubDate>Wed, 06 Nov 2024 11:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/implementations/token-based-authentication/jwt/</guid>
      <description>JSON Web Token(JWT)은 웹 애플리케이션과 서비스 간에 안전하게 정보를 전송하기 위한 개방형 표준(RFC 7519)이다.</description>
    </item>
    <item>
      <title>Authentication</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/</link>
      <pubDate>Wed, 06 Nov 2024 05:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/access-control/authentication/</guid>
      <description>API 인증은 API를 사용하는 클라이언트의 신원을 확인하고 승인된 사용자만 API 리소스에 접근할 수 있도록 보장하는 핵심 보안 메커니즘이다.</description>
    </item>
    <item>
      <title>Payment Card Industry Data Security Standard (PCI DSS)</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/governance-and-management/compliance-and-regulations/pci-dss/</link>
      <pubDate>Sun, 27 Oct 2024 13:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/governance-and-management/compliance-and-regulations/pci-dss/</guid>
      <description>PCI DSS(Payment Card Industry Data Security Standard)는 신용카드 결제 과정에서 카드 소유자의 데이터를 안전하게 보호하기 위해 주요 글로벌 카드 브랜드(Visa, MasterCard, American Express, Discover, JCB)가 공동으로 제정한 국제 보안 표준이다.</description>
    </item>
    <item>
      <title>데이터베이스 클러스터링 (Clustering)과 레플리케이션(Replication)</title>
      <link>https://buenhyden.github.io/posts/system-design/database-systems/database-scaling-and-performance/horizontal-scaling/database-clustering-and-replication/</link>
      <pubDate>Fri, 25 Oct 2024 15:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/database-systems/database-scaling-and-performance/horizontal-scaling/database-clustering-and-replication/</guid>
      <description>데이터베이스 클러스터링 (Clustering)과 레플리케이션(Replication)은 데이터베이스의 가용성과 성능을 향상시키는 전략으로, 각각의 목적과 구현 방식에서 차이가 있다.</description>
    </item>
    <item>
      <title>RabbitMQ</title>
      <link>https://buenhyden.github.io/posts/tools-reference/communication-technologies/message-brokers/rabbitmq/</link>
      <pubDate>Fri, 25 Oct 2024 00:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/communication-technologies/message-brokers/rabbitmq/</guid>
      <description>rlang 언어로 작성된 오픈 소스 메시지 브로커 시스템으로, AMQP(Advanced Message Queuing Protocol)를 구현하고 있다</description>
    </item>
    <item>
      <title>PostgreSQL</title>
      <link>https://buenhyden.github.io/posts/tools-reference/database-systems/rdbms/postgresql/</link>
      <pubDate>Thu, 24 Oct 2024 15:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/database-systems/rdbms/postgresql/</guid>
      <description>오픈 소스 관계형 데이터베이스 관리 시스템</description>
    </item>
    <item>
      <title>프로시저 (Procedure)</title>
      <link>https://buenhyden.github.io/posts/tools-reference/database-systems/rdbms/sql/sql-advanced/stored-procedures-and-functions/procedure/</link>
      <pubDate>Thu, 24 Oct 2024 09:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/database-systems/rdbms/sql/sql-advanced/stored-procedures-and-functions/procedure/</guid>
      <description>데이터베이스 프로시저(Database Procedure)는 데이터베이스 내에 저장되고 실행되는 일련의 SQL 문들의 집합이다.</description>
    </item>
    <item>
      <title>keyword</title>
      <link>https://buenhyden.github.io/posts/tools-reference/database-systems/rdbms/sql/syntax/keywords/</link>
      <pubDate>Thu, 24 Oct 2024 07:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/database-systems/rdbms/sql/syntax/keywords/</guid>
      <description>SQL(Structured Query Language)는 데이터베이스를 관리하고 조작하기 위한 표준 언어로, 다양한 **키워드**를 통해 데이터 정의, 조작, 제어, 트랜잭션 관리 등을 수행한다.</description>
    </item>
    <item>
      <title>RDBMS</title>
      <link>https://buenhyden.github.io/posts/tools-reference/database-systems/rdbms/</link>
      <pubDate>Thu, 24 Oct 2024 01:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/database-systems/rdbms/</guid>
      <description>데이터를 행과 열로 이루어진 테이블 형태로 저장하고 관리하는 시스템</description>
    </item>
    <item>
      <title>SQL (Structured Query Language)</title>
      <link>https://buenhyden.github.io/posts/tools-reference/database-systems/rdbms/sql/syntax/</link>
      <pubDate>Thu, 24 Oct 2024 01:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/database-systems/rdbms/sql/syntax/</guid>
      <description>관계형 데이터베이스를 관리하고 조작하기 위한 표준화된 프로그래밍 언어.</description>
    </item>
    <item>
      <title>Column Oriented</title>
      <link>https://buenhyden.github.io/posts/tools-reference/database-systems/nosql-databases/column-family-stores/</link>
      <pubDate>Wed, 23 Oct 2024 12:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/database-systems/nosql-databases/column-family-stores/</guid>
      <description>컬럼형 데이터베이스(Columnar database) 또는 컬럼 지향 데이터베이스(Column-oriented database)는 NoSQL 데이터베이스의 한 유형으로, 데이터를 행이 아닌 열 단위로 저장하는 특징을 가지고 있다.</description>
    </item>
    <item>
      <title>Graph</title>
      <link>https://buenhyden.github.io/posts/tools-reference/database-systems/nosql-databases/graph-databases/</link>
      <pubDate>Wed, 23 Oct 2024 12:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/database-systems/nosql-databases/graph-databases/</guid>
      <description>그래프 데이터베이스는 NoSQL 데이터베이스의 한 유형으로, 데이터를 노드(Node)와 엣지(Edge)로 구성된 그래프 구조로 저장하고 관리하는 데이터베이스 시스템이다.</description>
    </item>
    <item>
      <title>Time-Series</title>
      <link>https://buenhyden.github.io/posts/tools-reference/database-systems/nosql-databases/time-series-databases/</link>
      <pubDate>Wed, 23 Oct 2024 12:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/database-systems/nosql-databases/time-series-databases/</guid>
      <description>시계열 데이터베이스(Time Series Database, TSDB)는 NoSQL 데이터베이스의 한 종류로, 시간에 따라 변화하는 데이터를 효율적으로 저장하고 관리하기 위해 특별히 설계된 데이터베이스 시스템이다.</description>
    </item>
    <item>
      <title>NoSQL</title>
      <link>https://buenhyden.github.io/posts/tools-reference/database-systems/nosql-databases/</link>
      <pubDate>Wed, 23 Oct 2024 06:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/database-systems/nosql-databases/</guid>
      <description>NoSQL(Not Only SQL)은 전통적인 관계형 데이터베이스와는 다른 방식으로 데이터를 저장하고 처리하는 데이터베이스 시스템이다.</description>
    </item>
    <item>
      <title>Document Oriented</title>
      <link>https://buenhyden.github.io/posts/tools-reference/database-systems/nosql-databases/document-stores/</link>
      <pubDate>Wed, 23 Oct 2024 06:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/database-systems/nosql-databases/document-stores/</guid>
      <description>Document-Oriented Database는 NoSQL 데이터베이스의 한 유형으로, 데이터를 문서 형태로 저장하고 관리하는 시스템이다.</description>
    </item>
    <item>
      <title>Key-Value</title>
      <link>https://buenhyden.github.io/posts/tools-reference/database-systems/nosql-databases/key-value-stores/</link>
      <pubDate>Wed, 23 Oct 2024 06:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/database-systems/nosql-databases/key-value-stores/</guid>
      <description>In-Memory 데이터베이스는 데이터를 주 메모리(RAM)에 저장하고 관리하는 NoSQL 데이터베이스 시스템이다.</description>
    </item>
    <item>
      <title>Valkey</title>
      <link>https://buenhyden.github.io/posts/tools-reference/database-systems/nosql-databases/key-value-stores/valkey/</link>
      <pubDate>Wed, 23 Oct 2024 01:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/tools-reference/database-systems/nosql-databases/key-value-stores/valkey/</guid>
      <description>Valkey는 선택적 내구성을 갖춘 분산형 인메모리 키-값 데이터베이스, 캐시 및 메시지 브로커로 사용되는 오픈 소스 인메모리 스토리지.</description>
    </item>
    <item>
      <title>Cardinality</title>
      <link>https://buenhyden.github.io/posts/system-design/database-systems/data-modeling/cardinality/</link>
      <pubDate>Tue, 22 Oct 2024 15:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/database-systems/data-modeling/cardinality/</guid>
      <description>두 엔티티 간의 최대 연관성 혹은 특정 컬럼에 존재하는 고유한 값의 개수를 의미한다.</description>
    </item>
    <item>
      <title>데이터베이스 캐싱 (Database Caching)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/performance-and-scalability/performance-optimization/caching-strategies/database-caching/</link>
      <pubDate>Tue, 22 Oct 2024 06:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/performance-and-scalability/performance-optimization/caching-strategies/database-caching/</guid>
      <description>자주 사용되는 데이터를 빠르게 접근할 수 있는 메모리에 임시로 저장하는 기술</description>
    </item>
    <item>
      <title>Implementations of Search Engine</title>
      <link>https://buenhyden.github.io/posts/system-design/system-components/application-and-execution-core/search-engines/search-implementations/</link>
      <pubDate>Tue, 22 Oct 2024 06:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/system-components/application-and-execution-core/search-engines/search-implementations/</guid>
      <description>Elasticsearch는 Apache Lucene 기반의 오픈소스 검색엔진이며, Opensearch는 Elasticsearch의 포크 버전</description>
    </item>
    <item>
      <title>데이터베이스 인덱싱 (Database Indexing)</title>
      <link>https://buenhyden.github.io/posts/system-design/database-systems/storage-and-indexing/indexing/database-indexing/</link>
      <pubDate>Tue, 22 Oct 2024 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/database-systems/storage-and-indexing/indexing/database-indexing/</guid>
      <description>인덱스는 테이블의 특정 컬럼에 대한 검색을 빠르게 수행할 수 있도록 도와주는 자료 구조</description>
    </item>
    <item>
      <title>Web Infrastructure</title>
      <link>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/infrastructure/web-infrastructure/</link>
      <pubDate>Mon, 21 Oct 2024 05:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/infrastructure/web-infrastructure/</guid>
      <description>백엔드 웹 인프라의 핵심 구성 요소와 아키텍처에 대한 종합적인 개요입니다. 웹 서버, 웹 애플리케이션 서버, 로드 밸런서, 리버스 프록시, 캐싱 메커니즘 및 콘텐츠 전송 네트워크(CDN)를 다룹니다. 효율적이고 확장 가능하며 안정적인 웹 애플리케이션 인프라를 설계하고 구축하는 데 필요한 지식을 제공합니다.</description>
    </item>
    <item>
      <title>HATEOAS (Hypermedia As The Engine Of Application State)</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/hypermedia-apis/hateoas/</link>
      <pubDate>Sat, 19 Oct 2024 07:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/hypermedia-apis/hateoas/</guid>
      <description>RESTful API 설계의 중요한 개념으로, 클라이언트와 서버 간의 동적이고 유연한 상호작용을 가능하게 하는 방식.</description>
    </item>
    <item>
      <title>GraphQL</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/query-oriented/graphql/</link>
      <pubDate>Sat, 19 Oct 2024 03:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/query-oriented/graphql/</guid>
      <description>GraphQL은 API를 위한 쿼리 언어이자 서버 측에서 데이터를 효율적으로 가져오기 위한 런타임 환경이다</description>
    </item>
    <item>
      <title>gRPC API</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/rpc-oriented/rpc-based/grpc/</link>
      <pubDate>Sat, 19 Oct 2024 03:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/rpc-oriented/rpc-based/grpc/</guid>
      <description>gRPC는 Google에서 개발한 고성능, 오픈소스 RPC(Remote Procedure Call) 프레임워크이다.</description>
    </item>
    <item>
      <title>RESTful API</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/resource-oriented/rest/</link>
      <pubDate>Sat, 19 Oct 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/resource-oriented/rest/</guid>
      <description>REST는 네트워크 시스템, 특히 웹에서 자원을 정의하고 접근하는 방법을 제공한다. 그 이름에서 알 수 있듯이 핵심은 &amp;#34;표현(Representation)&amp;#34;과 &amp;#34;상태 전이(State Transfer)&amp;#34;이다.</description>
    </item>
    <item>
      <title>SOAP API</title>
      <link>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/rpc-oriented/soap/soap-apis/</link>
      <pubDate>Sat, 19 Oct 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/api-design-and-architecture/api-styles/rpc-oriented/soap/soap-apis/</guid>
      <description>SOAP(Simple Object Access Protocol)은 네트워크를 통해 구조화된 정보를 교환하기 위한 메시지 프로토콜이다.</description>
    </item>
  </channel>
</rss>
