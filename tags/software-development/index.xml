<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Software-Development on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/software-development/</link>
    <description>Recent content in Software-Development on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.8</generator>
    <language>en</language>
    <lastBuildDate>Sat, 21 Sep 2024 05:12:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/software-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>소프트웨어 개발 수명주기(Software Development Life Cycle, SDLC)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/</link>
      <pubDate>Fri, 20 Sep 2024 05:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/</guid>
      <description>소프트웨어의 계획, 개발, 테스트, 배포, 유지보수 등 전체 과정을 단계별로 정의한 체계적인 절차</description>
    </item>
    <item>
      <title>소프트웨어 개발 프로세스 (Software Development Process)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/</link>
      <pubDate>Sat, 21 Sep 2024 05:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/</guid>
      <description>소프트웨어를 계획, 개발, 테스트 및 배포하는 전체 과정을 설명하는 체계적인 프로세스</description>
    </item>
    <item>
      <title>1. 계획 (Planning)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-phases/1-planning/</link>
      <pubDate>Fri, 20 Sep 2024 00:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-phases/1-planning/</guid>
      <description>프로젝트의 방향성과 범위를 설정하고, 자원과 일정을 계획하며, 위험 요소를 식별하고 관리 전략을 수립한다.</description>
    </item>
    <item>
      <title>2. 요구사항 수집 및 분석 (Requirements Gathering and Analysis)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-phases/2-requirements-gathering-and-analysis/</link>
      <pubDate>Fri, 20 Sep 2024 00:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-phases/2-requirements-gathering-and-analysis/</guid>
      <description>이해관계자의 요구사항을 수집하고 분석하여 시스템 요구사항을 정의하는 단계</description>
    </item>
    <item>
      <title>3. 설계 (Design)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-phases/3-design/</link>
      <pubDate>Fri, 20 Sep 2024 00:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-phases/3-design/</guid>
      <description>요구사항을 바탕으로 시스템의 구조와 세부 사항을 설계하는 단계</description>
    </item>
    <item>
      <title>4. 구현 (Implementation)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-phases/4-implementation/</link>
      <pubDate>Fri, 20 Sep 2024 00:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-phases/4-implementation/</guid>
      <description>설계를 바탕으로 실제 코드를 작성하는 단계</description>
    </item>
    <item>
      <title>5. 테스트 (Testing)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-phases/5-testing/</link>
      <pubDate>Fri, 20 Sep 2024 00:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-phases/5-testing/</guid>
      <description>개발된 소프트웨어의 품질을 검증하고 결함을 식별하는 단계</description>
    </item>
    <item>
      <title>6. 배포 (Deployment)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-phases/6-deployment/</link>
      <pubDate>Fri, 20 Sep 2024 00:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-phases/6-deployment/</guid>
      <description>완성된 소프트웨어를 실제 운영 환경에 설치하고 사용자에게 제공하는 단계</description>
    </item>
    <item>
      <title>7. 유지보수 (Maintenance)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-phases/7-maintenance/</link>
      <pubDate>Fri, 20 Sep 2024 00:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-phases/7-maintenance/</guid>
      <description>배포된 소프트웨어를 지속적으로 관리하고 개선하는 단계</description>
    </item>
    <item>
      <title>Concurrent Engineering Model</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-methodologies/concurrent-engineering-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-methodologies/concurrent-engineering-model/</guid>
      <description>소프트웨어 개발 프로세스를 최적화하고 효율성을 높이기 위한 접근 방식</description>
    </item>
    <item>
      <title>Domain-Driven Design</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-methodologies/domain-driven-design/</link>
      <pubDate>Sat, 21 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-methodologies/domain-driven-design/</guid>
      <description>복잡한 소프트웨어를 개발할 때 비즈니스 도메인을 중심으로 설계와 개발을 진행하는 방법론</description>
    </item>
    <item>
      <title>Formal Methods Model</title>
      <link>https://buenhyden.github.io/posts/software-engineering/quality-assurance/verification-and-validation/formal-methods-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/quality-assurance/verification-and-validation/formal-methods-model/</guid>
      <description>소프트웨어 개발에서 수학적 기법을 사용하여 시스템을 명세, 개발, 분석 및 검증하는 엄격한 접근 방식</description>
    </item>
    <item>
      <title>Incremental Model</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/incremental-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/incremental-model/</guid>
      <description>전체 시스템을 여러 개의 작은 부분(증분)으로 나누어 순차적으로 개발하고 제공하는 접근 방식.</description>
    </item>
    <item>
      <title>Incremental Model</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/traditional-models/incremental-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/traditional-models/incremental-model/</guid>
      <description>전체 시스템을 여러 개의 작은 부분(증분)으로 나누어 순차적으로 개발하고 제공하는 접근 방식.</description>
    </item>
    <item>
      <title>DevOps Model</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/development-practices/devops-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/development-practices/devops-model/</guid>
      <description>소프트웨어 개발(Development)과 IT 운영(Operations)을 통합하는 방법론으로, 소프트웨어 개발 프로세스를 개선하고 더 빠르고 안정적인 제품 배포를 가능하게 한다.</description>
    </item>
    <item>
      <title>Prototyping Model</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/modern-models/prototyping-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/modern-models/prototyping-model/</guid>
      <description>최종 제품의 초기 버전 또는 모형을 만들어 사용자의 피드백을 받고 요구사항을 명확히 하는 방법.</description>
    </item>
    <item>
      <title>Prototyping Model</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/prototyping-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/prototyping-model/</guid>
      <description>최종 제품의 초기 버전 또는 모형을 만들어 사용자의 피드백을 받고 요구사항을 명확히 하는 방법.</description>
    </item>
    <item>
      <title>Rapid Application Development</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/modern-models/rapid-application-development/</link>
      <pubDate>Sat, 21 Sep 2024 00:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/modern-models/rapid-application-development/</guid>
      <description>빠른 프로토타이핑과 반복적인 개발을 통해 신속하게 애플리케이션을 구축하는 접근 방식</description>
    </item>
    <item>
      <title>Rapid Application Development</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/rapid-application-development/</link>
      <pubDate>Sat, 21 Sep 2024 00:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/rapid-application-development/</guid>
      <description>빠른 프로토타이핑과 반복적인 개발을 통해 신속하게 애플리케이션을 구축하는 접근 방식</description>
    </item>
    <item>
      <title>Iterative Model</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/iterative-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/iterative-model/</guid>
      <description>전체 시스템을 여러 개의 작은 부분으로 나누어 반복적으로 개발하고 개선하는 방법</description>
    </item>
    <item>
      <title>Iterative Model</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/traditional-models/iterative-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/traditional-models/iterative-model/</guid>
      <description>전체 시스템을 여러 개의 작은 부분으로 나누어 반복적으로 개발하고 개선하는 방법</description>
    </item>
    <item>
      <title>Spiral Model</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/modern-models/spiral-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/modern-models/spiral-model/</guid>
      <description>위험 분석을 중심으로 반복적인 개발을 수행하며, 각 반복 주기마다 위험 요소를 평가하고 대응한다.</description>
    </item>
    <item>
      <title>Spiral Model</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/spiral-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/spiral-model/</guid>
      <description>위험 분석을 중심으로 반복적인 개발을 수행하며, 각 반복 주기마다 위험 요소를 평가하고 대응한다.</description>
    </item>
    <item>
      <title>V Model</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/traditional-models/v-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/traditional-models/v-model/</guid>
      <description>개발 단계와 테스트 단계를 병행하여 진행하는 검증(Verification)과 확인(Validation) 중심의 접근 방식이다.</description>
    </item>
    <item>
      <title>V Model</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/v-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/v-model/</guid>
      <description>개발 단계와 테스트 단계를 병행하여 진행하는 검증(Verification)과 확인(Validation) 중심의 접근 방식이다.</description>
    </item>
    <item>
      <title>Waterfall Model</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/traditional-models/waterfall-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/traditional-models/waterfall-model/</guid>
      <description>각 단계를 순차적으로 진행하며, 이전 단계가 완료되어야 다음 단계로 넘어가는 전통적인 모델.</description>
    </item>
    <item>
      <title>Waterfall Model</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/waterfall-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-engineering-fundamentals/software-development-lifecycle/sdlc-models/waterfall-model/</guid>
      <description>각 단계를 순차적으로 진행하며, 이전 단계가 완료되어야 다음 단계로 넘어가는 전통적인 모델.</description>
    </item>
  </channel>
</rss>
