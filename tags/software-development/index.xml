<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software-Development :: Tag :: hyunyoun's Blog</title><link>https://buenhyden.github.io/tags/software-development.html</link><description/><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Wed, 01 Jan 2025 10:05:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/software-development/index.xml" rel="self" type="application/rss+xml"/><item><title>소프트웨어 개발 수명주기(Software Development Life Cycle, SDLC)</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle.html</link><pubDate>Tue, 01 Oct 2024 05:12:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle.html</guid><description>소프트웨어의 계획, 개발, 테스트, 배포, 유지보수 등 전체 과정을 단계별로 정의한 체계적인 절차</description></item><item><title>1. 계획 (Planning)</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle/1-planning.html</link><pubDate>Tue, 01 Oct 2024 00:52:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle/1-planning.html</guid><description>프로젝트의 방향성과 범위를 설정하고, 자원과 일정을 계획하며, 위험 요소를 식별하고 관리 전략을 수립한다.</description></item><item><title>2. 요구사항 수집 및 분석 (Requirements Gathering and Analysis)</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle/2-requirements-gathering-and-analysis.html</link><pubDate>Tue, 01 Oct 2024 00:53:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle/2-requirements-gathering-and-analysis.html</guid><description>이해관계자의 요구사항을 수집하고 분석하여 시스템 요구사항을 정의하는 단계</description></item><item><title>소프트웨어 개발 프로세스 (Software Development Process)</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model.html</link><pubDate>Sun, 29 Sep 2024 05:12:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model.html</guid><description>소프트웨어를 계획, 개발, 테스트 및 배포하는 전체 과정을 설명하는 체계적인 프로세스</description></item><item><title>사이트 신뢰성 엔지니어링 (Site Reliability Engineering, SRE)</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/site-reliability-engineering.html</link><pubDate>Fri, 27 Dec 2024 09:18:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/site-reliability-engineering.html</guid><description>IT 운영에 대한 소프트웨어 엔지니어링 접근 방식</description></item><item><title>3. 설계 (Design)</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle/3-design.html</link><pubDate>Tue, 01 Oct 2024 00:53:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle/3-design.html</guid><description>요구사항을 바탕으로 시스템의 구조와 세부 사항을 설계하는 단계</description></item><item><title>4. 구현 (Implementation)</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle/4-implementation.html</link><pubDate>Tue, 01 Oct 2024 00:53:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle/4-implementation.html</guid><description>설계를 바탕으로 실제 코드를 작성하는 단계</description></item><item><title>DevOps</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops.html</link><pubDate>Sat, 28 Sep 2024 06:26:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops.html</guid><description>소프트웨어 개발(Development)과 IT 운영(Operations)을 통합하는 문화, 철학, 방법론</description></item><item><title>5. 테스트 (Testing)</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle/5-testing.html</link><pubDate>Tue, 01 Oct 2024 00:55:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle/5-testing.html</guid><description>개발된 소프트웨어의 품질을 검증하고 결함을 식별하는 단계</description></item><item><title>6. 배포 (Deployment)</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle/6-deployment.html</link><pubDate>Tue, 01 Oct 2024 00:55:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle/6-deployment.html</guid><description>완성된 소프트웨어를 실제 운영 환경에 설치하고 사용자에게 제공하는 단계</description></item><item><title>7. 유지보수 (Maintenance)</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle/7-maintenance.html</link><pubDate>Tue, 01 Oct 2024 00:56:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle/7-maintenance.html</guid><description>배포된 소프트웨어를 지속적으로 관리하고 개선하는 단계</description></item><item><title>Circuit Breaker Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/circuit-breaker-pattern.html</link><pubDate>Wed, 01 Jan 2025 10:05:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/circuit-breaker-pattern.html</guid><description>Circuit Breaker Pattern 참고 및 출처</description></item><item><title>Monitoring and Observability</title><link>https://buenhyden.github.io/til/2024/12/monitoring-and-observability.html</link><pubDate>Wed, 25 Dec 2024 08:23:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/til/2024/12/monitoring-and-observability.html</guid><description>Observability는 시스템의 내부 상태를 외부 출력을 통해 이해하고 추론할 수 있는 능력을 말하고, Monitoring은 시스템의 동작과 성능을 지속적으로 관찰하고 추적하는 활동을 말한다.</description></item><item><title>Twelve-Factor App methodology</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/twelve-factor-app-methodology.html</link><pubDate>Mon, 23 Dec 2024 01:40:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/twelve-factor-app-methodology.html</guid><description>클라우드 네이티브 애플리케이션을 구축하기 위한 12가지 모범 사례를 제시</description></item><item><title>Decompose by Business Capability</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-business-capability.html</link><pubDate>Sun, 22 Dec 2024 01:20:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-business-capability.html</guid><description>Decompose by Business Capability 참고 및 출처</description></item><item><title>Decompose by Subdomain</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-subdomain.html</link><pubDate>Sun, 22 Dec 2024 01:20:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-subdomain.html</guid><description>Decompose by Subdomain 참고 및 출처</description></item><item><title>Decompose by Transactions</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-transactions.html</link><pubDate>Sun, 22 Dec 2024 01:20:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-transactions.html</guid><description>Decompose by Transactions 참고 및 출처</description></item><item><title>Strangler Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/strangler-pattern.html</link><pubDate>Sun, 22 Dec 2024 01:20:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/strangler-pattern.html</guid><description>Strangler Pattern 참고 및 출처</description></item><item><title>CQRS Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/cqrs-pattern.html</link><pubDate>Wed, 27 Nov 2024 10:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/cqrs-pattern.html</guid><description>CQRS Pattern 참고 및 출처</description></item><item><title>Saga Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/saga-pattern.html</link><pubDate>Wed, 27 Nov 2024 10:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/saga-pattern.html</guid><description>Saga Pattern 참고 및 출처</description></item><item><title>Database per Service Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/database-per-service-pattern.html</link><pubDate>Wed, 27 Nov 2024 10:05:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/database-per-service-pattern.html</guid><description>Database per Service Pattern 참고 및 출처</description></item><item><title>Event Sourcing</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/event-sourcing.html</link><pubDate>Wed, 27 Nov 2024 01:54:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/event-sourcing.html</guid><description>Event Sourcing 참고 및 출처</description></item><item><title>Shared Database per Service</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/shared-database-per-service.html</link><pubDate>Wed, 27 Nov 2024 01:54:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/shared-database-per-service.html</guid><description>Shared Database per Service 참고 및 출처</description></item><item><title>Metric</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability/metric.html</link><pubDate>Sat, 16 Nov 2024 02:27:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability/metric.html</guid><description>Metric는 시스템의 상태, 동작, 성능 등을 나타내는 수치화된 측정값</description></item><item><title>Trace</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability/trace.html</link><pubDate>Sat, 16 Nov 2024 02:27:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability/trace.html</guid><description>분산 시스템에서 요청이나 트랜잭션이 여러 서비스와 컴포넌트를 통과하는 전체 여정을 기록한 것</description></item><item><title>Log</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability/log.html</link><pubDate>Sat, 16 Nov 2024 02:26:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability/log.html</guid><description>Log는 애플리케이션 실행 시 생성되는 텍스트 기반의 기록이다. 이는 구조화된 형식(예: JSON)이나 비구조화된 텍스트 형식으로 제공될 수 있다.</description></item><item><title>Observability</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability.html</link><pubDate>Sat, 16 Nov 2024 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability.html</guid><description>외부 출력(로그, 메트릭, 트레이스)을 분석하여 시스템의 내부 상태를 이해하는 방식으로 단순한 모니터링을 넘어 텔레메트리 데이터를 수집, 분석, 해석 및 시각화한다.</description></item><item><title>IaC</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/iac.html</link><pubDate>Thu, 17 Oct 2024 00:16:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/iac.html</guid><description>전통적인 수동 인프라 구성 방식에서 벗어나 프로그래밍 언어를 사용하여 IT 인프라를 자동화하고 관리하는 접근법</description></item><item><title>Concurrent Engineering Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/concurrent-engineering-model.html</link><pubDate>Mon, 30 Sep 2024 00:49:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/concurrent-engineering-model.html</guid><description>소프트웨어 개발 프로세스를 최적화하고 효율성을 높이기 위한 접근 방식</description></item><item><title>Domain-Driven Development</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/domain-driven-development.html</link><pubDate>Mon, 30 Sep 2024 00:49:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/domain-driven-development.html</guid><description>복잡한 소프트웨어를 개발할 때 비즈니스 도메인을 중심으로 설계와 개발을 진행하는 방법론</description></item><item><title>Test-Driven Development</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/test-driven-development.html</link><pubDate>Mon, 30 Sep 2024 00:49:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/test-driven-development.html</guid><description>실제 코드를 작성하기 전에 테스트 코드를 먼저 작성하는 접근 방식</description></item><item><title>Iterative Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/iterative-model.html</link><pubDate>Mon, 30 Sep 2024 00:47:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/iterative-model.html</guid><description>전체 시스템을 여러 개의 작은 부분으로 나누어 반복적으로 개발하고 개선하는 방법</description></item><item><title>Spiral Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/spiral-model.html</link><pubDate>Mon, 30 Sep 2024 00:47:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/spiral-model.html</guid><description>위험 분석을 중심으로 반복적인 개발을 수행하며, 각 반복 주기마다 위험 요소를 평가하고 대응한다.</description></item><item><title>Formal Methods Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/formal-methods-model.html</link><pubDate>Sun, 29 Sep 2024 00:49:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/formal-methods-model.html</guid><description>소프트웨어 개발에서 수학적 기법을 사용하여 시스템을 명세, 개발, 분석 및 검증하는 엄격한 접근 방식</description></item><item><title>Incremental Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/incremental-model.html</link><pubDate>Sun, 29 Sep 2024 00:49:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/incremental-model.html</guid><description>전체 시스템을 여러 개의 작은 부분(증분)으로 나누어 순차적으로 개발하고 제공하는 접근 방식.</description></item><item><title>행동 주도 개발 (Behavior-Driven Development, BDD)</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/behavior-driven-development.html</link><pubDate>Sun, 29 Sep 2024 00:49:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/behavior-driven-development.html</guid><description>테스트 주도 개발(TDD)에서 파생된 소프트웨어 개발 방법론으로, 사용자의 행동과 비즈니스 가치에 초점을 맞춘다.</description></item><item><title>DevOps Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/devops-model.html</link><pubDate>Sun, 29 Sep 2024 00:48:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/devops-model.html</guid><description>소프트웨어 개발(Development)과 IT 운영(Operations)을 통합하는 방법론으로, 소프트웨어 개발 프로세스를 개선하고 더 빠르고 안정적인 제품 배포를 가능하게 한다.</description></item><item><title>Prototyping Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/prototyping-model.html</link><pubDate>Sun, 29 Sep 2024 00:48:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/prototyping-model.html</guid><description>최종 제품의 초기 버전 또는 모형을 만들어 사용자의 피드백을 받고 요구사항을 명확히 하는 방법.</description></item><item><title>Rapid Application Development</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/rapid-application-development.html</link><pubDate>Sun, 29 Sep 2024 00:48:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/rapid-application-development.html</guid><description>빠른 프로토타이핑과 반복적인 개발을 통해 신속하게 애플리케이션을 구축하는 접근 방식</description></item><item><title>Agile Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/agile-model.html</link><pubDate>Sun, 29 Sep 2024 00:47:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/agile-model.html</guid><description>소프트웨어 개발에서 사용되는 반복적이고 점진적인 접근 방식으로  빠르게 변화하는 요구사항에 유연하게 대응하며 고객 만족을 최우선으로 한다.</description></item><item><title>V Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/v-model.html</link><pubDate>Sun, 29 Sep 2024 00:47:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/v-model.html</guid><description>개발 단계와 테스트 단계를 병행하여 진행하는 검증(Verification)과 확인(Validation) 중심의 접근 방식이다.</description></item><item><title>Waterfall Model</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/waterfall-model.html</link><pubDate>Sun, 29 Sep 2024 00:46:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/waterfall-model.html</guid><description>각 단계를 순차적으로 진행하며, 이전 단계가 완료되어야 다음 단계로 넘어가는 전통적인 모델.</description></item><item><title>Jenkins</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/jenkins.html</link><pubDate>Tue, 24 Sep 2024 15:44:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/jenkins.html</guid><description>오픈 소스 자동화 서버로, 주로 지속적 통합(CI)과 지속적 배포(CD) 프로세스를 자동화하는 데 사용되는 도구</description></item><item><title>Github Actions</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/github-actions.html</link><pubDate>Tue, 24 Sep 2024 03:10:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/github-actions.html</guid><description>GitHub에서 각각 제공하는 CI/CD(Continuous Integration and Continuous Deployment) 도구</description></item><item><title>Gitlab CI</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/gitlab-ci.html</link><pubDate>Tue, 24 Sep 2024 03:10:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/gitlab-ci.html</guid><description>Gitlab에서 각각 제공하는 CI/CD(Continuous Integration and Continuous Deployment) 도구</description></item><item><title>CI/CD</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd.html</link><pubDate>Sun, 22 Sep 2024 18:14:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd.html</guid><description>기능적인 소프트웨어 제공 시 문제 발생 위험을 줄이고자 코드를 `지속적으로`테스트하고 `배포하는 전술`</description></item><item><title>Git Branch 전략</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/git/git-branch-%EC%A0%84%EB%9E%B5.html</link><pubDate>Sun, 22 Sep 2024 10:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/git/git-branch-%EC%A0%84%EB%9E%B5.html</guid><description>Git 브랜치 전략 (Git Flow, Github Flow, Gitlab Flow)</description></item><item><title>Secure Coding</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/secure-coding.html</link><pubDate>Sun, 22 Sep 2024 01:33:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/secure-coding.html</guid><description>Secure Coding은 소프트웨어 개발 과정에서 보안 취약점을 최소화하고 안전한 소프트웨어를 만들기 위한 코딩 기법이다.</description></item><item><title>Git의 고급 기능</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/git/git%EC%9D%98-%EA%B3%A0%EA%B8%89-%EA%B8%B0%EB%8A%A5.html</link><pubDate>Sat, 21 Sep 2024 07:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/git/git%EC%9D%98-%EA%B3%A0%EA%B8%89-%EA%B8%B0%EB%8A%A5.html</guid><description>소프트웨어 개발에서 널리 사용되는 분산 버전 관리 시스템으로, 코드의 변경 이력을 효율적으로 관리하고 협업을 지원한다.</description></item><item><title>Version Control</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/version-control.html</link><pubDate>Fri, 20 Sep 2024 15:45:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/version-control.html</guid><description>동일한 정보에 대한 여러 버전을 관리하는 것</description></item><item><title>Git 기본 사용법</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/git.html</link><pubDate>Fri, 20 Sep 2024 07:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/git.html</guid><description>소프트웨어 개발에서 널리 사용되는 분산 버전 관리 시스템으로, 코드의 변경 이력을 효율적으로 관리하고 협업을 지원한다.</description></item><item><title>Git 원격 저장소와 Branch</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/git/git-%EC%9B%90%EA%B2%A9-%EC%A0%80%EC%9E%A5%EC%86%8C%EC%99%80-branch.html</link><pubDate>Fri, 20 Sep 2024 07:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/ci-and-cd/git/git-%EC%9B%90%EA%B2%A9-%EC%A0%80%EC%9E%A5%EC%86%8C%EC%99%80-branch.html</guid><description>소프트웨어 개발에서 널리 사용되는 분산 버전 관리 시스템으로, 코드의 변경 이력을 효율적으로 관리하고 협업을 지원한다.</description></item></channel></rss>