<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Software-Development on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/software-development/</link>
    <description>Recent content in Software-Development on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.149.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 21 Sep 2024 00:49:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/software-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Software Development Lifecycle</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/</link>
      <pubDate>Fri, 20 Sep 2024 05:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/</guid>
      <description>소프트웨어 개발 수명주기(SDLC)는 기획부터 폐기까지 전 과정을 체계적으로 관리하는 프레임워크이다. 요구사항 분석, 설계, 구현, 테스트, 배포, 유지보수의 단계를 거쳐 소프트웨어의 품질과 효율성을 높이는 것을 목표로 한다. 현대 개발 환경에서 SDLC는 애자일 방법론과 개발-운영-보안을 통합한 데브옵스(DevOps) 및 데브섹옵스(DevSecOps)를 융합하여 변화에 민첩하게 대응하고, DORA 지표로 성과를 측정하며 지속적으로 개선하는 형태로 발전하고 있다.</description>
    </item>
    <item>
      <title>Formal Methods Model</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/development-practices/testing--quality/quality-assurance/formal-methods/</link>
      <pubDate>Sat, 21 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/development-practices/testing--quality/quality-assurance/formal-methods/</guid>
      <description>소프트웨어 개발에서 수학적 기법을 사용하여 시스템을 명세, 개발, 분석 및 검증하는 엄격한 접근 방식</description>
    </item>
  </channel>
</rss>
