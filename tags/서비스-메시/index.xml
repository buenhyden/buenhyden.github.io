<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – 서비스-메시</title><link>https://buenhyden.github.io/tags/%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%A9%94%EC%8B%9C/</link><description>Recent content in 서비스-메시 on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 19 Nov 2024 09:47:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%A9%94%EC%8B%9C/index.xml" rel="self" type="application/rss+xml"/><item><title>Service Mesh</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-mesh/</link><pubDate>Tue, 19 Nov 2024 09:47:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-mesh/</guid><description>
&lt;h2>서비스 메시 (Service Mesh)&lt;/h2>&lt;p>마이크로서비스 아키텍처에서 서비스 간 통신을 관리하고 제어하기 위한 인프라 계층.&lt;/p>
&lt;p>현대의 마이크로서비스 아키텍처에서는 수많은 서비스들이 서로 통신하면서 복잡한 네트워크를 형성한다.&lt;br>
이러한 환경에서 서비스 간 통신의 안정성, 보안, 관찰 가능성을 확보하는 것이 매우 중요한 과제가 되었고, 이러한 문제들을 해결하고 애플리케이션 코드 변경 없이 인프라 수준에서 통신을 제어하기 위해 서비스 메시가 등장하였다.&lt;/p>
&lt;p>서비스 메시는 사이드카 프록시(Sidecar Proxy)를 사용하여 서비스 간 통신을 처리한다.&lt;br>
각 서비스 인스턴스 옆에 프록시가 배치되어, 마치 오토바이의 사이드카처럼 함께 동작한다.&lt;/p>
&lt;p>서비스 메시 패턴은 Istio, Linkerd, Consul Connect 등의 구현체를 통해 실제로 적용할 수 있다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Software%20Design%20and%20Architecture/MSA%20Patterns/Cross-Cutting%20Concern/1686129455408.png"
alt="Understanding Microservice Meshes: Architecture, Operation, and Examples"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.linkedin.com/pulse/understanding-microservice-meshes-architecture-luis-soares-m-sc-/" target="_blank" rel="noopener">https://www.linkedin.com/pulse/understanding-microservice-meshes-architecture-luis-soares-m-sc-/&lt;/a> _&lt;/p>
&lt;h3>구성 요소 및 기능&lt;/h3>&lt;ol>
&lt;li>
&lt;p>데이터 플레인 (Data Plane):&lt;/p>
&lt;ul>
&lt;li>각 서비스에 사이드카 프록시로 배치&lt;/li>
&lt;li>서비스 간 모든 네트워크 통신 처리&lt;/li>
&lt;li>주요 기능:&lt;/li>
&lt;li>로드 밸런싱&lt;/li>
&lt;li>서킷 브레이킹&lt;/li>
&lt;li>재시도 및 타임아웃&lt;/li>
&lt;li>메트릭 수집&lt;/li>
&lt;li>TLS 암호화&lt;/li>
&lt;li>접근 제어&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>컨트롤 플레인 (Control Plane):&lt;/p>
&lt;ul>
&lt;li>데이터 플레인의 프록시 구성 및 관리&lt;/li>
&lt;li>정책 설정 및 배포&lt;/li>
&lt;li>서비스 디스커버리 및 인증 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>구현 방식&lt;/h3>&lt;p>서비스 메시는 주로 사이드카 프록시 패턴을 사용하여 구현된다.&lt;br>
각 서비스 인스턴스와 함께 프록시가 배포되어 모든 인바운드 및 아웃바운드 트래픽을 처리한다.&lt;/p>
&lt;h3>장점&lt;/h3>&lt;ul>
&lt;li>애플리케이션 코드 복잡성 감소&lt;/li>
&lt;li>보안 강화 (제로 트러스트 모델 적용)&lt;/li>
&lt;li>트래픽 관리 용이성 (A/B 테스트, 블루/그린 배포 등)&lt;/li>
&lt;li>관측성 향상으로 문제 해결 및 최적화 용이&lt;/li>
&lt;li>서비스 간 통신의 표준화 및 일관성 유지&lt;/li>
&lt;/ul>
&lt;h3>사용 사례&lt;/h3>&lt;ol>
&lt;li>대규모 마이크로서비스 환경&lt;/li>
&lt;li>멀티 클라우드 또는 하이브리드 클라우드 배포&lt;/li>
&lt;li>레거시 시스템과 현대적인 애플리케이션의 통합&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>