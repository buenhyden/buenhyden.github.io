<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Process-Control-Block</title><link>https://buenhyden.github.io/tags/process-control-block/</link><description>Recent content in Process-Control-Block on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 15 Jan 2025 06:59:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/process-control-block/index.xml" rel="self" type="application/rss+xml"/><item><title>프로세스 제어 블록(Process Control Block, PCB)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-control-block/</link><pubDate>Wed, 15 Jan 2025 06:59:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-control-block/</guid><description>
&lt;h2>프로세스 제어 블록(Process Control Block, PCB)&lt;/h2>&lt;p>프로세스 제어 블록(Process Control Block, PCB)은 운영 체제에서 프로세스를 관리하기 위해 사용하는 핵심적인 데이터 구조이다.&lt;br>
PCB는 각 프로세스에 대한 중요한 정보를 저장하고 관리하며, 운영 체제가 프로세스를 효율적으로 제어하고 실행할 수 있게 한다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Process%20Mgmt/process---------control---------block.webp"
alt="Process Control Block"
loading="lazy" />
&lt;/figure>&lt;br>
_Sourece: &lt;a href="https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/&lt;/a> _&lt;/p>
&lt;h3>PCB의 주요 구성 요소&lt;/h3>&lt;ol>
&lt;li>프로세스 식별자(Process ID, PID): 각 프로세스에 할당되는 고유한 식별 번호이다.&lt;/li>
&lt;li>프로세스 상태(Process State): 프로세스의 현재 상태를 나타낸다. 주요 상태로는 생성(new), 준비(ready), 실행(running), 대기(waiting), 종료(terminated) 등이 있다.&lt;/li>
&lt;li>프로그램 카운터(Program Counter): 다음에 실행할 명령어의 주소를 가리킨다.&lt;/li>
&lt;li>CPU 레지스터: 프로세스가 CPU를 사용할 때의 레지스터 정보를 저장한다.&lt;/li>
&lt;li>CPU 스케줄링 정보: 프로세스의 우선순위, CPU 사용 시간 등 스케줄링에 필요한 정보를 포함한다.&lt;/li>
&lt;li>메모리 관리 정보: 프로세스의 메모리 할당 정보, 페이지 테이블 등을 저장한다.&lt;/li>
&lt;li>입출력 상태 정보: 프로세스에 할당된 입출력 장치, 열린 파일 목록 등을 관리한다.&lt;/li>
&lt;li>계정 정보: CPU 사용 시간, 메모리 사용량 등 프로세스의 리소스 사용 정보를 추적한다.&lt;/li>
&lt;/ol>
&lt;h3>PCB의 역할과 중요성&lt;/h3>&lt;ol>
&lt;li>프로세스 관리: PCB는 운영 체제가 프로세스의 생명주기를 관리하는 데 필수적이다.&lt;/li>
&lt;li>컨텍스트 스위칭: PCB는 프로세스 간 전환 시 현재 상태를 저장하고 복원하는 데 사용된다.&lt;/li>
&lt;li>스케줄링: 운영 체제는 PCB의 정보를 바탕으로 프로세스 스케줄링 결정을 내린다.&lt;/li>
&lt;li>리소스 관리: PCB는 프로세스에 할당된 리소스를 추적하고 관리한다.&lt;/li>
&lt;li>동기화 및 통신: 프로세스 간 동기화와 통신에 필요한 정보를 저장한다.&lt;/li>
&lt;/ol>
&lt;h3>PCB의 생명주기&lt;/h3>&lt;ol>
&lt;li>프로세스 생성 시 PCB가 생성되고 초기화된다.&lt;/li>
&lt;li>프로세스 실행 중 PCB 정보가 지속적으로 업데이트된다.&lt;/li>
&lt;li>프로세스 종료 시 PCB가 제거된다.&lt;/li>
&lt;/ol>
&lt;h3>PCB의 구현 및 저장&lt;/h3>&lt;p>PCB는 운영 체제 커널의 보호된 메모리 영역에 저장된다.&lt;br>
일부 운영 체제에서는 PCB를 커널 스택의 시작 부분에 위치시킨다.&lt;/p>
&lt;h3>PCB의 장단점&lt;/h3>&lt;p>장점:&lt;/p>
&lt;ul>
&lt;li>효율적인 프로세스 관리와 스케줄링 가능&lt;/li>
&lt;li>멀티태스킹 지원&lt;/li>
&lt;li>리소스 사용 최적화&lt;/li>
&lt;/ul>
&lt;p>단점:&lt;/p>
&lt;ul>
&lt;li>PCB 관리에 따른 메모리 오버헤드 발생&lt;/li>
&lt;li>잦은 컨텍스트 스위칭 시 성능 저하 가능성&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>