<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – 인덱싱</title><link>https://buenhyden.github.io/tags/%EC%9D%B8%EB%8D%B1%EC%8B%B1/</link><description>Recent content in 인덱싱 on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 02 Dec 2024 02:11:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/%EC%9D%B8%EB%8D%B1%EC%8B%B1/index.xml" rel="self" type="application/rss+xml"/><item><title>데이터베이스 인덱싱 (Database Indexing)</title><link>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-indexing/</link><pubDate>Mon, 02 Dec 2024 02:11:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-indexing/</guid><description>
&lt;h2>데이터베이스 인덱싱 (Database Indexing)&lt;span class="hx-absolute -hx-mt-20" id="데이터베이스-인덱싱-database-indexing">&lt;/span>
&lt;a href="#%eb%8d%b0%ec%9d%b4%ed%84%b0%eb%b2%a0%ec%9d%b4%ec%8a%a4-%ec%9d%b8%eb%8d%b1%ec%8b%b1-database-indexing" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>인덱스는 책의 목차와 유사한 역할을 한다.&lt;br>
데이터베이스에서 인덱스를 사용하면 전체 테이블을 스캔하지 않고도 원하는 데이터를 빠르게 찾을 수 있다.&lt;br>
인덱스는 테이블의 하나 또는 여러 개의 컬럼을 기반으로 생성될 수 있습니다.&lt;/p>
&lt;p>특징:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>자동 정렬&lt;/p>
&lt;ul>
&lt;li>인덱스는 항상 정렬된 상태를 유지한다.&lt;/li>
&lt;li>새로운 데이터가 추가될 때마다 정렬된 순서를 유지하기 위해 재정렬이 발생한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>독립적 저장&lt;/p>
&lt;ul>
&lt;li>인덱스는 실제 데이터와 별도의 공간에 저장된다.&lt;/li>
&lt;li>원본 데이터의 위치를 가리키는 포인터를 포함한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>선택적 생성&lt;/p>
&lt;ul>
&lt;li>모든 칼럼에 인덱스를 생성할 필요는 없다.&lt;/li>
&lt;li>검색이 자주 발생하는 칼럼에 대해 선택적으로 생성한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>장점:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>검색 속도 향상&lt;/p>
&lt;ul>
&lt;li>전체 테이블을 스캔하지 않고 인덱스를 통해 빠르게 데이터를 찾을 수 있습니다.&lt;/li>
&lt;li>WHERE 절의 조건이나 JOIN 연산의 효율성이 크게 향상됩니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>정렬 비용 감소&lt;/p>
&lt;ul>
&lt;li>ORDER BY 절을 사용할 때 이미 정렬된 인덱스를 활용할 수 있습니다.&lt;/li>
&lt;li>추가적인 정렬 작업이 필요하지 않아 성능이 향상됩니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>테이블 스캔 감소&lt;/p>
&lt;ul>
&lt;li>필요한 데이터만 선별적으로 접근할 수 있어 시스템 리소스 사용이 감소합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>단점:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>추가 저장 공간 필요&lt;/p>
&lt;ul>
&lt;li>인덱스는 별도의 저장 공간을 필요로 합니다.&lt;/li>
&lt;li>데이터베이스 크기가 증가할수록 인덱스가 차지하는 공간도 증가합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>데이터 변경 작업의 성능 저하&lt;/p>
&lt;ul>
&lt;li>INSERT, UPDATE, DELETE 작업 시 인덱스도 함께 수정해야 합니다.&lt;/li>
&lt;li>이로 인해 데이터 변경 작업의 속도가 저하될 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>인덱스 최적화 전략:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>선별적 인덱스 생성&lt;/p>
&lt;ul>
&lt;li>검색이 자주 발생하는 칼럼에 대해서만 인덱스를 생성합니다.&lt;/li>
&lt;li>불필요한 인덱스는 제거하여 시스템 부하를 줄입니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>복합 인덱스 활용&lt;/p>
&lt;ul>
&lt;li>함께 자주 검색되는 칼럼들에 대해 복합 인덱스를 생성합니다.&lt;/li>
&lt;li>칼럼의 순서를 신중히 결정하여 효율성을 극대화합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>인덱스 재구성&lt;/p>
&lt;ul>
&lt;li>주기적으로 인덱스를 재구성하여 단편화를 제거합니다.&lt;/li>
&lt;li>성능 저하를 예방하고 최적의 상태를 유지합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>사용 빈도가 높은 쿼리와 해당 컬럼을 파악하여 인덱스를 생성한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>인덱스의 크기와 유지 관리 비용을 고려하여 주기적으로 점검하고 불필요한 인덱스는 제거한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>쿼리 최적화와 함께 인덱스 최적화를 고려한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>정기적인 성능 모니터링과 리팩토링을 통해 인덱스 전략을 지속적으로 개선한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>주의사항:&lt;/p>
&lt;ol>
&lt;li>인덱스를 과도하게 사용하면 오히려 성능이 저하될 수 있다.&lt;/li>
&lt;li>데이터의 변경이 빈번한 컬럼보다는 조회가 주로 이루어지는 컬럼에 인덱스를 생성하는 것이 좋다.&lt;/li>
&lt;li>Cardinality가 높은 컬럼을 우선적으로 인덱싱하는 것이 검색 성능에 유리하다.&lt;/li>
&lt;/ol>
&lt;h3>인덱스의 종류&lt;span class="hx-absolute -hx-mt-20" id="인덱스의-종류">&lt;/span>
&lt;a href="#%ec%9d%b8%eb%8d%b1%ec%8a%a4%ec%9d%98-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>인덱스는 여러 기준에 따라 다양하게 분류될 수 있다.&lt;br>
각 분류 기준에 따른 인덱스 종류를 살펴보자.&lt;/p>
&lt;h4>구조에 따른 분류&lt;span class="hx-absolute -hx-mt-20" id="구조에-따른-분류">&lt;/span>
&lt;a href="#%ea%b5%ac%ec%a1%b0%ec%97%90-%eb%94%b0%eb%a5%b8-%eb%b6%84%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>데이터가 인덱스와 물리적으로 어떻게 연관되어 있는지를 기준으로 나뉜다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>클러스터형 인덱스 (Clustered Index)&lt;/strong>&lt;br>
클러스터형 인덱스는 테이블의 데이터가 &lt;strong>인덱스의 순서에 따라 물리적으로 정렬&lt;/strong>되어 저장되는 방식.&lt;br>
즉, 데이터 자체가 인덱스를 구성하며, 인덱스의 키 값 순서에 따라 데이터가 정렬된다.&lt;br>
특징:&lt;br>
1. &lt;strong>데이터 정렬&lt;/strong>: 테이블의 데이터가 자동으로 정렬되며, 인덱스 키 값이 데이터의 저장 순서를 결정한다.&lt;br>
2. &lt;strong>테이블당 하나만 생성 가능&lt;/strong>: 클러스터형 인덱스는 데이터의 물리적 저장 방식을 변경하기 때문에 하나의 테이블에 하나만 생성할 수 있다.&lt;br>
3. &lt;strong>빠른 검색&lt;/strong>: 범위 검색이나 정렬된 결과를 반환하는 쿼리에 매우 효율적이다.&lt;br>
장점:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>빠른 범위 검색&lt;/strong>: 데이터를 물리적으로 정렬하므로 범위 기반 검색이 빠르다.&lt;/li>
&lt;li>&lt;strong>효율적인 정렬 작업&lt;/strong>: ORDER BY와 같은 정렬 작업에서 추가적인 비용이 거의 들지 않는다.&lt;br>
단점:&lt;/li>
&lt;li>&lt;strong>데이터 수정 비용 증가&lt;/strong>: 데이터를 삽입, 삭제, 수정할 때마다 물리적 정렬을 유지해야 하므로 오버헤드가 발생한다.&lt;/li>
&lt;li>&lt;strong>추가 저장 공간 필요&lt;/strong>: 클러스터형 인덱스를 유지하기 위한 메타데이터가 필요하다.&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- employees 테이블 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">employees&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">last_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">first_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INT&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">department&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- id 컬럼을 기준으로 클러스터형 인덱스 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CLUSTERED&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INDEX&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">idx_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">employees&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>비클러스터형 인덱스 (Non-Clustered Index)&lt;/strong>&lt;br>
비클러스터형 인덱스는 테이블의 데이터와 별도로 저장되며, &lt;strong>인덱스는 데이터의 위치를 가리키는 포인터를 포함&lt;/strong>한다.&lt;br>
데이터 자체는 물리적으로 정렬되지 않고, 별도의 구조로 관리된다.&lt;br>
특징:&lt;br>
1. &lt;strong>독립적인 데이터 구조&lt;/strong>: 비클러스터형 인덱스는 테이블 데이터와 별도로 저장된다.&lt;br>
2. &lt;strong>여러 개 생성 가능&lt;/strong>: 하나의 테이블에 여러 개의 비클러스터형 인덱스를 생성할 수 있다.&lt;br>
3. &lt;strong>포인터 사용&lt;/strong>: 인덱스를 통해 데이터를 찾을 때 포인터를 사용하여 실제 데이터를 참조한다.&lt;br>
장점:&lt;br>
1. &lt;strong>유연성&lt;/strong>: 여러 열이나 열 조합에 대해 다양한 비클러스터형 인덱스를 생성할 수 있다.&lt;br>
2. &lt;strong>데이터 변경 시 영향 적음&lt;/strong>: 클러스터형 인덱스처럼 물리적 정렬을 유지할 필요가 없어 삽입/삭제 시 부담이 적다.&lt;br>
단점:&lt;br>
1. &lt;strong>속도 저하 가능성&lt;/strong>: 데이터를 검색할 때 한 번 더 포인터를 통해 실제 데이터를 참조해야 하므로 클러스터형보다 느릴 수 있다.&lt;br>
2. &lt;strong>추가 저장 공간 필요&lt;/strong>: 별도의 구조로 저장되기 때문에 추가적인 저장 공간이 요구됩니다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- employees 테이블 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">employees&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">last_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">first_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INT&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">department&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- last_name 컬럼에 대한 비클러스터형 인덱스 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">NONCLUSTERED&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INDEX&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">idx_last_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">employees&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">last_name&lt;/span>&lt;span class="p">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특징&lt;/th>
&lt;th>클러스터형 인덱스&lt;/th>
&lt;th>비클러스터형 인덱스&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>데이터 정렬 여부&lt;/strong>&lt;/td>
&lt;td>물리적으로 정렬됨&lt;/td>
&lt;td>별도로 저장되며 물리적 순서와 무관&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>테이블당 개수 제한&lt;/strong>&lt;/td>
&lt;td>하나만 가능&lt;/td>
&lt;td>여러 개 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>검색 속도&lt;/strong>&lt;/td>
&lt;td>범위 검색 및 정렬 작업에 매우 빠름&lt;/td>
&lt;td>포인터를 통해 접근하므로 다소 느림&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>저장 공간 요구량&lt;/strong>&lt;/td>
&lt;td>상대적으로 적음&lt;/td>
&lt;td>추가적인 저장 공간 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>데이터 변경 비용&lt;/strong>&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>사용 목적과 테이블 특성에 따라 선택해야 한다.&lt;/p>
&lt;ul>
&lt;li>클러스터형은 범위 검색과 정렬 작업이 많은 경우 적합하며,&lt;/li>
&lt;li>비클러스터형은 다양한 열 조합으로 검색해야 하는 경우 유용합니다.&lt;/li>
&lt;/ul>
&lt;h4>키 속성에 따른 분류&lt;span class="hx-absolute -hx-mt-20" id="키-속성에-따른-분류">&lt;/span>
&lt;a href="#%ed%82%a4-%ec%86%8d%ec%84%b1%ec%97%90-%eb%94%b0%eb%a5%b8-%eb%b6%84%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>&lt;strong>인덱스가 테이블의 키와 어떤 관계를 가지는지&lt;/strong>를 기준으로 나눈다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>기본 인덱스 (Primary Index)&lt;/strong>&lt;br>
기본 인덱스는 테이블의 **기본 키(Primary Key)**에 대해 자동으로 생성되는 인덱스이다.&lt;br>
기본 키는 테이블의 각 행을 고유하게 식별하며, 데이터 무결성을 보장한다.&lt;br>
일반적으로 클러스터형 인덱스로 구현되며, 데이터가 물리적으로 정렬된다.&lt;br>
특징:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>고유성 보장&lt;/strong>: 기본 키 값은 중복될 수 없으며, NULL 값을 허용하지 않는다.&lt;/li>
&lt;li>&lt;strong>데이터 정렬&lt;/strong>: 기본 키를 기준으로 데이터가 물리적으로 정렬된다.&lt;/li>
&lt;li>&lt;strong>테이블당 하나만 생성 가능&lt;/strong>: 한 테이블에 하나의 기본 인덱스만 존재할 수 있다.&lt;br>
장점:
&lt;ol>
&lt;li>데이터 검색 속도 향상: 기본 키를 이용한 검색이 매우 빠르다.&lt;/li>
&lt;li>데이터 무결성 보장: 고유성과 NULL 금지를 통해 데이터의 일관성을 유지한다.&lt;br>
단점:&lt;/li>
&lt;li>삽입/삭제/수정 시 오버헤드: 데이터 정렬을 유지해야 하므로 성능 저하가 발생할 수 있다.&lt;/li>
&lt;li>테이블당 하나만 생성 가능: 추가적인 키를 기준으로 정렬하려면 보조 인덱스를 사용해야 한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- employees 테이블 생성 시 기본키 설정
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">employees&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">INT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">last_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">first_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>보조 인덱스 (Secondary Index)&lt;/strong>&lt;br>
보조 인덱스는 기본 키 외의 열(Column)에 대해 생성되는 인덱스를 의미한다.&lt;br>
기본적으로 비클러스터형 인덱스로 구현되며, 데이터와 별도로 저장된다.&lt;br>
특징&lt;br>
1. &lt;strong>다양한 열에 생성 가능&lt;/strong>: 기본 키가 아닌 열에도 생성할 수 있다.&lt;br>
2. &lt;strong>포인터 사용&lt;/strong>: 보조 인덱스는 실제 데이터를 가리키는 포인터를 포함한다.&lt;br>
3. &lt;strong>데이터 정렬 없음&lt;/strong>: 보조 인덱스를 생성한다고 해서 데이터가 물리적으로 정렬되지는 않는다.&lt;br>
장점&lt;br>
1. 다양한 검색 조건 지원: 기본 키 외의 열을 기준으로 효율적인 검색이 가능하다.&lt;br>
2. 여러 개 생성 가능: 하나의 테이블에 여러 개의 보조 인덱스를 생성할 수 있다.&lt;br>
단점:&lt;/p>
&lt;ol>
&lt;li>추가적인 저장 공간 필요: 보조 인덱스를 저장하기 위한 별도의 구조가 필요하다.&lt;/li>
&lt;li>검색 속도 저하 가능성: 데이터를 검색할 때 포인터를 통해 실제 데이터를 참조해야 하므로 기본 인덱스보다 느릴 수 있다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- employees 테이블에서 last_name에 대한 보조 인덱스 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INDEX&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">idx_last_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">employees&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">last_name&lt;/span>&lt;span class="p">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특징&lt;/th>
&lt;th>기본 인덱스 (Primary Index)&lt;/th>
&lt;th>보조 인덱스 (Secondary Index)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>정렬 여부&lt;/strong>&lt;/td>
&lt;td>데이터가 물리적으로 정렬됨&lt;/td>
&lt;td>데이터와 별도로 저장, 정렬되지 않음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>유일성&lt;/strong>&lt;/td>
&lt;td>고유성을 강제&lt;/td>
&lt;td>고유성 강제하지 않음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>생성 가능 개수&lt;/strong>&lt;/td>
&lt;td>테이블당 하나&lt;/td>
&lt;td>여러 개 생성 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>검색 속도&lt;/strong>&lt;/td>
&lt;td>빠름&lt;/td>
&lt;td>포인터 참조로 인해 다소 느림&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>저장 공간 요구량&lt;/strong>&lt;/td>
&lt;td>상대적으로 적음&lt;/td>
&lt;td>추가적인 저장 공간 필요&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>데이터 커버리지에 따른 분류&lt;span class="hx-absolute -hx-mt-20" id="데이터-커버리지에-따른-분류">&lt;/span>
&lt;a href="#%eb%8d%b0%ec%9d%b4%ed%84%b0-%ec%bb%a4%eb%b2%84%eb%a6%ac%ec%a7%80%ec%97%90-%eb%94%b0%eb%a5%b8-%eb%b6%84%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>데이터 커버리지란 인덱스가 실제 데이터를 얼마나 세밀하게 가리키는지를 의미한다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>밀집 인덱스 (Dense Index)&lt;/strong>&lt;br>
밀집 인덱스는 데이터 파일의 모든 검색 키 값에 대해 인덱스 엔트리를 가지고 있는 인덱스.&lt;br>
특징:&lt;br>
1. 모든 레코드에 대해 인덱스 엔트리가 존재한다.&lt;br>
2. 인덱스 크기가 상대적으로 큽니다.&lt;br>
3. 데이터 검색 속도가 빠릅니다.&lt;br>
장점:&lt;/p>
&lt;ol>
&lt;li>모든 레코드에 대한 직접적인 접근이 가능하다.&lt;/li>
&lt;li>COUNT() 같은 집계 함수를 사용할 때 데이터 파일에 접근하지 않고도 처리할 수 있어 효율적이다.&lt;br>
단점:&lt;/li>
&lt;li>인덱스 크기가 크므로 저장 공간을 많이 차지한다.&lt;/li>
&lt;li>데이터 변경 시 인덱스 업데이트 비용이 높다.&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">학번: 모든 학생의 학번에 대해 인덱스 생성
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1001 → 레코드 위치 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1002 → 레코드 위치 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1003 → 레코드 위치 3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1004 → 레코드 위치 4&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>희소 인덱스 (Sparse Index)&lt;/strong>&lt;br>
희소 인덱스는 데이터 파일의 일부 레코드 또는 데이터 블록에 대해서만 인덱스 엔트리를 가지고 있는 인덱스이다.&lt;br>
특징:&lt;br>
1. 각 데이터 블록을 대표하는 키 값만 인덱스에 포함된다.&lt;br>
2. 인덱스 크기가 상대적으로 작다.&lt;br>
3. 데이터의 물리적 순서에 의존한다.&lt;br>
장점:&lt;/p>
&lt;ol>
&lt;li>인덱스 크기가 작아 저장 공간을 적게 사용한다.&lt;/li>
&lt;li>인덱스 갱신 비용이 낮다.&lt;/li>
&lt;li>일반적으로 밀집 인덱스보다 인덱스 단계 수가 1정도 적어 디스크 접근 횟수가 줄어들 수 있다.&lt;br>
단점:&lt;/li>
&lt;li>특정 레코드를 찾기 위해 추가적인 탐색이 필요할 수 있다.&lt;/li>
&lt;li>데이터 파일의 물리적 순서에 의존하므로 유연성이 떨어진다.&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">학년별로 그룹화된 데이터의 시작점만 인덱스 생성
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1학년 시작 → 레코드 위치 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2학년 시작 → 레코드 위치 251
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3학년 시작 → 레코드 위치 501
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4학년 시작 → 레코드 위치 751&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;p>인덱스 선택 기준&lt;/p>
&lt;ol>
&lt;li>데이터 특성 고려
&lt;ul>
&lt;li>고유한 값이 많고 정확한 검색이 필요한 경우 → 밀집 인덱스&lt;/li>
&lt;li>데이터가 정렬되어 있고 범위 검색이 많은 경우 → 희소 인덱스&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>시스템 리소스 고려
&lt;ul>
&lt;li>저장 공간이 충분하고 검색 성능이 중요한 경우 → 밀집 인덱스&lt;/li>
&lt;li>저장 공간이 제한적이고 데이터가 잘 정렬된 경우 → 희소 인덱스&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터 변경 빈도 고려
&lt;ul>
&lt;li>데이터 변경이 적고 빠른 검색이 필요한 경우 → 밀집 인덱스&lt;/li>
&lt;li>데이터 변경이 빈번한 경우 → 희소 인덱스&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>키 구성에 따른 분류&lt;span class="hx-absolute -hx-mt-20" id="키-구성에-따른-분류">&lt;/span>
&lt;a href="#%ed%82%a4-%ea%b5%ac%ec%84%b1%ec%97%90-%eb%94%b0%eb%a5%b8-%eb%b6%84%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>인덱스를 구성하는 컬럼의 수에 따라 나뉜다.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>단일 키 인덱스 (Single-Key Index)&lt;/strong>&lt;br>
단일 키 인덱스는 하나의 컬럼만을 사용하여 생성된 인덱스.&lt;br>
특징:&lt;br>
1. 구조가 간단하고 구현이 쉽다.&lt;br>
2. 특정 컬럼에 대한 검색 속도를 향상시킨다.&lt;br>
3. 데이터베이스 시스템의 부하를 줄일 수 있다.&lt;br>
장점:
&lt;ol>
&lt;li>구현이 간단하고 유지보수가 쉽다.&lt;/li>
&lt;li>특정 컬럼에 대한 검색이 빈번할 때 효과적.&lt;br>
단점:&lt;/li>
&lt;li>여러 컬럼을 조합한 복잡한 쿼리에는 효율성이 떨어질 수 있다.&lt;/li>
&lt;li>다중 조건 검색에는 적합하지 않을 수 있다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;strong>복합 키 인덱스 (Composite Index)&lt;/strong>&lt;br>
복합 키 인덱스는 두 개 이상의 컬럼을 조합하여 생성된 인덱스.&lt;br>
특징:&lt;br>
1. 여러 컬럼을 조합하여 하나의 인덱스로 만든다.&lt;br>
2. 컬럼의 순서가 중요하다.&lt;br>
3. 최대 32개까지의 컬럼을 조합할 수 있다.&lt;br>
장점:
&lt;ol>
&lt;li>여러 컬럼을 동시에 검색할 때 검색 속도가 개선된다.&lt;/li>
&lt;li>데이터 정렬의 효율성이 높아진다.&lt;/li>
&lt;li>인덱스의 용량을 절감할 수 있다.&lt;/li>
&lt;li>복잡한 쿼리의 최적화에 도움이 된다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2>단점&lt;span class="hx-absolute -hx-mt-20" id="단점">&lt;/span>
&lt;a href="#%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ul>
&lt;li>인덱스 생성 시 컬럼 순서가 중요하므로 설계에 주의가 필요합니다.&lt;/li>
&lt;li>첫 번째 컬럼이 조건에 포함되지 않으면 인덱스가 효과적으로 작동하지 않을 수 있습니다.&lt;/li>
&lt;li>너무 많은 컬럼을 포함하면 오히려 성능이 저하될 수 있습니다.&lt;/li>
&lt;/ul>
&lt;p>사용 시 주의사항:&lt;/p>
&lt;ol>
&lt;li>WHERE 절에 자주 사용되는 컬럼들로 구성해야 한다.&lt;/li>
&lt;li>컬럼의 순서는 검색 조건에서 자주 사용되는 순서대로 지정해야 한다.&lt;/li>
&lt;li>인덱스에 포함된 컬럼 수가 많아질수록 성능이 저하될 수 있으므로 적절한 수의 컬럼을 선택해야 한다.&lt;/li>
&lt;/ol>
&lt;h3>고유성에 따른 분류&lt;span class="hx-absolute -hx-mt-20" id="고유성에-따른-분류">&lt;/span>
&lt;a href="#%ea%b3%a0%ec%9c%a0%ec%84%b1%ec%97%90-%eb%94%b0%eb%a5%b8-%eb%b6%84%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>고유 인덱스 (Unique Index)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>인덱스 키 값이 테이블 내에서 유일함을 보장합니다.&lt;/li>
&lt;li>중복된 값을 허용하지 않습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>비고유 인덱스 (Non-Unique Index)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>인덱스 키 값의 중복을 허용합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>특수 목적 인덱스&lt;span class="hx-absolute -hx-mt-20" id="특수-목적-인덱스">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%88%98-%eb%aa%a9%ec%a0%81-%ec%9d%b8%eb%8d%b1%ec%8a%a4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>비트맵 인덱스 (Bitmap Index)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>적은 수의 고유 값을 가진 컬럼에 효과적입니다.&lt;/li>
&lt;li>비트 벡터를 사용하여 데이터의 존재 여부를 표현합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>함수 기반 인덱스 (Function-Based Index)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>컬럼의 값 자체가 아닌, 컬럼에 특정 함수를 적용한 결과를 인덱싱합니다.&lt;/li>
&lt;li>함수나 수식이 포함된 조건 검색에 유용하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>공간 인덱스 (Spatial Index)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>지리적 데이터나 다차원 데이터를 효율적으로 검색하기 위해 사용됩니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>전문 인덱스 (Full-Text Index)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>텍스트 데이터의 전체 내용을 검색하는 데 사용됩니다.&lt;/li>
&lt;li>문서나 게시글 내용 검색에 사용된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>데이터 구조에 따른 분류&lt;span class="hx-absolute -hx-mt-20" id="데이터-구조에-따른-분류">&lt;/span>
&lt;a href="#%eb%8d%b0%ec%9d%b4%ed%84%b0-%ea%b5%ac%ec%a1%b0%ec%97%90-%eb%94%b0%eb%a5%b8-%eb%b6%84%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>B-트리 인덱스 (B-Tree Index)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>가장 일반적으로 사용되는 인덱스 구조입니다.&lt;/li>
&lt;li>균형 잡힌 트리 구조로, 검색, 삽입, 삭제 연산이 효율적입니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>해시 인덱스 (Hash Index)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>해시 함수를 사용하여 키를 특정 버킷에 매핑합니다.&lt;/li>
&lt;li>등호 비교에는 매우 효율적이지만, 범위 검색에는 적합하지 않습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>R-트리 인덱스 (R-Tree Index)&lt;/p>
&lt;ul>
&lt;li>공간 데이터를 위한 특수한 구조입니다.&lt;/li>
&lt;li>지리 정보 시스템에서 주로 사용됩니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>