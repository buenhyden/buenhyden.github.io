<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Domain-Driven-Development</title><link>https://buenhyden.github.io/tags/domain-driven-development/</link><description>Recent content in Domain-Driven-Development on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 30 Sep 2024 00:49:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/domain-driven-development/index.xml" rel="self" type="application/rss+xml"/><item><title>Domain-Driven Development</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/domain-driven-development/</link><pubDate>Mon, 30 Sep 2024 00:49:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-model/domain-driven-development/</guid><description>
&lt;h2>도메인 주도 개발 (Domain-Driven Development, DDD)&lt;span class="hx-absolute -hx-mt-20" id="도메인-주도-개발-domain-driven-development-ddd">&lt;/span>
&lt;a href="#%eb%8f%84%eb%a9%94%ec%9d%b8-%ec%a3%bc%eb%8f%84-%ea%b0%9c%eb%b0%9c-domain-driven-development-ddd" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>복잡한 소프트웨어를 개발할 때 비즈니스 도메인을 중심으로 설계와 개발을 진행하는 방법론&lt;br>
도메인이란 소프트웨어가 해결하고자 하는 핵심 비즈니스 영역을 의미&lt;/p>
&lt;h3>주요 단계&lt;span class="hx-absolute -hx-mt-20" id="주요-단계">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%eb%8b%a8%ea%b3%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>전략적 설계(Strategic Design)&lt;/strong>:
&lt;ul>
&lt;li>핵심 도메인 식별&lt;/li>
&lt;li>바운디드 컨텍스트 정의&lt;/li>
&lt;li>컨텍스트 맵 작성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>전술적 설계(Tactical Design)&lt;/strong>:
&lt;ul>
&lt;li>엔티티, 값 객체, 집합체 등의 도메인 모델 요소 설계&lt;/li>
&lt;li>도메인 서비스 정의&lt;/li>
&lt;li>리포지토리 및 팩토리 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>구현 및 지속적 개선&lt;/strong>:
&lt;ul>
&lt;li>도메인 모델을 코드로 구현&lt;/li>
&lt;li>지속적인 리팩토링과 모델 개선&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>특징&lt;span class="hx-absolute -hx-mt-20" id="특징">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>도메인 중심 접근&lt;/strong>: DDD는 비즈니스 도메인을 소프트웨어 설계의 핵심으로 삼습니다.&lt;/li>
&lt;li>&lt;strong>유비쿼터스 언어&lt;/strong>: 개발자와 도메인 전문가 간의 공통 언어를 사용하여 의사소통을 개선합니다.&lt;/li>
&lt;li>&lt;strong>바운디드 컨텍스트&lt;/strong>: 도메인 모델의 적용 범위를 명확히 정의합니다.&lt;/li>
&lt;li>&lt;strong>모델 주도 설계&lt;/strong>: 도메인 모델을 중심으로 소프트웨어를 설계합니다.&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>비즈니스 목표와의 연계&lt;/strong>: 소프트웨어가 실제 비즈니스 요구사항을 더 잘 반영합니다.&lt;/li>
&lt;li>&lt;strong>복잡성 관리&lt;/strong>: 큰 시스템을 관리 가능한 바운디드 컨텍스트로 나눕니다.&lt;/li>
&lt;li>&lt;strong>유지보수성 향상&lt;/strong>: 도메인 모델이 코드에 직접 반영되어 유지보수가 용이합니다.&lt;/li>
&lt;li>&lt;strong>협업 개선&lt;/strong>: 도메인 전문가와 개발자 간의 의사소통이 향상됩니다.&lt;/li>
&lt;/ol>
&lt;h3>단점&lt;span class="hx-absolute -hx-mt-20" id="단점">&lt;/span>
&lt;a href="#%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>초기 학습 곡선&lt;/strong>: DDD 개념과 실践에 익숙해지는 데 시간이 필요합니다.&lt;/li>
&lt;li>&lt;strong>복잡한 도메인에서의 어려움&lt;/strong>: 매우 복잡한 도메인에서는 모델링이 어려울 수 있습니다.&lt;/li>
&lt;li>&lt;strong>초기 개발 속도 저하&lt;/strong>: 도메인 모델링에 시간이 소요되어 초기 개발 속도가 느려질 수 있습니다.&lt;/li>
&lt;/ol>
&lt;h3>핵심 요소&lt;span class="hx-absolute -hx-mt-20" id="핵심-요소">&lt;/span>
&lt;a href="#%ed%95%b5%ec%8b%ac-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>엔티티(Entity)&lt;/strong>: 고유한 식별자를 가지는 도메인 객체.&lt;/li>
&lt;li>&lt;strong>값 객체(Value Object)&lt;/strong>: 속성만으로 정의되는 불변 객체.&lt;/li>
&lt;li>&lt;strong>집합체(Aggregate)&lt;/strong>: 관련된 객체들의 집합.&lt;/li>
&lt;li>&lt;strong>도메인 서비스(Domain Service)&lt;/strong>: 특정 엔티티에 속하지 않는 도메인 로직.&lt;/li>
&lt;li>&lt;strong>리포지토리(Repository)&lt;/strong>: 도메인 객체의 저장소.&lt;/li>
&lt;li>&lt;strong>팩토리(Factory)&lt;/strong>: 복잡한 객체의 생성을 담당.&lt;/li>
&lt;/ol>
&lt;h3>적합한 프로젝트 유형&lt;span class="hx-absolute -hx-mt-20" id="적합한-프로젝트-유형">&lt;/span>
&lt;a href="#%ec%a0%81%ed%95%a9%ed%95%9c-%ed%94%84%eb%a1%9c%ec%a0%9d%ed%8a%b8-%ec%9c%a0%ed%98%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>복잡한 비즈니스 로직을 가진 프로젝트&lt;/strong>: DDD는 복잡한 도메인을 효과적으로 모델링할 수 있습니다.&lt;/li>
&lt;li>&lt;strong>장기적인 유지보수가 필요한 프로젝트&lt;/strong>: DDD는 코드의 유지보수성을 향상시킵니다.&lt;/li>
&lt;li>&lt;strong>도메인 전문가와의 긴밀한 협업이 필요한 프로젝트&lt;/strong>: DDD는 도메인 전문가와 개발자 간의 협업을 강화합니다.&lt;/li>
&lt;li>&lt;strong>마이크로서비스 아키텍처를 사용하는 프로젝트&lt;/strong>: DDD의 바운디드 컨텍스트 개념은 마이크로서비스 설계에 적합합니다.&lt;/li>
&lt;li>&lt;strong>비즈니스 규칙이 자주 변경되는 프로젝트&lt;/strong>: DDD는 변화하는 비즈니스 요구사항에 유연하게 대응할 수 있습니다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>