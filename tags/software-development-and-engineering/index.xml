<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Software-Development-and-Engineering on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/software-development-and-engineering/</link>
    <description>Recent content in Software-Development-and-Engineering on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Fri, 22 Aug 2025 06:52:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/software-development-and-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Software Development Lifecycle</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/</link>
      <pubDate>Fri, 20 Sep 2024 05:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/</guid>
      <description>소프트웨어 개발 수명주기(SDLC)는 기획부터 폐기까지 전 과정을 체계적으로 관리하는 프레임워크이다. 요구사항 분석, 설계, 구현, 테스트, 배포, 유지보수의 단계를 거쳐 소프트웨어의 품질과 효율성을 높이는 것을 목표로 한다. 현대 개발 환경에서 SDLC는 애자일 방법론과 개발-운영-보안을 통합한 데브옵스(DevOps) 및 데브섹옵스(DevSecOps)를 융합하여 변화에 민첩하게 대응하고, DORA 지표로 성과를 측정하며 지속적으로 개선하는 형태로 발전하고 있다.</description>
    </item>
    <item>
      <title>DevOps</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/hybrid-and-modern/devops/</link>
      <pubDate>Sat, 28 Sep 2024 06:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/hybrid-and-modern/devops/</guid>
      <description>DevOps 는 개발과 운영을 결합해 팀 간 문화·자동화·협업을 강화하는 접근법으로, CI/CD·인프라 코드화 (IaC)·모니터링을 통해 **개발 속도, 배포 안정성, 품질을 동시에 향상**시키는 방식이다.</description>
    </item>
    <item>
      <title>Software Development &amp; Engineering</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/</link>
      <pubDate>Fri, 22 Aug 2025 06:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/</guid>
      <description></description>
    </item>
    <item>
      <title>Incremental Model</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/incremental-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/incremental-model/</guid>
      <description>전체 시스템을 여러 개의 작은 부분(증분)으로 나누어 순차적으로 개발하고 제공하는 접근 방식.</description>
    </item>
    <item>
      <title>Prototyping Model</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/prototyping-models/</link>
      <pubDate>Sat, 21 Sep 2024 00:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/prototyping-models/</guid>
      <description>최종 제품의 초기 버전 또는 모형을 만들어 사용자의 피드백을 받고 요구사항을 명확히 하는 방법.</description>
    </item>
    <item>
      <title>Rapid Application Development</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/hybrid-and-modern/rad/</link>
      <pubDate>Sat, 21 Sep 2024 00:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/hybrid-and-modern/rad/</guid>
      <description>빠른 프로토타이핑과 반복적인 개발을 통해 신속하게 애플리케이션을 구축하는 접근 방식</description>
    </item>
    <item>
      <title>Iterative Model</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/iterative-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/iterative-model/</guid>
      <description>전체 시스템을 여러 개의 작은 부분으로 나누어 반복적으로 개발하고 개선하는 방법</description>
    </item>
    <item>
      <title>Spiral Model</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/spiral-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/spiral-model/</guid>
      <description>위험 분석을 중심으로 반복적인 개발을 수행하며, 각 반복 주기마다 위험 요소를 평가하고 대응한다.</description>
    </item>
    <item>
      <title>V Model</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/v-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/v-model/</guid>
      <description>개발 단계와 테스트 단계를 병행하여 진행하는 검증(Verification)과 확인(Validation) 중심의 접근 방식이다.</description>
    </item>
    <item>
      <title>Waterfall Model</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/waterfall-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/waterfall-model/</guid>
      <description>각 단계를 순차적으로 진행하며, 이전 단계가 완료되어야 다음 단계로 넘어가는 전통적인 모델.</description>
    </item>
  </channel>
</rss>
