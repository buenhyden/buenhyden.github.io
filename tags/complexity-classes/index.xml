<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Complexity-Classes on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/complexity-classes/</link>
    <description>Recent content in Complexity-Classes on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 27 Dec 2024 08:29:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/complexity-classes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>튜링 기계 (Turing Machine)</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/turing-machine/</link>
      <pubDate>Sun, 13 Oct 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/turing-machine/</guid>
      <description>튜링 기계는 1936년 앨런 튜링이 제안한 추상적인 계산 모델로, 알고리즘의 개념을 수학적으로 정형화한 것으로, 현대 컴퓨터의 이론적 기초가 되었다.</description>
    </item>
    <item>
      <title>복잡도 클래스(Complexity Classes)</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/</link>
      <pubDate>Sun, 13 Oct 2024 09:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/</guid>
      <description>계산 복잡도 이론에서 비슷한 복잡도를 가진 문제들의 집합을 나타낸다.</description>
    </item>
    <item>
      <title>Deterministic vs. Nondeterministic computation</title>
      <link>https://buenhyden.github.io/posts/computer-science/data-structures-and-algorithms/fundamentals/computational-theory/deterministic-vs-nondeterministic-computation/</link>
      <pubDate>Fri, 27 Dec 2024 08:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/data-structures-and-algorithms/fundamentals/computational-theory/deterministic-vs-nondeterministic-computation/</guid>
      <description>결정론적 계산은 현대 컴퓨터의 기반이 되는 예측 가능하고 명확한 모델을 제공하는 반면, 비결정론적 계산은 이론적으로 더 강력한 계산 모델의 가능성을 탐구한다.</description>
    </item>
    <item>
      <title>P vs NP problem</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/p-vs-np-problem/</link>
      <pubDate>Fri, 27 Dec 2024 08:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/p-vs-np-problem/</guid>
      <description>P vs NP 문제는 컴퓨터 과학, 특히 계산 복잡도 이론에서 가장 중요한 미해결 문제 중 하나이다</description>
    </item>
    <item>
      <title>Non-deterministic Polynomial Time vs. Polynomial Time</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-time/non-deterministic-polynomial-time-vs-polynomial-time/</link>
      <pubDate>Fri, 27 Dec 2024 01:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-time/non-deterministic-polynomial-time-vs-polynomial-time/</guid>
      <description>계산 복잡도 이론에서 P와 NP는 가장 중요한 복잡도 클래스 중 두 가지로, 문제의 계산적 어려움을 분류하는 근본적인 개념이다.</description>
    </item>
    <item>
      <title>NP-Hard vs. NP-Complete</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-hard/np-hard-vs-np-complete/</link>
      <pubDate>Fri, 27 Dec 2024 01:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-hard/np-hard-vs-np-complete/</guid>
      <description>NP-Complete는 NP 클래스 내에서 가장 어려운 문제들을 나타내며, NP-Hard는 NP-Complete를 포함하여 더 넓은 범위의 어려운 문제들을 포괄한다.</description>
    </item>
    <item>
      <title>NP-난해(NP-Hard)</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-hard/</link>
      <pubDate>Thu, 12 Dec 2024 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-hard/</guid>
      <description>문제 H가 NP-Hard라는 것은, 모든 NP 문제가 다항 시간 내에 H로 환원(reduce)될 수 있다는 것을 의미한다.</description>
    </item>
    <item>
      <title>다항 공간(Polynomial Space) 클래스</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/polynomial-space/</link>
      <pubDate>Thu, 12 Dec 2024 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/polynomial-space/</guid>
      <description>PSPACE는 결정론적 튜링 기계에서 다항 크기의 메모리를 사용하여 해결할 수 있는 모든 결정 문제의 집합이다.</description>
    </item>
    <item>
      <title>지수 시간(Exponential Time) 복잡도</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/exponential-time/</link>
      <pubDate>Thu, 12 Dec 2024 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/exponential-time/</guid>
      <description>지수 시간(Exponential Time) 복잡도는 알고리즘의 실행 시간이 입력 크기에 대해 지수적으로 증가하는 경우를 나타낸다.</description>
    </item>
    <item>
      <title>NP-완전(NP-Complete)</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-complete/</link>
      <pubDate>Thu, 12 Dec 2024 14:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-complete/</guid>
      <description>NP-완전 문제는 NP 클래스 내에서 가장 &amp;#34;어려운&amp;#34; 문제들이다.</description>
    </item>
    <item>
      <title>다항 시간(Polynomial Time, P)</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/polynomial-time/</link>
      <pubDate>Thu, 12 Dec 2024 14:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/polynomial-time/</guid>
      <description>다항 시간(Polynomial Time)이란 알고리즘의 실행 시간이 입력 크기 n에 대한 다항식 함수로 표현될 수 있음을 의미한다.  즉, 알고리즘의 시간 복잡도가 O(n^k) 형태로 표현되는 경우를 말한다.</description>
    </item>
    <item>
      <title>비결정론적 다항 시간(Non-deterministic Polynomial Time, NP)</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-time/</link>
      <pubDate>Thu, 12 Dec 2024 14:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/classes/np-time/</guid>
      <description>비결정론적 다항 시간(NP)은 비결정론적 튜링 기계(Non-deterministic Turing Machine)에서 다항 시간 내에 해결할 수 있는 결정 문제들의 집합을 의미한다. 좀 더 직관적인 정의로는 &amp;#34;해답이 주어졌을 때 그 해답이 올바른지 다항 시간 내에 검증할 수 있는 문제들의 집합&amp;#34;이라고 할 수 있다.</description>
    </item>
    <item>
      <title>환원 가능성 (Reducibility)</title>
      <link>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/reducibility/</link>
      <pubDate>Sun, 13 Oct 2024 12:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/theoretical-foundations/computational-complexity/complexity-classes/reducibility/</guid>
      <description>환원 가능성은 하나의 문제를 다른 문제로 &amp;#34;변환&amp;#34;할 수 있는 능력을 의미한다.</description>
    </item>
  </channel>
</rss>
