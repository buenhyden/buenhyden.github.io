<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – WebAssembly</title><link>https://buenhyden.github.io/tags/webassembly/</link><description>Recent content in WebAssembly on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 24 Dec 2024 11:46:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/webassembly/index.xml" rel="self" type="application/rss+xml"/><item><title>WebAssembly</title><link>https://buenhyden.github.io/posts/frontend/webassembly/</link><pubDate>Tue, 24 Dec 2024 11:46:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/frontend/webassembly/</guid><description>
&lt;h2>WebAssembly&lt;/h2>&lt;p>WebAssembly(줄여서 Wasm)는 웹 브라우저에서 실행할 수 있는 새로운 유형의 코드.&lt;/p>
&lt;h3>정의와 역할&lt;/h3>&lt;ul>
&lt;li>WebAssembly는 스택 기반의 가상 머신을 위한 바이너리 명령 포맷.&lt;/li>
&lt;li>C, C++, Rust 등의 언어로 작성된 코드를 웹에서 실행할 수 있게 해주는 컴파일 대상.&lt;/li>
&lt;li>웹 브라우저에서 고성능 애플리케이션을 실행할 수 있도록 설계되었다.&lt;/li>
&lt;/ul>
&lt;h3>WebAssembly가 해결하는 문제&lt;/h3>&lt;p>웹 애플리케이션의 성능 한계를 극복하기 위해 만들어졌다.&lt;br>
JavaScript는 훌륭한 언어지만, 복잡한 계산이나 게임 엔진과 같은 고성능이 필요한 작업에서는 한계가 있었다. WebAssembly는 이러한 성능 격차를 메우기 위해 설계되었다.&lt;/p>
&lt;p>예를 들어, 3D 게임 엔진을 웹에서 실행하는 경우를 생각해보자:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// C++로 작성된 게임 물리 엔진 코드
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">updatePhysics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GameObject&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">object&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Vector3&lt;/span> &lt;span class="n">acceleration&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">calculateForces&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">object&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">object&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mass&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">object&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">velocity&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">acceleration&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">deltaTime&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">object&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">position&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">object&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">velocity&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">deltaTime&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이 코드를 WebAssembly로 컴파일하면 JavaScript로 작성된 것보다 훨씬 빠르게 실행된다.&lt;/p>
&lt;h3>주요 기능&lt;/h3>&lt;ol>
&lt;li>네이티브에 가까운 성능으로 코드 실행&lt;/li>
&lt;li>다양한 프로그래밍 언어 지원 (C, C++, Rust, Go 등)&lt;/li>
&lt;li>JavaScript와의 상호 운용성&lt;/li>
&lt;li>서버 사이드 및 엣지 컴퓨팅 환경에서도 사용 가능&lt;/li>
&lt;/ol>
&lt;h3>특징&lt;/h3>&lt;ol>
&lt;li>고성능: 바이너리 형식으로 작성되어 빠른 로딩과 실행 속도 제공&lt;/li>
&lt;li>이식성: 모든 주요 브라우저에서 지원되며, 다양한 플랫폼에서 일관된 성능 유지&lt;/li>
&lt;li>보안성: 브라우저의 샌드박스 환경에서 실행되어 보안 강화&lt;/li>
&lt;li>컴팩트한 바이너리 포맷: 효율적인 전송과 저장 가능&lt;/li>
&lt;li>모듈화: 재사용 가능한 컴포넌트 생성 용이&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;/h3>&lt;ul>
&lt;li>복잡한 연산이나 고성능이 요구되는 작업에 적합&lt;/li>
&lt;li>기존 C/C++ 코드베이스 재사용 가능&lt;/li>
&lt;li>웹 애플리케이션의 성능 향상&lt;/li>
&lt;li>다양한 플랫폼에서의 일관된 성능 제공&lt;/li>
&lt;/ul>
&lt;h3>제한사항과 고려사항&lt;/h3>&lt;ol>
&lt;li>직접적인 DOM 접근 불가: WebAssembly는 직접 웹 페이지의 DOM을 조작할 수 없으며, JavaScript를 통해 간접적으로 접근해야 한다.&lt;/li>
&lt;li>학습 곡선 저수준 언어에 대한 이해가 필요하며, 빌드 과정이 복잡할 수 있다.&lt;/li>
&lt;li>파일 크기 최적화되지 않은 경우 JavaScript보다 큰 파일 크기를 가질 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>실제 활용 사례&lt;/h3>&lt;ol>
&lt;li>게임 개발 Unity나 Unreal Engine과 같은 게임 엔진을 웹으로 포팅할 때 사용된다.&lt;/li>
&lt;li>이미지/비디오 처리 복잡한 이미지 필터나 비디오 인코딩/디코딩에 활용된다.&lt;/li>
&lt;li>과학적 계산 대규모 수치 계산이나 시뮬레이션에서 사용된다.&lt;/li>
&lt;/ol>
&lt;h3>미래 전망&lt;/h3>&lt;p>WebAssembly는 계속해서 발전하고 있으며, 다음과 같은 영역에서 더 많은 활용이 예상된다:&lt;/p>
&lt;ol>
&lt;li>서버리스 컴퓨팅 클라우드 환경에서의 고성능 컴퓨팅에 활용될 것이다.&lt;/li>
&lt;li>웹 애플리케이션 더 복잡하고 성능이 중요한 웹 애플리케이션 개발에 사용될 것이다.&lt;/li>
&lt;li>크로스 플랫폼 개발 데스크톱, 모바일, 웹을 아우르는 애플리케이션 개발에 활용될 것이다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>