<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – ER-모델링</title><link>https://buenhyden.github.io/tags/er-%EB%AA%A8%EB%8D%B8%EB%A7%81/</link><description>Recent content in ER-모델링 on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 25 Nov 2024 02:06:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/er-%EB%AA%A8%EB%8D%B8%EB%A7%81/index.xml" rel="self" type="application/rss+xml"/><item><title>ER(Entity-Relationship) 모델링</title><link>https://buenhyden.github.io/til/2024/11/entity-relationship-modeling/</link><pubDate>Mon, 25 Nov 2024 02:06:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/11/entity-relationship-modeling/</guid><description>
&lt;h2>ER(Entity-Relationship) 모델링&lt;/h2>&lt;p>ER 모델링은 현실 세계의 데이터를 개체(Entity), 속성(Attribute), 관계(Relationship)로 표현하여 데이터베이스의 구조를 설계하는 방법.&lt;br>
이를 통해 복잡한 데이터 구조를 시각적으로 표현하고 이해하기 쉽게 만든다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/TIL/2024/11/1024px-ER_Diagram_MMORPG.png"
alt="An entity–attribute-relationship diagram for an MMORPG using Chens notation"
loading="lazy" />
&lt;/figure>&lt;br>
&lt;em>Source: &lt;a href="https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model#/media/File:ER_Diagram_MMORPG.png" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model#/media/File:ER_Diagram_MMORPG.png&lt;/a>&lt;/em>&lt;/p>
&lt;h3>주요 구성 요소&lt;/h3>&lt;ol>
&lt;li>개체(Entity)&lt;br>
개체는 데이터베이스에 저장하고자 하는 실제 대상을 나타낸다.&lt;br>
예를 들어, &amp;lsquo;학생&amp;rsquo;, &amp;lsquo;강좌&amp;rsquo;, &amp;lsquo;교수&amp;rsquo; 등이 개체가 될 수 있다. 개체는 보통 사각형으로 표현된다.&lt;br>
예시:&lt;br>
학생 개체의 경우:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>실체: 개별 학생들&lt;/li>
&lt;li>표현: &amp;lsquo;학생&amp;rsquo; 이라는 개체로 모델링&lt;/li>
&lt;li>속성: 학번, 이름, 학과, 연락처 등&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>속성(Attribute)&lt;br>
속성은 개체의 특성이나 성질을 나타낸다.&lt;br>
타원형으로 표현되며, 개체와 선으로 연결된다.&lt;br>
속성의 종류:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>단일값 속성: 하나의 값만 가지는 속성 (예: 학번)&lt;/li>
&lt;li>다중값 속성: 여러 값을 가질 수 있는 속성 (예: 전화번호)&lt;/li>
&lt;li>유도 속성: 다른 속성으로부터 계산되는 속성 (예: 나이)&lt;/li>
&lt;li>키 속성: 개체를 유일하게 식별하는 속성 (예: 학번)&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>관계(Relationship)&lt;br>
관계는 개체들 간의 연관성을 나타낸다.&lt;br>
마름모 형태로 표현되며, 관련된 개체들과 선으로 연결된다.&lt;br>
관계의 종류:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>일대일(1:1) 관계: 각 개체가 상대 개체와 최대 하나씩 연결&lt;/li>
&lt;li>일대다(1:N) 관계: 한 개체가 여러 개의 다른 개체와 연결&lt;/li>
&lt;li>다대다(N:M) 관계: 양쪽 개체 모두 여러 개의 상대 개체와 연결&lt;br>
관계 표현 예시:&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>[학생] ----&amp;lt; 수강 &amp;gt;---- [강좌]
| |
(학번) (과목코드)
(이름) (과목명)
(학과) (학점)&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>ER 모델링의 단계&lt;/h3>&lt;ol>
&lt;li>
&lt;p>요구사항 분석&lt;br>
시스템에서 필요한 데이터와 기능을 파악한다.&lt;br>
예: &amp;ldquo;대학 수강신청 시스템을 만들어야 한다. 학생들은 여러 강좌를 수강할 수 있으며…&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>개체 식별&lt;br>
주요 데이터 개체들을 파악한다.&lt;br>
예: 학생, 강좌, 교수, 학과 등&lt;/p>
&lt;/li>
&lt;li>
&lt;p>속성 정의&lt;br>
각 개체의 특성을 정의한다.&lt;br>
예: 학생(학번, 이름, 학과, 연락처)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>관계 설정&lt;br>
개체들 간의 관계를 정의한다.&lt;br>
예: 학생 - 수강 - 강좌 (다대다 관계)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>제약조건 정의&lt;br>
데이터의 무결성을 위한 제약조건을 설정한다.&lt;br>
예: &amp;ldquo;학생은 최대 6과목까지만 수강할 수 있다&amp;rdquo;&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>실제 적용 예시&lt;/h3>&lt;p>대학 수강신청 시스템의 ER 모델:&lt;/p>
&lt;p>개체:&lt;/p>
&lt;ul>
&lt;li>학생(학번, 이름, 학과, 연락처)&lt;/li>
&lt;li>강좌(과목코드, 과목명, 학점, 수강정원)&lt;/li>
&lt;li>교수(교수번호, 이름, 학과, 연구실)&lt;/li>
&lt;/ul>
&lt;p>관계:&lt;/p>
&lt;ul>
&lt;li>수강(학생-강좌): 다대다 관계&lt;/li>
&lt;li>담당(교수-강좌): 일대다 관계&lt;/li>
&lt;li>소속(학생-학과): 다대일 관계&lt;/li>
&lt;/ul>
&lt;p>제약조건:&lt;/p>
&lt;ul>
&lt;li>학생은 한 학기에 최대 18학점까지 수강 가능&lt;/li>
&lt;li>각 강좌는 반드시 한 명의 담당 교수가 있어야 함&lt;/li>
&lt;li>강좌별 수강 인원은 수강정원을 초과할 수 없음&lt;/li>
&lt;/ul>
&lt;h3>ER 모델링의 장점&lt;/h3>&lt;ol>
&lt;li>
&lt;p>직관적 이해&lt;br>
시각적 표현을 통해 시스템의 구조를 쉽게 이해할 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>의사소통 도구&lt;br>
개발자, 사용자, 관리자 간의 효과적인 의사소통을 가능하게 한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>설계 검증&lt;br>
데이터베이스 구현 전에 설계상의 문제를 발견하고 수정할 수 있다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>