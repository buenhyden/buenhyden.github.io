<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Process</title><link>https://buenhyden.github.io/tags/process/</link><description>Recent content in Process on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 14 Oct 2024 08:30:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/process/index.xml" rel="self" type="application/rss+xml"/><item><title>Process vs Thread</title><link>https://buenhyden.github.io/til/2024/10/process-vs-thread/</link><pubDate>Mon, 14 Oct 2024 08:30:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/10/process-vs-thread/</guid><description>
&lt;h2>Process Vs Thread&lt;span class="hx-absolute -hx-mt-20" id="process-vs-thread">&lt;/span>
&lt;a href="#process-vs-thread" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ol>
&lt;li>
&lt;p>프로세스:&lt;/p>
&lt;ul>
&lt;li>독립적인 실행 단위로, 자체 메모리 공간과 시스템 자원을 가진다.&lt;/li>
&lt;li>다른 프로세스와 완전히 격리되어 있어 안정성이 높다.&lt;/li>
&lt;li>생성과 전환에 많은 비용이 든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>스레드:&lt;/p>
&lt;ul>
&lt;li>프로세스 내부의 실행 단위로, 같은 프로세스의 다른 스레드와 메모리를 공유한다.&lt;/li>
&lt;li>프로세스보다 가볍고, 생성과 전환 비용이 적다.&lt;/li>
&lt;li>동시성을 제공하지만, 동기화 문제에 주의해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>
&lt;img src="../Screenshot-from-2024-02-26-11-48-56-768.png" alt="Single Threaded vs Multi-threaded Process" loading="lazy" />&lt;br>
&lt;em>Source: &lt;a href="https://www.geeksforgeeks.org/thread-in-operating-system/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/thread-in-operating-system/&lt;/a>&lt;/em>&lt;/p>
&lt;h3>Process Vs Thread&lt;span class="hx-absolute -hx-mt-20" id="process-vs-thread-1">&lt;/span>
&lt;a href="#process-vs-thread-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>실행 중인 프로그램의 인스턴스&lt;/td>
&lt;td>프로세스 내에서 실행되는 더 작은 실행 단위&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 공간&lt;/td>
&lt;td>독립적인 메모리 공간 (코드, 데이터, 스택, 힙)&lt;/td>
&lt;td>프로세스의 메모리 공간 공유 (코드, 데이터, 힙), 독립적인 스택&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구성 요소&lt;/td>
&lt;td>- 코드 영역&lt;br>- 데이터 영역&lt;br>- 스택 영역&lt;br>- 힙 영역&lt;/td>
&lt;td>- 스레드 ID&lt;br>- 프로그램 카운터&lt;br>- 레지스터 집합&lt;br>- 스택&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 공유&lt;/td>
&lt;td>다른 프로세스와 자원 공유 안 함&lt;/td>
&lt;td>같은 프로세스 내 스레드 간 자원 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>생성 비용&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>컨텍스트 스위칭&lt;/td>
&lt;td>비용이 큼&lt;/td>
&lt;td>비용이 적음 (같은 프로세스 내에서)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>안정성&lt;/td>
&lt;td>높음 (한 프로세스의 오류가 다른 프로세스에 영향 없음)&lt;/td>
&lt;td>상대적으로 낮음 (한 스레드의 오류가 전체 프로세스에 영향)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>통신&lt;/td>
&lt;td>프로세스 간 통신(IPC) 필요 (복잡하고 오버헤드 큼)&lt;/td>
&lt;td>쉽고 빠른 통신 (공유 메모리 사용)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>병렬 처리&lt;/td>
&lt;td>가능하지만 오버헤드 큼&lt;/td>
&lt;td>효율적인 병렬 처리 가능&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>메모리 구조 비교&lt;span class="hx-absolute -hx-mt-20" id="메모리-구조-비교">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b5%ac%ec%a1%b0-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>메모리 영역&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>코드 영역&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>데이터 영역&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>힙 영역&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>스택 영역&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>각 스레드마다 독립적&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>특성 상세 비교&lt;span class="hx-absolute -hx-mt-20" id="특성-상세-비교">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%84%b1-%ec%83%81%ec%84%b8-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>독립성&lt;/strong>&lt;/td>
&lt;td>완전히 독립적&lt;/td>
&lt;td>부분적으로 독립적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>자원 공유&lt;/strong>&lt;/td>
&lt;td>제한적 (IPC 필요)&lt;/td>
&lt;td>쉽게 공유 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>오류 영향&lt;/strong>&lt;/td>
&lt;td>다른 프로세스에 영향 없음&lt;/td>
&lt;td>같은 프로세스의 모든 스레드에 영향&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>동기화&lt;/strong>&lt;/td>
&lt;td>필요성 낮음&lt;br>- IPC 메커니즘 필요&lt;/td>
&lt;td>공유 자원에 대한 동기화 필요&lt;br>- 뮤텍스, 세마포어 등 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>생성 시간&lt;/strong>&lt;/td>
&lt;td>더 오래 걸림&lt;/td>
&lt;td>더 빠름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>종료 시간&lt;/strong>&lt;/td>
&lt;td>더 오래 걸림&lt;/td>
&lt;td>더 빠름&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>장단점 비교&lt;span class="hx-absolute -hx-mt-20" id="장단점-비교">&lt;/span>
&lt;a href="#%ec%9e%a5%eb%8b%a8%ec%a0%90-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>구분&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>장점&lt;/strong>&lt;/td>
&lt;td>- 높은 안정성&lt;br>- 다른 프로세스의 영향 받지 않음&lt;br>- 보안성이 높음&lt;/td>
&lt;td>- 생성/종료가 빠름&lt;br>- 자원 공유가 쉬움&lt;br>- 통신 비용이 적음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>단점&lt;/strong>&lt;/td>
&lt;td>- 많은 시스템 자원 필요&lt;br>- 프로세스 간 통신이 복잡&lt;br>- 컨텍스트 스위칭 비용이 큼&lt;/td>
&lt;td>- 동기화 문제 발생 가능&lt;br>- 디버깅이 어려움&lt;br>- 하나의 스레드 문제가 전체에 영향&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>사용 사례 비교&lt;span class="hx-absolute -hx-mt-20" id="사용-사례-비교">&lt;/span>
&lt;a href="#%ec%82%ac%ec%9a%a9-%ec%82%ac%eb%a1%80-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>용도&lt;/th>
&lt;th>Process 선호&lt;/th>
&lt;th>Thread 선호&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>웹 서버&lt;/strong>&lt;/td>
&lt;td>안정성이 중요한 경우&lt;/td>
&lt;td>높은 동시성이 필요한 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>GUI 앱&lt;/strong>&lt;/td>
&lt;td>독립적인 작업이 많은 경우&lt;/td>
&lt;td>반응성이 중요한 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>데이터 처리&lt;/strong>&lt;/td>
&lt;td>대용량 병렬 처리&lt;/td>
&lt;td>데이터 공유가 많은 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>시스템 서비스&lt;/strong>&lt;/td>
&lt;td>격리가 필요한 경우&lt;/td>
&lt;td>빈번한 통신이 필요한 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>활용 예&lt;/td>
&lt;td>- 독립적인 애플리케이션 &lt;br>- 웹 브라우저의 각 탭 &lt;br>- 다중 사용자 서버&lt;/td>
&lt;td>- 웹 서버 요청 처리 &lt;br>- 게임 엔진 (렌더링, 물리 연산) &lt;br>- 멀티미디어 애플리케이션&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>동기화 메커니즘 비교&lt;span class="hx-absolute -hx-mt-20" id="동기화-메커니즘-비교">&lt;/span>
&lt;a href="#%eb%8f%99%ea%b8%b0%ed%99%94-%eb%a9%94%ec%bb%a4%eb%8b%88%ec%a6%98-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>메커니즘&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>공유 메모리&lt;/strong>&lt;/td>
&lt;td>명시적으로 설정 필요&lt;/td>
&lt;td>기본적으로 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>뮤텍스&lt;/strong>&lt;/td>
&lt;td>프로세스 간 뮤텍스 필요&lt;/td>
&lt;td>프로세스 내 뮤텍스 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>세마포어&lt;/strong>&lt;/td>
&lt;td>시스템 세마포어 필요&lt;/td>
&lt;td>프로세스 내 세마포어 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메시지 전달&lt;/strong>&lt;/td>
&lt;td>IPC 메커니즘 사용&lt;/td>
&lt;td>직접 메모리 접근&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 차이점들을 이해하고 적절히 활용하면, 상황에 맞는 최적의 실행 단위를 선택할 수 있다.&lt;/p>
&lt;hr>
&lt;h3>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3></description></item><item><title>Process vs Thread vs Coroutine</title><link>https://buenhyden.github.io/til/2024/10/process-vs-thread-vs-coroutine/</link><pubDate>Mon, 14 Oct 2024 08:30:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/10/process-vs-thread-vs-coroutine/</guid><description>
&lt;h2>Process Vs Thread Vs Coroutine&lt;span class="hx-absolute -hx-mt-20" id="process-vs-thread-vs-coroutine">&lt;/span>
&lt;a href="#process-vs-thread-vs-coroutine" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Process, Thread, Coroutine은 모두 프로그램 실행의 단위이지만, 각각 다른 특성과 용도를 가지고 있다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Process:&lt;/p>
&lt;ul>
&lt;li>독립적인 실행 단위로, 자체 메모리 공간과 시스템 자원을 가진다.&lt;/li>
&lt;li>다른 프로세스와 완전히 격리되어 있어 안정성이 높다.&lt;/li>
&lt;li>생성과 전환에 많은 비용이 든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Thread:&lt;/p>
&lt;ul>
&lt;li>프로세스 내부의 실행 단위로, 같은 프로세스의 다른 스레드와 메모리를 공유한다.&lt;/li>
&lt;li>프로세스보다 가볍고, 생성과 전환 비용이 적다.&lt;/li>
&lt;li>동시성을 제공하지만, 동기화 문제에 주의해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Coroutine:&lt;/p>
&lt;ul>
&lt;li>경량 스레드라고도 불리며, 스레드 내에서 실행되는 협력적 멀티태스킹 단위.&lt;/li>
&lt;li>매우 가볍고, 생성과 전환 비용이 매우 적다.&lt;/li>
&lt;li>비동기 프로그래밍을 단순화하고, 동시성을 효율적으로 관리한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Process, Thread, Coroutine의 관계는 다음과 같이 계층적으로 표현할 수 있다:&lt;br>
&lt;code>CPU &amp;gt; Core &amp;gt; Process &amp;gt; Thread &amp;gt; Coroutine&lt;/code>&lt;/p>
&lt;ul>
&lt;li>프로세스는 독립적인 메모리 공간을 가지며, 하나 이상의 스레드를 포함한다.&lt;/li>
&lt;li>스레드는 프로세스 내에서 실행되며, 같은 프로세스의 메모리를 공유한다.&lt;/li>
&lt;li>코루틴은 스레드 내에서 실행되는 더 가벼운 실행 단위이다.&lt;br>
이 구조는 각 단위의 특성과 리소스 사용을 잘 보여준다.&lt;br>
프로세스가 가장 무겁고, 코루틴이 가장 가벼운 실행 단위이다.&lt;/li>
&lt;/ul>
&lt;p>
&lt;img src="../1_AD4ZqhM1MgNe-npYcrkWzQ.webp" alt="Coroutine in User-level Thread" loading="lazy" />&lt;br>
&lt;em>Source: &lt;a href="https://choi-geonu.medium.com/%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%93%A4%EC%9D%B4-%EC%95%8C%EC%95%84%EC%95%BC%ED%95%A0-%EB%8F%99%EC%8B%9C%EC%84%B1-6-coroutine-9eecdbeb2d2d" target="_blank" rel="noopener">https://choi-geonu.medium.com/%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%93%A4%EC%9D%B4-%EC%95%8C%EC%95%84%EC%95%BC%ED%95%A0-%EB%8F%99%EC%8B%9C%EC%84%B1-6-coroutine-9eecdbeb2d2d&lt;/a>&lt;/em>&lt;/p>
&lt;h3>Process Vs Thread Vs Coroutine 비교&lt;span class="hx-absolute -hx-mt-20" id="process-vs-thread-vs-coroutine-비교">&lt;/span>
&lt;a href="#process-vs-thread-vs-coroutine-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;th>Coroutine&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>정의&lt;/strong>&lt;/td>
&lt;td>독립적인 실행 단위로 자체 메모리 공간 보유&lt;/td>
&lt;td>프로세스 내의 실행 단위로 메모리 공유&lt;/td>
&lt;td>협력적 멀티태스킹을 위한 서브루틴&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 공유&lt;/strong>&lt;/td>
&lt;td>독립적인 메모리 공간&lt;/td>
&lt;td>같은 프로세스의 메모리 공유&lt;/td>
&lt;td>같은 스레드의 메모리 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>컨텍스트 스위칭 비용&lt;/strong>&lt;/td>
&lt;td>매우 높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>매우 낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>생성/소멸 비용&lt;/strong>&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>자원 사용&lt;/strong>&lt;/td>
&lt;td>많음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>적음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>통신 방식&lt;/strong>&lt;/td>
&lt;td>IPC (파이프, 소켓 등)&lt;/td>
&lt;td>공유 메모리, 뮤텍스&lt;/td>
&lt;td>yield/await&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>병렬 처리&lt;/strong>&lt;/td>
&lt;td>실제 병렬 처리 가능&lt;/td>
&lt;td>실제 병렬 처리 가능&lt;/td>
&lt;td>동시성만 제공 (병렬x)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>적합한 작업&lt;/strong>&lt;/td>
&lt;td>CPU 집약적 작업&lt;/td>
&lt;td>I/O + CPU 혼합 작업&lt;/td>
&lt;td>I/O 집약적 작업&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>에러 영향&lt;/strong>&lt;/td>
&lt;td>다른 프로세스에 영향 없음&lt;/td>
&lt;td>같은 프로세스의 스레드들에 영향&lt;/td>
&lt;td>명시적 에러 처리 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>디버깅 난이도&lt;/strong>&lt;/td>
&lt;td>쉬움&lt;/td>
&lt;td>어려움&lt;/td>
&lt;td>중간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>확장성&lt;/strong>&lt;/td>
&lt;td>높음 (여러 CPU 코어)&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>단일 스레드 내 제한&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 격리&lt;/strong>&lt;/td>
&lt;td>완전 격리&lt;/td>
&lt;td>부분 공유&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>실행 모델 비교&lt;span class="hx-absolute -hx-mt-20" id="실행-모델-비교">&lt;/span>
&lt;a href="#%ec%8b%a4%ed%96%89-%eb%aa%a8%eb%8d%b8-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>실행 모델&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;th>Coroutine&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>스케줄링 주체&lt;/strong>&lt;/td>
&lt;td>OS&lt;/td>
&lt;td>OS&lt;/td>
&lt;td>프로그램&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>선점 여부&lt;/strong>&lt;/td>
&lt;td>선점형&lt;/td>
&lt;td>선점형&lt;/td>
&lt;td>비선점형&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>컨텍스트 스위치&lt;/strong>&lt;/td>
&lt;td>OS 레벨&lt;/td>
&lt;td>OS 레벨&lt;/td>
&lt;td>사용자 레벨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>동시성 모델&lt;/strong>&lt;/td>
&lt;td>진정한 병렬성&lt;/td>
&lt;td>진정한 병렬성&lt;/td>
&lt;td>협력적 멀티태스킹&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>리소스 사용 비교&lt;span class="hx-absolute -hx-mt-20" id="리소스-사용-비교">&lt;/span>
&lt;a href="#%eb%a6%ac%ec%86%8c%ec%8a%a4-%ec%82%ac%ec%9a%a9-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>리소스&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;th>Coroutine&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>메모리 사용량&lt;/strong>&lt;/td>
&lt;td>높음 (독립 메모리)&lt;/td>
&lt;td>중간 (공유 메모리)&lt;/td>
&lt;td>낮음 (최소 오버헤드)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>CPU 사용&lt;/strong>&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>시스템 리소스&lt;/strong>&lt;/td>
&lt;td>많음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>적음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>스택 크기&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>성능 특성 비교&lt;span class="hx-absolute -hx-mt-20" id="성능-특성-비교">&lt;/span>
&lt;a href="#%ec%84%b1%eb%8a%a5-%ed%8a%b9%ec%84%b1-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>성능 특성&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;th>Coroutine&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>생성 시간&lt;/strong>&lt;/td>
&lt;td>느림&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>빠름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>컨텍스트 스위치 시간&lt;/strong>&lt;/td>
&lt;td>느림&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>빠름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 접근&lt;/strong>&lt;/td>
&lt;td>독립적 (느림)&lt;/td>
&lt;td>공유 (빠름)&lt;/td>
&lt;td>공유 (매우 빠름)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>확장성 한계&lt;/strong>&lt;/td>
&lt;td>CPU 코어 수&lt;/td>
&lt;td>시스템 리소스&lt;/td>
&lt;td>이벤트 루프 성능&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>사용 사례별 비교&lt;span class="hx-absolute -hx-mt-20" id="사용-사례별-비교">&lt;/span>
&lt;a href="#%ec%82%ac%ec%9a%a9-%ec%82%ac%eb%a1%80%eb%b3%84-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>사용 사례&lt;/th>
&lt;th>적합한 모델&lt;/th>
&lt;th>이유&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>대규모 데이터 처리&lt;/td>
&lt;td>Process&lt;/td>
&lt;td>메모리 격리와 CPU 활용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>웹 서버&lt;/td>
&lt;td>Thread/Coroutine&lt;/td>
&lt;td>I/O 작업 처리에 효율적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실시간 게임&lt;/td>
&lt;td>Thread&lt;/td>
&lt;td>낮은 지연시간 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GUI 애플리케이션&lt;/td>
&lt;td>Thread&lt;/td>
&lt;td>사용자 인터페이스 반응성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>네트워크 서비스&lt;/td>
&lt;td>Coroutine&lt;/td>
&lt;td>많은 동시 연결 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>이미지/비디오 처리&lt;/td>
&lt;td>Process&lt;/td>
&lt;td>CPU 집약적 작업&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Process Scheduling</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-scheduling/</link><pubDate>Sun, 29 Sep 2024 06:21:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-scheduling/</guid><description>
&lt;h2>프로세스 스케쥴링 (Process Scheduling)&lt;span class="hx-absolute -hx-mt-20" id="프로세스-스케쥴링-process-scheduling">&lt;/span>
&lt;a href="#%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4-%ec%8a%a4%ec%bc%80%ec%a5%b4%eb%a7%81-process-scheduling" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>프로세스 스케줄링은 컴퓨터의 CPU 자원을 여러 프로세스에 효율적으로 할당하는 방법을 결정하는 메커니즘.&lt;br>
프로세스 스케줄링도 다양한 요소를 고려하여 최적의 실행 순서를 결정한다.&lt;/p>
&lt;h3>주요 특징&lt;span class="hx-absolute -hx-mt-20" id="주요-특징">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>CPU 활용도 극대화: I/O 대기 시간 동안 다른 프로세스에 CPU를 할당하여 유휴 시간을 최소화합니다.&lt;/li>
&lt;li>처리량 증가: 단위 시간당 완료되는 프로세스의 수를 늘립니다.&lt;/li>
&lt;li>응답 시간 최소화: 사용자 요청에 대한 시스템의 반응 속도를 향상시킵니다.&lt;/li>
&lt;li>대기 시간 감소: 프로세스가 준비 큐에서 기다리는 시간을 줄입니다.&lt;/li>
&lt;li>공정성 유지: 모든 프로세스에 적절한 CPU 시간을 할당합니다.&lt;/li>
&lt;/ol>
&lt;h3>스케줄링의 목적&lt;span class="hx-absolute -hx-mt-20" id="스케줄링의-목적">&lt;/span>
&lt;a href="#%ec%8a%a4%ec%bc%80%ec%a4%84%eb%a7%81%ec%9d%98-%eb%aa%a9%ec%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>CPU 활용도 최대화&lt;/p>
&lt;ul>
&lt;li>CPU가 쉬는 시간을 최소화&lt;/li>
&lt;li>가능한 한 많은 작업 처리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>처리량(Throughput) 향상&lt;/p>
&lt;ul>
&lt;li>단위 시간당 완료되는 프로세스 수 증가&lt;/li>
&lt;li>시스템 전체의 효율성 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>응답 시간 최소화&lt;/p>
&lt;ul>
&lt;li>사용자 요청에 대한 빠른 반응&lt;/li>
&lt;li>대화형 시스템에서 특히 중요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>대기 시간 최소화&lt;/p>
&lt;ul>
&lt;li>프로세스가 준비 큐에서 기다리는 시간 감소&lt;/li>
&lt;li>전체적인 시스템 성능 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스케줄링 방식&lt;span class="hx-absolute -hx-mt-20" id="스케줄링-방식">&lt;/span>
&lt;a href="#%ec%8a%a4%ec%bc%80%ec%a4%84%eb%a7%81-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>선점형: 실행 중인 프로세스를 중단하고 다른 프로세스에 CPU를 할당할 수 있다.&lt;/li>
&lt;li>비선점형: 실행 중인 프로세스가 자발적으로 CPU를 반환할 때까지 기다린다.&lt;/li>
&lt;/ul>
&lt;p>PCB(Process Control Block) 는프로세스 스케줄링에 다음과 같은 방식으로 기여한다:&lt;/p>
&lt;ol>
&lt;li>프로세스 상태 관리: PCB는 프로세스의 현재 상태(실행 중, 준비, 대기 등)를 저장한다. 스케줄러는 이 정보를 사용하여 실행 가능한 프로세스를 식별하고 선택한다.&lt;/li>
&lt;li>스케줄링 정보 제공: PCB에는 프로세스의 우선순위, CPU 사용 시간 등 스케줄링에 필요한 정보가 포함되어 있다. 스케줄러는 이 정보를 바탕으로 다음에 실행할 프로세스를 결정한다.&lt;/li>
&lt;li>컨텍스트 스위칭 지원: PCB는 프로세스의 레지스터 값, 프로그램 카운터 등을 저장하여 컨텍스트 스위칭을 가능하게 한다. 이를 통해 스케줄러는 프로세스 간 전환을 효율적으로 수행할 수 있다.&lt;/li>
&lt;li>리소스 할당 정보 저장: PCB는 프로세스에 할당된 메모리, 열린 파일 등의 리소스 정보를 포함한다. 스케줄러는 이 정보를 사용하여 리소스 경쟁을 관리하고 데드락을 방지한다.&lt;/li>
&lt;li>성능 모니터링: PCB에 저장된 CPU 사용 시간, 대기 시간 등의 정보는 스케줄러가 시스템 성능을 모니터링하고 최적화하는 데 사용된다.&lt;/li>
&lt;/ol>
&lt;p>이러한 기여를 통해 PCB는 운영 체제가 효율적인 프로세스 스케줄링을 수행하고, 시스템 자원을 최적화하며, 전반적인 시스템 성능을 향상시키는 데 중요한 역할을 한다.&lt;/p>
&lt;h3>주요 스케줄링 알고리즘&lt;span class="hx-absolute -hx-mt-20" id="주요-스케줄링-알고리즘">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ec%8a%a4%ec%bc%80%ec%a4%84%eb%a7%81-%ec%95%8c%ea%b3%a0%eb%a6%ac%ec%a6%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>선입선출(FCFS, First-Come, First-Served)&lt;span class="hx-absolute -hx-mt-20" id="선입선출fcfs-first-come-first-served">&lt;/span>
&lt;a href="#%ec%84%a0%ec%9e%85%ec%84%a0%ec%b6%9cfcfs-first-come-first-served" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>이는 가장 단순한 스케줄링 방식으로, 먼저 도착한 프로세스를 먼저 처리한다.&lt;/p>
&lt;h5>예시&lt;span class="hx-absolute -hx-mt-20" id="예시">&lt;/span>
&lt;a href="#%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># FCFS 스케줄링 시뮬레이션&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">processes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">fcfs_scheduling&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">processes&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">sorted&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">processes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">current_time&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">waiting_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_time&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Process &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">: Waiting Time = &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">waiting_time&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>최단 작업 우선(SJF, Shortest Job First)&lt;span class="hx-absolute -hx-mt-20" id="최단-작업-우선sjf-shortest-job-first">&lt;/span>
&lt;a href="#%ec%b5%9c%eb%8b%a8-%ec%9e%91%ec%97%85-%ec%9a%b0%ec%84%a0sjf-shortest-job-first" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>실행 시간이 가장 짧은 프로세스를 우선적으로 처리하는 방식.&lt;/p>
&lt;h5>특징&lt;span class="hx-absolute -hx-mt-20" id="특징">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;ul>
&lt;li>평균 대기 시간 최소화&lt;/li>
&lt;li>실행 시간 예측 필요&lt;/li>
&lt;li>기아 현상 발생 가능&lt;/li>
&lt;/ul>
&lt;h4>라운드 로빈(Round Robin)&lt;span class="hx-absolute -hx-mt-20" id="라운드-로빈round-robin">&lt;/span>
&lt;a href="#%eb%9d%bc%ec%9a%b4%eb%93%9c-%eb%a1%9c%eb%b9%88round-robin" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>각 프로세스에 동일한 시간 할당량을 부여하고 순환하며 실행하는 방식.&lt;/p>
&lt;h5>구현 예시&lt;span class="hx-absolute -hx-mt-20" id="구현-예시">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">round_robin_scheduling&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">processes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">time_quantum&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ready_queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">processes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">copy&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">ready_queue&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ready_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">time_quantum&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">time_quantum&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">time_quantum&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ready_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>우선순위 스케줄링(Priority Scheduling)&lt;span class="hx-absolute -hx-mt-20" id="우선순위-스케줄링priority-scheduling">&lt;/span>
&lt;a href="#%ec%9a%b0%ec%84%a0%ec%88%9c%ec%9c%84-%ec%8a%a4%ec%bc%80%ec%a4%84%eb%a7%81priority-scheduling" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>각 프로세스에 우선순위를 부여하고, 높은 우선순위의 프로세스를 먼저 실행한다.&lt;/p>
&lt;h5>고려사항&lt;span class="hx-absolute -hx-mt-20" id="고려사항">&lt;/span>
&lt;a href="#%ea%b3%a0%eb%a0%a4%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;ul>
&lt;li>우선순위 결정 기준&lt;/li>
&lt;li>우선순위 역전 현상&lt;/li>
&lt;li>에이징(Aging) 기법 적용&lt;/li>
&lt;/ul>
&lt;h4>다단계 큐(Multilevel Queue)&lt;span class="hx-absolute -hx-mt-20" id="다단계-큐multilevel-queue">&lt;/span>
&lt;a href="#%eb%8b%a4%eb%8b%a8%ea%b3%84-%ed%81%90multilevel-queue" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>프로세스들을 여러 종류의 큐로 분류하여 관리하는 방식.&lt;/p>
&lt;h5>구성&lt;span class="hx-absolute -hx-mt-20" id="구성">&lt;/span>
&lt;a href="#%ea%b5%ac%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;ul>
&lt;li>전위큐(Foreground Queue)&lt;/li>
&lt;li>후위큐(Background Queue)&lt;/li>
&lt;li>각 큐별 다른 스케줄링 알고리즘 적용&lt;/li>
&lt;/ul>
&lt;h3>실제 운영체제의 스케줄링&lt;span class="hx-absolute -hx-mt-20" id="실제-운영체제의-스케줄링">&lt;/span>
&lt;a href="#%ec%8b%a4%ec%a0%9c-%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9c%ec%9d%98-%ec%8a%a4%ec%bc%80%ec%a4%84%eb%a7%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>Linux의 CFS(Completely Fair Scheduler)&lt;/p>
&lt;ul>
&lt;li>프로세스 간 CPU 시간을 공정하게 분배&lt;/li>
&lt;li>레드-블랙 트리 사용&lt;/li>
&lt;li>동적 우선순위 조정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Windows의 다단계 피드백 큐&lt;/p>
&lt;ul>
&lt;li>프로세스의 행동에 따라 우선순위 동적 조정&lt;/li>
&lt;li>I/O 중심과 CPU 중심 프로세스 구분&lt;/li>
&lt;li>응답성과 처리량 균형 조정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스케줄링 성능 평가 지표&lt;span class="hx-absolute -hx-mt-20" id="스케줄링-성능-평가-지표">&lt;/span>
&lt;a href="#%ec%8a%a4%ec%bc%80%ec%a4%84%eb%a7%81-%ec%84%b1%eb%8a%a5-%ed%8f%89%ea%b0%80-%ec%a7%80%ed%91%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>CPU 활용률&lt;/p>
&lt;ul>
&lt;li>CPU가 실제 작업을 처리하는 비율&lt;/li>
&lt;li>높을수록 효율적&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>처리량&lt;/p>
&lt;ul>
&lt;li>단위 시간당 완료되는 프로세스 수&lt;/li>
&lt;li>시스템 성능 지표&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>턴어라운드 타임&lt;/p>
&lt;ul>
&lt;li>프로세스 시작부터 종료까지 걸리는 시간&lt;/li>
&lt;li>전체적인 작업 처리 시간&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>대기 시간&lt;/p>
&lt;ul>
&lt;li>프로세스가 실행을 기다리는 시간&lt;/li>
&lt;li>짧을수록 좋음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>응답 시간&lt;/p>
&lt;ul>
&lt;li>요청부터 첫 응답까지의 시간&lt;/li>
&lt;li>대화형 시스템에서 중요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스케줄링 고려사항과 최적화&lt;span class="hx-absolute -hx-mt-20" id="스케줄링-고려사항과-최적화">&lt;/span>
&lt;a href="#%ec%8a%a4%ec%bc%80%ec%a4%84%eb%a7%81-%ea%b3%a0%eb%a0%a4%ec%82%ac%ed%95%ad%ea%b3%bc-%ec%b5%9c%ec%a0%81%ed%99%94" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시스템 특성&lt;/p>
&lt;ul>
&lt;li>배치 시스템&lt;/li>
&lt;li>대화형 시스템&lt;/li>
&lt;li>실시간 시스템&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>프로세스 특성&lt;/p>
&lt;ul>
&lt;li>CPU 중심 vs I/O 중심&lt;/li>
&lt;li>메모리 사용량&lt;/li>
&lt;li>우선순위&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>시스템 부하&lt;/p>
&lt;ul>
&lt;li>현재 실행 중인 프로세스 수&lt;/li>
&lt;li>가용 자원 상태&lt;/li>
&lt;li>시스템 병목 현상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>새로운 트렌드와 발전 방향&lt;span class="hx-absolute -hx-mt-20" id="새로운-트렌드와-발전-방향">&lt;/span>
&lt;a href="#%ec%83%88%eb%a1%9c%ec%9a%b4-%ed%8a%b8%eb%a0%8c%eb%93%9c%ec%99%80-%eb%b0%9c%ec%a0%84-%eb%b0%a9%ed%96%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>멀티코어 스케줄링&lt;/p>
&lt;ul>
&lt;li>코어 간 로드 밸런싱&lt;/li>
&lt;li>캐시 친화적 스케줄링&lt;/li>
&lt;li>에너지 효율성 고려&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>가상화 환경&lt;/p>
&lt;ul>
&lt;li>가상 머신 간 자원 할당&lt;/li>
&lt;li>호스트-게스트 OS 조정&lt;/li>
&lt;li>실시간 마이그레이션&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>클라우드 환경&lt;/p>
&lt;ul>
&lt;li>탄력적 자원 할당&lt;/li>
&lt;li>서비스 수준 협약(SLA) 준수&lt;/li>
&lt;li>비용 최적화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Process</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process/</link><pubDate>Thu, 26 Sep 2024 23:32:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process/</guid><description>
&lt;h2>Process&lt;span class="hx-absolute -hx-mt-20" id="process">&lt;/span>
&lt;a href="#process" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>프로세스는 실행 중인 프로그램의 인스턴스.&lt;br>
구체적으로는 운영체제가 관리하는 작업의 단위로, CPU 시간이나 메모리와 같은 시스템 자원을 할당받아 실행되는 프로그램의 동적인 실체를 의미한다.&lt;/p>
&lt;p>
&lt;img src="../1_ILkJu8YvpoldbL4kpNL9aA.webp" alt="This chart displays the hierarchy among Program, Process and Thread" loading="lazy" />&lt;br>
_Source: &lt;a href="https://blog.devgenius.io/program-process-and-thread-explained-in-one-minute-6016e4fdf4de" target="_blank" rel="noopener">https://blog.devgenius.io/program-process-and-thread-explained-in-one-minute-6016e4fdf4de&lt;/a> _&lt;/p>
&lt;h3>특징&lt;span class="hx-absolute -hx-mt-20" id="특징">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>독립성: 각 프로세스는 독립된 메모리 공간을 가진다.&lt;/li>
&lt;li>동시성: 여러 프로세스가 동시에 실행될 수 있다.&lt;/li>
&lt;li>상태 변화: 프로세스는 실행 중 여러 상태를 거친다.&lt;/li>
&lt;/ol>
&lt;h3>기능과 역할&lt;span class="hx-absolute -hx-mt-20" id="기능과-역할">&lt;/span>
&lt;a href="#%ea%b8%b0%eb%8a%a5%ea%b3%bc-%ec%97%ad%ed%95%a0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>기능:&lt;/p>
&lt;ul>
&lt;li>작업 단위: 운영체제가 관리하는 작업의 기본 단위입니다.&lt;/li>
&lt;li>프로그램 코드 실행: 프로세스는 프로그램의 명령어들을 순차적으로 실행합니다.&lt;/li>
&lt;li>자원 관리: 할당받은 시스템 자원을 효율적으로 사용하고 관리합니다.&lt;/li>
&lt;li>프로세스 간 통신: 다른 프로세스와 정보를 교환하고 협력합니다.&lt;/li>
&lt;/ul>
&lt;p>역할:&lt;/p>
&lt;ul>
&lt;li>멀티태스킹 지원: 여러 작업을 동시에 실행할 수 있게 합니다.&lt;/li>
&lt;li>시스템 자원 보호: 프로세스 간 독립성을 통해 시스템 안정성을 보장합니다.&lt;/li>
&lt;li>프로그램 실행 관리: 프로그램의 생명주기를 관리합니다.&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>구분&lt;/th>
&lt;th>세부 기능&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>자원 관리&lt;/td>
&lt;td>CPU 사용&lt;/td>
&lt;td>- CPU 시간 할당 및 사용&lt;br>- 명령어 실행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>메모리 관리&lt;/td>
&lt;td>- 메모리 공간 할당/해제&lt;br>- 가상 메모리 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>파일 관리&lt;/td>
&lt;td>- 파일 시스템 접근&lt;br>- 입출력 작업 수행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로그램 실행&lt;/td>
&lt;td>코드 실행&lt;/td>
&lt;td>- 프로그램 코드 로딩&lt;br>- 명령어 해석 및 실행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>데이터 처리&lt;/td>
&lt;td>- 데이터 입출력&lt;br>- 연산 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로세스 통신&lt;/td>
&lt;td>IPC&lt;/td>
&lt;td>- 프로세스 간 통신&lt;br>- 데이터 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>동기화&lt;/td>
&lt;td>- 프로세스 간 실행 순서 조정&lt;br>- 자원 접근 조정&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>보안과 보호&lt;/td>
&lt;td>메모리 보호&lt;/td>
&lt;td>- 메모리 영역 보호&lt;br>- 접근 권한 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>시스템 보호&lt;/td>
&lt;td>- 시스템 자원 보호&lt;br>- 권한 레벨 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>상태 관리&lt;/td>
&lt;td>생명주기 관리&lt;/td>
&lt;td>- 프로세스 생성/종료&lt;br>- 상태 전이 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>스케줄링&lt;/td>
&lt;td>CPU 할당 순서 결정&lt;br>- 우선순위 관리&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>구성 요소&lt;span class="hx-absolute -hx-mt-20" id="구성-요소">&lt;/span>
&lt;a href="#%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>메모리 구조 관련 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="메모리-구조-관련-구성-요소">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b5%ac%ec%a1%b0-%ea%b4%80%eb%a0%a8-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;h5>코드 영역 (Code Section)&lt;span class="hx-absolute -hx-mt-20" id="코드-영역-code-section">&lt;/span>
&lt;a href="#%ec%bd%94%eb%93%9c-%ec%98%81%ec%97%ad-code-section" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>프로그램의 실행 코드가 위치하는 영역으로, 실행될 명령어를 포함.&lt;/p>
&lt;ul>
&lt;li>특징
&lt;ul>
&lt;li>읽기 전용.&lt;/li>
&lt;li>여러 프로세스가 같은 프로그램을 실행하는 경우 해당 코드 영역을 공유할 수 있다.&lt;/li>
&lt;li>재진입이 가능(Reentrant)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>역할
&lt;ul>
&lt;li>프로그램 명령어 보관&lt;/li>
&lt;li>코드 실행 제공&lt;/li>
&lt;li>명령어 순서 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5>데이터 영역 (Data Section)&lt;span class="hx-absolute -hx-mt-20" id="데이터-영역-data-section">&lt;/span>
&lt;a href="#%eb%8d%b0%ec%9d%b4%ed%84%b0-%ec%98%81%ec%97%ad-data-section" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>전역 변수 및 정적 변수를 저장하는 영역으로, 프로그램의 실행 내내 유지되는 데이터가 이곳에 저장된다.&lt;/p>
&lt;ul>
&lt;li>구분
&lt;ul>
&lt;li>BSS(Block Started by Symbol) 영역
&lt;ul>
&lt;li>초기화되지 않은 전역/정적 변수를 저장하는 메모리 영역&lt;/li>
&lt;li>프로그램 시작 시 자동으로 0 또는 NULL로 초기화됨.&lt;/li>
&lt;li>실행 파일에 실제 내용을 포함하지 않음&lt;/li>
&lt;li>프로그램 로딩 시 메모리에 할당되고 0으로 초기화됨.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data 영역
&lt;ul>
&lt;li>초기화된 전역/정적 변수를 저장하는 메모리 영역&lt;/li>
&lt;li>명시적으로 초기값이 지정된 변수들을 저장&lt;/li>
&lt;li>실행 파일에 초기값이 포함됨.&lt;/li>
&lt;li>읽기 전용 데이터(상수)와 읽기-쓰기 데이터로 추가 구분될 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>특징
&lt;ul>
&lt;li>프로그램 시작 시 할당&lt;/li>
&lt;li>프로그램 종료 시 해제&lt;/li>
&lt;li>크기가 고정됨.&lt;/li>
&lt;li>모든 스레드가 이 영역을 공유한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>BSS 영역과 Data 영역의 비교&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>BSS 영역&lt;/th>
&lt;th>Data 영역&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>초기화&lt;/td>
&lt;td>자동으로 0 또는 NULL&lt;/td>
&lt;td>명시적 초기값&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실행 파일 포함 여부&lt;/td>
&lt;td>크기 정보만 포함&lt;/td>
&lt;td>초기값 포함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 할당 시점&lt;/td>
&lt;td>프로그램 로딩 시&lt;/td>
&lt;td>프로그램 로딩 시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>파일 크기에 미치는 영향&lt;/td>
&lt;td>영향 없음&lt;/td>
&lt;td>초기값만큼 증가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 용도&lt;/td>
&lt;td>대량의 제로 초기화 데이터&lt;/td>
&lt;td>특정 초기값이 필요한 데이터&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5>힙 (Heap)&lt;span class="hx-absolute -hx-mt-20" id="힙-heap">&lt;/span>
&lt;a href="#%ed%9e%99-heap" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>동적으로 할당되는 메모리 영역&lt;/p>
&lt;ul>
&lt;li>특징
&lt;ul>
&lt;li>런타임에 크기가 변경될 수 있다.&lt;/li>
&lt;li>메모리 누수의 주요 원인.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5>스택 (Stack)&lt;span class="hx-absolute -hx-mt-20" id="스택-stack">&lt;/span>
&lt;a href="#%ec%8a%a4%ed%83%9d-stack" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>함수 호출과 관련된 데이터 (지역 변수, 매개변수, 리턴 주소 등)를 저장하는 메모리 영역&lt;/p>
&lt;ul>
&lt;li>특징
&lt;ul>
&lt;li>LIFO(Last In First Out)구조&lt;/li>
&lt;li>함수 호출 시 자동으로 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4>프로세스 제어 블록 (Process Control Block, PCB)&lt;span class="hx-absolute -hx-mt-20" id="프로세스-제어-블록-process-control-block-pcb">&lt;/span>
&lt;a href="#%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4-%ec%a0%9c%ec%96%b4-%eb%b8%94%eb%a1%9d-process-control-block-pcb" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>프로세스 관련 정보를 저장한다.&lt;/p>
&lt;ul>
&lt;li>특징
&lt;ul>
&lt;li>운영체제가 관리&lt;/li>
&lt;li>컨텍스트 스위칭 시 중요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>역할
&lt;ul>
&lt;li>프로세스 상태, 우선순위, 메모리 정보 등 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5>구성요소&lt;span class="hx-absolute -hx-mt-20" id="구성요소">&lt;/span>
&lt;a href="#%ea%b5%ac%ec%84%b1%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>구성 요소&lt;/th>
&lt;th>포함 정보&lt;/th>
&lt;th>용도&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>식별자 정보&lt;/td>
&lt;td>- 프로세스 ID(PID)&lt;br>- 부모 프로세스 ID&lt;/td>
&lt;td>프로세스 식별 및 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>상태 정보&lt;/td>
&lt;td>- 프로세스 상태&lt;br>- 우선순위&lt;/td>
&lt;td>스케줄링 및 상태 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>제어 정보&lt;/td>
&lt;td>- 프로그램 카운터&lt;br>- 레지스터 값&lt;/td>
&lt;td>CPU 실행 제어&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 정보&lt;/td>
&lt;td>- 메모리 limit/base&lt;br>- 열린 파일 목록&lt;/td>
&lt;td>자원 할당 및 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>계정 정보&lt;/td>
&lt;td>CPU 사용 시간&lt;br>- 실행 시간 제한&lt;/td>
&lt;td>사용량 측정 및 제어&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>프로세스 상태 관리&lt;span class="hx-absolute -hx-mt-20" id="프로세스-상태-관리">&lt;/span>
&lt;a href="#%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4-%ec%83%81%ed%83%9c-%ea%b4%80%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>운영체제가 프로세스의 생명주기를 효율적으로 관리하는 메커니즘.&lt;br>
운영체제는 이러한 상태들 사이의 전이를 관리하며, 프로세스 제어 블록(Process Control Block, PCB)를 통해 각 프로세스의 현재 상태 정보를 유지한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>상태&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>전이 조건&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>생성(Created)&lt;/td>
&lt;td>프로세스 초기화&lt;/td>
&lt;td>PCB 할당&lt;br>- 메모리 할당&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>준비(Ready)&lt;/td>
&lt;td>CPU 대기 상태&lt;/td>
&lt;td>CPU 스케줄러 대기&lt;br>- 실행 가능 상태&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실행(Running)&lt;/td>
&lt;td>CPU 사용 중&lt;/td>
&lt;td>- 명령어 실행&lt;br>- 시간 할당량 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>대기(Waiting)&lt;/td>
&lt;td>I/O 또는 이벤트 대기&lt;/td>
&lt;td>I/O 작업 중&lt;br>- 이벤트 발생 대기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>종료(Terminated)&lt;/td>
&lt;td>실행 완료&lt;/td>
&lt;td>- 자원 반납&lt;br>PCB 삭제&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>시스템 자원 관리&lt;span class="hx-absolute -hx-mt-20" id="시스템-자원-관리">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%ec%9e%90%ec%9b%90-%ea%b4%80%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>프로세스는 시스템 자원을 사용하며, 운영체제는 이를 효율적으로 관리한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>자원 유형&lt;/th>
&lt;th>관리 방식&lt;/th>
&lt;th>특징&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CPU&lt;/td>
&lt;td>시분할 방식&lt;/td>
&lt;td>- 여러 프로세스가 번갈아 사용&lt;br>- 스케줄링 알고리즘 적용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리&lt;/td>
&lt;td>가상 메모리&lt;/td>
&lt;td>- 필요한 부분만 실제 메모리에 로드&lt;br>- 페이징/세그먼테이션&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>파일 시스템&lt;/td>
&lt;td>파일 디스크립터&lt;/td>
&lt;td>- 파일 접근 권한 관리&lt;br>- 입출력 버퍼링&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>I/O 장치&lt;/td>
&lt;td>디바이스 드라이버&lt;/td>
&lt;td>- 장치 독립성 제공&lt;br>- 인터럽트 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로세스 간 통신(IPC)&lt;/td>
&lt;td>파이프(PIPE)&lt;br>명명된 파이프(Named PIPE)&lt;br>메시지 큐&lt;br>공유 메모리&lt;br>세마포어&lt;br>소켓&lt;/td>
&lt;td>- 프로세스간 데이터 교환과 동기화&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>