<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CAP-Theorem on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/cap-theorem/</link>
    <description>Recent content in CAP-Theorem on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.8</generator>
    <language>en</language>
    <lastBuildDate>Thu, 20 Feb 2025 00:41:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/cap-theorem/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CAP Theorem</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/system-design/tradeoffs-and-theorems/cap-theorem/</link>
      <pubDate>Thu, 20 Feb 2025 00:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/system-design/tradeoffs-and-theorems/cap-theorem/</guid>
      <description>CAP 이론은 분산 시스템에서 일관성 (Consistency), 가용성 (Availability), 파티션 내성 (Partition Tolerance) 세 가지 속성 중 동시에 두 가지만 보장할 수 있다는 원칙이다. 네트워크 파티션 발생 시 시스템은 일관성과 가용성 중 하나를 선택해야 하며, 이는 분산 데이터베이스와 같은 시스템 설계에 중요한 영향을 미친다. 파티션 내성은 현실적인 분산 환경에서 필수적이므로 실제로는 일관성과 가용성 사이의 트레이드오프가 핵심이다.</description>
    </item>
  </channel>
</rss>
