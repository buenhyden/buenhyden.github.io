<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – 테스트</title><link>https://buenhyden.github.io/tags/%ED%85%8C%EC%8A%A4%ED%8A%B8/</link><description>Recent content in 테스트 on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 30 Nov 2024 09:29:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/%ED%85%8C%EC%8A%A4%ED%8A%B8/index.xml" rel="self" type="application/rss+xml"/><item><title>5. 테스트 (Testing)</title><link>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle/5-testing/</link><pubDate>Tue, 01 Oct 2024 00:55:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-development-and-maintenance/software-development-life-cycle/5-testing/</guid><description>
&lt;h2>테스트 (Testing)&lt;/h2>&lt;p>개발된 소프트웨어의 품질을 검증하고 결함을 식별하는 단계&lt;/p>
&lt;h3>테스트 계획 수립&lt;/h3>&lt;h4>주요 목적&lt;/h4>&lt;ul>
&lt;li>테스트의 범위, 접근 방식, 자원, 일정을 정의한다.&lt;/li>
&lt;li>테스트 목표와 전략을 명확히 한다.&lt;/li>
&lt;li>테스트 프로세스의 체계적인 구조를 제공한다.&lt;/li>
&lt;li>필요한 테스트 환경과 도구를 식별한다.&lt;/li>
&lt;li>테스트 활동의 효율성과 효과성을 높인다.&lt;/li>
&lt;li>리스크를 식별하고 관리 전략을 수립한다.&lt;/li>
&lt;li>이해관계자들에게 테스트 접근 방식에 대한 이해를 제공한다.&lt;/li>
&lt;li>테스트 성공 기준을 정의한다.&lt;/li>
&lt;/ul>
&lt;h4>세부 활동과 산출물&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>세부 활동&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>주요 산출물&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>테스트 범위 정의&lt;/td>
&lt;td>테스트 대상 기능 및 비기능 요구사항 식별&lt;/td>
&lt;td>테스트 범위 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 목표 설정&lt;/td>
&lt;td>테스트를 통해 달성하고자 하는 목표 정의&lt;/td>
&lt;td>테스트 목표 명세서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 전략 수립&lt;/td>
&lt;td>테스트 수행 방법 및 접근 방식 결정&lt;/td>
&lt;td>테스트 전략 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 유형 선정&lt;/td>
&lt;td>수행할 테스트 유형(단위, 통합, 시스템 등) 결정&lt;/td>
&lt;td>테스트 유형 목록&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 환경 계획&lt;/td>
&lt;td>필요한 하드웨어, 소프트웨어, 네트워크 환경 정의&lt;/td>
&lt;td>테스트 환경 명세서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 일정 수립&lt;/td>
&lt;td>테스트 활동의 일정과 마일스톤 설정&lt;/td>
&lt;td>테스트 일정표&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 자원 할당&lt;/td>
&lt;td>필요한 인력, 도구, 장비 등의 자원 계획&lt;/td>
&lt;td>자원 할당 계획&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 데이터 준비&lt;/td>
&lt;td>테스트에 필요한 데이터 식별 및 준비 계획&lt;/td>
&lt;td>테스트 데이터 계획&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>리스크 분석&lt;/td>
&lt;td>테스트 관련 리스크 식별 및 대응 전략 수립&lt;/td>
&lt;td>리스크 관리 계획&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 메트릭스 정의&lt;/td>
&lt;td>테스트 진행 상황 및 품질 측정 지표 선정&lt;/td>
&lt;td>테스트 메트릭스 정의서&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>주의해야할 요소&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>주의 요소&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>요구사항 이해&lt;/td>
&lt;td>시스템 요구사항에 대한 정확한 이해와 반영&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>현실적인 계획&lt;/td>
&lt;td>가용 자원과 시간을 고려한 실현 가능한 계획 수립&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>우선순위 설정&lt;/td>
&lt;td>중요도와 리스크를 고려한 테스트 우선순위 결정&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>이해관계자 참여&lt;/td>
&lt;td>모든 관련 이해관계자의 의견 수렴 및 동의 확보&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>유연성&lt;/td>
&lt;td>변경사항에 대응할 수 있는 유연한 계획 구성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 커버리지&lt;/td>
&lt;td>충분한 테스트 커버리지 확보 방안 고려&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자동화 고려&lt;/td>
&lt;td>적절한 테스트 자동화 범위 및 방법 계획&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>보안 고려&lt;/td>
&lt;td>테스트 과정에서의 데이터 보안 및 접근 제어 계획&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>규제 준수&lt;/td>
&lt;td>관련 법규 및 산업 표준 준수 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>지속적 개선&lt;/td>
&lt;td>이전 프로젝트의 교훈을 반영한 계획 수립&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>테스트 케이스 설계&lt;/h3>&lt;h4>주요 목적&lt;/h4>&lt;ul>
&lt;li>소프트웨어의 기능과 비기능적 요구사항을 검증한다.&lt;/li>
&lt;li>다양한 입력 조건과 시나리오를 고려하여 포괄적인 테스트를 수행한다.&lt;/li>
&lt;li>예상 결과를 명확히 정의하여 테스트 결과의 정확성을 판단한다.&lt;/li>
&lt;li>효율적이고 효과적인 테스트 실행을 위한 기반을 마련한다.&lt;/li>
&lt;li>버그와 결함을 조기에 발견하여 품질을 향상시킨다.&lt;/li>
&lt;li>테스트의 재현성과 일관성을 보장한다.&lt;/li>
&lt;li>테스트 커버리지를 최대화하여 소프트웨어의 신뢰성을 높인다.&lt;/li>
&lt;/ul>
&lt;h4>세부 활동과 산출물&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>세부 활동&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>주요 산출물&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>요구사항 분석&lt;/td>
&lt;td>테스트 대상 요구사항 검토 및 이해&lt;/td>
&lt;td>요구사항 분석 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 기법 선택&lt;/td>
&lt;td>적절한 테스트 설계 기법 결정 (예: 경계값 분석, 동등 분할 등)&lt;/td>
&lt;td>테스트 기법 선정 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 시나리오 작성&lt;/td>
&lt;td>주요 테스트 시나리오 도출&lt;/td>
&lt;td>테스트 시나리오 목록&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 케이스 작성&lt;/td>
&lt;td>상세 테스트 케이스 개발&lt;/td>
&lt;td>테스트 케이스 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 데이터 준비&lt;/td>
&lt;td>테스트에 필요한 입력 데이터 정의&lt;/td>
&lt;td>테스트 데이터 세트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>예상 결과 정의&lt;/td>
&lt;td>각 테스트 케이스의 예상 결과 명시&lt;/td>
&lt;td>예상 결과 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 케이스 리뷰&lt;/td>
&lt;td>작성된 테스트 케이스의 품질 검토&lt;/td>
&lt;td>테스트 케이스 리뷰 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 매트릭스 작성&lt;/td>
&lt;td>요구사항과 테스트 케이스 간 매핑&lt;/td>
&lt;td>요구사항-테스트 매트릭스&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>우선순위 지정&lt;/td>
&lt;td>테스트 케이스의 중요도 및 실행 순서 결정&lt;/td>
&lt;td>우선순위가 지정된 테스트 케이스 목록&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 케이스 관리&lt;/td>
&lt;td>테스트 케이스의 버전 관리 및 유지보수&lt;/td>
&lt;td>테스트 케이스 저장소&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>주의해야할 요소&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>주의 요소&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>요구사항 추적성&lt;/td>
&lt;td>모든 요구사항이 테스트 케이스로 커버되는지 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 커버리지&lt;/td>
&lt;td>충분한 테스트 커버리지 확보&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>명확성과 구체성&lt;/td>
&lt;td>테스트 단계와 예상 결과를 명확하고 구체적으로 기술&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>재사용성&lt;/td>
&lt;td>테스트 케이스의 재사용 가능성 고려&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>유지보수성&lt;/td>
&lt;td>쉽게 업데이트하고 관리할 수 있는 형태로 설계&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>다양성&lt;/td>
&lt;td>다양한 시나리오와 경계 조건 고려&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>부정적 테스트&lt;/td>
&lt;td>오류 상황과 예외 처리에 대한 테스트 포함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 데이터 관리&lt;/td>
&lt;td>적절하고 현실적인 테스트 데이터 준비&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자동화 가능성&lt;/td>
&lt;td>자동화 테스트로 전환 가능성 고려&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>일관성&lt;/td>
&lt;td>테스트 케이스 작성 형식과 스타일의 일관성 유지&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>단위 테스트&lt;/h3>&lt;h4>주요 목적&lt;/h4>&lt;ul>
&lt;li>개별 코드 단위(함수, 메소드, 클래스 등)의 정확성을 검증한다.&lt;/li>
&lt;li>코드의 결함을 조기에 발견하고 수정한다.&lt;/li>
&lt;li>코드 변경 시 기존 기능의 정상 작동을 보장한다.&lt;/li>
&lt;li>개발자에게 즉각적인 피드백을 제공한다.&lt;/li>
&lt;li>코드의 품질과 신뢰성을 향상시킨다.&lt;/li>
&lt;li>문서화의 한 형태로 코드의 의도를 명확히 한다.&lt;/li>
&lt;li>리팩토링과 코드 개선을 용이하게 한다.&lt;/li>
&lt;li>전체 시스템 테스트의 비용과 시간을 절감한다&lt;/li>
&lt;/ul>
&lt;h4>세부 활동과 산출물&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>세부 활동&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>주요 산출물&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>테스트 대상 식별&lt;/td>
&lt;td>테스트할 코드 단위 선정&lt;/td>
&lt;td>테스트 대상 목록&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 케이스 설계&lt;/td>
&lt;td>각 단위에 대한 테스트 시나리오 작성&lt;/td>
&lt;td>단위 테스트 케이스 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 코드 작성&lt;/td>
&lt;td>실제 테스트를 수행할 코드 구현&lt;/td>
&lt;td>단위 테스트 코드&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 데이터 준비&lt;/td>
&lt;td>테스트에 필요한 입력 데이터 및 예상 결과 정의&lt;/td>
&lt;td>테스트 데이터 세트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 실행&lt;/td>
&lt;td>작성된 테스트 코드 실행&lt;/td>
&lt;td>테스트 실행 결과 로그&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결과 분석&lt;/td>
&lt;td>테스트 결과 검토 및 문제점 식별&lt;/td>
&lt;td>테스트 결과 분석 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>코드 수정&lt;/td>
&lt;td>발견된 문제점에 대한 코드 수정&lt;/td>
&lt;td>수정된 소스 코드&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>회귀 테스트&lt;/td>
&lt;td>수정 후 기존 기능 정상 작동 확인&lt;/td>
&lt;td>회귀 테스트 결과 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>코드 커버리지 분석&lt;/td>
&lt;td>테스트가 커버하는 코드 범위 확인&lt;/td>
&lt;td>코드 커버리지 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 문서화&lt;/td>
&lt;td>테스트 과정 및 결과 정리&lt;/td>
&lt;td>단위 테스트 문서&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>주의해야할 요소&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>주의 요소&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>독립성&lt;/td>
&lt;td>각 테스트가 독립적으로 실행 가능하도록 설계&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자동화&lt;/td>
&lt;td>자동화된 테스트 실행 환경 구축&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>빠른 실행&lt;/td>
&lt;td>신속한 피드백을 위한 효율적인 테스트 설계&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>가독성&lt;/td>
&lt;td>명확하고 이해하기 쉬운 테스트 코드 작성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>유지보수성&lt;/td>
&lt;td>테스트 코드의 유지보수 용이성 고려&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>경계값 테스트&lt;/td>
&lt;td>경계 조건과 예외 상황에 대한 테스트 포함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>모의 객체 활용&lt;/td>
&lt;td>외부 의존성을 가진 코드의 효과적인 테스트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 우선 개발&lt;/td>
&lt;td>TDD(Test-Driven Development) 방식 고려&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>리팩토링&lt;/td>
&lt;td>테스트 코드의 품질 유지를 위한 주기적 리팩토링&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 데이터 관리&lt;/td>
&lt;td>테스트에 사용되는 데이터의 일관성 및 현실성 유지&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>통합 테스트&lt;/h3>&lt;h4>주요 목적&lt;/h4>&lt;ul>
&lt;li>개별 모듈이나 컴포넌트 간의 상호작용을 검증한다.&lt;/li>
&lt;li>인터페이스 간 데이터 흐름의 정확성을 확인한다.&lt;/li>
&lt;li>통합된 시스템의 기능적 요구사항 충족 여부를 검증한다.&lt;/li>
&lt;li>모듈 간 의존성으로 인한 문제를 식별한다.&lt;/li>
&lt;li>시스템 레벨에서 발생할 수 있는 오류를 조기에 발견한다.&lt;/li>
&lt;li>전체 시스템의 안정성과 일관성을 확보한다.&lt;/li>
&lt;li>개별 단위 테스트에서 발견하기 어려운 문제를 식별한다.&lt;/li>
&lt;li>시스템 통합 과정에서의 리스크를 줄인다.&lt;/li>
&lt;/ul>
&lt;h4>세부 활동과 산출물&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>세부 활동&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>주요 산출물&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>통합 전략 수립&lt;/td>
&lt;td>통합 방식 및 순서 결정 (예: 상향식, 하향식, 샌드위치 등)&lt;/td>
&lt;td>통합 전략 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>통합 계획 작성&lt;/td>
&lt;td>통합 단계, 일정, 자원 계획 수립&lt;/td>
&lt;td>통합 테스트 계획서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 케이스 설계&lt;/td>
&lt;td>모듈 간 상호작용을 검증할 테스트 케이스 작성&lt;/td>
&lt;td>통합 테스트 케이스 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 환경 구축&lt;/td>
&lt;td>통합 테스트를 위한 환경 설정&lt;/td>
&lt;td>테스트 환경 구성 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>스텁/드라이버 개발&lt;/td>
&lt;td>필요한 스텁과 드라이버 프로그램 작성&lt;/td>
&lt;td>스텁/드라이버 코드&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 실행&lt;/td>
&lt;td>설계된 테스트 케이스 실행&lt;/td>
&lt;td>테스트 실행 로그&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결과 분석&lt;/td>
&lt;td>테스트 결과 검토 및 문제점 식별&lt;/td>
&lt;td>테스트 결과 분석 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 수정 및 재테스트&lt;/td>
&lt;td>발견된 문제 수정 및 재검증&lt;/td>
&lt;td>수정 이력 및 재테스트 결과&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>회귀 테스트&lt;/td>
&lt;td>수정 후 기존 기능 영향 확인&lt;/td>
&lt;td>회귀 테스트 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>통합 진행 상황 보고&lt;/td>
&lt;td>통합 과정 및 결과 문서화&lt;/td>
&lt;td>통합 테스트 진행 보고서&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>주의해야할 요소&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>주의 요소&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>통합 순서&lt;/td>
&lt;td>효율적이고 논리적인 통합 순서 결정&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>인터페이스 정의&lt;/td>
&lt;td>명확한 인터페이스 정의 및 문서화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 무결성&lt;/td>
&lt;td>모듈 간 데이터 전달의 정확성 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>오류 처리&lt;/td>
&lt;td>모듈 간 예외 상황 및 오류 처리 검증&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>환경 일관성&lt;/td>
&lt;td>테스트 환경과 실제 운영 환경의 일치성 확보&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>의존성 관리&lt;/td>
&lt;td>모듈 간 복잡한 의존관계 고려&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>성능 고려&lt;/td>
&lt;td>통합 후 성능 저하 여부 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>보안&lt;/td>
&lt;td>모듈 간 상호작용에서의 보안 취약점 검토&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>버전 관리&lt;/td>
&lt;td>통합되는 각 모듈의 버전 일치성 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>문서화&lt;/td>
&lt;td>통합 과정 및 결과의 상세한 문서화&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>시스템 테스트&lt;/h3>&lt;h4>주요 목적&lt;/h4>&lt;ul>
&lt;li>전체 시스템이 명세된 요구사항을 충족하는지 검증한다.&lt;/li>
&lt;li>시스템의 기능적, 비기능적 요구사항을 모두 테스트한다.&lt;/li>
&lt;li>실제 운영 환경과 유사한 조건에서 시스템의 동작을 확인한다.&lt;/li>
&lt;li>시스템의 성능, 보안, 신뢰성, 확장성 등을 평가한다.&lt;/li>
&lt;li>사용자 관점에서 시스템의 사용성과 효율성을 검증한다.&lt;/li>
&lt;li>예상치 못한 시스템 동작이나 오류를 식별한다.&lt;/li>
&lt;li>시스템의 전반적인 품질과 안정성을 확보한다.&lt;/li>
&lt;li>시스템이 실제 비즈니스 프로세스를 지원하는지 확인한다.&lt;/li>
&lt;/ul>
&lt;h4>세부 활동과 산출물&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>세부 활동&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>주요 산출물&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>테스트 계획 수립&lt;/td>
&lt;td>시스템 테스트 범위, 접근 방식, 일정 정의&lt;/td>
&lt;td>시스템 테스트 계획서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 케이스 설계&lt;/td>
&lt;td>기능 및 비기능 요구사항 기반 테스트 케이스 작성&lt;/td>
&lt;td>시스템 테스트 케이스 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 환경 구축&lt;/td>
&lt;td>실제 운영 환경과 유사한 테스트 환경 설정&lt;/td>
&lt;td>테스트 환경 구성 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 데이터 준비&lt;/td>
&lt;td>다양한 시나리오를 위한 테스트 데이터 생성&lt;/td>
&lt;td>테스트 데이터 세트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>기능 테스트 수행&lt;/td>
&lt;td>시스템의 모든 기능에 대한 테스트 실행&lt;/td>
&lt;td>기능 테스트 결과 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>성능 테스트 수행&lt;/td>
&lt;td>부하, 스트레스, 확장성 등 성능 관련 테스트&lt;/td>
&lt;td>성능 테스트 결과 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>보안 테스트 수행&lt;/td>
&lt;td>시스템의 보안 취약점 및 위협 평가&lt;/td>
&lt;td>보안 테스트 결과 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용성 테스트 수행&lt;/td>
&lt;td>사용자 인터페이스 및 경험 평가&lt;/td>
&lt;td>사용성 테스트 결과 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 추적 및 관리&lt;/td>
&lt;td>발견된 결함 기록, 분류, 추적&lt;/td>
&lt;td>결함 추적 로그&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>회귀 테스트&lt;/td>
&lt;td>수정 후 기존 기능 영향 확인&lt;/td>
&lt;td>회귀 테스트 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>최종 테스트 보고서 작성&lt;/td>
&lt;td>전체 시스템 테스트 결과 종합&lt;/td>
&lt;td>시스템 테스트 최종 보고서&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>주의해야할 요소&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>주의 요소&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>테스트 범위&lt;/td>
&lt;td>모든 주요 기능과 비기능적 요구사항 포함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>환경 유사성&lt;/td>
&lt;td>실제 운영 환경과 최대한 유사한 테스트 환경 구성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 다양성&lt;/td>
&lt;td>다양한 시나리오와 경계 조건을 고려한 테스트 데이터&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>성능 기준&lt;/td>
&lt;td>명확한 성능 기준 설정 및 측정&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>보안 고려사항&lt;/td>
&lt;td>포괄적인 보안 테스트 및 취약점 평가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용자 관점&lt;/td>
&lt;td>실제 사용자 경험을 고려한 테스트 설계&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>통합 영향&lt;/td>
&lt;td>시스템 구성 요소 간 상호작용 고려&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>예외 처리&lt;/td>
&lt;td>예상치 못한 상황 및 오류 조건 테스트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>향후 시스템 확장을 고려한 테스트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>문서화&lt;/td>
&lt;td>테스트 과정 및 결과의 상세한 문서화&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>사용자 수용 테스트 (UAT)&lt;/h3>&lt;h4>주요 목적&lt;/h4>&lt;ul>
&lt;li>실제 사용자 관점에서 시스템의 적합성을 검증한다.&lt;/li>
&lt;li>비즈니스 요구사항과 실제 구현된 기능의 일치 여부를 확인한다.&lt;/li>
&lt;li>사용자의 실제 업무 프로세스를 시스템이 제대로 지원하는지 검증한다.&lt;/li>
&lt;li>시스템의 사용성과 효율성을 최종 사용자 관점에서 평가한다.&lt;/li>
&lt;li>사용자의 기대사항과 시스템 간의 격차를 식별한다.&lt;/li>
&lt;li>최종 사용자의 시스템 수용 여부를 결정한다.&lt;/li>
&lt;li>실제 운영 환경에서의 시스템 성능과 안정성을 확인한다.&lt;/li>
&lt;li>사용자 교육 및 문서화의 적절성을 평가한다.&lt;/li>
&lt;/ul>
&lt;h4>세부 활동과 산출물&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>세부 활동&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>주요 산출물&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>UAT 계획 수립&lt;/td>
&lt;td>UAT 범위, 참여자, 일정 등 정의&lt;/td>
&lt;td>UAT 계획서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 시나리오 개발&lt;/td>
&lt;td>실제 업무 프로세스 기반 시나리오 작성&lt;/td>
&lt;td>UAT 시나리오 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 데이터 준비&lt;/td>
&lt;td>실제 업무와 유사한 테스트 데이터 구성&lt;/td>
&lt;td>UAT 테스트 데이터 세트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용자 교육&lt;/td>
&lt;td>UAT 참여자 대상 시스템 사용법 교육&lt;/td>
&lt;td>사용자 교육 자료&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>UAT 환경 구축&lt;/td>
&lt;td>실제 운영 환경과 유사한 UAT 환경 설정&lt;/td>
&lt;td>UAT 환경 구성 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 실행&lt;/td>
&lt;td>사용자가 직접 테스트 시나리오 수행&lt;/td>
&lt;td>UAT 실행 로그&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>피드백 수집&lt;/td>
&lt;td>사용자로부터 시스템에 대한 의견 수집&lt;/td>
&lt;td>사용자 피드백 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 보고 및 추적&lt;/td>
&lt;td>발견된 문제점 기록 및 관리&lt;/td>
&lt;td>결함 추적 로그&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>수정 및 재테스트&lt;/td>
&lt;td>식별된 문제 해결 및 재검증&lt;/td>
&lt;td>수정 이력 및 재테스트 결과&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>UAT 결과 보고&lt;/td>
&lt;td>전체 UAT 과정 및 결과 종합&lt;/td>
&lt;td>UAT 최종 보고서&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>주의해야할 요소&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>주의 요소&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>사용자 선정&lt;/td>
&lt;td>다양한 역할과 경험을 가진 대표 사용자 참여&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실제 환경 유사성&lt;/td>
&lt;td>실제 운영 환경과 최대한 유사한 UAT 환경 구성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>명확한 수용 기준&lt;/td>
&lt;td>구체적이고 측정 가능한 수용 기준 정의&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>충분한 시간 할당&lt;/td>
&lt;td>사용자가 충분히 테스트할 수 있는 시간 제공&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용자 지원&lt;/td>
&lt;td>UAT 과정 중 적절한 기술 지원 제공&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>객관성 유지&lt;/td>
&lt;td>사용자의 객관적인 평가 유도&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>문서화&lt;/td>
&lt;td>모든 피드백과 결과의 상세한 기록&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>변경 관리&lt;/td>
&lt;td>UAT 중 발견된 문제에 대한 효과적인 변경 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>의사소통&lt;/td>
&lt;td>개발팀과 사용자 간의 원활한 의사소통 촉진&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>기대치 관리&lt;/td>
&lt;td>현실적인 사용자 기대치 설정 및 관리&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>회귀 테스트&lt;/h3>&lt;h4>주요 목적&lt;/h4>&lt;ul>
&lt;li>소프트웨어 변경 후 기존 기능이 여전히 정상적으로 작동하는지 확인한다.&lt;/li>
&lt;li>새로운 변경사항이 기존 시스템에 부정적인 영향을 미치지 않았는지 검증한다.&lt;/li>
&lt;li>버그 수정이 다른 부분에 새로운 문제를 일으키지 않았는지 확인한다.&lt;/li>
&lt;li>시스템의 안정성과 일관성을 유지한다.&lt;/li>
&lt;li>예상치 못한 부작용을 조기에 발견하고 해결한다.&lt;/li>
&lt;li>지속적인 품질 보증을 제공한다.&lt;/li>
&lt;li>변경 사항 적용 후 시스템의 전반적인 건전성을 검증한다.&lt;/li>
&lt;/ul>
&lt;h4>세부 활동과 산출물&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>세부 활동&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>주요 산출물&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>회귀 테스트 계획 수립&lt;/td>
&lt;td>테스트 범위, 우선순위, 일정 정의&lt;/td>
&lt;td>회귀 테스트 계획서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 케이스 선정&lt;/td>
&lt;td>영향 받을 수 있는 영역의 테스트 케이스 식별&lt;/td>
&lt;td>회귀 테스트 케이스 목록&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 환경 준비&lt;/td>
&lt;td>회귀 테스트를 위한 환경 설정&lt;/td>
&lt;td>테스트 환경 구성 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자동화 스크립트 개발/업데이트&lt;/td>
&lt;td>자동화된 회귀 테스트 스크립트 작성 또는 수정&lt;/td>
&lt;td>테스트 자동화 스크립트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 실행&lt;/td>
&lt;td>선정된 테스트 케이스 실행&lt;/td>
&lt;td>테스트 실행 로그&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결과 분석&lt;/td>
&lt;td>테스트 결과 검토 및 문제점 식별&lt;/td>
&lt;td>회귀 테스트 결과 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 보고 및 추적&lt;/td>
&lt;td>발견된 회귀 결함 기록 및 관리&lt;/td>
&lt;td>결함 추적 로그&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>영향 분석&lt;/td>
&lt;td>변경사항이 시스템에 미친 영향 평가&lt;/td>
&lt;td>영향 분석 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>재테스트&lt;/td>
&lt;td>수정된 결함에 대한 재검증&lt;/td>
&lt;td>재테스트 결과 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>최종 보고&lt;/td>
&lt;td>전체 회귀 테스트 과정 및 결과 종합&lt;/td>
&lt;td>회귀 테스트 최종 보고서&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>주의해야할 요소&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>주의 요소&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>테스트 범위 선정&lt;/td>
&lt;td>변경의 영향을 받을 수 있는 모든 영역 포함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>우선순위 설정&lt;/td>
&lt;td>중요도와 리스크에 따른 테스트 케이스 우선순위화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자동화 활용&lt;/td>
&lt;td>반복적인 회귀 테스트의 효율성을 위한 자동화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 데이터 관리&lt;/td>
&lt;td>일관된 결과를 위한 테스트 데이터 버전 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>시간 제약 고려&lt;/td>
&lt;td>제한된 시간 내 효과적인 테스트 수행 전략&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>변경 이력 추적&lt;/td>
&lt;td>각 변경사항과 관련된 회귀 테스트 결과 연계&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>환경 일관성&lt;/td>
&lt;td>테스트 환경과 실제 운영 환경의 일치성 확보&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>전체 시스템 영향 고려&lt;/td>
&lt;td>개별 변경이 전체 시스템에 미치는 영향 평가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>지속적인 개선&lt;/td>
&lt;td>회귀 테스트 프로세스의 효율성 지속 개선&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>커뮤니케이션&lt;/td>
&lt;td>개발팀과 테스트팀 간의 효과적인 정보 공유&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>성능 테스트&lt;/h3>&lt;h4>주요 목적&lt;/h4>&lt;ul>
&lt;li>시스템의 응답 시간, 처리량, 자원 사용률 등을 측정한다.&lt;/li>
&lt;li>시스템이 정의된 성능 요구사항을 충족하는지 검증한다.&lt;/li>
&lt;li>다양한 부하 조건에서 시스템의 안정성과 확장성을 평가한다.&lt;/li>
&lt;li>성능 병목 지점을 식별하고 최적화 기회를 발견한다.&lt;/li>
&lt;li>시스템의 최대 용량과 한계를 파악한다.&lt;/li>
&lt;li>사용자 경험에 영향을 미칠 수 있는 성능 이슈를 조기에 발견한다.&lt;/li>
&lt;li>시스템 장애 지점과 복구 능력을 테스트한다.&lt;/li>
&lt;li>성능 튜닝 및 최적화를 위한 기초 데이터를 제공한다.&lt;/li>
&lt;/ul>
&lt;h4>세부 활동과 산출물&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>세부 활동&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>주요 산출물&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>성능 요구사항 분석&lt;/td>
&lt;td>성능 목표 및 기준 정의&lt;/td>
&lt;td>성능 요구사항 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 계획 수립&lt;/td>
&lt;td>성능 테스트 범위, 시나리오, 메트릭 정의&lt;/td>
&lt;td>성능 테스트 계획서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 환경 구성&lt;/td>
&lt;td>실제 환경과 유사한 테스트 환경 설정&lt;/td>
&lt;td>테스트 환경 구성 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 데이터 준비&lt;/td>
&lt;td>현실적인 테스트 데이터 세트 구성&lt;/td>
&lt;td>테스트 데이터 세트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 스크립트 개발&lt;/td>
&lt;td>성능 테스트 시나리오 구현&lt;/td>
&lt;td>테스트 스크립트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>부하 테스트 수행&lt;/td>
&lt;td>다양한 부하 수준에서 시스템 성능 측정&lt;/td>
&lt;td>부하 테스트 결과 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>스트레스 테스트 수행&lt;/td>
&lt;td>시스템의 한계 및 장애 복구 능력 테스트&lt;/td>
&lt;td>스트레스 테스트 결과 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성 테스트 수행&lt;/td>
&lt;td>시스템 확장에 따른 성능 변화 측정&lt;/td>
&lt;td>확장성 테스트 결과 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결과 분석&lt;/td>
&lt;td>성능 데이터 분석 및 문제점 식별&lt;/td>
&lt;td>성능 분석 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>성능 튜닝&lt;/td>
&lt;td>식별된 병목 지점 최적화&lt;/td>
&lt;td>성능 최적화 권장사항&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>최종 보고서 작성&lt;/td>
&lt;td>전체 성능 테스트 결과 종합&lt;/td>
&lt;td>성능 테스트 최종 보고서&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>주의해야할 요소&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>주의 요소&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>현실적인 시나리오&lt;/td>
&lt;td>실제 사용 패턴을 반영한 테스트 시나리오 설계&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 환경의 적절성&lt;/td>
&lt;td>실제 운영 환경과 최대한 유사한 테스트 환경 구성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>다양한 부하 조건&lt;/td>
&lt;td>일반, 피크, 스트레스 상황 등 다양한 조건 테스트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 볼륨&lt;/td>
&lt;td>실제 데이터 볼륨을 고려한 테스트 수행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>모니터링&lt;/td>
&lt;td>시스템 자원 사용률 등 상세한 모니터링&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>외부 요인 고려&lt;/td>
&lt;td>네트워크 지연, 외부 서비스 등의 영향 고려&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>장기 실행 테스트&lt;/td>
&lt;td>시간에 따른 성능 변화 관찰을 위한 장기 테스트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결과의 일관성&lt;/td>
&lt;td>여러 번의 테스트 실행을 통한 결과 검증&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>성능 허용 오차&lt;/td>
&lt;td>허용 가능한 성능 변동 범위 정의&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>보안 영향&lt;/td>
&lt;td>보안 설정이 성능에 미치는 영향 고려&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>보안 테스트&lt;/h3>&lt;h4>주요 목적&lt;/h4>&lt;ul>
&lt;li>시스템의 보안 취약점을 식별하고 평가한다.&lt;/li>
&lt;li>데이터의 기밀성, 무결성, 가용성을 보장한다.&lt;/li>
&lt;li>인증 및 권한 부여 메커니즘의 효과성을 검증한다.&lt;/li>
&lt;li>외부 공격에 대한 시스템의 저항력을 평가한다.&lt;/li>
&lt;li>보안 정책 및 규정 준수 여부를 확인한다.&lt;/li>
&lt;li>잠재적인 보안 위협에 대한 대응 능력을 테스트한다.&lt;/li>
&lt;li>시스템의 전반적인 보안 수준을 향상시킨다.&lt;/li>
&lt;li>사용자 데이터와 시스템 자원의 보호 능력을 검증한다.&lt;/li>
&lt;/ul>
&lt;h4>세부 활동과 산출물&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>세부 활동&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>주요 산출물&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>보안 요구사항 분석&lt;/td>
&lt;td>보안 목표 및 기준 정의&lt;/td>
&lt;td>보안 요구사항 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>위협 모델링&lt;/td>
&lt;td>잠재적 보안 위협 식별 및 분석&lt;/td>
&lt;td>위협 모델 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>취약점 스캐닝&lt;/td>
&lt;td>자동화된 도구를 사용한 취약점 검사&lt;/td>
&lt;td>취약점 스캔 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>침투 테스트&lt;/td>
&lt;td>실제 해킹 시도를 통한 보안 강도 평가&lt;/td>
&lt;td>침투 테스트 결과 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>소스 코드 보안 검토&lt;/td>
&lt;td>코드 레벨에서의 보안 취약점 분석&lt;/td>
&lt;td>코드 보안 분석 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>인증 및 권한 테스트&lt;/td>
&lt;td>접근 제어 메커니즘 검증&lt;/td>
&lt;td>인증/권한 테스트 결과&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>암호화 테스트&lt;/td>
&lt;td>데이터 암호화 방식의 적절성 검증&lt;/td>
&lt;td>암호화 테스트 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>세션 관리 테스트&lt;/td>
&lt;td>세션 처리의 보안성 평가&lt;/td>
&lt;td>세션 관리 테스트 결과&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>보안 구성 검토&lt;/td>
&lt;td>시스템 및 네트워크 구성의 보안성 평가&lt;/td>
&lt;td>구성 검토 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>보안 사고 대응 테스트&lt;/td>
&lt;td>보안 사고 발생 시 대응 능력 평가&lt;/td>
&lt;td>사고 대응 테스트 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>최종 보안 평가 보고서 작성&lt;/td>
&lt;td>전체 보안 테스트 결과 종합&lt;/td>
&lt;td>보안 테스트 최종 보고서&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>주의해야할 요소&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>주의 요소&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>법적 및 윤리적 고려사항&lt;/td>
&lt;td>테스트 수행 시 법적 제한 및 윤리적 문제 고려&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 보호&lt;/td>
&lt;td>테스트 중 민감한 데이터 보호&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실제 환경과의 유사성&lt;/td>
&lt;td>실제 운영 환경과 유사한 테스트 환경 구성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>최신 보안 위협 반영&lt;/td>
&lt;td>최신 보안 동향 및 새로운 공격 기법 고려&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>전체 시스템 범위&lt;/td>
&lt;td>모든 시스템 구성 요소에 대한 포괄적 테스트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>내부자 위협 고려&lt;/td>
&lt;td>외부 공격뿐만 아니라 내부자 위협도 고려&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>지속적인 테스트&lt;/td>
&lt;td>일회성이 아닌 지속적인 보안 테스트 수행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>보안 패치 관리&lt;/td>
&lt;td>발견된 취약점에 대한 신속한 패치 적용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>보안 의식 제고&lt;/td>
&lt;td>개발 및 운영 팀의 보안 의식 향상&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>제3자 구성 요소 검토&lt;/td>
&lt;td>외부 라이브러리 및 서비스의 보안성 평가&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>테스트 자동화&lt;/h3>&lt;h4>주요 목적&lt;/h4>&lt;ul>
&lt;li>반복적인 테스트 작업을 효율적으로 수행한다.&lt;/li>
&lt;li>테스트 실행 시간을 단축하고 비용을 절감한다.&lt;/li>
&lt;li>인적 오류를 최소화하여 테스트의 정확성과 일관성을 향상시킨다.&lt;/li>
&lt;li>회귀 테스트의 효율성을 높여 빠른 피드백을 제공한다.&lt;/li>
&lt;li>더 많은 테스트 케이스를 더 자주 실행할 수 있게 한다.&lt;/li>
&lt;li>지속적 통합 및 배포(CI/CD) 프로세스를 지원한다.&lt;/li>
&lt;li>테스트 커버리지를 확대하여 소프트웨어 품질을 향상시킨다.&lt;/li>
&lt;li>반복 가능하고 신뢰할 수 있는 테스트 결과를 제공한다.&lt;/li>
&lt;/ul>
&lt;h4>세부 활동과 산출물&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>세부 활동&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>주요 산출물&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>자동화 전략 수립&lt;/td>
&lt;td>자동화 범위, 도구, 접근 방식 결정&lt;/td>
&lt;td>테스트 자동화 전략 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자동화 도구 선정&lt;/td>
&lt;td>프로젝트에 적합한 자동화 도구 선택&lt;/td>
&lt;td>도구 평가 및 선정 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 케이스 선별&lt;/td>
&lt;td>자동화에 적합한 테스트 케이스 식별&lt;/td>
&lt;td>자동화 대상 테스트 케이스 목록&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프레임워크 설계&lt;/td>
&lt;td>자동화 테스트 프레임워크 구축&lt;/td>
&lt;td>테스트 자동화 프레임워크&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>스크립트 개발&lt;/td>
&lt;td>자동화 테스트 스크립트 작성&lt;/td>
&lt;td>테스트 자동화 스크립트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 데이터 관리&lt;/td>
&lt;td>자동화 테스트용 데이터 준비 및 관리&lt;/td>
&lt;td>테스트 데이터 세트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실행 및 모니터링&lt;/td>
&lt;td>자동화 테스트 실행 및 결과 모니터링&lt;/td>
&lt;td>테스트 실행 로그 및 결과 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결과 분석 및 보고&lt;/td>
&lt;td>자동화 테스트 결과 분석&lt;/td>
&lt;td>테스트 결과 분석 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>유지보수 및 업데이트&lt;/td>
&lt;td>스크립트 및 프레임워크 유지보수&lt;/td>
&lt;td>업데이트된 테스트 스크립트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>성능 측정&lt;/td>
&lt;td>자동화 테스트의 효율성 및 ROI 평가&lt;/td>
&lt;td>자동화 성능 측정 보고서&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>주의해야할 요소&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>주의 요소&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>적절한 자동화 범위&lt;/td>
&lt;td>모든 테스트를 자동화하는 것이 아닌 적절한 범위 선정&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>유지보수 용이성&lt;/td>
&lt;td>쉽게 유지보수할 수 있는 스크립트 및 프레임워크 설계&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>안정성&lt;/td>
&lt;td>안정적이고 일관된 결과를 제공하는 자동화 테스트 구현&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>새로운 테스트 케이스 추가가 용이한 구조 설계&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 관리&lt;/td>
&lt;td>테스트 데이터의 효과적인 관리 및 갱신&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>환경 독립성&lt;/td>
&lt;td>다양한 테스트 환경에서 실행 가능한 자동화 구현&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>보안 고려&lt;/td>
&lt;td>자동화 과정에서의 보안 취약점 방지&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>스킬셋 확보&lt;/td>
&lt;td>자동화 도구 및 기술에 대한 팀의 역량 확보&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>비용-효과 분석&lt;/td>
&lt;td>자동화 구현 및 유지보수 비용 대비 효과 고려&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>수동 테스트와의 균형&lt;/td>
&lt;td>자동화와 수동 테스트의 적절한 조화&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>결함 관리&lt;/h3>&lt;h4>주요 목적&lt;/h4>&lt;ul>
&lt;li>발견된 모든 결함을 체계적으로 기록하고 추적한다.&lt;/li>
&lt;li>결함의 우선순위와 심각도를 평가하여 효율적인 해결을 지원한다.&lt;/li>
&lt;li>결함 해결 과정을 투명하게 관리하여 프로젝트 진행 상황을 모니터링한다.&lt;/li>
&lt;li>결함의 근본 원인을 분석하여 유사한 문제의 재발을 방지한다.&lt;/li>
&lt;li>품질 메트릭스를 제공하여 소프트웨어의 전반적인 품질을 평가한다.&lt;/li>
&lt;li>개발 팀과 테스트 팀 간의 효과적인 커뮤니케이션을 촉진한다.&lt;/li>
&lt;li>릴리스 결정을 위한 객관적인 데이터를 제공한다.&lt;/li>
&lt;li>프로젝트의 품질 목표 달성을 지원한다.&lt;/li>
&lt;/ul>
&lt;h4>세부 활동과 산출물&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>세부 활동&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>주요 산출물&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>결함 보고&lt;/td>
&lt;td>발견된 결함을 상세히 기록&lt;/td>
&lt;td>결함 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 분류&lt;/td>
&lt;td>결함의 유형, 심각도, 우선순위 분류&lt;/td>
&lt;td>분류된 결함 목록&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 할당&lt;/td>
&lt;td>적절한 담당자에게 결함 해결 할당&lt;/td>
&lt;td>결함 할당 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 분석&lt;/td>
&lt;td>결함의 근본 원인 및 영향 분석&lt;/td>
&lt;td>결함 분석 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 해결&lt;/td>
&lt;td>개발 팀의 결함 수정 작업&lt;/td>
&lt;td>수정된 코드 또는 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>재테스트&lt;/td>
&lt;td>수정된 결함에 대한 검증 테스트&lt;/td>
&lt;td>재테스트 결과 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 상태 추적&lt;/td>
&lt;td>결함의 생명주기 전반에 걸친 상태 관리&lt;/td>
&lt;td>결함 상태 추적 로그&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 보고서 생성&lt;/td>
&lt;td>주기적인 결함 현황 및 트렌드 보고&lt;/td>
&lt;td>결함 요약 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 종료&lt;/td>
&lt;td>해결된 결함의 최종 검토 및 종료 처리&lt;/td>
&lt;td>결함 종료 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 데이터 분석&lt;/td>
&lt;td>결함 데이터를 활용한 품질 개선 분석&lt;/td>
&lt;td>품질 개선 제안서&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>주의해야할 요소&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>주의 요소&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정확한 결함 기술&lt;/td>
&lt;td>결함을 명확하고 재현 가능하게 기술&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>우선순위 설정&lt;/td>
&lt;td>비즈니스 영향과 기술적 중요도를 고려한 우선순위 설정&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>중복 결함 관리&lt;/td>
&lt;td>유사하거나 중복된 결함의 효율적 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 생명주기 관리&lt;/td>
&lt;td>결함의 상태 변화를 정확히 추적하고 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>커뮤니케이션&lt;/td>
&lt;td>개발 팀과 테스트 팀 간의 원활한 소통&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 추적 도구 활용&lt;/td>
&lt;td>효율적인 결함 관리를 위한 적절한 도구 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 재발 방지&lt;/td>
&lt;td>유사한 결함의 재발을 막기 위한 근본 원인 분석&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 데이터 보안&lt;/td>
&lt;td>민감한 결함 정보에 대한 접근 제어&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 보고의 객관성&lt;/td>
&lt;td>감정적이거나 비난하는 톤을 피한 객관적 보고&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>지속적인 모니터링&lt;/td>
&lt;td>결함 트렌드와 패턴의 지속적인 분석 및 대응&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>테스트 결과 분석 및 보고&lt;/h3>&lt;h4>주요 목적&lt;/h4>&lt;ul>
&lt;li>테스트 활동의 결과를 종합적으로 평가한다.&lt;/li>
&lt;li>소프트웨어의 품질 상태를 객관적으로 파악한다.&lt;/li>
&lt;li>발견된 결함과 그 영향을 명확히 이해한다.&lt;/li>
&lt;li>프로젝트 이해관계자들에게 테스트 진행 상황과 결과를 전달한다.&lt;/li>
&lt;li>릴리스 결정을 위한 객관적인 데이터를 제공한다.&lt;/li>
&lt;li>향후 개선이 필요한 영역을 식별한다.&lt;/li>
&lt;li>테스트 프로세스의 효율성을 평가한다.&lt;/li>
&lt;li>프로젝트 리스크를 식별하고 관리하는 데 도움을 준다.&lt;/li>
&lt;/ul>
&lt;h4>세부 활동과 산출물&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>세부 활동&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>주요 산출물&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>테스트 데이터 수집&lt;/td>
&lt;td>모든 테스트 활동의 결과 데이터 수집&lt;/td>
&lt;td>테스트 데이터 세트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결과 분류 및 정리&lt;/td>
&lt;td>수집된 데이터를 카테고리별로 분류&lt;/td>
&lt;td>분류된 테스트 결과&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>통계 분석&lt;/td>
&lt;td>테스트 결과의 통계적 분석 수행&lt;/td>
&lt;td>테스트 통계 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 트렌드 분석&lt;/td>
&lt;td>결함 패턴 및 추세 분석&lt;/td>
&lt;td>결함 트렌드 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>커버리지 분석&lt;/td>
&lt;td>테스트 커버리지 평가&lt;/td>
&lt;td>커버리지 분석 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>성능 메트릭스 분석&lt;/td>
&lt;td>성능 관련 지표 분석&lt;/td>
&lt;td>성능 분석 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>리스크 평가&lt;/td>
&lt;td>발견된 이슈의 리스크 수준 평가&lt;/td>
&lt;td>리스크 평가 문서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>요약 보고서 작성&lt;/td>
&lt;td>주요 발견사항 및 결론 요약&lt;/td>
&lt;td>테스트 요약 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>상세 보고서 작성&lt;/td>
&lt;td>테스트 결과의 상세 내용 기술&lt;/td>
&lt;td>상세 테스트 결과 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>개선 제안&lt;/td>
&lt;td>테스트 결과를 바탕으로 한 개선 사항 제안&lt;/td>
&lt;td>개선 제안서&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>주의해야할 요소&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>주의 요소&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>객관성 유지&lt;/td>
&lt;td>편견 없이 객관적인 데이터 분석 및 보고&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>정확성&lt;/td>
&lt;td>데이터의 정확성 확보 및 검증&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>명확성&lt;/td>
&lt;td>복잡한 정보를 이해하기 쉽게 전달&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>관련성&lt;/td>
&lt;td>이해관계자에게 관련 있고 중요한 정보 중심 보고&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>시기적절성&lt;/td>
&lt;td>적시에 정보를 제공하여 의사결정 지원&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>보안 고려&lt;/td>
&lt;td>민감한 정보의 적절한 처리 및 보호&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>추적 가능성&lt;/td>
&lt;td>보고된 결과와 원본 데이터 간의 추적 가능성 확보&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>일관성&lt;/td>
&lt;td>보고서 형식과 내용의 일관성 유지&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>맥락 제공&lt;/td>
&lt;td>결과의 의미와 영향을 이해할 수 있는 맥락 제공&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>시각화&lt;/td>
&lt;td>복잡한 데이터를 효과적으로 시각화하여 전달&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Stubs</title><link>https://buenhyden.github.io/posts/qa/qc/test/test-mgmt/test-double/stubs/</link><pubDate>Sat, 30 Nov 2024 09:29:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/test/test-mgmt/test-double/stubs/</guid><description>
&lt;h2>Stubs&lt;/h2>&lt;p>Stubbing은 테스트에서 사용되는 기법으로, 실제 객체나 아직 구현되지 않은 코드를 대신하여 미리 정의된 응답을 제공하는 메커니즘&lt;/p>
&lt;h3>목적&lt;/h3>&lt;ol>
&lt;li>의존성 격리: 실제 구현체로부터 테스트 대상을 분리하여 독립적인 테스트를 가능하게 합니다.&lt;/li>
&lt;li>특정 시나리오 테스트: 다양한 상황에 대한 테스트를 용이하게 합니다.&lt;/li>
&lt;li>미구현 코드 대체: 아직 개발되지 않은 부분을 임시로 대체할 수 있습니다.&lt;/li>
&lt;li>테스트 속도 향상: 실제 리소스 접근 없이 빠른 테스트가 가능합니다.&lt;/li>
&lt;/ol>
&lt;h3>특징&lt;/h3>&lt;ul>
&lt;li>미리 정의된 응답(canned answer)을 제공합니다.&lt;/li>
&lt;li>실제 코드의 동작을 단순화하여 모사합니다.&lt;/li>
&lt;li>주로 상태 테스팅에 중점을 둡니다.&lt;/li>
&lt;li>메서드 호출의 결과만 정의하며, 호출 여부는 검증하지 않습니다.&lt;/li>
&lt;/ul>
&lt;h3>사용 사례&lt;/h3>&lt;ul>
&lt;li>구현되지 않은 함수나 외부 라이브러리 함수를 사용할 때&lt;/li>
&lt;li>복잡한 로직을 단순화하여 테스트하고자 할 때&lt;/li>
&lt;li>특정 조건에서의 예외 상황을 테스트할 때&lt;/li>
&lt;li>외부 의존성(예: 데이터베이스, 네트워크 요청)을 가진 코드를 테스트할 때&lt;/li>
&lt;/ul>
&lt;h3>예시&lt;/h3>&lt;h4>Python&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">unittest.mock&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Mock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">patch&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pytest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">datetime&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">datetime&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 테스트할 실제 클래스&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PaymentService&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">payment_gateway&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">payment_gateway&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">payment_gateway&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">process_payment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">amount&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Amount must be positive&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">payment_gateway&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">charge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;status&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;success&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 외부 결제 게이트웨이 클래스 (실제로는 외부 서비스)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PaymentGateway&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">charge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 실제로는 외부 API를 호출하는 복잡한 로직&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Stub 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PaymentGatewayStub&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">charge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 항상 성공 응답을 반환하는 단순한 구현&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;status&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;success&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;timestamp&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">()}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 테스트 코드&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_payment_service_with_stub&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Stub 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gateway_stub&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PaymentGatewayStub&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">payment_service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PaymentService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gateway_stub&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">payment_service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process_payment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">True&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>Javascript&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Jest를 사용한 테스트 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">jest&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;@jest/globals&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 테스트할 실제 클래스
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">UserService&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">database&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">database&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">database&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">getUserById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">database&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;User not found&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">updateUserEmail&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">newEmail&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">database&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;User not found&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">email&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">newEmail&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">database&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">updateUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Stub 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">DatabaseStub&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">users&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Map&lt;/span>&lt;span class="p">([&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;John Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;john@example.com&amp;#39;&lt;/span> &lt;span class="p">}],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Jane Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;jane@example.com&amp;#39;&lt;/span> &lt;span class="p">}]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">findUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">users&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">updateUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">userData&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">users&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">userData&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">userData&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 테스트 코드
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;UserService&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Stub을 사용한 테스트
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;with stub&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">dbStub&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">DatabaseStub&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">userService&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">UserService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">dbStub&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;should return user when exists&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">userService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getUserById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;John Doe&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;should throw error when user not found&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">userService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getUserById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">999&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">rejects&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">toThrow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;User not found&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Mocks</title><link>https://buenhyden.github.io/posts/qa/qc/test/test-mgmt/test-double/mocks/</link><pubDate>Sat, 30 Nov 2024 06:14:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/test/test-mgmt/test-double/mocks/</guid><description>
&lt;h2>Mocks&lt;/h2>&lt;p>소프트웨어 테스트에서 사용되는 중요한 기법으로, 실제 객체를 모방하는 가짜 객체를 만들어 테스트하는 방법&lt;/p>
&lt;p>Mocking은 테스트하고자 하는 코드가 의존하는 부분을 가짜(mock)로 대체하는 기법으로, 단위 테스트를 작성할 때 특히 유용하다.&lt;/p>
&lt;h3>목적&lt;/h3>&lt;ol>
&lt;li>외부 의존성 제어: 실제 외부 리소스에 의존하지 않고 테스트를 수행할 수 있게 합니다.&lt;/li>
&lt;li>특정 시나리오 테스트: 예외 상황이나 복잡한 시나리오를 쉽게 재현할 수 있습니다.&lt;/li>
&lt;li>테스트 속도 향상: 실제 리소스 접근 시간을 절약하여 테스트 실행 속도를 높입니다.&lt;/li>
&lt;li>독립적인 테스트: 다른 컴포넌트의 구현 여부와 관계없이 테스트를 진행할 수 있습니다.&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;/h3>&lt;ol>
&lt;li>빠른 테스트 속도: 외부 리소스 접근 시간을 절약합니다.&lt;/li>
&lt;li>예외 시나리오 테스트 용이성: 특정 상황에서의 예외 처리를 쉽게 테스트할 수 있습니다.&lt;/li>
&lt;li>외부 리소스 접근 회피: 실제 환경에 의존하지 않고 테스트할 수 있습니다.&lt;/li>
&lt;li>복잡한 시나리오 테스트: 다양한 상태를 쉽게 재현할 수 있습니다.&lt;/li>
&lt;/ol>
&lt;h3>단점&lt;/h3>&lt;ol>
&lt;li>잠재적 부작용: 모킹된 동작과 실제 코드의 동작이 다를 수 있습니다.&lt;/li>
&lt;li>모킹 오버헤드: 모킹 코드 작성과 설정에 추가 작업이 필요합니다.&lt;/li>
&lt;li>모킹의 복잡성: 잘못된 모킹 설정은 테스트의 신뢰성을 떨어뜨릴 수 있습니다.&lt;/li>
&lt;li>테스트의 일관성 문제: 모킹을 남용하면 테스트 코드와 실제 코드 간의 일관성이 떨어질 수 있습니다.&lt;/li>
&lt;/ol>
&lt;h3>예시&lt;/h3>&lt;h4>Python&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">unittest.mock&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Mock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">patch&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">pytest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">datetime&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">datetime&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 테스트할 실제 클래스&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PaymentService&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">payment_gateway&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">payment_gateway&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">payment_gateway&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">process_payment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">amount&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">ValueError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Amount must be positive&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">payment_gateway&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">charge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;status&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;success&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 외부 결제 게이트웨이 클래스 (실제로는 외부 서비스)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PaymentGateway&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">charge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 실제로는 외부 API를 호출하는 복잡한 로직&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_payment_service_with_mock&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Mock 객체 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_gateway&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Mock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Mock 동작 정의&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_gateway&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">charge&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">return_value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;status&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;success&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">payment_service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PaymentService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mock_gateway&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">payment_service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process_payment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 검증&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_gateway&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">charge&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">assert_called_once_with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Mock을 사용한 다양한 시나리오 테스트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_payment_service_failed_payment&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_gateway&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Mock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_gateway&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">charge&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">return_value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;status&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;failed&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">payment_service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PaymentService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mock_gateway&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">payment_service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process_payment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_gateway&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">charge&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">assert_called_once&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Patch 데코레이터를 사용한 테스트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@patch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;__main__.PaymentGateway&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_payment_service_with_patch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mock_gateway_class&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_gateway_instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Mock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_gateway_class&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">return_value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mock_gateway_instance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_gateway_instance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">charge&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">return_value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;status&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;success&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">payment_service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PaymentService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PaymentGateway&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">payment_service&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process_payment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mock_gateway_instance&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">charge&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">assert_called_once_with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>Javascript&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Jest를 사용한 테스트 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">jest&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;@jest/globals&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 테스트할 실제 클래스
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">UserService&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">database&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">database&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">database&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">getUserById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">database&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;User not found&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">updateUserEmail&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">newEmail&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">database&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;User not found&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">email&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">newEmail&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">database&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">updateUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 테스트 코드
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;UserService&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Mock을 사용한 테스트
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;with mock&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Jest mock 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">mockDatabase&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">findUser&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">jest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">updateUser&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">jest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">userService&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">UserService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mockDatabase&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">beforeEach&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 각 테스트 전에 mock 초기화
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">jest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clearAllMocks&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;should call database with correct id&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">mockUser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;John Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;john@example.com&amp;#39;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mockDatabase&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findUser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mockResolvedValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mockUser&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">userService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getUserById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mockDatabase&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findUser&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toHaveBeenCalledWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mockUser&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;should update user email&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">mockUser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;John Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;john@example.com&amp;#39;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">updatedUser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">mockUser&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;new@example.com&amp;#39;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mockDatabase&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findUser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mockResolvedValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mockUser&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mockDatabase&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">updateUser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mockResolvedValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">updatedUser&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">userService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">updateUserEmail&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;new@example.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mockDatabase&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findUser&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toHaveBeenCalledWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mockDatabase&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">updateUser&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toHaveBeenCalledWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">updatedUser&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">email&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;new@example.com&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;should handle database errors&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mockDatabase&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findUser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mockRejectedValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Database error&amp;#39;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">userService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getUserById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">rejects&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">toThrow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Database error&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>