<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Computer-Architecture :: Tag :: hyunyoun's Blog</title><link>https://buenhyden.github.io/tags/computer-architecture.html</link><description/><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Tue, 14 Jan 2025 02:17:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/computer-architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Computer Architecture</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture.html</link><pubDate>Sat, 21 Sep 2024 21:24:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture.html</guid><description>컴퓨터 시스템의 구조와 설계를 정의하는 기본적인 프레임워크.</description></item><item><title>System Bus</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/system-bus.html</link><pubDate>Tue, 14 Jan 2025 02:17:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/system-bus.html</guid><description>System Bus는 컴퓨터 아키텍처에서 주요 구성 요소들을 연결하는 중요한 통신 경로로, 컴퓨터의 혈관과 같은 역할을 한다.</description></item><item><title>Byte Addressable Memory vs Word Addressable Memory</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/byte-addressable-memory-vs-word-addressable-memory.html</link><pubDate>Thu, 19 Dec 2024 11:38:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/byte-addressable-memory-vs-word-addressable-memory.html</guid><description>컴퓨터 메모리의 주소 지정 방식을 설명하는 개념</description></item><item><title>메모리 보호와 안전 (Memory Protection and Safety)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-protection-and-safety.html</link><pubDate>Thu, 19 Dec 2024 08:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-protection-and-safety.html</guid><description>메모리 보호는 컴퓨터 시스템에서 프로세스가 허가되지 않은 메모리 영역에 접근하는 것을 방지하는 메커니즘이다.</description></item><item><title>메모리 접근 방법 (Memory Access Methods)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-access-methods.html</link><pubDate>Wed, 18 Dec 2024 08:05:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-access-methods.html</guid><description>메모리 접근 방식 (Memory Access Methods)은 컴퓨터 시스템에서 메모리에 접근하는 방식을 말한다.</description></item><item><title>메모리 주소 지정 방식 (Memory Address Modes)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-address-modes.html</link><pubDate>Wed, 18 Dec 2024 08:04:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-address-modes.html</guid><description>메모리 주소 지정 방식(Memory Address Modes)은 CPU가 메모리의 특정 위치에 어떻게 접근하는지를 나타내는 방법이다.</description></item><item><title>인터럽트 (Interrupt)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/interrupt.html</link><pubDate>Fri, 06 Dec 2024 06:50:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/interrupt.html</guid><description>프로세서에게 현재 실행 중인 코드를 중단하고 특정 이벤트를 처리하도록 요청하는 신호</description></item><item><title>캐싱 (Caching)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching.html</link><pubDate>Sat, 19 Oct 2024 14:14:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching.html</guid><description>캐싱은 자주 사용되는 데이터나 계산 결과를 빠르게 접근할 수 있는 위치에 임시로 저장하는 기술</description></item><item><title>캐시 (Cache)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache.html</link><pubDate>Sat, 19 Oct 2024 13:25:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache.html</guid><description>캐시(Cache)는 컴퓨터 과학에서 데이터나 값을 미리 복사해 놓는 임시 저장소를 의미한다.</description></item><item><title>Cache Memory</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/cache-memory.html</link><pubDate>Sat, 19 Oct 2024 11:36:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/cache-memory.html</guid><description>캐시 메모리(Cache Memory)는 컴퓨터 아키텍처에서 중요한 역할을 하는 CPU와 주 메모리(RAM) 사이에 위치한 소규모의 고속 메모리이다.</description></item><item><title>Cache Coherence</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-coherence.html</link><pubDate>Sat, 19 Oct 2024 03:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-coherence.html</guid><description>Cache Coherence 참고 및 출처</description></item><item><title>Cache Invalidation</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-invalidation.html</link><pubDate>Sat, 19 Oct 2024 03:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-invalidation.html</guid><description>Cache Invalidation 참고 및 출처</description></item><item><title>Cache Policy</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy.html</link><pubDate>Sat, 19 Oct 2024 03:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy.html</guid><description>Cache Policy Cache Consistent Policies Cache Replacement Policies LRU (Least Recently Used), LFU (Least Frequently Used), FIFO (First In First Out) 캐시 전략은 각각 다른 방식으로 캐시 공간을 관리합니다. 이들의 주요 차이점은 다음과 같습니다</description></item><item><title>Cache Strategy</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-strategy.html</link><pubDate>Sat, 19 Oct 2024 03:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-strategy.html</guid><description>Cache Strategy 참고 및 출처</description></item><item><title>Caching Techniques</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/caching-techniques.html</link><pubDate>Sat, 19 Oct 2024 02:37:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/caching-techniques.html</guid><description>Caching Techniques 캐싱 기법 Memoization (함수 결과 캐싱) Write-Through Caching Write-Back Caching Write-Around Caching Read-Through Caching</description></item><item><title>컴퓨터 구성 요소 (Components of Computer Architecture)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/components-of-computer-architecture.html</link><pubDate>Mon, 23 Sep 2024 16:50:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/components-of-computer-architecture.html</guid><description>이 구성 요소들의 상호작용을 통해 컴퓨터가 작동하게 된다.</description></item><item><title>CPU</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/cpu.html</link><pubDate>Mon, 23 Sep 2024 16:44:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/cpu.html</guid><description>컴퓨터 시스템의 핵심 구성요소로, 프로그램의 명령어를 해석하고 실행하는 역할을 한다.</description></item><item><title>메모리의 계층 구조 (Memory Hierarchy)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-hierarchy.html</link><pubDate>Mon, 23 Sep 2024 03:33:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-hierarchy.html</guid><description>컴퓨터 시스템에서 데이터 접근의 효율성을 극대화하고 전체 시스템 성능을 향상시키기 위해 설계된 구조</description></item></channel></rss>