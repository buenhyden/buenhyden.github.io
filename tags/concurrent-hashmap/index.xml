<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Concurrent-HashMap</title><link>https://buenhyden.github.io/tags/concurrent-hashmap/</link><description>Recent content in Concurrent-HashMap on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 06 Jan 2025 14:35:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/concurrent-hashmap/index.xml" rel="self" type="application/rss+xml"/><item><title>Concurrent Hash Map vs Hash Map vs Hash Table</title><link>https://buenhyden.github.io/til/2025/01/concurrent-hash-map-vs-hash-map-vs-hash-table/</link><pubDate>Mon, 06 Jan 2025 14:35:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/concurrent-hash-map-vs-hash-map-vs-hash-table/</guid><description>
&lt;h2>Concurrent Hash Map Vs Hash Map Vs Hash Table&lt;span class="hx-absolute -hx-mt-20" id="concurrent-hash-map-vs-hash-map-vs-hash-table">&lt;/span>
&lt;a href="#concurrent-hash-map-vs-hash-map-vs-hash-table" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Concurrent HashMap&lt;/th>
&lt;th>HashMap&lt;/th>
&lt;th>HashTable&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>동기화&lt;/strong>&lt;/td>
&lt;td>세그먼트/버킷 단위의 부분 동기화 지원&lt;/td>
&lt;td>동기화 지원하지 않음&lt;/td>
&lt;td>메서드 단위의 전체 동기화 지원&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>동시성&lt;/strong>&lt;/td>
&lt;td>높은 동시성 지원 (여러 스레드가 동시에 다른 세그먼트에 접근 가능)&lt;/td>
&lt;td>동시성 지원하지 않음 (단일 스레드 환경용)&lt;/td>
&lt;td>낮은 동시성 (한 번에 하나의 스레드만 접근 가능)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>성능&lt;/strong>&lt;/td>
&lt;td>동시 접근 시 높은 성능&lt;/td>
&lt;td>단일 스레드에서 가장 높은 성능&lt;/td>
&lt;td>동기화로 인한 성능 저하&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>null 허용&lt;/strong>&lt;/td>
&lt;td>key와 value 모두 null 불가&lt;/td>
&lt;td>key는 하나만 null 허용, value는 여러 개 null 허용&lt;/td>
&lt;td>key와 value 모두 null 불가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>초기 용량&lt;/strong>&lt;/td>
&lt;td>기본 16, 세그먼트 수는 16&lt;/td>
&lt;td>기본 16&lt;/td>
&lt;td>기본 11&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>적재율&lt;/strong>&lt;/td>
&lt;td>기본 0.75&lt;/td>
&lt;td>기본 0.75&lt;/td>
&lt;td>기본 0.75&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>이터레이션&lt;/strong>&lt;/td>
&lt;td>fail-safe 이터레이터 제공&lt;/td>
&lt;td>fail-fast 이터레이터 제공&lt;/td>
&lt;td>fail-fast 이터레이터 제공&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>생성 시기&lt;/strong>&lt;/td>
&lt;td>Java 5&lt;/td>
&lt;td>Java 1.2&lt;/td>
&lt;td>Java 1.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 사용&lt;/strong>&lt;/td>
&lt;td>세그먼트로 인한 추가 메모리 필요&lt;/td>
&lt;td>가장 적은 메모리 사용&lt;/td>
&lt;td>동기화로 인한 추가 메모리 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>용도&lt;/strong>&lt;/td>
&lt;td>멀티스레드 환경의 동시성이 필요한 경우&lt;/td>
&lt;td>단일 스레드 환경의 일반적인 경우&lt;/td>
&lt;td>레거시 코드 호환성이 필요한 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>확장성&lt;/strong>&lt;/td>
&lt;td>동적 확장 가능&lt;/td>
&lt;td>동적 확장 가능&lt;/td>
&lt;td>동적 확장 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>순서 보장&lt;/strong>&lt;/td>
&lt;td>삽입 순서 보장하지 않음&lt;/td>
&lt;td>삽입 순서 보장하지 않음&lt;/td>
&lt;td>삽입 순서 보장하지 않음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>동기화 비용&lt;/strong>&lt;/td>
&lt;td>부분적 동기화로 중간 수준의 비용&lt;/td>
&lt;td>동기화 비용 없음&lt;/td>
&lt;td>전체 동기화로 높은 비용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>스레드 안전성&lt;/strong>&lt;/td>
&lt;td>스레드 안전&lt;/td>
&lt;td>스레드 안전하지 않음&lt;/td>
&lt;td>스레드 안전&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>키 충돌 처리&lt;/strong>&lt;/td>
&lt;td>체이닝 방식&lt;/td>
&lt;td>체이닝 방식&lt;/td>
&lt;td>체이닝 방식&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>참고로 몇 가지 중요한 추가 설명을 하자면:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>fail-safe vs fail-fast:&lt;/p>
&lt;ul>
&lt;li>fail-safe: 이터레이션 중 컬렉션이 수정되어도 예외가 발생하지 않음&lt;/li>
&lt;li>fail-fast: 이터레이션 중 컬렉션이 수정되면 예외 발생&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 특성:&lt;/p>
&lt;ul>
&lt;li>ConcurrentHashMap: 읽기 작업은 락이 필요 없음&lt;/li>
&lt;li>HashMap: 모든 작업에서 락이 없어 가장 빠름&lt;/li>
&lt;li>HashTable: 모든 작업에 락이 필요해 가장 느림&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>동시성 처리:&lt;/p>
&lt;ul>
&lt;li>ConcurrentHashMap: 세그먼트 단위로 락을 걸어 다른 세그먼트는 동시 접근 가능&lt;/li>
&lt;li>HashMap: 동시성 처리 없음&lt;/li>
&lt;li>HashTable: 메서드 단위로 전체에 락을 걸어 동시 접근 불가&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Concurrent Data Structure</title><link>https://buenhyden.github.io/til/2025/01/concurrent-data-structure/</link><pubDate>Mon, 06 Jan 2025 12:55:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/concurrent-data-structure/</guid><description>
&lt;h2>Concurrent Data Structure&lt;span class="hx-absolute -hx-mt-20" id="concurrent-data-structure">&lt;/span>
&lt;a href="#concurrent-data-structure" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Concurrent Data Structure는 여러 스레드가 동시에 안전하게 접근하고 조작할 수 있도록 설계된 데이터 구조이다.&lt;br>
전통적인 데이터 구조와 달리, 동시성을 고려하여 데이터의 일관성과 무결성을 보장하면서도 높은 성능을 제공하는 것이 특징이다.&lt;br>
Concurrent Data Structure는 여러 스레드가 동시에 안전하게 접근하고 수정할 수 있도록 설계된 데이터 구조입니다.&lt;/p>
&lt;p>Concurrent Data Structure는 일반적으로 다음과 같은 방식으로 구현된다:&lt;/p>
&lt;ul>
&lt;li>세밀한 락(fine-grained locking) 사용&lt;/li>
&lt;li>락 없는(lock-free) 알고리즘&lt;/li>
&lt;li>대기 없는(wait-free) 알고리즘&lt;/li>
&lt;li>지연된 삭제와 메모리 재사용 기법&lt;/li>
&lt;/ul>
&lt;p>이러한 구조는 고성능 멀티스레드 시스템, 데이터베이스, 운영체제, 네트워크 스택 등 다양한 분야에서 활용된다.&lt;/p>
&lt;h3>주요 특징&lt;span class="hx-absolute -hx-mt-20" id="주요-특징">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>스레드 안전성: 여러 스레드가 동시에 접근해도 데이터의 일관성을 유지한다.&lt;/li>
&lt;li>높은 동시성: 여러 스레드가 동시에 작업을 수행할 수 있어 성능이 향상된다.&lt;/li>
&lt;li>락 최소화: 전체 구조에 대한 락 대신 세밀한 락이나 락 없는 기법을 사용한다.&lt;/li>
&lt;li>확장성: 스레드 수가 증가해도 성능 저하가 적다.&lt;/li>
&lt;li>원자적 연산: Compare-And-Swap(CAS)과 같은 원자적 연산을 활용한다.&lt;/li>
&lt;/ol>
&lt;h3>Concurrent Data Structure 패턴 비교&lt;span class="hx-absolute -hx-mt-20" id="concurrent-data-structure-패턴-비교">&lt;/span>
&lt;a href="#concurrent-data-structure-%ed%8c%a8%ed%84%b4-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Concurrent HashMap&lt;/th>
&lt;th>Concurrent Skip List&lt;/th>
&lt;th>Lock-free Queue&lt;/th>
&lt;th>Lock-free Stack&lt;/th>
&lt;th>Read-Copy-Update (RCU) List&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>개념&lt;/td>
&lt;td>동시에 여러 스레드가 접근 가능한 해시 기반 맵&lt;/td>
&lt;td>동시성을 지원하는 계층화된 정렬 리스트&lt;/td>
&lt;td>락 없이 동시 접근 가능한 FIFO 큐&lt;/td>
&lt;td>락 없이 동시 접근 가능한 LIFO 스택&lt;/td>
&lt;td>읽기에 최적화된 동시성 리스트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>동기화 방식&lt;/td>
&lt;td>세그먼트 락 또는 CAS&lt;/td>
&lt;td>CAS 기반&lt;/td>
&lt;td>CAS 기반&lt;/td>
&lt;td>CAS 기반&lt;/td>
&lt;td>읽기는 락 없음, 쓰기는 RCU 메커니즘&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 용도&lt;/td>
&lt;td>동시성 캐시, 공유 데이터 저장&lt;/td>
&lt;td>정렬된 데이터의 동시 접근&lt;/td>
&lt;td>작업 큐, 버퍼&lt;/td>
&lt;td>후입선출 데이터 관리&lt;/td>
&lt;td>읽기가 빈번한 데이터 구조&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>성능 특성&lt;/td>
&lt;td>읽기/쓰기 균형&lt;/td>
&lt;td>로그 시간 복잡도 연산&lt;/td>
&lt;td>높은 처리량&lt;/td>
&lt;td>빠른 푸시/팝 연산&lt;/td>
&lt;td>매우 빠른 읽기, 느린 쓰기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>장점&lt;/td>
&lt;td>높은 동시성, 확장성&lt;/td>
&lt;td>효율적인 검색과 삽입&lt;/td>
&lt;td>높은 동시성, 데드락 없음&lt;/td>
&lt;td>단순한 구현, 높은 동시성&lt;/td>
&lt;td>락 없는 읽기, 높은 확장성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>단점&lt;/td>
&lt;td>메모리 사용량 증가&lt;/td>
&lt;td>구현 복잡도 높음&lt;/td>
&lt;td>ABA 문제 가능성&lt;/td>
&lt;td>ABA 문제, 제한된 확장성&lt;/td>
&lt;td>복잡한 메모리 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 사용&lt;/td>
&lt;td>중간~높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>높음 (여러 버전 유지)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 방식&lt;/td>
&lt;td>버킷 배열, 연결 리스트/트리&lt;/td>
&lt;td>계층화된 연결 리스트&lt;/td>
&lt;td>연결 리스트, 원자적 포인터&lt;/td>
&lt;td>연결 리스트, 원자적 포인터&lt;/td>
&lt;td>버전 관리된 연결 리스트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>특징&lt;/td>
&lt;td>동적 크기 조정&lt;/td>
&lt;td>확률적 밸런싱&lt;/td>
&lt;td>대기 없는 연산&lt;/td>
&lt;td>단순한 구조&lt;/td>
&lt;td>읽기 최적화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡도&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>매우 좋음&lt;/td>
&lt;td>좋음&lt;/td>
&lt;td>좋음&lt;/td>
&lt;td>제한적&lt;/td>
&lt;td>매우 좋음 (읽기)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ABA 문제&lt;/td>
&lt;td>해결됨&lt;/td>
&lt;td>해결 필요&lt;/td>
&lt;td>해결 필요&lt;/td>
&lt;td>해결 필요&lt;/td>
&lt;td>해결됨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>순서 보장&lt;/td>
&lt;td>보장 안 됨&lt;/td>
&lt;td>정렬 순서 보장&lt;/td>
&lt;td>FIFO 보장&lt;/td>
&lt;td>LIFO 보장&lt;/td>
&lt;td>보장 안 됨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용 사례&lt;/td>
&lt;td>데이터베이스, 캐시 시스템&lt;/td>
&lt;td>정렬된 데이터 관리&lt;/td>
&lt;td>작업 스케줄링, 이벤트 처리&lt;/td>
&lt;td>메모리 할당자, 스택 추적&lt;/td>
&lt;td>운영체제 커널, 네트워크 스택&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Concurrent Hash Map</title><link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/concurrent-hash-map/</link><pubDate>Mon, 06 Jan 2025 13:21:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/concurrent-hash-map/</guid><description>
&lt;h2>Concurrent Hash Map&lt;span class="hx-absolute -hx-mt-20" id="concurrent-hash-map">&lt;/span>
&lt;a href="#concurrent-hash-map" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>ConcurrentHashMap은 여러 스레드가 동시에 안전하게 접근할 수 있도록 설계된 HashMap의 동시성 버전이다.&lt;br>
이 자료구조는 멀티스레드 환경에서 높은 성능과 확장성을 제공하면서도 스레드 안전성을 보장한다.&lt;/p>
&lt;p>Java의 동시성 컬렉션 중 하나로, 멀티스레드 환경에서 안전하게 사용할 수 있도록 설계된 Map 구현체이다.&lt;/p>
&lt;p>Java를 제외한 프로그래밍 언어와 라이브러리에서도 동시성을 지원하기 위해 구현되어 있는 자료 구조이다.&lt;/p>
&lt;h3>특징&lt;span class="hx-absolute -hx-mt-20" id="특징">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>Thread-safe: 내부적으로 동기화 처리가 되어 있어 멀티스레드 환경에서 안전하다.&lt;/li>
&lt;li>높은 동시성: 여러 스레드가 동시에 맵을 수정할 수 있으며, 읽기 작업은 락 없이 수행된다.&lt;/li>
&lt;li>원자적 연산 지원: putIfAbsent(), replace(), remove() 등의 원자적 연산을 제공한다.&lt;/li>
&lt;li>일관성 있는 반복자: 반복자가 생성된 시점의 맵 상태를 반영하며, ConcurrentModificationException을 발생시키지 않는다.&lt;/li>
&lt;li>락 스트라이핑(Lock Striping): 맵을 여러 부분으로 나누어 각각 독립적으로 잠금을 걸어 동시성을 향상시킨다.&lt;/li>
&lt;li>Null 불허: 키와 값에 null을 허용하지 않는다. 이는 동시성 환경에서 null의 의미가 모호해질 수 있기 때문이다.&lt;/li>
&lt;li>약한 일관성: 순간적으로 맵의 상태가 일관되지 않을 수 있지만, 최종적으로는 일관된 상태로 수렴한다.&lt;/li>
&lt;/ol>
&lt;h3>구현 방식&lt;span class="hx-absolute -hx-mt-20" id="구현-방식">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>ConcurrentHashMap은 다음과 같은 기술을 사용하여 구현된다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>분할 잠금(Segmented Locking)&lt;/strong>: 맵을 여러 세그먼트로 나누어 각 세그먼트마다 독립적인 락을 사용한다.&lt;/li>
&lt;li>&lt;strong>CAS(Compare-And-Swap) 연산&lt;/strong>: 락 없이 원자적 업데이트를 수행한다.&lt;/li>
&lt;li>&lt;strong>volatile 키워드&lt;/strong>: 변수의 가시성을 보장한다.&lt;/li>
&lt;/ol>
&lt;p>구현 방식:&lt;br>
Java 8 이후의 ConcurrentHashMap은 내부적으로 다음과 같은 구조를 가집니다:&lt;/p>
&lt;ol>
&lt;li>Node 배열: 해시 버킷을 저장하는 기본 데이터 구조&lt;/li>
&lt;li>TreeBin: 해시 충돌이 많이 발생할 경우 연결 리스트를 Red-Black 트리로 변환&lt;/li>
&lt;li>ReservationNode: 병렬 업데이트를 위한 임시 노드&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>높은 성능: 세밀한 락 사용으로 동시성을 극대화한다.&lt;/li>
&lt;li>확장성: 동시에 접근하는 스레드 수가 증가해도 성능 저하가 적다.&lt;/li>
&lt;li>안전성: 멀티스레드 환경에서 데이터 무결성을 보장한다.&lt;/li>
&lt;li>메모리 효율성: 동기화를 위한 추가 객체 생성 최소화&lt;/li>
&lt;li>안정성: 데드락과 같은 동시성 문제 예방&lt;/li>
&lt;/ol>
&lt;h3>응용&lt;span class="hx-absolute -hx-mt-20" id="응용">&lt;/span>
&lt;a href="#%ec%9d%91%ec%9a%a9" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>ConcurrentHashMap은 다음과 같은 상황에서 주로 사용된다:&lt;/p>
&lt;ol>
&lt;li>캐시 시스템: 높은 동시성이 필요한 캐싱 솔루션&lt;/li>
&lt;li>세션 관리: 웹 애플리케이션에서의 사용자 세션 저장&lt;/li>
&lt;li>실시간 데이터 처리: 동시에 여러 데이터 스트림 처리&lt;/li>
&lt;li>메시지 큐잉 시스템: 메시지 라우팅 테이블 관리&lt;/li>
&lt;li>멀티스레드 애플리케이션의 공유 데이터 저장&lt;/li>
&lt;li>동시성이 높은 웹 서버나 데이터베이스 시스템&lt;/li>
&lt;/ol>
&lt;h3>동작 원리&lt;span class="hx-absolute -hx-mt-20" id="동작-원리">&lt;/span>
&lt;a href="#%eb%8f%99%ec%9e%91-%ec%9b%90%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>버킷 단위 락&lt;/strong>: 전체 맵이 아닌 개별 버킷에 대해 락을 사용한다.&lt;/li>
&lt;li>&lt;strong>읽기 작업 최적화&lt;/strong>: 읽기 작업은 락 없이 수행되어 성능을 향상시킨다.&lt;/li>
&lt;li>&lt;strong>동적 확장&lt;/strong>: 맵의 크기가 임계값을 초과하면 자동으로 확장된다.&lt;/li>
&lt;/ol>
&lt;h3>구성 요소&lt;span class="hx-absolute -hx-mt-20" id="구성-요소">&lt;/span>
&lt;a href="#%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>Node: 키-값 쌍을 저장하는 기본 노드&lt;/li>
&lt;li>TreeNode: 트리 구조에서 사용되는 노드&lt;/li>
&lt;li>ForwardingNode: 리사이징 시 사용되는 특수 노드&lt;/li>
&lt;li>ReservationNode: 동시 삽입 작업을 위한 임시 노드&lt;/li>
&lt;li>Segment: Java 7까지 사용된 잠금 단위(Java 8에서는 제거됨)&lt;/li>
&lt;li>&lt;strong>Table&lt;/strong>: Node의 배열&lt;/li>
&lt;/ol>
&lt;h3>예시 코드&lt;span class="hx-absolute -hx-mt-20" id="예시-코드">&lt;/span>
&lt;a href="#%ec%98%88%ec%8b%9c-%ec%bd%94%eb%93%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Java에서의 ConcurrentHashMap 사용 예:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">java.util.concurrent.ConcurrentHashMap&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">ConcurrentHashMapExample&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">ConcurrentHashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ConcurrentHashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 데이터 추가&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;A&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;B&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 데이터 조회&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;A&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 출력: 1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 조건부 갱신&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">computeIfPresent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;B&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;B&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 출력: 3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 동시 처리&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;: &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>Python에서의 유사한 구현 (threading 모듈 사용):&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">threading&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Lock&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ConcurrentDict&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_dict&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_dict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_dict&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 사용 예&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">concurrent_dict&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ConcurrentDict&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">concurrent_dict&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;A&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">concurrent_dict&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;A&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 출력: 1&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>