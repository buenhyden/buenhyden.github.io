<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – 기본테스팅</title><link>https://buenhyden.github.io/tags/%EA%B8%B0%EB%B3%B8%ED%85%8C%EC%8A%A4%ED%8C%85/</link><description>Recent content in 기본테스팅 on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 29 Nov 2024 04:05:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/%EA%B8%B0%EB%B3%B8%ED%85%8C%EC%8A%A4%ED%8C%85/index.xml" rel="self" type="application/rss+xml"/><item><title>기본 테스팅 (Fundamental Testing)</title><link>https://buenhyden.github.io/posts/qa/qc/test/fundamental-testing/</link><pubDate>Fri, 29 Nov 2024 04:05:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/test/fundamental-testing/</guid><description>
&lt;h2>기본 테스팅 (Fundamental Testing)&lt;span class="hx-absolute -hx-mt-20" id="기본-테스팅-fundamental-testing">&lt;/span>
&lt;a href="#%ea%b8%b0%eb%b3%b8-%ed%85%8c%ec%8a%a4%ed%8c%85-fundamental-testing" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Fundamental testing은 소프트웨어 테스팅의 기본적인 프로세스와 원칙을 의미한다.&lt;br>
이는 소프트웨어의 품질을 보장하기 위한 체계적인 접근 방식을 제공한다.&lt;/p>
&lt;p>Fundamental testing process는 다음과 같은 주요 단계로 구성된다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>계획 및 통제 (Planning and Control)&lt;/p>
&lt;ul>
&lt;li>테스트의 범위, 목표, 위험을 결정한다.&lt;/li>
&lt;li>필요한 리소스를 식별하고 일정을 수립한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>분석 및 설계 (Analysis and Design)&lt;/p>
&lt;ul>
&lt;li>테스트 조건을 식별한다.&lt;/li>
&lt;li>테스트 케이스를 설계한다.&lt;/li>
&lt;li>테스트 환경을 준비한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>구현 및 실행 (Implementation and Execution)&lt;/p>
&lt;ul>
&lt;li>테스트 케이스를 우선순위화하고 실행한다.&lt;/li>
&lt;li>결과를 기록하고 결함을 보고한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>종료 기준 평가 및 보고 (Evaluating Exit Criteria and Reporting)&lt;/p>
&lt;ul>
&lt;li>테스트 목표 달성 여부를 평가한다.&lt;/li>
&lt;li>결과를 이해관계자에게 보고한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>테스트 종료 활동 (Test Closure Activities)&lt;/p>
&lt;ul>
&lt;li>테스트 자산을 문서화하고 보관한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>이러한 프로세스는 소프트웨어 개발 주기 전반에 걸쳐 반복적으로 적용되며, 각 단계는 소프트웨어의 품질을 향상시키는 데 중요한 역할을 한다.&lt;/p>
&lt;h3>Fundamental Testing의 중요한 원칙들&lt;span class="hx-absolute -hx-mt-20" id="fundamental-testing의-중요한-원칙들">&lt;/span>
&lt;a href="#fundamental-testing%ec%9d%98-%ec%a4%91%ec%9a%94%ed%95%9c-%ec%9b%90%ec%b9%99%eb%93%a4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>조기 테스팅 (Early Testing)&lt;br>
가능한 한 일찍 테스트를 시작하여 문제를 조기에 발견하고 수정 비용을 최소화한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>철저한 테스팅 (Exhaustive Testing)&lt;br>
모든 가능한 경우를 테스트하는 것은 불가능하므로, 위험 기반으로 중요한 케이스를 선별하여 테스트한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>테스트 케이스 그룹핑&lt;br>
연관된 테스트 케이스들을 논리적으로 그룹화하여 효율적으로 관리한다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PaymentSystemTests&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">test_valid_payment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 정상적인 결제 테스트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">test_insufficient_funds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 잔액 부족 상황 테스트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">test_network_failure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 네트워크 오류 상황 테스트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>독립적인 테스팅&lt;br>
각 테스트는 다른 테스트의 결과에 영향을 받지 않도록 독립적으로 설계된다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>핵심 구성 요소 비교&lt;span class="hx-absolute -hx-mt-20" id="핵심-구성-요소-비교">&lt;/span>
&lt;a href="#%ed%95%b5%ec%8b%ac-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>비교 항목&lt;/th>
&lt;th>Unit Test&lt;/th>
&lt;th>Integration Test&lt;/th>
&lt;th>System Test&lt;/th>
&lt;th>Acceptance Test&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>개별 코드 단위(함수, 메서드, 클래스 등)의 동작을 검증하는 테스트&lt;/td>
&lt;td>여러 모듈이나 컴포넌트 간의 상호작용을 검증하는 테스트&lt;/td>
&lt;td>전체 시스템의 end-to-end 동작을 검증하는 테스트&lt;/td>
&lt;td>사용자 관점에서 시스템이 요구사항을 충족하는지 검증하는 테스트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 범위&lt;/td>
&lt;td>가장 작은 단위 (단일 함수/모듈)&lt;/td>
&lt;td>여러 모듈의 결합&lt;/td>
&lt;td>전체 시스템&lt;/td>
&lt;td>전체 시스템의 비즈니스 요구사항&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>수행 시점&lt;/td>
&lt;td>개발 단계에서 즉시&lt;/td>
&lt;td>모듈 개발 완료 후&lt;/td>
&lt;td>통합 테스트 완료 후&lt;/td>
&lt;td>시스템 테스트 완료 후&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 주체&lt;/td>
&lt;td>개발자&lt;/td>
&lt;td>개발자/테스터&lt;/td>
&lt;td>QA 팀&lt;/td>
&lt;td>최종 사용자/고객&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 환경&lt;/td>
&lt;td>개발 환경&lt;/td>
&lt;td>통합 테스트 환경&lt;/td>
&lt;td>테스트 환경&lt;/td>
&lt;td>실제 운영 환경과 유사한 환경&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>기술 지식 요구&lt;/td>
&lt;td>높음 (코드 레벨)&lt;/td>
&lt;td>중간 (인터페이스 수준)&lt;/td>
&lt;td>낮음 (시스템 수준)&lt;/td>
&lt;td>매우 낮음 (사용자 수준)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자동화 정도&lt;/td>
&lt;td>매우 높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 목적&lt;/td>
&lt;td>코드의 정확성 검증&lt;/td>
&lt;td>컴포넌트 간 통신 검증&lt;/td>
&lt;td>전체 시스템 기능 검증&lt;/td>
&lt;td>비즈니스 요구사항 충족 검증&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>피드백 속도&lt;/td>
&lt;td>즉각적&lt;/td>
&lt;td>빠른 편&lt;/td>
&lt;td>느린 편&lt;/td>
&lt;td>매우 느림&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 비용&lt;/td>
&lt;td>매우 낮음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>매우 높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 데이터&lt;/td>
&lt;td>단순한 테스트 데이터&lt;/td>
&lt;td>통합 테스트용 데이터&lt;/td>
&lt;td>실제와 유사한 데이터&lt;/td>
&lt;td>실제 운영 데이터&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실행 빈도&lt;/td>
&lt;td>매우 자주 (코드 변경시마다)&lt;/td>
&lt;td>자주 (기능 통합시)&lt;/td>
&lt;td>가끔 (주요 릴리즈 전)&lt;/td>
&lt;td>드물게 (최종 승인 전)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>오류 발견 시점&lt;/td>
&lt;td>매우 이른 시점&lt;/td>
&lt;td>이른 시점&lt;/td>
&lt;td>늦은 시점&lt;/td>
&lt;td>매우 늦은 시점&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>수정 비용&lt;/td>
&lt;td>매우 낮음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>매우 높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 도구 예시&lt;/td>
&lt;td>JUnit, NUnit&lt;/td>
&lt;td>Selenium, Postman&lt;/td>
&lt;td>TestComplete, SoapUI&lt;/td>
&lt;td>Manual Testing Tools&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>추가적인 특징들:&lt;/p>
&lt;ol>
&lt;li>테스트 의존성:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Unit Test: 독립적으로 실행&lt;/li>
&lt;li>Integration Test: 다른 모듈에 의존&lt;/li>
&lt;li>System Test: 전체 시스템에 의존&lt;/li>
&lt;li>Acceptance Test: 전체 시스템과 비즈니스 프로세스에 의존&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>테스트 시나리오 복잡도:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Unit Test: 단순한 시나리오&lt;/li>
&lt;li>Integration Test: 중간 수준의 복잡도&lt;/li>
&lt;li>System Test: 복잡한 시나리오&lt;/li>
&lt;li>Acceptance Test: 실제 사용 시나리오&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>유지보수 용이성:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Unit Test: 매우 쉬움&lt;/li>
&lt;li>Integration Test: 중간&lt;/li>
&lt;li>System Test: 어려움&lt;/li>
&lt;li>Acceptance Test: 매우 어려움&lt;/li>
&lt;/ul>
&lt;p>이러한 테스트들은 서로 보완적인 관계에 있으며, 품질 높은 소프트웨어를 만들기 위해서는 모든 단계의 테스트가 적절히 수행되어야 한다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>