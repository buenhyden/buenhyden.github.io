<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Message-Broker on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/message-broker/</link>
    <description>Recent content in Message-Broker on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.1</generator>
    <language>en</language>
    <lastBuildDate>Fri, 18 Jul 2025 05:58:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/message-broker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Message Broker</title>
      <link>https://buenhyden.github.io/posts/system-design/system-components/application-and-execution-core/messaging-systems/event-brokers-vs-message-brokers/message-broker/</link>
      <pubDate>Fri, 18 Jul 2025 05:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/system-components/application-and-execution-core/messaging-systems/event-brokers-vs-message-brokers/message-broker/</guid>
      <description>메시지 브로커 (Message Broker) 는 송신자 (Sender) 와 수신자 (Receiver) 간의 메시지를 비동기적으로 중개하고 라우팅하는 미들웨어이다. 큐 (Queue) 나 토픽 (Topic) 기반의 메시지 전달로 시스템 간 결합도를 낮추고, 신뢰성, 확장성, 장애 복원력 있는 데이터 통신을 지원한다.</description>
    </item>
    <item>
      <title>Message-Driven Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/messaging-oriented/message-driven-architecture/</link>
      <pubDate>Mon, 23 Jun 2025 02:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/messaging-oriented/message-driven-architecture/</guid>
      <description>Message-Driven Architecture 는 시스템 구성 요소들이 비동기 메시지 교환을 통해 상호작용하는 소프트웨어 아키텍처 패턴이다. 느슨한 결합 (Loose Coupling), 확장성 (Scalability), 탄력성 (Resilience) 을 제공하며, 분산 시스템에서 높은 처리량과 장애 허용성을 실현한다.</description>
    </item>
    <item>
      <title>Messaging Systems</title>
      <link>https://buenhyden.github.io/posts/system-design/system-components/application-and-execution-core/messaging-systems/</link>
      <pubDate>Tue, 22 Apr 2025 13:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/system-components/application-and-execution-core/messaging-systems/</guid>
      <description>메시징 시스템은 분산 애플리케이션의 구성 요소 간 비동기 통신을 지원하여 결합도를 낮추고, 신뢰성·확장성·유연성을 제공합니다. 메시지 큐, 이벤트 스트리밍, 태스크 큐 등 다양한 형태가 존재하며, 실시간 데이터 처리, 작업 분산, 장애 복원력 등 다양한 요구에 대응한다.</description>
    </item>
  </channel>
</rss>
