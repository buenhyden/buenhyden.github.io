<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>System-Execution-Models :: Tag :: hyunyoun's Blog</title><link>https://buenhyden.github.io/tags/system-execution-models.html</link><description/><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Tue, 14 Jan 2025 14:39:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/system-execution-models/index.xml" rel="self" type="application/rss+xml"/><item><title>Multithreading Vs Multiprocessing vs Multitasking</title><link>https://buenhyden.github.io/til/2025/01/multithreading-vs-multiprocessing-vs-multitasking.html</link><pubDate>Tue, 14 Jan 2025 14:39:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/til/2025/01/multithreading-vs-multiprocessing-vs-multitasking.html</guid><description>Multithreading, Multiprocessing, Multitasking은 컴퓨터 시스템에서 동시성과 병렬성을 구현하는 세 가지 주요 개념이다.</description></item><item><title>Process vs Thread</title><link>https://buenhyden.github.io/til/2024/10/process-vs-thread.html</link><pubDate>Mon, 14 Oct 2024 08:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/til/2024/10/process-vs-thread.html</guid><description>Process란 실행 중인 프로그램의 인스턴스를 이야기하며, Thread란 프로세스 내에서 실행되는 더 작은 실행 단위를 말한다.</description></item><item><title>Multithreading</title><link>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/multithreading.html</link><pubDate>Tue, 14 Jan 2025 14:33:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/multithreading.html</guid><description>Multithreading은 운영 체제에서 프로그램이 여러 작업을 동시에 수행할 수 있게 해주는 기능이다. 즉, 하나의 프로세스 내에서 여러 스레드가 동시에 실행되는 것을 의미하며, 각 스레드는 프로세스의 자원을 공유하면서도 독립적인 실행 경로를 가진다.</description></item><item><title>동시성 (Concurrency)</title><link>https://buenhyden.github.io/posts/computer-system/system-execution-models/concurrency.html</link><pubDate>Fri, 01 Nov 2024 06:51:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/concurrency.html</guid><description>동시성 (Concurrency)은 여러 작업이 동시에 실행되는 것처럼 보이지만, 실제로는 매우 빠르게 작업 간 전환을 하면서 처리하는 방식이다.</description></item><item><title>Concurrency vs Parallelism</title><link>https://buenhyden.github.io/til/2024/11/concurrency-vs-parallelism.html</link><pubDate>Fri, 01 Nov 2024 02:38:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/til/2024/11/concurrency-vs-parallelism.html</guid><description>동시성과 병렬성은 모두 여러 작업을 효율적으로 처리하기 위한 방법이지만, 그 접근 방식과 목적이 다르다. 동시성은 작업 관리와 응답성 향상에 중점을 두고, 병렬성은 전체적인 처리 속도 향상에 초점을 맞춘다.</description></item><item><title>병렬성 (Parallelism)</title><link>https://buenhyden.github.io/posts/computer-system/system-execution-models/parallelism.html</link><pubDate>Fri, 01 Nov 2024 02:35:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/parallelism.html</guid><description>병렬성(Parallelism)은 컴퓨터 프로그래밍에서 여러 작업을 동시에 실행하여 전체적인 처리 속도를 향상시키는 기술을 말한다.</description></item><item><title>Thread</title><link>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/thread.html</link><pubDate>Thu, 26 Sep 2024 23:32:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/thread.html</guid><description>Thread는 프로그램 실행의 기본 단위로, 프로세스 내에서 실행되는 독립적인 작업 흐름을 의미한다.</description></item></channel></rss>