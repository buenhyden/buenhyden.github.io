<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Memory-Architecture on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/memory-architecture/</link>
    <description>Recent content in Memory-Architecture on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 23 Jan 2025 10:53:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/memory-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Allocation Policy</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy/allocation-policy/</link>
      <pubDate>Thu, 23 Jan 2025 10:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy/allocation-policy/</guid>
      <description>&lt;h2 id=&#34;allocation-policy&#34;&gt;Allocation Policy&lt;/h2&gt;
&lt;p&gt;캐시 정책에서 할당 정책(allocation policy)은 캐시 미스가 발생했을 때 데이터를 어떻게 처리할지를 결정하는 중요한 요소이다.&lt;br&gt;
할당 정책은 주로 두 가지 유형으로 나뉜다:&lt;br&gt;
쓰기 할당(write-allocate)과 비쓰기 할당(no-write-allocate)이다.&lt;/p&gt;
&lt;p&gt;캐시 할당 정책은 시스템의 성능과 효율성에 큰 영향을 미치므로, 응용 프로그램의 특성과 요구사항을 고려하여 신중하게 선택해야 한다. 동적 할당 정책과 같은 최신 기술을 활용하면 더욱 최적화된 캐시 관리가 가능할 것이다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;쓰기 할당 (Write-Allocate)&lt;br&gt;
쓰기 할당 정책은 캐시 미스 시 해당 메모리 위치에 대한 캐시 블록을 할당한 후 데이터를 캐시에 쓰는 방식이다.&lt;br&gt;
장점:&lt;br&gt;
- 후속 읽기 작업의 성능 향상&lt;br&gt;
- 쓰기 후 읽기 작업이 빈번한 경우 효율적&lt;br&gt;
단점:&lt;br&gt;
- 캐시 공간을 더 많이 사용&lt;br&gt;
- 초기 쓰기 작업이 더 오래 걸릴 수 있음&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prefetch Policy</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy/prefetch-policy/</link>
      <pubDate>Thu, 23 Jan 2025 10:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy/prefetch-policy/</guid>
      <description>&lt;h2 id=&#34;prefetch-policy&#34;&gt;Prefetch Policy&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Replacement Policy</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy/replacement-policy/</link>
      <pubDate>Thu, 23 Jan 2025 10:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy/replacement-policy/</guid>
      <description>&lt;h2 id=&#34;replacement-policy&#34;&gt;Replacement Policy&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Write Policy</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy/write-policy/</link>
      <pubDate>Thu, 23 Jan 2025 10:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy/write-policy/</guid>
      <description>&lt;h2 id=&#34;write-policy&#34;&gt;Write Policy&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Placement Policy</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy/placement-policy/</link>
      <pubDate>Thu, 23 Jan 2025 10:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy/placement-policy/</guid>
      <description>&lt;h2 id=&#34;placement-policy&#34;&gt;Placement Policy&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>캐시 (Cache)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache/</link>
      <pubDate>Sun, 22 Sep 2024 13:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache/</guid>
      <description>캐시(Cache)는 컴퓨터 과학에서 데이터나 값을 미리 복사해 놓는 임시 저장소를 의미한다.</description>
    </item>
    <item>
      <title>Byte Addressable Memory vs Word Addressable Memory</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/byte-addressable-memory-vs-word-addressable-memory/</link>
      <pubDate>Sun, 22 Sep 2024 11:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/byte-addressable-memory-vs-word-addressable-memory/</guid>
      <description>컴퓨터 메모리의 주소 지정 방식을 설명하는 개념</description>
    </item>
    <item>
      <title>Cache Memory</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/cache-memory/</link>
      <pubDate>Sun, 22 Sep 2024 11:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/cache-memory/</guid>
      <description>캐시 메모리(Cache Memory)는 컴퓨터 아키텍처에서 중요한 역할을 하는 CPU와 주 메모리(RAM) 사이에 위치한 소규모의 고속 메모리이다.</description>
    </item>
    <item>
      <title>메모리 접근 방법 (Memory Access Methods)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-access-methods/</link>
      <pubDate>Sun, 22 Sep 2024 08:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-access-methods/</guid>
      <description>메모리 접근 방식 (Memory Access Methods)은 컴퓨터 시스템에서 메모리에 접근하는 방식을 말한다.</description>
    </item>
    <item>
      <title>메모리 주소 지정 방식 (Memory Address Modes)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-address-modes/</link>
      <pubDate>Sun, 22 Sep 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-address-modes/</guid>
      <description>메모리 주소 지정 방식(Memory Address Modes)은 CPU가 메모리의 특정 위치에 어떻게 접근하는지를 나타내는 방법이다.</description>
    </item>
    <item>
      <title>메모리의 계층 구조 (Memory Hierarchy)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-hierarchy/</link>
      <pubDate>Sun, 22 Sep 2024 03:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-hierarchy/</guid>
      <description>컴퓨터 시스템에서 데이터 접근의 효율성을 극대화하고 전체 시스템 성능을 향상시키기 위해 설계된 구조</description>
    </item>
    <item>
      <title>Cache Coherence</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-coherence/</link>
      <pubDate>Sun, 22 Sep 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-coherence/</guid>
      <description>&lt;h2 id=&#34;cache-coherence&#34;&gt;Cache Coherence&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Cache Invalidation</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-invalidation/</link>
      <pubDate>Sun, 22 Sep 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-invalidation/</guid>
      <description>&lt;h2 id=&#34;cache-invalidation&#34;&gt;Cache Invalidation&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Cache Strategy</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-strategy/</link>
      <pubDate>Sun, 22 Sep 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-strategy/</guid>
      <description>&lt;h2 id=&#34;cache-strategy&#34;&gt;Cache Strategy&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Caching Techniques</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/caching-techniques/</link>
      <pubDate>Sun, 22 Sep 2024 02:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/caching-techniques/</guid>
      <description>&lt;h2 id=&#34;caching-techniques&#34;&gt;Caching Techniques&lt;/h2&gt;
&lt;p&gt;캐싱 기법
Memoization (함수 결과 캐싱)
Write-Through Caching
Write-Back Caching
Write-Around Caching
Read-Through Caching&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
  </channel>
</rss>
