<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Database-Systems on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/database-systems/</link>
    <description>Recent content in Database-Systems on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Thu, 15 May 2025 02:35:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/database-systems/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis와 Valkey</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/key-value-stores/redis%EC%99%80-valkey/</link>
      <pubDate>Tue, 22 Oct 2024 01:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/key-value-stores/redis%EC%99%80-valkey/</guid>
      <description>Redis와 Valkey 모두 인메모리 데이터베이스로, 빠른 읽기/쓰기 성능을 제공하나, Redis의 라이선스 정책 변경으로 인해 Valkey가 fork되어 새로운 프로젝트가 되었다.</description>
    </item>
    <item>
      <title>ACID Properties</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/acid-properties/</link>
      <pubDate>Thu, 15 May 2025 02:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/acid-properties/</guid>
      <description>ACID는 데이터베이스 트랜잭션이 전부 수행 또는 전부 취소(원자성), 일관된 규칙 준수(일관성), 동시 실행 간 간섭 방지(격리성), **결과 영구 저장(지속성)**을 보장하는 원칙이다. 이를 통해 장애나 동시성 경쟁 상황에서도 데이터 무결성과 신뢰성을 유지하며, 현대 DB·분산 환경 설계의 핵심 기반이 된다.</description>
    </item>
    <item>
      <title>Transaction Isolation</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/</link>
      <pubDate>Mon, 12 May 2025 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/</guid>
      <description>트랜잭션 격리(Transaction Isolation)는 ACID 속성 중 하나로, 동시에 실행되는 트랜잭션 간 간섭을 제어해 데이터 일관성을 보장한다. SQL 표준 격리 수준은 Read Uncommitted, Read Committed, Repeatable Read, Serializable로, 각 수준에 따라 Dirty/Non-Repeatable/Phantom Read 허용 여부와 성능이 달라진다.</description>
    </item>
    <item>
      <title>Transaction Isolation Levels</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/</link>
      <pubDate>Thu, 06 Feb 2025 04:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/</guid>
      <description>트랜잭션 격리 수준(Transaction Isolation Level)은 DBMS가 동시에 실행되는 트랜잭션 간 데이터 접근·갱신 방식을 제어해 Dirty Read, Non-repeatable Read, Phantom Read 등을 방지하는 메커니즘이다. SQL-92 표준의 4단계(Read Uncommitted~Serializable)와 Lock·MVCC 기반 구현을 통해 성능과 일관성 간 균형을 조정한다.</description>
    </item>
    <item>
      <title>클러스터링 (Clustering)과 레플리케이션(Replication)</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-architecture/scalability--distribution/clustering/clustering-and-replication/</link>
      <pubDate>Fri, 25 Oct 2024 15:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-architecture/scalability--distribution/clustering/clustering-and-replication/</guid>
      <description>데이터베이스 클러스터링 (Clustering)과 레플리케이션(Replication)은 데이터베이스의 가용성과 성능을 향상시키는 전략으로, 각각의 목적과 구현 방식에서 차이가 있다.</description>
    </item>
    <item>
      <title>PostgreSQL</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/relational-databases/rdbms-platforms/postgresql/</link>
      <pubDate>Thu, 24 Oct 2024 15:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/relational-databases/rdbms-platforms/postgresql/</guid>
      <description>오픈 소스 관계형 데이터베이스 관리 시스템</description>
    </item>
    <item>
      <title>프로시저 (Procedure)</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/relational-databases/advanced-sql/functions/procedure/</link>
      <pubDate>Thu, 24 Oct 2024 09:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/relational-databases/advanced-sql/functions/procedure/</guid>
      <description>데이터베이스 프로시저(Database Procedure)는 데이터베이스 내에 저장되고 실행되는 일련의 SQL 문들의 집합이다.</description>
    </item>
    <item>
      <title>keyword</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/relational-databases/sql-fundamentals/keywords/</link>
      <pubDate>Thu, 24 Oct 2024 07:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/relational-databases/sql-fundamentals/keywords/</guid>
      <description>SQL(Structured Query Language)는 데이터베이스를 관리하고 조작하기 위한 표준 언어로, 다양한 **키워드**를 통해 데이터 정의, 조작, 제어, 트랜잭션 관리 등을 수행한다.</description>
    </item>
    <item>
      <title>RDBMS</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/relational-databases/rdbms-platforms/</link>
      <pubDate>Thu, 24 Oct 2024 01:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/relational-databases/rdbms-platforms/</guid>
      <description>데이터를 행과 열로 이루어진 테이블 형태로 저장하고 관리하는 시스템</description>
    </item>
    <item>
      <title>SQL (Structured Query Language)</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/relational-databases/sql-fundamentals/syntax/</link>
      <pubDate>Thu, 24 Oct 2024 01:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/relational-databases/sql-fundamentals/syntax/</guid>
      <description>관계형 데이터베이스를 관리하고 조작하기 위한 표준화된 프로그래밍 언어.</description>
    </item>
    <item>
      <title>Column Oriented</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/column-family/</link>
      <pubDate>Wed, 23 Oct 2024 12:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/column-family/</guid>
      <description>컬럼형 데이터베이스(Columnar database) 또는 컬럼 지향 데이터베이스(Column-oriented database)는 NoSQL 데이터베이스의 한 유형으로, 데이터를 행이 아닌 열 단위로 저장하는 특징을 가지고 있다.</description>
    </item>
    <item>
      <title>Graph</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/graph-databases/</link>
      <pubDate>Wed, 23 Oct 2024 12:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/graph-databases/</guid>
      <description>그래프 데이터베이스는 NoSQL 데이터베이스의 한 유형으로, 데이터를 노드(Node)와 엣지(Edge)로 구성된 그래프 구조로 저장하고 관리하는 데이터베이스 시스템이다.</description>
    </item>
    <item>
      <title>Time-Series</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/specialized-systems/time-series/</link>
      <pubDate>Wed, 23 Oct 2024 12:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/specialized-systems/time-series/</guid>
      <description>시계열 데이터베이스(Time Series Database, TSDB)는 NoSQL 데이터베이스의 한 종류로, 시간에 따라 변화하는 데이터를 효율적으로 저장하고 관리하기 위해 특별히 설계된 데이터베이스 시스템이다.</description>
    </item>
    <item>
      <title>NoSQL</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/</link>
      <pubDate>Wed, 23 Oct 2024 06:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/</guid>
      <description>NoSQL(Not Only SQL)은 전통적인 관계형 데이터베이스와는 다른 방식으로 데이터를 저장하고 처리하는 데이터베이스 시스템이다.</description>
    </item>
    <item>
      <title>Document Oriented</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/document-stores/</link>
      <pubDate>Wed, 23 Oct 2024 06:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/document-stores/</guid>
      <description>Document-Oriented Database는 NoSQL 데이터베이스의 한 유형으로, 데이터를 문서 형태로 저장하고 관리하는 시스템이다.</description>
    </item>
    <item>
      <title>Key-Value</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/key-value-stores/</link>
      <pubDate>Wed, 23 Oct 2024 06:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/key-value-stores/</guid>
      <description>In-Memory 데이터베이스는 데이터를 주 메모리(RAM)에 저장하고 관리하는 NoSQL 데이터베이스 시스템이다.</description>
    </item>
    <item>
      <title>Valkey</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/specialized-systems/in-memory/valkey/</link>
      <pubDate>Wed, 23 Oct 2024 01:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/specialized-systems/in-memory/valkey/</guid>
      <description>Valkey는 선택적 내구성을 갖춘 분산형 인메모리 키-값 데이터베이스, 캐시 및 메시지 브로커로 사용되는 오픈 소스 인메모리 스토리지.</description>
    </item>
    <item>
      <title>Cardinality</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-fundamentals/data-modeling/conceptual-modeling/cardinality/</link>
      <pubDate>Tue, 22 Oct 2024 15:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-fundamentals/data-modeling/conceptual-modeling/cardinality/</guid>
      <description>두 엔티티 간의 최대 연관성 혹은 특정 컬럼에 존재하는 고유한 값의 개수를 의미한다.</description>
    </item>
    <item>
      <title>데이터베이스 캐싱 (Database Caching)</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/query-processing/performance-tuning/caching/</link>
      <pubDate>Tue, 22 Oct 2024 06:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/query-processing/performance-tuning/caching/</guid>
      <description>자주 사용되는 데이터를 빠르게 접근할 수 있는 메모리에 임시로 저장하는 기술</description>
    </item>
    <item>
      <title>Query Optimization</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/query-processing/query-optimization/</link>
      <pubDate>Tue, 22 Oct 2024 06:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/query-processing/query-optimization/</guid>
      <description>데이터베이스 시스템의 성능을 향상시키고 효율성을 높이기 위한 중요한 프로세스</description>
    </item>
    <item>
      <title>데이터베이스 최적화 (Database Optimization)</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/database-optimization/</link>
      <pubDate>Tue, 22 Oct 2024 06:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/database-optimization/</guid>
      <description>데이터베이스 시스템의 성능을 향상시키고 효율성을 높이기 위한 다양한 기법과 프로세스를 의미한다.</description>
    </item>
    <item>
      <title>데이터베이스 인덱싱 (Database Indexing)</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-fundamentals/data-modeling/physical-design/indexing/</link>
      <pubDate>Tue, 22 Oct 2024 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-fundamentals/data-modeling/physical-design/indexing/</guid>
      <description>인덱스는 테이블의 특정 컬럼에 대한 검색을 빠르게 수행할 수 있도록 도와주는 자료 구조</description>
    </item>
  </channel>
</rss>
