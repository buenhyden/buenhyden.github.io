<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Database-Systems on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/database-systems/</link>
    <description>Recent content in Database-Systems on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.141.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 06 Dec 2024 09:27:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/database-systems/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis와 Valkey</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/nosql/in-memory/redis%EC%99%80-valkey/</link>
      <pubDate>Fri, 18 Oct 2024 01:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/nosql/in-memory/redis%EC%99%80-valkey/</guid>
      <description>Redis와 Valkey 모두 인메모리 데이터베이스로, 빠른 읽기/쓰기 성능을 제공하나, Redis의 라이선스 정책 변경으로 인해 Valkey가 fork되어 새로운 프로젝트가 되었다.</description>
    </item>
    <item>
      <title>분산 쿼리 (distributed query)</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/distributed-database/distributed-query/</link>
      <pubDate>Fri, 06 Dec 2024 09:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/distributed-database/distributed-query/</guid>
      <description>여러 노드에 분산된 데이터를 대상으로 쿼리를 실행하고 결과를 얻는 과정</description>
    </item>
    <item>
      <title>분산 트랜잭션 (Distributed transaction)</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/distributed-database/distributed-transaction/</link>
      <pubDate>Fri, 06 Dec 2024 09:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/distributed-database/distributed-transaction/</guid>
      <description>여러 분산된 데이터베이스 노드에서 수행되는 하나의 논리적 작업 단위를 의미한다</description>
    </item>
    <item>
      <title>데이터베이스 클러스터링 (Clustering)과 레플리케이션(Replication)</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/database-clustering-and-replication/</link>
      <pubDate>Thu, 05 Dec 2024 15:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/database-clustering-and-replication/</guid>
      <description>데이터베이스 클러스터링 (Clustering)과 레플리케이션(Replication)은 데이터베이스의 가용성과 성능을 향상시키는 전략으로, 각각의 목적과 구현 방식에서 차이가 있다.</description>
    </item>
    <item>
      <title>데이터베이스 파티셔닝 (Database Partitioning)</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-partitioning/</link>
      <pubDate>Thu, 05 Dec 2024 06:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-partitioning/</guid>
      <description>파티셔닝은 큰 테이블이나 인덱스를 더 작고 관리하기 쉬운 단위로 나누는 것</description>
    </item>
    <item>
      <title>데이터베이스 정규화 (Database Normalization)</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-normalization/</link>
      <pubDate>Thu, 05 Dec 2024 02:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-normalization/</guid>
      <description>관계형 데이터베이스의 설계를 체계화하고 최적화하는 과정</description>
    </item>
    <item>
      <title>데이터베이스 캐싱 (Database Caching)</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-caching/</link>
      <pubDate>Wed, 04 Dec 2024 06:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-caching/</guid>
      <description>자주 사용되는 데이터를 빠르게 접근할 수 있는 메모리에 임시로 저장하는 기술</description>
    </item>
    <item>
      <title>데이터베이스 클러스터링(Database Clustering)</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/distributed-database/database-clustering/</link>
      <pubDate>Tue, 03 Dec 2024 06:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/distributed-database/database-clustering/</guid>
      <description>하나의 데이터베이스를 여러 개의 서버 또는 인스턴스로 구성하여 운영하는 기술</description>
    </item>
    <item>
      <title>레플리케이션 (replication)</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/replication/</link>
      <pubDate>Tue, 03 Dec 2024 06:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/replication/</guid>
      <description>하나의 데이터베이스(마스터 또는 프라이머리)의 데이터를 다른 데이터베이스(슬레이브 또는 세컨더리)로 복제하는 프로세스</description>
    </item>
    <item>
      <title>샤딩 (sharding)</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/distributed-database/sharding/</link>
      <pubDate>Tue, 03 Dec 2024 06:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/distributed-database/sharding/</guid>
      <description>대규모 데이터베이스 시스템에서 데이터를 수평적으로 분할하여 여러 서버에 분산 저장하는 기술</description>
    </item>
    <item>
      <title>데이터베이스 쿼리 최적화 (Database Query Optimization)</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-query-optimization/</link>
      <pubDate>Mon, 02 Dec 2024 06:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-query-optimization/</guid>
      <description>데이터베이스 시스템의 성능을 향상시키고 효율성을 높이기 위한 중요한 프로세스</description>
    </item>
    <item>
      <title>데이터베이스 인덱싱 (Database Indexing)</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-indexing/</link>
      <pubDate>Mon, 02 Dec 2024 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-indexing/</guid>
      <description>인덱스는 테이블의 특정 컬럼에 대한 검색을 빠르게 수행할 수 있도록 도와주는 자료 구조</description>
    </item>
    <item>
      <title>N&#43;1</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/orm/n&#43;1/</link>
      <pubDate>Mon, 25 Nov 2024 11:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/orm/n&#43;1/</guid>
      <description>N&#43;1 문제는 하나의 쿼리로 N개의 엔티티를 조회한 후, 각 엔티티와 연관된 데이터를 조회하기 위해 N번의 추가 쿼리가 발생하는 현상을 말한다.</description>
    </item>
    <item>
      <title>데이터 불일치 (Data Inconsistency)</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/data-inconsistency/</link>
      <pubDate>Mon, 25 Nov 2024 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/data-inconsistency/</guid>
      <description>동일한 데이터가 데이터베이스 내의 여러 위치에서 서로 다른 형식이나 값으로 존재하는 상황</description>
    </item>
    <item>
      <title>ER(Entity-Relationship) 모델링</title>
      <link>https://buenhyden.github.io/til/2024/11/entity-relationship-modeling/</link>
      <pubDate>Mon, 25 Nov 2024 02:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/11/entity-relationship-modeling/</guid>
      <description>실제 세계의 데이터를 개체(Entity), 관계(Relationship), 속성(Attribute)으로 표현하여 데이터베이스를 설계하는 방법</description>
    </item>
    <item>
      <title>데이터베이스 잠금 (database lock)</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/tracsaction/database-lock/</link>
      <pubDate>Mon, 18 Nov 2024 15:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/tracsaction/database-lock/</guid>
      <description>여러 사용자가 동시에 데이터에 접근할 때 데이터의 일관성과 무결성을 보장하기 위한 핵심적인 메커니즘</description>
    </item>
    <item>
      <title>Cardinality</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/cardinality/</link>
      <pubDate>Mon, 18 Nov 2024 15:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/cardinality/</guid>
      <description>두 엔티티 간의 최대 연관성 혹은 특정 컬럼에 존재하는 고유한 값의 개수를 의미한다.</description>
    </item>
    <item>
      <title>ACID</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/tracsaction/acid/</link>
      <pubDate>Mon, 18 Nov 2024 13:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/tracsaction/acid/</guid>
      <description>트랜잭션의 신뢰성과 일관성을 정의하는 네 가지 주요 특성</description>
    </item>
    <item>
      <title>sql subquery</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/rdbms/sql/sql-subquery/</link>
      <pubDate>Wed, 06 Nov 2024 15:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/rdbms/sql/sql-subquery/</guid>
      <description>서브쿼리(Subquery)는 다른 SQL 쿼리 내부에 중첩된 쿼리를 의미</description>
    </item>
    <item>
      <title>sql join</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/rdbms/sql/sql-join/</link>
      <pubDate>Wed, 06 Nov 2024 15:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/rdbms/sql/sql-join/</guid>
      <description>JOIN은 두 개 이상의 테이블을 연결하여 데이터를 검색하는 방법</description>
    </item>
    <item>
      <title>프로시저 (Procedure)</title>
      <link>https://buenhyden.github.io/posts/backend/database-systems/rdbms/procedure/</link>
      <pubDate>Sun, 20 Oct 2024 09:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/database-systems/rdbms/procedure/</guid>
      <description>데이터베이스 프로시저(Database Procedure)는 데이터베이스 내에 저장되고 실행되는 일련의 SQL 문들의 집합이다.</description>
    </item>
  </channel>
</rss>
