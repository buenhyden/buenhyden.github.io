<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Architecture-Principles on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/architecture-principles/</link>
    <description>Recent content in Architecture-Principles on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Sat, 21 Dec 2024 05:25:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/architecture-principles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Architecture Principles</title>
      <link>https://buenhyden.github.io/posts/software-engineering/principles/architecture-principles/</link>
      <pubDate>Sat, 21 Dec 2024 05:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/principles/architecture-principles/</guid>
      <description>아키텍처 원칙은 소프트웨어 시스템의 품질, 지속 가능성, 적응성을 보장하기 위한 근본적인 지침과 규칙의 집합으로, SOLID, DRY, KISS와 같은 설계 원칙부터 클라우드 네이티브, 마이크로서비스 원칙까지 다양한 측면을 포괄한다. 이러한 원칙들은 비즈니스 목표와 기술적 제약 사이의 균형을 맞추며, 일관된 설계 결정과 효과적인 커뮤니케이션을 통해 복잡한 시스템의 성공적인 구현과 진화를 가능하게 한다.</description>
    </item>
    <item>
      <title>Boundaries</title>
      <link>https://buenhyden.github.io/posts/software-engineering/principles/architecture-principles/boundaries/</link>
      <pubDate>Sat, 21 Dec 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/principles/architecture-principles/boundaries/</guid>
      <description>경계 (Boundaries) 는 소프트웨어 아키텍처에서 서로 다른 구성 요소 간의 분리선과 계약을 정의하는 핵심 원칙으로, 단일 책임 원칙과 느슨한 결합을 통해 시스템의 모듈성, 유지보수성, 확장성을 향상시키며, 도메인 주도 설계와 마이크로서비스 아키텍처에서 특히 중요한 역할을 한다.</description>
    </item>
    <item>
      <title>Component Principles</title>
      <link>https://buenhyden.github.io/posts/software-engineering/principles/component-principles/</link>
      <pubDate>Sat, 21 Dec 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/principles/component-principles/</guid>
      <description>컴포넌트 원칙 (Component Principles)은 소프트웨어를 재사용 가능하고 독립적으로 배포할 수 있는 단위로 분할하는 아키텍처 설계 지침이다. 주요 원칙은 재사용/릴리즈 동등성, 공통 폐쇄, 공통 재사용, 안정적 의존성, 안정적 추상화 등으로, 시스템의 유지보수성, 확장성, 품질을 크게 높인다.</description>
    </item>
    <item>
      <title>Coupling and Cohesion</title>
      <link>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/quality-attribute/quality-attributes/run-time-reliability-and-efficiency/coupling-and-cohesion/</link>
      <pubDate>Sat, 21 Dec 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/quality-attribute/quality-attributes/run-time-reliability-and-efficiency/coupling-and-cohesion/</guid>
      <description>커플링과 응집도는 소프트웨어 모듈 간의 상호의존성 정도와 모듈 내부 요소들의 기능적 연관성을 측정하는 핵심 설계 원칙이다. 낮은 커플링과 높은 응집도를 통해 유지보수가 용이하고 확장 가능한 시스템을 구축할 수 있으며, 이는 모든 우수한 소프트웨어 아키텍처의 기반이 된다.</description>
    </item>
    <item>
      <title>Policy vs. Detail</title>
      <link>https://buenhyden.github.io/posts/software-engineering/principles/architecture-principles/policy-vs-detail/</link>
      <pubDate>Sat, 21 Dec 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/principles/architecture-principles/policy-vs-detail/</guid>
      <description>Policy vs. Detail 은 소프트웨어 시스템을 고수준 정책 (비즈니스 규칙, 핵심 로직) 과 저수준 세부사항 (프레임워크, 데이터베이스, UI) 으로 분리하는 아키텍처 원칙이다. 의존성 규칙을 통해 세부사항이 정책에 의존하도록 하여 변경에 유연하고 테스트 가능한 시스템을 만들 수 있다.</description>
    </item>
    <item>
      <title>Cloud Native Principles</title>
      <link>https://buenhyden.github.io/posts/software-engineering/principles/architecture-principles/cloud-native-principles/</link>
      <pubDate>Tue, 19 Nov 2024 01:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/principles/architecture-principles/cloud-native-principles/</guid>
      <description>클라우드 네이티브 원칙(Cloud Native Principles)는 클라우드 환경에서 애플리케이션을 설계하고 운영하는 핵심 원칙을 정의한다. 마이크로서비스, 컨테이너화, 불변 인프라, 선언적 API, 서비스 메시, 자동화 등을 통해 느슨하게 결합된 복원력 있는 시스템을 구현하여 비즈니스 민첩성과 운영 효율성을 극대화하는 아키텍처 접근법이다.</description>
    </item>
    <item>
      <title>Twelve-Factor App methodology</title>
      <link>https://buenhyden.github.io/posts/software-engineering/principles/architecture-principles/12-factor-app/</link>
      <pubDate>Tue, 19 Nov 2024 01:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/principles/architecture-principles/12-factor-app/</guid>
      <description>Twelve-Factor App Methodology 는 클라우드 환경에서 확장 가능하고 유지보수하기 쉬운 애플리케이션을 개발하기 위한 12 가지 원칙을 제시한다. 이 원칙들은 코드베이스 관리, 구성 설정, 종속성 선언 등 다양한 측면을 포괄하며, 현대 소프트웨어 개발의 모범 사례로 널리 채택되고 있다.</description>
    </item>
  </channel>
</rss>
