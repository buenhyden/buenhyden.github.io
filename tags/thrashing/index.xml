<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Thrashing</title><link>https://buenhyden.github.io/tags/thrashing/</link><description>Recent content in Thrashing on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 18 Dec 2024 00:08:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/thrashing/index.xml" rel="self" type="application/rss+xml"/><item><title>Thrashing</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/thrashing/</link><pubDate>Wed, 18 Dec 2024 00:08:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/thrashing/</guid><description>
&lt;h2>스래싱 (Thrashing)&lt;/h2>&lt;p>스래싱은 운영체제에서 발생하는 성능 저하 현상으로, 프로세스의 실제 작업 시간보다 페이지 교체(페이징)에 더 많은 시간을 소비하는 현상을 말한다.&lt;/p>
&lt;p>이를 더 쉽게 이해하기 위해 실생활의 예시를 들어보자.&lt;br>
작은 책상에서 여러 개의 큰 책을 동시에 참고하며 공부하는 상황을 상상해보자.&lt;br>
책상이 너무 작아서 한 번에 펼칠 수 있는 책의 수가 제한적이라, 새로운 책을 보기 위해서는 기존에 펼쳐져 있던 책을 닫고 치워야 한다. 만약 연관된 내용을 위해 계속해서 다른 책을 번갈아가며 봐야 한다면, 실제 공부하는 시간보다 책을 꺼내고 넣는 시간이 더 많아질 것이다. 이것이 바로 컴퓨터에서 일어나는 스래싱 현상과 유사하다.&lt;/p>
&lt;h3>스래싱이 발생하는 과정&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시작 단계:&lt;/p>
&lt;ul>
&lt;li>시스템에서 다수의 프로세스가 실행된다.&lt;/li>
&lt;li>각 프로세스는 자신의 페이지를 메모리에 로드하려 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>메모리 부족 발생:&lt;/p>
&lt;ul>
&lt;li>실제 물리 메모리보다 더 많은 페이지가 요구된다.&lt;/li>
&lt;li>운영체제는 페이지 교체를 시작한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>스래싱 발생:&lt;/p>
&lt;ul>
&lt;li>한 프로세스의 페이지를 내보내면, 다른 프로세스가 그 공간을 사용한다.&lt;/li>
&lt;li>하지만 곧 이전 프로세스가 내보낸 페이지가 다시 필요하게 된다.&lt;/li>
&lt;li>이러한 과정이 계속해서 반복된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스래싱의 주요 특징과 영향&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시스템 성능:&lt;/p>
&lt;ul>
&lt;li>CPU 활용률이 급격히 감소합니다.&lt;/li>
&lt;li>디스크 I/O가 급증합니다.&lt;/li>
&lt;li>시스템 응답 시간이 현저히 늘어납니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>사용자 경험:`&lt;/p>
&lt;ul>
&lt;li>프로그램의 실행 속도가 매우 느려집니다.&lt;/li>
&lt;li>시스템이 멈춘 것처럼 보일 수 있습니다.&lt;/li>
&lt;li>전반적인 시스템 반응성이 떨어집니다.&lt;br>
`&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스래싱 해결을 위한 방법들&lt;/h3>&lt;ol>
&lt;li>
&lt;p>예방적 접근:&lt;/p>
&lt;ul>
&lt;li>적절한 메모리 할당 정책 수립&lt;/li>
&lt;li>프로세스 수의 제한&lt;/li>
&lt;li>작업 세트(Working Set) 모델 적용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>대응적 접근:&lt;/p>
&lt;ul>
&lt;li>페이지 부재 빈도(PFF) 모니터링&lt;/li>
&lt;li>로컬 교체 정책 사용&lt;/li>
&lt;li>메모리 증설 고려&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>운영체제 레벨의 해결책:&lt;/p>
&lt;ul>
&lt;li>프로세스 우선순위 조정&lt;/li>
&lt;li>페이지 교체 알고리즘 최적화&lt;/li>
&lt;li>메모리 관리 정책 개선&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스래싱을 모니터링하는 방법&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시스템 지표 관찰:&lt;/p>
&lt;ul>
&lt;li>페이지 폴트(Page Fault) 발생 빈도&lt;/li>
&lt;li>CPU 사용률 변화&lt;/li>
&lt;li>디스크 I/O 활동량&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 모니터링 도구 사용:&lt;/p>
&lt;ul>
&lt;li>운영체제의 성능 모니터&lt;/li>
&lt;li>리소스 모니터링 툴&lt;/li>
&lt;li>시스템 로그 분석&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스래싱 예방을 위한 실용적인 팁&lt;/h3>&lt;ol>
&lt;li>
&lt;p>프로그램 설계 시:&lt;/p>
&lt;ul>
&lt;li>메모리 사용량을 최적화합니다.&lt;/li>
&lt;li>필요한 데이터만 메모리에 로드합니다.&lt;/li>
&lt;li>효율적인 메모리 관리 기법을 사용합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>시스템 운영 시:&lt;/p>
&lt;ul>
&lt;li>적절한 가상 메모리 크기를 설정합니다.&lt;/li>
&lt;li>동시 실행 프로세스 수를 제한합니다.&lt;/li>
&lt;li>주기적인 시스템 모니터링을 수행합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>