<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Computer-System on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/computer-system/</link>
    <description>Recent content in Computer-System on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Sun, 20 Oct 2024 23:32:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/computer-system/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Concurrency vs Parallelism</title>
      <link>https://buenhyden.github.io/til/2024/10/18/concurrency-vs-parallelism/</link>
      <pubDate>Fri, 18 Oct 2024 02:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/18/concurrency-vs-parallelism/</guid>
      <description>동시성과 병렬성은 모두 여러 작업을 효율적으로 처리하기 위한 방법이지만, 그 접근 방식과 목적이 다르다.  동시성은 작업 관리와 응답성 향상에 중점을 두고, 병렬성은 전체적인 처리 속도 향상에 초점을 맞춘다.</description>
    </item>
    <item>
      <title>Blocking vs Non-Blocking</title>
      <link>https://buenhyden.github.io/til/2024/10/18/blocking-vs-non-blocking/</link>
      <pubDate>Fri, 18 Oct 2024 12:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/18/blocking-vs-non-blocking/</guid>
      <description>프로그래밍에서 작업 처리 방식에 따라 프로그램의 실행 흐름이 어떻게 영향을 받는지를 설명하는 개념.</description>
    </item>
    <item>
      <title>동기(Synchronous)와 비동기(Asynchronous)</title>
      <link>https://buenhyden.github.io/til/2024/10/18/synchronous-and-asynchronous/</link>
      <pubDate>Fri, 18 Oct 2024 00:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/18/synchronous-and-asynchronous/</guid>
      <description>프로그래밍에서 작업을 처리하는 두 가지 주요 방식</description>
    </item>
    <item>
      <title>Multithreading Vs Multiprocessing vs Multitasking</title>
      <link>https://buenhyden.github.io/til/2024/10/18/multithreading-vs-multiprocessing-vs-multitasking/</link>
      <pubDate>Fri, 18 Oct 2024 14:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/18/multithreading-vs-multiprocessing-vs-multitasking/</guid>
      <description>Multithreading, Multiprocessing, Multitasking은 컴퓨터 시스템에서 동시성과 병렬성을 구현하는 세 가지 주요 개념이다.</description>
    </item>
    <item>
      <title>Process vs Thread</title>
      <link>https://buenhyden.github.io/til/2024/10/18/process-vs-thread/</link>
      <pubDate>Fri, 18 Oct 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/18/process-vs-thread/</guid>
      <description>Process란 실행 중인 프로그램의 인스턴스를 이야기하며, Thread란 프로세스 내에서 실행되는 더 작은 실행 단위를 말한다.</description>
    </item>
    <item>
      <title>Linux Basic Command</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-basic-command/</link>
      <pubDate>Sat, 19 Oct 2024 15:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-basic-command/</guid>
      <description>Linux에서 자주 사용하는 명령어 모음</description>
    </item>
    <item>
      <title>Linux Permission</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-permission/</link>
      <pubDate>Sat, 19 Oct 2024 15:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-permission/</guid>
      <description>Linux 권한 설정</description>
    </item>
    <item>
      <title>Paging vs Segmentation</title>
      <link>https://buenhyden.github.io/til/2024/10/18/paging-vs-segmentation/</link>
      <pubDate>Fri, 18 Oct 2024 08:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/18/paging-vs-segmentation/</guid>
      <description>Paging과 Segmentation은 운영체제의 메모리 관리 기법이다.</description>
    </item>
    <item>
      <title>동기(Synchronous)와 비동기(Asynchronous) 그리고 Blocking와 Non-Blocking</title>
      <link>https://buenhyden.github.io/til/2024/10/18/synchronous-and-asynchronous-and-blocking-and-non-blocking/</link>
      <pubDate>Fri, 18 Oct 2024 12:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/18/synchronous-and-asynchronous-and-blocking-and-non-blocking/</guid>
      <description>동기(Synchronous)와 비동기(Asynchronous) 그리고 Blocking와 Non-Blocking</description>
    </item>
    <item>
      <title>Lock and Mutex</title>
      <link>https://buenhyden.github.io/til/2024/10/18/lock-and-mutex/</link>
      <pubDate>Fri, 18 Oct 2024 11:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/18/lock-and-mutex/</guid>
      <description>Lock과 Mutex는 둘 다 여러 스레드가 공유 자원에 동시에 접근하는 것을 방지하는 동기화 도구이다. 한 스레드가 자원을 사용할 때 다른 스레드의 접근을 막는 것이다.</description>
    </item>
    <item>
      <title>Deadlock vs Livelock</title>
      <link>https://buenhyden.github.io/til/2024/10/18/deadlock-vs-livelock/</link>
      <pubDate>Fri, 18 Oct 2024 07:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/18/deadlock-vs-livelock/</guid>
      <description>데드락(Deadlock)과 라이브락(Livelock)은 둘 다 동시성 프로그래밍에서 발생할 수 있는 문제 상황으로, 데드락과 라이브락은 모두 시스템의 진행을 방해하는 심각한 문제이다</description>
    </item>
    <item>
      <title>Process</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process/</link>
      <pubDate>Sun, 20 Oct 2024 23:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process/</guid>
      <description>프로세스는 실행 중인 프로그램의 인스턴스</description>
    </item>
    <item>
      <title>소켓(Socket)</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/socket/</link>
      <pubDate>Sun, 20 Oct 2024 16:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/socket/</guid>
      <description>네트워크 상에서 두 프로그램이 데이터를 주고받을 수 있도록 하는 양방향 통신의 종착점이다.</description>
    </item>
    <item>
      <title>가상 메모리 (Virtual Memory)</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/virtual-memory/</link>
      <pubDate>Sun, 20 Oct 2024 13:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/virtual-memory/</guid>
      <description>가상 메모리(Virtual Memory)는 운영체제의 메모리 관리 기법 중 하나로, 물리적 메모리의 한계를 극복하고 더 큰 메모리 공간을 제공하는 기술이다.</description>
    </item>
    <item>
      <title>세그먼테이션 (Segmentation)</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/segmentation/</link>
      <pubDate>Sun, 20 Oct 2024 13:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/segmentation/</guid>
      <description>세그먼테이션(Segmentation)은 운영체제의 메모리 관리 기법 중 하나로, 프로세스를 논리적 단위인 세그먼트로 나누어 관리하는 방식이다.</description>
    </item>
    <item>
      <title>페이징 (Paging)</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/paging/</link>
      <pubDate>Sun, 20 Oct 2024 13:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/paging/</guid>
      <description>페이징(Paging)은 운영체제의 메모리 관리 기법 중 하나로, 프로세스를 고정 크기의 페이지로 나누고 물리적 메모리를 같은 크기의 프레임으로 나누어 관리하는 방식이다.</description>
    </item>
    <item>
      <title>Message Queue</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/message-queue/</link>
      <pubDate>Sun, 20 Oct 2024 12:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/message-queue/</guid>
      <description>프로세스 간 통신(IPC)의 메시지 큐(Message Queue)는 프로세스 간에 데이터를 교환하는 메커니즘이다.</description>
    </item>
    <item>
      <title>Shared Memory</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/shared-memory/</link>
      <pubDate>Sun, 20 Oct 2024 12:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/shared-memory/</guid>
      <description>공유 메모리(Shared Memory)는 운영체제의 프로세스 간 통신(IPC) 기법 중 하나로, 여러 프로세스가 동시에 접근할 수 있는 메모리 영역이며, 커널에 의해 생성되고 관리되는 공통 메모리 공간이다.</description>
    </item>
    <item>
      <title>Pipe</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/pipe/</link>
      <pubDate>Sun, 20 Oct 2024 12:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/pipe/</guid>
      <description>파이프(Pipe)는 프로세스 간 통신(IPC)의 한 방법으로, 단방향 데이터 흐름을 제공하는 가장 오래된 IPC(프로세스 간 통신) 메커니즘 중 하나이다. 파이프는 한쪽 끝에서 데이터를 쓰고 다른 쪽 끝에서 데이터를 읽을 수 있게 해준다.</description>
    </item>
    <item>
      <title>프로세스 제어 블록(Process Control Block, PCB)</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-control-block/</link>
      <pubDate>Sun, 20 Oct 2024 06:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-control-block/</guid>
      <description>프로세스 제어 블록(Process Control Block, PCB)은 운영 체제에서 프로세스를 관리하기 위해 사용하는 핵심적인 데이터 구조이다. PCB는 각 프로세스에 대한 중요한 정보를 저장하고 관리하며, 운영 체제가 프로세스를 효율적으로 제어하고 실행할 수 있게 한다.</description>
    </item>
    <item>
      <title>Process Scheduling</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-scheduling/</link>
      <pubDate>Sun, 20 Oct 2024 06:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-scheduling/</guid>
      <description>프로세스 스케줄링은 컴퓨터의 CPU 자원을 여러 프로세스에 효율적으로 할당하는 방법을 결정하는 메커니즘</description>
    </item>
    <item>
      <title>Context Switching</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/context-switching/</link>
      <pubDate>Sun, 20 Oct 2024 01:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/context-switching/</guid>
      <description>Context Switching은 운영 체제에서 매우 중요한 개념으로, 여러 프로세스나 스레드가 단일 CPU 자원을 공유하여 효율적으로 실행될 수 있게 하는 메커니즘으로, CPU가 현재 실행 중인 프로세스나 스레드의 상태를 저장하고, 다른 프로세스나 스레드의 상태를 불러와 실행을 재개하는 과정을 말한다.  이를 통해 여러 작업이 동시에 실행되는 것처럼 보이게 된다.</description>
    </item>
    <item>
      <title>잠금 (Lock)</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/lock/</link>
      <pubDate>Sat, 19 Oct 2024 10:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/lock/</guid>
      <description>여러 스레드가 공유 자원에 동시에 접근하는 것을 방지하는 동기화 기본 요소이다. 임계 영역을 보호하고 한 번에 하나의 스레드만 접근할 수 있도록 한다.</description>
    </item>
    <item>
      <title>상호 배제 (Mutual Exclusion)</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/mutual-exclusion/</link>
      <pubDate>Sat, 19 Oct 2024 07:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/mutual-exclusion/</guid>
      <description>여러 프로세스나 스레드가 공유 자원에 동시에 접근하는 것을 방지하는 동기화 메커니즘</description>
    </item>
    <item>
      <title>동기화 (Synchronization)</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/synchronization/</link>
      <pubDate>Sat, 19 Oct 2024 07:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/synchronization/</guid>
      <description>여러 프로세스나 스레드가 공유 자원에 접근할 때 데이터의 일관성과 무결성을 보장하기 위한 메커니즘</description>
    </item>
    <item>
      <title>System Call Interface</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/kernel/system-call-interface/</link>
      <pubDate>Sat, 19 Oct 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/kernel/system-call-interface/</guid>
      <description>사용자 공간의 프로그램과 운영 체제 커널 사이의 중간 계층으로, 프로그램이 운영 체제의 서비스를 요청할 수 있게 해주는 인터페이스</description>
    </item>
    <item>
      <title>동시성 제어 (Concurrency Control)</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/concurrency-control/</link>
      <pubDate>Sat, 19 Oct 2024 02:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/concurrency-control/</guid>
      <description>동시성 제어는 여러 프로세스나 스레드가 동시에 공유 자원에 접근할 때, 데이터의 일관성과 무결성을 보장하기 위한 제어 메커니즘</description>
    </item>
    <item>
      <title>메모리 보호와 안전 (Memory Protection and Safety)</title>
      <link>https://buenhyden.github.io/til/2024/10/18/memory-protection-and-safety/</link>
      <pubDate>Fri, 18 Oct 2024 08:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/18/memory-protection-and-safety/</guid>
      <description>메모리 보호는 컴퓨터 시스템에서 프로세스가 허가되지 않은 메모리 영역에 접근하는 것을 방지하는 메커니즘이다.</description>
    </item>
    <item>
      <title>Thrashing</title>
      <link>https://buenhyden.github.io/til/2024/10/18/thrashing/</link>
      <pubDate>Fri, 18 Oct 2024 00:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/18/thrashing/</guid>
      <description>운영체제에서 발생하는 성능 저하 현상으로, 프로세스의 실제 작업 시간보다 페이지 교체(페이징)에 더 많은 시간을 소비하는 현상</description>
    </item>
    <item>
      <title>교착상태 (Deadlock)</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/deadlock/</link>
      <pubDate>Thu, 17 Oct 2024 23:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/deadlock/</guid>
      <description>둘 이상의 프로세스가 서로가 가진 자원을 기다리며 더 이상 진행할 수 없는 상태</description>
    </item>
    <item>
      <title>Race Condition</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/race-condition/</link>
      <pubDate>Thu, 17 Oct 2024 23:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/race-condition/</guid>
      <description>여러 프로세스나 스레드가 공유 자원에 동시에 접근할 때, 접근의 타이밍이나 순서에 따라 결과가 달라질 수 있는 상황</description>
    </item>
    <item>
      <title>Mutex</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/mutex/</link>
      <pubDate>Thu, 17 Oct 2024 11:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/mutex/</guid>
      <description>Mutex(Mutual Exclusion)는 공유 자원에 대한 접근을 동기화하는 객체.</description>
    </item>
    <item>
      <title>Monitor</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/monitor/</link>
      <pubDate>Thu, 17 Oct 2024 10:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/monitor/</guid>
      <description>&lt;h2 id=&#34;monitor&#34;&gt;Monitor&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Semaphore</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/semaphore/</link>
      <pubDate>Thu, 17 Oct 2024 10:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/semaphore/</guid>
      <description>멀티스레딩 환경에서 공유 자원에 대한 접근을 제어하는 동기화 도구</description>
    </item>
    <item>
      <title>조건 변수 (Condition Variable)</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/condition-variable/</link>
      <pubDate>Thu, 17 Oct 2024 10:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/condition-variable/</guid>
      <description>조건 변수(Condition Variables)는 프로세스 동기화에서 중요한 역할을 하는 동기화 기본 요소로, 스레드가 특정 조건이 충족될 때까지 대기하도록 하는 메커니즘을 제공한다.</description>
    </item>
    <item>
      <title>원자적 연산 (Atomic Operation)</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/atomic-operation/</link>
      <pubDate>Thu, 17 Oct 2024 10:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/atomic-operation/</guid>
      <description>원자적 연산이란, 더 이상 쪼개질 수 없는 최소 단위의 연산을 의미하는데 중단되거나 간섭받지 않고 완전히 실행되는 연산을 말한다.</description>
    </item>
    <item>
      <title>데커 알고리즘 (Dekker&#39;s Algorithm)</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/dekkers-algorithm/</link>
      <pubDate>Thu, 17 Oct 2024 10:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/dekkers-algorithm/</guid>
      <description>&lt;h2 id=&#34;데커-알고리즘-dekkers-algorithm&#34;&gt;데커 알고리즘 (Dekker&amp;rsquo;s Algorithm)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>램포트의 빵집 알고리즘 (Lamport&#39;s Bakery Algorithm)</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/lamports-bakery-algorithm/</link>
      <pubDate>Thu, 17 Oct 2024 10:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/lamports-bakery-algorithm/</guid>
      <description>&lt;h2 id=&#34;램포트의-빵집-알고리즘-lamports-bakery-algorithm&#34;&gt;램포트의 빵집 알고리즘 (Lamport&amp;rsquo;s Bakery Algorithm)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>피터슨 알고리즘 (Peterson&#39;s Algorithm)</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/petersons-algorithm/</link>
      <pubDate>Thu, 17 Oct 2024 10:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/petersons-algorithm/</guid>
      <description>&lt;h2 id=&#34;피터슨-알고리즘-petersons-algorithm&#34;&gt;피터슨 알고리즘 (Peterson&amp;rsquo;s Algorithm)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>라이브락 (Livelock)</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/livelock/</link>
      <pubDate>Thu, 17 Oct 2024 09:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/livelock/</guid>
      <description>멀티스레딩 환경에서 발생할 수 있는 문제 상황으로, 프로세스나 스레드가 계속 실행 중이지만 실제로는 유용한 작업을 수행하지 못하는 상태</description>
    </item>
    <item>
      <title>Starvation</title>
      <link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/starvation/</link>
      <pubDate>Thu, 17 Oct 2024 07:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/starvation/</guid>
      <description>운영 체제 및 동시성 프로그래밍에서 중요한 문제로, 특정 프로세스가 필요한 자원을 지속적으로 얻지 못해 실행되지 못하는 상황</description>
    </item>
    <item>
      <title>Thread</title>
      <link>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/thread/</link>
      <pubDate>Mon, 23 Sep 2024 23:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/thread/</guid>
      <description>Thread는 프로그램 실행의 기본 단위로, 프로세스 내에서 실행되는 독립적인 작업 흐름을 의미한다.</description>
    </item>
    <item>
      <title>컴퓨터 구성 요소 (Components of Computer Architecture)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/components-of-computer-architecture/</link>
      <pubDate>Mon, 23 Sep 2024 16:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/components-of-computer-architecture/</guid>
      <description>이 구성 요소들의 상호작용을 통해 컴퓨터가 작동하게 된다.</description>
    </item>
    <item>
      <title>CPU</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/cpu/</link>
      <pubDate>Mon, 23 Sep 2024 16:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/cpu/</guid>
      <description>컴퓨터 시스템의 핵심 구성요소로, 프로그램의 명령어를 해석하고 실행하는 역할을 한다.</description>
    </item>
    <item>
      <title>Multithreading</title>
      <link>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/multithreading/</link>
      <pubDate>Mon, 23 Sep 2024 14:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/multithreading/</guid>
      <description>Multithreading은 운영 체제에서 프로그램이 여러 작업을 동시에 수행할 수 있게 해주는 기능이다.  즉, 하나의 프로세스 내에서 여러 스레드가 동시에 실행되는 것을 의미하며, 각 스레드는 프로세스의 자원을 공유하면서도 독립적인 실행 경로를 가진다.</description>
    </item>
    <item>
      <title>인터럽트 (Interrupt)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/interrupt/</link>
      <pubDate>Mon, 23 Sep 2024 06:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/interrupt/</guid>
      <description>프로세서에게 현재 실행 중인 코드를 중단하고 특정 이벤트를 처리하도록 요청하는 신호</description>
    </item>
    <item>
      <title>파이프라이닝 (Pipelining)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/pipelining/</link>
      <pubDate>Mon, 23 Sep 2024 02:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/pipelining/</guid>
      <description>파이프라이닝은 여러 명령어의 실행 단계를 중첩시켜 전체적인 처리량을 향상시키는 기술로, 여러 단계를 동시에 처리함으로써 효율성을 높인다.</description>
    </item>
    <item>
      <title>명령어 집합 구조 (Instruction Set Architecture)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/instruction-set-architecture/</link>
      <pubDate>Mon, 23 Sep 2024 02:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/instruction-set-architecture/</guid>
      <description>ISA는 프로세서가 실행할 수 있는 명령어들의 집합을 정의하며, 프로그래머와 컴파일러 작성자에게 중요한 추상화 계층을 제공한다.</description>
    </item>
    <item>
      <title>System Bus</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/system-bus/</link>
      <pubDate>Mon, 23 Sep 2024 02:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/system-bus/</guid>
      <description>System Bus는 컴퓨터 아키텍처에서 주요 구성 요소들을 연결하는 중요한 통신 경로로, 컴퓨터의 혈관과 같은 역할을 한다.</description>
    </item>
    <item>
      <title>Harvard Architecture</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/harvard-architecture/</link>
      <pubDate>Mon, 23 Sep 2024 01:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/harvard-architecture/</guid>
      <description>&lt;h2 id=&#34;harvard-architecture&#34;&gt;Harvard Architecture&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Von Neumann architecture</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/von-neumann-architecture/</link>
      <pubDate>Mon, 23 Sep 2024 01:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/von-neumann-architecture/</guid>
      <description>Von Neumann architecture는 1945년 John von Neumann이 제안한 컴퓨터 아키텍처로, 현대 대부분의 컴퓨터 시스템의 기본이 되는 설계이다.</description>
    </item>
    <item>
      <title>캐시 (Cache)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache/</link>
      <pubDate>Sun, 22 Sep 2024 13:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache/</guid>
      <description>캐시(Cache)는 컴퓨터 과학에서 데이터나 값을 미리 복사해 놓는 임시 저장소를 의미한다.</description>
    </item>
    <item>
      <title>Byte Addressable Memory vs Word Addressable Memory</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/byte-addressable-memory-vs-word-addressable-memory/</link>
      <pubDate>Sun, 22 Sep 2024 11:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/byte-addressable-memory-vs-word-addressable-memory/</guid>
      <description>컴퓨터 메모리의 주소 지정 방식을 설명하는 개념</description>
    </item>
    <item>
      <title>Cache Memory</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/cache-memory/</link>
      <pubDate>Sun, 22 Sep 2024 11:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/cache-memory/</guid>
      <description>캐시 메모리(Cache Memory)는 컴퓨터 아키텍처에서 중요한 역할을 하는 CPU와 주 메모리(RAM) 사이에 위치한 소규모의 고속 메모리이다.</description>
    </item>
    <item>
      <title>메모리 접근 방법 (Memory Access Methods)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-access-methods/</link>
      <pubDate>Sun, 22 Sep 2024 08:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-access-methods/</guid>
      <description>메모리 접근 방식 (Memory Access Methods)은 컴퓨터 시스템에서 메모리에 접근하는 방식을 말한다.</description>
    </item>
    <item>
      <title>메모리 주소 지정 방식 (Memory Address Modes)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-address-modes/</link>
      <pubDate>Sun, 22 Sep 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-address-modes/</guid>
      <description>메모리 주소 지정 방식(Memory Address Modes)은 CPU가 메모리의 특정 위치에 어떻게 접근하는지를 나타내는 방법이다.</description>
    </item>
    <item>
      <title>메모리의 계층 구조 (Memory Hierarchy)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-hierarchy/</link>
      <pubDate>Sun, 22 Sep 2024 03:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-hierarchy/</guid>
      <description>컴퓨터 시스템에서 데이터 접근의 효율성을 극대화하고 전체 시스템 성능을 향상시키기 위해 설계된 구조</description>
    </item>
    <item>
      <title>Cache Coherence</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-coherence/</link>
      <pubDate>Sun, 22 Sep 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-coherence/</guid>
      <description>&lt;h2 id=&#34;cache-coherence&#34;&gt;Cache Coherence&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Cache Invalidation</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-invalidation/</link>
      <pubDate>Sun, 22 Sep 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-invalidation/</guid>
      <description>&lt;h2 id=&#34;cache-invalidation&#34;&gt;Cache Invalidation&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Cache Policy</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy/</link>
      <pubDate>Sun, 22 Sep 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy/</guid>
      <description>&lt;h2 id=&#34;cache-policy&#34;&gt;Cache Policy&lt;/h2&gt;
&lt;h3 id=&#34;cache-consistent-policies&#34;&gt;Cache Consistent Policies&lt;/h3&gt;
&lt;h3 id=&#34;cache-replacement-policies&#34;&gt;Cache Replacement Policies&lt;/h3&gt;
&lt;p&gt;LRU (Least Recently Used), LFU (Least Frequently Used), FIFO (First In First Out) 캐시 전략은 각각 다른 방식으로 캐시 공간을 관리합니다. 이들의 주요 차이점은 다음과 같습니다&lt;/p&gt;
&lt;p&gt;LRU (Least Recently Used)&lt;br&gt;
LFU (Least Frequently Used)&lt;br&gt;
FIFO (First In First Out)&lt;br&gt;
MRU (Most Recently Used)&lt;br&gt;
Random Replacement&lt;/p&gt;
&lt;h3 id=&#34;lru-least-recently-used&#34;&gt;LRU (Least Recently Used)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;가장 오랫동안 사용되지 않은 항목을 제거합니다.&lt;/li&gt;
&lt;li&gt;최근 접근 시간을 기준으로 항목을 관리합니다.&lt;/li&gt;
&lt;li&gt;시간적 지역성(temporal locality)이 있는 워크로드에 효과적입니다.&lt;/li&gt;
&lt;li&gt;구현이 비교적 간단하고 적응성이 좋습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lfu-least-frequently-used&#34;&gt;LFU (Least Frequently Used)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;가장 적게 사용된 항목을 제거합니다.&lt;/li&gt;
&lt;li&gt;각 항목의 접근 빈도를 추적하여 관리합니다.&lt;/li&gt;
&lt;li&gt;장기적인 인기도를 반영하는 데 효과적입니다.&lt;/li&gt;
&lt;li&gt;구현이 복잡하고 변화하는 접근 패턴에 적응하는 데 시간이 걸릴 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fifo-first-in-first-out&#34;&gt;FIFO (First In First Out)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;가장 먼저 추가된 항목을 제거합니다.&lt;/li&gt;
&lt;li&gt;항목이 추가된 순서만을 고려합니다.&lt;/li&gt;
&lt;li&gt;구현이 매우 간단하고 오버헤드가 낮습니다.&lt;/li&gt;
&lt;li&gt;접근 빈도나 최근 사용을 고려하지 않아 성능이 떨어질 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각 전략의 특성을 비교하면:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cache Strategy</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-strategy/</link>
      <pubDate>Sun, 22 Sep 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-strategy/</guid>
      <description>&lt;h2 id=&#34;cache-strategy&#34;&gt;Cache Strategy&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Caching Techniques</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/caching-techniques/</link>
      <pubDate>Sun, 22 Sep 2024 02:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/caching-techniques/</guid>
      <description>&lt;h2 id=&#34;caching-techniques&#34;&gt;Caching Techniques&lt;/h2&gt;
&lt;p&gt;캐싱 기법
Memoization (함수 결과 캐싱)
Write-Through Caching
Write-Back Caching
Write-Around Caching
Read-Through Caching&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
  </channel>
</rss>
