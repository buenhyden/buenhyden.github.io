<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Computer-System on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/computer-system/</link>
    <description>Recent content in Computer-System on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.8</generator>
    <language>en</language>
    <lastBuildDate>Sat, 22 Feb 2025 05:36:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/computer-system/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Concurrency and Parallelism</title>
      <link>https://buenhyden.github.io/posts/systems/operating-systems/process-management/concurrency-and-parallelism/__index/</link>
      <pubDate>Sat, 05 Oct 2024 02:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/operating-systems/process-management/concurrency-and-parallelism/__index/</guid>
      <description>동시성과 병렬성은 모두 여러 작업을 효율적으로 처리하기 위한 방법이지만, 그 접근 방식과 목적이 다르다.  동시성은 작업 관리와 응답성 향상에 중점을 두고, 병렬성은 전체적인 처리 속도 향상에 초점을 맞춘다.</description>
    </item>
    <item>
      <title>Computer Architecture</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-architecture/</link>
      <pubDate>Sun, 29 Sep 2024 21:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-architecture/</guid>
      <description>컴퓨터 시스템의 구조와 설계를 정의하는 기본적인 프레임워크.</description>
    </item>
    <item>
      <title>Operating System</title>
      <link>https://buenhyden.github.io/posts/systems/operating-systems/</link>
      <pubDate>Tue, 01 Oct 2024 17:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/operating-systems/</guid>
      <description>운영체제는 컴퓨터 하드웨어 자원을 효율적으로 관리하고, 사용자가 컴퓨터를 편리하고 효과적으로 사용할 수 있는 환경을 제공하는 시스템 소프트웨어</description>
    </item>
    <item>
      <title>Linux Basic Command</title>
      <link>https://buenhyden.github.io/posts/systems/operating-systems/popular-os/linux/linux-basic-command/</link>
      <pubDate>Tue, 01 Oct 2024 15:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/operating-systems/popular-os/linux/linux-basic-command/</guid>
      <description>Linux에서 자주 사용하는 명령어 모음</description>
    </item>
    <item>
      <title>Linux Permission</title>
      <link>https://buenhyden.github.io/posts/systems/operating-systems/popular-os/linux/linux-permission/</link>
      <pubDate>Tue, 01 Oct 2024 15:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/operating-systems/popular-os/linux/linux-permission/</guid>
      <description>Linux 권한 설정</description>
    </item>
    <item>
      <title>Cache Memory</title>
      <link>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/memory-systems/memory-hierarchy/cache-memory/</link>
      <pubDate>Sat, 22 Feb 2025 05:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/memory-systems/memory-hierarchy/cache-memory/</guid>
      <description>캐시 메모리(Cache Memory)는 컴퓨터 아키텍처에서 중요한 역할을 하는 CPU와 주 메모리(RAM) 사이에 위치한 소규모의 고속 메모리이다.</description>
    </item>
    <item>
      <title>메모리 보호와 안전 (Memory Protection and Safety)</title>
      <link>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/memory-systems/memory-protection-and-safety/</link>
      <pubDate>Sat, 05 Oct 2024 08:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/memory-systems/memory-protection-and-safety/</guid>
      <description>메모리 보호는 컴퓨터 시스템에서 프로세스가 허가되지 않은 메모리 영역에 접근하는 것을 방지하는 메커니즘이다.</description>
    </item>
    <item>
      <title>소켓(Socket)</title>
      <link>https://buenhyden.github.io/posts/systems/operating-systems/process-management/ipc/_socket/</link>
      <pubDate>Wed, 02 Oct 2024 16:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/operating-systems/process-management/ipc/_socket/</guid>
      <description>네트워크 상에서 두 프로그램이 데이터를 주고받을 수 있도록 하는 양방향 통신의 종착점이다.</description>
    </item>
    <item>
      <title>Message Queue</title>
      <link>https://buenhyden.github.io/posts/systems/operating-systems/process-management/ipc/_message-queue/</link>
      <pubDate>Wed, 02 Oct 2024 12:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/operating-systems/process-management/ipc/_message-queue/</guid>
      <description>프로세스 간 통신(IPC)의 메시지 큐(Message Queue)는 프로세스 간에 데이터를 교환하는 메커니즘이다.</description>
    </item>
    <item>
      <title>Shared Memory</title>
      <link>https://buenhyden.github.io/posts/systems/operating-systems/process-management/ipc/_shared-memory/</link>
      <pubDate>Wed, 02 Oct 2024 12:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/operating-systems/process-management/ipc/_shared-memory/</guid>
      <description>공유 메모리(Shared Memory)는 운영체제의 프로세스 간 통신(IPC) 기법 중 하나로, 여러 프로세스가 동시에 접근할 수 있는 메모리 영역이며, 커널에 의해 생성되고 관리되는 공통 메모리 공간이다.</description>
    </item>
    <item>
      <title>Pipe</title>
      <link>https://buenhyden.github.io/posts/systems/operating-systems/process-management/ipc/_pipe/</link>
      <pubDate>Wed, 02 Oct 2024 12:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/operating-systems/process-management/ipc/_pipe/</guid>
      <description>파이프(Pipe)는 프로세스 간 통신(IPC)의 한 방법으로, 단방향 데이터 흐름을 제공하는 가장 오래된 IPC(프로세스 간 통신) 메커니즘 중 하나이다. 파이프는 한쪽 끝에서 데이터를 쓰고 다른 쪽 끝에서 데이터를 읽을 수 있게 해준다.</description>
    </item>
    <item>
      <title>Kernel</title>
      <link>https://buenhyden.github.io/posts/systems/operating-systems/os-concepts/kernel/</link>
      <pubDate>Tue, 01 Oct 2024 16:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/operating-systems/os-concepts/kernel/</guid>
      <description>운영 체제의 커널은 컴퓨터 시스템의 핵심 구성 요소로, 하드웨어와 소프트웨어 간의 중개자 역할을 수행</description>
    </item>
    <item>
      <title>Memory Architecture</title>
      <link>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/memory-systems/</link>
      <pubDate>Mon, 30 Sep 2024 15:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/memory-systems/</guid>
      <description>컴퓨터 시스템의 메모리 아키텍처는 데이터를 효율적으로 저장하고 접근하기 위한 구조이다.</description>
    </item>
    <item>
      <title>캐싱 (Caching)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/</link>
      <pubDate>Mon, 30 Sep 2024 14:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/</guid>
      <description>캐싱 (Caching) 은 자주 사용되는 데이터를 빠른 저장소에 임시로 보관해 데이터 접근 속도를 높이고 시스템 부하를 줄이는 기술이다. 지역성 원리를 활용해 성능을 극대화하며, 웹 서버, 데이터베이스, 애플리케이션 등 다양한 계층과 아키텍처에서 핵심적인 성능 최적화 수단으로 활용된다.</description>
    </item>
    <item>
      <title>캐시 (Cache)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/cache/</link>
      <pubDate>Mon, 30 Sep 2024 13:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/cache/</guid>
      <description>캐시(Cache)는 컴퓨터 과학에서 데이터나 값을 미리 복사해 놓는 임시 저장소를 의미한다.</description>
    </item>
    <item>
      <title>Byte Addressable Memory vs Word Addressable Memory</title>
      <link>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/memory-systems/byte-addressable-memory-vs-word-addressable-memory/</link>
      <pubDate>Mon, 30 Sep 2024 11:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/memory-systems/byte-addressable-memory-vs-word-addressable-memory/</guid>
      <description>컴퓨터 메모리의 주소 지정 방식을 설명하는 개념</description>
    </item>
    <item>
      <title>Allocation Policy</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/cache-policy/allocation-policy/</link>
      <pubDate>Mon, 30 Sep 2024 10:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/cache-policy/allocation-policy/</guid>
      <description>Cache Allocation Policy(캐시 할당 정책)는 캐시 메모리 관리에서 중요한 역할을 하는 정책으로, 데이터를 캐시에 어떻게 할당할지 결정하는 방식을 의미한다.</description>
    </item>
    <item>
      <title>Prefetch Policy</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/cache-policy/prefetch-policy/</link>
      <pubDate>Mon, 30 Sep 2024 10:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/cache-policy/prefetch-policy/</guid>
      <description>**Prefetch Policy**는 데이터 요청을 미리 예측하여 필요한 데이터를 캐시에 미리 로드하는 전략</description>
    </item>
    <item>
      <title>Replacement Policy</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/cache-policy/replacement-policy/</link>
      <pubDate>Mon, 30 Sep 2024 10:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/cache-policy/replacement-policy/</guid>
      <description>Cache Replacement Policy(캐시 교체 정책)는 캐시 메모리에서 새로운 데이터를 저장하기 위해 기존의 데이터를 교체할 때 어떤 데이터를 제거할지를 결정하는 규칙이다.</description>
    </item>
    <item>
      <title>Placement Policy</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/cache-policy/placement-policy/</link>
      <pubDate>Mon, 30 Sep 2024 10:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/cache-policy/placement-policy/</guid>
      <description>Cache Placement Policy는 캐시 메모리에서 특정 메모리 블록이 캐시에 저장될 위치를 결정하는 규칙을 의미한다.</description>
    </item>
    <item>
      <title>메모리 접근 방법 (Memory Access Methods)</title>
      <link>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/memory-systems/access-methods/memory-access-methods/</link>
      <pubDate>Mon, 30 Sep 2024 08:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/memory-systems/access-methods/memory-access-methods/</guid>
      <description>메모리 접근 방식 (Memory Access Methods)은 컴퓨터 시스템에서 메모리에 접근하는 방식을 말한다.</description>
    </item>
    <item>
      <title>메모리 주소 지정 방식 (Memory Address Modes)</title>
      <link>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/memory-systems/address-modes/memory-address-modes/</link>
      <pubDate>Mon, 30 Sep 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/memory-systems/address-modes/memory-address-modes/</guid>
      <description>메모리 주소 지정 방식(Memory Address Modes)은 CPU가 메모리의 특정 위치에 어떻게 접근하는지를 나타내는 방법이다.</description>
    </item>
    <item>
      <title>메모리의 계층 구조 (Memory Hierarchy)</title>
      <link>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/memory-systems/memory-hierarchy/</link>
      <pubDate>Mon, 30 Sep 2024 03:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/memory-systems/memory-hierarchy/</guid>
      <description>컴퓨터 시스템에서 데이터 접근의 효율성을 극대화하고 전체 시스템 성능을 향상시키기 위해 설계된 구조</description>
    </item>
    <item>
      <title>Cache Coherence</title>
      <link>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/memory-systems/memory-hierarchy/cache-memory/coherence/cache-coherence/</link>
      <pubDate>Mon, 30 Sep 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/memory-systems/memory-hierarchy/cache-memory/coherence/cache-coherence/</guid>
      <description>Cache Coherence(캐시 일관성)는 컴퓨터 시스템에서 여러 프로세서가 각각의 로컬 캐시를 사용하면서 동일한 메모리 주소를 참조할 때, 데이터의 일관성을 유지하기 위한 메커니즘을 의미한다.</description>
    </item>
    <item>
      <title>Cache Invalidation</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/cache-invalidation/</link>
      <pubDate>Mon, 30 Sep 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/cache-invalidation/</guid>
      <description>Cache Invalidation(캐시 무효화)는 캐시에 저장된 데이터가 더 이상 최신 상태가 아니거나 유효하지 않을 때, 이를 무효화하여 캐시가 최신 데이터를 제공하도록 보장하는 과정이다.</description>
    </item>
    <item>
      <title>Cache Policy</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/cache-policy/</link>
      <pubDate>Mon, 30 Sep 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/cache-policy/</guid>
      <description>캐시 메모리의 효율성과 일관성을 유지하기 위해 데이터를 어떻게 관리하고 교체할지를 결정하는 규칙과 알고리즘을 말한다.</description>
    </item>
    <item>
      <title>Cache Strategy</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/cache-strategy/</link>
      <pubDate>Mon, 30 Sep 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/cache-strategy/</guid>
      <description>Cache Strategy(캐시 전략)는 캐시를 효과적으로 활용하여 시스템 성능을 최적화하고 데이터 일관성을 유지하기 위한 방법론이다.</description>
    </item>
    <item>
      <title>Caching Techniques</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/types/caching-techniques/</link>
      <pubDate>Mon, 30 Sep 2024 02:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/caching/types/caching-techniques/</guid>
      <description>캐싱 기술(Caching Techniques)은 데이터 접근 속도를 높이고 시스템 성능을 개선하기 위해 사용되는 다양한 방법들을 말한다.</description>
    </item>
    <item>
      <title>CPU</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-architecture/cpu/</link>
      <pubDate>Sun, 29 Sep 2024 16:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-architecture/cpu/</guid>
      <description>컴퓨터 시스템의 핵심 구성요소로, 프로그램의 명령어를 해석하고 실행하는 역할을 한다.</description>
    </item>
    <item>
      <title>Types of Computer Architecture</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-architecture/types/</link>
      <pubDate>Sun, 29 Sep 2024 05:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-architecture/types/</guid>
      <description>하버드 아키텍처(Harvard Architecture)와 폰 노이만 아키텍처(von Neumann Architecture)는 컴퓨터 시스템의 메모리 구조를 정의하는 두 가지 대표적인 설계 방식이다.</description>
    </item>
    <item>
      <title>파이프라이닝 (Pipelining)</title>
      <link>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/processor-architecture/microarchitecture/pipelining/</link>
      <pubDate>Sun, 29 Sep 2024 02:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/processor-architecture/microarchitecture/pipelining/</guid>
      <description>파이프라이닝은 여러 명령어의 실행 단계를 중첩시켜 전체적인 처리량을 향상시키는 기술로, 여러 단계를 동시에 처리함으로써 효율성을 높인다.</description>
    </item>
    <item>
      <title>Instruction Set Architecture</title>
      <link>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/processor-architecture/instruction-set-architecture/</link>
      <pubDate>Sun, 29 Sep 2024 02:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/processor-architecture/instruction-set-architecture/</guid>
      <description>ISA는 프로세서가 실행할 수 있는 명령어들의 집합을 정의하며, 프로그래머와 컴파일러 작성자에게 중요한 추상화 계층을 제공한다.</description>
    </item>
    <item>
      <title>System Bus</title>
      <link>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/bus-and-i-o-systems/buses/system-bus/</link>
      <pubDate>Sun, 29 Sep 2024 02:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems/computer-architecture-and-organization/bus-and-i-o-systems/buses/system-bus/</guid>
      <description>System Bus는 컴퓨터 아키텍처에서 주요 구성 요소들을 연결하는 중요한 통신 경로로, 컴퓨터의 혈관과 같은 역할을 한다.</description>
    </item>
    <item>
      <title>Harvard Architecture</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-architecture/types/harvard-architecture/</link>
      <pubDate>Sun, 29 Sep 2024 01:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-architecture/types/harvard-architecture/</guid>
      <description>하버드 아키텍처(Harvard Architecture)는 프로세서 설계에서 중요한 구조로, 명령어와 데이터를 위한 별도의 메모리 및 버스 시스템을 사용하는 컴퓨터 아키텍처이다.</description>
    </item>
    <item>
      <title>Von Neumann architecture</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-architecture/types/von-neumann-architecture/</link>
      <pubDate>Sun, 29 Sep 2024 01:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-architecture/types/von-neumann-architecture/</guid>
      <description>Von Neumann architecture는 1945년 John von Neumann이 제안한 컴퓨터 아키텍처로, 현대 대부분의 컴퓨터 시스템의 기본이 되는 설계이다.</description>
    </item>
  </channel>
</rss>
