<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Computer-System</title><link>https://buenhyden.github.io/tags/computer-system/</link><description>Recent content in Computer-System on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 16 Jan 2025 08:24:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/computer-system/index.xml" rel="self" type="application/rss+xml"/><item><title>Computer Architecture</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/</link><pubDate>Sat, 21 Sep 2024 21:24:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/</guid><description>
&lt;h2>Computer Architecture&lt;span class="hx-absolute -hx-mt-20" id="computer-architecture">&lt;/span>
&lt;a href="#computer-architecture" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>컴퓨터 시스템의 구조와 설계를 정의하는 기본적인 프레임워크.&lt;br>
이는 컴퓨터 하드웨어와 소프트웨어의 설계 원칙과 기능을 포괄하며, 작업을 효율적이고 효과적으로 실행할 수 있도록 한다.&lt;/p>
&lt;p>&lt;img src="Computer_architecture_block_diagram.png" alt="Computer Architecture" loading="lazy" />&lt;br>
_Source: &lt;a href="https://en.wikipedia.org/wiki/Computer_architecture" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Computer_architecture&lt;/a> _&lt;/p>
&lt;h3>주요 구성요소&lt;span class="hx-absolute -hx-mt-20" id="주요-구성요소">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ea%b5%ac%ec%84%b1%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>중앙 처리 장치 (CPU)&lt;br>
CPU는 컴퓨터의 &amp;lsquo;두뇌&amp;rsquo;로, 명령을 실행하는 역할을 한다.&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>; CPU 내부 동작 예시
MOV AX, 5 ; 레지스터에 값 저장
ADD AX, 3 ; 산술 연산 수행
MOV [BX], AX ; 메모리에 결과 저장&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>A. 제어 장치 (Control Unit):&lt;/p>
&lt;ul>
&lt;li>명령어 해석 및 실행 순서 제어&lt;/li>
&lt;li>각 하드웨어 구성요소 간의 데이터 흐름 조정&lt;/li>
&lt;li>파이프라이닝과 같은 고급 실행 기법 관리&lt;br>
B. 산술논리장치 (ALU):&lt;/li>
&lt;li>덧셈, 뺄셈 등의 산술 연산 수행&lt;/li>
&lt;li>AND, OR 등의 논리 연산 처리&lt;/li>
&lt;li>비교 연산 수행&lt;br>
C. 레지스터:&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>; 레지스터 사용 예시
MOV EAX, [memory] ; 데이터 레지스터
MOV EIP, label ; 프로그램 카운터
PUSH EBP ; 스택 포인터&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="2">
&lt;li>메모리&lt;br>
메모리는 데이터와 명령어를 저장하는 공간.&lt;br>
주요 유형은 다음과 같다:
&lt;ul>
&lt;li>주 메모리 (Primary Memory): RAM, 캐시 등&lt;/li>
&lt;li>보조 메모리 (Secondary Memory): 하드 드라이브, SSD 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>메모리는 계층적 구조로 이루어져 있으며, 각 층마다 특징이 다르다:&lt;/p>
&lt;p>A. 캐시 메모리:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 캐시 메모리 구조 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">CacheEntry&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">valid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">dirty&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">tag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">CACHE_LINE_SIZE&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>L1 캐시: CPU에 가장 가까운 고속 캐시&lt;/li>
&lt;li>L2 캐시: L1보다 크고 느린 중간 계층&lt;/li>
&lt;li>L3 캐시: 가장 큰 용량의 마지막 레벨 캐시&lt;/li>
&lt;/ul>
&lt;p>B. 주 메모리 (RAM):&lt;/p>
&lt;ul>
&lt;li>프로그램과 데이터의 실행 시 저장소&lt;/li>
&lt;li>휘발성 메모리로 전원이 꺼지면 데이터 소실&lt;/li>
&lt;/ul>
&lt;p>C. 가상 메모리:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 페이지 테이블 엔트리 구조
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">PageTableEntry&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">physicalPageNumber&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">present&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">readWrite&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">userSupervisor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">accessed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">dirty&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="3">
&lt;li>
&lt;p>입출력 장치&lt;br>
키보드, 모니터, 프린터, 네트워크 인터페이스 등이 포함된다.&lt;/p>
&lt;p>입출력 시스템은 다음과 같은 메커니즘으로 작동한다:&lt;/p>
&lt;p>A. 인터럽트 기반 I/O:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 인터럽트 핸들러 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">interruptHandler&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 인터럽트 플래그 저장
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">saveInterruptState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 인터럽트 처리
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">handleInterrupt&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 상태 복원
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">restoreInterruptState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>B. DMA (Direct Memory Access):&lt;/p>
&lt;ul>
&lt;li>CPU 개입 없이 직접 메모리 접근&lt;/li>
&lt;li>대용량 데이터 전송 시 효율적&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>버스 시스템&lt;br>
다양한 구성 요소를 연결하는 통신 경로로, 데이터 버스, 주소 버스, 제어 버스로 구성된다.
&lt;ul>
&lt;li>주소 버스: 메모리 주소 전달&lt;/li>
&lt;li>데이터 버스: 실제 데이터 전송&lt;/li>
&lt;li>제어 버스: 제어 신호 전달&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>컴퓨터 아키텍처의 주요 개념&lt;span class="hx-absolute -hx-mt-20" id="컴퓨터-아키텍처의-주요-개념">&lt;/span>
&lt;a href="#%ec%bb%b4%ed%93%a8%ed%84%b0-%ec%95%84%ed%82%a4%ed%85%8d%ec%b2%98%ec%9d%98-%ec%a3%bc%ec%9a%94-%ea%b0%9c%eb%85%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>명령어 세트 아키텍처 (Instruction Set Architecture, ISA)&lt;br>
프로세서가 실행할 수 있는 명령어 집합을 정의한다.&lt;br>
이는 소프트웨어와 하드웨어 사이의 인터페이스 역할을 한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>마이크로아키텍처&lt;br>
ISA가 하드웨어 수준에서 어떻게 구현되는지를 설명한다.&lt;br>
이는 프로세서의 내부 설계와 관련이 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>파이프라이닝&lt;br>
여러 명령어를 동시에 실행하여 CPU 효율성을 높이는 기술.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>캐시 메모리&lt;br>
CPU 근처에 위치한 고속 메모리로, 자주 접근하는 데이터를 저장한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>멀티프로세싱&lt;br>
여러 프로세서를 사용하여 작업을 동시에 수행하는 기술.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>주요 컴퓨터 아키텍처 유형&lt;span class="hx-absolute -hx-mt-20" id="주요-컴퓨터-아키텍처-유형">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ec%bb%b4%ed%93%a8%ed%84%b0-%ec%95%84%ed%82%a4%ed%85%8d%ec%b2%98-%ec%9c%a0%ed%98%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>폰 노이만 아키텍처&lt;/p>
&lt;ul>
&lt;li>명령어와 데이터가 같은 메모리 공간을 공유한다.&lt;/li>
&lt;li>단일 데이터 버스와 주소 버스를 사용한다.&lt;/li>
&lt;li>순차적 실행 모델을 따른다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>하버드 아키텍처&lt;/p>
&lt;ul>
&lt;li>명령어와 데이터를 위한 별도의 저장 장치와 경로를 가진다.&lt;/li>
&lt;li>동시에 명령어와 데이터에 접근할 수 있어 성능이 향상된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>수정된 하버드 아키텍처&lt;/p>
&lt;ul>
&lt;li>명령어와 데이터를 위한 별도의 캐시를 사용한다.&lt;/li>
&lt;li>주 메모리는 공유하여 설계를 단순화하고 비용을 절감한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>RISC 및 CISC 아키텍처&lt;/p>
&lt;ul>
&lt;li>RISC (Reduced Instruction Set Computing): 간단한 명령어 세트를 사용하여 빠른 실행을 목표로 한다.&lt;/li>
&lt;li>CISC (Complex Instruction Set Computing): 복잡한 명령어 세트를 사용하여 다양한 기능을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Operating System</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/</link><pubDate>Sun, 22 Sep 2024 17:13:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/</guid><description>
&lt;h2>Operating System&lt;span class="hx-absolute -hx-mt-20" id="operating-system">&lt;/span>
&lt;a href="#operating-system" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>컴퓨터 하드웨어와 소프트웨어 자원을 관리하고 다양한 서비스를 제공하는 소프트웨어.&lt;/p>
&lt;p>&lt;img src="conceptual_view.jpg" alt="Operating System" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.tutorialspoint.com/operating_system/os_overview.htm" target="_blank" rel="noopener">https://www.tutorialspoint.com/operating_system/os_overview.htm&lt;/a> _&lt;/p>
&lt;h3>특성&lt;span class="hx-absolute -hx-mt-20" id="특성">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>동시성: 여러 작업을 동시에 처리할 수 있음&lt;/li>
&lt;li>하드웨어 추상화: 하드웨어 세부사항을 숨기고 일관된 인터페이스 제공&lt;/li>
&lt;li>자원 할당: 시스템 자원을 효율적으로 관리하고 할당&lt;/li>
&lt;li>가상화: 가상 메모리와 가상 CPU 생성&lt;/li>
&lt;li>보안: 무단 접근 방지 및 데이터 보호&lt;/li>
&lt;li>결함 허용: 하드웨어 및 소프트웨어 오류 처리&lt;/li>
&lt;/ul>
&lt;h3>주요 기능&lt;span class="hx-absolute -hx-mt-20" id="주요-기능">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ea%b8%b0%eb%8a%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>프로세스 관리: 프로세스 생성, 실행, 종료 관리하며 프로세스 간 통신을 지원&lt;/li>
&lt;li>메모리 관리: 메모리 할당 및 해제를 관리하고 가상 메모리를 구현&lt;/li>
&lt;li>파일 시스템 관리: 파일 저장, 검색, 조직화&lt;/li>
&lt;li>장치 관리: 입출력 장치 제어 및 드라이버 관리&lt;/li>
&lt;li>사용자 인터페이스 제공: GUI 또는 CLI 제공&lt;/li>
&lt;li>보안 및 보호: 데이터 및 시스템 보호&lt;/li>
&lt;li>네트워킹: 네트워크 통신 지원&lt;/li>
&lt;/ul>
&lt;h3>운영체제의 목적&lt;span class="hx-absolute -hx-mt-20" id="운영체제의-목적">&lt;/span>
&lt;a href="#%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9c%ec%9d%98-%eb%aa%a9%ec%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>운영체제는 다음과 같은 주요 목적을 가지고 있다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>사용자 편의성 제공&lt;/strong>: 복잡한 하드웨어를 추상화하여 사용하기 쉽게 만든다.&lt;/li>
&lt;li>&lt;strong>자원 효율성 최대화&lt;/strong>: 시스템 자원을 효율적으로 관리하고 할당한다.&lt;/li>
&lt;li>&lt;strong>시스템 신뢰성 보장&lt;/strong>: 안정적인 시스템 운영을 보장한다.&lt;/li>
&lt;/ol>
&lt;h3>계층적 디자인&lt;span class="hx-absolute -hx-mt-20" id="계층적-디자인">&lt;/span>
&lt;a href="#%ea%b3%84%ec%b8%b5%ec%a0%81-%eb%94%94%ec%9e%90%ec%9d%b8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>운영체제는 다음과 같은 계층 구조로 설계되어 있다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>하드웨어 계층&lt;/strong>: CPU, 메모리, 디스크 등 물리적 자원&lt;/li>
&lt;li>&lt;strong>커널 계층&lt;/strong>: 운영체제의 핵심 기능을 수행&lt;/li>
&lt;li>&lt;strong>시스템 콜 계층&lt;/strong>: 사용자 프로그램과 커널 간의 인터페이스&lt;/li>
&lt;li>&lt;strong>사용자 계층&lt;/strong>: 응용 프로그램과 사용자 인터페이스&lt;/li>
&lt;/ol>
&lt;h3>구성 요소&lt;span class="hx-absolute -hx-mt-20" id="구성-요소">&lt;/span>
&lt;a href="#%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>운영체제의 주요 구성 요소는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>커널(Kernel)&lt;/strong>: 운영체제의 핵심 부분으로, 자원 관리와 하드웨어 제어를 담당.&lt;/li>
&lt;li>&lt;strong>쉘(Shell)&lt;/strong>: 사용자와 커널 사이의 인터페이스를 제공.&lt;/li>
&lt;li>&lt;strong>파일 시스템&lt;/strong>: 데이터의 저장과 관리를 담당.&lt;/li>
&lt;li>&lt;strong>장치 드라이버&lt;/strong>: 하드웨어 장치와의 통신을 담당.&lt;/li>
&lt;/ol>
&lt;h3>운영체제의 유형&lt;span class="hx-absolute -hx-mt-20" id="운영체제의-유형">&lt;/span>
&lt;a href="#%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9c%ec%9d%98-%ec%9c%a0%ed%98%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>배치 처리 시스템 (Batch Operating System)&lt;br>
초기 컴퓨터 시스템에서 사용된 이 방식은 유사한 작업들을 그룹으로 모아서 연속적으로 처리한다.&lt;br>
예를 들어, 급여 계산이나 재고 관리와 같은 대량의 반복적인 작업을 처리할 때 효율적이다.&lt;br>
사용자와의 상호작용은 최소화되어 있으며, 작업이 시작되면 중간에 개입할 수 없다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>멀티프로그래밍 시스템 (Multiprogramming Operating System)&lt;br>
CPU 사용률을 최대화하기 위해 여러 프로그램을 메모리에 동시에 유지하면서 실행하는 시스템.&lt;br>
한 프로그램이 I/O 작업을 수행할 때 다른 프로그램이 CPU를 사용할 수 있게 하여 자원 활용도를 높인다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>멀티프로세싱 시스템 (Multiprocessing Operating System)&lt;br>
두 개 이상의 프로세서를 사용하여 병렬 처리를 수행하는 시스템.&lt;br>
현대의 대부분의 컴퓨터가 이 방식을 사용하며, 하나의 프로세서가 실패하더라도 시스템이 계속 동작할 수 있는 장점이 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>멀티태스킹 시스템 (Multitasking Operating System)&lt;br>
여러 작업을 동시에 수행하는 것처럼 보이게 하는 시스템.&lt;br>
실제로는 CPU가 매우 빠른 속도로 작업들을 번갈아가며 실행한다.&lt;br>
현대의 Windows, macOS, Linux가 이에 해당한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>시분할 시스템 (Time-Sharing Operating System)&lt;br>
여러 사용자가 동시에 컴퓨터를 사용할 수 있게 하는 시스템.&lt;br>
CPU 시간을 작은 단위로 나누어 각 사용자에게 할당한다.&lt;br>
초기 메인프레임 컴퓨터에서 많이 사용되었다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>분산 운영체제 (Distributed Operating System)&lt;br>
여러 컴퓨터의 자원을 네트워크로 연결하여 하나의 시스템처럼 사용할 수 있게 하는 시스템.&lt;br>
클라우드 컴퓨팅 환경에서 많이 사용된다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>네트워크 운영체제 (Network Operating System)&lt;br>
네트워크로 연결된 다른 컴퓨터의 자원을 사용할 수 있게 해주는 시스템.&lt;br>
서버-클라이언트 모델을 기반으로 동작한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>실시간 운영체제 (Real-Time Operating System)&lt;br>
정해진 시간 내에 작업 완료를 보장하는 시스템.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4>운영체제 유형 비교&lt;span class="hx-absolute -hx-mt-20" id="운영체제-유형-비교">&lt;/span>
&lt;a href="#%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9c-%ec%9c%a0%ed%98%95-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>운영 체제 유형&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>주요 특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>사용 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>배치 운영 체제&lt;/td>
&lt;td>유사한 작업을 그룹화하여 일괄 처리하는 시스템&lt;/td>
&lt;td>• 작업 그룹화&lt;br>• 순차적 실행&lt;br>• 운영자 개입 최소화&lt;/td>
&lt;td>• 자원 효율성 높음&lt;br>• 대량 작업 처리에 적합&lt;/td>
&lt;td>• 상호작용 부족&lt;br>• 긴 대기 시간&lt;/td>
&lt;td>• 급여 시스템&lt;br>• 은행 거래 명세서 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>다중 프로그래밍 운영 체제&lt;/td>
&lt;td>여러 프로그램을 메모리에 동시에 로드하여 실행하는 시스템&lt;/td>
&lt;td>• 동시 프로그램 실행&lt;br>• CPU 활용도 최적화&lt;/td>
&lt;td>• 처리량 증가&lt;br>• 자원 활용도 향상&lt;/td>
&lt;td>• 복잡한 메모리 관리&lt;br>• 프로세스 간 간섭 가능성&lt;/td>
&lt;td>• 서버 환경&lt;br>• 대형 컴퓨터 시스템&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>다중 처리 운영 체제&lt;/td>
&lt;td>여러 프로세서를 사용하여 작업을 병렬 처리하는 시스템&lt;/td>
&lt;td>• 병렬 처리&lt;br>• 부하 분산&lt;/td>
&lt;td>• 성능 향상&lt;br>• 신뢰성 증가&lt;/td>
&lt;td>• 복잡한 설계&lt;br>• 높은 구현 비용&lt;/td>
&lt;td>• 슈퍼컴퓨터&lt;br>• 고성능 서버&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>다중 작업 운영 체제&lt;/td>
&lt;td>여러 작업을 동시에 실행하는 시스템&lt;/td>
&lt;td>• 작업 전환&lt;br>• 시분할&lt;/td>
&lt;td>• 사용자 반응성 향상&lt;br>• 자원 공유 효율화&lt;/td>
&lt;td>• 컨텍스트 전환 오버헤드&lt;br>• 복잡한 스케줄링&lt;/td>
&lt;td>• 데스크톱 컴퓨터&lt;br>• 워크스테이션&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>시분할 운영 체제&lt;/td>
&lt;td>CPU 시간을 여러 사용자나 작업에 분할하여 할당하는 시스템&lt;/td>
&lt;td>• 빠른 응답 시간&lt;br>• 대화형 컴퓨팅&lt;/td>
&lt;td>• 다중 사용자 지원&lt;br>• 자원 공유 효율성&lt;/td>
&lt;td>• 보안 위험&lt;br>• 성능 저하 가능성&lt;/td>
&lt;td>• 클라우드 컴퓨팅 환경&lt;br>• 대학 컴퓨터 실습실&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>분산 운영 체제&lt;/td>
&lt;td>네트워크로 연결된 여러 컴퓨터에서 작동하는 시스템&lt;/td>
&lt;td>• 자원 공유&lt;br>• 확장성&lt;/td>
&lt;td>• 높은 신뢰성&lt;br>• 성능 향상&lt;/td>
&lt;td>• 복잡한 구현&lt;br>• 네트워크 의존성&lt;/td>
&lt;td>• 클러스터 컴퓨팅&lt;br>• 그리드 컴퓨팅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>네트워크 운영 체제&lt;/td>
&lt;td>네트워크 자원 관리에 특화된 시스템&lt;/td>
&lt;td>• 네트워크 프로토콜 지원&lt;br>• 원격 접속 기능&lt;/td>
&lt;td>• 자원 공유 용이&lt;br>• 중앙 관리 효율성&lt;/td>
&lt;td>• 네트워크 의존성&lt;br>• 보안 취약점&lt;/td>
&lt;td>• 기업 네트워크&lt;br>• 파일 서버&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실시간 운영 체제&lt;/td>
&lt;td>시간 제약이 엄격한 작업을 처리하는 시스템&lt;/td>
&lt;td>• 빠른 응답 시간&lt;br>• 예측 가능한 동작&lt;/td>
&lt;td>• 높은 신뢰성&lt;br>• 정확한 타이밍&lt;/td>
&lt;td>• 제한된 기능&lt;br>• 복잡한 설계&lt;/td>
&lt;td>• 로봇 제어 시스템&lt;br>• 의료 기기&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3></description></item><item><title>Multithreading Vs Multiprocessing vs Multitasking</title><link>https://buenhyden.github.io/til/2025/01/multithreading-vs-multiprocessing-vs-multitasking/</link><pubDate>Tue, 14 Jan 2025 14:39:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/multithreading-vs-multiprocessing-vs-multitasking/</guid><description>
&lt;h2>Multithreading Vs Multiprocessing Vs Multitasking&lt;span class="hx-absolute -hx-mt-20" id="multithreading-vs-multiprocessing-vs-multitasking">&lt;/span>
&lt;a href="#multithreading-vs-multiprocessing-vs-multitasking" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Multithreading, Multiprocessing, Multitasking은 컴퓨터 시스템에서 동시성과 병렬성을 구현하는 세 가지 주요 개념이다.&lt;/p>
&lt;p>Multitasking은 단일 CPU에서 여러 작업(프로세스)을 동시에 실행하는 것처럼 보이게 하는 기술이다. 실제로는 CPU가 매우 빠르게 여러 작업 간을 전환하면서 실행한다.&lt;/p>
&lt;ul>
&lt;li>목적: CPU 사용률을 최대화하고 사용자에게 여러 프로그램이 동시에 실행되는 것 같은 환상을 제공한다.&lt;/li>
&lt;li>구현: 시분할(time-sharing) 방식을 사용하여 각 작업에 CPU 시간을 할당한다.&lt;/li>
&lt;/ul>
&lt;p>Multithreading은 하나의 프로세스 내에서 여러 실행 흐름(스레드)을 동시에 처리하는 기술이다.&lt;/p>
&lt;ul>
&lt;li>목적: 단일 프로세스의 성능을 향상시키고 자원을 효율적으로 사용한다.&lt;/li>
&lt;li>특징: 스레드들은 같은 프로세스 내의 메모리와 자원을 공유한다.&lt;/li>
&lt;/ul>
&lt;p>Multiprocessing은 여러 개의 프로세서(또는 코어)를 사용하여 여러 작업을 실제로 동시에 처리하는 기술이다.&lt;/p>
&lt;ul>
&lt;li>목적: 시스템의 전체적인 처리 능력을 향상시킨다.&lt;/li>
&lt;li>특징: 각 프로세서가 독립적으로 작업을 처리하며, 실제 병렬 처리가 가능하다.&lt;/li>
&lt;/ul>
&lt;p>이들의 차이점을 표로 정리하면 다음과 같습니다:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Multitasking&lt;/th>
&lt;th>Multiprocessing&lt;/th>
&lt;th>Multithreading&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>단일 CPU에서 여러 작업을 번갈아 실행&lt;/td>
&lt;td>여러 프로세서에서 여러 작업을 동시에 실행&lt;/td>
&lt;td>단일 프로세스 내에서 여러 실행 흐름을 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실행 단위&lt;/td>
&lt;td>태스크/프로세스&lt;/td>
&lt;td>프로세스&lt;/td>
&lt;td>스레드&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 공유&lt;/td>
&lt;td>각 작업이 독립적인 메모리 공간 사용&lt;/td>
&lt;td>각 프로세스가 독립적인 메모리 공간 사용&lt;/td>
&lt;td>스레드 간 메모리와 자원 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 사용&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>통신 비용&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>컨텍스트 스위칭 비용&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡도&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>안정성&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CPU 활용&lt;/td>
&lt;td>단일 CPU&lt;/td>
&lt;td>여러 CPU/코어&lt;/td>
&lt;td>단일 CPU 또는 여러 CPU&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>장점&lt;/td>
&lt;td>- 자원 격리&lt;br>- 안정성&lt;br>- 구현 용이&lt;/td>
&lt;td>- 진정한 병렬 처리&lt;br>- 높은 성능&lt;br>- 안정성&lt;/td>
&lt;td>- 자원 공유&lt;br>- 빠른 컨텍스트 스위칭&lt;br>- 효율적인 통신&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>단점&lt;/td>
&lt;td>- 높은 리소스 사용&lt;br>- 느린 통신&lt;/td>
&lt;td>- 높은 리소스 사용&lt;br>- 복잡한 구현&lt;br>- 비용 높음&lt;/td>
&lt;td>- 동기화 필요&lt;br>- 디버깅 어려움&lt;br>- 공유 자원 관리 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>적합한 사용 사례&lt;/td>
&lt;td>- 독립적인 작업 실행&lt;br>- 일반적인 데스크톱 환경&lt;/td>
&lt;td>- 대규모 데이터 처리&lt;br>- 고성능 컴퓨팅&lt;/td>
&lt;td>- GUI 애플리케이션&lt;br>- 웹 서버&lt;br>- 게임 엔진&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 기술들은 서로 배타적이지 않으며, 현대의 시스템에서는 이들을 조합하여 사용하는 것이 일반적이다.&lt;br>
예를 들어, 멀티코어 시스템에서 여러 프로세스(멀티프로세싱)가 실행되고, 각 프로세스 내에서는 여러 스레드(멀티스레딩)가 실행되며, 이 모든 것이 멀티태스킹 환경에서 동작하는 것이다.&lt;/p>
&lt;p>Multitasking은 사용자 인터페이스의 반응성을 높이는 데 유용하고, Multithreading은 단일 애플리케이션의 성능을 최적화하는 데 효과적이며, Multiprocessing은 대규모 병렬 처리가 필요한 작업에 적합하다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Process vs Thread</title><link>https://buenhyden.github.io/til/2024/10/process-vs-thread/</link><pubDate>Mon, 14 Oct 2024 08:30:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/10/process-vs-thread/</guid><description>
&lt;h2>Process Vs Thread&lt;span class="hx-absolute -hx-mt-20" id="process-vs-thread">&lt;/span>
&lt;a href="#process-vs-thread" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ol>
&lt;li>
&lt;p>프로세스:&lt;/p>
&lt;ul>
&lt;li>독립적인 실행 단위로, 자체 메모리 공간과 시스템 자원을 가진다.&lt;/li>
&lt;li>다른 프로세스와 완전히 격리되어 있어 안정성이 높다.&lt;/li>
&lt;li>생성과 전환에 많은 비용이 든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>스레드:&lt;/p>
&lt;ul>
&lt;li>프로세스 내부의 실행 단위로, 같은 프로세스의 다른 스레드와 메모리를 공유한다.&lt;/li>
&lt;li>프로세스보다 가볍고, 생성과 전환 비용이 적다.&lt;/li>
&lt;li>동시성을 제공하지만, 동기화 문제에 주의해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>
&lt;img src="../Screenshot-from-2024-02-26-11-48-56-768.png" alt="Single Threaded vs Multi-threaded Process" loading="lazy" />&lt;br>
&lt;em>Source: &lt;a href="https://www.geeksforgeeks.org/thread-in-operating-system/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/thread-in-operating-system/&lt;/a>&lt;/em>&lt;/p>
&lt;h3>Process Vs Thread&lt;span class="hx-absolute -hx-mt-20" id="process-vs-thread-1">&lt;/span>
&lt;a href="#process-vs-thread-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>실행 중인 프로그램의 인스턴스&lt;/td>
&lt;td>프로세스 내에서 실행되는 더 작은 실행 단위&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 공간&lt;/td>
&lt;td>독립적인 메모리 공간 (코드, 데이터, 스택, 힙)&lt;/td>
&lt;td>프로세스의 메모리 공간 공유 (코드, 데이터, 힙), 독립적인 스택&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구성 요소&lt;/td>
&lt;td>- 코드 영역&lt;br>- 데이터 영역&lt;br>- 스택 영역&lt;br>- 힙 영역&lt;/td>
&lt;td>- 스레드 ID&lt;br>- 프로그램 카운터&lt;br>- 레지스터 집합&lt;br>- 스택&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 공유&lt;/td>
&lt;td>다른 프로세스와 자원 공유 안 함&lt;/td>
&lt;td>같은 프로세스 내 스레드 간 자원 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>생성 비용&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>컨텍스트 스위칭&lt;/td>
&lt;td>비용이 큼&lt;/td>
&lt;td>비용이 적음 (같은 프로세스 내에서)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>안정성&lt;/td>
&lt;td>높음 (한 프로세스의 오류가 다른 프로세스에 영향 없음)&lt;/td>
&lt;td>상대적으로 낮음 (한 스레드의 오류가 전체 프로세스에 영향)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>통신&lt;/td>
&lt;td>프로세스 간 통신(IPC) 필요 (복잡하고 오버헤드 큼)&lt;/td>
&lt;td>쉽고 빠른 통신 (공유 메모리 사용)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>병렬 처리&lt;/td>
&lt;td>가능하지만 오버헤드 큼&lt;/td>
&lt;td>효율적인 병렬 처리 가능&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>메모리 구조 비교&lt;span class="hx-absolute -hx-mt-20" id="메모리-구조-비교">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b5%ac%ec%a1%b0-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>메모리 영역&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>코드 영역&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>데이터 영역&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>힙 영역&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>스택 영역&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>각 스레드마다 독립적&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>특성 상세 비교&lt;span class="hx-absolute -hx-mt-20" id="특성-상세-비교">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%84%b1-%ec%83%81%ec%84%b8-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>독립성&lt;/strong>&lt;/td>
&lt;td>완전히 독립적&lt;/td>
&lt;td>부분적으로 독립적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>자원 공유&lt;/strong>&lt;/td>
&lt;td>제한적 (IPC 필요)&lt;/td>
&lt;td>쉽게 공유 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>오류 영향&lt;/strong>&lt;/td>
&lt;td>다른 프로세스에 영향 없음&lt;/td>
&lt;td>같은 프로세스의 모든 스레드에 영향&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>동기화&lt;/strong>&lt;/td>
&lt;td>필요성 낮음&lt;br>- IPC 메커니즘 필요&lt;/td>
&lt;td>공유 자원에 대한 동기화 필요&lt;br>- 뮤텍스, 세마포어 등 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>생성 시간&lt;/strong>&lt;/td>
&lt;td>더 오래 걸림&lt;/td>
&lt;td>더 빠름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>종료 시간&lt;/strong>&lt;/td>
&lt;td>더 오래 걸림&lt;/td>
&lt;td>더 빠름&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>장단점 비교&lt;span class="hx-absolute -hx-mt-20" id="장단점-비교">&lt;/span>
&lt;a href="#%ec%9e%a5%eb%8b%a8%ec%a0%90-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>구분&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>장점&lt;/strong>&lt;/td>
&lt;td>- 높은 안정성&lt;br>- 다른 프로세스의 영향 받지 않음&lt;br>- 보안성이 높음&lt;/td>
&lt;td>- 생성/종료가 빠름&lt;br>- 자원 공유가 쉬움&lt;br>- 통신 비용이 적음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>단점&lt;/strong>&lt;/td>
&lt;td>- 많은 시스템 자원 필요&lt;br>- 프로세스 간 통신이 복잡&lt;br>- 컨텍스트 스위칭 비용이 큼&lt;/td>
&lt;td>- 동기화 문제 발생 가능&lt;br>- 디버깅이 어려움&lt;br>- 하나의 스레드 문제가 전체에 영향&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>사용 사례 비교&lt;span class="hx-absolute -hx-mt-20" id="사용-사례-비교">&lt;/span>
&lt;a href="#%ec%82%ac%ec%9a%a9-%ec%82%ac%eb%a1%80-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>용도&lt;/th>
&lt;th>Process 선호&lt;/th>
&lt;th>Thread 선호&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>웹 서버&lt;/strong>&lt;/td>
&lt;td>안정성이 중요한 경우&lt;/td>
&lt;td>높은 동시성이 필요한 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>GUI 앱&lt;/strong>&lt;/td>
&lt;td>독립적인 작업이 많은 경우&lt;/td>
&lt;td>반응성이 중요한 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>데이터 처리&lt;/strong>&lt;/td>
&lt;td>대용량 병렬 처리&lt;/td>
&lt;td>데이터 공유가 많은 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>시스템 서비스&lt;/strong>&lt;/td>
&lt;td>격리가 필요한 경우&lt;/td>
&lt;td>빈번한 통신이 필요한 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>활용 예&lt;/td>
&lt;td>- 독립적인 애플리케이션 &lt;br>- 웹 브라우저의 각 탭 &lt;br>- 다중 사용자 서버&lt;/td>
&lt;td>- 웹 서버 요청 처리 &lt;br>- 게임 엔진 (렌더링, 물리 연산) &lt;br>- 멀티미디어 애플리케이션&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>동기화 메커니즘 비교&lt;span class="hx-absolute -hx-mt-20" id="동기화-메커니즘-비교">&lt;/span>
&lt;a href="#%eb%8f%99%ea%b8%b0%ed%99%94-%eb%a9%94%ec%bb%a4%eb%8b%88%ec%a6%98-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>메커니즘&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>공유 메모리&lt;/strong>&lt;/td>
&lt;td>명시적으로 설정 필요&lt;/td>
&lt;td>기본적으로 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>뮤텍스&lt;/strong>&lt;/td>
&lt;td>프로세스 간 뮤텍스 필요&lt;/td>
&lt;td>프로세스 내 뮤텍스 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>세마포어&lt;/strong>&lt;/td>
&lt;td>시스템 세마포어 필요&lt;/td>
&lt;td>프로세스 내 세마포어 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메시지 전달&lt;/strong>&lt;/td>
&lt;td>IPC 메커니즘 사용&lt;/td>
&lt;td>직접 메모리 접근&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 차이점들을 이해하고 적절히 활용하면, 상황에 맞는 최적의 실행 단위를 선택할 수 있다.&lt;/p>
&lt;hr>
&lt;h3>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3></description></item><item><title>Linux Basic Command</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-basic-command/</link><pubDate>Tue, 15 Oct 2024 15:39:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-basic-command/</guid><description>
&lt;h2>Linux Command&lt;span class="hx-absolute -hx-mt-20" id="linux-command">&lt;/span>
&lt;a href="#linux-command" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Command&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>pwd&lt;/td>
&lt;td>현재 위치 출력&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>ls&lt;/td>
&lt;td>현재 디렉터리 내의 파일과 디렉터리 출력&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>cd&lt;/td>
&lt;td>디렉터리 이동&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>mkdir&lt;/td>
&lt;td>디렉터리 생성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>cp&lt;/td>
&lt;td>파일 또는 디렉터리 복사&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>mv&lt;/td>
&lt;td>파일 또는 디렉터리 이동&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>rm&lt;/td>
&lt;td>파일 또는 디렉터리 삭제&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>cat&lt;/td>
&lt;td>파일 내용을 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9&lt;/td>
&lt;td>touch&lt;/td>
&lt;td>빈 파일을 생성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10&lt;/td>
&lt;td>echo&lt;/td>
&lt;td>문자열 화면에 표시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>11&lt;/td>
&lt;td>ip addr/ifconfig&lt;/td>
&lt;td>IP 정보 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>12&lt;/td>
&lt;td>ss&lt;/td>
&lt;td>네트워크 상태 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>13&lt;/td>
&lt;td>nc&lt;/td>
&lt;td>서버의 포트 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>14&lt;/td>
&lt;td>which, whereis, locate&lt;/td>
&lt;td>명령어 위치 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>15&lt;/td>
&lt;td>tail&lt;/td>
&lt;td>파일의 마지막 부분 확인하기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16&lt;/td>
&lt;td>find&lt;/td>
&lt;td>파일이나 디렉터리 찾기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>17&lt;/td>
&lt;td>ps&lt;/td>
&lt;td>현재 실행 중인 프로세스 목록과 상태 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>18&lt;/td>
&lt;td>grep&lt;/td>
&lt;td>주어진 입력값에서 패턴에 맞는 값 출력&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>19&lt;/td>
&lt;td>kill&lt;/td>
&lt;td>프로세스 종료&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>20&lt;/td>
&lt;td>alias&lt;/td>
&lt;td>명령어 별칭 만들기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>21&lt;/td>
&lt;td>vi / vim&lt;/td>
&lt;td>편집기&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Pwd&lt;span class="hx-absolute -hx-mt-20" id="pwd">&lt;/span>
&lt;a href="#pwd" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>work directory의 약자로 작업 중인 디렉터리를 보여줌&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">pwd&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/Users/hyden&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Ls&lt;span class="hx-absolute -hx-mt-20" id="ls">&lt;/span>
&lt;a href="#ls" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>list segments의 약자로 현재 디렉터리의 파일과 디렉터리를 보여준다.&lt;/li>
&lt;li>보통 단독으로 잘 사용하지 않고 a,l 등의 옵션과 함께 사용&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ls -l&lt;/td>
&lt;td>파일들의 상세 정보를 보여줌&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ls -a&lt;/td>
&lt;td>숨김 파일 표시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ls -t&lt;/td>
&lt;td>최신 파일부터 표시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ls -rt&lt;/td>
&lt;td>오래된 파일부터 표시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ls -F&lt;/td>
&lt;td>파일을 표시할 때 파일의 타입을 나타내는 문자열을 표시(/ 디렉터리, * 실행파일, @심볼릭 링크)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ls -R&lt;/td>
&lt;td>하위 디렉터리의 내용까지 표시&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>보통은 위 옵셥들을 조합해 ls -al, ls -alt, ls -altF 등으로 사용&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ls -altF
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total &lt;span class="m">95340&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-x--- &lt;span class="m">28&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">29&lt;/span> 12:34 ./
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">326035&lt;/span> Oct &lt;span class="m">29&lt;/span> 12:34 .zsh_history
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwx------ &lt;span class="m">8&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">29&lt;/span> 12:34 .cache/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">33&lt;/span> Oct &lt;span class="m">27&lt;/span> 16:40 .lesshst
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">25052&lt;/span> Oct &lt;span class="m">27&lt;/span> 16:39 .bash_history
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">38160&lt;/span> Oct &lt;span class="m">27&lt;/span> 16:32 .viminfo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwx------ &lt;span class="m">6&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">27&lt;/span> 15:50 .config/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwx------ &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">27&lt;/span> 15:36 .ssh/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">287&lt;/span> Oct &lt;span class="m">27&lt;/span> 13:34 .wget-hsts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">117120&lt;/span> Oct &lt;span class="m">27&lt;/span> 12:31 .zcompdump-devserver-5.8.1.zwc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">50720&lt;/span> Oct &lt;span class="m">27&lt;/span> 12:31 .zcompdump-devserver-5.8.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">49203&lt;/span> Oct &lt;span class="m">27&lt;/span> 12:31 .zcompdump
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-x--- &lt;span class="m">6&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">26&lt;/span> 16:20 istio-1.18.2/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x &lt;span class="m">12&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">26&lt;/span> 14:30 .oh-my-zsh/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">4789&lt;/span> Oct &lt;span class="m">26&lt;/span> 14:30 .zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x &lt;span class="m">9&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">23&lt;/span> 13:01 .minikube/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">3919&lt;/span> Oct &lt;span class="m">20&lt;/span> 17:47 .bashrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">2313&lt;/span> Oct &lt;span class="m">5&lt;/span> 12:49 kubeconfig.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">19&lt;/span> 12:52 lang_test/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">18&lt;/span> 20:27 .ncloud/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x &lt;span class="m">5&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">11&lt;/span> 19:06 pybind11/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">8&lt;/span> 16:25 data/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">151&lt;/span> Sep &lt;span class="m">8&lt;/span> 15:59 .python_history
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">1452216&lt;/span> Sep &lt;span class="m">7&lt;/span> 18:59 libboost_regex.so.1.58.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">6&lt;/span> 14:35 test/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">4&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">6&lt;/span> 14:28 ffmpeg/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Aug &lt;span class="m">30&lt;/span> 16:00 dockerbuild/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x &lt;span class="m">8&lt;/span> root root &lt;span class="m">4096&lt;/span> Aug &lt;span class="m">30&lt;/span> 10:50 ../
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">435&lt;/span> Aug &lt;span class="m">3&lt;/span> 17:05 default-user-config.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-x--- &lt;span class="m">3&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Aug &lt;span class="m">3&lt;/span> 15:30 .kube/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">5&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Aug &lt;span class="m">3&lt;/span> 14:47 manage_kubernetes/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">84&lt;/span> Aug &lt;span class="m">2&lt;/span> 18:54 .bash_profile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">508&lt;/span> Aug &lt;span class="m">2&lt;/span> 18:53 ncp-iam-authenticator.sha256
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rwxrwxr-x &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">11665408&lt;/span> Aug &lt;span class="m">2&lt;/span> 18:53 ncp-iam-authenticator*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rwx------ &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">11345&lt;/span> Aug &lt;span class="m">2&lt;/span> 10:13 get_helm.sh*&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>심볼릭 링크(symbolic link): 원본 파일을 가리키도록 링크만 연결. 윈도우의 바로가기 링크와 같은 개념&lt;/li>
&lt;/ul>
&lt;h3>Cd&lt;span class="hx-absolute -hx-mt-20" id="cd">&lt;/span>
&lt;a href="#cd" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>change directory의 약자로 디렉터리 이동시 사용하는 명령어&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>cd ~&lt;/td>
&lt;td>홈 디렉터리로 이동&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cd..&lt;/td>
&lt;td>상위 디렉터리로 이동. cd../../ 같은 식으로 여러 단계를 한 번에 이동 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cd /dir&lt;/td>
&lt;td>절대 경로를 지정해 이동 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cd -&lt;/td>
&lt;td>바로 전의 디렉터리로 이동&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Mkdir&lt;span class="hx-absolute -hx-mt-20" id="mkdir">&lt;/span>
&lt;a href="#mkdir" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>make directory의 약자로 디렉터리를 만들 때 사용&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># &amp;lt;이름&amp;gt;의 디렉터리를 현재 디렉터리에 만든다&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mkdir &amp;lt;이름&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>절대 경로를 지정하여 만들 수도 있다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># &amp;lt;이름&amp;gt;의 디렉터리를 절대 경로의 디렉터리에 만든다&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mkdir /home/hyden/&amp;lt;이름&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>-p 옵션으로 하위 디렉터리까지 한 번에 생성할 수 있다&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mkdir -p &amp;lt;디렉터리명&amp;gt;/&amp;lt;하위 디렉터리명&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Cp&lt;span class="hx-absolute -hx-mt-20" id="cp">&lt;/span>
&lt;a href="#cp" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>copy의 약자로 파일 또는 디렉터리를 복사할 때 사용&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># source를 target으로 복사&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cp &lt;span class="nb">source&lt;/span> target
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># target 파일의 이미 있는 경우 덮어쓰기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cp -f &lt;span class="nb">source&lt;/span> target
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 디렉터리를 복사할 때 사용. 하위 디렉터리도 모두 복사하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cp -R sourceDir targetDir&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Mv&lt;span class="hx-absolute -hx-mt-20" id="mv">&lt;/span>
&lt;a href="#mv" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>move의 약자로 파일 또는 디렉터리의 위치를 옮길 때 사용. 혹은 이름을 변경할 때도 사용&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile 이름을 bfile로 변경&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mv afile bfile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile을 상위 디렉터리로 옮김&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mv afile ../
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile을 /opt 이하 디렉터리로 옮김&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mv afile /opt/&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Rm&lt;span class="hx-absolute -hx-mt-20" id="rm">&lt;/span>
&lt;a href="#rm" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>remove의 약자로 파일 또는 디렉터리를 삭제할 때 사용&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile을 삭제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ rm afile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 디렉터리 adir을 삭제. 삭제 시 확인을 함&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ rm -r adir
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 디렉터리 adir을 삭제. 삭제 시 확인 안 함&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ rm -rf adir
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># txt로 끝나는 모든 파일을 삭제할지 물어보면서 삭제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ rm -i *.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Cat&lt;span class="hx-absolute -hx-mt-20" id="cat">&lt;/span>
&lt;a href="#cat" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>catenate의 약자로 파일의 내용을 확인할 때 사용.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># test.txt 파일의 내용을 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cat test.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Touch&lt;span class="hx-absolute -hx-mt-20" id="touch">&lt;/span>
&lt;a href="#touch" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>touch는 빈 파일을 생성. 혹은 파일의 날짜와 시간을 수정할 때 사용한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile을 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ touch afile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile의 시간을 현재 시간으로 갱신&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ touch -c afile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># bfile의 날짜 정보를 afile의 정보와 동일하게 변경&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ touch -r afile bfile&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Echo&lt;span class="hx-absolute -hx-mt-20" id="echo">&lt;/span>
&lt;a href="#echo" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>echo는 어떤 문자열을 화면에 보여줄 때 사용. echo와 리다이렉션을 사용해 파일을 생성, 추가하는 작업을 많이 한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># helloworld 출력&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;helloworld&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 패스로 지정된 문자열을 출력&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$PATH&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 이스케이프 문자열을 해석&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> -e 문자열
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 개행을 표시할 수 있음&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;안녕하세요\n이렇게 하면\n새 줄이생겨요&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ls와 유사하게 현재 디렉터리의 파일과 폴더를 출력&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 리다이렉션 &amp;#39;&amp;gt;&amp;#39;을 사용해 hello.txt 파일 생성. 파일 내용에는 echo로 표시되는 내용이 들어감&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> hello redirection &amp;gt; hello.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 추가 연산자 &amp;gt;&amp;gt;를 사용해 기존 파일에 문자열 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> hello2 &amp;gt;&amp;gt; hello.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Ip addr/ifconfig&lt;span class="hx-absolute -hx-mt-20" id="ip-addrifconfig">&lt;/span>
&lt;a href="#ip-addrifconfig" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>접속한 리눅스의 IP 정보를 알아낼 때 사용.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ip addr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span class="m">65536&lt;/span> qdisc noqueue state UNKNOWN group default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">qlen &lt;span class="m">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet 127.0.0.1/8 scope host lo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class="m">1500&lt;/span> qdisc pfifo_fast state UP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">group default qlen &lt;span class="m">50000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">link/ether fa:16:3e:5d:0b:d7 brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet 10.201.1.10/16 brd 10.202.255.255 scope global eth0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">valid_lft forever preferred_lft forever&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>ip addr이 설치되어 있지 않은 경우에는 ifconfig를 사용.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ifconfig
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">eth0 Link encap:Ethernet HWaddr 06:4d:de:ae:a8:50
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet addr:172.31.27.212 Bcast:172.31.31.255 Mask:255.255.240.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet6 addr: fe80::44d:deff:feae:a850/64 Scope:Link
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">UP BROADCAST RUNNING MULTICAST MTU:9001 Metric:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RX packets:68903966 errors:0 dropped:0 overruns:0 frame:0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">TX packets:75295223 errors:0 dropped:0 overruns:0 carrier:0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">collisions:0 txqueuelen:1000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RX bytes:15691124260 &lt;span class="o">(&lt;/span>15.6 GB&lt;span class="o">)&lt;/span> TX bytes:42265387295 &lt;span class="o">(&lt;/span>42.2 GB&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lo Link encap:Local Loopback
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet addr:127.0.0.1 Mask:255.0.0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet6 addr: ::1/128 Scope:Host
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">UP LOOPBACK RUNNING MTU:65536 Metric:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RX packets:6623596 errors:0 dropped:0 overruns:0 frame:0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">TX packets:6623596 errors:0 dropped:0 overruns:0 carrier:0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">collisions:0 txqueuelen:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RX bytes:349206971 &lt;span class="o">(&lt;/span>349.2 MB&lt;span class="o">)&lt;/span> TX bytes:349206971 &lt;span class="o">(&lt;/span>349.2 MB&lt;span class="o">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Ss&lt;span class="hx-absolute -hx-mt-20" id="ss">&lt;/span>
&lt;a href="#ss" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>socket statistics의 약자로 네트워크 상태를 확인하는 데 사용.&lt;/li>
&lt;li>nestat과 동일. 옵션으로 a, t, u, l, p, n 등이 있다.&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ss -a&lt;/td>
&lt;td>모든 포트 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ss -t&lt;/td>
&lt;td>TCP 포트 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ss -u&lt;/td>
&lt;td>UDP 포트 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ss -l&lt;/td>
&lt;td>LISTEN 상태 포트 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ss -p&lt;/td>
&lt;td>프로세스 표시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ss -n&lt;/td>
&lt;td>호스트, 포트, 사용자명을 숫자로 표시&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>TCP 포트 중 LISTEN 상태인 포트의 번호를 알고 싶을 때 다음과 같이.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ss -tln
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LISTEN &lt;span class="m">0&lt;/span> &lt;span class="m">511&lt;/span> *:443 *:*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LISTEN &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span> 127.0.0.1:8006 *:*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LISTEN &lt;span class="m">0&lt;/span> &lt;span class="m">511&lt;/span> *:80 *:*&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Nc&lt;span class="hx-absolute -hx-mt-20" id="nc">&lt;/span>
&lt;a href="#nc" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>netcat의 약자로 예전에는 포트가 열렸는지 확인하는 데 사용.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 포트가 오픈됐는지 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ nc IP주소 포트
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 더 자세한 정보가 남음&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ nc -v IP주소 포트
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 현재 서버의 포트를 오픈(방화벽에 해당 포트 번호가 설정 함)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ nc -l 포트&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Which, Whereis, Locate&lt;span class="hx-absolute -hx-mt-20" id="which-whereis-locate">&lt;/span>
&lt;a href="#which-whereis-locate" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>which는 특정 명령어의 위치를 찾아줌.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ which git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/local/bin/git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># which -a : 검색 가능한 모든 경로에서 명령어를 찾아준다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ which -a git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/local/bin/git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/bin/git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># where : which -a와 같다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ where git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/local/bin/git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/bin/git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># whereis는 실행 파일, 소스, man 페이지의 파일을 찾아준다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ whereis ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh: /usr/bin/ssh /usr/share/man/man1/ssh.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># locate는 파일명을 패턴으로 빠르게 찾아준다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 아래 예제는 .java 파일을 찾아주는 명령.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ locate *.java&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Tail&lt;span class="hx-absolute -hx-mt-20" id="tail">&lt;/span>
&lt;a href="#tail" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>tail은 파일의 마지막 부분을 보여준다. 이와 반대로 head는 파일의 첫 부분을 보여준다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일의 마지막 라인부터 숫자만큼의 파일의 라인 수를 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tail -n &lt;span class="o">{&lt;/span>숫자&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>파일경로&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 숫자로 지정한 라인부터 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tail -n +&lt;span class="o">{&lt;/span>숫자&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>파일경로&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일의 마지막 라인부터 숫자로 지정한 바이트 수 만큼 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tail -c &lt;span class="o">{&lt;/span>숫자&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>파일경로&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Ctrl + C로 중단하기 전까지 지정한 파일의 마지막에 라인이 추가되면 계속 출력하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tail -f &lt;span class="o">{&lt;/span>파일경로&lt;span class="o">}&lt;/span> :
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일의 마지막 라인부터 지정한 숫자만큼을&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># {초}로 지정한 시간이 지날 때마다 리프레시해서 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tail -n &lt;span class="o">{&lt;/span>숫자&lt;span class="o">}&lt;/span> -s &lt;span class="o">{&lt;/span>초&lt;span class="o">}&lt;/span> -f &lt;span class="o">{&lt;/span>파일경로&lt;span class="o">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Find&lt;span class="hx-absolute -hx-mt-20" id="find">&lt;/span>
&lt;a href="#find" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>find는 명령어의 뜻 그대로 파일이나 디렉터리를 찾는 데 사용하는 명령어.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 확장자 명으로 찾기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -name &lt;span class="s1">&amp;#39;*.bak&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 디렉터리를 지정해 찾기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -path &lt;span class="s1">&amp;#39;**/검색 시 사용하는 디렉터리명/**.*.js&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일명을 패턴으로 찾기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -name &lt;span class="s1">&amp;#39;*패턴*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일명을 패턴으로 찾되 특정 경로는 제외하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -name &lt;span class="s1">&amp;#39;*.py&amp;#39;&lt;/span> -not -path &lt;span class="s1">&amp;#39;*/site-packates/*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일을 찾은 다음 명령어 실행하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -name &lt;span class="s1">&amp;#39;*.ext&amp;#39;&lt;/span> -exec wc -l &lt;span class="o">{}&lt;/span> &lt;span class="se">\;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 최근 7일간 수정된 파일을 찾고 삭제하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -daystart -mtime -7 -delete
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 0바이트인 파일을 찾고 삭제하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -type f -empty -delete&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Ps&lt;span class="hx-absolute -hx-mt-20" id="ps">&lt;/span>
&lt;a href="#ps" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>현재 실행 중인 프로세스 목록과 상태를 보여준다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 실행 중인 모든 프로세스를 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ps aux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 실행 중인 모든 프로세스를 전체 커맨드를 포함해 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ps auxww
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 특정 문자열과 매칭되는 프로세스 찾기(grep은 바로 다음에 나옵니다)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ps aus &lt;span class="p">|&lt;/span> grep &lt;span class="o">{&lt;/span>패턴&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 메모리 사용량에 따라 정렬하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ps --sort size&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>ps와 grep을 pipe로 사용하여 현재 실행 중인 프로세스 목록중 특정 명칭을 포함하는 프로세스를 찾는 식으로 사용하기도 한다.&lt;/li>
&lt;/ul>
&lt;h3>Grep&lt;span class="hx-absolute -hx-mt-20" id="grep">&lt;/span>
&lt;a href="#grep" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>grep은 입력에서 패턴에 매칭되는 내용을 찾는 명령어.&lt;/li>
&lt;li>grep이라는 이름은 ed의 명령어인 g/re/p(내용 전체를 정규식으로 찾은 다음 프린트하라: globally search for a regular expression and print matching lines)에서 왔음.&lt;/li>
&lt;li>보통 find, ps 등과 조합해 사용.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일에서 특정 패턴을 만족하는 부분 찾기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ grep &lt;span class="s2">&amp;#34;패턴&amp;#34;&lt;/span> 파일경로
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일명과 라인을 함께 표시하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ grep --with-filename --line-number &lt;span class="s2">&amp;#34;패턴&amp;#34;&lt;/span> 파일경로
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 매칭하지 않는 부분 표시하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ grep --invert-match &lt;span class="s2">&amp;#34;패턴&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># cat과 함께 사용하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cat 파일경로 &lt;span class="p">|&lt;/span> grep &lt;span class="s2">&amp;#34;패턴&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Kill&lt;span class="hx-absolute -hx-mt-20" id="kill">&lt;/span>
&lt;a href="#kill" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>프로세스를 죽이는 명령어&lt;/li>
&lt;li>프로세스를 죽인다고는 하지만 원리는 프로세스에 중지하라는 시그널을 보내는 것&lt;/li>
&lt;li>SIGKILL, SIGSTOP은 강제 종료이며 나머지는 정상적으로 종료.&lt;/li>
&lt;li>프로세스 아이디는 ps 명령어로 알아낼 수 있다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># kill에서 사용할 수 있는 시그널 표시하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">kill&lt;/span> -l
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 프로세스 죽이기 SIGTERM(terminate)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">kill&lt;/span> 프로세스ID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 백그라운드 잡 종료시키기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">kill&lt;/span> &lt;span class="o">{&lt;/span>잡ID&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 프로세스 강제 종료&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">kill&lt;/span> -9 &lt;span class="p">|&lt;/span> KILL 프로세스ID&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Alias&lt;span class="hx-absolute -hx-mt-20" id="alias">&lt;/span>
&lt;a href="#alias" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>alias를 사용하면 줄여서 사용할 수 있다&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 모든 alias 표시하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># alias 만들기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 예) alias ll=&amp;#34;ls -al&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> &lt;span class="nv">단어&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;명령&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># cd ../..을 cd …으로 줄여 쓰기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># cd ../../../은 cd ….으로 가능&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> ...&lt;span class="o">=&lt;/span>../..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> ....&lt;span class="o">=&lt;/span>../../..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> .....&lt;span class="o">=&lt;/span>../../../..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> ......&lt;span class="o">=&lt;/span>../../../../..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># alias 삭제하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">unalias&lt;/span> 단어&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Vi / Vim&lt;span class="hx-absolute -hx-mt-20" id="vi--vim">&lt;/span>
&lt;a href="#vi--vim" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>vi 혹은 vim은 대부분의 리눅스에 기본적으로 설치되어 있는 텍스트 에디터&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vi test.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;a href="https://yozm.wishket.com/magazine/detail/2103/" target="_blank" rel="noopener">백엔드 개발자라면 알아야 할 리눅스 필수 명령어 21개&lt;/a>&lt;/p></description></item><item><title>Linux Permission</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-permission/</link><pubDate>Tue, 15 Oct 2024 15:39:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-permission/</guid><description>
&lt;h2>Linux Permission&lt;span class="hx-absolute -hx-mt-20" id="linux-permission">&lt;/span>
&lt;a href="#linux-permission" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>
&lt;img src="../linux-permissions.jpg" alt="Linux Permissions" loading="lazy" />&lt;br>
&lt;em>source: &lt;a href="https://medium.com/@usamashafique00786/day-4-task-linux-permissions-and-access-control-lists-ef59cebf9324" target="_blank" rel="noopener">https://medium.com/@usamashafique00786/day-4-task-linux-permissions-and-access-control-lists-ef59cebf9324&lt;/a>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>File type: 파일 유형&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>normal file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>d&lt;/td>
&lt;td>directory&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>l&lt;/td>
&lt;td>link&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>p&lt;/td>
&lt;td>named pipe&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>s&lt;/td>
&lt;td>socket&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>c&lt;/td>
&lt;td>character device&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>b&lt;/td>
&lt;td>block device&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>
&lt;p>Permissions: 각 파일에 접근해서 읽거나 쓰거나 실행할 권리를 갖는 소유자 / 그룹 / 다른 사용자로 나눠서 관리&lt;br>
&lt;img src="../Files-permissions-and-ownership-basics-in-Linux.png" alt="Linux Permission" loading="lazy" />&lt;br>
&lt;em>source: &lt;a href="https://pamirwebhost.com/check-linux-file-permissions-with-ls/" target="_blank" rel="noopener">https://pamirwebhost.com/check-linux-file-permissions-with-ls/&lt;/a>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Permission은 3개로 나눠서 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>User&lt;/td>
&lt;td>파일을 만든 소유주&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Group&lt;/td>
&lt;td>파일을 만든 소유주가 속한 그룹&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Other&lt;/td>
&lt;td>기타 사용자&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Permission은 4가지에 대하여 구분&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">Permission&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">&lt;/td>
&lt;td>파일&lt;/td>
&lt;td>디렉토리&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">r&lt;/td>
&lt;td>파일에 대한 읽기 권한.&lt;/br>열기, 읽기 허용&lt;/td>
&lt;td>디렉토리 내의 파일을 나열할 수 있게 허용&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">w&lt;/td>
&lt;td>파일에 대한 쓰기 권한.&lt;/br>쓰기, 잘라내기 허용.&lt;/br>이름 변경이나 파일 삭제 허용되지 않음. 파일 삭제나 파일 이름 변경 디렉토리 속성에 의해 결정&lt;/td>
&lt;td>디렉토리 내의 파일들을 생성, 삭제, 이름 변경이 가능하도록 허용&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">x&lt;/td>
&lt;td>파일에 대한 실행 권한.&lt;/br>파일이 프로그램으로 처리되고 파일이 실행되도록 허용.&lt;/br>스크립트 언어에서 작성된 프로그램 파일들은 읽기 가능으로 설정 되어 있어야만 실행 가능&lt;/td>
&lt;td>디렉토리 내에서 탐색을 위해 이동할 수 있도록 허용(디렉토리에 들어올 수 있도록 허용)&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">-&lt;/td>
&lt;td>r,w,x에 대한 권한이 없음을 표시&lt;/td>
&lt;td>r,w,x에 대한 권한이 없음을 표시&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>
&lt;p>Permission&lt;br>
&lt;img src="../linux-file-permissions.jpg" alt="Linux File permissions" loading="lazy" />&lt;br>
&lt;em>source: &lt;a href="https://medium.com/@gumbershruti1119/day-6-file-permissions-and-access-control-lists-2126f994a5b8" target="_blank" rel="noopener">https://medium.com/@gumbershruti1119/day-6-file-permissions-and-access-control-lists-2126f994a5b8&lt;/a>&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>number of hard links&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ownership: 각 파일이나 디렉토리를 소유할 사용자나 그룹을 지정&lt;/p>
&lt;ul>
&lt;li>user(owner) name&lt;/li>
&lt;li>group name&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>size&lt;/p>
&lt;/li>
&lt;li>
&lt;p>date/time last modified&lt;/p>
&lt;/li>
&lt;li>
&lt;p>filename&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Example&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">drwxr-x--- &lt;span class="m">28&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">29&lt;/span> 12:34 ./
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">435&lt;/span> Aug &lt;span class="m">3&lt;/span> 17:05 default-user-config.yaml&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;a href="https://m.blog.naver.com/islove8587/221945262618" target="_blank" rel="noopener">islove8587&lt;/a>&lt;br>
&lt;a href="https://hack-cracker.tistory.com/32" target="_blank" rel="noopener">hack-cracker&lt;/a>&lt;br>
&lt;a href="https://twitter.com/alexxubyte/status/1532026886359879681" target="_blank" rel="noopener">alex xu&lt;/a>&lt;br>
&lt;a href="https://yozm.wishket.com/magazine/detail/1668/" target="_blank" rel="noopener">[여기보기] 파일과 디렉토리에는 정확한 소유권과 적당한 권한을 부여하라&lt;/a>&lt;/p></description></item><item><title>Paging vs Segmentation</title><link>https://buenhyden.github.io/til/2024/12/paging-vs-segmentation/</link><pubDate>Thu, 16 Jan 2025 08:24:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/12/paging-vs-segmentation/</guid><description>
&lt;h2>Paging Vs Segmentation&lt;span class="hx-absolute -hx-mt-20" id="paging-vs-segmentation">&lt;/span>
&lt;a href="#paging-vs-segmentation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Paging과 Segmentation은 운영체제의 메모리 관리 기법이다.&lt;/p>
&lt;p>Paging:&lt;/p>
&lt;ul>
&lt;li>프로세스의 주소 공간을 고정 크기의 페이지로 나누어 관리한다.&lt;/li>
&lt;li>물리적 메모리를 같은 크기의 프레임으로 나눈다.&lt;/li>
&lt;li>외부 단편화 문제를 해결하고 메모리 할당을 단순화한다.&lt;/li>
&lt;/ul>
&lt;p>Segmentation:&lt;/p>
&lt;ul>
&lt;li>프로세스를 논리적 단위인 세그먼트로 나누어 관리한다.&lt;/li>
&lt;li>각 세그먼트의 크기는 가변적이다.&lt;/li>
&lt;li>프로그램의 논리적 구조를 반영하여 메모리를 관리한다.&lt;/li>
&lt;/ul>
&lt;h3>Paging과 Segmentation 비교&lt;span class="hx-absolute -hx-mt-20" id="paging과-segmentation-비교">&lt;/span>
&lt;a href="#paging%ea%b3%bc-segmentation-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Paging&lt;/th>
&lt;th>Segmentation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>분할 단위&lt;/td>
&lt;td>고정 크기 페이지&lt;/td>
&lt;td>가변 크기 세그먼트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주소 변환&lt;/td>
&lt;td>페이지 테이블 사용&lt;/td>
&lt;td>세그먼트 테이블 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>외부 단편화&lt;/td>
&lt;td>없음&lt;/td>
&lt;td>발생 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>내부 단편화&lt;/td>
&lt;td>발생 가능&lt;/td>
&lt;td>거의 없음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 활용&lt;/td>
&lt;td>효율적&lt;/td>
&lt;td>유연함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡도&lt;/td>
&lt;td>상대적으로 간단&lt;/td>
&lt;td>복잡함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>공유와 보호&lt;/td>
&lt;td>페이지 단위&lt;/td>
&lt;td>세그먼트 단위&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용자 관점&lt;/td>
&lt;td>투명함&lt;/td>
&lt;td>프로그램 구조 반영&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>할당/해제 속도&lt;/td>
&lt;td>빠름&lt;/td>
&lt;td>상대적으로 느림&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테이블 크기&lt;/td>
&lt;td>큼&lt;/td>
&lt;td>작음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>프로세스 제어 블록(Process Control Block, PCB)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-control-block/</link><pubDate>Wed, 15 Jan 2025 06:59:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-control-block/</guid><description>
&lt;h2>프로세스 제어 블록(Process Control Block, PCB)&lt;span class="hx-absolute -hx-mt-20" id="프로세스-제어-블록process-control-block-pcb">&lt;/span>
&lt;a href="#%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4-%ec%a0%9c%ec%96%b4-%eb%b8%94%eb%a1%9dprocess-control-block-pcb" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>프로세스 제어 블록(Process Control Block, PCB)은 운영 체제에서 프로세스를 관리하기 위해 사용하는 핵심적인 데이터 구조이다.&lt;br>
PCB는 각 프로세스에 대한 중요한 정보를 저장하고 관리하며, 운영 체제가 프로세스를 효율적으로 제어하고 실행할 수 있게 한다.&lt;/p>
&lt;p>
&lt;img src="../process---------control---------block.webp" alt="Process Control Block" loading="lazy" />&lt;br>
_Sourece: &lt;a href="https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/&lt;/a> _&lt;/p>
&lt;h3>PCB의 주요 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="pcb의-주요-구성-요소">&lt;/span>
&lt;a href="#pcb%ec%9d%98-%ec%a3%bc%ec%9a%94-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>프로세스 식별자(Process ID, PID): 각 프로세스에 할당되는 고유한 식별 번호이다.&lt;/li>
&lt;li>프로세스 상태(Process State): 프로세스의 현재 상태를 나타낸다. 주요 상태로는 생성(new), 준비(ready), 실행(running), 대기(waiting), 종료(terminated) 등이 있다.&lt;/li>
&lt;li>프로그램 카운터(Program Counter): 다음에 실행할 명령어의 주소를 가리킨다.&lt;/li>
&lt;li>CPU 레지스터: 프로세스가 CPU를 사용할 때의 레지스터 정보를 저장한다.&lt;/li>
&lt;li>CPU 스케줄링 정보: 프로세스의 우선순위, CPU 사용 시간 등 스케줄링에 필요한 정보를 포함한다.&lt;/li>
&lt;li>메모리 관리 정보: 프로세스의 메모리 할당 정보, 페이지 테이블 등을 저장한다.&lt;/li>
&lt;li>입출력 상태 정보: 프로세스에 할당된 입출력 장치, 열린 파일 목록 등을 관리한다.&lt;/li>
&lt;li>계정 정보: CPU 사용 시간, 메모리 사용량 등 프로세스의 리소스 사용 정보를 추적한다.&lt;/li>
&lt;/ol>
&lt;h3>PCB의 역할과 중요성&lt;span class="hx-absolute -hx-mt-20" id="pcb의-역할과-중요성">&lt;/span>
&lt;a href="#pcb%ec%9d%98-%ec%97%ad%ed%95%a0%ea%b3%bc-%ec%a4%91%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>프로세스 관리: PCB는 운영 체제가 프로세스의 생명주기를 관리하는 데 필수적이다.&lt;/li>
&lt;li>컨텍스트 스위칭: PCB는 프로세스 간 전환 시 현재 상태를 저장하고 복원하는 데 사용된다.&lt;/li>
&lt;li>스케줄링: 운영 체제는 PCB의 정보를 바탕으로 프로세스 스케줄링 결정을 내린다.&lt;/li>
&lt;li>리소스 관리: PCB는 프로세스에 할당된 리소스를 추적하고 관리한다.&lt;/li>
&lt;li>동기화 및 통신: 프로세스 간 동기화와 통신에 필요한 정보를 저장한다.&lt;/li>
&lt;/ol>
&lt;h3>PCB의 생명주기&lt;span class="hx-absolute -hx-mt-20" id="pcb의-생명주기">&lt;/span>
&lt;a href="#pcb%ec%9d%98-%ec%83%9d%eb%aa%85%ec%a3%bc%ea%b8%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>프로세스 생성 시 PCB가 생성되고 초기화된다.&lt;/li>
&lt;li>프로세스 실행 중 PCB 정보가 지속적으로 업데이트된다.&lt;/li>
&lt;li>프로세스 종료 시 PCB가 제거된다.&lt;/li>
&lt;/ol>
&lt;h3>PCB의 구현 및 저장&lt;span class="hx-absolute -hx-mt-20" id="pcb의-구현-및-저장">&lt;/span>
&lt;a href="#pcb%ec%9d%98-%ea%b5%ac%ed%98%84-%eb%b0%8f-%ec%a0%80%ec%9e%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>PCB는 운영 체제 커널의 보호된 메모리 영역에 저장된다.&lt;br>
일부 운영 체제에서는 PCB를 커널 스택의 시작 부분에 위치시킨다.&lt;/p>
&lt;h3>PCB의 장단점&lt;span class="hx-absolute -hx-mt-20" id="pcb의-장단점">&lt;/span>
&lt;a href="#pcb%ec%9d%98-%ec%9e%a5%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>장점:&lt;/p>
&lt;ul>
&lt;li>효율적인 프로세스 관리와 스케줄링 가능&lt;/li>
&lt;li>멀티태스킹 지원&lt;/li>
&lt;li>리소스 사용 최적화&lt;/li>
&lt;/ul>
&lt;p>단점:&lt;/p>
&lt;ul>
&lt;li>PCB 관리에 따른 메모리 오버헤드 발생&lt;/li>
&lt;li>잦은 컨텍스트 스위칭 시 성능 저하 가능성&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Context Switching</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/context-switching/</link><pubDate>Wed, 15 Jan 2025 01:00:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/context-switching/</guid><description>
&lt;h2>Context Switching&lt;span class="hx-absolute -hx-mt-20" id="context-switching">&lt;/span>
&lt;a href="#context-switching" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Context Switching은 운영 체제에서 매우 중요한 개념으로, 여러 프로세스나 스레드가 단일 CPU 자원을 공유하여 효율적으로 실행될 수 있게 하는 메커니즘이다.&lt;/p>
&lt;p>Context Switching은 CPU가 현재 실행 중인 프로세스나 스레드의 상태를 저장하고, 다른 프로세스나 스레드의 상태를 불러와 실행을 재개하는 과정을 말한다.&lt;br>
이를 통해 여러 작업이 동시에 실행되는 것처럼 보이게 된다.&lt;/p>
&lt;p>
&lt;img src="../swapping1.png" alt="Context Switching" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/context-switch-in-operating-system/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/context-switch-in-operating-system/&lt;/a> _&lt;/p>
&lt;h3>Context Switching의 필요성&lt;span class="hx-absolute -hx-mt-20" id="context-switching의-필요성">&lt;/span>
&lt;a href="#context-switching%ec%9d%98-%ed%95%84%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>멀티태스킹: 여러 프로세스가 동시에 실행되는 것처럼 보이게 하여 시스템 효율성을 높인다.&lt;/li>
&lt;li>인터럽트 처리: 하드웨어 인터럽트나 시스템 호출 등에 신속하게 대응할 수 있다.&lt;/li>
&lt;li>자원 공유: 단일 CPU로 여러 프로세스를 실행할 수 있게 한다.&lt;/li>
&lt;/ol>
&lt;h3>Context Switching의 과정&lt;span class="hx-absolute -hx-mt-20" id="context-switching의-과정">&lt;/span>
&lt;a href="#context-switching%ec%9d%98-%ea%b3%bc%ec%a0%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>현재 실행 중인 프로세스의 상태 저장: CPU 레지스터, 프로그램 카운터 등의 정보를 PCB(Process Control Block)에 저장한다.&lt;/li>
&lt;li>새로운 프로세스 선택: 스케줄러가 다음에 실행할 프로세스를 선택한다.&lt;/li>
&lt;li>새 프로세스의 상태 복원: 선택된 프로세스의 PCB에서 상태 정보를 불러와 CPU 레지스터에 복원한다.&lt;/li>
&lt;li>실행 재개: 새 프로세스의 실행을 시작한다.&lt;/li>
&lt;/ol>
&lt;h3>Context Switching의 트리거&lt;span class="hx-absolute -hx-mt-20" id="context-switching의-트리거">&lt;/span>
&lt;a href="#context-switching%ec%9d%98-%ed%8a%b8%eb%a6%ac%ea%b1%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>인터럽트: 하드웨어나 소프트웨어에서 발생하는 인터럽트.&lt;/li>
&lt;li>시간 할당 종료: 프로세스에 할당된 CPU 시간이 끝났을 때.&lt;/li>
&lt;li>I/O 요청: 프로세스가 I/O 작업을 요청하여 대기 상태로 전환될 때.&lt;/li>
&lt;li>우선순위: 더 높은 우선순위의 프로세스가 실행 준비될 때.&lt;/li>
&lt;/ol>
&lt;h3>Context Switching의 구현 방식&lt;span class="hx-absolute -hx-mt-20" id="context-switching의-구현-방식">&lt;/span>
&lt;a href="#context-switching%ec%9d%98-%ea%b5%ac%ed%98%84-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>하드웨어 스위칭: 프로세서 코어에 내장된 태스크 상태 세그먼트(TSS)를 사용한다.&lt;/li>
&lt;li>소프트웨어 스위칭: 운영 체제의 커널 루틴과 데이터 구조를 사용하여 구현한다. 더 빠르고 일관성 있는 방식이다.&lt;/li>
&lt;/ol>
&lt;h3>Context Switching의 장단점&lt;span class="hx-absolute -hx-mt-20" id="context-switching의-장단점">&lt;/span>
&lt;a href="#context-switching%ec%9d%98-%ec%9e%a5%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>장점:&lt;/p>
&lt;ul>
&lt;li>멀티태스킹 지원: 여러 프로세스를 동시에 실행하는 것처럼 보이게 한다.&lt;/li>
&lt;li>자원 활용 최적화: CPU 사용을 최적화하여 시스템 효율성을 높인다.&lt;/li>
&lt;/ul>
&lt;p>단점:&lt;/p>
&lt;ul>
&lt;li>오버헤드: Context Switching 자체가 CPU 시간을 소모한다.&lt;/li>
&lt;li>캐시 미스: 프로세스 전환 시 캐시 데이터가 무효화될 수 있다.&lt;/li>
&lt;li>지연 시간: 빈번한 Context Switching은 전체적인 시스템 성능을 저하시킬 수 있다.&lt;/li>
&lt;/ul>
&lt;h3>Context Switching 최적화&lt;span class="hx-absolute -hx-mt-20" id="context-switching-최적화">&lt;/span>
&lt;a href="#context-switching-%ec%b5%9c%ec%a0%81%ed%99%94" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>프로세스 우선순위 조정: 중요한 프로세스에 더 높은 우선순위 부여.&lt;/li>
&lt;li>스레드 사용: 프로세스 내 스레드 사용으로 Context Switching 비용 감소.&lt;/li>
&lt;li>인터럽트 처리 최적화: 효율적인 인터럽트 처리로 불필요한 Context Switching 감소.&lt;/li>
&lt;li>캐시 최적화: 캐시 친화적인 데이터 구조와 알고리즘 사용.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Multithreading</title><link>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/multithreading/</link><pubDate>Tue, 14 Jan 2025 14:33:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/multithreading/</guid><description>
&lt;h2>멀티 쓰레딩 (Multithreading)&lt;span class="hx-absolute -hx-mt-20" id="멀티-쓰레딩-multithreading">&lt;/span>
&lt;a href="#%eb%a9%80%ed%8b%b0-%ec%93%b0%eb%a0%88%eb%94%a9-multithreading" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Multithreading은 운영 체제에서 프로그램이 여러 작업을 동시에 수행할 수 있게 해주는 기능이다. 즉, 하나의 프로세스 내에서 여러 스레드가 동시에 실행되는 것을 의미하며, 각 스레드는 프로세스의 자원을 공유하면서도 독립적인 실행 경로를 가진다.&lt;br>
이는 단일 프로세스 내에서 여러 실행 흐름(스레드)을 생성하고 관리하며, 현대 컴퓨터 시스템의 성능과 효율성을 크게 향상시킨다.&lt;/p>
&lt;p>
&lt;img src="../thread-1.jpg" alt="Single Threaded Process vs Multi-threaded Process" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/multithreading-in-operating-system/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/multithreading-in-operating-system/&lt;/a> _&lt;/p>
&lt;p>각 스레드는 자신만의 프로그램 카운터, 레지스터 집합, 스택을 가지고 있다.
하지만 같은 프로세스 내의 스레드들은 코드, 데이터 섹션, 파일과 같은 자원을 공유한다.
이는 프로세스보다 스레드의 생성과 컨텍스트 스위칭이 더 가벼운 이유가 된다.&lt;/p>
&lt;p>
&lt;img src="../Multithreading-normal-image00.webp" alt="a single thread and multithreading system" loading="lazy" />&lt;br>
_Source: &lt;a href="https://data-flair.training/blogs/multithreading-in-operating-system/" target="_blank" rel="noopener">https://data-flair.training/blogs/multithreading-in-operating-system/&lt;/a> _&lt;/p>
&lt;h3>Multithreading의 장점&lt;span class="hx-absolute -hx-mt-20" id="multithreading의-장점">&lt;/span>
&lt;a href="#multithreading%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>성능 향상&lt;/strong>: 여러 작업을 병렬로 실행함으로써 전체적인 프로그램 속도가 향상된다.&lt;/li>
&lt;li>&lt;strong>응답성 개선&lt;/strong>: 사용자 인터페이스 스레드와 처리 스레드를 분리하여 애플리케이션의 반응성을 높일 수 있다.&lt;/li>
&lt;li>&lt;strong>자원 활용 최적화&lt;/strong>: CPU와 메모리 등의 시스템 자원을 더 효율적으로 사용할 수 있다.&lt;/li>
&lt;li>&lt;strong>모듈화 설계&lt;/strong>: 복잡한 작업을 독립적인 스레드로 나누어 코드 구조를 단순화할 수 있다.&lt;/li>
&lt;li>&lt;strong>비동기 작업 처리&lt;/strong>: I/O 작업과 같은 대기 시간을 효율적으로 활용할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>Multithreading의 단점&lt;span class="hx-absolute -hx-mt-20" id="multithreading의-단점">&lt;/span>
&lt;a href="#multithreading%ec%9d%98-%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>복잡성 증가&lt;/strong>: 디버깅과 테스트가 더 어려워지며, 동기화 문제 등 새로운 유형의 버그가 발생할 수 있다.&lt;/li>
&lt;li>&lt;strong>동기화 오버헤드&lt;/strong>: 공유 자원에 대한 접근을 관리하기 위한 동기화 메커니즘이 필요하며, 이는 성능 저하를 초래할 수 있다.&lt;/li>
&lt;li>&lt;strong>경쟁 조건(Race Condition)&lt;/strong>: 여러 스레드가 동시에 공유 데이터에 접근할 때 예측할 수 없는 결과가 발생할 수 있다.&lt;/li>
&lt;li>&lt;strong>자원 소비 증가&lt;/strong>: 각 스레드는 시스템 자원을 소비하므로, 과도한 스레드 생성은 시스템 성능을 저하시킬 수 있다. [27].&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>파이프라이닝 (Pipelining)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/pipelining/</link><pubDate>Tue, 14 Jan 2025 02:20:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/pipelining/</guid><description>
&lt;h2>파이프라이닝 (Pipelining)&lt;span class="hx-absolute -hx-mt-20" id="파이프라이닝-pipelining">&lt;/span>
&lt;a href="#%ed%8c%8c%ec%9d%b4%ed%94%84%eb%9d%bc%ec%9d%b4%eb%8b%9d-pipelining" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>프로세서 아키텍처에서의 파이프라이닝(Pipelining)은 CPU의 성능을 향상시키는 중요한 기술이다.&lt;/p>
&lt;p>파이프라이닝은 여러 명령어의 실행 단계를 중첩시켜 전체적인 처리량을 향상시키는 기술로, 여러 단계를 동시에 처리함으로써 효율성을 높인다.&lt;/p>
&lt;p>현대 프로세서 설계에서 필수적인 기술이며, 대부분의 현대 CPU는 최소 2단계에서 최대 30-40단계의 파이프라인을 사용한다.&lt;br>
이 기술을 통해 프로세서의 전체적인 성능을 크게 향상시킬 수 있지만, 효과적인 구현을 위해서는 복잡한 설계 고려사항들을 신중히 관리해야 한다.&lt;/p>
&lt;p>
&lt;img src="../Untitled-Diagram-618.png" alt="Structure of a Pipeline Processor" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/pipelined-architecture-with-its-diagram/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/pipelined-architecture-with-its-diagram/&lt;/a> _&lt;/p>
&lt;h3>파이프라이닝의 작동 원리&lt;span class="hx-absolute -hx-mt-20" id="파이프라이닝의-작동-원리">&lt;/span>
&lt;a href="#%ed%8c%8c%ec%9d%b4%ed%94%84%eb%9d%bc%ec%9d%b4%eb%8b%9d%ec%9d%98-%ec%9e%91%eb%8f%99-%ec%9b%90%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>파이프라이닝은 명령어 실행 과정을 여러 단계로 나누어 처리한다.&lt;br>
일반적인 파이프라인 단계는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>명령어 인출 (Instruction Fetch, IF)&lt;/li>
&lt;li>명령어 해독 (Instruction Decode, ID)&lt;/li>
&lt;li>실행 (Execution, EX)&lt;/li>
&lt;li>메모리 접근 (Memory Access, MEM)&lt;/li>
&lt;li>레지스터 쓰기 (Write Back, WB)&lt;br>
각 단계는 동시에 다른 명령어를 처리할 수 있어, 전체적인 처리 속도가 향상된다.&lt;/li>
&lt;/ol>
&lt;h3>파이프라이닝의 장점&lt;span class="hx-absolute -hx-mt-20" id="파이프라이닝의-장점">&lt;/span>
&lt;a href="#%ed%8c%8c%ec%9d%b4%ed%94%84%eb%9d%bc%ec%9d%b4%eb%8b%9d%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>처리량 증가&lt;/strong>: 여러 명령어를 동시에 처리하여 전체적인 처리량이 증가한다.&lt;/li>
&lt;li>&lt;strong>CPU 활용도 향상&lt;/strong>: 파이프라이닝을 통해 CPU의 각 부분이 지속적으로 활용되어 유휴 시간이 줄어든다.&lt;/li>
&lt;li>&lt;strong>클록 주파수 향상&lt;/strong>: 파이프라이닝을 사용하면 CPU의 산술 논리 장치를 더 빠르게 설계할 수 있다.&lt;/li>
&lt;li>&lt;strong>반복적 작업에서의 성능 향상&lt;/strong>: 특히 반복적인 작업에서 파이프라이닝의 효과가 두드러진다.&lt;/li>
&lt;/ol>
&lt;h3>파이프라이닝의 단점&lt;span class="hx-absolute -hx-mt-20" id="파이프라이닝의-단점">&lt;/span>
&lt;a href="#%ed%8c%8c%ec%9d%b4%ed%94%84%eb%9d%bc%ec%9d%b4%eb%8b%9d%ec%9d%98-%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>설계 복잡성&lt;/strong>: 파이프라인 프로세서의 설계가 더 복잡하고 제조 비용이 높다.&lt;/li>
&lt;li>&lt;strong>파이프라인 해저드&lt;/strong>: 데이터 의존성, 제어 흐름 변경, 자원 충돌 등으로 인한 파이프라인 해저드가 발생할 수 있다.&lt;/li>
&lt;li>&lt;strong>분기 예측의 어려움&lt;/strong>: 분기 명령어로 인해 파이프라인이 비워져야 할 때 성능 저하가 발생할 수 있다.&lt;/li>
&lt;li>&lt;strong>레이턴시 증가&lt;/strong>: 파이프라인 단계 사이에 플립플롭을 삽입함으로써 개별 명령어의 레이턴시가 증가할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>파이프라이닝의 구현&lt;span class="hx-absolute -hx-mt-20" id="파이프라이닝의-구현">&lt;/span>
&lt;a href="#%ed%8c%8c%ec%9d%b4%ed%94%84%eb%9d%bc%ec%9d%b4%eb%8b%9d%ec%9d%98-%ea%b5%ac%ed%98%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>파이프라이닝을 구현할 때는 다음과 같은 요소들을 고려해야 한다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>파이프라인 깊이&lt;/strong>: 파이프라인 단계의 수를 결정한다. 더 많은 단계는 더 높은 처리량을 제공할 수 있지만, 해저드 관리가 더 복잡해진다.&lt;/li>
&lt;li>&lt;strong>해저드 관리&lt;/strong>: 데이터 의존성, 제어 흐름 변경, 자원 충돌 등의 해저드를 효과적으로 관리해야 한다.&lt;/li>
&lt;li>&lt;strong>분기 예측&lt;/strong>: 분기 명령어로 인한 성능 저하를 최소화하기 위해 효과적인 분기 예측 기법을 사용한다.&lt;/li>
&lt;li>&lt;strong>클록 주파수 최적화&lt;/strong>: 파이프라인 단계를 균형있게 설계하여 최적의 클록 주파수를 달성한다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>명령어 집합 구조 (Instruction Set Architecture)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/instruction-set-architecture/</link><pubDate>Tue, 14 Jan 2025 02:18:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/instruction-set-architecture/</guid><description>
&lt;h2>명령어 집합 구조 (Instruction Set Architecture)&lt;span class="hx-absolute -hx-mt-20" id="명령어-집합-구조-instruction-set-architecture">&lt;/span>
&lt;a href="#%eb%aa%85%eb%a0%b9%ec%96%b4-%ec%a7%91%ed%95%a9-%ea%b5%ac%ec%a1%b0-instruction-set-architecture" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>명령어 집합 구조(Instruction Set Architecture, ISA)는 프로세서 아키텍처의 핵심 요소로, 하드웨어와 소프트웨어 간의 인터페이스 역할을 한다.&lt;br>
ISA는 프로세서가 실행할 수 있는 명령어들의 집합을 정의하며, 프로그래머와 컴파일러 작성자에게 중요한 추상화 계층을 제공한다.&lt;/p>
&lt;p>
&lt;img src="../Untitled-Diagram1-1.png" alt="Instruction Set Architecture" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/microarchitecture-and-instruction-set-architecture/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/microarchitecture-and-instruction-set-architecture/&lt;/a> _&lt;/p>
&lt;h3>ISA의 주요 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="isa의-주요-구성-요소">&lt;/span>
&lt;a href="#isa%ec%9d%98-%ec%a3%bc%ec%9a%94-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>명령어 세트&lt;/p>
&lt;ul>
&lt;li>&lt;strong>연산 유형&lt;/strong>: 산술 연산, 논리 연산, 데이터 이동, 제어 흐름 등&lt;/li>
&lt;li>&lt;strong>명령어 형식&lt;/strong>: 각 명령어의 비트 구조와 인코딩 방식&lt;/li>
&lt;li>&lt;strong>주소 지정 모드&lt;/strong>: 직접 주소 지정, 간접 주소 지정, 즉시 주소 지정 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>레지스터&lt;/p>
&lt;ul>
&lt;li>&lt;strong>범용 레지스터&lt;/strong>: 데이터 처리와 임시 저장에 사용&lt;/li>
&lt;li>&lt;strong>특수 목적 레지스터&lt;/strong>: 프로그램 카운터(PC), 스택 포인터(SP) 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>메모리 모델&lt;span class="hx-absolute -hx-mt-20" id="메모리-모델">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%eb%aa%a8%eb%8d%b8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>주소 공간&lt;/strong>: 물리적/가상 메모리 주소 체계&lt;/li>
&lt;li>&lt;strong>정렬 요구사항&lt;/strong>: 데이터 접근 시 정렬 규칙&lt;/li>
&lt;/ul>
&lt;h3>데이터 타입&lt;span class="hx-absolute -hx-mt-20" id="데이터-타입">&lt;/span>
&lt;a href="#%eb%8d%b0%ec%9d%b4%ed%84%b0-%ed%83%80%ec%9e%85" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>기본 데이터 타입&lt;/strong>: 정수, 부동 소수점, 문자 등&lt;/li>
&lt;li>&lt;strong>벡터 데이터 타입&lt;/strong>: SIMD 연산을 위한 데이터 구조&lt;/li>
&lt;/ul>
&lt;h3>ISA의 분류&lt;span class="hx-absolute -hx-mt-20" id="isa의-분류">&lt;/span>
&lt;a href="#isa%ec%9d%98-%eb%b6%84%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>CISC (Complex Instruction Set Computing)&lt;/p>
&lt;ul>
&lt;li>&lt;strong>특징&lt;/strong>: 복잡하고 특화된 명령어들을 포함&lt;/li>
&lt;li>&lt;strong>장점&lt;/strong>: 강력한 단일 명령어로 복잡한 작업 수행 가능&lt;/li>
&lt;li>&lt;strong>예시&lt;/strong>: x86, x86-64&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>RISC (Reduced Instruction Set Computing)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;strong>특징&lt;/strong>: 단순하고 일반적인 명령어들로 구성&lt;/li>
&lt;li>&lt;strong>장점&lt;/strong>: 파이프라이닝과 병렬 처리에 유리
&lt;ul>
&lt;li>&lt;strong>예시&lt;/strong>: ARM, RISC-V, MIPS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3>ISA의 중요성&lt;span class="hx-absolute -hx-mt-20" id="isa의-중요성">&lt;/span>
&lt;a href="#isa%ec%9d%98-%ec%a4%91%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>소프트웨어 호환성&lt;/strong>: 동일한 ISA를 사용하는 프로세서들 간에 소프트웨어 호환성 보장&lt;/li>
&lt;li>&lt;strong>성능 최적화&lt;/strong>: ISA 설계는 프로세서의 성능과 효율성에 직접적인 영향을 미침&lt;/li>
&lt;li>&lt;strong>확장성&lt;/strong>: 새로운 기능이나 명령어를 추가하여 ISA를 확장할 수 있음&lt;/li>
&lt;li>&lt;strong>전력 효율성&lt;/strong>: 적절한 ISA 설계로 전력 소비를 최적화할 수 있음&lt;/li>
&lt;/ol>
&lt;h3>ISA 설계 시 고려사항&lt;span class="hx-absolute -hx-mt-20" id="isa-설계-시-고려사항">&lt;/span>
&lt;a href="#isa-%ec%84%a4%ea%b3%84-%ec%8b%9c-%ea%b3%a0%eb%a0%a4%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>명령어 길이&lt;/strong>: 고정 길이 vs. 가변 길이&lt;/li>
&lt;li>&lt;strong>엔디안(Endianness)&lt;/strong>: 데이터 저장 방식 (빅 엔디안 vs. 리틀 엔디안)&lt;/li>
&lt;li>&lt;strong>확장성&lt;/strong>: 향후 기능 추가를 위한 여유 공간 확보&lt;/li>
&lt;li>&lt;strong>메모리 일관성 모델&lt;/strong>: 멀티코어 시스템에서의 데이터 동기화 방식&lt;/li>
&lt;/ul>
&lt;h3>최신 ISA 동향&lt;span class="hx-absolute -hx-mt-20" id="최신-isa-동향">&lt;/span>
&lt;a href="#%ec%b5%9c%ec%8b%a0-isa-%eb%8f%99%ed%96%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>RISC-V&lt;/strong>: 오픈 소스 ISA로, 사용자 정의 확장이 가능한 모듈식 설계&lt;/li>
&lt;li>&lt;strong>벡터 연산 지원&lt;/strong>: AI와 머신 러닝 워크로드를 위한 벡터 연산 명령어 추가&lt;/li>
&lt;li>&lt;strong>보안 기능&lt;/strong>: 하드웨어 수준의 보안 기능 통합 (예: ARM의 TrustZone)&lt;/li>
&lt;li>&lt;strong>특화된 명령어&lt;/strong>: 특정 도메인(예: 암호화, 신호 처리)을 위한 전용 명령어 추가&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>System Bus</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/system-bus/</link><pubDate>Tue, 14 Jan 2025 02:17:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/system-bus/</guid><description>
&lt;h2>System Bus&lt;span class="hx-absolute -hx-mt-20" id="system-bus">&lt;/span>
&lt;a href="#system-bus" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>System Bus는 컴퓨터 아키텍처에서 주요 구성 요소들을 연결하는 중요한 통신 경로로, 컴퓨터의 혈관과 같은 역할을 한다. CPU, 메모리, 입출력 장치 등 컴퓨터의 주요 구성 요소들 사이에서 데이터와 신호를 전달한다.&lt;/p>
&lt;p>
&lt;img src="../system-bus.png" alt="System Bus (Internal and Intra)" loading="lazy" />&lt;br>
_Source: &lt;a href="https://witscad.com/course/computer-architecture/chapter/io-communication-io-controller" target="_blank" rel="noopener">https://witscad.com/course/computer-architecture/chapter/io-communication-io-controller&lt;/a> _&lt;/p>
&lt;h3>시스템 버스의 주요 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="시스템-버스의-주요-구성-요소">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%eb%b2%84%ec%8a%a4%ec%9d%98-%ec%a3%bc%ec%9a%94-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>시스템 버스는 세 가지 주요 버스로 구성된다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>데이터 버스 (Data Bus):&lt;/p>
&lt;ul>
&lt;li>양방향 버스로, 시스템 구성 요소들 사이에서 실제 데이터를 전송한다.&lt;/li>
&lt;li>예를 들어, CPU가 메모리에서 데이터를 읽거나 쓸 때 사용된다.&lt;/li>
&lt;li>버스의 폭(width)은 한 번에 전송할 수 있는 데이터의 양을 결정한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>// 예시: 32비트 데이터 버스의 데이터 전송
DataBus.transfer(0x1234ABCD); // 32비트 데이터를 한 번에 전송&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>주소 버스 (Address Bus):&lt;/p>
&lt;ul>
&lt;li>단방향 버스로, 메모리나 I/O 장치의 주소를 지정한다.&lt;/li>
&lt;li>CPU가 접근하고자 하는 메모리 위치를 지정할 때 사용된다.&lt;/li>
&lt;li>버스의 폭은 시스템이 접근할 수 있는 메모리의 최대 크기를 결정한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>// 예시: 메모리 주소 지정
AddressBus.select(0x1000); // 메모리 주소 0x1000 선택&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>제어 버스 (Control Bus):&lt;/p>
&lt;ul>
&lt;li>양방향 버스로, 시스템의 동작을 제어하는 신호를 전달한다.&lt;/li>
&lt;li>읽기/쓰기 신호, 인터럽트 신호, 클록 신호 등을 전달한다.&lt;/li>
&lt;li>데이터 전송의 타이밍과 방향을 조정한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>// 예시: 제어 신호 전송
ControlBus.sendSignal(READ); // 읽기 신호 전송
ControlBus.sendSignal(WRITE); // 쓰기 신호 전송&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>시스템 버스의 동작 방식&lt;span class="hx-absolute -hx-mt-20" id="시스템-버스의-동작-방식">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%eb%b2%84%ec%8a%a4%ec%9d%98-%eb%8f%99%ec%9e%91-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>시스템 버스의 기본적인 동작 과정은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>메모리 읽기 연산:
&lt;ol>
&lt;li>CPU가 주소 버스에 메모리 주소 전송&lt;/li>
&lt;li>제어 버스를 통해 읽기 신호 전송&lt;/li>
&lt;li>메모리가 데이터 버스를 통해 데이터 전송&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>메모리 쓰기 연산:
&lt;ol>
&lt;li>CPU가 주소 버스에 메모리 주소 전송&lt;/li>
&lt;li>데이터 버스에 쓸 데이터 전송&lt;/li>
&lt;li>제어 버스를 통해 쓰기 신호 전송&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3>기능&lt;span class="hx-absolute -hx-mt-20" id="기능">&lt;/span>
&lt;a href="#%ea%b8%b0%eb%8a%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>데이터 전송: 구성 요소 간 정보 교환&lt;/li>
&lt;li>주소 지정: 메모리 위치나 I/O 장치 식별&lt;/li>
&lt;li>제어 신호 전달: 읽기/쓰기 작업 등의 동작 제어&lt;/li>
&lt;/ul>
&lt;h3>시스템 버스의 특성&lt;span class="hx-absolute -hx-mt-20" id="시스템-버스의-특성">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%eb%b2%84%ec%8a%a4%ec%9d%98-%ed%8a%b9%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>동기화 (Synchronization):&lt;/p>
&lt;ul>
&lt;li>버스 클록이 모든 데이터 전송을 동기화한다.&lt;/li>
&lt;li>클록 속도는 버스의 성능을 결정하는 주요 요소이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>중재 (Arbitration):&lt;/p>
&lt;ul>
&lt;li>여러 장치가 동시에 버스를 사용하려 할 때의 충돌을 방지한다.&lt;/li>
&lt;li>우선순위에 따라 버스 사용 권한을 할당한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">BusArbiter&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">request_bus_access&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_bus_available&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">grant_access&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">device&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_to_queue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">device&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>멀티플렉싱 (Multiplexing):&lt;/p>
&lt;ul>
&lt;li>한정된 버스 라인을 효율적으로 사용하기 위해 시분할 방식을 사용한다.&lt;/li>
&lt;li>주소와 데이터를 같은 라인으로 전송할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>시스템 버스의 성능 향상 기법&lt;span class="hx-absolute -hx-mt-20" id="시스템-버스의-성능-향상-기법">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%eb%b2%84%ec%8a%a4%ec%9d%98-%ec%84%b1%eb%8a%a5-%ed%96%a5%ec%83%81-%ea%b8%b0%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>버스 폭 확장:&lt;/p>
&lt;ul>
&lt;li>더 넓은 데이터 버스를 사용하여 한 번에 더 많은 데이터를 전송한다.&lt;/li>
&lt;li>32비트에서 64비트, 128비트로 확장하는 방식이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>계층적 버스 구조:&lt;/p>
&lt;ul>
&lt;li>여러 종류의 버스를 계층적으로 구성하여 성능을 최적화한다.&lt;/li>
&lt;li>예: CPU 버스, 메모리 버스, I/O 버스 등의 분리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>버스 파이프라이닝:&lt;/p>
&lt;ul>
&lt;li>여러 버스 작업을 중첩하여 처리함으로써 성능을 향상시킨다.&lt;/li>
&lt;li>한 작업이 완료되기 전에 다음 작업을 시작할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>성능 영향&lt;span class="hx-absolute -hx-mt-20" id="성능-영향">&lt;/span>
&lt;a href="#%ec%84%b1%eb%8a%a5-%ec%98%81%ed%96%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>버스 속도: 데이터 전송 속도에 직접적 영향&lt;/li>
&lt;li>버스 폭: 한 번에 전송할 수 있는 데이터 양 결정&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Harvard Architecture</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/harvard-architecture/</link><pubDate>Tue, 14 Jan 2025 01:51:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/harvard-architecture/</guid><description>
&lt;h2>Harvard Architecture&lt;span class="hx-absolute -hx-mt-20" id="harvard-architecture">&lt;/span>
&lt;a href="#harvard-architecture" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Von Neumann architecture</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/von-neumann-architecture/</link><pubDate>Tue, 14 Jan 2025 01:51:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/von-neumann-architecture/</guid><description>
&lt;h2>Von Neumann Architecture&lt;span class="hx-absolute -hx-mt-20" id="von-neumann-architecture">&lt;/span>
&lt;a href="#von-neumann-architecture" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Von Neumann architecture는 1945년 John von Neumann이 제안한 컴퓨터 아키텍처로, 현대 대부분의 컴퓨터 시스템의 기본이 되는 설계이다.&lt;/p>
&lt;p>
&lt;img src="../Von_Neumann_architecture_basic_structure.png" alt="" loading="lazy" />&lt;/p>
&lt;h3>특징&lt;span class="hx-absolute -hx-mt-20" id="특징">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>순차적 실행:&lt;/p>
&lt;ul>
&lt;li>명령어를 메모리에서 한 번에 하나씩 순차적으로 가져와 실행&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>레지스터:&lt;/p>
&lt;ul>
&lt;li>프로그램 카운터 (PC): 다음 실행할 명령어의 주소 저장&lt;/li>
&lt;li>명령어 레지스터 (CIR): 현재 실행 중인 명령어 저장&lt;/li>
&lt;li>메모리 주소 레지스터 (MAR): 접근할 메모리 주소 저장&lt;/li>
&lt;li>메모리 데이터 레지스터 (MDR): 메모리와 주고받는 데이터 저장&lt;/li>
&lt;li>누산기 (Accumulator): 연산 결과 임시 저장&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>버스 시스템:&lt;/p>
&lt;ul>
&lt;li>데이터 버스: CPU와 메모리, 입출력 장치 간 데이터 전송&lt;/li>
&lt;li>주소 버스: 메모리 주소 전송&lt;/li>
&lt;li>제어 버스: 제어 신호 전송&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Fetch-Decode-Execute 사이클:&lt;/p>
&lt;ul>
&lt;li>명령어 인출 (Fetch)&lt;/li>
&lt;li>명령어 해독 (Decode)&lt;/li>
&lt;li>명령어 실행 (Execute)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>핵심 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="핵심-구성-요소">&lt;/span>
&lt;a href="#%ed%95%b5%ec%8b%ac-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>제어 장치 (Control Unit):&lt;/p>
&lt;ul>
&lt;li>프로그램의 명령어를 해석하고 실행을 제어한다.&lt;/li>
&lt;li>다른 모든 구성 요소들의 동작을 조정한다.&lt;/li>
&lt;li>마치 오케스트라의 지휘자와 같은 역할을 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>산술 논리 장치 (Arithmetic Logic Unit, ALU):&lt;/p>
&lt;ul>
&lt;li>실제 계산과 논리 연산을 수행한다.&lt;/li>
&lt;li>덧셈, 뺄셈, 곱셈, 나눗셈과 같은 수학적 연산을 처리한다.&lt;/li>
&lt;li>AND, OR, NOT과 같은 논리 연산도 수행한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>메모리 (Memory):&lt;/p>
&lt;ul>
&lt;li>프로그램과 데이터를 모두 저장한다.&lt;/li>
&lt;li>각 메모리 위치는 고유한 주소를 가진다.&lt;/li>
&lt;li>현대 컴퓨터에서는 RAM이 이 역할을 담당한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>입력 장치 (Input Devices):&lt;/p>
&lt;ul>
&lt;li>외부로부터 데이터를 받아들인다.&lt;/li>
&lt;li>키보드, 마우스, 스캐너 등이 해당된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>출력 장치 (Output Devices):&lt;/p>
&lt;ul>
&lt;li>처리된 결과를 외부로 전달한다.&lt;/li>
&lt;li>모니터, 프린터, 스피커 등이 해당된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>작동 방식&lt;span class="hx-absolute -hx-mt-20" id="작동-방식">&lt;/span>
&lt;a href="#%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>폰 노이만 아키텍처의 작동 과정을 단계별로 살펴보자:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>명령어 인출 (Fetch):&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>Program Counter → Memory Address
Memory → Instruction Register&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>프로그램 카운터가 가리키는 메모리 주소에서 다음 실행할 명령어를 가져온다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>명령어 해석 (Decode):&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>Control Unit analyzes instruction:
- Operation to perform
- Data locations
- Next instruction&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>제어 장치가 명령어를 해석하여 수행할 작업을 결정한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>실행 (Execute):&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>ALU performs operation:
IF addition:
result = operand1 &amp;#43; operand2
ELSE IF comparison:
result = compare(operand1, operand2)
…&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>ALU나 다른 하드웨어 구성 요소가 명령어를 실행한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>저장 (Store):&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>IF result needs storing:
Memory[destination] = result
Program Counter &amp;#43;= instruction_length&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>결과를 메모리에 저장하고 다음 명령어로 이동한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>폰 노이만 아키텍처의 특징과 장단점&lt;span class="hx-absolute -hx-mt-20" id="폰-노이만-아키텍처의-특징과-장단점">&lt;/span>
&lt;a href="#%ed%8f%b0-%eb%85%b8%ec%9d%b4%eb%a7%8c-%ec%95%84%ed%82%a4%ed%85%8d%ec%b2%98%ec%9d%98-%ed%8a%b9%ec%a7%95%ea%b3%bc-%ec%9e%a5%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>장점:&lt;/p>
&lt;ol>
&lt;li>단순성: 명확한 구조로 인해 설계와 구현이 비교적 단순하다.&lt;/li>
&lt;li>유연성: 프로그램을 쉽게 수정하고 업데이트할 수 있다.&lt;/li>
&lt;li>범용성: 다양한 종류의 프로그램을 실행할 수 있다.&lt;/li>
&lt;/ol>
&lt;p>단점:&lt;/p>
&lt;ol>
&lt;li>폰 노이만 병목 현상: 메모리와 처리 장치 사이의 단일 통로로 인한 성능 제한이 있다.&lt;/li>
&lt;li>순차적 실행: 명령어가 순차적으로 실행되어 병렬 처리가 제한된다.&lt;/li>
&lt;li>저장 프로그램 개념:
&lt;ul>
&lt;li>프로그램과 데이터를 동일한 메모리에 저장&lt;/li>
&lt;li>이로 인해 프로그램의 수정과 실행이 용이해짐&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>현대적 발전과 적용&lt;span class="hx-absolute -hx-mt-20" id="현대적-발전과-적용">&lt;/span>
&lt;a href="#%ed%98%84%eb%8c%80%ec%a0%81-%eb%b0%9c%ec%a0%84%ea%b3%bc-%ec%a0%81%ec%9a%a9" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>현대 컴퓨터는 기본적으로 폰 노이만 아키텍처를 따르지만, 여러 가지 개선 사항을 도입했다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>캐시 메모리:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>Memory Hierarchy:
L1 Cache (Fastest, Smallest)
L2 Cache
L3 Cache
RAM (Main Memory)
Hard Drive (Storage)&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>파이프라이닝:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>Instruction Pipeline:
Fetch → Decode → Execute → Store
Fetch → Decode → Execute → Store
Fetch → Decode → Execute → Store&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>병렬 처리:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>Multiple Cores:
Core 1: Instruction Stream 1
Core 2: Instruction Stream 2
Core N: Instruction Stream N&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Message Queue</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/message-queue/</link><pubDate>Mon, 13 Jan 2025 12:03:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/message-queue/</guid><description>
&lt;h2>메시지 큐(Message Queue)&lt;span class="hx-absolute -hx-mt-20" id="메시지-큐message-queue">&lt;/span>
&lt;a href="#%eb%a9%94%ec%8b%9c%ec%a7%80-%ed%81%90message-queue" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>프로세스 간 통신(IPC)의 메시지 큐(Message Queue)는 프로세스 간에 데이터를 교환하는 메커니즘이다.&lt;/p>
&lt;p>메시지 큐는 커널 내에 저장된 메시지의 연결 리스트로, 고유한 식별자로 구분된다.&lt;br>
이는 프로세스들이 비동기적으로 통신할 수 있게 해주는 IPC 메커니즘이다.&lt;/p>
&lt;p>메시지 크기 제한과 시스템 리소스 사용 등의 단점도 고려해야 한다.&lt;br>
적절한 사용 시나리오를 파악하고 효과적으로 활용하는 것이 중요하다.&lt;/p>
&lt;p>
&lt;img src="../ipc-using-message-queues2.png" alt="IPC - Message Queue" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.javatpoint.com/ipc-using-message-queues" target="_blank" rel="noopener">https://www.javatpoint.com/ipc-using-message-queues&lt;/a> _&lt;/p>
&lt;h3>메시지 큐의 특징&lt;span class="hx-absolute -hx-mt-20" id="메시지-큐의-특징">&lt;/span>
&lt;a href="#%eb%a9%94%ec%8b%9c%ec%a7%80-%ed%81%90%ec%9d%98-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>커널 관리&lt;/strong>: 메시지 큐는 커널에 의해 관리되어 안정성이 높고 동기화가 용이하다.&lt;/li>
&lt;li>&lt;strong>FIFO 순서&lt;/strong>: 메시지는 일반적으로 선입선출(FIFO) 순서로 처리된다.&lt;/li>
&lt;li>&lt;strong>비동기 통신&lt;/strong>: 송신 프로세스와 수신 프로세스가 동시에 활성화될 필요가 없다.&lt;/li>
&lt;li>&lt;strong>메시지 구조&lt;/strong>: 각 메시지는 타입 필드, 길이, 실제 데이터로 구성된다.&lt;/li>
&lt;li>&lt;strong>프로세스 분리&lt;/strong>: 메시지 큐를 사용하면 프로세스들이 서로 직접 연결되지 않아도 된다.&lt;/li>
&lt;/ol>
&lt;h3>메시지 큐의 주요 시스템 호출&lt;span class="hx-absolute -hx-mt-20" id="메시지-큐의-주요-시스템-호출">&lt;/span>
&lt;a href="#%eb%a9%94%ec%8b%9c%ec%a7%80-%ed%81%90%ec%9d%98-%ec%a3%bc%ec%9a%94-%ec%8b%9c%ec%8a%a4%ed%85%9c-%ed%98%b8%ec%b6%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>ftok()&lt;/strong>: 고유한 키를 생성한다.&lt;/li>
&lt;li>&lt;strong>msgget()&lt;/strong>: 메시지 큐를 생성하거나 기존 큐의 식별자를 반환한다.&lt;/li>
&lt;li>&lt;strong>msgsnd()&lt;/strong>: 메시지를 큐에 추가한다.&lt;/li>
&lt;li>&lt;strong>msgrcv()&lt;/strong>: 큐에서 메시지를 검색한다.&lt;/li>
&lt;li>&lt;strong>msgctl()&lt;/strong>: 큐에 대한 다양한 작업을 수행한다.&lt;/li>
&lt;/ol>
&lt;h3>메시지 큐 사용 방법&lt;span class="hx-absolute -hx-mt-20" id="메시지-큐-사용-방법">&lt;/span>
&lt;a href="#%eb%a9%94%ec%8b%9c%ec%a7%80-%ed%81%90-%ec%82%ac%ec%9a%a9-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>메시지 큐 생성:&lt;/p>
&lt;ol>
&lt;li>msgget() 시스템 콜을 사용하여 새로운 메시지 큐를 생성하거나 기존 큐에 접근한다.&lt;/li>
&lt;li>큐 생성 시 접근 권한을 지정할 수 있어 보안을 관리할 수 있다.&lt;/li>
&lt;/ol>
&lt;p>메시지 송신:&lt;/p>
&lt;ol>
&lt;li>msgsnd() 시스템 콜을 사용하여 메시지를 큐에 추가한다.&lt;/li>
&lt;li>메시지는 타입과 데이터로 구성된다.&lt;/li>
&lt;li>큐가 가득 찬 경우, 송신자는 대기하거나 에러를 반환받을 수 있다.&lt;/li>
&lt;/ol>
&lt;p>메시지 수신:&lt;/p>
&lt;ol>
&lt;li>msgrcv() 시스템 콜을 사용하여 메시지를 큐에서 가져온다.&lt;/li>
&lt;li>특정 타입의 메시지만 선택적으로 수신할 수 있다.&lt;/li>
&lt;li>큐가 비어있는 경우, 수신자는 대기하거나 에러를 반환받을 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>메시지 큐의 장단점&lt;span class="hx-absolute -hx-mt-20" id="메시지-큐의-장단점">&lt;/span>
&lt;a href="#%eb%a9%94%ec%8b%9c%ec%a7%80-%ed%81%90%ec%9d%98-%ec%9e%a5%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>커널 관리로 인한 높은 안정성&lt;/li>
&lt;li>비동기 통신 가능&lt;/li>
&lt;li>프로세스 간 느슨한 결합 제공&lt;/li>
&lt;/ul>
&lt;h4>단점&lt;span class="hx-absolute -hx-mt-20" id="단점">&lt;/span>
&lt;a href="#%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>메시지 크기 제한&lt;/li>
&lt;li>시스템 리소스 사용&lt;/li>
&lt;li>복잡한 에러 처리 필요&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Shared Memory</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/shared-memory/</link><pubDate>Mon, 13 Jan 2025 12:03:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/shared-memory/</guid><description>
&lt;h2>공유 메모리(Shared Memory)&lt;span class="hx-absolute -hx-mt-20" id="공유-메모리shared-memory">&lt;/span>
&lt;a href="#%ea%b3%b5%ec%9c%a0-%eb%a9%94%eb%aa%a8%eb%a6%acshared-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>공유 메모리(Shared Memory)는 운영체제의 프로세스 간 통신(IPC) 기법 중 하나로, 여러 프로세스가 동시에 접근할 수 있는 메모리 영역이며, 커널에 의해 생성되고 관리되는 공통 메모리 공간이다.&lt;br>
이는 여러 프로세스가 동일한 물리적 메모리 영역에 접근할 수 있게 해주며, IPC 메커니즘 중에서 가장 빠른 통신 방법을 제공한다.&lt;/p>
&lt;p>
&lt;img src="../share_memory.webp" alt="Shared Memory" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/ipc-shared-memory/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/ipc-shared-memory/&lt;/a> _&lt;/p>
&lt;h3>작동 원리&lt;span class="hx-absolute -hx-mt-20" id="작동-원리">&lt;/span>
&lt;a href="#%ec%9e%91%eb%8f%99-%ec%9b%90%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>프로세스가 커널에 공유 메모리 할당을 요청&lt;/li>
&lt;li>커널이 해당 프로세스에 메모리 공간을 할당&lt;/li>
&lt;li>이후 다른 프로세스들도 해당 메모리 영역에 접근 가능&lt;/li>
&lt;/ul>
&lt;h3>공유 메모리의 생성과 관리&lt;span class="hx-absolute -hx-mt-20" id="공유-메모리의-생성과-관리">&lt;/span>
&lt;a href="#%ea%b3%b5%ec%9c%a0-%eb%a9%94%eb%aa%a8%eb%a6%ac%ec%9d%98-%ec%83%9d%ec%84%b1%ea%b3%bc-%ea%b4%80%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>공유 메모리를 사용하는 일반적인 단계는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>공유 메모리 세그먼트 생성&lt;/li>
&lt;li>공유 메모리 접근 및 데이터 교환&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>높은 성능: 커널의 개입 없이 직접 메모리에 접근하여 빠른 IPC 가능&lt;/li>
&lt;li>효율성: 불필요한 데이터 복사를 방지하여 오버헤드 감소&lt;/li>
&lt;li>유연성: 프로그램 레벨에서 자유로운 통신 가능&lt;/li>
&lt;/ul>
&lt;h3>주의사항&lt;span class="hx-absolute -hx-mt-20" id="주의사항">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9d%98%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>동기화 이슈: 여러 프로세스가 동시에 접근할 수 있어 데이터 일관성 문제 발생 가능&lt;/li>
&lt;li>세마포어 등의 동기화 메커니즘과 함께 사용 필요&lt;/li>
&lt;/ul>
&lt;h4>공유 메모리의 동기화&lt;span class="hx-absolute -hx-mt-20" id="공유-메모리의-동기화">&lt;/span>
&lt;a href="#%ea%b3%b5%ec%9c%a0-%eb%a9%94%eb%aa%a8%eb%a6%ac%ec%9d%98-%eb%8f%99%ea%b8%b0%ed%99%94" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>여러 프로세스가 동시에 공유 메모리에 접근할 때 발생할 수 있는 문제를 해결하기 위해 동기화가 필요하다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SynchronizedSharedMemory&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_memory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create_shared_memory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">safe_write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;동기화된 쓰기 연산&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_to_shared_memory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_memory&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">safe_read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;동기화된 읽기 연산&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_from_shared_memory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_memory&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>실제 활용 예시&lt;span class="hx-absolute -hx-mt-20" id="실제-활용-예시">&lt;/span>
&lt;a href="#%ec%8b%a4%ec%a0%9c-%ed%99%9c%ec%9a%a9-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>데이터베이스 캐싱:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SharedCache&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 1MB 캐시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_memory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mmap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mmap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1"># 캐시 인덱스&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">cache_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;데이터를 캐시에 저장&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">position&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_memory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_memory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_cached_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;캐시된 데이터 조회&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">position&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_memory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">seek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_memory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">None&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>실시간 데이터 처리:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">RealTimeDataProcessor&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create_shared_memory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_position&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_position&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">process_data_stream&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;실시간 데이터 스트림 처리&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 데이터 쓰기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_to_buffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 다른 프로세스에서 데이터 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">processed_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_from_buffer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">processed_data&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>구현&lt;span class="hx-absolute -hx-mt-20" id="구현">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>공유 메모리 생성 및 접근을 위한 시스템 콜 사용 (예: shmget, shmat)&lt;/li>
&lt;li>프로세스 간 공유 메모리 식별자를 통한 접근&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Pipe</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/pipe/</link><pubDate>Mon, 13 Jan 2025 12:02:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/pipe/</guid><description>
&lt;h2>파이프(Pipe)&lt;span class="hx-absolute -hx-mt-20" id="파이프pipe">&lt;/span>
&lt;a href="#%ed%8c%8c%ec%9d%b4%ed%94%84pipe" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>파이프(Pipe)는 프로세스 간 통신(IPC)의 한 방법으로, 단방향 데이터 흐름을 제공하는 가장 오래된 IPC(프로세스 간 통신) 메커니즘 중 하나이다. 파이프는 한쪽 끝에서 데이터를 쓰고 다른 쪽 끝에서 데이터를 읽을 수 있게 해준다.&lt;/p>
&lt;h3>종류&lt;span class="hx-absolute -hx-mt-20" id="종류">&lt;/span>
&lt;a href="#%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>익명 파이프 (Anonymous Pipe): 부모-자식 프로세스 간 통신에 사용&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">create_anonymous_pipe&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;익명 파이프 생성 예제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">read_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">write_fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pipe&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 프로세스 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 부모 프로세스&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">read_fd&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 읽기 끝 닫기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">write_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Hello from parent&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">write_fd&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 자식 프로세스&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">write_fd&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 쓰기 끝 닫기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">read_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Child received: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">read_fd&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>이름 있는 파이프 (Named Pipe 또는 FIFO): 관련 없는 프로세스 간 통신에 사용&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">create_named_pipe&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;이름 있는 파이프 생성 예제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pipe_path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;/tmp/my_pipe&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 파이프 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipe_path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mkfifo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipe_path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 파이프 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipe_path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;w&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">pipe_write&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pipe_write&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello through named pipe&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>파이프의 구현과 사용&lt;span class="hx-absolute -hx-mt-20" id="파이프의-구현과-사용">&lt;/span>
&lt;a href="#%ed%8c%8c%ec%9d%b4%ed%94%84%ec%9d%98-%ea%b5%ac%ed%98%84%ea%b3%bc-%ec%82%ac%ec%9a%a9" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>기본적인 파이프 통신 구현:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PipeCommunication&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pipe&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">parent_process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;부모 프로세스의 파이프 사용&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_fd&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 읽기 끝 닫기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_fd&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">child_process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;자식 프로세스의 파이프 사용&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_fd&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 쓰기 끝 닫기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">message&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_fd&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>특징&lt;span class="hx-absolute -hx-mt-20" id="특징">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>단방향 통신(Half-Duplex)&lt;/li>
&lt;li>양방향 통신을 위해서는 두 개의 파이프가 필요&lt;/li>
&lt;li>커널 영역에서 관리되는 버퍼를 통해 데이터 전송&lt;/li>
&lt;/ul>
&lt;h3>구현&lt;span class="hx-absolute -hx-mt-20" id="구현">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>Unix/Linux에서 pipe() 시스템 콜을 사용하여 생성&lt;/li>
&lt;li>파일 디스크립터를 통해 접근 (읽기용, 쓰기용)&lt;/li>
&lt;/ul>
&lt;h3>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>간단한 구현&lt;/li>
&lt;li>동기화 문제 해결 (커널에서 관리)&lt;/li>
&lt;/ul>
&lt;h3>제한사항&lt;span class="hx-absolute -hx-mt-20" id="제한사항">&lt;/span>
&lt;a href="#%ec%a0%9c%ed%95%9c%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>익명 파이프는 관련 프로세스 간에만 사용 가능&lt;/li>
&lt;li>네트워크를 통한 통신 불가 (동일 시스템 내에서만 사용)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>소켓(Socket)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/socket/</link><pubDate>Sun, 05 Jan 2025 16:30:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/socket/</guid><description>
&lt;h2>소켓(Socket)&lt;span class="hx-absolute -hx-mt-20" id="소켓socket">&lt;/span>
&lt;a href="#%ec%86%8c%ec%bc%93socket" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>소켓은 네트워크 상에서 수행되는 두 프로그램 간의 양방향 통신 링크의 한쪽 끝 단을 의미한다.&lt;br>
소켓은 프로세스가 네트워크를 통해 데이터를 송수신하기 위한 실제적인 창구 역할을 한다.&lt;br>
운영체제는 소켓을 통해 네트워크 통신을 위한 인터페이스를 제공한다.&lt;/p>
&lt;h3>소켓의 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="소켓의-구성-요소">&lt;/span>
&lt;a href="#%ec%86%8c%ec%bc%93%ec%9d%98-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>소켓은 다음 세 가지 요소로 구성된다:&lt;/p>
&lt;ol>
&lt;li>프로토콜: 데이터 전송을 위한 표준 집합 규칙 (예: TCP/IP, UDP/IP)&lt;/li>
&lt;li>IP 주소: 서버 또는 클라이언트의 주소&lt;/li>
&lt;li>포트 번호: 통신을 사용하는 애플리케이션을 식별하는 번호&lt;/li>
&lt;/ol>
&lt;h3>소켓의 특징&lt;span class="hx-absolute -hx-mt-20" id="소켓의-특징">&lt;/span>
&lt;a href="#%ec%86%8c%ec%bc%93%ec%9d%98-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>프로토콜, IP 주소, 포트 번호로 정의된다.&lt;/li>
&lt;li>서버 소켓과 클라이언트 소켓으로 구분된다.&lt;/li>
&lt;li>실시간 데이터 전송에 적합하다.&lt;/li>
&lt;/ul>
&lt;h3>소켓 통신의 장점&lt;span class="hx-absolute -hx-mt-20" id="소켓-통신의-장점">&lt;/span>
&lt;a href="#%ec%86%8c%ec%bc%93-%ed%86%b5%ec%8b%a0%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>실시간 양방향 통신이 가능하다.&lt;/li>
&lt;li>서버와 클라이언트 간 지속적인 연결을 유지할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3>소켓 통신의 단점&lt;span class="hx-absolute -hx-mt-20" id="소켓-통신의-단점">&lt;/span>
&lt;a href="#%ec%86%8c%ec%bc%93-%ed%86%b5%ec%8b%a0%ec%9d%98-%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>HTTP 통신에 비해 구현이 복잡할 수 있다.&lt;/li>
&lt;li>지속적인 연결 유지로 인한 리소스 소비가 있을 수 있다.&lt;/li>
&lt;/ul>
&lt;h3>소켓의 종류&lt;span class="hx-absolute -hx-mt-20" id="소켓의-종류">&lt;/span>
&lt;a href="#%ec%86%8c%ec%bc%93%ec%9d%98-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>소켓은 크게 두 가지 유형으로 나눌 수 있다:&lt;/p>
&lt;ol>
&lt;li>스트림 소켓(SOCK_STREAM)
&lt;ul>
&lt;li>TCP를 사용하는 연결 지향형 소켓&lt;/li>
&lt;li>연결 지향적이며 양방향으로 바이트 스트림을 전송한다.&lt;/li>
&lt;li>오류 수정, 전송 처리, 흐름 제어를 보장한다.&lt;/li>
&lt;li>데이터의 경계가 없는 바이트 스트림 서비스를 제공한다.&lt;/li>
&lt;li>웹 서버, 데이터베이스 연결 등에 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터그램 소켓(SOCK_DGRAM)
&lt;ul>
&lt;li>UDP를 사용하는 비연결형 소켓&lt;/li>
&lt;li>비연결형 소켓이다.&lt;/li>
&lt;li>데이터의 크기에 제한이 있으며, 전달이 보장되지 않는다.&lt;/li>
&lt;li>데이터 경계를 구분하는 데이터그램 서비스를 제공한다.&lt;/li>
&lt;li>실시간 스트리밍, 게임 등에 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>소켓 통신의 기본 흐름&lt;span class="hx-absolute -hx-mt-20" id="소켓-통신의-기본-흐름">&lt;/span>
&lt;a href="#%ec%86%8c%ec%bc%93-%ed%86%b5%ec%8b%a0%ec%9d%98-%ea%b8%b0%eb%b3%b8-%ed%9d%90%eb%a6%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>서버와 클라이언트 간의 연결이 성립되면 양방향으로 데이터 통신이 가능하다.&lt;/li>
&lt;li>TCP 연결의 경우, 연결 요청 시 3-way handshake 과정이 진행된다.&lt;/li>
&lt;li>서버는 여러 클라이언트의 연결 요청을 처리하기 위해 대기열(queue)을 만들어 관리한다.&lt;/li>
&lt;li>실제 데이터 송수신은 accept() 함수로 생성된 새로운 소켓을 통해 이루어진다.&lt;/li>
&lt;/ul>
&lt;p>이러한 기본 흐름을 통해 소켓은 네트워크 상에서 프로세스 간 통신의 종착점 역할을 하며, 전송 계층과 응용 프로그램 사이의 인터페이스로 작동한다.&lt;/p>
&lt;p>소켓 통신의 기본 흐름은 서버와 클라이언트 간의 상호작용으로 이루어진다. :&lt;/p>
&lt;ul>
&lt;li>
&lt;p>서버 측 흐름&lt;/p>
&lt;ol>
&lt;li>소켓 생성: socket() 함수를 사용하여 소켓을 생성한다.&lt;/li>
&lt;li>바인딩: bind() 함수로 소켓에 IP 주소와 포트 번호를 할당한다.&lt;/li>
&lt;li>연결 대기: listen() 함수를 호출하여 클라이언트의 연결 요청을 기다린다.&lt;/li>
&lt;li>연결 수락: accept() 함수로 클라이언트의 연결 요청을 수락한다. 이 때 새로운 소켓이 생성되어 클라이언트와의 통신에 사용된다.&lt;/li>
&lt;li>데이터 송수신: send()/recv() 함수를 사용하여 클라이언트와 데이터를 주고받는다.&lt;/li>
&lt;li>연결 종료: close() 함수로 소켓을 닫는다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>클라이언트 측 흐름&lt;/p>
&lt;ol>
&lt;li>소켓 생성: socket() 함수를 사용하여 소켓을 생성한다.&lt;/li>
&lt;li>연결 요청: connect() 함수를 호출하여 서버에 연결을 요청한다.&lt;/li>
&lt;li>데이터 송수신: send()/recv() 함수를 사용하여 서버와 데이터를 주고받는다.&lt;/li>
&lt;li>연결 종료: close() 함수로 소켓을 닫는다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>TCP 소켓의 경우:&lt;/p>
&lt;ol>
&lt;li>서버 소켓 생성&lt;/li>
&lt;li>서버 소켓 바인딩 (IP주소와 포트번호 할당)&lt;/li>
&lt;li>연결 대기 (Listen)&lt;/li>
&lt;li>클라이언트의 연결 요청 수락 (Accept)&lt;/li>
&lt;li>데이터 송수신&lt;/li>
&lt;li>연결 종료&lt;/li>
&lt;/ol>
&lt;p>UDP 소켓의 경우:&lt;/p>
&lt;ol>
&lt;li>소켓 생성&lt;/li>
&lt;li>소켓 바인딩&lt;/li>
&lt;li>데이터 송수신&lt;/li>
&lt;li>소켓 종료&lt;/li>
&lt;/ol>
&lt;h3>주요 소켓 함수&lt;span class="hx-absolute -hx-mt-20" id="주요-소켓-함수">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ec%86%8c%ec%bc%93-%ed%95%a8%ec%88%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>소켓의 작동 방식에서 각 함수는 다음과 같은 역할을 수행한다:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>서버 측 함수&lt;/p>
&lt;ol>
&lt;li>socket(): 소켓을 생성한다. 통신의 첫 단계로, 네트워크 통신을 위한 엔드포인트를 만든다.&lt;/li>
&lt;li>bind(): 생성된 소켓에 IP 주소와 포트 번호를 할당한다. 이를 통해 특정 주소와 포트에서 들어오는 연결을 수신할 수 있게 된다.&lt;/li>
&lt;li>listen(): 클라이언트의 연결 요청을 대기하는 상태로 소켓을 변경한다. 연결 요청을 수신할 준비가 되었음을 나타낸다.&lt;/li>
&lt;li>accept(): 클라이언트의 연결 요청을 수락한다. 새로운 소켓을 생성하여 클라이언트와의 통신에 사용한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>클라이언트 측 함수&lt;/p>
&lt;ol>
&lt;li>socket(): 서버와 마찬가지로 소켓을 생성한다.&lt;/li>
&lt;li>connect(): 서버에 연결을 요청한다. 서버의 IP 주소와 포트 번호를 지정하여 연결을 시도한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>공통 함수&lt;/p>
&lt;ol>
&lt;li>send()/recv(): 데이터를 송수신한다. 연결된 소켓을 통해 실제 데이터 통신이 이루어진다.&lt;/li>
&lt;li>close(): 소켓을 닫는다. 통신이 완료되면 소켓을 종료하여 리소스를 해제한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>이러한 함수들의 호출 순서와 역할을 통해 소켓은 네트워크 상에서 두 프로그램 간의 양방향 통신을 가능하게 한다.&lt;br>
서버는 연결을 수신하고 관리하는 역할을, 클라이언트는 연결을 요청하고 데이터를 교환하는 역할을 수행한다.&lt;/p>
&lt;h4>소켓의 작동 방식과 함수 호출 과정&lt;span class="hx-absolute -hx-mt-20" id="소켓의-작동-방식과-함수-호출-과정">&lt;/span>
&lt;a href="#%ec%86%8c%ec%bc%93%ec%9d%98-%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d%ea%b3%bc-%ed%95%a8%ec%88%98-%ed%98%b8%ec%b6%9c-%ea%b3%bc%ec%a0%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>호출 과정:&lt;/p>
&lt;ol>
&lt;li>서버는 socket() → bind() → listen() 순으로 초기화&lt;/li>
&lt;li>클라이언트는 socket() → connect() 로 연결 시도&lt;/li>
&lt;li>서버는 accept()로 연결 수락&lt;/li>
&lt;li>send()/recv() 를 통한 양방향 통신&lt;/li>
&lt;li>close()로 연결 종료&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Deadlock vs Livelock</title><link>https://buenhyden.github.io/til/2024/12/deadlock-vs-livelock/</link><pubDate>Wed, 25 Dec 2024 07:03:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/12/deadlock-vs-livelock/</guid><description>
&lt;h2>Deadlock Vs Livelock&lt;span class="hx-absolute -hx-mt-20" id="deadlock-vs-livelock">&lt;/span>
&lt;a href="#deadlock-vs-livelock" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>데드락(Deadlock)과 라이브락(Livelock)은 둘 다 동시성 프로그래밍에서 발생할 수 있는 문제 상황으로, 데드락과 라이브락은 모두 시스템의 진행을 방해하는 심각한 문제이다.&lt;/p>
&lt;p>데드락(Deadlock)은 두 개 이상의 프로세스나 스레드가 서로가 보유한 자원을 기다리며 무한정 대기하는 상태를 말하며, 상호 배제(Mutual Exclusion), 점유 대기(Hold and Wait), 비선점(No Preemption), 순환 대기(Circular Wait) 등의 조건이 충족되어야 한다. 예를 들어, 프로세스 A가 자원 X를 점유하고, 프로세스 B가 자원 Y를 점유한 상태에서, A는 Y를, B는 X를 요청하면 데드락이 발생한다&lt;/p>
&lt;p>라이브락(Livelock)은 프로세스들이 계속해서 상태를 변경하지만 실제로는 어떤 진전도 없는 상황을 말한다.&lt;br>
지속적인 상태 변경이 일어나지만, 진전이 없다. 예를 들어, 두 사람이 좁은 복도에서 마주쳤을 때, 서로 양보하려고 같은 방향으로 계속 이동하는 상황을 생각해볼 수 있다.&lt;/p>
&lt;h2>비교 분석 표&lt;span class="hx-absolute -hx-mt-20" id="비교-분석-표">&lt;/span>
&lt;a href="#%eb%b9%84%ea%b5%90-%eb%b6%84%ec%84%9d-%ed%91%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>데드락 (Deadlock)&lt;/th>
&lt;th>라이브락 (Livelock)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>프로세스들이 서로의 자원을 기다리며 무한정 대기하는 상태&lt;/td>
&lt;td>프로세스들이 계속 상태를 변경하지만 진전이 없는 상태&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로세스 상태&lt;/td>
&lt;td>완전히 멈춰있음&lt;/td>
&lt;td>계속해서 상태 변경&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 점유&lt;/td>
&lt;td>자원을 점유한 채로 다른 자원을 기다림&lt;/td>
&lt;td>자원을 점유하지 않고 계속 요청하고 해제&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CPU 사용&lt;/td>
&lt;td>CPU 사용 없음&lt;/td>
&lt;td>CPU 계속 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>해결 가능성&lt;/td>
&lt;td>외부 개입 없이 해결 불가능&lt;/td>
&lt;td>시간이 지나면 자연스럽게 해결될 가능성 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>발생 원인&lt;/td>
&lt;td>자원 할당의 순환 의존성&lt;/td>
&lt;td>데드락을 피하려는 과정에서 발생 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로세스 진행&lt;/td>
&lt;td>완전히 멈춤&lt;/td>
&lt;td>진행은 하지만 실질적 진전 없음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>해결 방법&lt;/td>
&lt;td>예방, 회피, 탐지 및 복구&lt;/td>
&lt;td>무작위성 도입, 우선순위 부여, 타임아웃 설정&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실제 예시&lt;/td>
&lt;td>두 프로세스가 서로의 자원을 점유하고 대기&lt;/td>
&lt;td>두 사람이 복도에서 서로 양보하며 계속 이동&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>해결 방법&lt;span class="hx-absolute -hx-mt-20" id="해결-방법">&lt;/span>
&lt;a href="#%ed%95%b4%ea%b2%b0-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>데드락 해결 방법&lt;span class="hx-absolute -hx-mt-20" id="데드락-해결-방법">&lt;/span>
&lt;a href="#%eb%8d%b0%eb%93%9c%eb%9d%bd-%ed%95%b4%ea%b2%b0-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ol>
&lt;li>&lt;strong>예방&lt;/strong>: 데드락의 네 가지 조건 중 하나를 제거한다.&lt;/li>
&lt;li>&lt;strong>회피&lt;/strong>: 자원 할당 상태를 지속적으로 검사하여 안전한 상태를 유지한다.&lt;/li>
&lt;li>&lt;strong>탐지 및 복구&lt;/strong>: 데드락을 탐지하고, 발생 시 프로세스를 강제 종료하거나 자원을 선점한다.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>데드락(Deadlock)의 네 가지 조건&lt;/p>
&lt;ol>
&lt;li>&lt;strong>상호 배제(Mutual Exclusion)&lt;/strong>: 자원은 한 번에 하나의 프로세스만 사용할 수 있다.&lt;/li>
&lt;li>&lt;strong>점유 대기(Hold and Wait)&lt;/strong>: 프로세스가 이미 자원을 보유한 상태에서 다른 자원을 요청한다.&lt;/li>
&lt;li>&lt;strong>비선점(No Preemption)&lt;/strong>: 다른 프로세스가 사용 중인 자원을 강제로 빼앗을 수 없다.&lt;/li>
&lt;li>&lt;strong>순환 대기(Circular Wait)&lt;/strong>: 프로세스들이 순환적으로 서로의 자원을 기다린다.&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h4>라이브락 해결 방법&lt;span class="hx-absolute -hx-mt-20" id="라이브락-해결-방법">&lt;/span>
&lt;a href="#%eb%9d%bc%ec%9d%b4%eb%b8%8c%eb%9d%bd-%ed%95%b4%ea%b2%b0-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ol>
&lt;li>&lt;strong>무작위성 도입&lt;/strong>: 프로세스들이 동작을 결정할 때 약간의 무작위성을 도입한다.&lt;/li>
&lt;li>&lt;strong>우선순위 부여&lt;/strong>: 프로세스들에게 서로 다른 우선순위를 부여한다.&lt;/li>
&lt;li>&lt;strong>타임아웃 설정&lt;/strong>: 일정 시간 동안 진전이 없으면 작업을 재시도하거나 포기한다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Memory Management Techniques</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/</link><pubDate>Wed, 25 Dec 2024 06:59:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/</guid><description>
&lt;h2>Memory Management Techniques&lt;span class="hx-absolute -hx-mt-20" id="memory-management-techniques">&lt;/span>
&lt;a href="#memory-management-techniques" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>운영체제의 메모리 관리 기법(Memory Management Techniques)은 컴퓨터 시스템의 제한된 메모리 자원을 효율적으로 사용하기 위한 방법들이다.&lt;br>
주요 메모리 관리 기법은 다음과 같다:&lt;/p>
&lt;p>&lt;img src="memory_management_techniques.webp" alt="Memory Management Techniques" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/memory-management-in-operating-system/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/memory-management-in-operating-system/&lt;/a> _&lt;/p>
&lt;blockquote>
&lt;p>스와핑 (Swapping)&lt;br>
스와핑은 메모리가 부족할 때 실행 중인 프로세스의 일부 또는 전체를 디스크의 특별한 영역(스왑 공간)으로 임시로 내보내고, 필요할 때 다시 메모리로 가져오는 메모리 관리 기법이다.
이는 제한된 메모리를 효율적으로 사용하여 더 많은 프로세스를 동시에 실행할 수 있게 한다.
두 가지의 작동 방식을 가지고 있다:&lt;/p>
&lt;ul>
&lt;li>Swap Out: 프로세스를 RAM에서 하드 디스크로 이동시킨다.&lt;/li>
&lt;li>Swap In: 프로세스를 하드 디스크에서 RAM으로 다시 불러온다.
CPU 활용도를 높이고, 메모리 가용성을 개선한다.
우선순위 기반 스케줄링에 유용하다.
다만, 시스템 성능에 영향을 줄 수 있으며, 디스크 I/O가 증가할 수 있다.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3>연속 메모리 할당 (Contiguous Memory Allocation)&lt;span class="hx-absolute -hx-mt-20" id="연속-메모리-할당-contiguous-memory-allocation">&lt;/span>
&lt;a href="#%ec%97%b0%ec%86%8d-%eb%a9%94%eb%aa%a8%eb%a6%ac-%ed%95%a0%eb%8b%b9-contiguous-memory-allocation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>가장 기본적인 메모리 관리 기법으로, 프로세스에 연속된 메모리 공간을 할당하는 방식이다.&lt;/p>
&lt;ol>
&lt;li>고정 분할 (Fixed Partitioning)
&lt;ul>
&lt;li>메모리를 고정된 크기의 파티션으로 나눈다.&lt;/li>
&lt;li>각 프로세스는 하나의 파티션에 할당된다.&lt;/li>
&lt;li>내부 단편화 문제가 발생할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가변 분할 (Variable Partitioning)&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>프로세스 크기에 따라 동적으로 메모리를 할당한다.&lt;/li>
&lt;li>외부 단편화 문제가 발생할 수 있다.&lt;/li>
&lt;li>최초 적합(First-fit), 최적 적합(Best-fit), 최악 적합(Worst-fit) 등의 할당 알고리즘이 사용된다.&lt;/li>
&lt;/ul>
&lt;h4>할당 알고리즘&lt;span class="hx-absolute -hx-mt-20" id="할당-알고리즘">&lt;/span>
&lt;a href="#%ed%95%a0%eb%8b%b9-%ec%95%8c%ea%b3%a0%eb%a6%ac%ec%a6%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>할당 알고리즘인 최초 적합(First Fit), 최적 적합(Best Fit), 최악 적합(Worst Fit)은 메모리 관리에서 프로세스를 메모리의 빈 공간에 할당하는 방법을 결정하는 알고리즘이다.&lt;/p>
&lt;ol>
&lt;li>최초 적합 (First Fit)
&lt;ul>
&lt;li>메모리를 순차적으로 검색하여 프로세스가 들어갈 수 있는 첫 번째 빈 공간에 할당한다.&lt;/li>
&lt;li>가장 간단하고 빠른 방법으로, 대부분의 경우 효율적이다.&lt;/li>
&lt;li>검색을 최소화할 수 있어 빠른 할당이 가능하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>최적 적합 (Best Fit)
&lt;ul>
&lt;li>프로세스 크기와 가장 비슷한 빈 공간을 찾아 할당한다.&lt;/li>
&lt;li>모든 가용 공간을 검색해야 하므로 시간이 더 걸린다.&lt;/li>
&lt;li>외부 단편화를 최소화할 수 있지만, 작은 단편들이 많이 생길 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>최악 적합 (Worst Fit)
&lt;ul>
&lt;li>가장 큰 빈 공간에 프로세스를 할당한다.&lt;/li>
&lt;li>남는 공간을 최대화하여 다른 프로세스들이 사용할 수 있는 여지를 남긴다.&lt;/li>
&lt;li>큰 빈 공간을 빠르게 소진할 수 있어 장기적으로는 비효율적일 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>성능 비교
&lt;ul>
&lt;li>속도: 최초 적합 &amp;gt; 최적 적합 = 최악 적합&lt;/li>
&lt;li>메모리 이용률: 최초 적합 ≈ 최적 적합 &amp;gt; 최악 적합&lt;/li>
&lt;li>구현 복잡성: 최초 적합 &amp;lt; 최적 적합 = 최악 적합&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>각 알고리즘은 상황에 따라 장단점이 있으며, 시스템의 요구사항과 특성에 맞게 선택해야 한다.&lt;br>
일반적으로 최초 적합이 간단하면서도 효율적인 성능을 보이는 경우가 많다.&lt;/p>
&lt;h3>비연속 메모리 할당(Non-Contiguous Memory Allocation)&lt;span class="hx-absolute -hx-mt-20" id="비연속-메모리-할당non-contiguous-memory-allocation">&lt;/span>
&lt;a href="#%eb%b9%84%ec%97%b0%ec%86%8d-%eb%a9%94%eb%aa%a8%eb%a6%ac-%ed%95%a0%eb%8b%b9non-contiguous-memory-allocation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>프로세스의 메모리를 여러 개의 작은 블록으로 나누어 물리적 메모리의 서로 다른 위치에 할당하는 메모리 관리 기법으로 메모리 사용의 효율성을 높이고 외부 단편화를 줄이는 데 도움이 된다.&lt;/p>
&lt;ol>
&lt;li>페이징 (Paging)&lt;br>
페이징은 물리 메모리를 고정 크기의 프레임으로, 논리 메모리를 같은 크기의 페이지로 나누는 기법이다.&lt;br>
- 외부 단편화 문제를 해결한다.&lt;br>
- 페이지 테이블을 사용하여 논리 주소를 물리 주소로 변환한다.&lt;br>
- 내부 단편화가 발생할 수 있지만, 그 크기는 페이지 크기보다 작다.&lt;/li>
&lt;li>세그멘테이션 (Segmentation)&lt;br>
세그멘테이션은 프로그램을 논리적 단위(세그먼트)로 나누어 관리하는 기법.&lt;br>
- 코드, 데이터, 스택 등 논리적 단위로 메모리를 관리한다.&lt;br>
- 세그먼트 테이블을 사용하여 주소 변환을 수행한다.&lt;br>
- 외부 단편화 문제가 발생할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>가상 메모리 (Virtual Memory)&lt;span class="hx-absolute -hx-mt-20" id="가상-메모리-virtual-memory">&lt;/span>
&lt;a href="#%ea%b0%80%ec%83%81-%eb%a9%94%eb%aa%a8%eb%a6%ac-virtual-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>가상 메모리는 물리적 메모리 크기의 제약을 극복하기 위한 기법이다.&lt;/p>
&lt;ul>
&lt;li>프로세스의 일부만 메모리에 로드하여 실행한다.&lt;/li>
&lt;li>페이지 교체 알고리즘(LRU, FIFO 등)을 사용하여 필요한 페이지만 메모리에 유지한다.&lt;/li>
&lt;li>페이지 폴트 처리를 통해 필요한 페이지를 메모리로 로드한다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>가상 메모리 (Virtual Memory)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/virtual-memory/</link><pubDate>Fri, 20 Dec 2024 13:37:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/virtual-memory/</guid><description>
&lt;h2>가상 메모리 (Virtual Memory)&lt;span class="hx-absolute -hx-mt-20" id="가상-메모리-virtual-memory">&lt;/span>
&lt;a href="#%ea%b0%80%ec%83%81-%eb%a9%94%eb%aa%a8%eb%a6%ac-virtual-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>가상 메모리(Virtual Memory)는 운영체제의 메모리 관리 기법 중 하나로, 물리적 메모리의 한계를 극복하고 더 큰 메모리 공간을 제공하는 기술이다.&lt;br>
실제 물리적 메모리(RAM)의 크기에 관계없이 프로그램이 사용할 수 있는 메모리 공간을 확장하며, 프로그램의 주소 공간을 실제 메모리에서 분리하여 가상 주소 공간을 제공한다.&lt;/p>
&lt;p>가상 메모리가 필요한 이유:&lt;/p>
&lt;ol>
&lt;li>메모리 제약 극복&lt;br>
프로그램의 크기가 실제 물리적 메모리보다 클 수 있다.&lt;br>
예를 들어 16GB RAM을 가진 컴퓨터에서 20GB가 필요한 프로그램을 실행할 수 있게 된다.&lt;/li>
&lt;li>메모리 보호&lt;br>
각 프로세스는 자신만의 가상 주소 공간을 가지므로, 다른 프로세스의 메모리에 접근할 수 없다.&lt;/li>
&lt;li>메모리 효율성&lt;br>
실제로 사용되는 부분만 물리적 메모리에 적재함으로써 메모리를 효율적으로 사용할 수 있다.&lt;/li>
&lt;/ol>
&lt;p>
&lt;img src="../erx44XE.jpg" alt="Virtual Memory" loading="lazy" />&lt;br>
_Source: &lt;a href="https://cse.poriyaan.in/topic/virtual-memory-50746/#google_vignette" target="_blank" rel="noopener">https://cse.poriyaan.in/topic/virtual-memory-50746/#google_vignette&lt;/a> _&lt;/p>
&lt;h3>주요 특징&lt;span class="hx-absolute -hx-mt-20" id="주요-특징">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>메모리 확장: 물리적 메모리보다 큰 프로그램 실행 가능&lt;/li>
&lt;li>메모리 보호: 각 프로세스에 독립된 가상 주소 공간 제공&lt;/li>
&lt;li>효율적 메모리 사용: 필요한 부분만 물리 메모리에 적재&lt;/li>
&lt;li>다중 프로세스 실행: 여러 프로그램의 동시 실행 지원&lt;/li>
&lt;/ol>
&lt;h3>동작 원리&lt;span class="hx-absolute -hx-mt-20" id="동작-원리">&lt;/span>
&lt;a href="#%eb%8f%99%ec%9e%91-%ec%9b%90%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>페이징 시스템 사용: 프로그램을 일정 크기의 페이지로 나눔&lt;/li>
&lt;li>요구 페이징: 필요한 페이지만 메모리에 적재&lt;/li>
&lt;li>페이지 테이블: 가상 주소와 물리 주소 간 매핑 정보 저장&lt;/li>
&lt;li>MMU(Memory Management Unit): 주소 변환 담당 하드웨어&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>가상 메모리의 주요 장점은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>확장된 메모리 공간: 물리적 메모리 크기에 구애받지 않고 더 큰 메모리 공간을 제공한다.&lt;/li>
&lt;li>메모리 보호: 각 프로세스에 독립적인 가상 주소 공간을 제공하여 다른 프로세스의 메모리 접근을 방지한다.&lt;/li>
&lt;li>효율적인 메모리 사용: 필요한 부분만 물리 메모리에 적재하여 메모리 사용 효율을 높인다.&lt;/li>
&lt;li>다중 프로세스 실행 지원: 여러 프로그램을 동시에 실행할 수 있도록 한다.&lt;/li>
&lt;li>프로그래밍 용이성: 프로그래머가 물리적 메모리 크기를 고려하지 않고 개발할 수 있다.&lt;/li>
&lt;li>메모리 관리의 단순화: 통일된 주소 공간을 제공하여 메모리 관리를 용이하게 한다.&lt;/li>
&lt;li>시스템 안정성 향상: 프로세스 간 메모리 침범을 방지하여 시스템의 안정성을 높인다.&lt;/li>
&lt;/ol>
&lt;h3>단점&lt;span class="hx-absolute -hx-mt-20" id="단점">&lt;/span>
&lt;a href="#%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>가상 메모리의 주요 단점은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>성능 저하: 가상 메모리는 하드 디스크나 SSD를 사용하기 때문에 RAM보다 훨씬 느리다. 이로 인해 애플리케이션의 속도가 느려질 수 있다.&lt;/li>
&lt;li>디스크 공간 소비: 가상 메모리는 하드 디스크 공간을 사용하므로 사용 가능한 저장 공간이 줄어든다.&lt;/li>
&lt;li>시스템 안정성 저하: 과도한 가상 메모리 사용은 시스템의 전반적인 안정성을 떨어뜨릴 수 있다.&lt;/li>
&lt;li>애플리케이션 전환 지연: 가상 메모리를 사용할 때 애플리케이션 간 전환에 더 많은 시간이 소요될 수 있다.&lt;/li>
&lt;li>스레싱(Thrashing): 물리적 메모리가 부족할 경우, 시스템이 가상 메모리와 물리적 메모리 사이를 지속적으로 전환하면서 성능이 크게 저하될 수 있다.&lt;/li>
&lt;li>저장 장치 수명 단축: SSD와 같은 저장 장치를 가상 메모리로 사용할 경우, 잦은 읽기/쓰기 작업으로 인해 장치의 수명이 단축될 수 있다.&lt;/li>
&lt;li>복잡성 증가: 가상 메모리 관리 알고리즘의 구현이 복잡하며, 이는 시스템의 전반적인 복잡성을 증가시킨다.&lt;/li>
&lt;/ol>
&lt;h4>페이지 폴트 (Page Fault)&lt;span class="hx-absolute -hx-mt-20" id="페이지-폴트-page-fault">&lt;/span>
&lt;a href="#%ed%8e%98%ec%9d%b4%ec%a7%80-%ed%8f%b4%ed%8a%b8-page-fault" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>페이지 폴트(Page Fault)는 프로그램이 현재 물리적 메모리(RAM)에 없는 페이지에 접근하려고 할 때 발생하는 예외 상황이다. 이는 가상 메모리 시스템에서 중요한 메커니즘이다.&lt;/p>
&lt;p>발생원인:&lt;/p>
&lt;ul>
&lt;li>요구 페이징: 필요한 페이지가 아직 메모리에 로드되지 않은 경우&lt;/li>
&lt;li>유효하지 않은 메모리 접근: 프로그램이 할당되지 않은 메모리에 접근하려 할 때&lt;/li>
&lt;li>보호 위반: 읽기 전용 페이지에 쓰기를 시도하는 경우&lt;/li>
&lt;/ul>
&lt;p>처리 과정:&lt;/p>
&lt;ul>
&lt;li>CPU가 페이지 폴트를 감지하고 운영체제에 제어권을 넘깁니다.&lt;/li>
&lt;li>운영체제는 요청된 페이지의 디스크 위치를 확인합니다.&lt;/li>
&lt;li>필요한 경우 기존 페이지를 디스크로 스왑아웃합니다.&lt;/li>
&lt;li>요청된 페이지를 디스크에서 메모리로 로드합니다.&lt;/li>
&lt;li>페이지 테이블을 업데이트하여 새 페이지 위치를 반영합니다.&lt;/li>
&lt;li>프로그램 실행을 재개합니다.&lt;/li>
&lt;/ul>
&lt;p>페이지 폴트의 종류:&lt;/p>
&lt;ul>
&lt;li>경미한 페이지 폴트: 페이지가 이미 메모리에 있지만 페이지 테이블에 등록되지 않은 경우&lt;/li>
&lt;li>주요 페이지 폴트: 페이지를 디스크에서 메모리로 가져와야 하는 경우&lt;/li>
&lt;/ul>
&lt;p>성능 영향:&lt;/p>
&lt;ul>
&lt;li>페이지 폴트 처리는 상대적으로 시간이 많이 소요되는 작업입니다.&lt;/li>
&lt;li>과도한 페이지 폴트는 시스템 성능을 크게 저하시킬 수 있습니다(스레싱).&lt;/li>
&lt;/ul>
&lt;p>최적화 전략:&lt;/p>
&lt;ul>
&lt;li>작업 세트 모델 사용: 프로세스의 자주 사용되는 페이지들을 메모리에 유지&lt;/li>
&lt;li>페이지 교체 알고리즘 최적화: LRU(Least Recently Used) 등의 효율적인 알고리즘 사용&lt;/li>
&lt;li>메모리 용량 증가: 물리적 메모리를 늘려 페이지 폴트 발생 빈도 감소&lt;/li>
&lt;/ul>
&lt;h3>가상 메모리 구현시 필요한 알고리즘&lt;span class="hx-absolute -hx-mt-20" id="가상-메모리-구현시-필요한-알고리즘">&lt;/span>
&lt;a href="#%ea%b0%80%ec%83%81-%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b5%ac%ed%98%84%ec%8b%9c-%ed%95%84%ec%9a%94%ed%95%9c-%ec%95%8c%ea%b3%a0%eb%a6%ac%ec%a6%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>가상 메모리를 구현할 때 필요한 주요 알고리즘은 다음과 같다:&lt;/p>
&lt;h4>페이지 교체 알고리즘 (Page Replacement Algorithm)&lt;span class="hx-absolute -hx-mt-20" id="페이지-교체-알고리즘-page-replacement-algorithm">&lt;/span>
&lt;a href="#%ed%8e%98%ec%9d%b4%ec%a7%80-%ea%b5%90%ec%b2%b4-%ec%95%8c%ea%b3%a0%eb%a6%ac%ec%a6%98-page-replacement-algorithm" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>페이지 교체 알고리즘(Page Replacement Algorithm)은 운영체제에서 페이징 기반의 가상 메모리 관리를 위해 사용되는 중요한 메커니즘이다.&lt;br>
이 알고리즘은 메모리가 가득 찼을 때 어떤 페이지를 교체할지 결정한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>알고리즘&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>FIFO (First-In-First-Out)&lt;/td>
&lt;td>가장 오래된 페이지를 교체&lt;/td>
&lt;td>- 구현이 간단&lt;/td>
&lt;td>- 성능이 좋지 않음&lt;br>- Belady의 모순 발생 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LRU (Least Recently Used)&lt;/td>
&lt;td>가장 오랫동안 사용되지 않은 페이지 교체&lt;/td>
&lt;td>- 효율적&lt;br>- 지역성 원리 활용&lt;/td>
&lt;td>- 구현이 복잡&lt;br>- 추가 데이터 구조 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Optimal&lt;/td>
&lt;td>가장 오랫동안 사용되지 않을 페이지 교체&lt;/td>
&lt;td>- 이론적으로 가장 효율적&lt;/td>
&lt;td>- 실제 구현 불가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Second Chance (Clock)&lt;/td>
&lt;td>FIFO의 변형, 참조 비트 사용&lt;/td>
&lt;td>- FIFO보다 성능 우수&lt;br>- 구현 비교적 간단&lt;/td>
&lt;td>- FIFO의 단점 일부 존재&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Random&lt;/td>
&lt;td>무작위로 페이지 선택하여 교체&lt;/td>
&lt;td>- 구현이 매우 간단&lt;/td>
&lt;td>- 성능 예측 어려움&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>Belady의 모순(Belady&amp;rsquo;s Anomaly)&lt;br>
페이지 교체 알고리즘에서 발생하는 특이한 현상으로, 페이지 프레임의 수를 증가시켰을 때 오히려 페이지 폴트(page fault)의 수가 증가하는 현상을 말한다.&lt;/p>
&lt;ul>
&lt;li>발생 원인
&lt;ol>
&lt;li>주로 FIFO(First-In-First-Out) 페이지 교체 알고리즘에서 발생한다.&lt;/li>
&lt;li>메모리 크기 증가로 인해 일부 페이지가 예상보다 일찍 교체되어 나중에 다시 필요해질 때 페이지 폴트가 발생한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>특징
&lt;ol>
&lt;li>직관에 반하는 현상: 일반적으로 메모리 크기가 증가하면 성능이 향상될 것으로 예상되지만, 이 경우 오히려 성능이 저하된다.&lt;/li>
&lt;li>모든 알고리즘에서 발생하지 않음: LRU(Least Recently Used)나 Optimal 알고리즘과 같은 스택 기반 알고리즘에서는 발생하지 않는다.&lt;br>
예시:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>검색 결과에 제시된 예에서, 3개의 프레임을 사용했을 때 9번의 페이지 폴트가 발생했지만, 4개의 프레임을 사용했을 때 10번의 페이지 폴트가 발생했다.&lt;br>
중요성:&lt;/li>
&lt;li>Belady의 모순은 메모리 관리 알고리즘의 선택과 최적화에 중요한 영향을 미치며, 시스템 성능에 직접적인 영향을 줄 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h4>기타&lt;span class="hx-absolute -hx-mt-20" id="기타">&lt;/span>
&lt;a href="#%ea%b8%b0%ed%83%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ol>
&lt;li>
&lt;p>프레임 할당 알고리즘 (Frame Allocation Algorithm):&lt;/p>
&lt;ul>
&lt;li>여러 프로세스가 존재할 때 각 프로세스에 메모리 프레임을 어떻게 할당할지 결정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>요구 페이징 알고리즘 (Demand Paging Algorithm):&lt;/p>
&lt;ul>
&lt;li>필요한 페이지만 메모리에 적재하는 방식을 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>페이지 테이블 관리 알고리즘:&lt;/p>
&lt;ul>
&lt;li>가상 주소를 물리 주소로 변환하는 페이지 테이블을 효율적으로 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>스레싱 방지 알고리즘:&lt;/p>
&lt;ul>
&lt;li>과도한 페이지 부재로 인한 성능 저하를 방지하기 위한 알고리즘&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>가상 메모리와 물리적 메모리의 비교&lt;span class="hx-absolute -hx-mt-20" id="가상-메모리와-물리적-메모리의-비교">&lt;/span>
&lt;a href="#%ea%b0%80%ec%83%81-%eb%a9%94%eb%aa%a8%eb%a6%ac%ec%99%80-%eb%ac%bc%eb%a6%ac%ec%a0%81-%eb%a9%94%eb%aa%a8%eb%a6%ac%ec%9d%98-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>가상 메모리&lt;/th>
&lt;th>물리적 메모리&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>실제 물리적 메모리보다 큰 메모리 공간을 제공하는 추상화된 메모리&lt;/td>
&lt;td>컴퓨터에 실제로 장착된 RAM&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주소 체계&lt;/td>
&lt;td>논리적 주소 (가상 주소)&lt;/td>
&lt;td>물리적 주소&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>크기&lt;/td>
&lt;td>CPU의 주소 지정 능력에 따라 결정 (예: 32비트 시스템에서 최대 4GB)&lt;/td>
&lt;td>실제 설치된 RAM의 크기로 제한&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>접근 속도&lt;/td>
&lt;td>상대적으로 느림 (페이지 폴트 발생 시)&lt;/td>
&lt;td>빠름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 저장 위치&lt;/td>
&lt;td>RAM과 디스크의 스왑 영역&lt;/td>
&lt;td>RAM&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로세스 격리&lt;/td>
&lt;td>각 프로세스에 독립적인 주소 공간 제공&lt;/td>
&lt;td>직접적인 격리 기능 없음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 관리&lt;/td>
&lt;td>운영체제가 페이징 등의 기법으로 관리&lt;/td>
&lt;td>하드웨어 수준에서 직접 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 장점&lt;/td>
&lt;td>큰 주소 공간, 메모리 효율성, 프로세스 보호&lt;/td>
&lt;td>빠른 접근 속도&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 단점&lt;/td>
&lt;td>페이지 폴트로 인한 성능 저하 가능성&lt;/td>
&lt;td>크기 제한, 비용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡성&lt;/td>
&lt;td>높음 (페이지 테이블, MMU 등 필요)&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 공유&lt;/td>
&lt;td>쉬움 (같은 물리 메모리를 다른 가상 주소에 매핑 가능)&lt;/td>
&lt;td>직접적인 공유 어려움&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol>
&lt;li>
&lt;p>정의와 구현:&lt;/p>
&lt;ul>
&lt;li>물리적 메모리: 실제 하드웨어 RAM으로, CPU가 직접 접근할 수 있는 메모리.&lt;/li>
&lt;li>가상 메모리: 운영 체제가 제공하는 추상화된 메모리 공간으로, 물리적 메모리의 한계를 극복하기 위해 사용된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>용량:&lt;/p>
&lt;ul>
&lt;li>물리적 메모리: 실제 설치된 RAM의 크기로 제한된다.&lt;/li>
&lt;li>가상 메모리: 하드 디스크나 SSD를 활용하여 물리적 메모리보다 큰 용량을 제공할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>속도:&lt;/p>
&lt;ul>
&lt;li>물리적 메모리: 빠른 데이터 접근 속도를 제공한다.&lt;/li>
&lt;li>가상 메모리: 디스크를 사용하기 때문에 물리적 메모리보다 접근 속도가 느리다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>주소 체계:&lt;/p>
&lt;ul>
&lt;li>물리적 메모리: 직접적인 물리 주소를 사용한다.&lt;/li>
&lt;li>가상 메모리: 논리적 주소를 사용하며, 이는 MMU에 의해 물리 주소로 변환된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>데이터 지속성:&lt;/p>
&lt;ul>
&lt;li>물리적 메모리: 전원이 꺼지면 저장된 정보가 손실된다.&lt;/li>
&lt;li>가상 메모리: 디스크를 활용하므로 전원이 꺼져도 일부 정보를 유지할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>메모리 관리:&lt;/p>
&lt;ul>
&lt;li>물리적 메모리: 직접적인 관리가 필요하다.&lt;/li>
&lt;li>가상 메모리: 운영 체제가 페이징 등의 기법을 통해 자동으로 관리한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>세그먼테이션 (Segmentation)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/segmentation/</link><pubDate>Fri, 20 Dec 2024 13:37:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/segmentation/</guid><description>
&lt;h2>세그먼테이션 (Segmentation)&lt;span class="hx-absolute -hx-mt-20" id="세그먼테이션-segmentation">&lt;/span>
&lt;a href="#%ec%84%b8%ea%b7%b8%eb%a8%bc%ed%85%8c%ec%9d%b4%ec%85%98-segmentation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>세그먼테이션(Segmentation)은 운영체제의 메모리 관리 기법 중 하나로, 프로세스를 논리적 단위인 세그먼트로 나누어 관리하는 방식이다.&lt;/p>
&lt;p>세그먼테이션의 기본 개념을 이해하기 위해, 먼저 프로그램의 구조를 생각해보자.&lt;br>
일반적인 프로그램은 코드 영역, 데이터 영역, 스택 영역 등 서로 다른 목적을 가진 영역들로 구성된다.&lt;br>
세그먼테이션은 이러한 논리적 단위들을 각각의 세그먼트로 관리한다.&lt;/p>
&lt;p>
&lt;img src="../ezgifcom-gif-maker-%2816%29.webp" alt="Sengmenation" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/segmentation-in-operating-system/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/segmentation-in-operating-system/&lt;/a> _&lt;/p>
&lt;h3>세그먼테이션의 주요 구성 요소와 작동 방식&lt;span class="hx-absolute -hx-mt-20" id="세그먼테이션의-주요-구성-요소와-작동-방식">&lt;/span>
&lt;a href="#%ec%84%b8%ea%b7%b8%eb%a8%bc%ed%85%8c%ec%9d%b4%ec%85%98%ec%9d%98-%ec%a3%bc%ec%9a%94-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c%ec%99%80-%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>세그먼트 테이블(Segment Table):&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">SegmentTableEntry&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">base&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 세그먼트의 시작 주소
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">limit&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 세그먼트의 크기
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">present&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 메모리 존재 여부
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 읽기 권한
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">write&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 쓰기 권한
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">execute&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 실행 권한
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="n">protection&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>주소 변환 과정:&lt;br>
논리적 주소는 다음과 같이 구성된다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>논리적 주소 = &amp;lt;세그먼트 번호, 오프셋&amp;gt;
물리적 주소 = 세그먼트 기준 주소 &amp;#43; 오프셋&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>예를 들어, 주소 변환을 수행하는 코드를 다음과 같이 구현할 수 있습니다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">address_translation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">segment_number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 세그먼트 테이블 엔트리 조회&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">segment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">segment_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">segment_number&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 범위 체크&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">segment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">limit&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="n">SegmentationFault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Offset exceeds segment limit&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 접근 권한 체크&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">segment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">protection&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="n">ProtectionFault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;No read permission&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 물리적 주소 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">physical_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">segment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">physical_address&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>주요 특징&lt;span class="hx-absolute -hx-mt-20" id="주요-특징">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>가변 크기 분할:&lt;/p>
&lt;ul>
&lt;li>프로세스를 다양한 크기의 세그먼트로 나눈다.&lt;/li>
&lt;li>세그먼트 크기는 프로그램의 논리적 단위(예: 함수, 데이터 테이블)에 따라 결정된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>세그먼트 테이블:&lt;/p>
&lt;ul>
&lt;li>각 세그먼트의 정보를 저장하는 테이블을 사용한다.&lt;/li>
&lt;li>주요 정보: 세그먼트의 기본 주소(base address)와 한계(limit)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>주소 변환:&lt;/p>
&lt;ul>
&lt;li>논리 주소는 세그먼트 번호와 오프셋으로 구성된다.&lt;/li>
&lt;li>세그먼트 테이블을 참조하여 물리 주소로 변환한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>메모리 보호:&lt;/p>
&lt;ul>
&lt;li>세그먼트 단위로 접근 권한을 설정할 수 있어 보안성이 향상된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>공유와 보호:&lt;/p>
&lt;ul>
&lt;li>세그먼트 단위로 프로세스 간 메모리 공유가 가능하다.&lt;/li>
&lt;li>코드 세그먼트 등을 여러 프로세스가 공유할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>사용자 관점에 가까운 메모리 관리&lt;/li>
&lt;li>내부 단편화 감소&lt;/li>
&lt;li>동적 크기 조정 가능&lt;/li>
&lt;li>효율적인 메모리 공유&lt;/li>
&lt;/ol>
&lt;h3>단점&lt;span class="hx-absolute -hx-mt-20" id="단점">&lt;/span>
&lt;a href="#%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>외부 단편화 발생 가능&lt;/li>
&lt;li>세그먼트 테이블 관리 오버헤드&lt;/li>
&lt;li>복잡한 메모리 할당 및 해제 과정&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>페이징 (Paging)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/paging/</link><pubDate>Fri, 20 Dec 2024 13:37:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/paging/</guid><description>
&lt;h2>페이징 (Paging)&lt;span class="hx-absolute -hx-mt-20" id="페이징-paging">&lt;/span>
&lt;a href="#%ed%8e%98%ec%9d%b4%ec%a7%95-paging" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>먼저 페이징이 필요한 배경을 이해해보자.&lt;br>
초기 컴퓨터 시스템에서는 프로그램 전체가 물리 메모리에 연속적으로 적재되어야 했다.&lt;br>
이는 두 가지 큰 문제를 발생시켰다:&lt;/p>
&lt;ol>
&lt;li>큰 프로그램은 메모리에 적재하기 어려웠다.&lt;/li>
&lt;li>메모리 단편화(fragmentation)가 심각했다.&lt;br>
이러한 문제를 해결하기 위해 페이징이 도입되었다.&lt;/li>
&lt;/ol>
&lt;p>페이징의 기본 개념은 프로그램의 논리적 주소 공간과 물리적 메모리를 동일한 크기의 작은 단위로 나누어 관리하는 것이다. 이때 논리적 주소 공간의 단위를 &amp;lsquo;페이지(page)&amp;lsquo;라 하고, 물리적 메모리의 단위를 &amp;lsquo;프레임(frame)&amp;lsquo;이라고 한다.&lt;/p>
&lt;p>
&lt;img src="../paging.webp" alt="Paging" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/paging-in-operating-system/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/paging-in-operating-system/&lt;/a> _&lt;/p>
&lt;h3>페이징 시스템의 주요 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="페이징-시스템의-주요-구성-요소">&lt;/span>
&lt;a href="#%ed%8e%98%ec%9d%b4%ec%a7%95-%ec%8b%9c%ec%8a%a4%ed%85%9c%ec%9d%98-%ec%a3%bc%ec%9a%94-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>페이지 테이블(Page Table):&lt;/p>
&lt;ul>
&lt;li>각 프로세스마다 존재하며, 논리적 페이지 번호와 물리적 프레임 번호의 매핑 정보를 저장한다.&lt;/li>
&lt;li>페이지 테이블 엔트리(PTE)에는 다음과 같은 정보가 포함된다:
&lt;ul>
&lt;li>Valid bit: 페이지가 물리 메모리에 있는지 여부&lt;/li>
&lt;li>Protection bit: 읽기/쓰기/실행 권한&lt;/li>
&lt;li>Modified bit (Dirty bit): 페이지 내용이 변경되었는지 여부&lt;/li>
&lt;li>Referenced bit: 최근에 접근했는지 여부&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>주소 변환 과정:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>논리적 주소 = 페이지 번호(p) &amp;#43; 오프셋(d)
물리적 주소 = 프레임 번호(f) × 페이지 크기 &amp;#43; 오프셋(d)&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>예를 들어, 페이지 크기가 4KB(2¹²)이고 32비트 주소 체계를 사용한다면:&lt;/p>
&lt;ul>
&lt;li>상위 20비트는 페이지 번호&lt;/li>
&lt;li>하위 12비트는 오프셋&lt;br>
이 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>TLB(Translation Lookaside Buffer):&lt;br>
페이지 테이블 접근 시간을 줄이기 위한 캐시로, 최근에 사용된 페이지 테이블 엔트리를 저장한다.&lt;br>
주소 변환 과정은 다음과 같다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>1. CPU가 논리적 주소 생성
2. TLB 검색
3. TLB Hit: 바로 물리적 주소 변환
TLB Miss: 페이지 테이블 접근 필요
4. 페이지 테이블에서 프레임 번호 확인
5. 물리적 주소로 변환하여 메모리 접근&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>다단계 페이지 테이블:&lt;br>
큰 주소 공간을 효율적으로 관리하기 위해 페이지 테이블을 여러 단계로 구성한다.&lt;br>
예를 들어 2단계 페이지 테이블의 경우:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>논리적 주소 = 외부 페이지 번호 &amp;#43; 내부 페이지 번호 &amp;#43; 오프셋&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>페이지 부재 처리(Page Fault Handling):&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">handle_page_fault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">logical_address&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">is_valid_address&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">logical_address&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="n">SegmentationFault&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">page_number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_page_number&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">logical_address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">has_free_frame&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">victim_page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">select_victim_page&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 페이지 교체 알고리즘 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">is_dirty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">victim_page&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">write_to_disk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">victim_page&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">remove_page_table_entry&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">victim_page&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">free_frame&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">allocate_free_frame&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">load_page_from_disk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">page_number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">free_frame&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">update_page_table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">page_number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">free_frame&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">restart_instruction&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>페이징의 주요 특징&lt;span class="hx-absolute -hx-mt-20" id="페이징의-주요-특징">&lt;/span>
&lt;a href="#%ed%8e%98%ec%9d%b4%ec%a7%95%ec%9d%98-%ec%a3%bc%ec%9a%94-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>메모리 분할:&lt;/p>
&lt;ul>
&lt;li>논리적 메모리(프로세스)를 동일한 크기의 페이지로 나눈다.&lt;/li>
&lt;li>물리적 메모리를 동일한 크기의 프레임으로 나눈다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>주소 변환:&lt;/p>
&lt;ul>
&lt;li>논리 주소를 물리 주소로 변환하기 위해 페이지 테이블을 사용한다.&lt;/li>
&lt;li>MMU(Memory Management Unit)가 주소 변환을 수행한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>비연속적 할당:&lt;/p>
&lt;ul>
&lt;li>프로세스의 페이지들은 물리 메모리의 여러 프레임에 분산되어 저장될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>내부 단편화:&lt;/p>
&lt;ul>
&lt;li>페이지 크기가 고정되어 있어 프로세스의 마지막 페이지에서 내부 단편화가 발생할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>페이징의 작동 방식&lt;span class="hx-absolute -hx-mt-20" id="페이징의-작동-방식">&lt;/span>
&lt;a href="#%ed%8e%98%ec%9d%b4%ec%a7%95%ec%9d%98-%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>프로세스가 메모리에 로드될 때, 운영체제는 프로세스를 페이지 단위로 나눈다.&lt;/li>
&lt;li>각 페이지는 사용 가능한 메모리 프레임에 할당된다.&lt;/li>
&lt;li>운영체제는 페이지 테이블을 생성하여 각 페이지와 해당 프레임 간의 매핑을 유지한다.&lt;/li>
&lt;li>CPU가 메모리에 접근할 때, 논리 주소는 페이지 번호와 오프셋으로 나뉜다.&lt;/li>
&lt;li>MMU는 페이지 테이블을 참조하여 페이지 번호를 프레임 번호로 변환한다.&lt;/li>
&lt;li>프레임 번호와 오프셋을 조합하여 실제 물리 주소를 생성한다.&lt;/li>
&lt;/ol>
&lt;h3>페이징의 장점&lt;span class="hx-absolute -hx-mt-20" id="페이징의-장점">&lt;/span>
&lt;a href="#%ed%8e%98%ec%9d%b4%ec%a7%95%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>외부 단편화 제거: 메모리를 고정 크기로 관리하여 외부 단편화를 방지한다.&lt;/li>
&lt;li>유연한 메모리 할당: 프로세스의 페이지들을 비연속적으로 할당할 수 있다.&lt;/li>
&lt;li>메모리 보호: 페이지 단위로 접근 권한을 설정할 수 있어 보안성이 향상된다.&lt;/li>
&lt;li>가상 메모리 지원: 실제 물리 메모리보다 큰 주소 공간을 제공할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>페이징의 단점&lt;span class="hx-absolute -hx-mt-20" id="페이징의-단점">&lt;/span>
&lt;a href="#%ed%8e%98%ec%9d%b4%ec%a7%95%ec%9d%98-%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>내부 단편화: 페이지 크기가 고정되어 있어 마지막 페이지에서 낭비가 발생할 수 있다.&lt;/li>
&lt;li>페이지 테이블 오버헤드: 큰 프로세스의 경우 페이지 테이블이 많은 메모리를 차지할 수 있다.&lt;/li>
&lt;li>주소 변환 시간: 페이지 테이블 참조로 인한 추가적인 메모리 접근이 필요하다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Byte Addressable Memory vs Word Addressable Memory</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/byte-addressable-memory-vs-word-addressable-memory/</link><pubDate>Thu, 19 Dec 2024 11:38:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/byte-addressable-memory-vs-word-addressable-memory/</guid><description>
&lt;h2>Byte Addressable Memory Vs Word Addressable Memory&lt;span class="hx-absolute -hx-mt-20" id="byte-addressable-memory-vs-word-addressable-memory">&lt;/span>
&lt;a href="#byte-addressable-memory-vs-word-addressable-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Byte Addressable Memory와 Word Addressable Memory는 컴퓨터 메모리의 주소 지정 방식을 설명하는 개념이다.&lt;br>
이 두 가지 방식은 메모리의 구조와 데이터 접근 방법에 중요한 차이를 나타낸다.&lt;/p>
&lt;p>
&lt;img src="../fig_a.jpg.webp" alt="Byte Addressable Memory Vs Word Addressable Memory" loading="lazy" />&lt;br>
_Sourece: &lt;a href="https://examradar.com/memory-organisation/" target="_blank" rel="noopener">https://examradar.com/memory-organisation/&lt;/a> _&lt;/p>
&lt;h3>Byte Addressable Memory&lt;span class="hx-absolute -hx-mt-20" id="byte-addressable-memory">&lt;/span>
&lt;a href="#byte-addressable-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Byte Addressable Memory는 각 바이트(8비트)마다 고유한 주소가 할당되어 개별적으로 접근할 수 있는 메모리 구조이다.&lt;/p>
&lt;p>가장 작은 주소 지정 단위(smallest addressable unit)는 1바이트(8비트)이며, 이를 통해 메모리의 각 바이트에 직접 접근할 수 있다.&lt;br>
CPU는 개별 바이트 단위로 메모리에 접근할 수 있으며, 워드(일반적으로 4바이트 또는 8바이트) 단위의 접근도 가능하다.&lt;br>
32비트 시스템에서는 2^32개의 주소를 가질 수 있어 최대 4GB의 메모리를 지원하며, 64비트 시스템에서는 훨씬 더 큰 주소 공간을 제공한다.&lt;/p>
&lt;p>세밀한 메모리 조작이 가능하며 다양한 데이터 타입을 효율적으로 저장할 수 있으며, 문자열 처리 등 바이트 단위 연산에 유리하다.&lt;/p>
&lt;blockquote>
&lt;p>엔디안(Endianness)&lt;/p>
&lt;ul>
&lt;li>메모리에 다중 바이트 데이터를 저장하는 순서를 나타낸다.&lt;/li>
&lt;li>주요 엔디안(Endianness)는 다음과 같다.
&lt;ul>
&lt;li>빅 엔디안(Big Endian):
&lt;ul>
&lt;li>가장 중요한 바이트(Most Significant Byte, MSB)가 가장 낮은 메모리 주소에 저장된다.&lt;/li>
&lt;li>사람이 숫자를 읽는 방식과 유사하여 직관적이다.&lt;/li>
&lt;li>주로 네트워크 프로토콜에서 사용되며, &amp;ldquo;네트워크 바이트 순서&amp;quot;라고도 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>리틀 엔디안(Little Endian):
&lt;ul>
&lt;li>가장 덜 중요한 바이트(Least Significant Byte, LSB)가 가장 낮은 메모리 주소에 저장된다.&lt;/li>
&lt;li>Intel x86, x64 프로세서 등 많은 현대 컴퓨터 시스템에서 사용된다.&lt;/li>
&lt;li>일부 수학적 연산에서 효율적일 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>예를 들어, 32비트 정수 0x11223344를 메모리에 저장할 때:
&lt;ul>
&lt;li>빅 엔디안: 11 22 33 44&lt;/li>
&lt;li>리틀 엔디안: 44 33 22 11&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>엔디안은 다중 바이트 데이터 처리에만 영향을 미치며, 단일 바이트 데이터(예: ASCII 문자)는 영향을 받지 않는다.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3>Word Addressable Memory&lt;span class="hx-absolute -hx-mt-20" id="word-addressable-memory">&lt;/span>
&lt;a href="#word-addressable-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Word Addressable Memory는 메모리의 각 워드(word)마다 고유한 주소가 할당되는 메모리 구조로, 여기서 워드는 프로세서가 한 번에 처리할 수 있는 데이터의 기본 단위를 의미한다. 일반적으로 워드 크기는 32비트(4바이트) 또는 64비트(8바이트)이다.&lt;br>
워드 단위로만 메모리에 접근할 수 있으며, 개별 바이트에 직접 접근할 수 없다.&lt;br>
바이트 주소 지정 방식에 비해 더 적은 주소로 더 큰 메모리 공간을 관리할 수 있으며, 워드 크기의 데이터 처리에 효율적이다. 또한, 작은 크기의 데이터 처리에는 비효율적일 수 있다.&lt;/p>
&lt;p>워드 크기에 따라 주소 지정 가능한 메모리 용량이 달라진다.&lt;br>
예를 들어:&lt;/p>
&lt;ul>
&lt;li>16비트 주소와 32비트 워드 시스템: 2^16 * 4바이트 = 256KB&lt;/li>
&lt;li>32비트 주소와 64비트 워드 시스템: 2^32 * 8바이트 = 32GB&lt;/li>
&lt;/ul>
&lt;p>큰 데이터 처리에 효율적이며, 주소 공간을 효율적으로 사용할 수 있다.&lt;br>
하지만, 작은 데이터 처리에 비효율적이며, 바이트 단위 조작이 어렵다.&lt;/p>
&lt;h3>비교 분석 표&lt;span class="hx-absolute -hx-mt-20" id="비교-분석-표">&lt;/span>
&lt;a href="#%eb%b9%84%ea%b5%90-%eb%b6%84%ec%84%9d-%ed%91%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Byte Addressable Memory&lt;/th>
&lt;th>Word Addressable Memory&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>주소 단위&lt;/strong>&lt;/td>
&lt;td>1 바이트&lt;/td>
&lt;td>1 워드 (보통 4바이트 또는 8바이트)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 접근&lt;/strong>&lt;/td>
&lt;td>바이트 단위로 가능&lt;/td>
&lt;td>워드 단위로만 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주소 공간&lt;/strong>&lt;/td>
&lt;td>더 많은 주소 필요&lt;/td>
&lt;td>더 적은 주소 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>유연성&lt;/strong>&lt;/td>
&lt;td>높음 (바이트 단위 조작 가능)&lt;/td>
&lt;td>제한적 (워드 단위로만 조작)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 효율&lt;/strong>&lt;/td>
&lt;td>세밀한 메모리 관리 가능&lt;/td>
&lt;td>워드 크기 미만의 데이터도 워드 전체 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>구현 복잡도&lt;/strong>&lt;/td>
&lt;td>상대적으로 복잡&lt;/td>
&lt;td>상대적으로 단순&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주요 용도&lt;/strong>&lt;/td>
&lt;td>범용 컴퓨팅 시스템&lt;/td>
&lt;td>특수 목적 프로세서, 일부 임베디드 시스템&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>데이터 정렬&lt;/strong>&lt;/td>
&lt;td>바이트 단위 정렬 가능&lt;/td>
&lt;td>워드 경계에 정렬 필요&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>세부 특성 비교&lt;span class="hx-absolute -hx-mt-20" id="세부-특성-비교">&lt;/span>
&lt;a href="#%ec%84%b8%eb%b6%80-%ed%8a%b9%ec%84%b1-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>메모리 접근 패턴&lt;span class="hx-absolute -hx-mt-20" id="메모리-접근-패턴">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ec%a0%91%ea%b7%bc-%ed%8c%a8%ed%84%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Byte Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">access_byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">memory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1"># 직접 바이트 접근&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Word Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">access_word&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">word_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">address&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">WORD_SIZE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">memory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">word_address&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1"># 워드 단위 접근&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>메모리 사용 효율&lt;span class="hx-absolute -hx-mt-20" id="메모리-사용-효율">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ec%82%ac%ec%9a%a9-%ed%9a%a8%ec%9c%a8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Byte Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">char&lt;/span> &lt;span class="n">small_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># 1바이트만 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Word Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">word&lt;/span> &lt;span class="n">small_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># 전체 워드(4바이트) 사용&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>주소 계산&lt;span class="hx-absolute -hx-mt-20" id="주소-계산">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%86%8c-%ea%b3%84%ec%82%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Byte Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">byte_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Word Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">word_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">WORD_SIZE&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>시스템 수준 영향&lt;span class="hx-absolute -hx-mt-20" id="시스템-수준-영향">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%ec%88%98%ec%a4%80-%ec%98%81%ed%96%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>영향 분야&lt;/th>
&lt;th>Byte Addressable&lt;/th>
&lt;th>Word Addressable&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>메모리 관리&lt;/strong>&lt;/td>
&lt;td>더 복잡하지만 유연함&lt;/td>
&lt;td>단순하지만 제한적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>캐시 구성&lt;/strong>&lt;/td>
&lt;td>바이트 단위 접근 지원 필요&lt;/td>
&lt;td>워드 단위로 단순화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>버스 대역폭&lt;/strong>&lt;/td>
&lt;td>바이트 단위 전송 지원&lt;/td>
&lt;td>워드 단위 전송에 최적화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>명령어 세트&lt;/strong>&lt;/td>
&lt;td>바이트 조작 명령어 포함&lt;/td>
&lt;td>워드 단위 명령어 중심&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>성능 특성&lt;/strong>&lt;/td>
&lt;td>세밀한 조작 가능하나 오버헤드 있음&lt;/td>
&lt;td>단순하고 효율적이나 제한적&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 차이점들을 이해하는 것은 시스템 설계와 최적화에 중요합니다. 특히 저수준 프로그래밍이나 시스템 프로그래밍을 할 때 이러한 특성들을 고려해야 한다.&lt;/p>
&lt;hr>
&lt;h3>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3></description></item><item><title>메모리 보호와 안전 (Memory Protection and Safety)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-protection-and-safety/</link><pubDate>Thu, 19 Dec 2024 08:06:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-protection-and-safety/</guid><description>
&lt;h2>메모리 보호와 안전 (Memory Protection and Safety)&lt;span class="hx-absolute -hx-mt-20" id="메모리-보호와-안전-memory-protection-and-safety">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%eb%b3%b4%ed%98%b8%ec%99%80-%ec%95%88%ec%a0%84-memory-protection-and-safety" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>메모리 보호와 안전은 현대 컴퓨터 시스템에서 매우 중요한 요소이다.&lt;/p>
&lt;p>메모리 보호는 컴퓨터 시스템에서 프로세스가 허가되지 않은 메모리 영역에 접근하는 것을 방지하는 메커니즘이다.&lt;br>
주요 목적은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>프로세스 간 격리 유지&lt;/li>
&lt;li>운영 체제 커널 보호&lt;/li>
&lt;li>버그나 악성 소프트웨어로부터 시스템 보호&lt;/li>
&lt;/ol>
&lt;h3>메모리 보호 기술&lt;span class="hx-absolute -hx-mt-20" id="메모리-보호-기술">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%eb%b3%b4%ed%98%b8-%ea%b8%b0%ec%88%a0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>하드웨어 기반 보호&lt;span class="hx-absolute -hx-mt-20" id="하드웨어-기반-보호">&lt;/span>
&lt;a href="#%ed%95%98%eb%93%9c%ec%9b%a8%ec%96%b4-%ea%b8%b0%eb%b0%98-%eb%b3%b4%ed%98%b8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ol>
&lt;li>&lt;strong>메모리 관리 장치 (MMU)&lt;/strong>: 가상 주소를 물리적 주소로 변환하고 접근 권한을 확인한다.&lt;/li>
&lt;li>&lt;strong>보호 키&lt;/strong>: 메모리 영역에 키를 할당하여 접근을 제어한다.&lt;/li>
&lt;li>&lt;strong>보호 링&lt;/strong>: 권한 수준에 따라 메모리 접근을 제어한다.&lt;/li>
&lt;li>&lt;strong>세그먼테이션&lt;/strong>: 메모리를 논리적 세그먼트로 나누어 보호한다.&lt;/li>
&lt;/ol>
&lt;h4>소프트웨어 기반 보호&lt;span class="hx-absolute -hx-mt-20" id="소프트웨어-기반-보호">&lt;/span>
&lt;a href="#%ec%86%8c%ed%94%84%ed%8a%b8%ec%9b%a8%ec%96%b4-%ea%b8%b0%eb%b0%98-%eb%b3%b4%ed%98%b8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ol>
&lt;li>&lt;strong>가상 메모리&lt;/strong>: 각 프로세스에 독립적인 주소 공간을 제공한다.&lt;/li>
&lt;li>&lt;strong>주소 공간 레이아웃 랜덤화 (ASLR)&lt;/strong>: 메모리 주소를 무작위화하여 공격을 어렵게 한다.&lt;/li>
&lt;li>&lt;strong>데이터 실행 방지 (DEP)&lt;/strong>: 데이터 영역에서 코드 실행을 방지한다.&lt;/li>
&lt;/ol>
&lt;h3>메모리 안전성 (Memory Safety)&lt;span class="hx-absolute -hx-mt-20" id="메모리-안전성-memory-safety">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ec%95%88%ec%a0%84%ec%84%b1-memory-safety" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>메모리 안전성은 프로그램이 할당된 메모리 범위 내에서만 작동하도록 보장하는 개념이다.&lt;/p>
&lt;p>주요 이슈와 해결책은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>버퍼 오버플로우&lt;/strong>: 할당된 메모리 범위를 벗어나는 쓰기 작업으로 인한 취약점.&lt;/p>
&lt;ul>
&lt;li>해결책: 경계 검사, 안전한 문자열 처리 함수 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>메모리 누수&lt;/strong>: 할당된 메모리를 해제하지 않아 발생하는 문제.&lt;/p>
&lt;ul>
&lt;li>해결책: 자동 메모리 관리 (가비지 컬렉션), 스마트 포인터 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Use-after-free&lt;/strong>: 해제된 메모리에 접근하는 문제.&lt;/p>
&lt;ul>
&lt;li>해결책: 안전한 메모리 할당/해제 패턴 사용, 정적 분석 도구 활용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>최신 트렌드와 기술&lt;span class="hx-absolute -hx-mt-20" id="최신-트렌드와-기술">&lt;/span>
&lt;a href="#%ec%b5%9c%ec%8b%a0-%ed%8a%b8%eb%a0%8c%eb%93%9c%ec%99%80-%ea%b8%b0%ec%88%a0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>메모리 안전 언어 사용&lt;/strong>: Rust, Go, Swift 등 메모리 안전성을 보장하는 언어의 채택이 증가하고 있다.&lt;/li>
&lt;li>&lt;strong>하드웨어 기반 메모리 보호 강화&lt;/strong>: Intel SGX, ARM TrustZone 등 하드웨어 수준의 보안 기술이 발전하고 있다.&lt;/li>
&lt;li>&lt;strong>동적 테인팅&lt;/strong>: 런타임에 데이터 흐름을 추적하여 메모리 접근을 제어하는 기술이 개발되고 있다.&lt;/li>
&lt;li>&lt;strong>CHERI (Capability Hardware Enhanced RISC Instructions)&lt;/strong>: 하드웨어 수준에서 메모리 보호를 강화하는 새로운 아키텍처가 연구 중이다.&lt;/li>
&lt;li>&lt;strong>멀티팩터 인증 (MFA) 기술의 발전&lt;/strong>: 메모리 보안을 포함한 전반적인 시스템 보안을 강화하는 데 기여하고 있다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>메모리 접근 방법 (Memory Access Methods)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-access-methods/</link><pubDate>Wed, 18 Dec 2024 08:05:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-access-methods/</guid><description>
&lt;h2>메모리 접근 방식 (Memory Access Methods)&lt;span class="hx-absolute -hx-mt-20" id="메모리-접근-방식-memory-access-methods">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ec%a0%91%ea%b7%bc-%eb%b0%a9%ec%8b%9d-memory-access-methods" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>컴퓨터 시스템에서 메모리에 접근하는 주요 방식은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>순차적 접근 (Sequential Access)&lt;/p>
&lt;ul>
&lt;li>메모리를 선형적인 순서로 접근하는 방식.&lt;/li>
&lt;li>데이터를 처음부터 순서대로 읽거나 쓰며, 특정 위치에 접근하려면 그 앞의 모든 데이터를 거쳐야 한다.&lt;/li>
&lt;li>주로 자기 테이프와 같은 저장 장치에서 사용된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>직접 접근 (Direct Access)&lt;/p>
&lt;ul>
&lt;li>각 메모리 블록이 고유한 주소를 가지고 있어 직접 접근이 가능하다.&lt;/li>
&lt;li>일반적인 위치로 직접 접근한 후, 순차적 검색을 통해 최종 목적지에 도달한다.&lt;/li>
&lt;li>하드 디스크와 같은 저장 장치에서 주로 사용된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>랜덤 접근 (Random Access)&lt;/p>
&lt;ul>
&lt;li>메모리의 어떤 위치든 동일한 시간 내에 직접 접근할 수 있는 방식.&lt;/li>
&lt;li>물리적 위치에 관계없이 데이터에 빠르게 접근할 수 있다.&lt;/li>
&lt;li>RAM(Random Access Memory)이 대표적인 예시.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>연관 접근 (Associative Access)&lt;/p>
&lt;ul>
&lt;li>데이터의 내용을 기반으로 메모리에 접근하는 방식.&lt;/li>
&lt;li>특정 패턴이나 값을 가진 데이터를 빠르게 찾을 수 있다.&lt;/li>
&lt;li>캐시 메모리에서 주로 사용되며, 병렬 검색이 가능하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>기타 메모리 접근 방식&lt;span class="hx-absolute -hx-mt-20" id="기타-메모리-접근-방식">&lt;/span>
&lt;a href="#%ea%b8%b0%ed%83%80-%eb%a9%94%eb%aa%a8%eb%a6%ac-%ec%a0%91%ea%b7%bc-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>기본적인 메모리 접근 방식(순차적, 직접, 랜덤, 연관)을 기반으로 하되, 특정 목적이나 최적화를 위해 확장되거나 변형된 형태의 메모리 접근 방식이 있다.&lt;br>
이들은 메모리 접근 방식의 범주에 포함되며, 기본적인 접근 방식들과 밀접한 관련이 있다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>가상 메모리 접근 (Virtual Memory Access):&lt;br>
가상 메모리는 물리적 메모리의 한계를 극복하기 위한 기술로, 주로 페이징이나 세그멘테이션을 사용하여 구현된다.&lt;br>
이는 랜덤 접근 방식을 기반으로 하지만, 추가적인 주소 변환 과정을 포함한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>캐시 메모리 접근 (Cache Memory Access):&lt;br>
캐시 메모리는 주로 랜덤 접근 방식을 사용하며, 데이터 지역성 원리를 활용하여 빠른 접근을 제공한다.&lt;br>
이는 기본적인 랜덤 접근 방식을 최적화한 형태로 볼 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>메모리 매핑된 입출력 (Memory-Mapped I/O):&lt;br>
이 방식은 입출력 장치를 메모리의 일부로 취급하여 접근한다.&lt;br>
이는 직접 접근 방식의 확장으로 볼 수 있으며, 파일이나 장치에 대한 접근을 메모리 접근과 동일하게 처리한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>세그먼트 기반 접근 (Segment-Based Access):&lt;br>
세그멘테이션은 메모리를 논리적 단위로 나누어 관리하는 기법으로, 직접 접근과 랜덤 접근의 특성을 모두 가지고 있습다. 이는 기본적인 메모리 접근 방식을 프로그램의 논리적 구조에 맞게 확장한 것으로 볼 수 있다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>메모리 주소 지정 방식 (Memory Address Modes)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-address-modes/</link><pubDate>Wed, 18 Dec 2024 08:04:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-address-modes/</guid><description>
&lt;h2>메모리 주소 지정 방식 (Memory Address Modes)&lt;span class="hx-absolute -hx-mt-20" id="메모리-주소-지정-방식-memory-address-modes">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ec%a3%bc%ec%86%8c-%ec%a7%80%ec%a0%95-%eb%b0%a9%ec%8b%9d-memory-address-modes" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>메모리 주소 지정 방식(Memory Address Modes)은 CPU가 메모리의 특정 위치에 어떻게 접근하는지를 나타내는 방법이다.&lt;/p>
&lt;h3>유형&lt;span class="hx-absolute -hx-mt-20" id="유형">&lt;/span>
&lt;a href="#%ec%9c%a0%ed%98%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>즉시 주소 지정 방식 (Immediate Addressing):&lt;/p>
&lt;ul>
&lt;li>데이터가 명령어 자체에 포함되어 있다.&lt;/li>
&lt;li>예: &amp;ldquo;5를 더해라&amp;rdquo; 라고 직접 지시하는 것과 같다.&lt;/li>
&lt;li>가장 빠르지만, 큰 데이터를 다루기 어렵다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>직접 주소 지정 방식 (Direct Addressing):&lt;/p>
&lt;ul>
&lt;li>명령어에 데이터가 있는 메모리 주소를 직접 지정한다.&lt;/li>
&lt;li>예: &amp;ldquo;주소 100번에 있는 값을 가져와라&amp;rdquo; 라고 지시하는 것과 같다.&lt;/li>
&lt;li>간단하고 이해하기 쉽다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>간접 주소 지정 방식 (Indirect Addressing):&lt;/p>
&lt;ul>
&lt;li>명령어에 주소를 담고 있는 메모리 위치를 지정한다.&lt;/li>
&lt;li>예: &amp;ldquo;주소 100번에 적힌 주소로 가서 그 값을 가져와라&amp;rdquo; 라고 지시하는 것과 같다.&lt;/li>
&lt;li>더 많은 메모리 위치에 접근할 수 있지만, 약간 복잡하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>인덱스 주소 지정 방식 (Indexed Addressing):&lt;/p>
&lt;ul>
&lt;li>기본 주소에 인덱스를 더해 실제 주소를 계산한다.&lt;/li>
&lt;li>예: &amp;ldquo;주소 100번부터 시작해서 3번째 위치의 값을 가져와라&amp;rdquo; 라고 지시하는 것과 같다.&lt;/li>
&lt;li>배열이나 리스트 같은 데이터 구조를 다룰 때 유용하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>System Call Interface</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/kernel/system-call-interface/</link><pubDate>Wed, 18 Dec 2024 03:21:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/kernel/system-call-interface/</guid><description>
&lt;h2>System Call Interface&lt;span class="hx-absolute -hx-mt-20" id="system-call-interface">&lt;/span>
&lt;a href="#system-call-interface" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>System Call Interface는 사용자 공간의 프로그램과 운영 체제 커널 사이의 중간 계층으로, 프로그램이 운영 체제의 서비스를 요청할 수 있게 해주는 인터페이스이다.&lt;/p>
&lt;p>
&lt;img src="../intro_system_call.webp" alt="System Call Interface" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.scaler.com/topics/operating-system/system-calls-in-operating-system/" target="_blank" rel="noopener">https://www.scaler.com/topics/operating-system/system-calls-in-operating-system/&lt;/a> _&lt;/p>
&lt;h3>역할&lt;span class="hx-absolute -hx-mt-20" id="역할">&lt;/span>
&lt;a href="#%ec%97%ad%ed%95%a0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>사용자 프로그램과 커널 사이의 추상화 계층 제공&lt;/li>
&lt;li>API 함수 호출을 시스템 콜로 변환&lt;/li>
&lt;li>사용자 모드에서 커널 모드로의 전환 관리&lt;/li>
&lt;/ul>
&lt;p>
&lt;img src="../Simplified_Structure_of_the_Linux_Kernel.svg.png" alt="Simplified illustration of the structure of the Linux kernel" loading="lazy" />&lt;br>
_Source: &lt;a href="https://ko.m.wikipedia.org/wiki/%ED%8C%8C%EC%9D%BC:Simplified_Structure_of_the_Linux_Kernel.svg" target="_blank" rel="noopener">https://ko.m.wikipedia.org/wiki/%ED%8C%8C%EC%9D%BC:Simplified_Structure_of_the_Linux_Kernel.svg&lt;/a> _&lt;/p>
&lt;h3>주요 유형&lt;span class="hx-absolute -hx-mt-20" id="주요-유형">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ec%9c%a0%ed%98%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>시스템 콜은 기능에 따라 여러 카테고리로 분류된다:&lt;/p>
&lt;ul>
&lt;li>프로세스 제어 (생성, 종료, 일시 중지 등)&lt;/li>
&lt;li>파일 관리 (열기, 읽기, 쓰기, 닫기 등)&lt;/li>
&lt;li>장치 관리 (입출력 작업)&lt;/li>
&lt;li>정보 유지 (시간, 날짜, 시스템 데이터 등)&lt;/li>
&lt;li>통신 (프로세스 간 통신)&lt;/li>
&lt;/ul>
&lt;h3>작동 방식&lt;span class="hx-absolute -hx-mt-20" id="작동-방식">&lt;/span>
&lt;a href="#%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>시스템 콜 인터페이스의 작동 방식은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>사용자 프로그램이 API 함수를 호출한다.&lt;/li>
&lt;li>시스템 콜 인터페이스가 이 API 함수 호출을 가로채고, 적절한 시스템 콜로 변환한다.&lt;/li>
&lt;li>소프트웨어 인터럽트나 특별한 명령어를 사용하여 사용자 모드에서 커널 모드로 전환한다.&lt;/li>
&lt;li>시스템 콜 번호와 매개변수를 이용해 해당하는 커널 함수를 식별하고 호출한다.&lt;/li>
&lt;li>커널이 요청된 서비스를 수행한다.&lt;/li>
&lt;li>작업이 완료되면 결과값을 준비하고, 사용자 모드로 다시 전환한다.&lt;/li>
&lt;li>시스템 콜 인터페이스가 결과를 사용자 프로그램에 반환한다.&lt;/li>
&lt;/ol>
&lt;p>이 과정을 통해 시스템 콜 인터페이스는 사용자 프로그램과 운영 체제 커널 사이의 안전하고 제어된 상호작용을 가능하게 합니다.&lt;/p>
&lt;h3>보안&lt;span class="hx-absolute -hx-mt-20" id="보안">&lt;/span>
&lt;a href="#%eb%b3%b4%ec%95%88" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>사용자 공간과 커널 공간 사이의 보안 경계 역할&lt;/li>
&lt;li>권한 검사 및 접근 제어 수행&lt;/li>
&lt;/ul>
&lt;h3>성능&lt;span class="hx-absolute -hx-mt-20" id="성능">&lt;/span>
&lt;a href="#%ec%84%b1%eb%8a%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>컨텍스트 스위칭 발생으로 인한 오버헤드 존재&lt;/li>
&lt;li>효율적인 설계로 성능 최적화 필요&lt;/li>
&lt;/ul>
&lt;h3>System Call Interface와 API 차이&lt;span class="hx-absolute -hx-mt-20" id="system-call-interface와-api-차이">&lt;/span>
&lt;a href="#system-call-interface%ec%99%80-api-%ec%b0%a8%ec%9d%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>시스템 콜 인터페이스와 API의 주요 차이점은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>추상화 수준:&lt;/p>
&lt;ul>
&lt;li>API는 더 높은 수준의 추상화를 제공하며, 개발자가 사용하기 쉬운 인터페이스를 제공한다.&lt;/li>
&lt;li>시스템 콜 인터페이스는 더 낮은 수준으로, 운영 체제 커널과 직접 상호 작용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>기능:&lt;/p>
&lt;ul>
&lt;li>API는 다양한 기능을 제공하며, 여러 시스템 콜을 조합하여 복잡한 작업을 수행할 수 있다.&lt;/li>
&lt;li>시스템 콜 인터페이스는 운영 체제의 기본적인 서비스에 대한 직접적인 접근을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>구현:&lt;/p>
&lt;ul>
&lt;li>API는 일반적으로 라이브러리 함수로 구현된다.&lt;/li>
&lt;li>시스템 콜 인터페이스는 운영 체제 커널의 일부로 구현된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>호출 방식:&lt;/p>
&lt;ul>
&lt;li>API 함수는 일반적인 함수 호출 방식으로 사용된다.&lt;/li>
&lt;li>시스템 콜은 소프트웨어 인터럽트나 특별한 명령어를 통해 호출된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>실행 모드:&lt;/p>
&lt;ul>
&lt;li>API 함수는 사용자 모드에서 실행된다.&lt;/li>
&lt;li>시스템 콜은 커널 모드로의 전환을 필요로 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>범위:&lt;/p>
&lt;ul>
&lt;li>API는 시스템 콜뿐만 아니라 다른 기능도 포함할 수 있다.&lt;/li>
&lt;li>시스템 콜 인터페이스는 오직 운영 체제 서비스에 대한 접근만을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Thrashing</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/thrashing/</link><pubDate>Wed, 18 Dec 2024 00:08:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/thrashing/</guid><description>
&lt;h2>스래싱 (Thrashing)&lt;span class="hx-absolute -hx-mt-20" id="스래싱-thrashing">&lt;/span>
&lt;a href="#%ec%8a%a4%eb%9e%98%ec%8b%b1-thrashing" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>스래싱은 운영체제에서 발생하는 성능 저하 현상으로, 프로세스의 실제 작업 시간보다 페이지 교체(페이징)에 더 많은 시간을 소비하는 현상을 말한다.&lt;/p>
&lt;p>이를 더 쉽게 이해하기 위해 실생활의 예시를 들어보자.&lt;br>
작은 책상에서 여러 개의 큰 책을 동시에 참고하며 공부하는 상황을 상상해보자.&lt;br>
책상이 너무 작아서 한 번에 펼칠 수 있는 책의 수가 제한적이라, 새로운 책을 보기 위해서는 기존에 펼쳐져 있던 책을 닫고 치워야 한다. 만약 연관된 내용을 위해 계속해서 다른 책을 번갈아가며 봐야 한다면, 실제 공부하는 시간보다 책을 꺼내고 넣는 시간이 더 많아질 것이다. 이것이 바로 컴퓨터에서 일어나는 스래싱 현상과 유사하다.&lt;/p>
&lt;h3>스래싱이 발생하는 과정&lt;span class="hx-absolute -hx-mt-20" id="스래싱이-발생하는-과정">&lt;/span>
&lt;a href="#%ec%8a%a4%eb%9e%98%ec%8b%b1%ec%9d%b4-%eb%b0%9c%ec%83%9d%ed%95%98%eb%8a%94-%ea%b3%bc%ec%a0%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시작 단계:&lt;/p>
&lt;ul>
&lt;li>시스템에서 다수의 프로세스가 실행된다.&lt;/li>
&lt;li>각 프로세스는 자신의 페이지를 메모리에 로드하려 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>메모리 부족 발생:&lt;/p>
&lt;ul>
&lt;li>실제 물리 메모리보다 더 많은 페이지가 요구된다.&lt;/li>
&lt;li>운영체제는 페이지 교체를 시작한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>스래싱 발생:&lt;/p>
&lt;ul>
&lt;li>한 프로세스의 페이지를 내보내면, 다른 프로세스가 그 공간을 사용한다.&lt;/li>
&lt;li>하지만 곧 이전 프로세스가 내보낸 페이지가 다시 필요하게 된다.&lt;/li>
&lt;li>이러한 과정이 계속해서 반복된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스래싱의 주요 특징과 영향&lt;span class="hx-absolute -hx-mt-20" id="스래싱의-주요-특징과-영향">&lt;/span>
&lt;a href="#%ec%8a%a4%eb%9e%98%ec%8b%b1%ec%9d%98-%ec%a3%bc%ec%9a%94-%ed%8a%b9%ec%a7%95%ea%b3%bc-%ec%98%81%ed%96%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시스템 성능:&lt;/p>
&lt;ul>
&lt;li>CPU 활용률이 급격히 감소합니다.&lt;/li>
&lt;li>디스크 I/O가 급증합니다.&lt;/li>
&lt;li>시스템 응답 시간이 현저히 늘어납니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>사용자 경험:`&lt;/p>
&lt;ul>
&lt;li>프로그램의 실행 속도가 매우 느려집니다.&lt;/li>
&lt;li>시스템이 멈춘 것처럼 보일 수 있습니다.&lt;/li>
&lt;li>전반적인 시스템 반응성이 떨어집니다.&lt;br>
`&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스래싱 해결을 위한 방법들&lt;span class="hx-absolute -hx-mt-20" id="스래싱-해결을-위한-방법들">&lt;/span>
&lt;a href="#%ec%8a%a4%eb%9e%98%ec%8b%b1-%ed%95%b4%ea%b2%b0%ec%9d%84-%ec%9c%84%ed%95%9c-%eb%b0%a9%eb%b2%95%eb%93%a4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>예방적 접근:&lt;/p>
&lt;ul>
&lt;li>적절한 메모리 할당 정책 수립&lt;/li>
&lt;li>프로세스 수의 제한&lt;/li>
&lt;li>작업 세트(Working Set) 모델 적용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>대응적 접근:&lt;/p>
&lt;ul>
&lt;li>페이지 부재 빈도(PFF) 모니터링&lt;/li>
&lt;li>로컬 교체 정책 사용&lt;/li>
&lt;li>메모리 증설 고려&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>운영체제 레벨의 해결책:&lt;/p>
&lt;ul>
&lt;li>프로세스 우선순위 조정&lt;/li>
&lt;li>페이지 교체 알고리즘 최적화&lt;/li>
&lt;li>메모리 관리 정책 개선&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스래싱을 모니터링하는 방법&lt;span class="hx-absolute -hx-mt-20" id="스래싱을-모니터링하는-방법">&lt;/span>
&lt;a href="#%ec%8a%a4%eb%9e%98%ec%8b%b1%ec%9d%84-%eb%aa%a8%eb%8b%88%ed%84%b0%eb%a7%81%ed%95%98%eb%8a%94-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시스템 지표 관찰:&lt;/p>
&lt;ul>
&lt;li>페이지 폴트(Page Fault) 발생 빈도&lt;/li>
&lt;li>CPU 사용률 변화&lt;/li>
&lt;li>디스크 I/O 활동량&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 모니터링 도구 사용:&lt;/p>
&lt;ul>
&lt;li>운영체제의 성능 모니터&lt;/li>
&lt;li>리소스 모니터링 툴&lt;/li>
&lt;li>시스템 로그 분석&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스래싱 예방을 위한 실용적인 팁&lt;span class="hx-absolute -hx-mt-20" id="스래싱-예방을-위한-실용적인-팁">&lt;/span>
&lt;a href="#%ec%8a%a4%eb%9e%98%ec%8b%b1-%ec%98%88%eb%b0%a9%ec%9d%84-%ec%9c%84%ed%95%9c-%ec%8b%a4%ec%9a%a9%ec%a0%81%ec%9d%b8-%ed%8c%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>프로그램 설계 시:&lt;/p>
&lt;ul>
&lt;li>메모리 사용량을 최적화합니다.&lt;/li>
&lt;li>필요한 데이터만 메모리에 로드합니다.&lt;/li>
&lt;li>효율적인 메모리 관리 기법을 사용합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>시스템 운영 시:&lt;/p>
&lt;ul>
&lt;li>적절한 가상 메모리 크기를 설정합니다.&lt;/li>
&lt;li>동시 실행 프로세스 수를 제한합니다.&lt;/li>
&lt;li>주기적인 시스템 모니터링을 수행합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Kernel</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/kernel/</link><pubDate>Sun, 15 Dec 2024 16:06:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/kernel/</guid><description>
&lt;h2>커널 (Kernel)&lt;span class="hx-absolute -hx-mt-20" id="커널-kernel">&lt;/span>
&lt;a href="#%ec%bb%a4%eb%84%90-kernel" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>운영 체제의 커널은 컴퓨터 시스템의 핵심 구성 요소로, 하드웨어와 소프트웨어 간의 중개자 역할을 수행하며, 시스템의 가장 핵심적인 기능들을 담당한다.&lt;br>
일반 사용자가 직접 접근할 수 없는 커널은 운영체제의 가장 하위 계층에 위치하여 시스템의 안정성과 보안을 보장한다.&lt;/p>
&lt;p>&lt;img src="ditaa-12614a4afe93c9e1ae68861a79f14afe4f3e4b3e.png" alt="Kernel" loading="lazy" />&lt;br>
&lt;em>Source: &lt;a href="https://linux-kernel-labs.github.io/refs/pull/183/merge/lectures/intro.html" target="_blank" rel="noopener">https://linux-kernel-labs.github.io/refs/pull/183/merge/lectures/intro.html&lt;/a>&lt;/em>&lt;/p>
&lt;p>커널은 운영 체제의 핵심으로, 컴퓨터 시스템의 효율적인 운영과 관리를 담당하는 중요한 구성 요소이다.&lt;br>
현대의 복잡한 컴퓨팅 환경에서 커널의 역할은 더욱 중요해지고 있으며, 지속적인 발전과 최적화가 이루어지고 있다.&lt;/p>
&lt;p>장점:&lt;/p>
&lt;ul>
&lt;li>하드웨어 자원의 효율적 관리&lt;/li>
&lt;li>시스템의 안정성과 보안성 향상&lt;/li>
&lt;li>응용 프로그램 개발의 용이성 제공&lt;/li>
&lt;/ul>
&lt;p>단점:&lt;/p>
&lt;ul>
&lt;li>복잡성으로 인한 개발 및 유지보수의 어려움&lt;/li>
&lt;li>단일형 커널의 경우 한 부분의 오류가 전체 시스템에 영향을 줄 수 있음&lt;/li>
&lt;/ul>
&lt;h3>커널의 정의와 역할&lt;span class="hx-absolute -hx-mt-20" id="커널의-정의와-역할">&lt;/span>
&lt;a href="#%ec%bb%a4%eb%84%90%ec%9d%98-%ec%a0%95%ec%9d%98%ec%99%80-%ec%97%ad%ed%95%a0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>커널은 운영 체제의 가장 핵심적인 부분으로, 항상 메모리에 상주하며 다음과 같은 역할을 수행한다:&lt;/p>
&lt;ol>
&lt;li>하드웨어 자원 관리: CPU, 메모리, 입출력 장치 등의 하드웨어 자원을 효율적으로 관리한다.&lt;/li>
&lt;li>프로세스 관리: 프로세스의 생성, 실행, 종료 및 스케줄링을 담당한다.&lt;/li>
&lt;li>메모리 관리: 프로세스에 메모리를 할당하고 가상 메모리를 관리한다.&lt;/li>
&lt;li>파일 시스템 관리: 데이터의 저장과 접근을 위한 인터페이스를 제공한다.&lt;/li>
&lt;li>입출력 관리: 다양한 입출력 장치와의 통신을 관리한다.&lt;/li>
&lt;li>프로세스 간 통신 관리: 프로세스 간의 데이터 교환과 동기화를 지원한다.&lt;/li>
&lt;/ol>
&lt;h3>커널의 종류&lt;span class="hx-absolute -hx-mt-20" id="커널의-종류">&lt;/span>
&lt;a href="#%ec%bb%a4%eb%84%90%ec%9d%98-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>커널은 구조에 따라 여러 종류로 나눌 수 있다:&lt;/p>
&lt;ol>
&lt;li>단일형 커널(Monolithic Kernel): 모든 시스템 서비스가 하나의 큰 커널 안에서 동작한다.&lt;br>
예: Linux, Unix&lt;/li>
&lt;li>마이크로커널(Microkernel): 최소한의 기능만 커널에 포함하고, 나머지는 사용자 공간에서 실행된다.&lt;/li>
&lt;li>혼합형 커널(Hybrid Kernel): 단일형과 마이크로커널의 특징을 결합한 형태&lt;/li>
&lt;li>엑소커널(Exokernel): 하드웨어 자원에 대한 최소한의 추상화만 제공한다.&lt;/li>
&lt;/ol>
&lt;h3>커널의 동작 방식&lt;span class="hx-absolute -hx-mt-20" id="커널의-동작-방식">&lt;/span>
&lt;a href="#%ec%bb%a4%eb%84%90%ec%9d%98-%eb%8f%99%ec%9e%91-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>커널은 다음과 같은 방식으로 동작한다:&lt;/p>
&lt;ol>
&lt;li>시스템 콜 인터페이스: 응용 프로그램이 커널의 기능을 사용할 수 있게 해주는 인터페이스.&lt;/li>
&lt;li>보호 모드: 커널 모드와 사용자 모드로 나누어 시스템 자원을 보호한다.&lt;/li>
&lt;li>하드웨어 추상화: 다양한 하드웨어를 일관된 방식으로 다룰 수 있게 해준다.&lt;/li>
&lt;/ol>
&lt;h3>커널의 보호 메커니즘&lt;span class="hx-absolute -hx-mt-20" id="커널의-보호-메커니즘">&lt;/span>
&lt;a href="#%ec%bb%a4%eb%84%90%ec%9d%98-%eb%b3%b4%ed%98%b8-%eb%a9%94%ec%bb%a4%eb%8b%88%ec%a6%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>보호 링(protection ring)&lt;span class="hx-absolute -hx-mt-20" id="보호-링protection-ring">&lt;/span>
&lt;a href="#%eb%b3%b4%ed%98%b8-%eb%a7%81protection-ring" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>운영체제에서 시스템 자원과 하드웨어에 대한 접근을 제어하고 보호하기 위한 계층적 보안 메커니즘.&lt;br>
이 메커니즘은 컴퓨터 시스템의 안정성과 보안성을 향상시키는 데 중요한 역할을 한다.&lt;/p>
&lt;p>보호 링은 CPU의 권한 상태를 나타내는 특권 레벨을 동심원 형태로 표현한 것이다.&lt;br>
이 구조는 다음과 같은 목적을 가진다:&lt;/p>
&lt;ol>
&lt;li>시스템 자원에 대한 접근 제어&lt;/li>
&lt;li>컴퓨터 보안 강화&lt;/li>
&lt;li>시스템 안정성 향상&lt;/li>
&lt;li>결함 내성 개선&lt;/li>
&lt;/ol>
&lt;h5>보호 링의 중요성&lt;span class="hx-absolute -hx-mt-20" id="보호-링의-중요성">&lt;/span>
&lt;a href="#%eb%b3%b4%ed%98%b8-%eb%a7%81%ec%9d%98-%ec%a4%91%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;ol>
&lt;li>보안 강화: 악의적인 프로그램이 중요한 시스템 자원에 직접 접근하는 것을 방지한다.&lt;/li>
&lt;li>안정성 향상: 사용자 애플리케이션의 오류가 전체 시스템에 영향을 미치는 것을 막는다.&lt;/li>
&lt;li>자원 관리: 운영체제가 시스템 자원을 효율적으로 관리할 수 있게 한다.&lt;/li>
&lt;li>호환성 유지: 다양한 하드웨어 플랫폼에서 일관된 보안 모델을 제공한다.&lt;/li>
&lt;/ol>
&lt;h5>보호 링의 작동 방식&lt;span class="hx-absolute -hx-mt-20" id="보호-링의-작동-방식">&lt;/span>
&lt;a href="#%eb%b3%b4%ed%98%b8-%eb%a7%81%ec%9d%98-%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;ol>
&lt;li>프로세스 실행 시 특정 링 레벨이 할당된다.&lt;/li>
&lt;li>각 링 레벨에 따라 실행 가능한 명령어와 접근 가능한 자원이 제한된다.&lt;/li>
&lt;li>하위 링에서 상위 링의 자원에 접근하려면 시스템 콜을 통해 요청해야 한다.&lt;/li>
&lt;li>운영체제는 권한 위반 시도를 감지하고 차단한다.&lt;/li>
&lt;/ol>
&lt;h5>보호 링의 구조&lt;span class="hx-absolute -hx-mt-20" id="보호-링의-구조">&lt;/span>
&lt;a href="#%eb%b3%b4%ed%98%b8-%eb%a7%81%ec%9d%98-%ea%b5%ac%ec%a1%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>일반적으로 보호 링은 0부터 3까지 4개의 레벨로 구성된다:&lt;/p>
&lt;ul>
&lt;li>Ring 0 (가장 높은 권한)
&lt;ul>
&lt;li>운영체제 커널&lt;/li>
&lt;li>드라이버 관리&lt;/li>
&lt;li>하드웨어 직접 접근&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ring 1
&lt;ul>
&lt;li>장치 드라이버&lt;/li>
&lt;li>일부 시스템 서비스&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ring 2
&lt;ul>
&lt;li>장치 드라이버&lt;/li>
&lt;li>특권 유틸리티&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ring 3 (가장 낮은 권한)
&lt;ul>
&lt;li>사용자 애플리케이션&lt;/li>
&lt;li>일반 프로그램&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>숫자가 낮을수록 더 높은 권한을 가지며, 상위 링은 하위 링의 모든 권한을 포함한다.&lt;/p>
&lt;h4>시스템 호출(system call)&lt;span class="hx-absolute -hx-mt-20" id="시스템-호출system-call">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%ed%98%b8%ec%b6%9csystem-call" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>운영체제의 커널이 제공하는 서비스를 사용자 프로그램이 요청하는 방법.&lt;br>
사용자 프로그램이 직접 수행할 수 없는 보안이 필요한 작업들(파일 접근, 입출력 작업 등)을 운영체제에게 요청하여 수행하는 것이다.&lt;/p>
&lt;h5>중요성&lt;span class="hx-absolute -hx-mt-20" id="중요성">&lt;/span>
&lt;a href="#%ec%a4%91%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>시스템 콜은 다음과 같은 이유로 중요하다.&lt;/p>
&lt;ol>
&lt;li>보안 강화: 사용자 프로그램의 직접적인 하드웨어 접근을 제한하여 시스템 보안을 강화한다.&lt;/li>
&lt;li>추상화 제공: 복잡한 하드웨어 동작을 간단한 인터페이스로 추상화하여 프로그래밍을 용이하게 한다.&lt;/li>
&lt;li>자원 관리: 운영체제가 시스템 자원을 효율적으로 관리할 수 있게 한다.&lt;/li>
&lt;li>호환성 유지: 다양한 하드웨어 플랫폼에서 일관된 인터페이스를 제공하여 소프트웨어의 호환성을 높인다.&lt;/li>
&lt;/ol>
&lt;h5>목적&lt;span class="hx-absolute -hx-mt-20" id="목적">&lt;/span>
&lt;a href="#%eb%aa%a9%ec%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;ol>
&lt;li>하드웨어 자원 접근: 응용 프로그램이 파일 시스템, 네트워크 장치, 기타 하드웨어 등에 안전하게 접근할 수 있도록 한다.&lt;/li>
&lt;li>보안 유지: 사용자 프로그램이 직접 시스템 자원에 접근하는 것을 방지하여 시스템의 안정성과 보안을 유지한다.&lt;/li>
&lt;li>추상화 제공: 복잡한 하드웨어 동작을 간단한 인터페이스로 추상화하여 프로그래머의 작업을 용이하게 한다.&lt;/li>
&lt;/ol>
&lt;h5>작동 방식&lt;span class="hx-absolute -hx-mt-20" id="작동-방식">&lt;/span>
&lt;a href="#%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>시스템 콜이 호출되면 다음과 같은 과정이 진행된다:&lt;/p>
&lt;ol>
&lt;li>응용 프로그램이 시스템 콜을 호출한다.&lt;/li>
&lt;li>프로세서가 사용자 모드에서 커널 모드로 전환된다.&lt;/li>
&lt;li>커널이 요청된 서비스를 수행한다.&lt;/li>
&lt;li>서비스 완료 후, 프로세서가 다시 사용자 모드로 전환된다.&lt;/li>
&lt;li>응용 프로그램이 실행을 계속한다.&lt;/li>
&lt;/ol>
&lt;h5>주요 시스템 콜 유형&lt;span class="hx-absolute -hx-mt-20" id="주요-시스템-콜-유형">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ec%8b%9c%ec%8a%a4%ed%85%9c-%ec%bd%9c-%ec%9c%a0%ed%98%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>시스템 콜은 다음과 같은 주요 유형으로 분류될 수 있다:&lt;/p>
&lt;ol>
&lt;li>프로세스 제어: 프로세스 생성, 종료, 대기 등 (예: fork(), exit(), wait())&lt;/li>
&lt;li>파일 관리: 파일 열기, 읽기, 쓰기, 닫기 등 (예: open(), read(), write(), close())&lt;/li>
&lt;li>장치 관리: 장치 연결, 해제, 읽기, 쓰기 등&lt;/li>
&lt;li>정보 유지: 시간, 날짜 설정, 시스템 데이터 획득 등&lt;/li>
&lt;li>통신: 프로세스 간 통신, 네트워크 통신 등&lt;/li>
&lt;/ol>
&lt;h3>커널의 발전과 현대적 특징&lt;span class="hx-absolute -hx-mt-20" id="커널의-발전과-현대적-특징">&lt;/span>
&lt;a href="#%ec%bb%a4%eb%84%90%ec%9d%98-%eb%b0%9c%ec%a0%84%ea%b3%bc-%ed%98%84%eb%8c%80%ec%a0%81-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>실시간 성능:&lt;br>
현대의 커널들은 실시간 처리 능력을 강화하고 있다.&lt;br>
특히 임베디드 시스템이나 산업용 제어 시스템에서는 이러한 특성이 매우 중요하다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>가상화 지원:&lt;br>
하드웨어 가상화를 지원하여 여러 운영체제를 동시에 실행할 수 있게 한다.&lt;br>
이는 클라우드 컴퓨팅의 기반이 되었다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>전력 관리:&lt;br>
현대의 커널은 CPU 주파수 조절, 디바이스 전원 관리 등을 통해 에너지 효율성을 최적화한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>커널의 발전 방향 커널은 계속해서 진화하고 있으며, 특히 다음과 같은 방향으로 발전하고 있다:&lt;/p>
&lt;ol>
&lt;li>보안 강화: 새로운 보안 위협에 대응하기 위한 기능 강화&lt;/li>
&lt;li>확장성 개선: 더 많은 코어와 더 큰 메모리를 효율적으로 관리&lt;/li>
&lt;li>실시간 성능 향상: 더 빠른 응답 시간과 예측 가능한 성능 제공&lt;/li>
&lt;li>클라우드 최적화: 가상화와 컨테이너 지원 강화&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>인터럽트 (Interrupt)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/interrupt/</link><pubDate>Fri, 06 Dec 2024 06:50:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/interrupt/</guid><description>
&lt;h2>인터럽트 (Interrupt)&lt;span class="hx-absolute -hx-mt-20" id="인터럽트-interrupt">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8-interrupt" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>CPU가 프로그램을 실행하고 있을 때, 예상치 못한 상황이나 특정 이벤트가 발생하여 처리가 필요한 경우 CPU에게 알려 처리할 수 있도록 하는 메커니즘.&lt;br>
하드웨어나 소프트웨어에 의해 발생할 수 있으며, 운영 체제가 다양한 이벤트에 효율적으로 대응할 수 있게 해준다.&lt;/p>
&lt;p>인터럽트는 프로세서에게 현재 실행 중인 코드를 중단하고 특정 이벤트를 처리하도록 요청하는 신호이다.&lt;/p>
&lt;p>이를 통해 운영 체제는 다음과 같은 목적을 달성할 수 있다:&lt;/p>
&lt;ol>
&lt;li>비동기적 이벤트 처리&lt;/li>
&lt;li>시스템 자원의 효율적 관리&lt;/li>
&lt;li>실시간 응답성 향상&lt;/li>
&lt;li>멀티태스킹 지원&lt;/li>
&lt;/ol>
&lt;h3>인터럽트 관련 주요 개념&lt;span class="hx-absolute -hx-mt-20" id="인터럽트-관련-주요-개념">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8-%ea%b4%80%eb%a0%a8-%ec%a3%bc%ec%9a%94-%ea%b0%9c%eb%85%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>인터럽트 벡터: 각 인터럽트 유형별로 실행될 처리 루틴의 주소를 담고 있는 테이블.&lt;/li>
&lt;li>인터럽트 마스킹: 특정 인터럽트를 일시적으로 무시하도록 설정하는 기능. 중요한 작업 수행 중에 방해받지 않기 위해 사용된다.&lt;/li>
&lt;li>인터럽트 지연: 우선순위가 높은 인터럽트 처리를 위해 현재 처리 중인 인터럽트를 지연시키는 것.&lt;/li>
&lt;li>인터럽트 핸들러(ISR): 인터럽트 발생 시 실행되는 특별한 코드 블록으로 다음과 같은 역할을 수행한다.&lt;br>
1. 인터럽트 처리: 인터럽트의 원인을 파악하고 적절한 대응을 수행한다.&lt;br>
2. 신속한 대응: 시간에 민감한 이벤트를 즉각적으로 처리하여 시스템의 반응성을 유지한다.&lt;br>
3. 컨텍스트 전환: 현재 실행 중인 프로세스의 상태를 저장하고, 인터럽트 처리 후 원래 상태로 복원한다.&lt;br>
4. 하드웨어 상태 관리: 인터럽트 플래그를 적절히 설정하여 하드웨어 상태를 관리한다.&lt;/li>
&lt;/ul>
&lt;h3>인터럽트의 중요성&lt;span class="hx-absolute -hx-mt-20" id="인터럽트의-중요성">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8%ec%9d%98-%ec%a4%91%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>인터럽트는 다음과 같은 이유로 운영 체제에서 중요한 역할을 한다:&lt;/p>
&lt;ol>
&lt;li>실시간 이벤트 처리: 외부 장치의 요청에 신속하게 대응할 수 있다.&lt;/li>
&lt;li>시스템 효율성 향상: 폴링 방식에 비해 CPU 자원을 효율적으로 사용할 수 있다.&lt;/li>
&lt;li>멀티태스킹 지원: 여러 프로세스 간의 빠른 전환을 가능하게 한다.&lt;/li>
&lt;li>예외 상황 처리: 시스템 오류나 예외 상황에 대응할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>인터럽트 처리 과정&lt;span class="hx-absolute -hx-mt-20" id="인터럽트-처리-과정">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8-%ec%b2%98%eb%a6%ac-%ea%b3%bc%ec%a0%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>인터럽트가 발생하면 다음과 같은 순서로 처리된다.&lt;/p>
&lt;ol>
&lt;li>인터럽트 발생 시 CPU는 현재 작업을 중단한다.&lt;/li>
&lt;li>현재 프로세스의 상태를 PCB(Process Control Block)에 저장한다.&lt;/li>
&lt;li>프로세서 모드를 커널 모드로 전환&lt;/li>
&lt;li>인터럽트 벡터 테이블을 참조하여 적절한 인터럽트 서비스 루틴(ISR: Interrupt Service Routine) 위치 확인&lt;/li>
&lt;li>인터럽트 서비스 루틴(ISR: Interrupt Service Routine) 실행&lt;/li>
&lt;li>인터럽트 처리 완료 후 원래 프로세스로 복귀&lt;/li>
&lt;/ol>
&lt;h3>인터럽트의 종류&lt;span class="hx-absolute -hx-mt-20" id="인터럽트의-종류">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8%ec%9d%98-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>인터럽트는 크게 두 가지로 분류된다.&lt;/p>
&lt;h4>하드웨어 인터럽트&lt;span class="hx-absolute -hx-mt-20" id="하드웨어-인터럽트">&lt;/span>
&lt;a href="#%ed%95%98%eb%93%9c%ec%9b%a8%ec%96%b4-%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>외부 장치에 의해 발생하는 인터럽트로, 다음과 같은 예가 있다:&lt;/p>
&lt;ul>
&lt;li>키보드 입력&lt;/li>
&lt;li>마우스 움직임&lt;/li>
&lt;li>타이머 인터럽트&lt;/li>
&lt;li>I/O 장치의 데이터 전송 완료&lt;/li>
&lt;/ul>
&lt;p>하드웨어 인터럽트는 다시 마스크 가능 인터럽트와 마스크 불가능 인터럽트로 나뉜다.&lt;/p>
&lt;h4>소프트웨어 인터럽트&lt;span class="hx-absolute -hx-mt-20" id="소프트웨어-인터럽트">&lt;/span>
&lt;a href="#%ec%86%8c%ed%94%84%ed%8a%b8%ec%9b%a8%ec%96%b4-%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>프로그램 실행 중 발생하는 인터럽트로, 다음과 같은 경우에 발생한다:&lt;/p>
&lt;ul>
&lt;li>시스템 호출(system call)&lt;/li>
&lt;li>0으로 나누기 등의 예외 상황&lt;/li>
&lt;li>프로그램 오류&lt;/li>
&lt;li>특정 명령어 실행 (예: 인터럽트 명령어)&lt;/li>
&lt;/ul>
&lt;h3>인터럽트 우선순위&lt;span class="hx-absolute -hx-mt-20" id="인터럽트-우선순위">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8-%ec%9a%b0%ec%84%a0%ec%88%9c%ec%9c%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>모든 인터럽트가 동일한 중요도를 가지지 않는다.&lt;/p>
&lt;p>일반적인 우선순위는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>전원 이상 인터럽트 (가장 높음)&lt;/li>
&lt;li>기계 착오 인터럽트&lt;/li>
&lt;li>외부 인터럽트&lt;/li>
&lt;li>입출력 인터럽트&lt;/li>
&lt;li>프로그램 검사 인터럽트 (가장 낮음)&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>데커 알고리즘 (Dekker's Algorithm)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/dekkers-algorithm/</link><pubDate>Sat, 30 Nov 2024 10:47:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/dekkers-algorithm/</guid><description>
&lt;h2>데커 알고리즘 (Dekker&amp;rsquo;s Algorithm)&lt;span class="hx-absolute -hx-mt-20" id="데커-알고리즘-dekkers-algorithm">&lt;/span>
&lt;a href="#%eb%8d%b0%ec%bb%a4-%ec%95%8c%ea%b3%a0%eb%a6%ac%ec%a6%98-dekkers-algorithm" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>램포트의 빵집 알고리즘 (Lamport's Bakery Algorithm)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/lamports-bakery-algorithm/</link><pubDate>Sat, 30 Nov 2024 10:47:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/lamports-bakery-algorithm/</guid><description>
&lt;h2>램포트의 빵집 알고리즘 (Lamport&amp;rsquo;s Bakery Algorithm)&lt;span class="hx-absolute -hx-mt-20" id="램포트의-빵집-알고리즘-lamports-bakery-algorithm">&lt;/span>
&lt;a href="#%eb%9e%a8%ed%8f%ac%ed%8a%b8%ec%9d%98-%eb%b9%b5%ec%a7%91-%ec%95%8c%ea%b3%a0%eb%a6%ac%ec%a6%98-lamports-bakery-algorithm" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>피터슨 알고리즘 (Peterson's Algorithm)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/petersons-algorithm/</link><pubDate>Sat, 30 Nov 2024 10:47:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/petersons-algorithm/</guid><description>
&lt;h2>피터슨 알고리즘 (Peterson&amp;rsquo;s Algorithm)&lt;span class="hx-absolute -hx-mt-20" id="피터슨-알고리즘-petersons-algorithm">&lt;/span>
&lt;a href="#%ed%94%bc%ed%84%b0%ec%8a%a8-%ec%95%8c%ea%b3%a0%eb%a6%ac%ec%a6%98-petersons-algorithm" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Mutex</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/mutex/</link><pubDate>Thu, 28 Nov 2024 11:00:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/mutex/</guid><description>
&lt;h2>Mutex&lt;span class="hx-absolute -hx-mt-20" id="mutex">&lt;/span>
&lt;a href="#mutex" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Mutex(Mutual Exclusion)는 공유 자원에 대한 접근을 동기화하는 객체.&lt;br>
한 번에 하나의 스레드만이 Mutex를 소유할 수 있으며, 소유권 개념이 있어 Mutex를 획득한 스레드만이 이를 해제할 수 있다.&lt;/p>
&lt;p>
&lt;img src="../mutex-locks.webp" alt="Mutex" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/std-mutex-in-cpp/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/std-mutex-in-cpp/&lt;/a> _&lt;/p>
&lt;h3>주요 특징&lt;span class="hx-absolute -hx-mt-20" id="주요-특징">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>두 가지 상태(잠김/열림)를 가집니다.&lt;/li>
&lt;li>한 번에 하나의 스레드만 소유할 수 있습니다.&lt;/li>
&lt;li>소유한 스레드만이 잠금을 해제할 수 있습니다.&lt;/li>
&lt;/ol>
&lt;h3>Mutex의 종류&lt;span class="hx-absolute -hx-mt-20" id="mutex의-종류">&lt;/span>
&lt;a href="#mutex%ec%9d%98-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>일반 Mutex (Normal Mutex)&lt;span class="hx-absolute -hx-mt-20" id="일반-mutex-normal-mutex">&lt;/span>
&lt;a href="#%ec%9d%bc%eb%b0%98-mutex-normal-mutex" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>가장 기본적인 형태의 Mutex.&lt;br>
단순한 상호 배제 기능을 제공하며, 재진입이 불가능하다.&lt;br>
가장 빠른 성능을 제공하지만 우선순위 상속과 같은 고급 기능은 지원하지 않는다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">BankAccount&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">RLock&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># Python에서는 RLock을 사용하여 Mutex 구현&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">transfer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">target_account&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Mutex를 획득한 스레드만이 해제할 수 있음&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">amount&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">target_account&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">deposit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Transferred &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Insufficient funds&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 반드시 같은 스레드에서 해제해야 함&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>재진입 가능한 Mutex (Recursive Mutex)&lt;span class="hx-absolute -hx-mt-20" id="재진입-가능한-mutex-recursive-mutex">&lt;/span>
&lt;a href="#%ec%9e%ac%ec%a7%84%ec%9e%85-%ea%b0%80%eb%8a%a5%ed%95%9c-mutex-recursive-mutex" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>같은 스레드가 여러 번 획득할 수 있는 Mutex.&lt;br>
내부적으로 잠금 횟수를 카운트하며, 모든 잠금이 해제되어야 완전히 해제된다.&lt;br>
주로 재귀적 알고리즘이나 중첩된 함수 호출에서 사용된다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">RecursiveCounter&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recursive_mutex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">RLock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">increment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 같은 스레드가 여러 번 획득 가능&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">recursive_mutex&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Level &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">level&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">level&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 재귀적 호출&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">increment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">level&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 사용 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RecursiveCounter&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">counter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">increment&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 한 스레드가 여러 번 Mutex 획득&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>오류 검사 Mutex (Error Checking Mutex)&lt;span class="hx-absolute -hx-mt-20" id="오류-검사-mutex-error-checking-mutex">&lt;/span>
&lt;a href="#%ec%98%a4%eb%a5%98-%ea%b2%80%ec%82%ac-mutex-error-checking-mutex" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>추가적인 오류 검사 기능을 제공하는 Mutex.&lt;br>
잠금 해제되지 않은 Mutex의 재잠금, 다른 스레드가 소유한 Mutex의 해제 시도 등을 감지하고 에러를 발생시킨다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ErrorCheckingMutex&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">RLock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">owner&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">current_thread&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Mutex already owned by current thread&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">current_thread&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">owner&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">current_thread&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Mutex can only be released by owner thread&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>우선순위 상속 Mutex (Priority Inheritance Mutex)&lt;span class="hx-absolute -hx-mt-20" id="우선순위-상속-mutex-priority-inheritance-mutex">&lt;/span>
&lt;a href="#%ec%9a%b0%ec%84%a0%ec%88%9c%ec%9c%84-%ec%83%81%ec%86%8d-mutex-priority-inheritance-mutex" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>우선순위 역전 문제를 해결하기 위한 Mutex.&lt;br>
우선순위가 높은 태스크가 대기 중일 때 현재 Mutex를 소유한 태스크의 우선순위를 일시적으로 높인다.&lt;br>
실시간 시스템에서 중요하다.&lt;br>
구현이 복잡하고 오버헤드가 크다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PriorityTask&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">priority&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">priority&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">RLock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">original_priority&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">priority&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 현재 스레드의 우선순위를 상속받음&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_priority&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">current_thread&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">current_thread&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_priority&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 작업 수행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Executing with priority &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">current_priority&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 원래 우선순위로 복구&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">current_thread&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">original_priority&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>시간 제한 Mutex (Timed Mutex)&lt;span class="hx-absolute -hx-mt-20" id="시간-제한-mutex-timed-mutex">&lt;/span>
&lt;a href="#%ec%8b%9c%ea%b0%84-%ec%a0%9c%ed%95%9c-mutex-timed-mutex" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>지정된 시간 동안만 잠금을 시도하는 mutex.&lt;br>
지정된 시간 내에 잠금을 획득하지 못하면 실패를 반환한다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">datetime&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">datetime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">timedelta&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Optional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">TimedMutex&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 기본적인 내부 잠금 메커니즘&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 현재 잠금을 소유한 스레드의 ID&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 잠금이 획득된 시간&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_acquire_time&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 잠금 상태를 추적하는 플래그&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_locked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">float&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 주어진 타임아웃 시간 내에 뮤텍스 잠금을 획득하려고 시도합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> timeout (float): 최대 대기 시간(초). None이면 무한정 대기
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Returns:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> bool: 잠금 획득 성공 여부
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">start_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 타임아웃 체크&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">timeout&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start_time&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">total_seconds&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 잠금 획득 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_try_acquire&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 짧은 대기 후 재시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.001&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">_try_acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 논블로킹 방식으로 잠금 획득을 시도합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 비차단 모드로 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_acquire_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_locked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 뮤텍스 잠금을 해제합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 잘못된 스레드가 해제를 시도하면 예외가 발생합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_locked&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;잠금이 해제된 뮤텍스입니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;다른 스레드가 소유한 뮤텍스입니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_acquire_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_locked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">locked&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;현재 잠금 상태를 반환합니다.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_locked&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">hold_time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">float&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 현재 잠금이 유지된 시간(초)을 반환합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 잠금이 해제된 상태면 None을 반환합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_locked&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_acquire_time&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_acquire_time&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">total_seconds&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 사용 예시를 위한 공유 리소스 클래스&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SharedResource&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TimedMutex&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">update_value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">new_value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">float&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 타임아웃을 사용하여 값을 안전하게 업데이트합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Returns:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> bool: 업데이트 성공 여부
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">timeout&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;스레드 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">: 타임아웃 발생&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;스레드 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">: 값 업데이트 중…&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 작업 시뮬레이션&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">worker&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">resource&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">SharedResource&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sleep_time&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">float&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;작업자 스레드 함수&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sleep_time&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 의도적인 지연&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">success&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">update_value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thread_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">success&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;스레드 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">thread_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">: 값 업데이트 성공 (새 값: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">)&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;스레드 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">thread_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">: 값 업데이트 실패&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 공유 리소스 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">resource&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SharedResource&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 여러 스레드 생성 및 실행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 각 스레드에 다른 시작 지연 시간을 줌&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">worker&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">resource&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 모든 스레드 완료 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">thread&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;최종 값: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>구현 내용
&lt;ul>
&lt;li>&lt;strong>타임아웃 메커니즘&lt;/strong>:
&lt;ul>
&lt;li>&lt;code>acquire&lt;/code> 메서드는 지정된 시간 동안만 잠금 획득을 시도한다.&lt;/li>
&lt;li>시간 초과 시 False를 반환하여 호출자가 적절히 대응할 수 있게 한다.&lt;/li>
&lt;li>무한 대기를 방지하여 데드락 상황을 피할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>안전성 기능&lt;/strong>:
&lt;ul>
&lt;li>소유자 스레드 추적으로 잘못된 해제를 방지한다.&lt;/li>
&lt;li>잠금 시간 추적으로 디버깅과 모니터링이 가능하다.&lt;/li>
&lt;li>try-finally 구문으로 안전한 잠금 해제를 보장한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>모니터링 기능&lt;/strong>:
&lt;ul>
&lt;li>&lt;code>locked()&lt;/code> 메서드로 현재 잠금 상태를 확인할 수 있다.&lt;/li>
&lt;li>&lt;code>hold_time()&lt;/code> 메서드로 잠금 유지 시간을 확인할 수 있다.&lt;/li>
&lt;li>상세한 로깅으로 문제 진단이 용이하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>사용자 친화적 인터페이스&lt;/strong>:
&lt;ul>
&lt;li>간단하고 직관적인 API를 제공한다.&lt;/li>
&lt;li>예외 처리를 통한 명확한 에러 메시지를 제공한다.&lt;/li>
&lt;li>타입 힌팅으로 코드의 가독성을 높임.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4>적응형 Mutex (Adaptive Mutex)&lt;span class="hx-absolute -hx-mt-20" id="적응형-mutex-adaptive-mutex">&lt;/span>
&lt;a href="#%ec%a0%81%ec%9d%91%ed%98%95-mutex-adaptive-mutex" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>시스템 부하에 따라 동작 방식을 자동으로 조절하는 Mutex.&lt;br>
짧은 대기 시간에는 스핀락처럼 동작하고, 긴 대기 시간에는 일반 mutex처럼 동작한다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">queue&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Queue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">random&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">AdaptiveMutex&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">spin_count_threshold&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 기본적인 잠금 메커니즘&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 스핀락 카운트를 위한 임계값&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spin_count_threshold&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">spin_count_threshold&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 대기 중인 스레드 수를 추적&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_waiting_threads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 경합 수준을 모니터링&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_contention_level&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 대기 큐&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_wait_queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 현재 소유자 스레드 ID&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 먼저 스핀락 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">spin_count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">spin_count&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spin_count_threshold&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_try_acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thread_id&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">spin_count&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 짧은 대기 시간 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.000001&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 1 마이크로초&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 스핀락이 실패하면 일반 잠금으로 전환&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_waiting_threads&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 일반 잠금 획득 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_try_acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thread_id&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 경합 수준 증가 및 적응형 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_contention_level&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_adaptive_wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_waiting_threads&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">_try_acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">thread_id&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;잠금 획득 시도&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 비차단 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">thread_id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">_adaptive_wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;경합 수준에 따른 적응형 대기&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_contention_level&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 낮은 경합: 짧은 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.000001&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 1 마이크로초&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_contention_level&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 중간 경합: 중간 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.0001&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 100 마이크로초&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 높은 경합: 긴 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.001&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 1 밀리초&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;잠금 해제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_contention_level&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_contention_level&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;잘못된 스레드가 잠금 해제를 시도했습니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 사용 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">shared_resource_access&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">adaptive_mutex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">thread_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shared_data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;공유 리소스에 접근하는 함수&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adaptive_mutex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 임계 영역 시작&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;스레드 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">thread_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">가 공유 리소스에 접근 중…&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shared_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;value&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 임의의 작업 시간 시뮬레이션&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uniform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.001&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.005&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;스레드 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">thread_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">가 공유 리소스 접근 완료. 현재 값: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">shared_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;value&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 임계 영역 종료&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adaptive_mutex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 적응형 뮤텍스 인스턴스 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">adaptive_mutex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AdaptiveMutex&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 공유 데이터&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shared_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;value&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 여러 스레드 생성 및 실행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">shared_resource_access&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">adaptive_mutex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shared_data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 모든 스레드가 완료될 때까지 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">thread&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;최종 값: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">shared_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;value&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>구현 내용
&lt;ul>
&lt;li>&lt;strong>적응형 메커니즘&lt;/strong>:
&lt;ul>
&lt;li>처음에는 스핀락 방식으로 시도하여 빠른 응답을 추구한다.&lt;/li>
&lt;li>경합이 심해지면 일반 잠금 방식으로 전환하여 CPU 사용을 줄인다.&lt;/li>
&lt;li>경합 수준에 따라 대기 시간을 동적으로 조절한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>성능 최적화&lt;/strong>:
&lt;ul>
&lt;li>스핀락 임계값을 설정하여 초기 응답성을 조절할 수 있다.&lt;/li>
&lt;li>경합 수준에 따라 세 가지 다른 대기 시간을 사용한다.&lt;/li>
&lt;li>대기 중인 스레드 수를 추적하여 시스템 부하를 모니터링한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>안전성 기능&lt;/strong>:
&lt;ul>
&lt;li>소유자 스레드 확인을 통한 잘못된 해제 방지&lt;/li>
&lt;li>예외 발생 시에도 안전한 잠금 해제를 보장하는 try-finally 구조&lt;/li>
&lt;li>스레드 ID 추적을 통한 소유권 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>모니터링 및 디버깅&lt;/strong>:
&lt;ul>
&lt;li>대기 중인 스레드 수 추적&lt;/li>
&lt;li>경합 수준 모니터링&lt;/li>
&lt;li>상세한 로깅과 에러 메시지&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3>Mutex 사용 시 주의사항&lt;span class="hx-absolute -hx-mt-20" id="mutex-사용-시-주의사항">&lt;/span>
&lt;a href="#mutex-%ec%82%ac%ec%9a%a9-%ec%8b%9c-%ec%a3%bc%ec%9d%98%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>교착상태 방지&lt;span class="hx-absolute -hx-mt-20" id="교착상태-방지">&lt;/span>
&lt;a href="#%ea%b5%90%ec%b0%a9%ec%83%81%ed%83%9c-%eb%b0%a9%ec%a7%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">DeadlockAvoidance&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">RLock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">RLock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">safe_operation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Mutex 획득 순서를 항상 동일하게 유지&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex2&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Safe operation&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>RAII 패턴 사용&lt;span class="hx-absolute -hx-mt-20" id="raii-패턴-사용">&lt;/span>
&lt;a href="#raii-%ed%8c%a8%ed%84%b4-%ec%82%ac%ec%9a%a9" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>RAII(Resource Acuquisition Is Intialization) 는 C++에서 강조되는 디자인 테크닉 중 하나.&lt;br>
&amp;ldquo;자원 획득(Resource Acquisition)은 초기화(Initialization)이다&lt;/p>
&lt;ul>
&lt;li>자원의 획득과 해제를 객체(객체의 포인터객체)의 수명과 연결 → 자동으로 효율적으로 자원(메모리, 파일 등)관리, 메모리 누수를 해결&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">RAIIMutex&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">mutex&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__enter__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__exit__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">traceback&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>최소한의 임계 영역&lt;span class="hx-absolute -hx-mt-20" id="최소한의-임계-영역">&lt;/span>
&lt;a href="#%ec%b5%9c%ec%86%8c%ed%95%9c%ec%9d%98-%ec%9e%84%ea%b3%84-%ec%98%81%ec%97%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">OptimizedResource&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">RLock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">process_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Mutex가 필요없는 연산은 밖에서 수행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">processed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">heavy_computation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 실제로 공유 자원에 접근할 때만 Mutex 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">processed&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h3>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3></description></item><item><title>Monitor</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/monitor/</link><pubDate>Thu, 28 Nov 2024 10:54:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/monitor/</guid><description>
&lt;h2>Monitor&lt;span class="hx-absolute -hx-mt-20" id="monitor">&lt;/span>
&lt;a href="#monitor" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Semaphore</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/semaphore/</link><pubDate>Thu, 28 Nov 2024 10:54:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/semaphore/</guid><description>
&lt;h2>Semaphore&lt;span class="hx-absolute -hx-mt-20" id="semaphore">&lt;/span>
&lt;a href="#semaphore" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>멀티스레딩 환경에서 공유 자원에 대한 접근을 제어하는 동기화 도구.&lt;/p>
&lt;p>세마포어는 네덜란드의 컴퓨터 과학자 Edsger Dijkstra가 1965년에 소개한 개념으로, 여러 프로세스나 스레드가 공유 자원에 동시에 접근하는 것을 제어하는 변수 또는 추상 데이터 타입.&lt;br>
세마포어는 간단한 정수 값을 사용하여 자원의 가용성을 나타낸다.&lt;/p>
&lt;h3>주요 특징&lt;span class="hx-absolute -hx-mt-20" id="주요-특징">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>동기화 메커니즘: 세마포어는 여러 프로세스나 스레드 간의 실행 순서와 타이밍을 제어한다.&lt;/li>
&lt;li>자원 관리: 한정된 수의 자원(예: 프린터, 데이터베이스 연결)에 대한 접근을 제어한다.&lt;/li>
&lt;li>원자적 연산: 세마포어 조작은 중단되지 않는 단일 연산으로 수행된다.&lt;/li>
&lt;li>대기 큐: 자원을 기다리는 프로세스들을 대기 큐에 저장한다.&lt;/li>
&lt;/ol>
&lt;h3>세마포어의 종류&lt;span class="hx-absolute -hx-mt-20" id="세마포어의-종류">&lt;/span>
&lt;a href="#%ec%84%b8%eb%a7%88%ed%8f%ac%ec%96%b4%ec%9d%98-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>이진 세마포어(Binary Semaphore):&lt;/p>
&lt;ul>
&lt;li>0과 1 두 가지 값만 가질 수 있다.&lt;/li>
&lt;li>상호 배제(Mutual Exclusion)를 구현하는 데 사용된다.&lt;/li>
&lt;li>뮤텍스(Mutex)라고도 불린다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>카운팅 세마포어(Counting Semaphore):&lt;/p>
&lt;ul>
&lt;li>0 이상의 정수 값을 가질 수 있다.&lt;/li>
&lt;li>여러 인스턴스를 가진 자원을 관리하는 데 사용된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>세마포어 연산&lt;span class="hx-absolute -hx-mt-20" id="세마포어-연산">&lt;/span>
&lt;a href="#%ec%84%b8%eb%a7%88%ed%8f%ac%ec%96%b4-%ec%97%b0%ec%82%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>세마포어는 주로 두 가지 연산을 제공한다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>P 연산(또는 wait):&lt;/p>
&lt;ul>
&lt;li>세마포어 값을 감소시킨다.&lt;/li>
&lt;li>자원을 사용하려고 할 때 호출한다.&lt;/li>
&lt;li>세마포어 값이 0이면 프로세스를 대기 상태로 만든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>V 연산(또는 signal):&lt;/p>
&lt;ul>
&lt;li>세마포어 값을 증가시킨다.&lt;/li>
&lt;li>자원 사용을 마쳤을 때 호출한다.&lt;/li>
&lt;li>대기 중인 프로세스가 있다면 깨운다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>주의사항&lt;span class="hx-absolute -hx-mt-20" id="주의사항">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9d%98%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>데드락(Deadlock): 여러 프로세스가 서로의 자원을 기다리며 영원히 블록되는 상황을 피해야 한다.&lt;/li>
&lt;li>기아 상태(Starvation): 특정 프로세스가 계속해서 자원을 얻지 못하는 상황을 방지해야 한다.&lt;/li>
&lt;li>우선순위 역전(Priority Inversion): 높은 우선순위 프로세스가 낮은 우선순위 프로세스에 의해 블록되는 상황을 주의해야 한다.&lt;/li>
&lt;li>과도한 사용: 세마포어를 너무 많이 사용하면 코드의 복잡성이 증가하고 성능이 저하될 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>활용 예시&lt;span class="hx-absolute -hx-mt-20" id="활용-예시">&lt;/span>
&lt;a href="#%ed%99%9c%ec%9a%a9-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>생산자-소비자 문제 해결&lt;/li>
&lt;li>읽기-쓰기 락 구현&lt;/li>
&lt;li>자원 할당 관리 (예: 데이터베이스 연결 풀)&lt;/li>
&lt;li>프로세스 간 통신 제어&lt;/li>
&lt;/ol>
&lt;h3>구현 예시&lt;span class="hx-absolute -hx-mt-20" id="구현-예시">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SimpleSemaphore&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">initial_value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 초기 카운터 값 설정&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">initial_value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 내부 락 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 조건 변수 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">condition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Condition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;P 연산 (wait) 구현&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 카운터가 0이면 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">counter&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 카운터 감소&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">counter&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;V 연산 (signal) 구현&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 카운터 증가&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">counter&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 대기 중인 스레드 깨우기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">notify&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 세마포어를 사용한 리소스 관리 예제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Restaurant&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tables&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># tables개의 테이블을 가진 식당 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">semaphore&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SimpleSemaphore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tables&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tables&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tables&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">customer_visit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">customer_id&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;손님의 식당 방문을 시뮬레이션&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;손님 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">customer_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">가 입장을 시도합니다.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 테이블 사용 요청&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">semaphore&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;손님 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">customer_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">가 테이블을 배정받았습니다.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 식사 시뮬레이션&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 테이블 반납&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">semaphore&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;손님 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">customer_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">가 식사를 마치고 퇴장했습니다.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 테스트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_restaurant&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 3개의 테이블을 가진 식당 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">restaurant&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Restaurant&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 5명의 손님이 동시에 방문&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">restaurant&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">customer_visit&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 모든 손님이 식사를 마칠 때까지 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">thread&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test_restaurant&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>조건 변수 (Condition Variable)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/condition-variable/</link><pubDate>Thu, 28 Nov 2024 10:54:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/condition-variable/</guid><description>
&lt;h2>조건 변수 (Condition Variable)&lt;span class="hx-absolute -hx-mt-20" id="조건-변수-condition-variable">&lt;/span>
&lt;a href="#%ec%a1%b0%ea%b1%b4-%eb%b3%80%ec%88%98-condition-variable" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>조건 변수(Condition Variables)는 프로세스 동기화에서 중요한 역할을 하는 동기화 기본 요소로, 스레드가 특정 조건이 충족될 때까지 대기하도록 하는 메커니즘을 제공한다.&lt;/p>
&lt;p>스레드가 특정 조건이 만족될 때까지 대기하고, 조건이 충족되면 다른 스레드가 대기 중인 스레드를 깨우는 데 사용된다.&lt;/p>
&lt;h3>뮤텍스와의 연관&lt;span class="hx-absolute -hx-mt-20" id="뮤텍스와의-연관">&lt;/span>
&lt;a href="#%eb%ae%a4%ed%85%8d%ec%8a%a4%ec%99%80%ec%9d%98-%ec%97%b0%ea%b4%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>조건 변수는 일반적으로 뮤텍스와 함께 사용된다.&lt;br>
뮤텍스는 조건을 원자적으로 검사하고 변경할 수 있도록 보장한다.&lt;/p>
&lt;h3>주요 연산&lt;span class="hx-absolute -hx-mt-20" id="주요-연산">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ec%97%b0%ec%82%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>wait(): 스레드가 조건이 충족될 때까지 대기하도록 한다.&lt;/li>
&lt;li>signal()/notify_one(): 대기 중인 단일 스레드를 깨운다.&lt;/li>
&lt;li>broadcast()/notify_all(): 해당 조건 변수에서 대기 중인 모든 스레드를 깨운다.&lt;/li>
&lt;/ul>
&lt;h3>사용 패턴&lt;span class="hx-absolute -hx-mt-20" id="사용-패턴">&lt;/span>
&lt;a href="#%ec%82%ac%ec%9a%a9-%ed%8c%a8%ed%84%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>조건을 보호하는 뮤텍스를 획득한다.&lt;/li>
&lt;li>조건을 테스트한다.&lt;/li>
&lt;li>조건이 거짓이면 wait()를 호출하여 대기한다.&lt;/li>
&lt;li>조건이 참이면 작업을 수행하고 뮤텍스를 해제한다.&lt;/li>
&lt;/ul>
&lt;h3>가짜 깨우기(Spurious Wakeup)&lt;span class="hx-absolute -hx-mt-20" id="가짜-깨우기spurious-wakeup">&lt;/span>
&lt;a href="#%ea%b0%80%ec%a7%9c-%ea%b9%a8%ec%9a%b0%ea%b8%b0spurious-wakeup" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>가짜 깨우기는 조건 변수(Condition Variable)를 사용할 때 발생할 수 있는 현상이다.&lt;br>
스레드가 실제로 signal이나 broadcast를 받지 않았는데도 wait 상태에서 깨어나는 현상을 말한다.&lt;/p>
&lt;p>이는 운영체제의 구현 방식이나 하드웨어의 특성으로 인해 발생할 수 있다.&lt;br>
가짜 깨우기가 발생하는 이유들은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>운영체제 최적화: 일부 운영체제는 성능 향상을 위해 의도적으로 가짜 깨우기를 발생시킬 수 있다.&lt;/li>
&lt;li>하드웨어 인터럽트: 시스템 이벤트나 하드웨어 인터럽트로 인해 스레드가 예기치 않게 깨어날 수 있다.&lt;/li>
&lt;li>시그널 처리: 운영체제의 시그널 처리 메커니즘이 의도치 않은 깨우기를 유발할 수 있다.&lt;/li>
&lt;/ol>
&lt;p>가짜 깨우기를 처리하는 일반적인 패턴은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>조건을 while 루프로 감싸기&lt;/li>
&lt;li>명확한 상태 변수 사용하기&lt;/li>
&lt;li>모든 상태 변경을 적절한 동기화 블록 내에서 수행하기&lt;/li>
&lt;li>notify() 호출 전에 상태 변경하기&lt;br>
이러한 방어적 프로그래밍 기법을 사용함으로써, 가짜 깨우기로 인한 문제를 효과적으로 방지할 수 있다.&lt;br>
특히 멀티스레드 프로그래밍에서는 이러한 세부사항에 주의를 기울이는 것이 매우 중요하다.&lt;/li>
&lt;/ol>
&lt;h4>예시&lt;span class="hx-absolute -hx-mt-20" id="예시">&lt;/span>
&lt;a href="#%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>다음은 가짜 깨우기 문제를 보여주는 잘못된 코드 예시:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 잘못된 구현 - 가짜 깨우기에 취약&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">wait_for_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shared_data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="n">condition&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">shared_data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_ready&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># if 사용 - 문제 있음&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">shared_data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이 코드의 문제점은 if문을 사용하여 조건을 한 번만 검사한다는 것이다.&lt;br>
가짜 깨우기가 발생하면, 실제로 데이터가 준비되지 않았는데도 스레드가 깨어나서 잘못된 데이터를 반환할 수 있다.&lt;/p>
&lt;p>다음은 가짜 깨우기를 올바르게 처리하는 코드:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SharedData&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">condition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Condition&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_ready&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">wait_for_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_ready&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># while 사용 - 안전한 구현&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">set_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_ready&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">notify_all&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 사용 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">consumer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shared_data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;소비자: 데이터 대기 중…&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">shared_data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait_for_data&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;소비자: 데이터 수신 - &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">producer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shared_data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;생산자: 잠시 대기…&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;생산자: 데이터 설정&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">shared_data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;중요한 데이터&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 테스트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">shared_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SharedData&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">consumer_thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">consumer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shared_data&lt;/span>&lt;span class="p">,))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">producer_thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">producer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shared_data&lt;/span>&lt;span class="p">,))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">consumer_thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">producer_thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">consumer_thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">producer_thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이 개선된 구현에서는 다음과 같은 중요한 포인트들을 주목해야 한다:&lt;/p>
&lt;ol>
&lt;li>while 루프 사용: if 대신 while을 사용하여 조건을 반복적으로 검사한다. 이는 가짜 깨우기가 발생하더라도 조건이 실제로 만족될 때까지 대기하도록 보장한다.&lt;/li>
&lt;li>상태 변수(is_ready): 단순히 신호만 기다리는 것이 아니라, 실제 데이터의 상태를 추적하는 변수를 사용한다.&lt;/li>
&lt;li>동기화 블록: 모든 공유 데이터 접근은 condition lock으로 보호된다.&lt;/li>
&lt;/ol>
&lt;h3>구현&lt;span class="hx-absolute -hx-mt-20" id="구현">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>대부분의 현대 운영 체제와 프로그래밍 언어에서 조건 변수를 지원한다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">DataQueue&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">size&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 큐가 비어있지 않음을 나타내는 조건 변수&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">not_empty&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Condition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 큐가 가득 차지 않음을 나타내는 조건 변수&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">not_full&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Condition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 큐가 가득 찼다면 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;큐가 가득 찼습니다. 생산자 대기 중…&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">not_full&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 데이터 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;생산: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 대기 중인 소비자에게 신호 전송&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">not_empty&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">notify&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 큐가 비었다면 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;큐가 비었습니다. 소비자 대기 중…&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">not_empty&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 데이터 추출&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;소비: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 대기 중인 생산자에게 신호 전송&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">not_full&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">notify&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 생산자 함수&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">producer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 생산 시간 시뮬레이션&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;항목 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 소비자 함수&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">consumer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 소비 시간 시뮬레이션&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 실행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">DataQueue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 크기가 3인 큐 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">producer_thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">producer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="p">,))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">consumer_thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">consumer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="p">,))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">producer_thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">consumer_thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">producer_thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">consumer_thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이 코드는 생산자-소비자 문제를 조건 변수를 사용하여 해결하는 예시이다.&lt;br>
여기서 조건 변수는 두 가지 중요한 역할을 한다:&lt;/p>
&lt;ol>
&lt;li>큐가 가득 찼을 때 생산자를 대기시키고, 공간이 생기면 깨우기&lt;/li>
&lt;li>큐가 비었을 때 소비자를 대기시키고, 데이터가 들어오면 깨우기&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>원자적 연산 (Atomic Operation)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/atomic-operation/</link><pubDate>Thu, 28 Nov 2024 10:48:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/atomic-operation/</guid><description>
&lt;h2>원자적 연산 (Atomic Operation)&lt;span class="hx-absolute -hx-mt-20" id="원자적-연산-atomic-operation">&lt;/span>
&lt;a href="#%ec%9b%90%ec%9e%90%ec%a0%81-%ec%97%b0%ec%82%b0-atomic-operation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>원자적 연산(Atomic Operation)은 멀티스레딩 환경에서 데이터의 일관성과 안전성을 보장하기 위한 중요한 개념으로, 상호 배제(Mutual Exclusion)를 구현하는 데 중요한 역할을 한다.&lt;/p>
&lt;p>원자적 연산이란, 더 이상 쪼개질 수 없는 최소 단위의 연산을 의미하는데 중단되거나 간섭받지 않고 완전히 실행되는 연산을 말한다.&lt;br>
이는 마치 물리학에서 원자가 더 이상 쪼개질 수 없는 가장 작은 단위인 것처럼, 컴퓨터 과학에서도 더 이상 분할할 수 없는 가장 작은 실행 단위를 의미한다.&lt;/p>
&lt;h3>주요 특징&lt;span class="hx-absolute -hx-mt-20" id="주요-특징">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>불가분성: 원자적 연산은 중간에 중단되거나 다른 프로세스에 의해 간섭받지 않는다.&lt;/li>
&lt;li>일관성: 연산이 성공적으로 완료되거나 아예 실행되지 않는다.&lt;/li>
&lt;li>가시성: 다른 스레드에서 원자적 연산의 결과를 즉시 확인할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>원자적 연산의 중요성&lt;span class="hx-absolute -hx-mt-20" id="원자적-연산의-중요성">&lt;/span>
&lt;a href="#%ec%9b%90%ec%9e%90%ec%a0%81-%ec%97%b0%ec%82%b0%ec%9d%98-%ec%a4%91%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>데이터 무결성 보장: 여러 스레드가 동시에 같은 데이터에 접근할 때 발생할 수 있는 경쟁 조건(Race Condition)을 방지한다.&lt;/li>
&lt;li>동기화 구현: 원자적 연산은 복잡한 동기화 메커니즘의 기본 구성 요소이다.&lt;/li>
&lt;li>성능 향상: 락(Lock)과 같은 고수준의 동기화 메커니즘보다 더 가볍고 빠르다.&lt;/li>
&lt;/ol>
&lt;h3>원자적 연산의 예시&lt;span class="hx-absolute -hx-mt-20" id="원자적-연산의-예시">&lt;/span>
&lt;a href="#%ec%9b%90%ec%9e%90%ec%a0%81-%ec%97%b0%ec%82%b0%ec%9d%98-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>읽기-수정-쓰기(Read-Modify-Write) 연산:&lt;/p>
&lt;ul>
&lt;li>비교-교환(Compare-and-Swap, CAS)&lt;/li>
&lt;li>테스트-설정(Test-and-Set)&lt;/li>
&lt;li>페치-추가(Fetch-and-Add)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>단순 읽기/쓰기 연산:&lt;/p>
&lt;ul>
&lt;li>정수 변수에 대한 읽기/쓰기&lt;/li>
&lt;li>포인터 변수에 대한 읽기/쓰기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>원자적 연산의 한계&lt;span class="hx-absolute -hx-mt-20" id="원자적-연산의-한계">&lt;/span>
&lt;a href="#%ec%9b%90%ec%9e%90%ec%a0%81-%ec%97%b0%ec%82%b0%ec%9d%98-%ed%95%9c%ea%b3%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>복잡한 연산에는 부적합: 단순한 연산에만 적용 가능하다.&lt;/li>
&lt;li>하드웨어 의존성: 일부 원자적 연산은 특정 하드웨어 아키텍처에 의존적일 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>구현 방식&lt;span class="hx-absolute -hx-mt-20" id="구현-방식">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>현대 프로세서는 원자적 연산을 지원하기 위해 다양한 하드웨어 명령어와 메커니즘을 제공한다.&lt;br>
이러한 지원은 멀티스레드 환경에서 데이터의 일관성과 무결성을 보장하는 데 필수적이다.&lt;/p>
&lt;p>아래는 현대 프로세서에서 원자적 연산을 지원하는 방식에 대한 정리이다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>하드웨어 명령어&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Compare-and-Swap (CAS)&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>CAS는 특정 메모리 위치의 값을 비교하고, 기대하는 값과 일치할 경우 새로운 값으로 교체하는 원자적 연산이다. 이 연산은 두 개의 작업(값 확인 및 값 변경)을 하나의 원자적 연산으로 묶어 처리한다.&lt;/li>
&lt;li>예를 들어, Intel x86 아키텍처에서는 &lt;code>cmpxchg&lt;/code> 명령어가 CAS를 구현한다. 이 명령은 한 클럭 사이에 원자적으로 실행된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Test-and-Set (TAS)&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>TAS는 특정 메모리 위치의 값을 읽고, 그 값을 설정하여 반환하는 원자적 연산이다. 이 방법은 주로 락을 구현하는 데 사용된다.&lt;/li>
&lt;li>TAS도 하드웨어에서 직접 지원되며, 이를 통해 다른 스레드가 개입하지 못하도록 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>메모리 모델&lt;/p>
&lt;ul>
&lt;li>현대 프로세서는 메모리 모델을 통해 원자적 연산의 실행 순서를 제어한다.&lt;br>
이는 캐시와 메인 메모리 간의 일관성을 유지하고, 동시성 문제를 해결하는 데 도움을 준다.&lt;/li>
&lt;li>메모리 배리어(memory barrier)는 CPU가 명령어 실행 순서를 제어하여 데이터의 일관성을 보장한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>원자적 변수&lt;br>
많은 현대 프로세서 아키텍처는 원자적 변수를 제공하여, 이러한 변수에 대한 작업이 원자적으로 수행되도록 한다.&lt;br>
예를 들어, C++의 &lt;code>std::atomic&lt;/code>이나 Java의 &lt;code>AtomicInteger&lt;/code>와 같은 클래스는 하드웨어 지원을 활용하여 원자적 연산을 구현한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>하드웨어 수준에서 지원되는 원자적 연산은 소프트웨어에서 구현된 락 기반 동기화보다 훨씬 빠르고 효율적이다.&lt;br>
이는 멀티스레드 환경에서 성능 저하를 최소화하고, 데이터 경쟁(race condition)을 방지하는 데 기여한다.&lt;/p>
&lt;h4>프로그래밍 언어에서의 원자적 연산 지원&lt;span class="hx-absolute -hx-mt-20" id="프로그래밍-언어에서의-원자적-연산-지원">&lt;/span>
&lt;a href="#%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%98%eb%b0%8d-%ec%96%b8%ec%96%b4%ec%97%90%ec%84%9c%ec%9d%98-%ec%9b%90%ec%9e%90%ec%a0%81-%ec%97%b0%ec%82%b0-%ec%a7%80%ec%9b%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ol>
&lt;li>
&lt;p>Java의 원자적 연산 지원&lt;br>
Java는 java.util.concurrent.atomic 패키지를 통해 포괄적인 원자적 연산을 지원한다.&lt;/p>
&lt;ul>
&lt;li>volatile 키워드와 atomic 클래스를 통한 두 가지 접근 방식 제공&lt;/li>
&lt;li>synchronized 블록과의 통합이 용이&lt;/li>
&lt;li>풍부한 원자적 연산 API 제공&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// AtomicInteger를 사용한 원자적 증가 연산&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">java.util.concurrent.atomic.AtomicInteger&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Counter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AtomicInteger&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">AtomicInteger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">increment&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">incrementAndGet&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 원자적 증가 연산&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getValue&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// compareAndSet을 사용한 조건부 업데이트&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">conditionalUpdate&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">current&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">do&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">current&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">compareAndSet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">current&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">current&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Python의 원자적 연산 지원&lt;br>
Python은 threading 모듈의 Lock 클래스와 multiprocessing 모듈의 Value 클래스를 통해 원자적 연산을 구현할 수 있다.&lt;/p>
&lt;ul>
&lt;li>GIL(Global Interpreter Lock)로 인한 특별한 고려사항 존재&lt;/li>
&lt;li>multiprocessing과 threading 모듈을 통한 다양한 동기화 방식 제공&lt;/li>
&lt;li>상대적으로 간단한 API 구조&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">multiprocessing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">threading&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Lock&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># multiprocessing Value를 사용한 원자적 연산&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Counter&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># &amp;#39;i&amp;#39;는 integer 타입을 의미&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">increment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_lock&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># threading Lock을 사용한 원자적 연산&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ThreadSafeCounter&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">increment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_count&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="3">
&lt;li>
&lt;p>Go의 원자적 연산 지원&lt;br>
Go는 sync/atomic 패키지를 통해 기본적인 원자적 연산을 제공한다.&lt;/p>
&lt;ul>
&lt;li>채널을 통한 동시성 처리 권장&lt;/li>
&lt;li>단순하고 직관적인 atomic 패키지 API&lt;/li>
&lt;li>sync/atomic 패키지의 제한된 기능 세트&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;sync/atomic&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Counter&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">count&lt;/span> &lt;span class="kt">int64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Counter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Increment&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AddInt64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 원자적 증가 연산&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Counter&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">GetValue&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">atomic&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">LoadInt64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 원자적 읽기 연산&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Rust의 원자적 연산 지원&lt;br>
Rust는 std::sync::atomic 모듈을 통해 강력한 원자적 연산 지원을 제공한다.&lt;/p>
&lt;ul>
&lt;li>강력한 타입 시스템과 소유권 모델을 통한 안전성 보장&lt;/li>
&lt;li>다양한 메모리 순서 옵션 제공&lt;/li>
&lt;li>컴파일 시점의 안전성 검사&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">sync&lt;/span>::&lt;span class="n">atomic&lt;/span>::&lt;span class="p">{&lt;/span>&lt;span class="n">AtomicI32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Ordering&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Counter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>: &lt;span class="nc">AtomicI32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Counter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Counter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">count&lt;/span>: &lt;span class="nc">AtomicI32&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">increment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fetch_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Ordering&lt;/span>::&lt;span class="n">SeqCst&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 원자적 증가 연산
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">get_value&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Ordering&lt;/span>::&lt;span class="n">SeqCst&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 원자적 읽기 연산
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>라이브락 (Livelock)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/livelock/</link><pubDate>Mon, 25 Nov 2024 09:17:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/livelock/</guid><description>
&lt;h2>라이브락 (Livelock)&lt;span class="hx-absolute -hx-mt-20" id="라이브락-livelock">&lt;/span>
&lt;a href="#%eb%9d%bc%ec%9d%b4%eb%b8%8c%eb%9d%bd-livelock" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>멀티스레딩 환경에서 발생할 수 있는 문제 상황으로, 프로세스나 스레드가 계속 실행 중이지만 실제로는 유용한 작업을 수행하지 못하는 상태&lt;/p>
&lt;h3>라이브락의 특징:&lt;span class="hx-absolute -hx-mt-20" id="라이브락의-특징">&lt;/span>
&lt;a href="#%eb%9d%bc%ec%9d%b4%eb%b8%8c%eb%9d%bd%ec%9d%98-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>진행 중 상태: 프로세스나 스레드가 &amp;lsquo;실행 중&amp;rsquo; 상태를 유지한다.&lt;/li>
&lt;li>무의미한 작업: 실제로는 어떠한 유용한 작업도 수행하지 못한다.&lt;/li>
&lt;li>반복적 상태 변경: 특정 조건을 만족시키기 위해 상태를 계속 변경하지만 원하는 결과를 달성하지 못한다.&lt;/li>
&lt;/ol>
&lt;h3>라이브락과 데드락의 차이:&lt;span class="hx-absolute -hx-mt-20" id="라이브락과-데드락의-차이">&lt;/span>
&lt;a href="#%eb%9d%bc%ec%9d%b4%eb%b8%8c%eb%9d%bd%ea%b3%bc-%eb%8d%b0%eb%93%9c%eb%9d%bd%ec%9d%98-%ec%b0%a8%ec%9d%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>데드락: 프로세스들이 서로의 자원을 기다리며 완전히 멈춘 상태&lt;/li>
&lt;li>라이브락: 프로세스들이 계속 실행되지만 실제로는 진전이 없는 상태&lt;/li>
&lt;/ul>
&lt;h3>라이브락의 예시:&lt;span class="hx-absolute -hx-mt-20" id="라이브락의-예시">&lt;/span>
&lt;a href="#%eb%9d%bc%ec%9d%b4%eb%b8%8c%eb%9d%bd%ec%9d%98-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>복도에서 마주친 두 사람: 서로 지나가려고 같은 방향으로 계속 이동하지만 결국 지나가지 못하는 상황&lt;/li>
&lt;li>프로세스 간 자원 경쟁:
&lt;ul>
&lt;li>프로세스 A가 자원 Y를 보유하고 X를 필요로 함&lt;/li>
&lt;li>프로세스 B가 자원 X를 보유하고 Y를 필요로 함&lt;/li>
&lt;li>두 프로세스가 서로의 자원을 기다리며 계속 상태를 변경하지만 진전이 없음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Philosopher&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">left_fork&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">right_fork&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left_fork&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">left_fork&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right_fork&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">right_fork&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">try_eat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 계속해서 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left_fork&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">timeout&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 왼쪽 포크 잡기 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">이(가) 왼쪽 포크를 집었습니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right_fork&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">timeout&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 오른쪽 포크 잡기 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">이(가) 식사를 시작합니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 식사하는 시간&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right_fork&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left_fork&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">이(가) 포크를 내려놓고 다시 시도합니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 다른 철학자에게 기회를 주기 위한 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">이(가) 포크를 얻지 못해 다시 시도합니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 재시도 전 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 테스트 코드&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fork1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fork2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">philosopher1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Philosopher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;철학자1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fork1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fork2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">philosopher2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Philosopher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;철학자2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fork2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fork1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 두 철학자가 동시에 식사하려 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">philosopher1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">try_eat&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">philosopher2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">try_eat&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이 코드에서 두 철학자는 모두 활발히 행동하고 있지만(포크를 집었다 놨다 하면서), 실제로 식사는 하지 못하는 라이브락 상황이 발생할 수 있다.&lt;/p>
&lt;p>라이브락 해결 방안:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>타임아웃 도입: 일정 시간 후 재시도하도록 설정&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">TimeoutBasedResource&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">timeout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">timeout&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start_time&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start_time&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">timeout&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 시간 초과시 강제 해제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>무작위성 도입: 상태 변경에 무작위 지연을 추가하여 동시성 문제 해결&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">resource_allocation_with_randomness&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">retry_delay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uniform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 0-1초 사이의 무작위 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">retry_delay&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">try_allocate_resource&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>우선순위 조정: 프로세스나 스레드의 우선순위를 동적으로 조정&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PrioritizedProcess&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">priority&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">priority&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">attempt_action&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">resource&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">current_user_priority&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">allocate_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>의존성 최소화: 프로세스 간 의존성을 줄이는 설계 적용&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>라이브락 방지를 위한 모범 사례:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>재시도 메커니즘 개선:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">improved_retry_mechanism&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max_attempts&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">attempt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">attempt&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">max_attempts&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">perform_action&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">except&lt;/span> &lt;span class="n">ResourceBusyException&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">backoff_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="n">attempt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uniform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">backoff_time&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">attempt&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>리소스 할당 순서 정규화:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ResourceManager&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resources&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resource_order&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire_resources&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">needed_resources&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 리소스를 항상 정해진 순서대로 획득&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sorted_resources&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">sorted&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">needed_resources&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resource_order&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">resource&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">sorted_resources&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 실패시 이미 획득한 리소스 해제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release_resources&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sorted_resources&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;p>라이브락 예방:&lt;br>
3. 명확한 상태 변경 조건 정의&lt;br>
4. 시스템 설계 시 예상치 못한 상호작용 고려&lt;br>
5. 주기적인 시스템 모니터링 및 분석 수행&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Starvation</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/starvation/</link><pubDate>Mon, 25 Nov 2024 07:52:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/starvation/</guid><description>
&lt;h2>기아 상태 (Starvation)&lt;span class="hx-absolute -hx-mt-20" id="기아-상태-starvation">&lt;/span>
&lt;a href="#%ea%b8%b0%ec%95%84-%ec%83%81%ed%83%9c-starvation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>운영 체제 및 동시성 프로그래밍에서 중요한 문제로, 특정 프로세스가 필요한 자원을 지속적으로 얻지 못해 실행되지 못하는 상황.&lt;br>
자원 관리 문제로, 낮은 우선순위 프로세스가 높은 우선순위 프로세스에 의해 자원이 계속 점유되어 무기한 대기하는 상황으로 주로 우선순위 기반 스케줄링에서 발생하며, 시스템 성능과 공정성에 부정적인 영향을 미친다.&lt;/p>
&lt;p>
&lt;img src="../what-is-starvation-in-operating-system.png" alt="Starvation in Operating System" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.javatpoint.com/what-is-starvation-in-operating-system" target="_blank" rel="noopener">https://www.javatpoint.com/what-is-starvation-in-operating-system&lt;/a> _&lt;/p>
&lt;h3>발생 조건&lt;span class="hx-absolute -hx-mt-20" id="발생-조건">&lt;/span>
&lt;a href="#%eb%b0%9c%ec%83%9d-%ec%a1%b0%ea%b1%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>기아 상태가 발생하기 위한 주요 조건은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>우선순위 기반 스케줄링&lt;/strong>: 높은 우선순위 프로세스가 계속 실행되면서 낮은 우선순위 프로세스가 실행되지 못함.&lt;/li>
&lt;li>&lt;strong>자원 부족&lt;/strong>: 시스템 자원이 제한적일 때 특정 프로세스가 지속적으로 자원을 얻지 못함.&lt;/li>
&lt;li>&lt;strong>비공정한 스케줄링 알고리즘&lt;/strong>: 공정성을 고려하지 않는 알고리즘이 낮은 우선순위 프로세스를 무시함.&lt;/li>
&lt;li>&lt;strong>임계 구역 점유&lt;/strong>: 특정 프로세스가 임계 구역을 오래 점유하여 다른 프로세스의 접근을 차단.&lt;/li>
&lt;/ol>
&lt;h3>해결책 및 방지책&lt;span class="hx-absolute -hx-mt-20" id="해결책-및-방지책">&lt;/span>
&lt;a href="#%ed%95%b4%ea%b2%b0%ec%b1%85-%eb%b0%8f-%eb%b0%a9%ec%a7%80%ec%b1%85" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>기아 상태를 해결하거나 방지하기 위한 방법은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Aging(에이징) 기법&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>대기 시간이 길어질수록 프로세스의 우선순위를 점진적으로 증가시켜 실행 기회를 보장한다.&lt;/li>
&lt;li>예: 일정 시간마다 대기 중인 프로세스의 우선순위를 1씩 증가.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>라운드 로빈 스케줄링&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>모든 프로세스에 고정된 시간 슬라이스를 할당하여 공정하게 CPU 시간을 분배한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>공정 스케줄러(Fair Scheduler)&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>자원의 공정한 분배를 보장하는 알고리즘 사용.&lt;/li>
&lt;li>예: Completely Fair Scheduler(CFS).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>우선순위 부스트(Priority Boosting)&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>오랫동안 대기한 프로세스의 우선순위를 일시적으로 높여 실행 가능성을 증가.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>자원 관리 개선&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>세마포어, 뮤텍스 등 동기화 메커니즘을 사용하여 자원의 공정한 사용 보장.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>랜덤 선택 회피&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>랜덤으로 프로세스를 선택하지 않고 공정성을 고려한 알고리즘 사용.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>실제 시스템에서의 예방책&lt;span class="hx-absolute -hx-mt-20" id="실제-시스템에서의-예방책">&lt;/span>
&lt;a href="#%ec%8b%a4%ec%a0%9c-%ec%8b%9c%ec%8a%a4%ed%85%9c%ec%97%90%ec%84%9c%ec%9d%98-%ec%98%88%eb%b0%a9%ec%b1%85" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>Aging 적용&lt;/strong>: 오래 대기한 프로세스의 우선순위를 자동으로 조정.&lt;/li>
&lt;li>&lt;strong>멀티레벨 피드백 큐(Multilevel Feedback Queue)&lt;/strong>: 대기 시간이 긴 프로세스를 더 높은 우선순위 큐로 이동.&lt;/li>
&lt;li>&lt;strong>자원 모니터링 도구 사용&lt;/strong>: 시스템 자원의 사용 현황을 실시간으로 추적하여 기아 상태를 사전에 탐지.&lt;/li>
&lt;li>&lt;strong>공정성 테스트&lt;/strong>: 다양한 워크로드 시나리오에서 스케줄링 알고리즘을 테스트하여 공정성을 검증.&lt;/li>
&lt;/ol>
&lt;h3>고려사항 및 주의사항&lt;span class="hx-absolute -hx-mt-20" id="고려사항-및-주의사항">&lt;/span>
&lt;a href="#%ea%b3%a0%eb%a0%a4%ec%82%ac%ed%95%ad-%eb%b0%8f-%ec%a3%bc%ec%9d%98%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>성능 저하&lt;/strong>: Aging이나 Priority Boosting은 성능에 영향을 미칠 수 있으므로 적절히 조율해야 한다.&lt;/li>
&lt;li>&lt;strong>데드락과 구분&lt;/strong>: 기아 상태와 데드락은 다른 문제로, 데드락은 모든 프로세스가 멈추는 반면 기아 상태는 일부만 영향을 받음.&lt;/li>
&lt;li>&lt;strong>우선순위 역전(Priority Inversion)&lt;/strong>: 낮은 우선순위 작업이 높은 우선순위 작업을 차단하지 않도록 주의해야 함.&lt;/li>
&lt;/ol>
&lt;h3>모범 사례&lt;span class="hx-absolute -hx-mt-20" id="모범-사례">&lt;/span>
&lt;a href="#%eb%aa%a8%eb%b2%94-%ec%82%ac%eb%a1%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>Aging 기법을 기본적으로 적용하여 모든 프로세스에 실행 기회를 제공.&lt;/li>
&lt;li>라운드 로빈과 같은 공정한 스케줄링 정책 채택.&lt;/li>
&lt;li>시스템 로그와 모니터링 도구를 활용하여 기아 상태를 조기에 탐지.&lt;/li>
&lt;/ol>
&lt;h3>구현 예시&lt;span class="hx-absolute -hx-mt-20" id="구현-예시">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>기아 상태를 시뮬레이션하고 이를 해결하는 파이썬 예제&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">queue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">dataclasses&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">dataclass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Optional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">random&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@dataclass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Task&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">priority&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">creation_time&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">float&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">wait_time&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">float&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">update_wait_time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">creation_time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">should_boost_priority&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;우선순위 부스팅이 필요한지 확인&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait_time&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="c1"># 10초 이상 대기시 부스팅&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">FairScheduler&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high_priority_queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PriorityQueue&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_priority_queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PriorityQueue&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">running&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">add_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Task&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;작업 추가&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">process_tasks&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;작업 처리&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">running&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">next_task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_get_next_task&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">next_task&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_execute_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">next_task&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">_get_next_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Task&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;다음 처리할 작업 선택&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 모든 낮은 우선순위 작업 검사 및 부스팅&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">low_priority_tasks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">update_wait_time&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">should_boost_priority&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Boosting priority of task &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="c1"># 우선순위 부스팅&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">low_priority_tasks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 낮은 우선순위 작업 다시 큐에 넣기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">task_tuple&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">low_priority_tasks&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">task_tuple&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 높은 우선순위 큐에서 먼저 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 낮은 우선순위 큐에서 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">_execute_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Task&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;작업 실행&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Executing task &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> (Priority: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Wait time: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait_time&lt;/span>&lt;span class="si">:&lt;/span>&lt;span class="s2">f&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">s)&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 작업 실행 시뮬레이션&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uniform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.5&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">simulate_starvation&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;기아 상태 시뮬레이션&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scheduler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FairScheduler&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 스케줄러 실행 스레드&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scheduler_thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process_tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scheduler_thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 높은 우선순위 작업 지속적 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">generate_high_priority_tasks&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">running&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">task_id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">priority&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">creation_time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task_id&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uniform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.3&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 낮은 우선순위 작업 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">generate_low_priority_tasks&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span> &lt;span class="c1"># 구분을 위한 시작 ID&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">running&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">task_id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">priority&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">creation_time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task_id&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uniform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 작업 생성 스레드 시작&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">high_priority_generator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">generate_high_priority_tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">low_priority_generator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">generate_low_priority_tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">high_priority_generator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">low_priority_generator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 일정 시간 후 시뮬레이션 종료&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">running&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 모든 스레드 종료 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scheduler_thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">high_priority_generator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">low_priority_generator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">simulate_starvation&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>실제 시스템에서의 해결 전략&lt;span class="hx-absolute -hx-mt-20" id="실제-시스템에서의-해결-전략">&lt;/span>
&lt;a href="#%ec%8b%a4%ec%a0%9c-%ec%8b%9c%ec%8a%a4%ed%85%9c%ec%97%90%ec%84%9c%ec%9d%98-%ed%95%b4%ea%b2%b0-%ec%a0%84%eb%9e%b5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>Aging 통합&lt;/strong>: 운영 체제 수준에서 Aging 알고리즘을 기본 스케줄러에 통합.&lt;/li>
&lt;li>&lt;strong>동적 우선순위 조정&lt;/strong>: 워크로드와 대기 시간에 따라 실시간으로 우선순위를 조정.&lt;/li>
&lt;li>&lt;strong>자원 관리 정책 개선&lt;/strong>: 세마포어, 뮤텍스 등 동기화 메커니즘을 효율적으로 설계.&lt;/li>
&lt;li>&lt;strong>모니터링 및 알림 시스템 구축&lt;/strong>: 기아 상태 발생 가능성을 실시간으로 감지하고 관리자에게 알림.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3></description></item><item><title>교착상태 (Deadlock)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/deadlock/</link><pubDate>Sat, 23 Nov 2024 23:24:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/deadlock/</guid><description>
&lt;h2>교착상태 (Deadlock)&lt;span class="hx-absolute -hx-mt-20" id="교착상태-deadlock">&lt;/span>
&lt;a href="#%ea%b5%90%ec%b0%a9%ec%83%81%ed%83%9c-deadlock" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>둘 이상의 프로세스가 서로가 가진 자원을 기다리며 무한정 대기하는 상황&lt;/p>
&lt;p>
&lt;img src="../img2.jpg" alt="Deadlock" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/deadlock-system-model/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/deadlock-system-model/&lt;/a> _&lt;/p>
&lt;p>교착상태를 시뮬레이션하는 예제:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Resource&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">process_name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">가 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 획득 시도&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">가 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 획득 성공&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">process_name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">가 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 반환&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">process_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">first_resource&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">second_resource&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 교착상태를 발생시키는 프로세스 작업을 시뮬레이션합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 각 프로세스는 두 개의 자원을 순차적으로 획득하려 시도합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 첫 번째 자원 획득&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">first_resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">가 작업 중…&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 다른 프로세스가 두 번째 자원을 획득할 시간을 줌&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 두 번째 자원 획득 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">second_resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">가 모든 자원 획득 성공&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 작업 수행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 자원 반환&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">second_resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">first_resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">except&lt;/span> &lt;span class="ne">Exception&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 오류 발생: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 두 개의 자원 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">resource_A&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Resource A&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">resource_B&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Resource B&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 두 개의 프로세스 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Process 1은 A -&amp;gt; B 순서로 자원 획득 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Process 2는 B -&amp;gt; A 순서로 자원 획득 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">process_task&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Process 1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">resource_A&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">resource_B&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">process_task&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Process 2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">resource_B&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">resource_A&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 프로세스 시작&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 프로세스 종료 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;교착상태 시뮬레이션 시작&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;시뮬레이션 종료&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Deadlock이 발생하기 위한 필요 조건&lt;span class="hx-absolute -hx-mt-20" id="deadlock이-발생하기-위한-필요-조건">&lt;/span>
&lt;a href="#deadlock%ec%9d%b4-%eb%b0%9c%ec%83%9d%ed%95%98%ea%b8%b0-%ec%9c%84%ed%95%9c-%ed%95%84%ec%9a%94-%ec%a1%b0%ea%b1%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Deadlock이 발생하기 위해서는 다음 네 가지 조건이 모두 충족되어야 한다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>상호 배제(Mutual Exclusion)&lt;br>
하나의 자원은 한 번에 하나의 프로세스만 사용할 수 있다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 한 번에 하나의 스레드만 획득 가능&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>점유와 대기(Hold and Wait)&lt;br>
자원을 가진 프로세스가 다른 자원을 기다리는 상태가 발생한다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 첫 번째 락을 보유한 상태에서&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 두 번째 락을 기다림&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>선점 불가(No Preemption)&lt;br>
다른 프로세스의 자원을 강제로 빼앗을 수 없다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>순환 대기(Circular Wait)&lt;br>
프로세스들이 순환적으로 서로의 자원을 기다린다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>교착상태 해결책 및 방지책&lt;span class="hx-absolute -hx-mt-20" id="교착상태-해결책-및-방지책">&lt;/span>
&lt;a href="#%ea%b5%90%ec%b0%a9%ec%83%81%ed%83%9c-%ed%95%b4%ea%b2%b0%ec%b1%85-%eb%b0%8f-%eb%b0%a9%ec%a7%80%ec%b1%85" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>교착상태를 해결하거나 방지하기 위한 여러 방법이 있다:&lt;/p>
&lt;h4>예방(Prevention)&lt;span class="hx-absolute -hx-mt-20" id="예방prevention">&lt;/span>
&lt;a href="#%ec%98%88%eb%b0%a9prevention" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>교착상태 발생 조건 중 하나 이상을 제거하여 교착상태를 방지한다:&lt;/p>
&lt;ul>
&lt;li>상호 배제 부정: 자원을 공유 가능하게 만든다.&lt;/li>
&lt;li>점유와 대기 부정: 프로세스가 실행되기 전 모든 필요한 자원을 할당받도록 한다.&lt;/li>
&lt;li>비선점 부정: 자원을 강제로 회수할 수 있게 한다.&lt;/li>
&lt;li>순환 대기 부정: 자원에 번호를 부여하고 오름차순으로만 요청하도록 한다.&lt;/li>
&lt;/ul>
&lt;h4>회피(Avoidance)&lt;span class="hx-absolute -hx-mt-20" id="회피avoidance">&lt;/span>
&lt;a href="#%ed%9a%8c%ed%94%bcavoidance" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>시스템의 상태를 지속적으로 검사하여 안전한 상태를 유지한다.&lt;br>
대표적인 방법으로 은행원 알고리즘(Banker&amp;rsquo;s Algorithm)이 있다.&lt;/p>
&lt;h4>탐지 및 복구(Detection and Recovery)&lt;span class="hx-absolute -hx-mt-20" id="탐지-및-복구detection-and-recovery">&lt;/span>
&lt;a href="#%ed%83%90%ec%a7%80-%eb%b0%8f-%eb%b3%b5%ea%b5%acdetection-and-recovery" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>교착상태를 탐지하고, 발생 시 복구하는 방법이다:&lt;/p>
&lt;ul>
&lt;li>프로세스 종료: 교착상태에 있는 프로세스를 종료한다.&lt;/li>
&lt;li>자원 선점: 교착상태에 있는 프로세스로부터 자원을 강제로 회수한다다.&lt;/li>
&lt;/ul>
&lt;h3>실제 시스템에서의 교착상태 예방 전략&lt;span class="hx-absolute -hx-mt-20" id="실제-시스템에서의-교착상태-예방-전략">&lt;/span>
&lt;a href="#%ec%8b%a4%ec%a0%9c-%ec%8b%9c%ec%8a%a4%ed%85%9c%ec%97%90%ec%84%9c%ec%9d%98-%ea%b5%90%ec%b0%a9%ec%83%81%ed%83%9c-%ec%98%88%eb%b0%a9-%ec%a0%84%eb%9e%b5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시스템 설계 단계에서의 예방&lt;/p>
&lt;ul>
&lt;li>자원 할당 순서 정의&lt;/li>
&lt;li>자원 사용 시간 제한&lt;/li>
&lt;li>작업 우선순위 설정&lt;/li>
&lt;li>자원 할당 그래프 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>운영 단계에서의 모니터링&lt;/p>
&lt;ul>
&lt;li>자원 사용량 실시간 모니터링&lt;/li>
&lt;li>교착상태 감지 시스템 구축&lt;/li>
&lt;li>로그 분석 및 패턴 파악&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>복구 전략 수립&lt;/p>
&lt;ul>
&lt;li>체계적인 프로세스 종료 절차&lt;/li>
&lt;li>자원 회수 메커니즘&lt;/li>
&lt;li>백업 시스템 운영&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>실제 사례와 해결 방안&lt;span class="hx-absolute -hx-mt-20" id="실제-사례와-해결-방안">&lt;/span>
&lt;a href="#%ec%8b%a4%ec%a0%9c-%ec%82%ac%eb%a1%80%ec%99%80-%ed%95%b4%ea%b2%b0-%eb%b0%a9%ec%95%88" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>데이터베이스 시스템의 교착상태:
&lt;ol>
&lt;li>트랜잭션 타임아웃 설정&lt;/li>
&lt;li>락 에스컬레이션 방지&lt;/li>
&lt;li>트랜잭션 격리 수준 적절히 설정&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>운영체제의 교착상태:
&lt;ol>
&lt;li>자원 할당 알고리즘 최적화&lt;/li>
&lt;li>프로세스 우선순위 동적 조정&lt;/li>
&lt;li>자원 사용 모니터링 강화&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3>고려사항 및 주의사항&lt;span class="hx-absolute -hx-mt-20" id="고려사항-및-주의사항">&lt;/span>
&lt;a href="#%ea%b3%a0%eb%a0%a4%ec%82%ac%ed%95%ad-%eb%b0%8f-%ec%a3%bc%ec%9d%98%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>성능과 안전성 균형&lt;/p>
&lt;ul>
&lt;li>과도한 교착상태 방지 메커니즘은 성능 저하 초래&lt;/li>
&lt;li>시스템 특성에 맞는 적절한 수준 설정 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>확장성 고려&lt;/p>
&lt;ul>
&lt;li>시스템 규모 증가에 따른 교착상태 위험 증가&lt;/li>
&lt;li>확장 가능한 모니터링 시스템 구축&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>테스트 및 검증&lt;/p>
&lt;ul>
&lt;li>다양한 시나리오에서의 교착상태 테스트&lt;/li>
&lt;li>정기적인 시스템 점검 및 모니터링&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>모범 사례&lt;span class="hx-absolute -hx-mt-20" id="모범-사례">&lt;/span>
&lt;a href="#%eb%aa%a8%eb%b2%94-%ec%82%ac%eb%a1%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>자원 할당 전략&lt;/p>
&lt;ul>
&lt;li>필요한 최소한의 자원만 할당&lt;/li>
&lt;li>자원 사용 시간 최소화&lt;/li>
&lt;li>자원 해제 즉시 수행&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>모니터링 및 로깅&lt;/p>
&lt;ul>
&lt;li>상세한 로그 기록 유지&lt;/li>
&lt;li>실시간 모니터링 시스템 구축&lt;/li>
&lt;li>주기적인 시스템 상태 점검&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>시스템 설계&lt;/p>
&lt;ul>
&lt;li>모듈화된 설계로 교착상태 영향 범위 최소화&lt;/li>
&lt;li>명확한 자원 할당 정책 수립&lt;/li>
&lt;li>효율적인 복구 메커니즘 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Race Condition</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/race-condition/</link><pubDate>Sat, 23 Nov 2024 23:11:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/race-condition/</guid><description>
&lt;h2>경쟁 상태 (Race Condition)&lt;span class="hx-absolute -hx-mt-20" id="경쟁-상태-race-condition">&lt;/span>
&lt;a href="#%ea%b2%bd%ec%9f%81-%ec%83%81%ed%83%9c-race-condition" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>여러 프로세스나 스레드가 공유 자원에 동시에 접근할 때, 접근의 타이밍이나 순서에 따라 결과가 달라질 수 있는 상황.&lt;br>
이는 프로그램의 실행 결과가 프로세스/스레드의 실행 순서에 따라 예측할 수 없게 달라지는 현상을 초래한다.&lt;/p>
&lt;p>
&lt;img src="../race_conditions.jpg" alt="Race Condition" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.rapitasystems.com/blog/race-condition-testing" target="_blank" rel="noopener">https://www.rapitasystems.com/blog/race-condition-testing&lt;/a> _&lt;/p>
&lt;h3>발생 조건&lt;span class="hx-absolute -hx-mt-20" id="발생-조건">&lt;/span>
&lt;a href="#%eb%b0%9c%ec%83%9d-%ec%a1%b0%ea%b1%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>경쟁 상태가 발생하기 위한 조건은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>두 개 이상의 포인터가 동시에 같은 데이터에 접근.&lt;/li>
&lt;li>최소한 하나의 포인터가 데이터를 쓰기 위해 사용됨.&lt;/li>
&lt;li>데이터 접근을 동기화하는 메커니즘이 없음.&lt;/li>
&lt;/ol>
&lt;h3>해결책 및 방지책&lt;span class="hx-absolute -hx-mt-20" id="해결책-및-방지책">&lt;/span>
&lt;a href="#%ed%95%b4%ea%b2%b0%ec%b1%85-%eb%b0%8f-%eb%b0%a9%ec%a7%80%ec%b1%85" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>동기화 메커니즘 사용&lt;/strong>: 뮤텍스(mutex), 세마포어, 락(lock) 등을 사용하여 공유 자원에 대한 접근을 제어한다.&lt;/li>
&lt;li>&lt;strong>원자적 연산 사용&lt;/strong>: 분할할 수 없는 단일 연산으로 처리하여 중간 상태를 방지한다.&lt;/li>
&lt;li>&lt;strong>스레드 안전 프로그래밍&lt;/strong>: 모든 함수를 스레드 안전하게 설계한다.&lt;/li>
&lt;li>&lt;strong>락프리 알고리즘&lt;/strong>: 고급 기법으로, 특정 동시성 작업을 최적화하는 데 사용된다.&lt;/li>
&lt;li>&lt;strong>트랜잭션 격리 수준 조정&lt;/strong>: 데이터베이스에서는 직렬화 가능한 트랜잭션 격리 수준을 사용하여 경쟁 상태를 방지할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>실제 시스템에서의 예방책&lt;span class="hx-absolute -hx-mt-20" id="실제-시스템에서의-예방책">&lt;/span>
&lt;a href="#%ec%8b%a4%ec%a0%9c-%ec%8b%9c%ec%8a%a4%ed%85%9c%ec%97%90%ec%84%9c%ec%9d%98-%ec%98%88%eb%b0%a9%ec%b1%85" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>정적 분석 도구 사용&lt;/strong>: 소스 코드나 컴파일된 바이너리를 분석하여 잠재적인 경쟁 상태를 탐지한다.&lt;/li>
&lt;li>&lt;strong>로그 분석 및 모니터링&lt;/strong>: 시스템 로그를 분석하여 경쟁 상태의 징후를 감지한다.&lt;/li>
&lt;li>&lt;strong>분산 추적 시스템&lt;/strong>: 분산 시스템에서 요청과 메시지의 흐름을 추적하여 타이밍 의존성을 식별한다.&lt;/li>
&lt;li>&lt;strong>일관성 검사 도구&lt;/strong>: 분산 노드 간의 데이터 일관성을 확인하여 경쟁 상태로 인한 이상을 탐지한다.&lt;/li>
&lt;/ol>
&lt;h3>고려사항 및 주의사항&lt;span class="hx-absolute -hx-mt-20" id="고려사항-및-주의사항">&lt;/span>
&lt;a href="#%ea%b3%a0%eb%a0%a4%ec%82%ac%ed%95%ad-%eb%b0%8f-%ec%a3%bc%ec%9d%98%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>비결정적 특성&lt;/strong>: 경쟁 상태로 인한 버그는 재현하기 어려우므로 철저한 테스트가 필요하다.&lt;/li>
&lt;li>&lt;strong>성능 영향&lt;/strong>: 동기화 메커니즘의 과도한 사용은 성능 저하를 초래할 수 있으므로 균형이 필요하다.&lt;/li>
&lt;li>&lt;strong>데드락 주의&lt;/strong>: 락을 사용할 때는 데드락 발생 가능성에 주의해야 한다.&lt;/li>
&lt;li>&lt;strong>확장성 고려&lt;/strong>: 분산 시스템에서는 경쟁 상태 관리가 시스템의 확장성에 영향을 미칠 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>모범 사례&lt;span class="hx-absolute -hx-mt-20" id="모범-사례">&lt;/span>
&lt;a href="#%eb%aa%a8%eb%b2%94-%ec%82%ac%eb%a1%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>최소한의 임계 영역&lt;/strong>: 락으로 보호되는 코드 영역을 최소화하여 성능 저하를 방지한다.&lt;/li>
&lt;li>&lt;strong>세분화된 락&lt;/strong>: 전역 락 대신 세분화된 락을 사용하여 병렬성을 높인다.&lt;/li>
&lt;li>&lt;strong>불변성 활용&lt;/strong>: 가능한 경우 불변 객체를 사용하여 동시성 문제를 원천적으로 방지한다.&lt;/li>
&lt;li>&lt;strong>스레드 안전한 라이브러리 사용&lt;/strong>: 검증된 스레드 안전 라이브러리를 활용한다.&lt;/li>
&lt;/ol>
&lt;h3>실제 시스템에서의 해결 전략&lt;span class="hx-absolute -hx-mt-20" id="실제-시스템에서의-해결-전략">&lt;/span>
&lt;a href="#%ec%8b%a4%ec%a0%9c-%ec%8b%9c%ec%8a%a4%ed%85%9c%ec%97%90%ec%84%9c%ec%9d%98-%ed%95%b4%ea%b2%b0-%ec%a0%84%eb%9e%b5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>데이터베이스 트랜잭션&lt;/strong>: 데이터베이스 시스템에서는 ACID 속성을 갖는 트랜잭션을 사용하여 경쟁 상태를 관리한다.&lt;/li>
&lt;li>&lt;strong>분산 락&lt;/strong>: 분산 시스템에서는 Zookeeper나 etcd와 같은 도구를 사용하여 분산 락을 구현한다.&lt;/li>
&lt;li>&lt;strong>버전 관리&lt;/strong>: 낙관적 동시성 제어를 위해 데이터 버전을 관리하여 충돌을 감지하고 해결한다.&lt;/li>
&lt;li>&lt;strong>이벤트 소싱&lt;/strong>: 상태 변경을 이벤트로 기록하여 일관성을 유지하고 경쟁 상태를 해결한다.&lt;/li>
&lt;/ol>
&lt;h3>경쟁 상태를 시연하고 해결하는 예제&lt;span class="hx-absolute -hx-mt-20" id="경쟁-상태를-시연하고-해결하는-예제">&lt;/span>
&lt;a href="#%ea%b2%bd%ec%9f%81-%ec%83%81%ed%83%9c%eb%a5%bc-%ec%8b%9c%ec%97%b0%ed%95%98%ea%b3%a0-%ed%95%b4%ea%b2%b0%ed%95%98%eb%8a%94-%ec%98%88%ec%a0%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 경쟁 상태가 발생하는 예제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">BankAccount&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1"># 공유 자원&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">deposit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 현재 잔액 읽기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 시간 지연을 통한 경쟁 상태 시뮬레이션&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 잔액 업데이트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">amount&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_balance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 경쟁 상태가 해결된 버전&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SafeBankAccount&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 상호 배제를 위한 락&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">deposit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 임계 영역 보호&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">amount&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_balance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 테스트 함수&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_race_condition&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 경쟁 상태가 있는 계좌&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">account&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BankAccount&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 여러 스레드가 동시에 입금&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">account&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">deposit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 모든 스레드 완료 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;예상 잔액: 1000, 실제 잔액: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">account&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_balance&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 안전한 계좌로 테스트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">safe_account&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SafeBankAccount&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 동일한 테스트 수행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">safe_account&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">deposit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;안전한 계좌 잔액: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">safe_account&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_balance&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test_race_condition&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>동시성 제어 (Concurrency Control)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/concurrency-control/</link><pubDate>Sat, 23 Nov 2024 02:47:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/concurrency-control/</guid><description>
&lt;h2>동시성 제어 (Concurrency Control)&lt;span class="hx-absolute -hx-mt-20" id="동시성-제어-concurrency-control">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1-%ec%a0%9c%ec%96%b4-concurrency-control" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>동시성 제어는 여러 프로세스나 스레드가 동시에 공유 자원에 접근할 때, 데이터의 일관성과 무결성을 보장하기 위한 제어 메커니즘.&lt;br>
다중 사용자 환경에서 필수적으로 지원해야 하는 기능으로, 병행제어라고도 한다.&lt;/p>
&lt;h3>동시성 제어의 중요성&lt;span class="hx-absolute -hx-mt-20" id="동시성-제어의-중요성">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1-%ec%a0%9c%ec%96%b4%ec%9d%98-%ec%a4%91%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>동시성 제어는 다음과 같은 문제를 방지하여 데이터베이스의 무결성을 유지한다:&lt;/p>
&lt;ul>
&lt;li>갱신 손실: 동시에 수행된 갱신 작업으로 인한 데이터 손실&lt;/li>
&lt;li>모순성: 일관성 없는 데이터 읽기&lt;/li>
&lt;li>연쇄 복귀: 하나의 트랜잭션 실패로 인한 다른 트랜잭션들의 복귀&lt;/li>
&lt;/ul>
&lt;h3>목적&lt;span class="hx-absolute -hx-mt-20" id="목적">&lt;/span>
&lt;a href="#%eb%aa%a9%ec%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>트랜잭션의 직렬성 보장&lt;/li>
&lt;li>데이터의 무결성 및 일관성 유지&lt;/li>
&lt;li>시스템 활용도 최대화 (공유도 최대, 응답 시간 최소, 처리량 최대화)&lt;/li>
&lt;/ol>
&lt;h3>주요 동시성 제어 기법&lt;span class="hx-absolute -hx-mt-20" id="주요-동시성-제어-기법">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%eb%8f%99%ec%8b%9c%ec%84%b1-%ec%a0%9c%ec%96%b4-%ea%b8%b0%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>락킹(Locking) 기법&lt;span class="hx-absolute -hx-mt-20" id="락킹locking-기법">&lt;/span>
&lt;a href="#%eb%9d%bd%ed%82%b9locking-%ea%b8%b0%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>락킹은 가장 기본적인 동시성 제어 방법으로, 데이터에 접근할 때 잠금을 설정하여 다른 프로세스의 접근을 제한한다.&lt;/p>
&lt;h5>종류&lt;span class="hx-absolute -hx-mt-20" id="종류">&lt;/span>
&lt;a href="#%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>공유 락(Shared Lock):&lt;/p>
&lt;ul>
&lt;li>읽기 작업을 위한 락&lt;/li>
&lt;li>여러 프로세스가 동시에 획득 가능&lt;/li>
&lt;li>데이터 읽기만 허용됨&lt;/li>
&lt;/ul>
&lt;p>배타적 락(Exclusive Lock):&lt;/p>
&lt;ul>
&lt;li>쓰기 작업을 위한 락&lt;/li>
&lt;li>한 번에 하나의 프로세스만 획득 가능&lt;/li>
&lt;li>데이터 읽기와 쓰기 모두 가능&lt;/li>
&lt;/ul>
&lt;h4>타임스탬프 기반 기법(Timestamp-based Protocol)&lt;span class="hx-absolute -hx-mt-20" id="타임스탬프-기반-기법timestamp-based-protocol">&lt;/span>
&lt;a href="#%ed%83%80%ec%9e%84%ec%8a%a4%ed%83%ac%ed%94%84-%ea%b8%b0%eb%b0%98-%ea%b8%b0%eb%b2%95timestamp-based-protocol" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>각 트랜잭션에 고유한 타임스탬프를 부여하여 실행 순서를 결정하는 방식.&lt;/p>
&lt;h5>작동 원리&lt;span class="hx-absolute -hx-mt-20" id="작동-원리">&lt;/span>
&lt;a href="#%ec%9e%91%eb%8f%99-%ec%9b%90%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;ul>
&lt;li>트랜잭션 시작 시 타임스탬프 부여&lt;/li>
&lt;li>읽기/쓰기 타임스탬프 관리&lt;/li>
&lt;li>충돌 발생 시 타임스탬프 비교하여 처리&lt;/li>
&lt;/ul>
&lt;h5>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;ul>
&lt;li>교착상태 발생하지 않음&lt;/li>
&lt;li>우선순위 기반 처리 가능&lt;/li>
&lt;/ul>
&lt;h4>낙관적 병행 제어(Optimistic Concurrency Control)&lt;span class="hx-absolute -hx-mt-20" id="낙관적-병행-제어optimistic-concurrency-control">&lt;/span>
&lt;a href="#%eb%82%99%ea%b4%80%ec%a0%81-%eb%b3%91%ed%96%89-%ec%a0%9c%ec%96%b4optimistic-concurrency-control" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>충돌이 적을 것이라 가정하고, 검증 단계에서 충돌을 확인하는 방식.&lt;/p>
&lt;h5>처리 단계&lt;span class="hx-absolute -hx-mt-20" id="처리-단계">&lt;/span>
&lt;a href="#%ec%b2%98%eb%a6%ac-%eb%8b%a8%ea%b3%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;ul>
&lt;li>읽기 단계: 데이터 읽기와 로컬 복사본 생성&lt;/li>
&lt;li>수행 단계: 로컬 복사본에서 작업 수행&lt;/li>
&lt;li>검증 단계: 충돌 여부 확인&lt;/li>
&lt;li>쓰기 단계: 검증 성공 시 결과 반영&lt;/li>
&lt;/ul>
&lt;h4>다중버전 병행 제어(Multiversion Concurrency Control, MVCC)&lt;span class="hx-absolute -hx-mt-20" id="다중버전-병행-제어multiversion-concurrency-control-mvcc">&lt;/span>
&lt;a href="#%eb%8b%a4%ec%a4%91%eb%b2%84%ec%a0%84-%eb%b3%91%ed%96%89-%ec%a0%9c%ec%96%b4multiversion-concurrency-control-mvcc" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>데이터의 여러 버전을 유지하여 읽기 작업의 병행성을 향상시키는 기법.&lt;/p>
&lt;h5>특징&lt;span class="hx-absolute -hx-mt-20" id="특징">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;ul>
&lt;li>각 쓰기 작업마다 새로운 버전 생성&lt;/li>
&lt;li>읽기 작업은 특정 시점의 버전을 참조&lt;/li>
&lt;li>트랜잭션의 일관성 보장&lt;/li>
&lt;/ul>
&lt;h5>실제 적용 예시&lt;span class="hx-absolute -hx-mt-20" id="실제-적용-예시">&lt;/span>
&lt;a href="#%ec%8b%a4%ec%a0%9c-%ec%a0%81%ec%9a%a9-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>PostgreSQL이나 Oracle 같은 데이터베이스 시스템에서 MVCC를 사용하여 읽기 작업의 성능을 향상시킨다.&lt;/p>
&lt;h3>동시성 제어의 구현 시 고려사항&lt;span class="hx-absolute -hx-mt-20" id="동시성-제어의-구현-시-고려사항">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1-%ec%a0%9c%ec%96%b4%ec%9d%98-%ea%b5%ac%ed%98%84-%ec%8b%9c-%ea%b3%a0%eb%a0%a4%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>성능과 확장성&lt;/p>
&lt;ul>
&lt;li>락의 세분성 조절&lt;/li>
&lt;li>데드락 방지 메커니즘&lt;/li>
&lt;li>캐시 일관성 유지&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>일관성 수준&lt;/p>
&lt;ul>
&lt;li>직렬성(Serializability)&lt;/li>
&lt;li>스냅샷 격리(Snapshot Isolation)&lt;/li>
&lt;li>읽기 일관성(Read Consistency)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>장애 복구&lt;/p>
&lt;ul>
&lt;li>롤백 메커니즘&lt;/li>
&lt;li>복구 로그 관리&lt;/li>
&lt;li>체크포인트 설정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>동시성 제어의 발전 방향&lt;span class="hx-absolute -hx-mt-20" id="동시성-제어의-발전-방향">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1-%ec%a0%9c%ec%96%b4%ec%9d%98-%eb%b0%9c%ec%a0%84-%eb%b0%a9%ed%96%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>분산 시스템에서의 동시성 제어&lt;/p>
&lt;ul>
&lt;li>분산 락 관리&lt;/li>
&lt;li>합의(Consensus) 알고리즘&lt;/li>
&lt;li>최종 일관성(Eventual Consistency)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>새로운 하드웨어 지원&lt;/p>
&lt;ul>
&lt;li>하드웨어 트랜잭션 메모리&lt;/li>
&lt;li>원자적 명령어 활용&lt;/li>
&lt;li>멀티코어 최적화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>인메모리 데이터베이스&lt;/p>
&lt;ul>
&lt;li>락-프리 알고리즘&lt;/li>
&lt;li>비동기 복제&lt;/li>
&lt;li>실시간 동시성 제어&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>실제 구현 시 주의사항&lt;span class="hx-absolute -hx-mt-20" id="실제-구현-시-주의사항">&lt;/span>
&lt;a href="#%ec%8b%a4%ec%a0%9c-%ea%b5%ac%ed%98%84-%ec%8b%9c-%ec%a3%bc%ec%9d%98%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>데드락 예방&lt;/p>
&lt;ul>
&lt;li>타임아웃 설정&lt;/li>
&lt;li>자원 순서화&lt;/li>
&lt;li>데드락 감지 알고리즘 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 최적화&lt;/p>
&lt;ul>
&lt;li>락 경합(Lock Contention) 최소화&lt;/li>
&lt;li>트랜잭션 분할&lt;/li>
&lt;li>캐시 활용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>모니터링과 디버깅&lt;/p>
&lt;ul>
&lt;li>락 획득/해제 로깅&lt;/li>
&lt;li>성능 메트릭 수집&lt;/li>
&lt;li>병목 지점 분석&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>잠금 (Lock)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/lock/</link><pubDate>Mon, 18 Nov 2024 10:54:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/lock/</guid><description>
&lt;h2>잠금 (Lock)&lt;span class="hx-absolute -hx-mt-20" id="잠금-lock">&lt;/span>
&lt;a href="#%ec%9e%a0%ea%b8%88-lock" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>여러 스레드가 공유 자원에 동시에 접근하는 것을 방지하는 동기화 기본 요소이다.&lt;br>
임계 영역을 보호하고 한 번에 하나의 스레드만 접근할 수 있도록 한다.&lt;/p>
&lt;p>스레드가 임계 영역에 진입하기 전에 lock을 획득(acquire)하고, 임계 영역을 빠져나올 때 lock을 해제(release)한다. 다른 스레드가 이미 lock을 보유하고 있다면, lock을 획득하려는 스레드는 lock이 해제될 때까지 대기한다.&lt;/p>
&lt;p>Lock은 두 가지 상태를 가진다:&lt;/p>
&lt;ul>
&lt;li>잠금 해제 상태 (Unlocked): 다른 프로세스나 스레드가 Lock을 획득할 수 있는 상태&lt;/li>
&lt;li>잠금 상태 (Locked): 이미 한 프로세스나 스레드가 Lock을 보유하고 있는 상태&lt;/li>
&lt;/ul>
&lt;h3>작동 방식&lt;span class="hx-absolute -hx-mt-20" id="작동-방식">&lt;/span>
&lt;a href="#%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>Lock 획득 (acquire): 스레드가 임계 영역에 진입하기 전에 lock을 획득합니다.&lt;/li>
&lt;li>임계 영역 실행: lock을 획득한 스레드만 임계 영역의 코드를 실행할 수 있습니다.&lt;/li>
&lt;li>Lock 해제 (release): 임계 영역을 빠져나올 때 lock을 해제합니다.&lt;/li>
&lt;/ol>
&lt;h3>Lock을 사용할 때 고려해야할 사항&lt;span class="hx-absolute -hx-mt-20" id="lock을-사용할-때-고려해야할-사항">&lt;/span>
&lt;a href="#lock%ec%9d%84-%ec%82%ac%ec%9a%a9%ed%95%a0-%eb%95%8c-%ea%b3%a0%eb%a0%a4%ed%95%b4%ec%95%bc%ed%95%a0-%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>Lock의 범위는 가능한 한 작게 유지하여 성능 저하를 최소화한다.&lt;/li>
&lt;li>Lock을 획득하는 시간을 최소화하여 다른 스레드의 대기 시간을 줄인다.&lt;/li>
&lt;li>데드락을 방지하기 위해 Lock 획득 순서를 일관되게 유지한다.&lt;/li>
&lt;li>예외 상황에서도 Lock이 올바르게 해제되도록 보장한다.&lt;/li>
&lt;/ol>
&lt;h3>사용 예시&lt;span class="hx-absolute -hx-mt-20" id="사용-예시">&lt;/span>
&lt;a href="#%ec%82%ac%ec%9a%a9-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">BankAccount&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># Lock 객체 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">withdraw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Lock을 획득 시도. 이미 잠겨있다면 획득할 때까지 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 잔액 확인과 차감이 하나의 원자적 작업으로 수행됨&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_balance&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">amount&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_balance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;출금 성공: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, 잔액: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;잔액 부족&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 예외가 발생하더라도 반드시 Lock을 해제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Lock의 유형&lt;span class="hx-absolute -hx-mt-20" id="lock의-유형">&lt;/span>
&lt;a href="#lock%ec%9d%98-%ec%9c%a0%ed%98%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>공유 락(Shared Lock)과 배타 락(Exclusive Lock)&lt;span class="hx-absolute -hx-mt-20" id="공유-락shared-lock과-배타-락exclusive-lock">&lt;/span>
&lt;a href="#%ea%b3%b5%ec%9c%a0-%eb%9d%bdshared-lock%ea%b3%bc-%eb%b0%b0%ed%83%80-%eb%9d%bdexclusive-lock" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>공유 락(Shared Lock):&lt;br>
여러 스레드가 동시에 리소스를 읽을 수 있지만, 쓰기는 불가능한 락.
&lt;ul>
&lt;li>읽기 작업에 사용되는 락(Lock)&lt;/li>
&lt;li>여러 스레드가 동시에 획득 가능&lt;/li>
&lt;li>쓰기 작업을 차단함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>배타 락(Exclusive Lock):&lt;br>
한 번에 하나의 스레드만 리소스에 접근할 수 있는 락.
&lt;ul>
&lt;li>쓰기 작업에 사용되는 락(Lock).&lt;/li>
&lt;li>다른 세션의 읽기와 쓰기를 모두 막는다.&lt;/li>
&lt;li>데이터 일관성 보장에 유용.&lt;/li>
&lt;li>동시성이 낮음.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Optional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SharedExclusiveLock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_holders&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 공유 락을 보유한 스레드들&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_exclusive_holder&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="c1"># 배타 락을 보유한 스레드&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Condition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire_shared&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;공유 락 획득&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_exclusive_holder&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_holders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thread_id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_count&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release_shared&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;공유 락 해제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">thread_id&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_holders&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;공유 락을 보유하고 있지 않습니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_holders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thread_id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_count&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_count&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">notify_all&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire_exclusive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;배타 락 획득&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_exclusive_holder&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_count&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_exclusive_holder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release_exclusive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;배타 락 해제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_exclusive_holder&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;배타 락을 보유하고 있지 않습니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_exclusive_holder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">notify_all&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 사용 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">reader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">SharedExclusiveLock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">reader_id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;읽기 작업을 수행하는 스레드&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Reader &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">reader_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 시작&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire_shared&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Reader &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">reader_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 읽기 작업 수행 중…&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release_shared&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Reader &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">reader_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 종료&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">writer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">SharedExclusiveLock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">writer_id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;쓰기 작업을 수행하는 스레드&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Writer &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">writer_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 시작&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire_exclusive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Writer &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">writer_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 쓰기 작업 수행 중…&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release_exclusive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Writer &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">writer_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 종료&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>업데이트 락(Update Lock)과 의도 락(Intent Lock)&lt;span class="hx-absolute -hx-mt-20" id="업데이트-락update-lock과-의도-락intent-lock">&lt;/span>
&lt;a href="#%ec%97%85%eb%8d%b0%ec%9d%b4%ed%8a%b8-%eb%9d%bdupdate-lock%ea%b3%bc-%ec%9d%98%eb%8f%84-%eb%9d%bdintent-lock" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>업데이트 락(Update Lock):&lt;br>
읽기는 허용하지만, 다른 업데이트 락이나 배타 락의 획득을 방지하는 락(Lock).
&lt;ul>
&lt;li>읽기 작업은 허용하지만 다른 업데이트나 쓰기 작업은 차단.&lt;/li>
&lt;li>읽기-쓰기 전환 시 데드락 방지에 유용하다.&lt;/li>
&lt;li>Conversion Deadlock을 방지하기 위해 사용된다.&lt;/li>
&lt;li>수정을 위해 베타 락(Exclusive Lock)을 걸기 전에 사용하는 락(Lock).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>의도 락(Intent Lock):&lt;br>
상위 레벨 리소스에 대한 락을 설정하기 전에 사용되는 락.
&lt;ul>
&lt;li>계층적 락킹 구조에서 사용.&lt;/li>
&lt;li>다른 트랜잭션에게 락 의도를 알림.&lt;/li>
&lt;li>데이터베이스 시스템에서 주로 사용됨.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">enum&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Enum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">auto&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Dict&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Set&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">LockType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Enum&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">INTENT_SHARED&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">auto&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">INTENT_EXCLUSIVE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">auto&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UPDATE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">auto&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SHARED&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">auto&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">EXCLUSIVE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">auto&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">HierarchicalLock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_holders&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Dict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">LockType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lock_type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">lock_type&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">LockType&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Condition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">_can_acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lock_type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">LockType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">thread_id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;주어진 락 타입을 획득할 수 있는지 확인&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">lock_type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">LockType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">UPDATE&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 업데이트 락은 공유 락과 호환되지만 다른 업데이트 락과는 호환되지 않음&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_holders&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">LockType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">EXCLUSIVE&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="ow">or&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_holders&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">LockType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">UPDATE&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">lock_type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">LockType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">INTENT_SHARED&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 의도 공유 락은 배타 락과만 충돌&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_holders&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">LockType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">EXCLUSIVE&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># … 다른 락 타입에 대한 호환성 검사 로직 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lock_type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">LockType&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;락 획득&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_can_acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lock_type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">thread_id&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_holders&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lock_type&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thread_id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lock_type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">LockType&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;락 해제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">thread_id&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_holders&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lock_type&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">lock_type&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 락을 보유하고 있지 않습니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_holders&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lock_type&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thread_id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">notify_all&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>스핀 락 (Spin Lock)&lt;span class="hx-absolute -hx-mt-20" id="스핀-락-spin-lock">&lt;/span>
&lt;a href="#%ec%8a%a4%ed%95%80-%eb%9d%bd-spin-lock" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>락을 획득할 때까지 계속해서 확인하는 바쁜 대기(busy-waiting) 방식의 락.&lt;/p>
&lt;ul>
&lt;li>CPU 사용량이 높지만 컨텍스트 스위칭 비용이 없음&lt;/li>
&lt;li>짧은 대기 시간에 효율적&lt;/li>
&lt;li>멀티코어 시스템에서 유용&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SpinLock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_locked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">max_attempts&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;스핀락 획득 시도&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">attempts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">attempts&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">max_attempts&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_locked&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_locked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">thread_id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">attempts&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># CPU를 과도하게 사용하지 않도록 짧은 대기 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.000001&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;스핀락 해제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;잘못된 스레드가 해제를 시도했습니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_locked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>리더-라이터 락(Reader-Writer Lock)&lt;span class="hx-absolute -hx-mt-20" id="리더-라이터-락reader-writer-lock">&lt;/span>
&lt;a href="#%eb%a6%ac%eb%8d%94-%eb%9d%bc%ec%9d%b4%ed%84%b0-%eb%9d%bdreader-writer-lock" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>읽기 작업과 쓰기 작업을 구분하여 관리하는 락.&lt;/p>
&lt;ul>
&lt;li>다수의 읽기 작업 동시 허용&lt;/li>
&lt;li>쓰기 작업은 배타적으로 수행&lt;/li>
&lt;li>읽기 작업이 많은 경우 성능 향상&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Optional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ReaderWriterLock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">prefer_writer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">bool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_readers&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_writer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_waiting_writers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_prefer_writer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">prefer_writer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Condition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire_read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;읽기 락 획득&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_writer&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="ow">or&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_prefer_writer&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_waiting_writers&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_readers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release_read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;읽기 락 해제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_readers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_readers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">notify_all&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire_write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;쓰기 락 획득&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_waiting_writers&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_writer&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_readers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_waiting_writers&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_writer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release_write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;쓰기 락 해제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_writer&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;쓰기 락을 보유하고 있지 않습니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_writer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">notify_all&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>RCU 락 (Read-Copy-Update Lock)&lt;span class="hx-absolute -hx-mt-20" id="rcu-락-read-copy-update-lock">&lt;/span>
&lt;a href="#rcu-%eb%9d%bd-read-copy-update-lock" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>읽기 작업에 대해 락을 사용하지 않고, 쓰기 작업 시 복사본을 만들어 업데이트하는 동기화 메커니즘.&lt;/p>
&lt;ul>
&lt;li>읽기 작업의 성능이 매우 높음&lt;/li>
&lt;li>쓰기 작업의 오버헤드가 있음&lt;/li>
&lt;li>읽기가 많고 쓰기가 적은 시나리오에 적합&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Dict&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">RCULock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_current_version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Dict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="c1"># 버전별 데이터 저장&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Dict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1"># 버전별 활성 읽기 작업&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">read_lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;읽기 작업 시작&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_current_version&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">version&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">read_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">version&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;읽기 작업 종료&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">del&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 오래된 버전 정리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">old_version&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="p">()):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">old_version&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">old_version&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">del&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">old_version&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">new_data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;데이터 업데이트&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_current_version&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">new_version&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_current_version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_version&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 더 이상 사용되지 않는 버전 정리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="p">()):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">new_version&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">del&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">version&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;특정 버전의 데이터 조회&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h3>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3></description></item><item><title>동기(Synchronous)와 비동기(Asynchronous) 그리고 Blocking와 Non-Blocking</title><link>https://buenhyden.github.io/til/2024/11/synchronous-and-asynchronous-and-blocking-and-non-blocking/</link><pubDate>Sun, 17 Nov 2024 12:30:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/11/synchronous-and-asynchronous-and-blocking-and-non-blocking/</guid><description>
&lt;h2>동기(Synchronous)와 비동기(Asynchronous) 그리고 Blocking와 Non-Blocking&lt;span class="hx-absolute -hx-mt-20" id="동기synchronous와-비동기asynchronous-그리고-blocking와-non-blocking">&lt;/span>
&lt;a href="#%eb%8f%99%ea%b8%b0synchronous%ec%99%80-%eb%b9%84%eb%8f%99%ea%b8%b0asynchronous-%ea%b7%b8%eb%a6%ac%ea%b3%a0-blocking%ec%99%80-non-blocking" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>카테고리&lt;/th>
&lt;th>동기(Synchronous)&lt;/th>
&lt;th>비동기(Asynchronous)&lt;/th>
&lt;th>Blocking&lt;/th>
&lt;th>Non-Blocking&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>핵심 개념&lt;/strong>&lt;/td>
&lt;td>작업이 순차적으로 실행되며, 이전 작업이 완료될 때까지 다음 작업을 시작하지 않음&lt;/td>
&lt;td>작업들이 독립적으로 실행되며, 이전 작업의 완료를 기다리지 않고 다음 작업 수행 가능&lt;/td>
&lt;td>호출된 함수가 작업을 완료할 때까지 제어권을 반환하지 않음&lt;/td>
&lt;td>호출된 함수가 작업 완료 여부와 관계없이 즉시 제어권을 반환함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>작업 처리 방식&lt;/strong>&lt;/td>
&lt;td>순차적으로 작업을 처리하며, 각 작업이 완료된 후 다음 작업 시작&lt;/td>
&lt;td>여러 작업이 동시에 처리될 수 있으며, 작업 완료 순서는 불확실할 수 있음&lt;/td>
&lt;td>호출한 함수는 작업이 완료될 때까지 대기 상태 유지&lt;/td>
&lt;td>호출한 함수는 작업 진행 중에도 다른 작업 수행 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>제어 흐름&lt;/strong>&lt;/td>
&lt;td>프로그램의 제어 흐름이 순차적이고 예측 가능함&lt;/td>
&lt;td>제어 흐름이 비선형적이며, 콜백이나 이벤트로 처리&lt;/td>
&lt;td>제어권이 호출된 함수에 완전히 넘어감&lt;/td>
&lt;td>제어권이 호출한 함수에 즉시 반환됨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>결과 처리&lt;/strong>&lt;/td>
&lt;td>작업 완료 후 바로 결과를 반환받아 처리&lt;/td>
&lt;td>콜백 함수, Promise, async/await 등을 통해 결과 처리&lt;/td>
&lt;td>결과를 직접 반환받아 처리&lt;/td>
&lt;td>상태 확인이나 콜백을 통해 결과 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주요 특징&lt;/strong>&lt;/td>
&lt;td>- 코드의 실행 순서가 명확함&lt;br>- 직관적인 코드 흐름&lt;br>- 단순한 구현&lt;/td>
&lt;td>- 작업의 병렬 처리 가능&lt;br>- 복잡한 이벤트 처리&lt;br>- 높은 확장성&lt;/td>
&lt;td>- 자원을 점유하며 대기&lt;br>- 단순한 구현&lt;br>- 예측 가능한 실행&lt;/td>
&lt;td>- 자원의 효율적 활용&lt;br>- 복잡한 구현&lt;br>- 높은 동시성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>에러 처리&lt;/strong>&lt;/td>
&lt;td>try-catch 블록으로 즉시 에러 처리 가능&lt;/td>
&lt;td>Promise의 catch나 async/await의 try-catch로 처리&lt;/td>
&lt;td>동기적 에러 처리 가능&lt;/td>
&lt;td>비동기적 에러 처리 메커니즘 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>성능 특성&lt;/strong>&lt;/td>
&lt;td>- 단순 작업에서 오버헤드 적음&lt;br>- 순차 처리로 인한 대기 시간 발생&lt;/td>
&lt;td>- 동시 처리로 인한 전체 처리 시간 감소&lt;br>- 컨텍스트 스위칭 오버헤드&lt;/td>
&lt;td>- I/O 작업에서 성능 저하&lt;br>- 리소스 독점&lt;/td>
&lt;td>- 리소스 효율적 활용&lt;br>- 높은 처리량&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>적합한 사용 사례&lt;/strong>&lt;/td>
&lt;td>- 간단한 계산 작업&lt;br>- 메모리 내 데이터 처리&lt;br>- 순차적 처리 필요 작업&lt;/td>
&lt;td>- 네트워크 요청&lt;br>- 대용량 파일 처리&lt;br>- 독립적 실행 가능 작업&lt;/td>
&lt;td>- CPU 연산 작업&lt;br>- 간단한 파일 작업&lt;br>- 메모리 작업&lt;/td>
&lt;td>- I/O 작업&lt;br>- 네트워크 통신&lt;br>- 대용량 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>실행 순서&lt;/strong>&lt;/td>
&lt;td>코드 작성 순서와 실행 순서가 동일&lt;/td>
&lt;td>실행 순서가 코드 작성 순서와 다를 수 있음&lt;/td>
&lt;td>작업 완료 순서가 예측 가능&lt;/td>
&lt;td>작업 완료 순서가 불확실&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>자원 활용&lt;/strong>&lt;/td>
&lt;td>단일 자원을 순차적으로 사용&lt;/td>
&lt;td>여러 자원을 동시에 효율적으로 활용&lt;/td>
&lt;td>자원을 독점적으로 사용&lt;/td>
&lt;td>자원을 공유하여 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>응답성&lt;/strong>&lt;/td>
&lt;td>작업 완료 전까지 다른 작업 불가&lt;/td>
&lt;td>여러 작업의 동시 처리로 높은 응답성&lt;/td>
&lt;td>대기 시간 동안 응답 불가&lt;/td>
&lt;td>지속적인 응답 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>디버깅&lt;/strong>&lt;/td>
&lt;td>코드 흐름 추적이 용이함&lt;/td>
&lt;td>비동기 로직으로 인한 디버깅 어려움&lt;/td>
&lt;td>문제 발생 지점 파악 쉬움&lt;/td>
&lt;td>문제 발생 지점 추적 어려움&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>확장성&lt;/strong>&lt;/td>
&lt;td>수직적 확장에 제한적&lt;/td>
&lt;td>수평적/수직적 확장 용이&lt;/td>
&lt;td>동시 처리 능력 제한적&lt;/td>
&lt;td>높은 동시성 처리 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>데이터 일관성&lt;/strong>&lt;/td>
&lt;td>데이터 일관성 보장이 쉬움&lt;/td>
&lt;td>경쟁 조건 고려 필요&lt;/td>
&lt;td>순차적 처리로 일관성 보장&lt;/td>
&lt;td>동시성 제어 메커니즘 필요&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>추가적인 고려사항:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>시스템 설계 시 고려사항:&lt;/p>
&lt;ul>
&lt;li>시스템의 목적과 요구사항&lt;/li>
&lt;li>예상되는 부하와 처리량&lt;/li>
&lt;li>확장성 요구사항&lt;/li>
&lt;li>유지보수 용이성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 최적화:&lt;/p>
&lt;ul>
&lt;li>작업의 특성에 따른 적절한 방식 선택&lt;/li>
&lt;li>리소스 사용량 모니터링&lt;/li>
&lt;li>병목 현상 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>개발 복잡도:&lt;/p>
&lt;ul>
&lt;li>팀의 기술적 역량&lt;/li>
&lt;li>유지보수 가능성&lt;/li>
&lt;li>디버깅 용이성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>주요 차이점 분석&lt;span class="hx-absolute -hx-mt-20" id="주요-차이점-분석">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ec%b0%a8%ec%9d%b4%ec%a0%90-%eb%b6%84%ec%84%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>제어 흐름의 관점&lt;span class="hx-absolute -hx-mt-20" id="제어-흐름의-관점">&lt;/span>
&lt;a href="#%ec%a0%9c%ec%96%b4-%ed%9d%90%eb%a6%84%ec%9d%98-%ea%b4%80%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>동기/비동기는 &lt;strong>작업의 실행 순서와 완료 시점&lt;/strong>에 관한 것.&lt;br>
반면 Blocking/Non-Blocking은 제어권의 반환 시점에 관한 것이다.&lt;/p>
&lt;h4>성능과 자원 활용&lt;span class="hx-absolute -hx-mt-20" id="성능과-자원-활용">&lt;/span>
&lt;a href="#%ec%84%b1%eb%8a%a5%ea%b3%bc-%ec%9e%90%ec%9b%90-%ed%99%9c%ec%9a%a9" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>&lt;strong>동기&lt;/strong>: 순차적 실행으로 자원 사용이 효율적이지 않을 수 있다.&lt;/li>
&lt;li>&lt;strong>비동기&lt;/strong>: 병렬 처리로 자원을 효율적으로 활용할 수 있다.&lt;/li>
&lt;li>&lt;strong>Blocking&lt;/strong>: 대기 시간 동안 자원이 낭비될 수 있다.&lt;/li>
&lt;li>&lt;strong>Non-Blocking&lt;/strong>: 대기 시간을 다른 작업에 활용할 수 있다.&lt;/li>
&lt;/ul>
&lt;h4>구현 복잡도&lt;span class="hx-absolute -hx-mt-20" id="구현-복잡도">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84-%eb%b3%b5%ec%9e%a1%eb%8f%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>동기와 Blocking 방식은 구현이 상대적으로 단순한 반면, 비동기와 Non-Blocking 방식은 콜백이나 이벤트 처리 등으로 인해 구현이 복잡할 수 있다.&lt;/p>
&lt;h3>조합별 비교 및 예시&lt;span class="hx-absolute -hx-mt-20" id="조합별-비교-및-예시">&lt;/span>
&lt;a href="#%ec%a1%b0%ed%95%a9%eb%b3%84-%eb%b9%84%ea%b5%90-%eb%b0%8f-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>구분&lt;/th>
&lt;th>동기 + Blocking&lt;/th>
&lt;th>동기 + Non-Blocking&lt;/th>
&lt;th>비동기 + Blocking&lt;/th>
&lt;th>비동기 + Non-Blocking&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>특징&lt;/strong>&lt;/td>
&lt;td>- 가장 단순한 실행 모델&lt;br>- 직관적인 코드 흐름&lt;br>- 순차적 실행 보장&lt;/td>
&lt;td>- 동기적 실행 흐름 유지&lt;br>- 리소스 점유 최소화&lt;br>Polling 방식 사용&lt;/td>
&lt;td>- Promise나 async/await 사용&lt;br>- 실행 순서 보장&lt;br>- 비동기 작업 대기&lt;/td>
&lt;td>- 가장 유연한 실행 모델&lt;br>- 높은 리소스 활용도&lt;br>- 이벤트 기반 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>장점&lt;/strong>&lt;/td>
&lt;td>- 구현이 단순&lt;br>- 디버깅 용이&lt;br>- 결과 예측 쉬움&lt;/td>
&lt;td>- 리소스 효율성&lt;br>- 응답성 유지&lt;br>- 동기 코드 장점 유지&lt;/td>
&lt;td>- 비동기 코드의 동기적 처리&lt;br>- 에러 처리 용이&lt;br>- 코드 가독성 좋음&lt;/td>
&lt;td>- 최고의 성능&lt;br>- 높은 확장성&lt;br>- 리소스 효율적 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>단점&lt;/strong>&lt;/td>
&lt;td>- 리소스 비효율적&lt;br>- 성능 저하&lt;br>- 응답성 저하&lt;/td>
&lt;td>- 구현 복잡도 증가&lt;br>CPU 사용률 증가&lt;br>Polling 오버헤드&lt;/td>
&lt;td>- 스레드 블로킹&lt;br>- 병렬 처리 제한&lt;br>- 성능 제약&lt;/td>
&lt;td>- 복잡한 에러 처리&lt;br>- 디버깅 어려움&lt;br>- 콜백 지옥 가능성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>적합한 시나리오&lt;/strong>&lt;/td>
&lt;td>- 단순한 계산 작업&lt;br>- 메모리 내 연산&lt;br>- 설정 파일 로딩&lt;/td>
&lt;td>- 주기적 상태 확인&lt;br>- 실시간 모니터링&lt;br>- 센서 데이터 처리&lt;/td>
&lt;td>- 순차적 API 호출&lt;br>- 데이터베이스 트랜잭션&lt;br>- 의존적 비동기 작업&lt;/td>
&lt;td>- 웹 서버&lt;br>- 실시간 애플리케이션&lt;br>- 대용량 I/O 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주의사항&lt;/strong>&lt;/td>
&lt;td>- 긴 작업 시 시스템 블로킹&lt;br>- 타임아웃 처리 필요&lt;br>- 리소스 고려&lt;/td>
&lt;td>- 무한 루프 주의&lt;br>CPU 사용량 모니터링&lt;br>- 폴링 간격 최적화&lt;/td>
&lt;td>- 데드락 가능성&lt;br>- 메모리 누수 주의&lt;br>- 타임아웃 설정&lt;/td>
&lt;td>- 상태 관리 복잡성&lt;br>- 동시성 제어&lt;br>- 메모리 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>동작 방식&lt;/strong>&lt;/td>
&lt;td>- 순차적 실행&lt;br>- 작업 완료까지 대기&lt;br>- 직접 결과 반환&lt;/td>
&lt;td>- 상태 확인 루프&lt;br>- 작업 병행 처리&lt;br>- 폴링 기반 결과 확인&lt;/td>
&lt;td>- 비동기 호출 후 대기&lt;br>Promise 기반 처리&lt;br>await 사용&lt;/td>
&lt;td>- 이벤트 루프 활용&lt;br>- 콜백 기반 처리&lt;br>- 비동기 이벤트 처리&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>추가적인 구현 시 고려사항:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>에러 처리:&lt;/p>
&lt;ul>
&lt;li>동기 + Blocking: try-catch 직접 사용&lt;/li>
&lt;li>동기 + Non-Blocking: 상태 확인 시 에러 체크&lt;/li>
&lt;li>비동기 + Blocking: try-catch와 async/await 사용&lt;/li>
&lt;li>비동기 + Non-Blocking: 콜백의 에러 파라미터 처리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 최적화:&lt;/p>
&lt;ul>
&lt;li>동기 + Blocking: 작업 크기 최소화&lt;/li>
&lt;li>동기 + Non-Blocking: 폴링 간격 최적화&lt;/li>
&lt;li>비동기 + Blocking: 병렬 처리 가능성 검토&lt;/li>
&lt;li>비동기 + Non-Blocking: 이벤트 루프 최적화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>리소스 관리:&lt;/p>
&lt;ul>
&lt;li>동기 + Blocking: 타임아웃 설정&lt;/li>
&lt;li>동기 + Non-Blocking: CPU 사용량 모니터링&lt;/li>
&lt;li>비동기 + Blocking: 메모리 누수 방지&lt;/li>
&lt;li>비동기 + Non-Blocking: 동시성 제어&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>각 조합의 선택은 애플리케이션의 요구사항, 성능 목표, 개발 팀의 역량 등을 종합적으로 고려하여 결정해야 한다.&lt;/p>
&lt;h4>예시&lt;span class="hx-absolute -hx-mt-20" id="예시">&lt;/span>
&lt;a href="#%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ol>
&lt;li>동기(Synchronous) + Blocking&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 동기 + Blocking 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">syncBlockingExample&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;1. 작업 시작&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 동기적으로 실행되며, 작업이 완료될 때까지 블로킹됨
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFileSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;utf8&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 파일 읽기가 완료된 후에만 실행됨
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2. 파일 내용:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 순차적으로 실행됨
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;3. 작업 완료&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="2">
&lt;li>동기(Synchronous) + Non-Blocking&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 동기 + Non-Blocking 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">syncNonBlockingExample&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;1. 작업 시작&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 동기적이지만 블로킹하지 않음
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 작업 상태 확인 (polling)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">checkOperationStatus&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 다른 작업 수행 가능
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">doOtherWork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2. 결과:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;3. 작업 완료&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="3">
&lt;li>비동기(Asynchronous) + Blocking&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 비동기 + Blocking 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">asyncBlockingExample&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;1. 작업 시작&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 비동기 호출이지만 결과를 기다림 (블로킹)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resolve&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 비동기 작업 수행
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;작업 결과&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 블로킹되어 기다린 후 실행
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2. 결과:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;3. 작업 완료&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="4">
&lt;li>비동기(Asynchronous) + Non-Blocking&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 비동기 + Non-Blocking 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">asyncNonBlockingExample&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;1. 작업 시작&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 비동기 호출 후 즉시 반환
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;utf8&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;에러 발생:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 작업 완료 시 콜백으로 처리
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;3. 파일 내용:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 파일 읽기 작업과 독립적으로 실행됨
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2. 다른 작업 실행&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>적용 가이드라인&lt;span class="hx-absolute -hx-mt-20" id="적용-가이드라인">&lt;/span>
&lt;a href="#%ec%a0%81%ec%9a%a9-%ea%b0%80%ec%9d%b4%eb%93%9c%eb%9d%bc%ec%9d%b8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>동기 방식이 적합한 경우:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>작업의 순서가 중요한 경우&lt;/li>
&lt;li>데이터의 정합성이 중요한 경우&lt;/li>
&lt;li>간단한 스크립트나 배치 작업&lt;/li>
&lt;li>즉각적인 결과가 필요한 경우&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>비동기 방식이 적합한 경우:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>다중 사용자 처리가 필요한 경우&lt;/li>
&lt;li>긴 작업 시간이 예상되는 경우&lt;/li>
&lt;li>높은 처리량이 요구되는 경우&lt;/li>
&lt;li>실시간 데이터 처리가 필요한 경우&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>Blocking이 적합한 경우:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>간단한 I/O 작업&lt;/li>
&lt;li>리소스 사용량이 적은 경우&lt;/li>
&lt;li>즉각적인 응답이 필요한 경우&lt;/li>
&lt;li>단일 사용자 시스템&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>Non-Blocking이 적합한 경우:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>높은 동시성이 요구되는 경우&lt;/li>
&lt;li>대규모 I/O 작업 처리&lt;/li>
&lt;li>실시간 네트워크 애플리케이션&lt;/li>
&lt;li>고성능이 요구되는 서버&lt;/li>
&lt;/ul>
&lt;h3>최적화 전략&lt;span class="hx-absolute -hx-mt-20" id="최적화-전략">&lt;/span>
&lt;a href="#%ec%b5%9c%ec%a0%81%ed%99%94-%ec%a0%84%eb%9e%b5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>성능 최적화&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>작업의 특성에 따른 적절한 방식 선택&lt;/li>
&lt;li>리소스 사용량 모니터링&lt;/li>
&lt;li>타임아웃 설정&lt;/li>
&lt;li>에러 처리 메커니즘 구축&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>리소스 관리&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>메모리 사용량 관리&lt;/li>
&lt;li>스레드 풀 최적화&lt;/li>
&lt;li>커넥션 풀 관리&lt;/li>
&lt;li>캐시 활용&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Lock and Mutex</title><link>https://buenhyden.github.io/til/2024/11/lock-and-mutex/</link><pubDate>Sun, 17 Nov 2024 11:25:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/11/lock-and-mutex/</guid><description>
&lt;h2>Lock and Mutex&lt;span class="hx-absolute -hx-mt-20" id="lock-and-mutex">&lt;/span>
&lt;a href="#lock-and-mutex" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Lock과 Mutex는 둘 다 여러 스레드가 공유 자원에 동시에 접근하는 것을 방지하는 동기화 도구이다. 한 스레드가 자원을 사용할 때 다른 스레드의 접근을 막는 것이다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Mutex&lt;/th>
&lt;th>Lock&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>기본 개념&lt;/strong>&lt;/td>
&lt;td>상호 배제를 위한 동기화 객체로, 소유권 개념이 있음&lt;/td>
&lt;td>일반적인 동기화 메커니즘으로, 단순한 잠금/해제 기능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>소유권&lt;/strong>&lt;/td>
&lt;td>소유권 개념이 있어 획득한 스레드만 해제 가능&lt;/td>
&lt;td>소유권 개념이 없어 다른 스레드도 해제 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>재진입성&lt;/strong>&lt;/td>
&lt;td>보통 재진입 가능 (같은 스레드가 여러 번 획득 가능)&lt;/td>
&lt;td>구현에 따라 재진입 가능할 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>용도&lt;/strong>&lt;/td>
&lt;td>스레드 간 엄격한 상호 배제가 필요한 경우&lt;/td>
&lt;td>간단한 동기화가 필요한 일반적인 상황&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>성능&lt;/strong>&lt;/td>
&lt;td>소유권 검사 등으로 인한 오버헤드 존재&lt;/td>
&lt;td>상대적으로 가벼운 오버헤드, 단 구현에 따라 다름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>에러 처리&lt;/strong>&lt;/td>
&lt;td>소유권 위반 시 예외 발생 가능&lt;/td>
&lt;td>단순한 실패/성공 여부만 반환&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>구현 복잡도&lt;/strong>&lt;/td>
&lt;td>상대적으로 복잡한 구현&lt;/td>
&lt;td>단순한 구현, 그러나 고급 기능 추가 시 복잡해질 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>적용 범위&lt;/strong>&lt;/td>
&lt;td>프로세스 내 스레드 간 동기화&lt;/td>
&lt;td>프로세스 내 또는 프로세스 간 동기화에 사용 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>우선순위 상속&lt;/strong>&lt;/td>
&lt;td>우선순위 상속 지원 가능&lt;/td>
&lt;td>일반적으로 지원하지 않음, 구현에 따라 다를 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>교착상태 처리&lt;/strong>&lt;/td>
&lt;td>소유권 추적으로 교착상태 감지 용이&lt;/td>
&lt;td>기본적인 교착상태 감지만 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>에러 검사&lt;/strong>&lt;/td>
&lt;td>상세한 에러 검사 및 보고 기능&lt;/td>
&lt;td>기본적인 에러 검사, 구현에 따라 확장 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 사용&lt;/strong>&lt;/td>
&lt;td>소유권 정보 저장으로 추가 메모리 필요&lt;/td>
&lt;td>최소한의 메모리 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>유연성&lt;/strong>&lt;/td>
&lt;td>엄격한 규칙으로 유연성 제한&lt;/td>
&lt;td>상대적으로 유연한 사용 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>디버깅&lt;/strong>&lt;/td>
&lt;td>소유권 정보로 디버깅 용이&lt;/td>
&lt;td>디버깅이 상대적으로 어려움, 구현에 따라 다를 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>사용 예시&lt;/strong>&lt;/td>
&lt;td>데이터베이스 트랜잭션, 파일 시스템 접근&lt;/td>
&lt;td>간단한 공유 자원 보호, 카운터&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>타임아웃 지원&lt;/strong>&lt;/td>
&lt;td>보통 타임아웃 기능 내장&lt;/td>
&lt;td>구현에 따라 타임아웃 지원 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>복구 기능&lt;/strong>&lt;/td>
&lt;td>비정상 종료 시 자동 복구 지원&lt;/td>
&lt;td>구현에 따라 자동 복구 기능 추가 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>중첩 사용&lt;/strong>&lt;/td>
&lt;td>재진입성으로 중첩 사용 가능&lt;/td>
&lt;td>구현에 따라 중첩 사용 가능, 주의 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>시스템 수준&lt;/strong>&lt;/td>
&lt;td>주로 커널 수준에서 구현&lt;/td>
&lt;td>사용자 수준 및 커널 수준 모두에서 구현 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>표준화&lt;/strong>&lt;/td>
&lt;td>POSIX 표준으로 잘 정의됨&lt;/td>
&lt;td>구현에 따라 동작이 다를 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>성능 특성&lt;/strong>&lt;/td>
&lt;td>경쟁 상황에서 성능 저하 가능&lt;/td>
&lt;td>스핀락 구현 시 짧은 대기 시간에 효율적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>공정성&lt;/strong>&lt;/td>
&lt;td>일반적으로 공정성 메커니즘 내장&lt;/td>
&lt;td>구현에 따라 공정성 보장 여부가 다름&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>실제 구현 시에는 고려할 사항&lt;span class="hx-absolute -hx-mt-20" id="실제-구현-시에는-고려할-사항">&lt;/span>
&lt;a href="#%ec%8b%a4%ec%a0%9c-%ea%b5%ac%ed%98%84-%ec%8b%9c%ec%97%90%eb%8a%94-%ea%b3%a0%eb%a0%a4%ed%95%a0-%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>동시성 요구사항 (얼마나 많은 스레드가 동시에 접근하는가)&lt;/li>
&lt;li>성능 요구사항 (응답 시간, 처리량 등)&lt;/li>
&lt;li>리소스 사용량 (메모리, CPU 사용률)&lt;/li>
&lt;li>오류 처리 및 복구 요구사항&lt;/li>
&lt;li>데드록 방지 필요성&lt;/li>
&lt;li>플랫폼 및 운영체제의 지원 여부&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>상호 배제 (Mutual Exclusion)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/mutual-exclusion/</link><pubDate>Sun, 17 Nov 2024 07:50:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/mutual-exclusion/</guid><description>
&lt;h2>상호 배제 (Mutual Exclusion)&lt;span class="hx-absolute -hx-mt-20" id="상호-배제-mutual-exclusion">&lt;/span>
&lt;a href="#%ec%83%81%ed%98%b8-%eb%b0%b0%ec%a0%9c-mutual-exclusion" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>여러 프로세스나 스레드가 공유 자원에 동시에 접근하는 것을 방지하는 동기화 메커니즘.&lt;br>
한 번에 하나의 프로세스나 스레드만 임계 영역(critical section)에 진입할 수 있도록 보장하는 기법이다.&lt;/p>
&lt;p>필요한 이유:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 상호 배제가 없는 경우의 문제점&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">BankAccount&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">withdraw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 다음 세 줄의 작업이 원자적이지 않음&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="c1"># 잔액 읽기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_balance&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">amount&lt;/span> &lt;span class="c1"># 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_balance&lt;/span> &lt;span class="c1"># 결과 저장&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 두 스레드가 동시에 실행되면 문제가 발생할 수 있음&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">account&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BankAccount&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 스레드 1: withdraw(500)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 스레드 2: withdraw(500)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 예상 잔액: 0, 실제 잔액: 500 (잘못된 결과)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>목적&lt;span class="hx-absolute -hx-mt-20" id="목적">&lt;/span>
&lt;a href="#%eb%aa%a9%ec%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>데이터 무결성 유지: 여러 프로세스가 동시에 공유 데이터를 수정하는 것을 방지한다.&lt;/li>
&lt;li>경쟁 조건(Race Condition) 예방: 프로세스 실행 순서에 따른 결과 불일치를 막는다.&lt;/li>
&lt;li>교착 상태(Deadlock)와 기아 상태(Starvation) 방지: 자원 할당의 효율성을 높인다.&lt;/li>
&lt;/ul>
&lt;h3>구현 방법&lt;span class="hx-absolute -hx-mt-20" id="구현-방법">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>잠금(Lock)&lt;br>
가장 기본적인 동기화 메커니즘으로, 한 번에 하나의 스레드만 임계 영역에 접근할 수 있게 한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>세마포어(Semaphores)&lt;br>
여러 스레드가 동시에 접근할 수 있는 자원의 수를 제한한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>모니터(Monitor)&lt;br>
모니터는 객체 지향적인 동기화 메커니즘으로, 데이터와 해당 데이터에 접근하는 메서드들을 하나의 단위로 캡슐화한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>조건 변수(Condition Variable)&lt;br>
스레드가 특정 조건이 만족될 때까지 대기하게 해주는 동기화 메커니즘.&lt;br>
생산자-소비자 패턴에서 자주 사용된다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>원자적 연산 (Atomic Operations)&lt;br>
하드웨어 수준에서 지원하는 원자적 연산을 사용하여 상호 배제를 구현할 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>메시지 패싱 (Message Passing)&lt;br>
프로세스나 스레드 간에 메시지를 주고받아 상호 배제를 구현할 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>비동기 프로그래밍 (Asynchronous Programming)&lt;br>
비동기 프로그래밍을 통해 상호 배제를 구현할 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>피터슨 알고리즘 (Peterson&amp;rsquo;s Algorithm)&lt;br>
두 프로세스 간의 상호 배제를 소프트웨어적으로 구현하는 방법.&lt;br>
플래그와 턴 변수를 사용하여 임계 영역 진입을 제어한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>데커 알고리즘 (Dekker&amp;rsquo;s Algorithm)&lt;br>
피터슨 알고리즘과 비슷하지만 더 복잡한 구조를 가진 상호 배제 알고리즘.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>램포트의 빵집 알고리즘 (Lamport&amp;rsquo;s Bakery Algorithm)&lt;br>
여러 프로세스 간의 상호 배제를 구현할 수 있는 알고리즘.&lt;br>
빵집에서 번호표를 뽑는 것과 같은 방식으로 작동한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>동기화 메커니즘은 서로 다른 상황에서 유용하다:&lt;/p>
&lt;ul>
&lt;li>Lock은 간단한 상호 배제가 필요할 때 사용&lt;/li>
&lt;li>Semaphore는 리소스 풀 관리에 적합&lt;/li>
&lt;li>Monitor는 데이터와 연산을 함께 캡슐화할 때 유용&lt;/li>
&lt;li>Condition Variables는 스레드 간 시그널링이 필요할 때 사용&lt;/li>
&lt;/ul>
&lt;h3>조건&lt;span class="hx-absolute -hx-mt-20" id="조건">&lt;/span>
&lt;a href="#%ec%a1%b0%ea%b1%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>상호 배제: 한 번에 하나의 프로세스만 임계 영역에 진입할 수 있어야 한다.&lt;/li>
&lt;li>진행: 임계 영역 외부의 프로세스가 다른 프로세스의 진입을 방해해서는 안 된다.&lt;/li>
&lt;li>유한 대기: 프로세스는 임계 영역 진입을 무한정 기다리지 않아야 한다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>임계 영역 (Critical Section)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/</link><pubDate>Sun, 17 Nov 2024 07:49:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/</guid><description>
&lt;h2>임계 영역 (Critical Section)&lt;span class="hx-absolute -hx-mt-20" id="임계-영역-critical-section">&lt;/span>
&lt;a href="#%ec%9e%84%ea%b3%84-%ec%98%81%ec%97%ad-critical-section" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>운영체제에서 임계 영역(Critical Section)은 여러 프로세스 또는 스레드가 공유하는 자원에 접근하는 코드 영역을 말한다.&lt;br>
이는 병렬 컴퓨팅 환경에서 중요한 개념으로, 데이터의 일관성과 무결성을 보장하기 위해 사용된다.&lt;/p>
&lt;p>여러 프로세스가 동시에 임계 영역에 진입하면 데이터의 일관성이 깨질 수 있다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 임계 영역 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span> &lt;span class="c1"># 공유 자원&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">withdraw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">global&lt;/span> &lt;span class="n">balance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 임계 영역 시작&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">balance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">amount&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 임계 영역 종료&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>임계 영역 문제의 해결 조건&lt;span class="hx-absolute -hx-mt-20" id="임계-영역-문제의-해결-조건">&lt;/span>
&lt;a href="#%ec%9e%84%ea%b3%84-%ec%98%81%ec%97%ad-%eb%ac%b8%ec%a0%9c%ec%9d%98-%ed%95%b4%ea%b2%b0-%ec%a1%b0%ea%b1%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>상호 배제(Mutual Exclusion): 한 프로세스가 임계 영역에 있을 때 다른 프로세스는 진입할 수 없다.&lt;/li>
&lt;li>진행(Progress): 임계 영역에 있는 프로세스가 없다면, 진입하려는 프로세스가 들어갈 수 있어야 한다.&lt;/li>
&lt;li>한정된 대기(Bounded Waiting): 프로세스의 임계 영역 진입은 무한정 연기되어서는 안 된다.&lt;/li>
&lt;/ol>
&lt;h3>임계 영역 관련 문제와 해결 방법&lt;span class="hx-absolute -hx-mt-20" id="임계-영역-관련-문제와-해결-방법">&lt;/span>
&lt;a href="#%ec%9e%84%ea%b3%84-%ec%98%81%ec%97%ad-%ea%b4%80%eb%a0%a8-%eb%ac%b8%ec%a0%9c%ec%99%80-%ed%95%b4%ea%b2%b0-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>구분&lt;/th>
&lt;th>데드락(Deadlock)&lt;/th>
&lt;th>경쟁 상태(Race Condition)&lt;/th>
&lt;th>기아 상태(Starvation)&lt;/th>
&lt;th>라이브락(Livelock)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>두 개 이상의 프로세스가 서로의 자원을 기다리며 영구적으로 블록된 상태&lt;/td>
&lt;td>여러 프로세스가 공유 자원에 동시 접근할 때 실행 순서에 따라 결과가 달라지는 상태&lt;/td>
&lt;td>특정 프로세스가 필요한 자원을 계속 할당받지 못하는 상태&lt;/td>
&lt;td>프로세스들이 서로에게 응답하며 상태는 변하지만 실제 진행은 없는 상태&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>발생 원인&lt;/td>
&lt;td>상호 배제, 점유와 대기, 비선점, 순환 대기 조건이 동시 충족&lt;/td>
&lt;td>공유 자원에 대한 동시 접근, 원자성 결여&lt;/td>
&lt;td>부적절한 자원 할당 정책, 우선순위 역전 현상&lt;/td>
&lt;td>프로세스들의 과도한 양보, 재귀적 회피 동작&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결과&lt;/td>
&lt;td>시스템 전체 또는 일부 프로세스의 완전한 정지&lt;/td>
&lt;td>데이터 불일치, 예측 불가능한 결과&lt;/td>
&lt;td>특정 프로세스의 실행 지연 또는 무한 대기&lt;/td>
&lt;td>CPU 자원 소비, 실제 작업 진행 없음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>특징&lt;/td>
&lt;td>프로세스들이 움직이지 않고 완전히 멈춤&lt;/td>
&lt;td>타이밍에 따라 결과가 비결정적&lt;/td>
&lt;td>자원 할당의 불공정성&lt;/td>
&lt;td>프로세스들이 활발히 상태 변경&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>해결 방법&lt;/td>
&lt;td>프로세스 강제 종료, 자원 선점, 데드락 발생 조건 제거&lt;/td>
&lt;td>동기화 메커니즘 사용(뮤텍스, 세마포어 등)&lt;/td>
&lt;td>에이징(Aging) 기법 도입, 공정한 스케줄링&lt;/td>
&lt;td>무작위 대기 시간 도입, 우선순위 조정&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>예방 기법&lt;/td>
&lt;td>자원 할당 그래프 사용, 자원 순서화, 타임아웃 설정&lt;/td>
&lt;td>임계 영역 설정, 원자적 연산 사용&lt;/td>
&lt;td>자원 예약 시스템, 우선순위 조정 메커니즘&lt;/td>
&lt;td>타임아웃 설정, 재시도 횟수 제한&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>탐지 방법&lt;/td>
&lt;td>자원 할당 그래프 분석, 대기 사이클 검출&lt;/td>
&lt;td>데이터 일관성 검사, 로그 분석&lt;/td>
&lt;td>자원 할당 통계 모니터링&lt;/td>
&lt;td>CPU 사용률 분석, 진행률 모니터링&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>영향 범위&lt;/td>
&lt;td>전체 시스템 또는 관련 프로세스 그룹&lt;/td>
&lt;td>공유 자원을 사용하는 프로세스들&lt;/td>
&lt;td>특정 프로세스 또는 프로세스 그룹&lt;/td>
&lt;td>상호 작용하는 프로세스 그룹&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>복구 방법&lt;/td>
&lt;td>프로세스 재시작, 시스템 재부팅&lt;/td>
&lt;td>트랜잭션 롤백, 상태 복원&lt;/td>
&lt;td>우선순위 재조정, 자원 재할당&lt;/td>
&lt;td>프로세스 재시작 또는 동작 패턴 변경&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>모니터링 방법&lt;/td>
&lt;td>시스템 자원 모니터링, 프로세스 상태 감시&lt;/td>
&lt;td>로그 분석, 데이터 정합성 검사&lt;/td>
&lt;td>자원 할당 히스토리 분석&lt;/td>
&lt;td>CPU 사용률 추적, 진행 상태 모니터링&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>해결 방법&lt;span class="hx-absolute -hx-mt-20" id="해결-방법">&lt;/span>
&lt;a href="#%ed%95%b4%ea%b2%b0-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ol>
&lt;li>
&lt;p>상호 배제(Mutual Exclusion) 구현:&lt;/p>
&lt;ul>
&lt;li>뮤텍스(Mutex): 하나의 공유 자원에 대한 접근을 제어한다.&lt;/li>
&lt;li>세마포어(Semaphore): 여러 개의 공유 자원에 대한 접근을 제어한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>동기화 기법:&lt;/p>
&lt;ul>
&lt;li>피터슨 알고리즘(Peterson&amp;rsquo;s Algorithm): 두 프로세스 간의 상호 배제를 소프트웨어적으로 구현한다.&lt;/li>
&lt;li>베이커리 알고리즘(Bakery Algorithm): 여러 프로세스 간의 상호 배제를 구현한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>하드웨어 지원:&lt;/p>
&lt;ul>
&lt;li>테스트와 설정(Test-and-Set) 명령어: 원자적 연산을 통해 상호 배제를 구현한다.&lt;/li>
&lt;li>비교와 교환(Compare-and-Swap) 명령어: 더 정교한 동기화 제어를 가능하게 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>운영체제 수준의 지원:&lt;/p>
&lt;ul>
&lt;li>모니터(Monitor): 고수준의 동기화 메커니즘으로, 상호 배제를 자동으로 보장한다.&lt;/li>
&lt;li>조건 변수(Condition Variables): 프로세스 간 통신과 동기화를 위해 사용된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>프로그래밍 언어 수준의 지원:&lt;/p>
&lt;ul>
&lt;li>동기화 키워드(예: Java의 synchronized): 임계 영역에 대한 접근을 언어 차원에서 제어한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>락-프리(Lock-Free) 및 대기-프리(Wait-Free) 알고리즘:&lt;/p>
&lt;ul>
&lt;li>락을 사용하지 않고도 동시성을 관리하는 고급 기법.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h5>해결 방법들을 적용할 때 고려해야 할 중요한 원칙&lt;span class="hx-absolute -hx-mt-20" id="해결-방법들을-적용할-때-고려해야-할-중요한-원칙">&lt;/span>
&lt;a href="#%ed%95%b4%ea%b2%b0-%eb%b0%a9%eb%b2%95%eb%93%a4%ec%9d%84-%ec%a0%81%ec%9a%a9%ed%95%a0-%eb%95%8c-%ea%b3%a0%eb%a0%a4%ed%95%b4%ec%95%bc-%ed%95%a0-%ec%a4%91%ec%9a%94%ed%95%9c-%ec%9b%90%ec%b9%99" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;ul>
&lt;li>상호 배제(Mutual Exclusion)
&lt;ul>
&lt;li>한 번에 하나의 프로세스만 임계 영역에 진입할 수 있도록 보장&lt;/li>
&lt;li>적절한 동기화 메커니즘 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>진행(Progress)
&lt;ul>
&lt;li>임계 영역에 있는 프로세스가 없다면 진입을 원하는 프로세스가 진입할 수 있어야 함&lt;/li>
&lt;li>기아 상태 방지&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>한정 대기(Bounded Waiting)
&lt;ul>
&lt;li>프로세스의 임계 영역 진입 요청 후 무한정 대기하지 않도록 보장&lt;/li>
&lt;li>공정성 확보&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>원자성(Atomicity)
&lt;ul>
&lt;li>임계 영역의 연산은 중단되지 않고 완전히 수행되어야 함&lt;/li>
&lt;li>트랜잭션 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3>임계 영역 최적화 기법&lt;span class="hx-absolute -hx-mt-20" id="임계-영역-최적화-기법">&lt;/span>
&lt;a href="#%ec%9e%84%ea%b3%84-%ec%98%81%ec%97%ad-%ec%b5%9c%ec%a0%81%ed%99%94-%ea%b8%b0%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>임계 영역 최소화&lt;span class="hx-absolute -hx-mt-20" id="임계-영역-최소화">&lt;/span>
&lt;a href="#%ec%9e%84%ea%b3%84-%ec%98%81%ec%97%ad-%ec%b5%9c%ec%86%8c%ed%99%94" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>임계 영역을 가능한 한 작게 유지하는 것이 중요하다.&lt;br>
이를 통해 동기화로 인한 오버헤드를 줄이고 병렬 처리 효율을 높일 수 있다.&lt;/p>
&lt;ul>
&lt;li>공유 데이터 접근 코드만 임계 영역으로 설정&lt;/li>
&lt;li>계산 로직은 임계 영역 밖으로 이동&lt;/li>
&lt;/ul>
&lt;h4>세밀한 잠금 (Fine-grained Locking)&lt;span class="hx-absolute -hx-mt-20" id="세밀한-잠금-fine-grained-locking">&lt;/span>
&lt;a href="#%ec%84%b8%eb%b0%80%ed%95%9c-%ec%9e%a0%ea%b8%88-fine-grained-locking" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>큰 임계 영역을 여러 개의 작은 임계 영역으로 나누는 기법.&lt;/p>
&lt;ul>
&lt;li>데이터 구조의 일부분만 잠그도록 설계&lt;/li>
&lt;li>동시성을 높이고 대기 시간을 줄임&lt;/li>
&lt;/ul>
&lt;h4>락-프리 알고리즘 (Lock-free Algorithms)&lt;span class="hx-absolute -hx-mt-20" id="락-프리-알고리즘-lock-free-algorithms">&lt;/span>
&lt;a href="#%eb%9d%bd-%ed%94%84%eb%a6%ac-%ec%95%8c%ea%b3%a0%eb%a6%ac%ec%a6%98-lock-free-algorithms" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>락을 사용하지 않고 원자적 연산을 활용하여 동기화를 구현한다.&lt;/p>
&lt;ul>
&lt;li>Compare-and-Swap (CAS) 등의 원자적 연산 사용&lt;/li>
&lt;li>데드락 위험 제거 및 성능 향상&lt;/li>
&lt;/ul>
&lt;h4>읽기-쓰기 락 (Read-Write Locks)&lt;span class="hx-absolute -hx-mt-20" id="읽기-쓰기-락-read-write-locks">&lt;/span>
&lt;a href="#%ec%9d%bd%ea%b8%b0-%ec%93%b0%ea%b8%b0-%eb%9d%bd-read-write-locks" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>읽기 작업과 쓰기 작업에 대해 서로 다른 락을 사용한다.&lt;/p>
&lt;ul>
&lt;li>다수의 읽기 작업 동시 허용&lt;/li>
&lt;li>쓰기 작업 시에만 배타적 접근&lt;/li>
&lt;/ul>
&lt;h4>비동기 프로그래밍 (Asynchronous Programming)&lt;span class="hx-absolute -hx-mt-20" id="비동기-프로그래밍-asynchronous-programming">&lt;/span>
&lt;a href="#%eb%b9%84%eb%8f%99%ea%b8%b0-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%98%eb%b0%8d-asynchronous-programming" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>비동기 프로그래밍 모델을 사용하여 임계 영역 접근을 최소화한다.&lt;/p>
&lt;ul>
&lt;li>이벤트 기반 프로그래밍&lt;/li>
&lt;li>콜백 또는 Promise 패턴 활용&lt;/li>
&lt;/ul>
&lt;h4>락 결합 (Lock Coalescing)&lt;span class="hx-absolute -hx-mt-20" id="락-결합-lock-coalescing">&lt;/span>
&lt;a href="#%eb%9d%bd-%ea%b2%b0%ed%95%a9-lock-coalescing" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>여러 개의 연속된 락 획득과 해제를 하나로 합치는 기법.&lt;/p>
&lt;ul>
&lt;li>락 획득/해제 횟수 감소&lt;/li>
&lt;li>오버헤드 감소 및 성능 향상&lt;/li>
&lt;/ul>
&lt;h4>락 계층화 (Lock Hierarchies)&lt;span class="hx-absolute -hx-mt-20" id="락-계층화-lock-hierarchies">&lt;/span>
&lt;a href="#%eb%9d%bd-%ea%b3%84%ec%b8%b5%ed%99%94-lock-hierarchies" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>락을 계층적으로 구성하여 데드락을 방지하고 성능을 개선한다.&lt;/p>
&lt;ul>
&lt;li>락 획득 순서 강제&lt;/li>
&lt;li>복잡한 동기화 시나리오에서 유용&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>