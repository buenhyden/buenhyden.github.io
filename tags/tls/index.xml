<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – TLS</title><link>https://buenhyden.github.io/tags/tls/</link><description>Recent content in TLS on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 05 Oct 2024 08:48:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/tls/index.xml" rel="self" type="application/rss+xml"/><item><title>SSL and TLS</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/ssl-and-tls/</link><pubDate>Sat, 05 Oct 2024 08:48:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/ssl-and-tls/</guid><description>
&lt;h2>SSL(Secure Sockets Layer)과 TLS(Transport Layer Security)&lt;/h2>&lt;p>인터넷 상에서 데이터를 안전하게 전송하기 위한 암호화 프로토콜.&lt;br>
TLS는 SSL의 후속 버전으로, 보안성과 성능이 향상되었다.&lt;/p>
&lt;h3>SSL의 역사와 개념&lt;/h3>&lt;p>SSL은 1995년 Netscape에 의해 개발되었다.&lt;br>
주요 목적은 웹 브라우징 시 데이터의 기밀성과 무결성을 보장하는 것.&lt;br>
SSL은 다음과 같은 버전으로 발전했다:&lt;/p>
&lt;ol>
&lt;li>SSL 1.0 (내부적으로만 사용)&lt;/li>
&lt;li>SSL 2.0 (1995년 공개)&lt;/li>
&lt;li>SSL 3.0 (1996년 공개)&lt;/li>
&lt;/ol>
&lt;h3>TLS의 등장과 발전&lt;/h3>&lt;p>TLS는 SSL 3.0을 기반으로 1999년 IETF(Internet Engineering Task Force)에 의해 개발되었다.&lt;br>
TLS는 SSL의 보안 취약점을 개선하고 더 강력한 암호화 알고리즘을 도입했다.&lt;br>
TLS의 주요 버전은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>TLS 1.0 (1999년)&lt;/li>
&lt;li>TLS 1.1 (2006년)&lt;/li>
&lt;li>TLS 1.2 (2008년)&lt;/li>
&lt;li>TLS 1.3 (2018년)&lt;/li>
&lt;/ol>
&lt;h3>OSI 7계층과 TCP/IP 모델에서의 위치&lt;/h3>&lt;ul>
&lt;li>OSI 7계층:&lt;br>
전송 계층(4계층)과 응용 계층(7계층) 사이에서 동작&lt;/li>
&lt;li>TCP/IP 모델:&lt;br>
전송 계층과 응용 계층 사이에서 동작&lt;/li>
&lt;/ul>
&lt;h3>주요 특징&lt;/h3>&lt;ol>
&lt;li>데이터의 기밀성, 무결성, 인증을 제공한다.&lt;/li>
&lt;li>공개키 암호화와 대칭키 암호화를 모두 사용한다.&lt;/li>
&lt;li>디지털 인증서를 통해 서버의 신원을 확인한다.&lt;/li>
&lt;li>다양한 암호화 알고리즘과 프로토콜 버전을 지원한다.&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;/h3>&lt;ol>
&lt;li>데이터 전송의 보안성 강화&lt;/li>
&lt;li>서버 인증을 통한 신뢰성 확보&lt;/li>
&lt;li>검색 엔진 최적화(SEO) 향상&lt;/li>
&lt;li>규정 준수 지원 (예: PCI DSS)&lt;/li>
&lt;li>사용자 신뢰도 증가&lt;/li>
&lt;/ol>
&lt;h3>SSL과 TLS의 차이점&lt;/h3>&lt;ol>
&lt;li>버전:
&lt;ul>
&lt;li>SSL은 1.0, 2.0, 3.0 버전이 있으며 모두 취약점이 발견되어 더 이상 사용되지 않는다.&lt;/li>
&lt;li>TLS는 1.0, 1.1, 1.2, 1.3 버전이 있으며, 현재는 1.2와 1.3이 주로 사용된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보안성:
&lt;ul>
&lt;li>TLS가 SSL보다 더 강력한 암호화 알고리즘과 보안 기능을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>핸드셰이크 과정:
&lt;ul>
&lt;li>TLS는 SSL보다 더 효율적이고 빠른 핸드셰이크 과정을 가진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>암호 스위트:
&lt;ul>
&lt;li>TLS는 더 다양하고 안전한 암호 스위트를 지원한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>메시지 인증:
&lt;ul>
&lt;li>SSL은 MAC(Message Authentication Code)를 사용하지만, TLS는 HMAC(Hash-based Message Authentication Code)를 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>동작 방식&lt;/h3>&lt;ol>
&lt;li>핸드셰이크(handshake) 과정:
&lt;ol>
&lt;li>&lt;strong>클라이언트 헬로&lt;/strong>: 클라이언트가 지원하는 암호화 방식 등을 서버에 전송한다.&lt;/li>
&lt;li>&lt;strong>서버 헬로&lt;/strong>: 서버가 선택한 암호화 방식과 인증서를 클라이언트에 전송한다.&lt;/li>
&lt;li>&lt;strong>인증서 검증&lt;/strong>: 클라이언트가 서버의 인증서를 검증한다.&lt;/li>
&lt;li>&lt;strong>키 교환&lt;/strong>: 안전한 통신을 위한 대칭 키를 교환한다.&lt;/li>
&lt;li>&lt;strong>암호화 통신 시작&lt;/strong>: 협상된 암호화 방식으로 데이터를 암호화하여 통신한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>데이터 전송: 생성된 세션 키를 사용하여 데이터를 암호화하고 전송한다.&lt;/li>
&lt;li>연결 종료: 통신이 완료되면 세션을 종료하고 세션 키를 폐기한다.&lt;/li>
&lt;/ol>
&lt;p>SSL(Secure Sockets Layer)과 TLS(Transport Layer Security)는 네트워크 통신을 안전하게 암호화하기 위한 프로토콜입니다. 두 프로토콜의 주요 차이점과 관련 개념들에 대해 설명하겠습니다.&lt;/p>
&lt;h3>인증서 체인&lt;/h3>&lt;p>인증서 체인은 디지털 인증서의 신뢰성을 확립하는 계층적 구조이다.&lt;br>
일반적으로 다음과 같은 구조로 이루어진다:&lt;/p>
&lt;ol>
&lt;li>루트 인증서: 최상위 신뢰 기관의 자체 서명 인증서&lt;/li>
&lt;li>중간 인증서: 루트 인증 기관이 서명한 인증서&lt;/li>
&lt;li>최종 사용자 인증서: 웹사이트나 서비스에 발급된 인증서&lt;br>
완전한 인증서 체인을 제공하는 것이 중요하며, 이를 통해 브라우저는 인증서의 유효성을 검증할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>암호 스위트&lt;/h3>&lt;p>암호 스위트는 SSL/TLS 연결에서 사용되는 암호화 알고리즘의 조합.&lt;br>
주요 구성 요소는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>키 교환 알고리즘 (예: RSA, ECDHE)&lt;/li>
&lt;li>인증 알고리즘 (예: RSA, ECDSA)&lt;/li>
&lt;li>대칭 암호화 알고리즘 (예: AES, ChaCha20)&lt;/li>
&lt;li>메시지 인증 코드 알고리즘 (예: SHA-256, POLY1305)&lt;br>
최신 TLS 버전에서는 보안성이 높은 암호 스위트를 우선적으로 사용한다.&lt;/li>
&lt;/ol>
&lt;h3>전방 비밀성&lt;/h3>&lt;p>전방 비밀성(Forward Secrecy)은 현재 세션의 키가 노출되더라도 과거 세션의 통신 내용을 해독할 수 없도록 하는 보안 속성이다.&lt;br>
ECDHE나 DHE와 같은 키 교환 방식을 사용하여 구현된다.&lt;/p>
&lt;h3>HTTPS&lt;/h3>&lt;p>HTTPS는 HTTP 프로토콜에 SSL/TLS를 적용한 것이다.&lt;br>
웹 브라우저와 서버 간의 모든 통신을 암호화하여 데이터의 기밀성과 무결성을 보장한다.&lt;/p>
&lt;h3>성능 최적화&lt;/h3>&lt;p>SSL/TLS 성능 최적화를 위한 주요 방법들:&lt;/p>
&lt;ol>
&lt;li>세션 재개: 이전 연결의 정보를 재사용하여 핸드셰이크 과정을 단축한다.&lt;/li>
&lt;li>OCSP Stapling: 인증서 상태 확인 과정을 최적화한다.&lt;/li>
&lt;li>HTTP/2 지원: 연결 다중화를 통해 성능을 향상시킨다.&lt;/li>
&lt;li>적절한 암호 스위트 선택: 보안과 성능의 균형을 고려한다.&lt;/li>
&lt;li>하드웨어 가속: 암호화 작업을 전용 하드웨어로 처리하여 성능을 개선한다.&lt;/li>
&lt;/ol>
&lt;p>추가적으로 알아야 할 내용:&lt;/p>
&lt;ol>
&lt;li>SSL과 TLS의 차이: TLS는 SSL의 후속 버전으로, 더 강화된 보안 기능을 제공합니다.&lt;/li>
&lt;li>인증서 체인: 루트 인증서, 중간 인증서, 최종 엔티티 인증서로 구성된 체인을 통해 신뢰성을 확보합니다.&lt;/li>
&lt;li>암호 스위트: 다양한 암호화 알고리즘의 조합을 지원하며, 클라이언트와 서버가 협상하여 사용할 암호 스위트를 결정합니다.&lt;/li>
&lt;li>전방 비밀성: 세션 키가 노출되더라도 과거의 통신 내용을 해독할 수 없도록 하는 기능을 제공합니다.&lt;/li>
&lt;li>HTTPS: SSL/TLS는 HTTPS 프로토콜의 기반이 되며, 웹 브라우징 보안에 필수적입니다.&lt;/li>
&lt;li>성능 최적화: TLS 1.3에서는 핸드셰이크 과정을 간소화하여 연결 속도를 개선했습니다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>