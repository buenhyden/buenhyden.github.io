<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Software-Architecture-Patterns on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/software-architecture-patterns/</link>
    <description>Recent content in Software-Architecture-Patterns on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.143.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 19 Nov 2024 03:56:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/software-architecture-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Pipeline Pattern</title>
      <link>https://buenhyden.github.io/til/2024/11/19/data-pipeline-pattern/</link>
      <pubDate>Tue, 19 Nov 2024 03:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/11/19/data-pipeline-pattern/</guid>
      <description>데이터 파이프라인 패턴은 데이터를 원천에서 목적지로 이동시키는 과정을 자동화하고 최적화하는 아키텍처 패턴이다.</description>
    </item>
    <item>
      <title>MVC pattern vs MVVC pattern vs MVP pattern</title>
      <link>https://buenhyden.github.io/til/2024/09/27/mvc-pattern-vs-mvvc-pattern-vs-mvp-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 01:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/27/mvc-pattern-vs-mvvc-pattern-vs-mvp-pattern/</guid>
      <description>MVC, MVP, MVVM 아키텍처 패턴은 모두 **관심사 분리(SoC)** 원칙에 기반하며, 각기 다른 방식으로 UI 로직과 비즈니스 로직을 분리한다.</description>
    </item>
    <item>
      <title>MSA 패턴 유형별 비교</title>
      <link>https://buenhyden.github.io/til/2024/11/19/msa-%ED%8C%A8%ED%84%B4-%EC%9C%A0%ED%98%95%EB%B3%84-%EB%B9%84%EA%B5%90/</link>
      <pubDate>Tue, 19 Nov 2024 02:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/11/19/msa-%ED%8C%A8%ED%84%B4-%EC%9C%A0%ED%98%95%EB%B3%84-%EB%B9%84%EA%B5%90/</guid>
      <description>MSA의 주요 패턴 유형들을 체계적으로 정리한 것.</description>
    </item>
    <item>
      <title>Software Architecture Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/</link>
      <pubDate>Thu, 26 Sep 2024 05:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/</guid>
      <description>주어진 상황에서의 소프트웨어 아키텍쳐에서 일반적으로 발생하는 문제점들에 대한 일반화되고 재사용 가능한 솔루션이다. 아키텍쳐 패턴은 소프트웨어 디자인 패턴과 유사하지만 더 큰 범주에 속한다.</description>
    </item>
    <item>
      <title>Event-Driven Architecture vs Event Sourcing Pattern vs Publisher-Subscriber Pattern vs Producer-Consumer Pattern</title>
      <link>https://buenhyden.github.io/til/2024/11/19/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</link>
      <pubDate>Tue, 19 Nov 2024 03:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/11/19/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</guid>
      <description>EDA는 이벤트 중심의 시스템 설계를 위한 상위 수준의 아키텍처 스타일이며, Publisher-Subscriber Pattern과 Producer-Consumer Pattern은 EDA를 구현하는 데 사용되는 구체적인 통신 모델이다. 그리고 Event Sourcing Pattern은 EDA의 한 구현 방식으로 볼 수 있으며, 이벤트를 저장하고 관리하는 방법을 제공한다.</description>
    </item>
    <item>
      <title>Anti-Corruption Layer</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/refactoring-to-services/anti-corruption-layer/</link>
      <pubDate>Sun, 17 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/refactoring-to-services/anti-corruption-layer/</guid>
      <description>&lt;h2 id=&#34;anti-corruption-layer&#34;&gt;Anti-Corruption Layer&lt;/h2&gt;
&lt;p&gt;Anti-Corruption Layer (ACL) 패턴은 마이크로서비스 아키텍처(MSA)에서 디자인 패턴 중 하나이다.&lt;br&gt;
이 패턴은 서로 다른 도메인 모델이나 통신 프로토콜을 가진 시스템 간의 통합을 위해 사용된다.&lt;/p&gt;
&lt;p&gt;ACL은 서로 다른 시스템 간의 통신을 위한 번역 계층 역할을 한다.&lt;br&gt;
주요 목적은 다음과 같다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;시스템 격리: 외부 시스템의 복잡성으로부터 내부 시스템을 보호한다.&lt;/li&gt;
&lt;li&gt;도메인 모델 보존: 각 시스템의 고유한 도메인 모델을 유지한다.&lt;/li&gt;
&lt;li&gt;데이터 변환: 서로 다른 데이터 모델 간의 변환을 담당한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ACL 패턴을 효과적으로 사용하려면 시스템 간의 경계를 명확히 정의하고, 변환 로직을 신중하게 설계해야 한다.&lt;br&gt;
또한, 시스템 변경에 따른 ACL의 업데이트와 유지보수 계획을 수립하는 것이 중요하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Refactoring to services</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/refactoring-to-services/</link>
      <pubDate>Sun, 17 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/refactoring-to-services/</guid>
      <description>&lt;h2 id=&#34;anti-corruption-layer&#34;&gt;Anti-Corruption Layer&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Strangler Application</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/refactoring-to-services/strangler-application/</link>
      <pubDate>Sun, 17 Nov 2024 01:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/refactoring-to-services/strangler-application/</guid>
      <description>&lt;h2 id=&#34;strangler-application&#34;&gt;Strangler Application&lt;/h2&gt;
&lt;p&gt;Strangler Application 패턴은 마이크로서비스 아키텍처로의 전환을 위한 중요한 리팩토링 전략이다.&lt;/p&gt;
&lt;p&gt;Strangler Application 패턴은 기존의 모놀리식 애플리케이션을 점진적으로 새로운 마이크로서비스 기반 시스템으로 대체하는 방법이다.&lt;br&gt;
이 패턴의 이름은 호주의 열대우림에서 볼 수 있는 스트랭글러 무화과나무에서 유래했다. 이 나무는 숙주 나무를 감싸고 자라다가 결국 숙주를 대체하는데, 이와 유사하게 새로운 서비스가 기존 시스템을 점진적으로 대체한다.&lt;/p&gt;
&lt;p&gt;Strangler Application 패턴은 레거시 시스템을 현대화하는 효과적인 방법으로, 리스크를 관리하면서 점진적으로 마이크로서비스 아키텍처로 전환할 수 있게 해준다. 이 패턴을 통해 기업은 기존 시스템의 가치를 유지하면서 새로운 기술과 아키텍처의 이점을 활용할 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cross-Cutting Concern Patterns</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/</link>
      <pubDate>Tue, 12 Nov 2024 02:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/</guid>
      <description>Ambassador pattern, Service Discovery pattern, Service Mesh pattern, 그리고 Sidecar pattern은 모두 마이크로서비스 아키텍처에서 발생하는 cross-cutting concern(횡단 관심사)를 해결하기 위한 디자인 패턴들이다.</description>
    </item>
    <item>
      <title>멀티 테넌시(Multi-tenancy)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/multi-tenancy/</link>
      <pubDate>Fri, 27 Sep 2024 14:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/multi-tenancy/</guid>
      <description>하나의 소프트웨어 애플리케이션이나 시스템이 여러 고객(테넌트)에게 서비스를 제공하는 아키텍처이다.</description>
    </item>
    <item>
      <title>Rate Limiting Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/rate-limiting-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 11:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/rate-limiting-pattern/</guid>
      <description>&lt;h2 id=&#34;rate-limiting-pattern&#34;&gt;Rate Limiting Pattern&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Rate Limiting Pattern&amp;quot;은 소프트웨어 아키텍처에서 &lt;strong&gt;서비스의 과도한 사용을 방지&lt;/strong&gt;하고 자원을 공정하게 분배하기 위한 핵심 전략이다.&lt;br&gt;
이 패턴은 특히 마이크로서비스, API 게이트웨이, 분산 시스템에서 중요하게 활용되며, 다음과 같은 세부 사항으로 구성된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rate Limiting&lt;/strong&gt;은 특정 시간 동안 클라이언트나 서비스가 보낼 수 있는 요청 수를 제한하는 메커니즘이다.&lt;br&gt;
주로 다음 목적을 위해 사용된다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;서비스 장애 예방&lt;/strong&gt;: DDoS 공격, API 오용, 리소스 고갈 방지.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;비용 관리&lt;/strong&gt;: 클라우드 환경에서 트래픽 증가로 인한 예산 초과 방지.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;공정한 자원 분배&lt;/strong&gt;: 특정 사용자가 시스템을 독점하지 않도록 제어.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예시:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serverless Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/serverless-architecture/</link>
      <pubDate>Fri, 27 Sep 2024 11:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/serverless-architecture/</guid>
      <description>Serverless Architecture는 개발자가 서버 관리 없이 애플리케이션 로직에 집중할 수 있도록 설계된 클라우드 컴퓨팅 모델로, 이벤트 기반의 자동 확장성과 사용한 만큼만 비용을 지불하는 구조가 핵심이다.</description>
    </item>
    <item>
      <title>Publisher-Subscriber Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/publisher-subscriber-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 11:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/publisher-subscriber-pattern/</guid>
      <description>이 패턴은 메시지를 보내는 발행자(Publisher)와 메시지를 받는 구독자(Subscriber) 사이의 느슨한 결합(Loose Coupling)을 제공하는 메시징 패턴으로, 발행자는 메시지를 특정 주제(Topic)나 채널로 발행하고, 해당 주제를 구독하는 모든 구독자들이 그 메시지를 받게 된다.</description>
    </item>
    <item>
      <title>Retry Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/retry-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 11:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/retry-pattern/</guid>
      <description>&lt;h2 id=&#34;retry-pattern&#34;&gt;Retry Pattern&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Retry Pattern&lt;/strong&gt;은 분산 시스템이나 마이크로서비스 아키텍처에서 일시적인 오류(Transient Failure)를 처리하기 위한 핵심 설계 패턴이다.&lt;br&gt;
네트워크 불안정, 일시적인 서비스 중단 등 &lt;strong&gt;일시적인 실패 상황에서 시스템의 복원력(Resilience)을 강화&lt;/strong&gt;하는 데 목적을 둔다.&lt;/p&gt;
&lt;p&gt;이 패턴은 &lt;strong&gt;분산 시스템의 안정성&lt;/strong&gt;을 높이는 필수 도구이지만, 남용할 경우 역효과를 낼 수 있으므로 &lt;strong&gt;신중한 정책 수립&lt;/strong&gt;이 필요하다.&lt;/p&gt;
&lt;h3 id=&#34;retry-pattern의-핵심-개념&#34;&gt;&lt;strong&gt;Retry Pattern의 핵심 개념&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;작동 원리&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;실패한 작업 자동 재시도&lt;/strong&gt;: API 호출, 데이터베이스 접근 등 실패 가능성이 있는 작업을 &lt;strong&gt;정의된 정책에 따라 재시도&lt;/strong&gt;한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;일시적 오류 감지&lt;/strong&gt;: 네트워크 타임아웃, HTTP 5xx 에러, 데이터베이스 연결 실패 등 &lt;strong&gt;일시적인 오류만 대상&lt;/strong&gt;으로 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;주요 구성 요소&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Model-View-ViewModel Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/model-view-viewmodel-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 11:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/model-view-viewmodel-pattern/</guid>
      <description>MVVM(Model-View-ViewModel) 패턴은 소프트웨어 아키텍처 패턴 중 하나로, 사용자 인터페이스(UI)와 비즈니스 로직을 효과적으로 분리하여 코드의 유지보수성과 재사용성을 향상시키는 데 중점을 둔다.</description>
    </item>
    <item>
      <title>Monolithic Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/monolithic-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 11:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/monolithic-pattern/</guid>
      <description>애플리케이션의 모든 구성 요소가 단일 코드베이스와 단일 실행 단위로 통합된 형태</description>
    </item>
    <item>
      <title>Service-oriented architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/service-oriented-architecture/</link>
      <pubDate>Fri, 27 Sep 2024 09:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/service-oriented-architecture/</guid>
      <description>&lt;h2 id=&#34;service-oriented-architecture&#34;&gt;Service-oriented Architecture&lt;/h2&gt;
&lt;p&gt;**Service-Oriented Architecture(SOA)**는 기업의 복잡한 IT 시스템을 &lt;strong&gt;비즈니스 기능 단위의 서비스&lt;/strong&gt;로 모듈화하고, 이를 조합해 유연한 애플리케이션을 구축하는 소프트웨어 설계 패턴이다.&lt;br&gt;
대규모 분산 시스템에서 &lt;strong&gt;재사용성&lt;/strong&gt;과 &lt;strong&gt;상호 운용성&lt;/strong&gt;을 극대화하는 데 목적을 둔다.&lt;/p&gt;
&lt;p&gt;SOA는 &lt;strong&gt;기업 IT 시스템의 유연성&lt;/strong&gt;을 높이는 전략적 도구이지만, 초기 설계 단계에서 명확한 서비스 경계 정의와 ESB 관리 계획 수립이 필수적이다.&lt;br&gt;
특히 금융, 의료 등 복잡한 업무 프로세스가 존재하는 분야에서 효과적이며, 최근에는 MSA로 진화하면서 클라우드 환경에 적합한 형태로 재편되고 있다. 성공적인 SOA 구축을 위해서는 조직 차원의 아키텍처 거버넌스와 지속적인 모니터링 체계 구축이 동반되어야 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Model–view–presenter Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/modelviewpresenter-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 09:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/modelviewpresenter-pattern/</guid>
      <description>Model-View-Presenter(MVP) 패턴은 사용자 인터페이스 개발을 위한 아키텍처 패턴으로, **관심사 분리** 원칙에 기반해 UI 로직과 비즈니스 로직을 분리한다.</description>
    </item>
    <item>
      <title>Message Queues and Streams</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/message-queues-and-streams/</link>
      <pubDate>Fri, 27 Sep 2024 09:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/message-queues-and-streams/</guid>
      <description>&lt;h2 id=&#34;message-queues-and-streams&#34;&gt;Message Queues and Streams&lt;/h2&gt;
&lt;p&gt;소프트웨어 아키텍처 패턴 중 &amp;ldquo;Message Queues and Streams&amp;quot;는 분산 시스템에서 중요한 역할을 하는 통신 메커니즘이다. 이 두 가지 패턴은 비슷해 보이지만 각각 고유한 특성과 용도를 가지고 있다.&lt;/p&gt;
&lt;p&gt;Message Queues와 Streams는 각각 고유한 장단점을 가지고 있다. 메시지 큐는 작업의 안정적인 처리와 시스템 간 결합도 감소에 적합하며, 스트림은 실시간 데이터 처리와 분석에 더 적합하다.&lt;br&gt;
프로젝트의 요구사항과 특성에 따라 적절한 패턴을 선택하거나 두 패턴을 조합하여 사용할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;message-queues-메시지-큐&#34;&gt;Message Queues (메시지 큐)&lt;/h3&gt;
&lt;p&gt;메시지 큐는 애플리케이션 간 비동기 통신을 위한 중간 계층 역할을 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Microkernel Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/microkernel-architecture/</link>
      <pubDate>Fri, 27 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/microkernel-architecture/</guid>
      <description>시스템의 핵심 기능을 최소화하고 확장성과 유연성을 극대화하는 설계 방식</description>
    </item>
    <item>
      <title>Repository Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/repository-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/repository-pattern/</guid>
      <description>데이터 접근 로직을 추상화하고 캡슐화하여 비즈니스 로직과 데이터 저장소 간의 의존성을 줄이는 소프트웨어 아키텍처 패턴</description>
    </item>
    <item>
      <title>Space-Based Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/space-based-architecture/</link>
      <pubDate>Fri, 27 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/space-based-architecture/</guid>
      <description>분산 컴퓨팅 시스템을 위한 소프트웨어 아키텍처 패턴으로, 복잡성을 증가시키지 않으면서 애플리케이션과 시스템의 확장성을 높이는 것을 목표로 한다.</description>
    </item>
    <item>
      <title>Master-Slave Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/master-slave-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/master-slave-pattern/</guid>
      <description>하나의 마스터 컴포넌트와 여러 슬레이브 컴포넌트로 구성되어 있으며, 작업을 효율적으로 분배하고 관리하는 데 사용된다</description>
    </item>
    <item>
      <title>Model-View-Controller Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/model-view-controller-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/model-view-controller-pattern/</guid>
      <description>애플리케이션을 세 가지 주요 구성 요소로 분리하여 개발의 유연성과 유지보수성을 향상시킨다.</description>
    </item>
    <item>
      <title>Peer-to-Peer Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/peer-to-peer-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/peer-to-peer-pattern/</guid>
      <description>분산 네트워크 아키텍처의 한 형태로, 각 노드(피어)가 클라이언트와 서버의 역할을 동시에 수행하는 구조</description>
    </item>
    <item>
      <title>Pipe-Filter Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/pipe-filter-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/pipe-filter-pattern/</guid>
      <description>데이터 스트림을 처리하는 시스템에서 사용되는 소프트웨어 아키텍처 패턴</description>
    </item>
    <item>
      <title>Producer-Consumer Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/producer-consumer-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 01:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/producer-consumer-pattern/</guid>
      <description>이 패턴은 데이터를 생성하는 프로듀서(Producer)와 데이터를 소비하는 컨슈머(Consumer) 사이의 작업을 분리하여 효율적인 데이터 처리를 가능하게 한다.</description>
    </item>
    <item>
      <title>Component-Based Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/component-based-architecture/</link>
      <pubDate>Thu, 26 Sep 2024 11:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/component-based-architecture/</guid>
      <description>&lt;h2 id=&#34;component-based-architecture&#34;&gt;Component-Based Architecture&lt;/h2&gt;
&lt;p&gt;컴포넌트 기반 아키텍처(Component-based Architecture)는 소프트웨어 개발에서 중요한 설계 패턴 중 하나이다.&lt;br&gt;
이 아키텍처는 애플리케이션을 독립적이고 재사용 가능한 단위인 &amp;lsquo;컴포넌트&amp;rsquo;로 구성하는 방식을 말한다.&lt;/p&gt;
&lt;p&gt;컴포넌트 기반 아키텍처는 소프트웨어를 독립적으로 배포 가능한 모듈인 &amp;lsquo;컴포넌트&amp;rsquo;로 구성하는 설계 방식이다.&lt;br&gt;
각 컴포넌트는 특정 기능을 수행하며, 잘 정의된 인터페이스를 통해 다른 컴포넌트와 상호작용한다.&lt;/p&gt;
&lt;p&gt;컴포넌트 기반 아키텍처는 소프트웨어 개발의 복잡성을 관리하고, 재사용성을 높이며, 유지보수를 용이하게 하는 강력한 접근 방식이다. 이는 현대 소프트웨어 개발에서 중요한 역할을 하며, 특히 대규모 애플리케이션 개발에 적합하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Event-Driven Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-driven-architecture/</link>
      <pubDate>Thu, 26 Sep 2024 11:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-driven-architecture/</guid>
      <description>Event-Driven Architecture (EDA)는 현대 소프트웨어 아키텍처 패턴 중 하나로, 시스템 내에서 발생하는 이벤트를 중심으로 동작하는 설계 방식이다.</description>
    </item>
    <item>
      <title>Event Sourcing Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-sourcing-pattern/</link>
      <pubDate>Thu, 26 Sep 2024 11:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-sourcing-pattern/</guid>
      <description>Event Sourcing Pattern은 데이터 처리와 저장에 대한 접근 방식을 정의하는 아키텍처 패턴으로, 시스템의 상태 변화를 일련의 이벤트로 기록하고 저장하는 방식을 채택한다.</description>
    </item>
    <item>
      <title>CQRS 패턴 (Command Query Responsibility Segregation)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/cqrs/</link>
      <pubDate>Thu, 26 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/cqrs/</guid>
      <description>애플리케이션의 명령(Command)과 쿼리(Query)의 책임을 분리하는 소프트웨어 아키텍처 패턴</description>
    </item>
    <item>
      <title>Domain-Driven Design</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/domain-driven-design/</link>
      <pubDate>Thu, 26 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/domain-driven-design/</guid>
      <description>복잡한 소프트웨어 시스템을 개발하기 위한 접근 방식으로, 비즈니스 도메인을 중심으로 소프트웨어를 설계하고 개발하는 방법론</description>
    </item>
    <item>
      <title>Hexagonal Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/hexagonal-architecture/</link>
      <pubDate>Thu, 26 Sep 2024 08:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/hexagonal-architecture/</guid>
      <description>애플리케이션의 핵심 비즈니스 로직을 외부 요소로부터 분리하여 유연하고 유지보수가 용이한 시스템을 구축하는 것을 목표로 한다</description>
    </item>
    <item>
      <title>Blackboard Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/blackboard-pattern/</link>
      <pubDate>Thu, 26 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/blackboard-pattern/</guid>
      <description>Blackboard 패턴은 복잡하고 비결정적인 문제를 해결하기 위한 소프트웨어 아키텍처 패턴으로 여러 전문화된 구성 요소(지식 소스 또는 에이전트)가 협력하여 문제를 해결하는 방식을 제공한다.</description>
    </item>
    <item>
      <title>Broker Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/broker-pattern/</link>
      <pubDate>Thu, 26 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/broker-pattern/</guid>
      <description>분산 시스템에서 컴포넌트들 간의 통신을 조정하고 중개하는 구조적 패턴</description>
    </item>
    <item>
      <title>Event-Bus Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-bus-pattern/</link>
      <pubDate>Thu, 26 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-bus-pattern/</guid>
      <description>소프트웨어 시스템의 컴포넌트 간 통신을 단순화하고 유연성을 높이는 아키텍처 패턴</description>
    </item>
    <item>
      <title>Client-Server Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/client-server-pattern/</link>
      <pubDate>Thu, 26 Sep 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/client-server-pattern/</guid>
      <description>서비스를 제공하는 서버와 서비스를 요청하는 클라이언트로 구성되는 소프트웨어 아키텍처 패턴</description>
    </item>
    <item>
      <title>Layered Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/layered-pattern/</link>
      <pubDate>Thu, 26 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/layered-pattern/</guid>
      <description>애플리케이션의 구성 요소를 수평적 계층으로 조직화하여 각 계층이 특정 기능을 담당하도록 한다.</description>
    </item>
  </channel>
</rss>
