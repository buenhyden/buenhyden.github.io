<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Time-to-Live</title><link>https://buenhyden.github.io/tags/time-to-live/</link><description>Recent content in Time-to-Live on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 06 Oct 2024 07:30:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/time-to-live/index.xml" rel="self" type="application/rss+xml"/><item><title>DNS 캐싱 (DNS Caching)</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/dns/dns-caching/</link><pubDate>Sun, 06 Oct 2024 07:30:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/dns/dns-caching/</guid><description>
&lt;h2>DNS 캐싱 (DNS Caching)&lt;/h2>&lt;p>DNS 캐싱은 이전에 조회한 도메인 이름과 IP 주소의 매핑 정보를 임시로 저장하는 메커니즘이다.&lt;br>
이를 통해 매번 전체 DNS 조회 과정을 거치지 않고도 빠르게 도메인 이름을 IP 주소로 변환할 수 있다.&lt;/p>
&lt;p>DNS 캐싱은 인터넷 성능 최적화에 중요한 역할을 하며, 적절한 관리를 통해 효율적이고 안전한 네트워크 환경을 유지할 수 있다.&lt;/p>
&lt;h3>작동 방식&lt;/h3>&lt;ul>
&lt;li>DNS 서버나 클라이언트 장치가 도메인 이름에 대한 IP 주소를 조회하면, 그 결과를 캐시에 저장한다.&lt;/li>
&lt;li>이후 동일한 도메인에 대한 요청이 있을 때, 캐시된 정보를 사용하여 빠르게 응답한다.&lt;/li>
&lt;/ul>
&lt;h3>캐시 위치&lt;/h3>&lt;p>DNS 캐싱 (DNS Caching)은 브라우저, 운영체제, 라우터, ISP 의 DNS 서버 등 다양한 단계에서 발생한다.&lt;/p>
&lt;ul>
&lt;li>브라우저 캐시: 웹 브라우저가 DNS 조회 결과를 저장한다.&lt;/li>
&lt;li>운영 체제 캐시: OS 수준에서 DNS 정보를 캐싱한다.&lt;/li>
&lt;li>로컬 DNS 서버 캐시: ISP나 조직의 DNS 서버에서 캐싱한다.&lt;/li>
&lt;/ul>
&lt;h3>TTL(Time To Live)&lt;/h3>&lt;p>TTL 은 DNS 레코드가 캐시에 얼마나 오래 저장될지를 결정하는 시간 값으로, 초단위로 설정된다.&lt;br>
TTL 이 만료되면, 새로운 쿼리를 통해 최신 정보를 가져온다.&lt;/p>
&lt;ul>
&lt;li>역할
&lt;ul>
&lt;li>캐시 수명 제어
&lt;ul>
&lt;li>DNS 레코드의 캐시 유효기간 설정.&lt;/li>
&lt;li>오래된 정보의 사용 방지.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DNS 업데이트 전파 속도 조절
&lt;ul>
&lt;li>짧은 TTL: 빠른 변경 전파, 높은 DNS 트래픽.
&lt;ul>
&lt;li>네트워크 변경이나 빈번한 업데이트가 필요한 경우 유리함.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>긴 TTL: 느린 변경 전파, 낮은 DNS 트래픽.
&lt;ul>
&lt;li>변화가 적고 안정적인 웹사이트에 적합함.&lt;/li>
&lt;li>보안 및 가용성을 높이고, 서버 부하를 줄이는 데 유리함.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>부하 분산
&lt;ul>
&lt;li>로드 밸런싱 구성에서 TTL 조정으로 트래픽 분산 제어&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가용성 관리
&lt;ul>
&lt;li>서버 유지보수시 TTL 조정으로 영향 최소화.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보안
&lt;ul>
&lt;li>DNS 스푸핑이나 캐시 포이즈닝 공격의 영향 기간 제한.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>TTL 설정시 고려사항:&lt;/p>
&lt;ul>
&lt;li>도메인의 변경 빈도&lt;/li>
&lt;li>원하는 DNS 업데이트 전파 속도&lt;/li>
&lt;li>DNS 서버와 네트워크 부하&lt;/li>
&lt;li>보안 요구사항&lt;/li>
&lt;li>서비스의 중요도와 가용성 요구사항&lt;/li>
&lt;/ul>
&lt;h3>장점&lt;/h3>&lt;ul>
&lt;li>빠른 웹사이트 로딩 시간&lt;/li>
&lt;li>네트워크 대역폭 절약&lt;/li>
&lt;li>DNS 서버의 부하 감소&lt;/li>
&lt;/ul>
&lt;h3>주의사항&lt;/h3>&lt;ul>
&lt;li>오래된 캐시 정보로 인한 연결 문제 가능성&lt;/li>
&lt;li>DNS 캐시 포이즈닝 등의 보안 위협&lt;/li>
&lt;/ul>
&lt;h3>캐시 관리&lt;/h3>&lt;ul>
&lt;li>주기적인 캐시 플러싱(flushing)을 통해 오래된 정보 제거&lt;/li>
&lt;li>보안 업데이트 및 네트워크 변경 시 캐시 갱신 필요&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>DNS(Domain Name System)</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/dns/</link><pubDate>Sun, 06 Oct 2024 02:03:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/dns/</guid><description>
&lt;h2>DNS(Domain Name System)&lt;/h2>&lt;p>인터넷에서 도메인 이름을 IP 주소로 변환하는 분산형 데이터베이스 시스템이다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Networking%20and%20Communications/Protocol/DNS/ddos-dns.svg"
alt="IP 주소란 무엇이고 IP 주소는 왜 중요할까요?"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.cloudflare.com/ko-kr/learning/dns/glossary/what-is-my-ip-address/" target="_blank" rel="noopener">https://www.cloudflare.com/ko-kr/learning/dns/glossary/what-is-my-ip-address/&lt;/a> _&lt;/p>
&lt;p>&lt;strong>인터넷 전화전화부&lt;/strong>로 비유되며 특정 컴퓨터 (또는 네트워크로 연결된 임의의 장치) 의 주소를 찾기 위해, 사람이 이해하기 쉬운 호스트 이름 (예: &amp;lt;www.example.com&amp;gt;) 을 실제 네트워크 상에서 사용하는 IP 주소 (예: 192.168.1.1) 로 변환하고 해당 IP 주소로 접속하는 일련의 시스템을 DNS(Domain Name System) 이라고 한다.&lt;/p>
&lt;p>DNS 는 전세계적으로 약속된 규칙을 공유한다.&lt;br>
웹 브라우저는 DNS 확인이 &lt;strong>막후에서&lt;/strong> 발생하며 최초의 사용자 요청 외에 사용자 컴퓨터와의 추가적인 대화는 필요하지 않다.&lt;/p>
&lt;h3>역할과 기능&lt;/h3>&lt;ul>
&lt;li>도메인 이름을 IP 주소로 변환 (정방향 조회)&lt;/li>
&lt;li>IP 주소를 도메인 이름으로 변환 (역방향 조회)&lt;/li>
&lt;li>이메일 라우팅을 위한 메일 서버 정보 제공&lt;/li>
&lt;li>도메인에 대한 서비스 정보 제공&lt;/li>
&lt;/ul>
&lt;h3>특징&lt;/h3>&lt;ul>
&lt;li>계층적 구조로 분산 관리&lt;/li>
&lt;li>캐싱을 통한 빠른 응답 제공&lt;/li>
&lt;li>전 세계적으로 표준화된 시스템&lt;/li>
&lt;/ul>
&lt;h3>DNS 조회는 어떻게 작동하는가?&lt;/h3>&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Networking%20and%20Communications/Protocol/DNS/3607857746_b4372ba3ba_o.png"
alt="Verisign Domain Name Industry Brief, June 2007 (PDF)"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="http://www.verisign.com/static/DNIB_09_0529web.pdf" target="_blank" rel="noopener">http://www.verisign.com/static/DNIB_09_0529web.pdf&lt;/a> _&lt;/p>
&lt;ol>
&lt;li>&lt;strong>사용자 요청&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>사용자가 브라우저에 도메인 이름 (예: www.example.com/) 입력한다.&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>&lt;strong>로컬 DNS 캐시 확인&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>브라우저는 먼저 로컬 캐시를 확인하여 이미 저장된 IP 주소가 있는지 확인한다.&lt;/li>
&lt;li>특정 DNS 서버가 관여하지 않는다.&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>&lt;strong>재귀적 DNS 리졸버&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>로컬 캐시에 IP 주소가 없으면, 요청은 재귀적 DNS 리졸버로 전달된다.&lt;/li>
&lt;li>일반적으로 ISP 에서 제공하며, DNS 조회 과정을 대신 수행한다&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>&lt;strong>루트 네임서버 쿼리&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>리졸버는 먼저 루트 네임서버에 쿼리를 보낸다.&lt;/li>
&lt;li>루트 서버는 최상위 도메인 (TLD) 서버의 위치를 알려준다.&lt;/li>
&lt;/ul>
&lt;ol start="5">
&lt;li>&lt;strong>TLD 네임서버 쿼리&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>리졸버는 TLD 서버 (.com,.org 등) 에 쿼리를 보내 해당 도메인의 권한 있는 네임서버의 위치를 확인한다.&lt;/li>
&lt;/ul>
&lt;ol start="6">
&lt;li>&lt;strong>권한 있는 네임서버 쿼리&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>마지막으로, 리졸버는 권한 있는 네임서버에 쿼리를 보내 최종적으로 도메인에 대한 정확한 IP 주소를 얻는다.&lt;/li>
&lt;li>이는 도메인 등록 기관이나 호스팅 제공업체의 DNS 서버이다.&lt;/li>
&lt;/ul>
&lt;ol start="7">
&lt;li>&lt;strong>응답 및 캐싱&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>리졸버는 얻은 IP 주소를 사용자의 브라우저에 반환하고, 향후 요청을 위해 이 정보를 캐시에 저장한다.&lt;/li>
&lt;/ul>
&lt;h3>DNS 서버 유형&lt;/h3>&lt;ul>
&lt;li>웹페이지 로드와 관련된 DNS 서버&lt;/li>
&lt;/ul>
&lt;h4>DNS Recursive Resolver(DNS 재귀적 리졸버)&lt;/h4>&lt;ul>
&lt;li>별칭: DNS 리커서, 캐싱 네임 서버&lt;/li>
&lt;li>역할: 클라이언트의 DNS 쿼리를 받아 처리하는 첫 번째 중간자.&lt;/li>
&lt;li>기능:
&lt;ul>
&lt;li>클라이언트의 요청을 받아 다른 DNS 서버에 추가 쿼리를 보내 응답을 얻음.&lt;/li>
&lt;li>얻은 정보를 캐시하여 향후 쿼리 처리 속도를 높임.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>관리 주체: 인터넷 서비스 공급자 (ISP), 대기업, 또는 타사 DNS 서비스 공급자가 운영한다.&lt;/li>
&lt;/ul>
&lt;h4>DNS Root Nameserver(루트 이름 서버)&lt;/h4>&lt;ul>
&lt;li>역할: DNS 계층 구조의 최상위에 위치하며, 전 세계적으로 13 개의 DNS Root Nameserver(루트 이름 서버) 가 있으나 수백 개의 미러 서버가 운영되고 있다.&lt;/li>
&lt;li>기능:
&lt;ul>
&lt;li>TLD 네임서버의 IP 주소 정보를 제공한다.&lt;/li>
&lt;li>DNS 리졸버의 쿼리 해결 과정의 시작점.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4>DNS TLD Nameserver (TLD 이름 서버)&lt;/h4>&lt;ul>
&lt;li>역할: 특정 TLD (.com,.org,.net 등) 에 대한 정보를 관리&lt;/li>
&lt;li>기능:
&lt;ul>
&lt;li>해당 TLD 내의 권한있는 네임 서버 정보를 제공.&lt;/li>
&lt;li>예:.com TLD 서버는 example.com 의 권한 있는 네임서버 정보를 제공&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>관리: ICANN 이 관리하며, 각 TLD 별로 다른 조직에 위임.&lt;/li>
&lt;/ul>
&lt;h4>Authoritative Nameserver (권한 있는 이름 서버)&lt;/h4>&lt;ul>
&lt;li>역할: 특정 도메인에 대한 최종적이고 공식적인 DNS 정보를 제공.&lt;/li>
&lt;li>유형:
&lt;ul>
&lt;li>Primary (마스터) 서버: 도메인의 원본 레코드를 유지 관리&lt;/li>
&lt;li>Secondary (슬레이브) 서버: Primary 서버의 데이터를 복제하여 로드 분산과 중복성 제공&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>기능:
&lt;ul>
&lt;li>도메인의 A, AAAA, MX, CNAME 등 모든 DNS 레코드 정보를 저장 및 제공&lt;/li>
&lt;li>도메인 소유자가 직접 관리하거나 DNS 호스팅 서비스를 통해 관리됨&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4>Local DNS 캐시&lt;/h4>&lt;ul>
&lt;li>사용자의 개별 컴퓨터나 디바이스에 임시로 저장되는 DNS 조회 결과 모음.&lt;/li>
&lt;li>목적:
&lt;ul>
&lt;li>DNS 쿼리의 응답 시간을 단축시켜 웹 브라우징의 속도를 향상시킨다.&lt;/li>
&lt;li>네트워크 트래픽을 줄여 대역폭을 절약한다.&lt;/li>
&lt;li>DNS 서버의 부하를 감소시킨다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>작동 방식:
&lt;ul>
&lt;li>사용자가 웹 사이트에 처음 접속할 때, OS 는 DNS 조회 결과를 로컬 캐시에 저장한다.&lt;/li>
&lt;li>이후 같은 도메인에 접속할 때, OS 는 로컬 캐시를 확인한다.&lt;/li>
&lt;li>캐시에 정보가 있으면 즉시 사용하고, 없으면 일반적인 DNS 조회 과정을 시작한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>저장 위치:
&lt;ul>
&lt;li>Windows: DNS Client 서비스에 의해 관리된다.&lt;/li>
&lt;li>macOS / Linux: nscd (Name Service Cache Daemon) 또는 시스템 수준의 캐시 메커니즘에 의해 관리된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>TTL (Time To Live):
&lt;ul>
&lt;li>각 DNS 레코드는 TTL 값을 가지며, 이는 캐시에 해당 정보를 얼마나 오래 보관할지 결정한다.&lt;/li>
&lt;li>TTL 이 만료되면 해당 정보는 캐시에서 제거되고, 다음 요청시 새로운 DNS 조회가 수행된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>장점:
&lt;ul>
&lt;li>빠른 웹 페이지 로딩&lt;/li>
&lt;li>네트워크 효율성&lt;/li>
&lt;li>오프라인 상태에서도 이전에 방문한 사이트의 IP 주소 제공 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>단점:
&lt;ul>
&lt;li>오래된 정보를 제공할 수 있다. (특히 TTL 이 긴 경우)&lt;/li>
&lt;li>DNS 변경사항이 즉시 반영되지 않을 수 있음.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>주의 사항:
&lt;ul>
&lt;li>DNS 캐시 중독: 악의적인 공격자가 캐시를 조작하여 사용자를 가짜 웹사이트로 유도할 수 있다.&lt;/li>
&lt;li>오래된 정보: 웹사이트의 IP 주소가 변경되었을 때 캐시된 정보가 최신 상태가 아닐 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3>DNS 보안 위협 및 보호 기술&lt;/h3>&lt;h4>DNS 보안 위협&lt;/h4>&lt;h5>DNS 스푸핑 (DNS Spoofing)&lt;/h5>&lt;ul>
&lt;li>정의: 공격자가 DNS 응답을 가로채고 조작하여 사용자를 의도하지 않은 사이트로 유도하는 공격.&lt;/li>
&lt;li>특징:
&lt;ul>
&lt;li>중간자 공격의 일종.&lt;/li>
&lt;li>사용자가 정상적인 웹사이트에 접속하고 있다고 믿게 만듦.&lt;/li>
&lt;li>피싱이나 악성코드 배포에 주로 사용됨.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5>DNS 캐시 포이즈닝 (DNS Cache Poisoning)&lt;/h5>&lt;ul>
&lt;li>정의: DNS 리졸버의 캐시에 거짓 정보를 삽입하는 공격.&lt;/li>
&lt;li>특징:
&lt;ul>
&lt;li>DNS 리졸버가 잘못된 IP 주소를 캐시에 저장하게 됨.&lt;/li>
&lt;li>공격 효과가 캐시 TTL 동안 지속됨.&lt;/li>
&lt;li>다수의 사용자에게 영향을 미칠 수 있음.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5>DNS 하이재킹 (DNS Hijacking)&lt;/h5>&lt;ul>
&lt;li>정의: DNS 설정을 변경하여 트래픽을 공격자가 제어하는 서버로 리디렉션 (Redirection) 하는 공격.&lt;/li>
&lt;li>특징:
&lt;ul>
&lt;li>DNS 서버 자체를 대상으로 하는 경우가 많음.&lt;/li>
&lt;li>사용자 디바이스의 DNS 설정을 변경하기도 함.&lt;/li>
&lt;li>광범위한 영향을 미칠 수 있음.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5>DNS 증폭 공격 (DNS Amplification Attack)&lt;/h5>&lt;ul>
&lt;li>정의: DNS 서버를 이용해 대량의 트래픽을 생성하여 대상 시스템을 마비시키는 DDos 공격.&lt;/li>
&lt;li>특징:
&lt;ul>
&lt;li>작은 쿼리로 큰 응답을 유발하여 트래픽을 증폭시킴.&lt;/li>
&lt;li>공개 DNS 리졸버를 악용함.&lt;/li>
&lt;li>네트워크 대역폭을 소진시켜 서비스 중단을 유발.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5>DNS 터널링 (DNS Tunneling)&lt;/h5>&lt;ul>
&lt;li>정의: DNS 프로토콜을 악용하여 다른 프로토콜의 데이터를 DNS 쿼리와 응답에 숨겨 전송하는 기술&lt;/li>
&lt;li>특징:
&lt;ul>
&lt;li>방화벽 우회, 데이터 유출 등에 사용될 수 있음.&lt;/li>
&lt;li>정상적인 DNS 트래픽으로 위장하여 탐지가 어려움.&lt;/li>
&lt;li>네트워크 성능 저하를 유발할 수 있음.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4>DNS 보호 기술&lt;/h4>&lt;h5>DNSSEC (Domain Name System Security Extensions)&lt;/h5>&lt;ul>
&lt;li>정의: DNS 응답의 무결성과 출처를 암호화 방식으로 검증하는 보장 확장 기술.&lt;/li>
&lt;li>특징:
&lt;ul>
&lt;li>디지털 서명을 사용하여 DNS 데이터의 신뢰성 보장.&lt;/li>
&lt;li>DNS 스푸핑과 DNS 캐시 포이즈닝 공격 방지.&lt;/li>
&lt;li>점진적으로 도입 가능하나, 전체 DNS 체인의 참여가 필요함.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5>DNS over HTTPS (DoH)&lt;/h5>&lt;ul>
&lt;li>정의: DNS 쿼리를 HTTPS 프로토콜을 통해 암호화하여 전송하는 기술&lt;/li>
&lt;li>특징:
&lt;ul>
&lt;li>DNS 쿼리의 프라이버시 보호.&lt;/li>
&lt;li>중간자 공격 방지.&lt;/li>
&lt;li>기존 방화벽 정책과 충돌할 수 있음.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5>DNS over TLS (DoT)&lt;/h5>&lt;ul>
&lt;li>정의: DNS 쿼리를 TLS 프로토콜을 통해 암호화하여 전송하는 기술.&lt;/li>
&lt;li>특징:
&lt;ul>
&lt;li>DNS 쿼리의 기밀성 보장.&lt;/li>
&lt;li>전용 포트 (853) 를 사용하여 트래픽 식별이 용이.&lt;/li>
&lt;li>DoH 에 비해 네트워크 관리가 쉬움.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5>DANE (DNS-based Authentication of Named Entities)&lt;/h5>&lt;ul>
&lt;li>정의: DNS 를 사용하여 TLS 인증서의 유효성을 검증하는 기술&lt;/li>
&lt;li>특징:
&lt;ul>
&lt;li>DNSSEC 과 연계하여 사용.&lt;/li>
&lt;li>인증기관 (CA) 의존도 감소.&lt;/li>
&lt;li>자체 서명 인증서의 안전한 사용 가능.&lt;br>
RPZ (Response POLICY Zones)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>정의: DNS 서버 레벨에서 악성 도메인에 대한 접근을 차단하는 기술.&lt;/li>
&lt;li>특징:
&lt;ul>
&lt;li>중앙 집중식 보안 정책 적용 가능.&lt;/li>
&lt;li>실시간 업데이트 지원.&lt;/li>
&lt;li>유연한 정책 설정 가능 (차단, 리다이렉션 등)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2>&lt;h3>DNS&lt;/h3>&lt;p>&lt;a href="https://ko.wikipedia.org/wiki/%EB%8F%84%EB%A9%94%EC%9D%B8_%EB%84%A4%EC%9E%84_%EC%8B%9C%EC%8A%A4%ED%85%9C" target="_blank" rel="noopener">도메인 네임 시스템&lt;/a>&lt;br>
&lt;a href="https://hanamon.kr/dns%EB%9E%80-%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%84%A4%EC%9E%84-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B0%9C%EB%85%90%EB%B6%80%ED%84%B0-%EC%9E%91%EB%8F%99-%EB%B0%A9%EC%8B%9D%EA%B9%8C%EC%A7%80/" target="_blank" rel="noopener">DNS란? (도메인 네임 시스템 개념부터 작동 방식까지)&lt;/a>&lt;br>
&lt;a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;amp;blogId=gaegurijump&amp;amp;logNo=110186376474" target="_blank" rel="noopener">DNS(Domain Name System)란?&lt;/a>&lt;br>
&lt;a href="https://gentlysallim.com/dns%EB%9E%80-%EB%AD%90%EA%B3%A0-%EB%84%A4%EC%9E%84%EC%84%9C%EB%B2%84%EB%9E%80-%EB%AD%94%EC%A7%80-%EA%B0%9C%EB%85%90%EC%A0%95%EB%A6%AC/" target="_blank" rel="noopener">DNS란 뭐고, 네임서버란 뭔지 개념정리&lt;/a>&lt;br>
&lt;a href="https://ko.wikipedia.org/wiki/%EB%A3%A8%ED%8A%B8_%EB%84%A4%EC%9E%84_%EC%84%9C%EB%B2%84" target="_blank" rel="noopener">루트 네임 서버&lt;/a>&lt;br>
&lt;a href="https://devocean.sk.com/search/techBoardDetail.do?ID=164603&amp;amp;boardType=" target="_blank" rel="noopener">개발자가 알아야할 DNS 동작&lt;/a>&lt;br>
&lt;a href="https://www.ibm.com/kr-ko/topics/dns" target="_blank" rel="noopener">도메인 이름 시스템(DNS)이란 무엇인가요?&lt;/a>&lt;/p>
&lt;h3>DNS 레코드&lt;/h3>&lt;p>&lt;a href="https://inpa.tistory.com/entry/WEB-%F0%9F%8C%90-DNS-%EB%A0%88%EC%BD%94%EB%93%9C-%EC%A2%85%EB%A5%98-%E2%98%85-%EC%95%8C%EA%B8%B0-%EC%89%BD%EA%B2%8C-%EC%A0%95%EB%A6%AC" target="_blank" rel="noopener">DNS 레코드 종류 ★ 완벽 정리&lt;/a>&lt;/p>
&lt;h3>TLD&lt;/h3>&lt;p>&lt;a href="https://developer.mozilla.org/ko/docs/Glossary/TLD" target="_blank" rel="noopener">최상위 도메인 (top-level domain, TLD)&lt;/a>&lt;br>
&lt;a href="https://www.cloudflare.com/ko-kr/learning/dns/top-level-domain/" target="_blank" rel="noopener">최상위 도메인이란?&lt;/a>&lt;/p></description></item></channel></rss>