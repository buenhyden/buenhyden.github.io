<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Software-Architecture on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/software-architecture/</link>
    <description>Recent content in Software-Architecture on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.141.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 04 Jan 2025 04:02:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/software-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MSA 패턴 유형별 비교</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/msa-%ED%8C%A8%ED%84%B4-%EC%9C%A0%ED%98%95%EB%B3%84-%EB%B9%84%EA%B5%90/</link>
      <pubDate>Sat, 04 Jan 2025 02:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/msa-%ED%8C%A8%ED%84%B4-%EC%9C%A0%ED%98%95%EB%B3%84-%EB%B9%84%EA%B5%90/</guid>
      <description>MSA의 주요 패턴 유형들을 체계적으로 정리한 것.</description>
    </item>
    <item>
      <title>Distributed State Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/distributed-state-pattern/</link>
      <pubDate>Sat, 04 Jan 2025 04:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/distributed-state-pattern/</guid>
      <description>&lt;h2 id=&#34;distributed-state-pattern&#34;&gt;Distributed State Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Session State Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/session-state-pattern/</link>
      <pubDate>Sat, 04 Jan 2025 04:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/session-state-pattern/</guid>
      <description>&lt;h2 id=&#34;session-state-pattern&#34;&gt;Session State Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Stateless Service Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/stateless-service-pattern/</link>
      <pubDate>Sat, 04 Jan 2025 04:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/stateless-service-pattern/</guid>
      <description>&lt;h2 id=&#34;stateless-service-pattern&#34;&gt;Stateless Service Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Content Negotiation Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/content-negotiation-pattern/</link>
      <pubDate>Sat, 04 Jan 2025 04:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/content-negotiation-pattern/</guid>
      <description>&lt;h2 id=&#34;content-negotiation-pattern&#34;&gt;Content Negotiation Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Media Type Versioning Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/media-type-versioning-pattern/</link>
      <pubDate>Sat, 04 Jan 2025 04:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/media-type-versioning-pattern/</guid>
      <description>&lt;h2 id=&#34;media-type-versioning-pattern&#34;&gt;Media Type Versioning Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>URI Versioning Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/uri-versioning-pattern/</link>
      <pubDate>Sat, 04 Jan 2025 04:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/uri-versioning-pattern/</guid>
      <description>&lt;h2 id=&#34;uri-versioning-pattern&#34;&gt;URI Versioning Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Consumer-Driven Contract Testing Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/consumer-driven-contract-testing-pattern/</link>
      <pubDate>Sat, 04 Jan 2025 03:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/consumer-driven-contract-testing-pattern/</guid>
      <description>&lt;h2 id=&#34;consumer-driven-contract-testing-pattern&#34;&gt;Consumer-Driven Contract Testing Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>End-to-End Testing Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/end-to-end-testing-pattern/</link>
      <pubDate>Sat, 04 Jan 2025 03:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/end-to-end-testing-pattern/</guid>
      <description>&lt;h2 id=&#34;end-to-end-testing-pattern&#34;&gt;End-to-End Testing Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Service Component Test Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/service-component-test-pattern/</link>
      <pubDate>Sat, 04 Jan 2025 03:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/service-component-test-pattern/</guid>
      <description>&lt;h2 id=&#34;service-component-test-pattern&#34;&gt;Service Component Test Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Service Registry Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/service-registry-pattern/</link>
      <pubDate>Fri, 03 Jan 2025 04:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/service-registry-pattern/</guid>
      <description>&lt;h2 id=&#34;service-registry-pattern&#34;&gt;Service Registry Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Third-Party Registration Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/third-party-registration-pattern/</link>
      <pubDate>Fri, 03 Jan 2025 04:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/third-party-registration-pattern/</guid>
      <description>&lt;h2 id=&#34;third-party-registration-pattern&#34;&gt;Third-Party Registration Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Self-Registration Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/self-registration-pattern/</link>
      <pubDate>Fri, 03 Jan 2025 04:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/self-registration-pattern/</guid>
      <description>&lt;h2 id=&#34;self-registration-pattern&#34;&gt;Self-Registration Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Elastic Scale Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/elastic-scale-pattern/</link>
      <pubDate>Fri, 03 Jan 2025 04:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/elastic-scale-pattern/</guid>
      <description>&lt;h2 id=&#34;elastic-scale-pattern&#34;&gt;Elastic Scale Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Horizontal Scaling Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/horizontal-scaling-pattern/</link>
      <pubDate>Fri, 03 Jan 2025 04:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/horizontal-scaling-pattern/</guid>
      <description>&lt;h2 id=&#34;horizontal-scaling-pattern&#34;&gt;Horizontal Scaling Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Scale Cube Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/scale-cube-pattern/</link>
      <pubDate>Fri, 03 Jan 2025 04:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/scale-cube-pattern/</guid>
      <description>&lt;h2 id=&#34;scale-cube-pattern&#34;&gt;Scale Cube Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Data Lake Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-lake-pattern/</link>
      <pubDate>Thu, 02 Jan 2025 03:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-lake-pattern/</guid>
      <description>&lt;h2 id=&#34;data-lake-pattern&#34;&gt;Data Lake Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Data Mesh Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-mesh-pattern/</link>
      <pubDate>Thu, 02 Jan 2025 03:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-mesh-pattern/</guid>
      <description>&lt;h2 id=&#34;data-mesh-pattern&#34;&gt;Data Mesh Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Data Pipeline Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-pipeline-pattern/</link>
      <pubDate>Thu, 02 Jan 2025 03:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-pipeline-pattern/</guid>
      <description>&lt;h2 id=&#34;data-pipeline-pattern&#34;&gt;Data Pipeline Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>API Security Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/api-security-pattern/</link>
      <pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/api-security-pattern/</guid>
      <description>&lt;h2 id=&#34;api-security-pattern&#34;&gt;API Security Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>OAuth and OpenID Connect Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/oauth-and-openid-connect-pattern/</link>
      <pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/oauth-and-openid-connect-pattern/</guid>
      <description>&lt;h2 id=&#34;oauth-openid-connect-pattern&#34;&gt;OAuth/ OpenID Connect Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Service-to-Service Authentication</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/service-to-service-authentication/</link>
      <pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/service-to-service-authentication/</guid>
      <description>&lt;h2 id=&#34;service-to-service-authentication&#34;&gt;Service-to-Service Authentication&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Vault Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/vault-pattern/</link>
      <pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/vault-pattern/</guid>
      <description>&lt;h2 id=&#34;vault-pattern&#34;&gt;Vault Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Zero Trust Security Model</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/zero-trust-security-model/</link>
      <pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/zero-trust-security-model/</guid>
      <description>&lt;h2 id=&#34;zero-trust-security-model&#34;&gt;Zero Trust Security Model&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Circuit Breaker Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/circuit-breaker-pattern/</link>
      <pubDate>Wed, 01 Jan 2025 10:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/circuit-breaker-pattern/</guid>
      <description>&lt;h2 id=&#34;circuit-breaker-pattern&#34;&gt;Circuit Breaker Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Lazy Loading Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/lazy-loading-pattern/</link>
      <pubDate>Wed, 01 Jan 2025 04:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/lazy-loading-pattern/</guid>
      <description>&lt;h2 id=&#34;lazy-loading-pattern&#34;&gt;Lazy Loading Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Caching Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/caching-pattern/</link>
      <pubDate>Wed, 01 Jan 2025 04:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/caching-pattern/</guid>
      <description>&lt;h2 id=&#34;caching-pattern&#34;&gt;Caching Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Throttling Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/throttling-pattern/</link>
      <pubDate>Wed, 01 Jan 2025 04:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/throttling-pattern/</guid>
      <description>&lt;h2 id=&#34;throttling-pattern&#34;&gt;Throttling Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Bulkhead Isolation Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/bulkhead-isolation-pattern/</link>
      <pubDate>Wed, 01 Jan 2025 02:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/bulkhead-isolation-pattern/</guid>
      <description>&lt;h2 id=&#34;bulkhead-isolation-pattern&#34;&gt;Bulkhead Isolation Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Fallback Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/fallback-pattern/</link>
      <pubDate>Wed, 01 Jan 2025 02:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/fallback-pattern/</guid>
      <description>&lt;h2 id=&#34;fallback-pattern&#34;&gt;Fallback Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Timeout Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/timeout-pattern/</link>
      <pubDate>Wed, 01 Jan 2025 02:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/timeout-pattern/</guid>
      <description>&lt;h2 id=&#34;timeout-pattern&#34;&gt;Timeout Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Retry Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/retry-pattern/</link>
      <pubDate>Wed, 01 Jan 2025 02:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/retry-pattern/</guid>
      <description>&lt;h2 id=&#34;retry-pattern&#34;&gt;Retry Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Configuration-as-Code Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/configuration-as-code-pattern/</link>
      <pubDate>Mon, 30 Dec 2024 04:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/configuration-as-code-pattern/</guid>
      <description>Configuration-as-Code는 시스템의 구성을 버전 관리가 가능한 소스 코드 형태로 정의하고 관리하는 방식이다.</description>
    </item>
    <item>
      <title>Dynamic Configuration Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/dynamic-configuration-pattern/</link>
      <pubDate>Mon, 30 Dec 2024 04:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/dynamic-configuration-pattern/</guid>
      <description>Dynamic Configuration Pattern은 애플리케이션의 동작을 재배포 없이 실시간으로 변경할 수 있게 해주는 패턴</description>
    </item>
    <item>
      <title>외부 구성 저장소 패턴(External Configuration Store Pattern)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/external-configuration-store/</link>
      <pubDate>Mon, 30 Dec 2024 01:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/external-configuration-store/</guid>
      <description>외부 구성 저장소 패턴(External Configuration Store Pattern)은 마이크로서비스 아키텍처(MSA)에서 구성 관리 패턴 중 하나로 애플리케이션의 구성 정보를 외부 저장소로 분리하여 관리하는 방식을 제안한다.</description>
    </item>
    <item>
      <title>Synthetic Monitoring</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/synthetic-monitoring/</link>
      <pubDate>Sun, 29 Dec 2024 02:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/synthetic-monitoring/</guid>
      <description>&lt;h2 id=&#34;synthetic-monitoring&#34;&gt;Synthetic Monitoring&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Audit Logging</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/audit-logging/</link>
      <pubDate>Sun, 29 Dec 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/audit-logging/</guid>
      <description>&lt;h2 id=&#34;audit-logging&#34;&gt;Audit Logging&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Exception Tracking</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/exception-tracking/</link>
      <pubDate>Sun, 29 Dec 2024 02:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/exception-tracking/</guid>
      <description>&lt;h2 id=&#34;exception-tracking&#34;&gt;Exception Tracking&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Distributed Tracing</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/distributed-tracing/</link>
      <pubDate>Sun, 29 Dec 2024 01:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/distributed-tracing/</guid>
      <description>&lt;h2 id=&#34;distributed-tracing&#34;&gt;Distributed Tracing&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Health Check</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/health-check/</link>
      <pubDate>Sun, 29 Dec 2024 01:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/health-check/</guid>
      <description>&lt;h2 id=&#34;health-check&#34;&gt;Health Check&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Log Aggregation</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/log-aggregation/</link>
      <pubDate>Sun, 29 Dec 2024 01:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/log-aggregation/</guid>
      <description>&lt;h2 id=&#34;log-aggregation&#34;&gt;Log Aggregation&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Performance Metrics</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/performance-metrics/</link>
      <pubDate>Sun, 29 Dec 2024 01:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/performance-metrics/</guid>
      <description>&lt;h2 id=&#34;performance-metrics&#34;&gt;Performance Metrics&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Event-Driven Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/event-driven-pattern/</link>
      <pubDate>Sat, 28 Dec 2024 10:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/event-driven-pattern/</guid>
      <description>이 패턴은 시스템의 상태 변화를 이벤트로 표현하고, 이를 기반으로 서비스 간 통신을 구현하는 방식이다.</description>
    </item>
    <item>
      <title>발행/구독 패턴 (Publisher-Subscriber Pattern)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/publisher-subscriber-pattern/</link>
      <pubDate>Sat, 28 Dec 2024 07:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/publisher-subscriber-pattern/</guid>
      <description>발행/구독 패턴은 메시지를 생성하는 발행자(Publisher)와 메시지를 수신하는 구독자(Subscriber) 사이의 비동기 통신 모델이다.</description>
    </item>
    <item>
      <title>Request-Response Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/request-response-pattern/</link>
      <pubDate>Sat, 28 Dec 2024 06:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/request-response-pattern/</guid>
      <description>Request-Response Pattern은 한 서비스(클라이언트)가 다른 서비스(서버)에 요청을 보내고, 서버가 이 요청을 처리한 후 응답을 반환하는 방식의 통신이다.</description>
    </item>
    <item>
      <title>Message-based Communication Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/message-based-communication-pattern/</link>
      <pubDate>Sat, 28 Dec 2024 03:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/message-based-communication-pattern/</guid>
      <description>Message-based Communication Pattern은 마이크로서비스 간 통신을 위해 메시지를 사용하는 방식으로 각 서비스는 메시지를 생성하고 수신하며, 이 메시지들은 메시지 브로커를 통해 전달된다.</description>
    </item>
    <item>
      <title>Synchronous Communication Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/synchronous-communication-pattern/</link>
      <pubDate>Sat, 28 Dec 2024 03:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/synchronous-communication-pattern/</guid>
      <description>Synchronous Communication Pattern은 한 서비스가 다른 서비스에 요청을 보내고 응답을 받을 때까지 기다리는 방식이다.</description>
    </item>
    <item>
      <title>비동기 통신 패턴(Asynchronous Communication Pattern)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/asynchronous-communication-pattern/</link>
      <pubDate>Sat, 28 Dec 2024 03:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/asynchronous-communication-pattern/</guid>
      <description>비동기 통신 패턴은 마이크로서비스 간의 통신에서 요청자가 응답을 기다리지 않고 다음 작업을 수행할 수 있게 하는 패턴이다.</description>
    </item>
    <item>
      <title>Auto-Scaling-Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/auto-scaling-pattern/</link>
      <pubDate>Thu, 26 Dec 2024 02:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/auto-scaling-pattern/</guid>
      <description>&lt;h2 id=&#34;auto-scaling-pattern&#34;&gt;Auto-Scaling-Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Multiple Service Instances per Host</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/multiple-service-instances-per-host/</link>
      <pubDate>Thu, 26 Dec 2024 02:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/multiple-service-instances-per-host/</guid>
      <description>&lt;h2 id=&#34;multiple-service-instances-per-host&#34;&gt;Multiple Service Instances per Host&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Service Instance per Container</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/service-instance-per-container/</link>
      <pubDate>Thu, 26 Dec 2024 02:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/service-instance-per-container/</guid>
      <description>&lt;h2 id=&#34;service-instance-per-container&#34;&gt;Service Instance per Container&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Single Service per Host</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/single-service-per-host/</link>
      <pubDate>Thu, 26 Dec 2024 02:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/single-service-per-host/</guid>
      <description>&lt;h2 id=&#34;single-service-per-host&#34;&gt;Single Service per Host&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Blue-Green Deployment Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/blue-green-deployment-pattern/</link>
      <pubDate>Thu, 26 Dec 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/blue-green-deployment-pattern/</guid>
      <description>&lt;h2 id=&#34;blue-green-deployment-pattern&#34;&gt;Blue-Green Deployment Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Canary Deployment Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/canary-deployment-pattern/</link>
      <pubDate>Thu, 26 Dec 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/canary-deployment-pattern/</guid>
      <description>카나리 배포(Canary Deployment) 패턴은 새로운 버전의 애플리케이션을 점진적으로 배포하는 전략이다.</description>
    </item>
    <item>
      <title>Rolling Update Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/rolling-update-pattern/</link>
      <pubDate>Thu, 26 Dec 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/rolling-update-pattern/</guid>
      <description>&lt;h2 id=&#34;rolling-update-pattern&#34;&gt;Rolling Update Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Decompose by Business Capability</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-business-capability/</link>
      <pubDate>Sun, 22 Dec 2024 01:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-business-capability/</guid>
      <description>&lt;h2 id=&#34;decompose-by-business-capability&#34;&gt;Decompose by Business Capability&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Decompose by Subdomain</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-subdomain/</link>
      <pubDate>Sun, 22 Dec 2024 01:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-subdomain/</guid>
      <description>&lt;h2 id=&#34;decompose-by-subdomain&#34;&gt;Decompose by Subdomain&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Decompose by Transactions</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-transactions/</link>
      <pubDate>Sun, 22 Dec 2024 01:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-transactions/</guid>
      <description>&lt;h2 id=&#34;decompose-by-transactions&#34;&gt;Decompose by Transactions&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Strangler Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/strangler-pattern/</link>
      <pubDate>Sun, 22 Dec 2024 01:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/strangler-pattern/</guid>
      <description>&lt;h2 id=&#34;strangler-pattern&#34;&gt;Strangler Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>CQRS Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/cqrs-pattern/</link>
      <pubDate>Wed, 27 Nov 2024 10:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/cqrs-pattern/</guid>
      <description>&lt;h2 id=&#34;cqrs-pattern&#34;&gt;CQRS Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Saga Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/saga-pattern/</link>
      <pubDate>Wed, 27 Nov 2024 10:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/saga-pattern/</guid>
      <description>&lt;h2 id=&#34;saga-pattern&#34;&gt;Saga Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Database per Service Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/database-per-service-pattern/</link>
      <pubDate>Wed, 27 Nov 2024 10:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/database-per-service-pattern/</guid>
      <description>&lt;h2 id=&#34;database-per-service-pattern&#34;&gt;Database per Service Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Multi-tenant Database Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/multi-tenant-database-pattern/</link>
      <pubDate>Wed, 27 Nov 2024 02:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/multi-tenant-database-pattern/</guid>
      <description>&lt;h2 id=&#34;multi-tenant-database-pattern&#34;&gt;Multi-tenant Database Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Polyglot Persistence Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/polyglot-persistence-pattern/</link>
      <pubDate>Wed, 27 Nov 2024 02:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/polyglot-persistence-pattern/</guid>
      <description>&lt;h2 id=&#34;polyglot-persistence-pattern&#34;&gt;Polyglot Persistence Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Event Sourcing</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/event-sourcing/</link>
      <pubDate>Wed, 27 Nov 2024 01:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/event-sourcing/</guid>
      <description>&lt;h2 id=&#34;event-sourcing&#34;&gt;Event Sourcing&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Shared Database per Service</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/shared-database-per-service/</link>
      <pubDate>Wed, 27 Nov 2024 01:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/shared-database-per-service/</guid>
      <description>&lt;h2 id=&#34;shared-database-per-service&#34;&gt;Shared Database per Service&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Anti-Corruption Layer Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/anti-corruption-layer-pattern/</link>
      <pubDate>Sun, 24 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/anti-corruption-layer-pattern/</guid>
      <description>&lt;h2 id=&#34;anti-corruption-layer-pattern&#34;&gt;Anti-Corruption Layer Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Backend for Frontend Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/backend-for-frontend-pattern/</link>
      <pubDate>Sun, 24 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/backend-for-frontend-pattern/</guid>
      <description>BFF는 특정 프론트엔드 애플리케이션을 위해 맞춤형으로 설계된 백엔드 서비스를 의미한다. 이는 마이크로서비스 아키텍처에서 자주 사용되는 패턴으로, 각각의 클라이언트(웹, 모바일, 태블릿 등)가 자신만의 전용 백엔드 서비스를 갖게 된다.</description>
    </item>
    <item>
      <title>Intergration Patterns</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/intergration-patterns/</link>
      <pubDate>Sun, 24 Nov 2024 02:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/intergration-patterns/</guid>
      <description>&lt;h2 id=&#34;intergration-patterns&#34;&gt;Intergration Patterns&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Client-Side UI Composition Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/client-side-ui-composition-pattern/</link>
      <pubDate>Sun, 24 Nov 2024 02:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/client-side-ui-composition-pattern/</guid>
      <description>&lt;h2 id=&#34;client-side-ui-composition-pattern&#34;&gt;Client-Side UI Composition Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Aggregator Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/aggregator-pattern/</link>
      <pubDate>Sun, 24 Nov 2024 02:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/aggregator-pattern/</guid>
      <description>&lt;h2 id=&#34;aggregator-pattern&#34;&gt;Aggregator Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Gateway Routing Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/gateway-routing-pattern/</link>
      <pubDate>Sun, 24 Nov 2024 02:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/gateway-routing-pattern/</guid>
      <description>&lt;h2 id=&#34;gateway-routing-pattern&#34;&gt;Gateway Routing Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Proxy Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/proxy-pattern/</link>
      <pubDate>Sun, 24 Nov 2024 02:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/proxy-pattern/</guid>
      <description>&lt;h2 id=&#34;proxy-pattern&#34;&gt;Proxy Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>API Gateway Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/api-gateway-pattern/</link>
      <pubDate>Sun, 24 Nov 2024 01:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/api-gateway-pattern/</guid>
      <description>마이크로서비스 아키텍처에서 클라이언트와 백엔드 서비스 간의 단일 진입점 역할을 수행하는 중요한 구성 요소</description>
    </item>
    <item>
      <title>Ambassador Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/ambassador-pattern/</link>
      <pubDate>Tue, 19 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/ambassador-pattern/</guid>
      <description>Ambassador Pattern은 클라이언트와 마이크로서비스 사이에 별도의 서비스(Ambassador)를 두어 통신을 관리하는 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Sidecar Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/sidecar-pattern/</link>
      <pubDate>Tue, 19 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/sidecar-pattern/</guid>
      <description>Sidecar Pattern은 마치 오토바이의 사이드카처럼, 주 애플리케이션 컨테이너 옆에 보조 컨테이너를 배치하여 추가 기능을 제공한다.</description>
    </item>
    <item>
      <title>Service Discovery Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-discovery-pattern/</link>
      <pubDate>Tue, 19 Nov 2024 10:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-discovery-pattern/</guid>
      <description>Service Discovery Pattern은 클라이언트가 서비스의 정확한 위치(IP 주소와 포트)를 알지 못해도 서비스를 호출할 수 있게 해주는 메커니즘</description>
    </item>
    <item>
      <title>Service Mesh</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-mesh/</link>
      <pubDate>Tue, 19 Nov 2024 09:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-mesh/</guid>
      <description>마이크로서비스 아키텍처에서 서비스 간 통신을 관리하고 제어하기 위한 인프라 계층</description>
    </item>
  </channel>
</rss>
