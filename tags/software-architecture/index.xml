<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software-Architecture :: Tag :: hyunyoun's Blog</title><link>https://buenhyden.github.io/tags/software-architecture.html</link><description/><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Sat, 04 Jan 2025 04:02:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/software-architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>MSA 패턴 유형별 비교</title><link>https://buenhyden.github.io/til/2025/01/msa-%ED%8C%A8%ED%84%B4-%EC%9C%A0%ED%98%95%EB%B3%84-%EB%B9%84%EA%B5%90.html</link><pubDate>Sat, 04 Jan 2025 02:45:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/til/2025/01/msa-%ED%8C%A8%ED%84%B4-%EC%9C%A0%ED%98%95%EB%B3%84-%EB%B9%84%EA%B5%90.html</guid><description>MSA의 주요 패턴 유형들을 체계적으로 정리한 것.</description></item><item><title>Distributed State Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/distributed-state-pattern.html</link><pubDate>Sat, 04 Jan 2025 04:02:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/distributed-state-pattern.html</guid><description>Distributed State Pattern 참고 및 출처</description></item><item><title>Session State Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/session-state-pattern.html</link><pubDate>Sat, 04 Jan 2025 04:02:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/session-state-pattern.html</guid><description>Session State Pattern 참고 및 출처</description></item><item><title>Stateless Service Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/stateless-service-pattern.html</link><pubDate>Sat, 04 Jan 2025 04:02:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management/stateless-service-pattern.html</guid><description>Stateless Service Pattern 참고 및 출처</description></item><item><title>Content Negotiation Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/content-negotiation-pattern.html</link><pubDate>Sat, 04 Jan 2025 04:01:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/content-negotiation-pattern.html</guid><description>Content Negotiation Pattern 참고 및 출처</description></item><item><title>Media Type Versioning Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/media-type-versioning-pattern.html</link><pubDate>Sat, 04 Jan 2025 04:01:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/media-type-versioning-pattern.html</guid><description>Media Type Versioning Pattern 참고 및 출처</description></item><item><title>URI Versioning Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/uri-versioning-pattern.html</link><pubDate>Sat, 04 Jan 2025 04:01:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning/uri-versioning-pattern.html</guid><description>URI Versioning Pattern 참고 및 출처</description></item><item><title>Consumer-Driven Contract Testing Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/consumer-driven-contract-testing-pattern.html</link><pubDate>Sat, 04 Jan 2025 03:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/consumer-driven-contract-testing-pattern.html</guid><description>Consumer-Driven Contract Testing Pattern 참고 및 출처</description></item><item><title>End-to-End Testing Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/end-to-end-testing-pattern.html</link><pubDate>Sat, 04 Jan 2025 03:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/end-to-end-testing-pattern.html</guid><description>End-to-End Testing Pattern 참고 및 출처</description></item><item><title>Service Component Test Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/service-component-test-pattern.html</link><pubDate>Sat, 04 Jan 2025 03:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/service-component-test-pattern.html</guid><description>Service Component Test Pattern 참고 및 출처</description></item><item><title>State Management Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management.html</link><pubDate>Sat, 04 Jan 2025 02:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/state-management.html</guid><description>State Management Patterns 참고 및 출처</description></item><item><title>Testing Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing.html</link><pubDate>Sat, 04 Jan 2025 02:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing.html</guid><description>Testing Patterns 참고 및 출처</description></item><item><title>Versioning Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning.html</link><pubDate>Sat, 04 Jan 2025 02:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/versioning.html</guid><description>Versioning Patterns 참고 및 출처</description></item><item><title>Service Registry Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/service-registry-pattern.html</link><pubDate>Fri, 03 Jan 2025 04:02:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/service-registry-pattern.html</guid><description>Service Registry Pattern 참고 및 출처</description></item><item><title>Third-Party Registration Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/third-party-registration-pattern.html</link><pubDate>Fri, 03 Jan 2025 04:02:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/third-party-registration-pattern.html</guid><description>Third-Party Registration Pattern 참고 및 출처</description></item><item><title>Self-Registration Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/self-registration-pattern.html</link><pubDate>Fri, 03 Jan 2025 04:01:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry/self-registration-pattern.html</guid><description>Self-Registration Pattern 참고 및 출처</description></item><item><title>Elastic Scale Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/elastic-scale-pattern.html</link><pubDate>Fri, 03 Jan 2025 04:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/elastic-scale-pattern.html</guid><description>Elastic Scale Pattern 참고 및 출처</description></item><item><title>Horizontal Scaling Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/horizontal-scaling-pattern.html</link><pubDate>Fri, 03 Jan 2025 04:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/horizontal-scaling-pattern.html</guid><description>Horizontal Scaling Pattern 참고 및 출처</description></item><item><title>Scale Cube Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/scale-cube-pattern.html</link><pubDate>Fri, 03 Jan 2025 04:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability/scale-cube-pattern.html</guid><description>Scale Cube Pattern 참고 및 출처</description></item><item><title>Service Registry Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry.html</link><pubDate>Fri, 03 Jan 2025 02:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/service-registry.html</guid><description>Service Registry Patterns 참고 및 출처</description></item><item><title>Resilience Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience.html</link><pubDate>Fri, 03 Jan 2025 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience.html</guid><description>Resilience Patterns 참고 및 출처</description></item><item><title>Scalability Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability.html</link><pubDate>Fri, 03 Jan 2025 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/scalability.html</guid><description>Scalability Patterns 참고 및 출처</description></item><item><title>Data Lake Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-lake-pattern.html</link><pubDate>Thu, 02 Jan 2025 03:56:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-lake-pattern.html</guid><description>Data Lake Pattern 참고 및 출처</description></item><item><title>Data Mesh Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-mesh-pattern.html</link><pubDate>Thu, 02 Jan 2025 03:56:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-mesh-pattern.html</guid><description>Data Mesh Pattern 참고 및 출처</description></item><item><title>Data Pipeline Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-pipeline-pattern.html</link><pubDate>Thu, 02 Jan 2025 03:56:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management/data-pipeline-pattern.html</guid><description>Data Pipeline Pattern 참고 및 출처</description></item><item><title>API Security Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/api-security-pattern.html</link><pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/api-security-pattern.html</guid><description>API Security Pattern 참고 및 출처</description></item><item><title>OAuth and OpenID Connect Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/oauth-and-openid-connect-pattern.html</link><pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/oauth-and-openid-connect-pattern.html</guid><description>OAuth/ OpenID Connect Pattern 참고 및 출처</description></item><item><title>Service-to-Service Authentication</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/service-to-service-authentication.html</link><pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/service-to-service-authentication.html</guid><description>Service-to-Service Authentication 참고 및 출처</description></item><item><title>Vault Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/vault-pattern.html</link><pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/vault-pattern.html</guid><description>Vault Pattern 참고 및 출처</description></item><item><title>Zero Trust Security Model</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/zero-trust-security-model.html</link><pubDate>Thu, 02 Jan 2025 02:25:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/zero-trust-security-model.html</guid><description>Zero Trust Security Model 참고 및 출처</description></item><item><title>Security Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security.html</link><pubDate>Thu, 02 Jan 2025 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security.html</guid><description>Security Patterns 참고 및 출처</description></item><item><title>Data Management Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management.html</link><pubDate>Thu, 02 Jan 2025 02:18:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/data-management.html</guid><description>Data Management Patterns 참고 및 출처</description></item><item><title>Circuit Breaker Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/circuit-breaker-pattern.html</link><pubDate>Wed, 01 Jan 2025 10:05:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/circuit-breaker-pattern.html</guid><description>Circuit Breaker Pattern 참고 및 출처</description></item><item><title>Lazy Loading Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/lazy-loading-pattern.html</link><pubDate>Wed, 01 Jan 2025 04:01:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/lazy-loading-pattern.html</guid><description>Lazy Loading Pattern 참고 및 출처</description></item><item><title>Caching Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/caching-pattern.html</link><pubDate>Wed, 01 Jan 2025 04:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/caching-pattern.html</guid><description>Caching Pattern 참고 및 출처</description></item><item><title>Throttling Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/throttling-pattern.html</link><pubDate>Wed, 01 Jan 2025 04:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance/throttling-pattern.html</guid><description>Throttling Pattern 참고 및 출처</description></item><item><title>Bulkhead Isolation Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/bulkhead-isolation-pattern.html</link><pubDate>Wed, 01 Jan 2025 02:24:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/bulkhead-isolation-pattern.html</guid><description>Bulkhead Isolation Pattern 참고 및 출처</description></item><item><title>Fallback Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/fallback-pattern.html</link><pubDate>Wed, 01 Jan 2025 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/fallback-pattern.html</guid><description>Fallback Pattern 참고 및 출처</description></item><item><title>Performance Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance.html</link><pubDate>Wed, 01 Jan 2025 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/performance.html</guid><description>Performance Patterns 참고 및 출처</description></item><item><title>Timeout Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/timeout-pattern.html</link><pubDate>Wed, 01 Jan 2025 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/timeout-pattern.html</guid><description>Timeout Pattern 참고 및 출처</description></item><item><title>Retry Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/retry-pattern.html</link><pubDate>Wed, 01 Jan 2025 02:18:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/retry-pattern.html</guid><description>Retry Pattern 참고 및 출처</description></item><item><title>Configuration-as-Code Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/configuration-as-code-pattern.html</link><pubDate>Mon, 30 Dec 2024 04:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/configuration-as-code-pattern.html</guid><description>Configuration-as-Code는 시스템의 구성을 버전 관리가 가능한 소스 코드 형태로 정의하고 관리하는 방식이다.</description></item><item><title>Dynamic Configuration Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/dynamic-configuration-pattern.html</link><pubDate>Mon, 30 Dec 2024 04:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/dynamic-configuration-pattern.html</guid><description>Dynamic Configuration Pattern은 애플리케이션의 동작을 재배포 없이 실시간으로 변경할 수 있게 해주는 패턴</description></item><item><title>Configuration Management Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management.html</link><pubDate>Mon, 30 Dec 2024 02:17:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management.html</guid><description>구성 관리 패턴은 애플리케이션의 설정 정보를 효율적으로 관리하고 유지하기 위한 방법들을 정의한다. 적절한 구성 관리는 시스템의 안정성과 유연성을 보장하는 데 필수적이다.</description></item><item><title>외부 구성 저장소 패턴(External Configuration Store Pattern)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/external-configuration-store.html</link><pubDate>Mon, 30 Dec 2024 01:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/external-configuration-store.html</guid><description>외부 구성 저장소 패턴(External Configuration Store Pattern)은 마이크로서비스 아키텍처(MSA)에서 구성 관리 패턴 중 하나로 애플리케이션의 구성 정보를 외부 저장소로 분리하여 관리하는 방식을 제안한다.</description></item><item><title>Observability Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability.html</link><pubDate>Sun, 29 Dec 2024 02:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability.html</guid><description>Observability Patterns 참고 및 출처</description></item><item><title>Synthetic Monitoring</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/synthetic-monitoring.html</link><pubDate>Sun, 29 Dec 2024 02:20:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/synthetic-monitoring.html</guid><description>Synthetic Monitoring 참고 및 출처</description></item><item><title>Audit Logging</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/audit-logging.html</link><pubDate>Sun, 29 Dec 2024 02:13:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/audit-logging.html</guid><description>Audit Logging 참고 및 출처</description></item><item><title>Exception Tracking</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/exception-tracking.html</link><pubDate>Sun, 29 Dec 2024 02:12:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/exception-tracking.html</guid><description>Exception Tracking 참고 및 출처</description></item><item><title>Distributed Tracing</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/distributed-tracing.html</link><pubDate>Sun, 29 Dec 2024 01:59:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/distributed-tracing.html</guid><description>Distributed Tracing 참고 및 출처</description></item><item><title>Health Check</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/health-check.html</link><pubDate>Sun, 29 Dec 2024 01:59:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/health-check.html</guid><description>Health Check 참고 및 출처</description></item><item><title>Log Aggregation</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/log-aggregation.html</link><pubDate>Sun, 29 Dec 2024 01:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/log-aggregation.html</guid><description>Log Aggregation 참고 및 출처</description></item><item><title>Performance Metrics</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/performance-metrics.html</link><pubDate>Sun, 29 Dec 2024 01:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/performance-metrics.html</guid><description>Performance Metrics 참고 및 출처</description></item><item><title>Communication Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication.html</link><pubDate>Sat, 28 Dec 2024 12:41:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication.html</guid><description>통신 패턴들은 마이크로서비스 아키텍처에서 서비스 간의 효율적인 통신을 가능하게 하며, 시스템의 확장성, 유연성, 성능을 향상시키는 데 중요한 역할을 한다.</description></item><item><title>Event-Driven Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/event-driven-pattern.html</link><pubDate>Sat, 28 Dec 2024 10:05:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/event-driven-pattern.html</guid><description>이 패턴은 시스템의 상태 변화를 이벤트로 표현하고, 이를 기반으로 서비스 간 통신을 구현하는 방식이다.</description></item><item><title>발행/구독 패턴 (Publisher-Subscriber Pattern)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/publisher-subscriber-pattern.html</link><pubDate>Sat, 28 Dec 2024 07:05:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/publisher-subscriber-pattern.html</guid><description>발행/구독 패턴은 메시지를 생성하는 발행자(Publisher)와 메시지를 수신하는 구독자(Subscriber) 사이의 비동기 통신 모델이다.</description></item><item><title>Request-Response Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/request-response-pattern.html</link><pubDate>Sat, 28 Dec 2024 06:18:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/request-response-pattern.html</guid><description>Request-Response Pattern은 한 서비스(클라이언트)가 다른 서비스(서버)에 요청을 보내고, 서버가 이 요청을 처리한 후 응답을 반환하는 방식의 통신이다.</description></item><item><title>Message-based Communication Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/message-based-communication-pattern.html</link><pubDate>Sat, 28 Dec 2024 03:56:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/message-based-communication-pattern.html</guid><description>Message-based Communication Pattern은 마이크로서비스 간 통신을 위해 메시지를 사용하는 방식으로 각 서비스는 메시지를 생성하고 수신하며, 이 메시지들은 메시지 브로커를 통해 전달된다.</description></item><item><title>Synchronous Communication Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/synchronous-communication-pattern.html</link><pubDate>Sat, 28 Dec 2024 03:56:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/synchronous-communication-pattern.html</guid><description>Synchronous Communication Pattern은 한 서비스가 다른 서비스에 요청을 보내고 응답을 받을 때까지 기다리는 방식이다.</description></item><item><title>비동기 통신 패턴(Asynchronous Communication Pattern)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/asynchronous-communication-pattern.html</link><pubDate>Sat, 28 Dec 2024 03:56:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/asynchronous-communication-pattern.html</guid><description>비동기 통신 패턴은 마이크로서비스 간의 통신에서 요청자가 응답을 기다리지 않고 다음 작업을 수행할 수 있게 하는 패턴이다.</description></item><item><title>Auto-Scaling-Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/auto-scaling-pattern.html</link><pubDate>Thu, 26 Dec 2024 02:39:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/auto-scaling-pattern.html</guid><description>Auto-Scaling-Pattern 참고 및 출처</description></item><item><title>Deployment Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment.html</link><pubDate>Thu, 26 Dec 2024 02:19:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment.html</guid><description>Deployment 참고 및 출처</description></item><item><title>Multiple Service Instances per Host</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/multiple-service-instances-per-host.html</link><pubDate>Thu, 26 Dec 2024 02:14:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/multiple-service-instances-per-host.html</guid><description>Multiple Service Instances per Host 참고 및 출처</description></item><item><title>Service Instance per Container</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/service-instance-per-container.html</link><pubDate>Thu, 26 Dec 2024 02:14:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/service-instance-per-container.html</guid><description>Service Instance per Container 참고 및 출처</description></item><item><title>Single Service per Host</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/single-service-per-host.html</link><pubDate>Thu, 26 Dec 2024 02:14:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/single-service-per-host.html</guid><description>Single Service per Host 참고 및 출처</description></item><item><title>Blue-Green Deployment Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/blue-green-deployment-pattern.html</link><pubDate>Thu, 26 Dec 2024 02:13:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/blue-green-deployment-pattern.html</guid><description>Blue-Green Deployment Pattern 참고 및 출처</description></item><item><title>Canary Deployment Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/canary-deployment-pattern.html</link><pubDate>Thu, 26 Dec 2024 02:13:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/canary-deployment-pattern.html</guid><description>Canary Deployment Pattern 참고 및 출처</description></item><item><title>Rolling Update Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/rolling-update-pattern.html</link><pubDate>Thu, 26 Dec 2024 02:13:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/rolling-update-pattern.html</guid><description>Rolling Update Pattern 참고 및 출처</description></item><item><title>Decomposition Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition.html</link><pubDate>Sun, 22 Dec 2024 02:19:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition.html</guid><description>Decomposition 참고 및 출처</description></item><item><title>Decompose by Business Capability</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-business-capability.html</link><pubDate>Sun, 22 Dec 2024 01:20:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-business-capability.html</guid><description>Decompose by Business Capability 참고 및 출처</description></item><item><title>Decompose by Subdomain</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-subdomain.html</link><pubDate>Sun, 22 Dec 2024 01:20:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-subdomain.html</guid><description>Decompose by Subdomain 참고 및 출처</description></item><item><title>Decompose by Transactions</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-transactions.html</link><pubDate>Sun, 22 Dec 2024 01:20:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-transactions.html</guid><description>Decompose by Transactions 참고 및 출처</description></item><item><title>Strangler Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/strangler-pattern.html</link><pubDate>Sun, 22 Dec 2024 01:20:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/strangler-pattern.html</guid><description>Strangler Pattern 참고 및 출처</description></item><item><title>CQRS Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/cqrs-pattern.html</link><pubDate>Wed, 27 Nov 2024 10:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/cqrs-pattern.html</guid><description>CQRS Pattern 참고 및 출처</description></item><item><title>Saga Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/saga-pattern.html</link><pubDate>Wed, 27 Nov 2024 10:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/saga-pattern.html</guid><description>Saga Pattern 참고 및 출처</description></item><item><title>Database per Service Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/database-per-service-pattern.html</link><pubDate>Wed, 27 Nov 2024 10:05:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/database-per-service-pattern.html</guid><description>Database per Service Pattern 참고 및 출처</description></item><item><title>Multi-tenant Database Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/multi-tenant-database-pattern.html</link><pubDate>Wed, 27 Nov 2024 02:20:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/multi-tenant-database-pattern.html</guid><description>Multi-tenant Database Pattern 참고 및 출처</description></item><item><title>Database Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database.html</link><pubDate>Wed, 27 Nov 2024 02:19:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database.html</guid><description>Database 참고 및 출처</description></item><item><title>Polyglot Persistence Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/polyglot-persistence-pattern.html</link><pubDate>Wed, 27 Nov 2024 02:16:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/polyglot-persistence-pattern.html</guid><description>Polyglot Persistence Pattern 참고 및 출처</description></item><item><title>Event Sourcing</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/event-sourcing.html</link><pubDate>Wed, 27 Nov 2024 01:54:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/event-sourcing.html</guid><description>Event Sourcing 참고 및 출처</description></item><item><title>Shared Database per Service</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/shared-database-per-service.html</link><pubDate>Wed, 27 Nov 2024 01:54:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/shared-database-per-service.html</guid><description>Shared Database per Service 참고 및 출처</description></item><item><title>Anti-Corruption Layer Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/anti-corruption-layer-pattern.html</link><pubDate>Sun, 24 Nov 2024 10:07:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/anti-corruption-layer-pattern.html</guid><description>Anti-Corruption Layer Pattern 참고 및 출처</description></item><item><title>Backend for Frontend Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/backend-for-frontend-pattern.html</link><pubDate>Sun, 24 Nov 2024 10:07:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/backend-for-frontend-pattern.html</guid><description>Backend for Frontend Pattern 참고 및 출처</description></item><item><title>Intergration Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/intergration-patterns.html</link><pubDate>Sun, 24 Nov 2024 02:19:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/intergration-patterns.html</guid><description>Intergration Patterns 참고 및 출처</description></item><item><title>Client-Side UI Composition Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/client-side-ui-composition-pattern.html</link><pubDate>Sun, 24 Nov 2024 02:01:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/client-side-ui-composition-pattern.html</guid><description>Client-Side UI Composition Pattern 참고 및 출처</description></item><item><title>Aggregator Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/aggregator-pattern.html</link><pubDate>Sun, 24 Nov 2024 02:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/aggregator-pattern.html</guid><description>Aggregator Pattern 참고 및 출처</description></item><item><title>Gateway Routing Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/gateway-routing-pattern.html</link><pubDate>Sun, 24 Nov 2024 02:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/gateway-routing-pattern.html</guid><description>Gateway Routing Pattern 참고 및 출처</description></item><item><title>Proxy Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/proxy-pattern.html</link><pubDate>Sun, 24 Nov 2024 02:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/proxy-pattern.html</guid><description>Proxy Pattern 참고 및 출처</description></item><item><title>API Gateway Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/api-gateway-pattern.html</link><pubDate>Sun, 24 Nov 2024 01:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/integration/api-gateway-pattern.html</guid><description>API Gateway Pattern 참고 및 출처</description></item><item><title>Ambassador Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/ambassador-pattern.html</link><pubDate>Tue, 19 Nov 2024 10:07:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/ambassador-pattern.html</guid><description>Ambassador Pattern은 클라이언트와 마이크로서비스 사이에 별도의 서비스(Ambassador)를 두어 통신을 관리하는 디자인 패턴이다.</description></item><item><title>Sidecar Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/sidecar-pattern.html</link><pubDate>Tue, 19 Nov 2024 10:07:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/sidecar-pattern.html</guid><description>Sidecar Pattern은 마치 오토바이의 사이드카처럼, 주 애플리케이션 컨테이너 옆에 보조 컨테이너를 배치하여 추가 기능을 제공한다.</description></item><item><title>Service Discovery Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-discovery-pattern.html</link><pubDate>Tue, 19 Nov 2024 10:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-discovery-pattern.html</guid><description>Service Discovery Pattern은 클라이언트가 서비스의 정확한 위치(IP 주소와 포트)를 알지 못해도 서비스를 호출할 수 있게 해주는 메커니즘</description></item><item><title>Service Mesh</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-mesh.html</link><pubDate>Tue, 19 Nov 2024 09:47:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-mesh.html</guid><description>마이크로서비스 아키텍처에서 서비스 간 통신을 관리하고 제어하기 위한 인프라 계층</description></item><item><title>Cross-Cutting Concern Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern.html</link><pubDate>Tue, 19 Nov 2024 02:18:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern.html</guid><description>Ambassador pattern, Service Discovery pattern, Service Mesh pattern, 그리고 Sidecar pattern은 모두 마이크로서비스 아키텍처에서 발생하는 cross-cutting concern(횡단 관심사)를 해결하기 위한 디자인 패턴들이다.</description></item></channel></rss>