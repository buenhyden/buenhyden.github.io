<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GRASP on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/grasp/</link>
    <description>Recent content in GRASP on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.149.1</generator>
    <language>en</language>
    <lastBuildDate>Tue, 03 Jun 2025 03:02:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/grasp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GRASP vs. SOLID</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-principles/grasp/grasp-vs-solid/</link>
      <pubDate>Tue, 03 Jun 2025 03:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-principles/grasp/grasp-vs-solid/</guid>
      <description>GRASP 와 SOLID 는 객체지향 설계에서 널리 사용되는 원칙과 패턴이다. GRASP 는 책임 할당과 객체 간 협력에 중점을 두고, SOLID 는 유지보수성과 확장성을 위한 다섯 가지 구체적 원칙을 제시한다. 두 원칙 모두 소프트웨어 품질 향상에 필수적이나, 적용 범위와 구체성이 다르다.</description>
    </item>
    <item>
      <title>GRASP</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-principles/grasp/</link>
      <pubDate>Fri, 30 May 2025 12:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-principles/grasp/</guid>
      <description>GRASP 는 객체지향 설계에서 객체와 클래스에 책임을 효과적으로 할당하기 위한 9 가지 실용적 설계 원칙의 집합이다.  Information Expert, Creator, Controller, Low Coupling, High Cohesion, Polymorphism, Pure Fabrication, Indirection, Protected Variations 로 구성되어 있으며 각 원칙은 객체의 역할, 책임, 협력, 결합도, 응집도 등 시스템의 구조적 품질을 높이기 위해 사용된다.</description>
    </item>
  </channel>
</rss>
