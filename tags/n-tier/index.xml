<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>N-Tier on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/n-tier/</link>
    <description>Recent content in N-Tier on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Wed, 30 Apr 2025 14:29:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/n-tier/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Layered Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-styles/layered-architecture/</link>
      <pubDate>Wed, 30 Apr 2025 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-styles/layered-architecture/</guid>
      <description>전통적인 Layered Architecture 는 Presentation‑Business‑Data 계층으로 책임 분리해 단순성과 유지보수성을 확보하지만, 계층 간 강한 결합과 확장성 한계가 존재한다. 현대적 Layered Architecture(예: Hexagonal, Clean, Onion) 는 포트‑어댑터, 의존성 반전과 같은 원칙을 통해 내부 코어와 인프라 외부 라이브러리를 엄격히 분리하며, 테스트 가능성과 유연성을 크게 개선한다.</description>
    </item>
  </channel>
</rss>
