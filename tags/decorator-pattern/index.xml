<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Decorator-Pattern on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/decorator-pattern/</link>
    <description>Recent content in Decorator-Pattern on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Wed, 25 Sep 2024 06:14:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/decorator-pattern/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Decorator Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/decorator-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/decorator-pattern/</guid>
      <description>Decorator Pattern 은 기존 객체에 동적으로 추가 기능을 부여하기 위해 사용되는 GoF 구조 패턴이다. 컴포넌트 인터페이스를 유지하면서 기능을 래핑하는 Decorator 클래스들을 체인 형태로 조합해, 상속 대신 조합을 통해 유연한 확장이 가능하게 한다. 주로 입력/출력 스트림, UI 요소, 로깅, 트랜잭션 처리 등에서 활용된다.</description>
    </item>
  </channel>
</rss>
