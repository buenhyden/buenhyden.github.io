<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Token-Authentication on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/token-authentication/</link>
    <description>Recent content in Token-Authentication on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.7</generator>
    <language>en</language>
    <lastBuildDate>Thu, 03 Apr 2025 07:23:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/token-authentication/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Token Authentication vs. SAML</title>
      <link>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-saml/</link>
      <pubDate>Thu, 03 Apr 2025 07:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-saml/</guid>
      <description>토큰 인증은 사용자의 자격 증명(보통 사용자 이름과 비밀번호)을 검증한 후, 서버가 발급한 토큰을 통해 이후 요청에서 인증을 처리하는 방식이다. SAML은 서로 다른 도메인 간에 인증 및 권한 부여 데이터를 교환하기 위한 XML 기반 표준이다.</description>
    </item>
    <item>
      <title>Token Authentication vs. JWT</title>
      <link>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-jwt/</link>
      <pubDate>Thu, 03 Apr 2025 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-jwt/</guid>
      <description>토큰 인증은 사용자의 인증 정보를 검증한 후 서버가 고유한 토큰을 발급하고, 클라이언트가 이후 요청 시 이 토큰을 제시하여 자신을 인증하는 광범위한 인증 패러다임이다. JWT는 토큰 인증의 한 형태로, 정보를 안전하게 전송하기 위한 컴팩트하고 자체 포함적인(self-contained) JSON 객체이다.</description>
    </item>
    <item>
      <title>Token Authentication vs. OAuth</title>
      <link>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-oauth-20/</link>
      <pubDate>Thu, 03 Apr 2025 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-oauth-20/</guid>
      <description>토큰 인증은 사용자의 자격 증명을 한 번만 확인한 후, 서버가 서명된 토큰을 발급하여 클라이언트가 이 토큰을 사용해 자신을 인증하도록 하는 것이다. OAuth 2.0의 핵심 아이디어는 사용자(리소스 소유자)가 비밀번호를 공유하지 않고도 제3자 애플리케이션(클라이언트)에게 자신의 데이터에 대한 특정 접근 권한을 부여할 수 있도록 하는 것이다.</description>
    </item>
    <item>
      <title>Token Authentication vs. OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-openid-connect/</link>
      <pubDate>Thu, 03 Apr 2025 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-openid-connect/</guid>
      <description>토큰 인증은 사용자의 자격 증명(주로 사용자 이름과 비밀번호)을 검증한 후, 서버가 발급한 토큰을 통해 이후의 요청에서 인증을 수행하는 방식이다. OpenID Connect는 OAuth 2.0 프로토콜 위에 구축된 ID 계층으로, 클라이언트가 사용자의 신원을 확인하고 기본적인 프로필 정보를 얻을 수 있게 하는 인증 프로토콜이다.</description>
    </item>
    <item>
      <title>Token Authentication vs. Cookie-Based Auth</title>
      <link>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-cookie-based-auth/</link>
      <pubDate>Thu, 03 Apr 2025 07:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-cookie-based-auth/</guid>
      <description>토큰 인증은 서버가 사용자의 인증 정보를 확인한 후 서명된 토큰을 발급하고, 클라이언트가 이 토큰을 이후의 요청에 포함시켜 자신을 인증하는 방식이다. 쿠키 기반 인증은 서버가 사용자 인증 후 세션 ID를 포함한 쿠키를 클라이언트에 전송하고, 클라이언트가 이 쿠키를 모든 요청에 자동으로 포함시켜 인증하는 방식이다.</description>
    </item>
    <item>
      <title>Token Authentication vs. Session-based Auth</title>
      <link>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-session-based-auth/</link>
      <pubDate>Wed, 02 Apr 2025 02:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/token-based-authentication-vs-session-based-auth/</guid>
      <description>세션 기반 인증은 전통적인 인증 방식으로, 서버가 사용자의 로그인 상태를 세션으로 유지하는 방식이다. 토큰 인증은 클라이언트에게 서명된 토큰을 발급하여 인증하는 방식이다.</description>
    </item>
    <item>
      <title>Token Authentication</title>
      <link>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/</link>
      <pubDate>Tue, 11 Mar 2025 13:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/</guid>
      <description>토큰 기반 인증은 사용자가 자신의 자격 증명(일반적으로 사용자 이름과 비밀번호)을 인증 서버에 제출하면, 서버가 이를 검증한 후 디지털 토큰을 발급하는 방식이다.</description>
    </item>
  </channel>
</rss>
