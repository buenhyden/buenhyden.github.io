<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – System-Bus</title><link>https://buenhyden.github.io/tags/system-bus/</link><description>Recent content in System-Bus on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 14 Jan 2025 02:17:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/system-bus/index.xml" rel="self" type="application/rss+xml"/><item><title>System Bus</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/system-bus/</link><pubDate>Tue, 14 Jan 2025 02:17:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/system-bus/</guid><description>
&lt;h2>System Bus&lt;/h2>&lt;p>System Bus는 컴퓨터 아키텍처에서 주요 구성 요소들을 연결하는 중요한 통신 경로로, 컴퓨터의 혈관과 같은 역할을 한다. CPU, 메모리, 입출력 장치 등 컴퓨터의 주요 구성 요소들 사이에서 데이터와 신호를 전달한다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Computer%20Architecture/I-O%20Systems/system-bus.png"
alt="System Bus (Internal and Intra)"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://witscad.com/course/computer-architecture/chapter/io-communication-io-controller" target="_blank" rel="noopener">https://witscad.com/course/computer-architecture/chapter/io-communication-io-controller&lt;/a> _&lt;/p>
&lt;h3>시스템 버스의 주요 구성 요소&lt;/h3>&lt;p>시스템 버스는 세 가지 주요 버스로 구성된다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>데이터 버스 (Data Bus):&lt;/p>
&lt;ul>
&lt;li>양방향 버스로, 시스템 구성 요소들 사이에서 실제 데이터를 전송한다.&lt;/li>
&lt;li>예를 들어, CPU가 메모리에서 데이터를 읽거나 쓸 때 사용된다.&lt;/li>
&lt;li>버스의 폭(width)은 한 번에 전송할 수 있는 데이터의 양을 결정한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>// 예시: 32비트 데이터 버스의 데이터 전송
DataBus.transfer(0x1234ABCD); // 32비트 데이터를 한 번에 전송&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>주소 버스 (Address Bus):&lt;/p>
&lt;ul>
&lt;li>단방향 버스로, 메모리나 I/O 장치의 주소를 지정한다.&lt;/li>
&lt;li>CPU가 접근하고자 하는 메모리 위치를 지정할 때 사용된다.&lt;/li>
&lt;li>버스의 폭은 시스템이 접근할 수 있는 메모리의 최대 크기를 결정한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>// 예시: 메모리 주소 지정
AddressBus.select(0x1000); // 메모리 주소 0x1000 선택&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>제어 버스 (Control Bus):&lt;/p>
&lt;ul>
&lt;li>양방향 버스로, 시스템의 동작을 제어하는 신호를 전달한다.&lt;/li>
&lt;li>읽기/쓰기 신호, 인터럽트 신호, 클록 신호 등을 전달한다.&lt;/li>
&lt;li>데이터 전송의 타이밍과 방향을 조정한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>// 예시: 제어 신호 전송
ControlBus.sendSignal(READ); // 읽기 신호 전송
ControlBus.sendSignal(WRITE); // 쓰기 신호 전송&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>시스템 버스의 동작 방식&lt;/h3>&lt;p>시스템 버스의 기본적인 동작 과정은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>메모리 읽기 연산:
&lt;ol>
&lt;li>CPU가 주소 버스에 메모리 주소 전송&lt;/li>
&lt;li>제어 버스를 통해 읽기 신호 전송&lt;/li>
&lt;li>메모리가 데이터 버스를 통해 데이터 전송&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>메모리 쓰기 연산:
&lt;ol>
&lt;li>CPU가 주소 버스에 메모리 주소 전송&lt;/li>
&lt;li>데이터 버스에 쓸 데이터 전송&lt;/li>
&lt;li>제어 버스를 통해 쓰기 신호 전송&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3>기능&lt;/h3>&lt;ul>
&lt;li>데이터 전송: 구성 요소 간 정보 교환&lt;/li>
&lt;li>주소 지정: 메모리 위치나 I/O 장치 식별&lt;/li>
&lt;li>제어 신호 전달: 읽기/쓰기 작업 등의 동작 제어&lt;/li>
&lt;/ul>
&lt;h3>시스템 버스의 특성&lt;/h3>&lt;ol>
&lt;li>
&lt;p>동기화 (Synchronization):&lt;/p>
&lt;ul>
&lt;li>버스 클록이 모든 데이터 전송을 동기화한다.&lt;/li>
&lt;li>클록 속도는 버스의 성능을 결정하는 주요 요소이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>중재 (Arbitration):&lt;/p>
&lt;ul>
&lt;li>여러 장치가 동시에 버스를 사용하려 할 때의 충돌을 방지한다.&lt;/li>
&lt;li>우선순위에 따라 버스 사용 권한을 할당한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">BusArbiter&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">request_bus_access&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_bus_available&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">grant_access&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">device&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_to_queue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">device&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>멀티플렉싱 (Multiplexing):&lt;/p>
&lt;ul>
&lt;li>한정된 버스 라인을 효율적으로 사용하기 위해 시분할 방식을 사용한다.&lt;/li>
&lt;li>주소와 데이터를 같은 라인으로 전송할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>시스템 버스의 성능 향상 기법&lt;/h3>&lt;ol>
&lt;li>
&lt;p>버스 폭 확장:&lt;/p>
&lt;ul>
&lt;li>더 넓은 데이터 버스를 사용하여 한 번에 더 많은 데이터를 전송한다.&lt;/li>
&lt;li>32비트에서 64비트, 128비트로 확장하는 방식이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>계층적 버스 구조:&lt;/p>
&lt;ul>
&lt;li>여러 종류의 버스를 계층적으로 구성하여 성능을 최적화한다.&lt;/li>
&lt;li>예: CPU 버스, 메모리 버스, I/O 버스 등의 분리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>버스 파이프라이닝:&lt;/p>
&lt;ul>
&lt;li>여러 버스 작업을 중첩하여 처리함으로써 성능을 향상시킨다.&lt;/li>
&lt;li>한 작업이 완료되기 전에 다음 작업을 시작할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>성능 영향&lt;/h3>&lt;ul>
&lt;li>버스 속도: 데이터 전송 속도에 직접적 영향&lt;/li>
&lt;li>버스 폭: 한 번에 전송할 수 있는 데이터 양 결정&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>