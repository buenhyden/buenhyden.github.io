<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>System-Design-Fundamentals on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/system-design-fundamentals/</link>
    <description>Recent content in System-Design-Fundamentals on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Tue, 05 Aug 2025 08:02:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/system-design-fundamentals/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Infrastructure</title>
      <link>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/infrastructure/</link>
      <pubDate>Sun, 10 Nov 2024 01:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/infrastructure/</guid>
      <description>Infrastructure(인프라스트럭처)는 조직의 IT 환경을 지원하고 운영하는 데 필요한 기본적인 구성 요소들의 집합이다. 이는 하드웨어, 소프트웨어, 네트워크 리소스 및 서비스를 포함한다.</description>
    </item>
    <item>
      <title>System Design and Architecture</title>
      <link>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/system-design-and-architecture/</link>
      <pubDate>Thu, 19 Sep 2024 21:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/system-design-and-architecture/</guid>
      <description>시스템 디자인은 복잡한 소프트웨어 시스템의 구조와 구성 요소를 정의하여 안정적이고 확장 가능한 시스템을 구축하는 과정이다. 사용자 요구사항을 분석하고, 구조적 설계를 통해 시스템 구성요소와 인터페이스를 정의하며, 성능, 보안, 유지보수성을 고려하여 최적의 아키텍처를 구축한다. 현대 소프트웨어 개발에서 필수적인 역할을 수행한다.</description>
    </item>
    <item>
      <title>Synchronous Execution</title>
      <link>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/execution-models/timing-models/synchronous-execution/</link>
      <pubDate>Tue, 05 Aug 2025 08:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/execution-models/timing-models/synchronous-execution/</guid>
      <description>동기 실행(Synchronous Execution)은 작업이 순차적으로 진행되어 이전 작업이 완료된 후에야 다음 작업이 시작되는 차단형 모델입니다. 구조가 단순하고 흐름 예측이 쉬우며 디버깅이 용이하지만, I/O·네트워크 지연 시 전체 처리 속도가 저하되고 리소스 활용성이 떨어질 수 있습니다. 주로 일관성과 순차성이 중요한 트랜잭션, 배치 처리, 상태 의존 로직에 사용됩니다.</description>
    </item>
    <item>
      <title>Asynchronous Execution</title>
      <link>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/execution-models/timing-models/asynchronous-execution/</link>
      <pubDate>Tue, 05 Aug 2025 08:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/execution-models/timing-models/asynchronous-execution/</guid>
      <description>비동기 실행은 작업 완료를 기다리지 않고 다른 작업을 병행 처리하는 모델로, I/O 지연을 줄이고 자원을 효율적으로 활용해 응답성을 높인다. 이벤트 루프 기반의 태스크 스케줄링으로 구현되며, 콜백·프로미스·async/await 등이 사용된다. I/O-bound에 유리하지만 복잡성과 디버깅 난이도가 단점이다.</description>
    </item>
    <item>
      <title>Multi-tenancy</title>
      <link>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/multi-tenancy/</link>
      <pubDate>Sun, 27 Jul 2025 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/multi-tenancy/</guid>
      <description>**멀티테넌시(Multi-tenancy)**는 단일 소프트웨어 인스턴스가 다수의 테넌트를 논리적으로 분리된 구조로 서비스하는 아키텍처로, 리소스를 공유하면서도 데이터 격리를 보장한다. 비용 절감, 확장성, 운영 효율성이 강점이며, 보안, 성능 격리, 커스터마이즈 관리가 도전 과제이다.</description>
    </item>
    <item>
      <title>System Design Fundamentals</title>
      <link>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/</link>
      <pubDate>Sun, 20 Jul 2025 04:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/</guid>
      <description></description>
    </item>
    <item>
      <title>PACELC Theorem</title>
      <link>https://buenhyden.github.io/posts/system-design/distributed-systems/distributed-system-theorems/pacelc-theorem/</link>
      <pubDate>Sat, 22 Mar 2025 06:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/distributed-systems/distributed-system-theorems/pacelc-theorem/</guid>
      <description>PACELC 정리는 CAP 이론을 확장하여 네트워크 분할 (Partition) 발생 시 **A(가용성) vs C(일관성)**, 정상 시 **L(지연 시간) vs C(일관성)** 간 트레이드오프를 명시하는 이론이다. 이는 시스템 설계 시 필연적인 선택과 트레이드오프를 요구한다. 2025 년 현재 초대규모 분산 시스템에서 동적 리소스 할당과 AI 기반 자동 최적화 기술에 필수적으로 적용되며, 클라우드 네이티브 아키텍처 설계의 핵심 원칙으로 작용한다.</description>
    </item>
    <item>
      <title>CAP Theorem</title>
      <link>https://buenhyden.github.io/posts/system-design/distributed-systems/distributed-system-theorems/cap-theorem/</link>
      <pubDate>Thu, 20 Feb 2025 00:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/distributed-systems/distributed-system-theorems/cap-theorem/</guid>
      <description>CAP 이론은 분산 시스템에서 일관성 (Consistency), 가용성 (Availability), 파티션 내성 (Partition Tolerance) 세 가지 속성 중 동시에 두 가지만 보장할 수 있다는 원칙이다. 네트워크 파티션 발생 시 시스템은 일관성과 가용성 중 하나를 선택해야 하며, 이는 분산 데이터베이스와 같은 시스템 설계에 중요한 영향을 미친다. 파티션 내성은 현실적인 분산 환경에서 필수적이므로 실제로는 일관성과 가용성 사이의 트레이드오프가 핵심이다.</description>
    </item>
    <item>
      <title>Load Balancing</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-patterns/performance-and-scalability/load-management/load-balancing/</link>
      <pubDate>Thu, 13 Feb 2025 01:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-patterns/performance-and-scalability/load-management/load-balancing/</guid>
      <description>API 로드 밸런싱은 현대 웹 아키텍처와 분산 시스템의 필수적인 구성 요소로, 트래픽을 여러 서버에 효율적으로 분산하여 성능, 가용성, 안정성을 극대화한다.</description>
    </item>
  </channel>
</rss>
