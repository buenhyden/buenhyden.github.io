<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Behavioral on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/behavioral/</link>
    <description>Recent content in Behavioral on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Tue, 24 Sep 2024 08:26:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/behavioral/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Behavioral</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/classic-design-patterns/gof/behavioral/</link>
      <pubDate>Tue, 24 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/classic-design-patterns/gof/behavioral/</guid>
      <description>Behavioral Pattern 은 객체들 간 **책임 분배와 실행 흐름 협력**을 설계하여, 코드 의존성을 줄이고 유연성을 강화한다.  대표 패턴으로는 Observer, Strategy, Command 등이 있으며, 런타임 행동 변경과 확장에 효과적이다.</description>
    </item>
    <item>
      <title>Mediator Pattern vs Observer Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/classic-design-patterns/gof/behavioral/mediator-pattern-vs-observer-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/classic-design-patterns/gof/behavioral/mediator-pattern-vs-observer-pattern/</guid>
      <description>Mediator 패턴과 Observer 패턴은 객체 간 통신을 관리하는 디자인 패턴이지만, 그 접근 방식과 용도에 차이가 있다.</description>
    </item>
  </channel>
</rss>
