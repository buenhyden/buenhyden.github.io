<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Proxy</title><link>https://buenhyden.github.io/tags/proxy/</link><description>Recent content in Proxy on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 24 Dec 2024 11:03:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/proxy/index.xml" rel="self" type="application/rss+xml"/><item><title>Envoy</title><link>https://buenhyden.github.io/posts/system-design/infrastructure/virtualization/container/kubernetes/envoy/</link><pubDate>Tue, 24 Dec 2024 11:03:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/system-design/infrastructure/virtualization/container/kubernetes/envoy/</guid><description>
&lt;h2>Envoy&lt;/h2>&lt;p>Envoy는 Kubernetes 환경에서 널리 사용되는 고성능 프록시 서버.&lt;/p>
&lt;p>Envoy는 C++로 작성된 고성능 분산 프록시로, 대규모 마이크로서비스 아키텍처를 위해 설계되었다.&lt;/p>
&lt;h3>주요 특징&lt;/h3>&lt;ol>
&lt;li>다양한 프로토콜 지원: HTTP, TCP, gRPC 등을 지원한다.&lt;/li>
&lt;li>고급 로드 밸런싱: 다양한 로드 밸런싱 알고리즘을 제공한다.&lt;/li>
&lt;li>동적 구성: 실행 중에 설정을 변경할 수 있는 동적 구성을 지원한다.&lt;/li>
&lt;li>관찰 가능성: 상세한 메트릭과 로그를 제공하여 시스템 모니터링을 용이하게 한다.&lt;/li>
&lt;/ol>
&lt;h3>Kubernetes에서의 Envoy 활용&lt;/h3>&lt;p>Kubernetes 환경에서 Envoy는 주로 다음과 같은 방식으로 활용된다:&lt;/p>
&lt;ol>
&lt;li>사이드카 프록시: 각 pod에 Envoy를 사이드카 컨테이너로 배포하여 서비스 간 통신을 관리한다.&lt;/li>
&lt;li>인그레스 컨트롤러: 클러스터 외부에서 내부 서비스로의 트래픽을 관리한다.&lt;/li>
&lt;li>서비스 메시: Istio와 같은 서비스 메시 솔루션의 데이터 플레인으로 사용된다.&lt;/li>
&lt;/ol>
&lt;h3>Envoy의 주요 구성 요소&lt;/h3>&lt;p>Envoy의 핵심 구성 요소는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>리스너(Listener): 수신 연결을 처리한다.&lt;/li>
&lt;li>필터(Filter): 트래픽을 처리하고 변형한다.&lt;/li>
&lt;li>클러스터(Cluster): 업스트림 서비스를 정의한다.&lt;/li>
&lt;/ol>
&lt;h3>Envoy의 동작 방식&lt;/h3>&lt;ol>
&lt;li>트래픽 수신: 리스너가 들어오는 연결을 수락한다.&lt;/li>
&lt;li>필터 체인 처리: 연결된 필터 체인을 통해 요청을 처리한다.&lt;/li>
&lt;li>라우팅: 구성된 규칙에 따라 요청을 적절한 업스트림 클러스터로 라우팅한다.&lt;/li>
&lt;li>로드 밸런싱: 선택된 클러스터 내에서 로드 밸런�ing 정책에 따라 요청을 분산한다.&lt;/li>
&lt;/ol>
&lt;h3>Kubernetes에서의 Envoy 구성&lt;/h3>&lt;p>Kubernetes에서 Envoy를 구성하는 방법은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>ConfigMap 사용: Envoy 설정을 ConfigMap으로 관리하고 pod에 마운트한다.&lt;/li>
&lt;li>CRD(Custom Resource Definition) 사용: Istio와 같은 서비스 메시 솔루션을 통해 Envoy를 간접적으로 구성한다.&lt;/li>
&lt;/ol>
&lt;h3>Envoy의 장점&lt;/h3>&lt;ol>
&lt;li>높은 성능: C++로 작성되어 뛰어난 성능을 제공한다.&lt;/li>
&lt;li>유연성: 다양한 프로토콜과 기능을 지원하여 다양한 사용 사례에 적용 가능하다.&lt;/li>
&lt;li>동적 구성: 실시간으로 설정을 변경할 수 있어 운영의 유연성을 제공한다.&lt;/li>
&lt;li>강력한 모니터링: 상세한 메트릭과 로그를 제공하여 시스템 관찰성을 향상시킨다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>