<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Abstract-Factory-Pattern :: Tag :: hyunyoun's Blog</title><link>https://buenhyden.github.io/tags/abstract-factory-pattern/</link><description/><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Fri, 11 Oct 2024 06:09:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/abstract-factory-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Abstract Factory Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/creational-design-patterns/abstract-factory-pattern/</link><pubDate>Fri, 11 Oct 2024 06:09:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/creational-design-patterns/abstract-factory-pattern/</guid><description>구체적인 클래스를 지정하지 않고도 관련된 객체들의 집합을 생성할 수 있게 해주는 생성 패턴</description></item></channel></rss>