<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GoF on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/gof/</link>
    <description>Recent content in GoF on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.151.2</generator>
    <language>en</language>
    <lastBuildDate>Wed, 25 Sep 2024 18:21:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/gof/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creational</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/</link>
      <pubDate>Wed, 25 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/</guid>
      <description>Creational Design Patterns(생성 디자인 패턴) 는 객체 생성 메커니즘을 다루는 디자인 패턴 분류로, 시스템이 객체를 생성, 구성, 표현하는 방식에 독립성을 제공한다. GoF 에서 정의한 5 가지 패턴 (Singleton, Factory Method, Abstract Factory, Builder, Prototype) 을 포함하며, 객체 생성의 복잡성을 캡슐화하고 유연성을 향상시켜 재사용 가능하고 유지보수가 용이한 소프트웨어 시스템 구축을 지원한다.</description>
    </item>
    <item>
      <title>Structural</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/structural/</link>
      <pubDate>Wed, 25 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/structural/</guid>
      <description>GoF의 Structural Patterns 는 **객체와 클래스 간의 관계를 구성하고 조합하는 설계 기법**으로, 유연성과 유지보수성을 강화한다. 이 패턴들은 Adapter 를 통한 인터페이스 호환, Bridge 를 통한 추상화 구현 분리, Composite 를 통한 트리 구조 관리, Decorator 로 기능 동적 추가, Facade 를 통한 서브시스템 단순화, Flyweight 로 메모리 최적화, Proxy 로 접근 제어 등을 통해 구조적 문제를 해결한다.</description>
    </item>
    <item>
      <title>Behavioral</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/behavioral/</link>
      <pubDate>Tue, 24 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/behavioral/</guid>
      <description>Behavioral Pattern 은 객체들 간 **책임 분배와 실행 흐름 협력**을 설계하여, 코드 의존성을 줄이고 유연성을 강화한다.  대표 패턴으로는 Observer, Strategy, Command 등이 있으며, 런타임 행동 변경과 확장에 효과적이다.</description>
    </item>
    <item>
      <title>Mediator Pattern vs Observer Pattern</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/behavioral/mediator-pattern-vs-observer-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/behavioral/mediator-pattern-vs-observer-pattern/</guid>
      <description>Mediator 패턴과 Observer 패턴은 객체 간 통신을 관리하는 디자인 패턴이지만, 그 접근 방식과 용도에 차이가 있다.</description>
    </item>
    <item>
      <title>Factory Method Pattern</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/factory-method-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 18:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/factory-method-pattern/</guid>
      <description>Factory Method Pattern 은 객체 생성을 위한 인터페이스를 정의하되, 어떤 클래스를 인스턴스화할지는 서브클래스가 결정하도록 하는 생성 패턴이다. 클라이언트 코드와 구체적인 제품 클래스 간의 결합도를 낮추고, 상속을 통해 객체 생성의 책임을 서브클래스에 위임하여 확장성과 유지보수성을 향상시킨다.</description>
    </item>
    <item>
      <title>Singleton Pattern</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/singleton-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 18:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/singleton-pattern/</guid>
      <description>Singleton 패턴은 클래스의 인스턴스를 하나만 생성하고, 어디서든 이 인스턴스를 공유하도록 보장하는 패턴이다. 전역 상태 관리, 설정 객체, 로깅, 캐시 등에서 활용되며, thread-safe 구현이 핵심이다.</description>
    </item>
    <item>
      <title>Flyweight Pattern</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/structural/flyweight-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 08:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/structural/flyweight-pattern/</guid>
      <description>플라이웨이트 패턴은 대량의 유사한 객체들 간에 공통 상태를 공유하여 메모리 사용량을 최소화하는 구조적 디자인 패턴이다.  고유 상태 (Intrinsic State) 와 외부 상태 (Extrinsic State) 를 분리하여, 공유 가능한 고유 상태는 하나의 플라이웨이트 객체에 저장하고 외부 상태는 컨텍스트에서 관리함으로써 메모리 효율성과 성능을 향상시킨다.</description>
    </item>
    <item>
      <title>Bridge Pattern</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/structural/bridge-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/structural/bridge-pattern/</guid>
      <description>브리지 패턴 (Bridge Pattern) 은 추상화 (Abstraction) 와 구현 (Implementation) 을 분리하여 두 계층이 독립적으로 변화할 수 있도록 하는 구조적 디자인 패턴이다.  상속 대신 컴포지션을 사용하여 클래스 계층의 폭발적 증가를 방지하고, 런타임에 구현체를 변경할 수 있는 유연성을 제공한다. 크로스 플랫폼 애플리케이션, 데이터베이스 추상화 계층, API 게이트웨이 등에서 광범위하게 활용된다.</description>
    </item>
    <item>
      <title>Decorator Pattern</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/structural/decorator-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/structural/decorator-pattern/</guid>
      <description>Decorator Pattern 은 기존 객체에 동적으로 추가 기능을 부여하기 위해 사용되는 GoF 구조 패턴이다. 컴포넌트 인터페이스를 유지하면서 기능을 래핑하는 Decorator 클래스들을 체인 형태로 조합해, 상속 대신 조합을 통해 유연한 확장이 가능하게 한다. 주로 입력/출력 스트림, UI 요소, 로깅, 트랜잭션 처리 등에서 활용된다.</description>
    </item>
    <item>
      <title>Facade Pattern</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/structural/facade-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/structural/facade-pattern/</guid>
      <description>Facade Pattern(퍼사드 패턴) 은 복잡한 서브시스템의 인터페이스들을 통합하여 단순화된 단일 인터페이스를 제공하는 구조적 디자인 패턴이다. 클라이언트가 복잡한 시스템의 내부 구조를 알지 않고도 쉽게 사용할 수 있도록 하며, 시스템 간의 결합도를 낮추고 유지보수성을 향상시킨다.</description>
    </item>
    <item>
      <title>Proxy Pattern</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/structural/proxy-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/structural/proxy-pattern/</guid>
      <description>Proxy Pattern 은 클라이언트와 실제 객체 사이에 **대체 객체 (proxy)** 를 두어 접근, 생성, 호출 제어와 추가 로직 (예: caching, security, lazy init) 을 수행하는 Structural 디자인 패턴으로, 인터페이스는 동일하지만 기능 제어나 비용 절감, 보호, 원격 접근 등에 유용하다.</description>
    </item>
    <item>
      <title>Adapter Pattern</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/structural/adapter-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/structural/adapter-pattern/</guid>
      <description>Adapter Pattern 은 호환되지 않는 인터페이스를 가진 클래스들이 함께 작동할 수 있도록 하는 구조적 설계 패턴이다. 기존 코드 수정 없이 레거시 시스템과 신규 시스템을 연결하는 브리지 역할을 하며, 인터페이스 변환을 통해 시스템 간 상호 운용성을 제공한다.</description>
    </item>
    <item>
      <title>Abstract Factory Pattern</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/abstract-factory-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/abstract-factory-pattern/</guid>
      <description>Abstract Factory Pattern 은 관련된 객체들의 패밀리를 구체적인 클래스를 명시하지 않고 생성할 수 있게 하는 생성형 디자인 패턴이다. 제품군의 일관성을 보장하며, 시스템의 독립성과 확장성을 제공하여 다양한 플랫폼이나 환경에서 동일한 인터페이스로 서로 다른 구현체를 생성할 수 있게 한다.</description>
    </item>
    <item>
      <title>Builder Pattern</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/builder-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/builder-pattern/</guid>
      <description>빌더 패턴은 복잡한 객체를 단계별로 생성하며, 생성 과정과 표현 방법을 분리해 다양한 조합의 객체 생성을 유연하게 지원하는 생성 패턴이다. 매개변수가 많거나 생성 절차가 복잡한 객체에 효과적이며, 코드 가독성, 유지보수성, 불변성 보장에 유리하다.</description>
    </item>
    <item>
      <title>Prototype Pattern</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/prototype-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/prototype-pattern/</guid>
      <description>Prototype 패턴은 객체 생성 비용이 높거나 런타임에 객체 유형이 동적으로 결정될 때 기존 인스턴스를 복제 (clone) 해 새 객체를 만드는 Creational 패턴이다. 클라이언트는 구체 클래스에 의존하지 않고 인터페이스 기반 clone 메서드를 통해 객체를 생성해 유연성과 성능을 개선한다.</description>
    </item>
    <item>
      <title>GoF</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/</link>
      <pubDate>Wed, 25 Sep 2024 01:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/</guid>
      <description>GoF 디자인 패턴은 객체 생성, 구조 조합, 행동 관리를 체계화한 23 가지 솔루션이다. 재사용 가능한 코드 작성을 통해 **유지보수성**과 **확장성**을 높이며, Singleton, Adapter, Observer 등이 대표적이다. 이 패턴들은 복잡한 시스템에서 발생하는 공통 문제를 해결하기 위해 필수적으로 활용된다.</description>
    </item>
  </channel>
</rss>
