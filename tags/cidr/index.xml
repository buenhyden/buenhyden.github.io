<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – CIDR</title><link>https://buenhyden.github.io/tags/cidr/</link><description>Recent content in CIDR on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 04 Oct 2024 13:09:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/cidr/index.xml" rel="self" type="application/rss+xml"/><item><title>서브넷팅 (Subnetting)</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/ip/subnetting/</link><pubDate>Fri, 04 Oct 2024 13:09:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/ip/subnetting/</guid><description>
&lt;h2>서브넷팅 (Subnetting)&lt;/h2>&lt;p>서브넷팅(Subnetting)은 네트워크를 더 작은 단위의 네트워크로 분할하는 기술이다.&lt;br>
이 기술은 IP 주소의 효율적인 사용과 네트워크 관리를 개선하기 위해 사용된다.&lt;/p>
&lt;p>서브넷팅은 하나의 IP 클래스를 효율적으로 이용하기 위해 Host ID 구간을 분할하여 원래 정의된 Network ID와 함께 Network ID로 사용하는 네트워크 관리 기법이다.&lt;/p>
&lt;p>서브넷팅을 통해 분할된 네트워크를 서브넷(Subnet)라고 한다.&lt;/p>
&lt;h3>주요 목적&lt;/h3>&lt;ol>
&lt;li>IP 주소 낭비 방지&lt;/li>
&lt;li>브로드캐스트 도메인의 크기 축소&lt;/li>
&lt;li>네트워크 성능 향상&lt;/li>
&lt;li>보안성 강화&lt;/li>
&lt;/ol>
&lt;h3>서브넷팅의 장점&lt;/h3>&lt;ol>
&lt;li>네트워크 관리 용이성 향상&lt;/li>
&lt;li>고급 네트워크 보안 구현 가능&lt;/li>
&lt;li>네트워크 트래픽 감소&lt;/li>
&lt;li>ISP로부터 추가 IP 주소 요청 필요성 감소&lt;/li>
&lt;/ol>
&lt;h3>서브넷 (Subnet)&lt;/h3>&lt;p>서브넷은 &amp;lsquo;Sub Network&amp;rsquo;의 줄임말로, 더 큰 네트워크의 논리적인 부분집합을 의미한다.&lt;br>
이는 마치 큰 건물을 여러 개의 사무실로 나누는 것과 비슷한데, 각 사무실(서브넷)은 자신만의 공간을 가지면서도 전체 건물(네트워크)의 일부로 기능한다.&lt;/p>
&lt;h4>서브넷의 구성 요소&lt;/h4>&lt;ol>
&lt;li>
&lt;p>서브넷 주소&lt;br>
서브넷 주소는 해당 서브넷을 식별하는 고유한 주소.&lt;br>
이는 해당 서브넷의 첫 번째 IP 주소로, 네트워크 주소라고도 한다.&lt;br>
예를 들어, 192.168.1.0/24라는 서브넷에서 192.168.1.0이 서브넷 주소가 된다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>브로드캐스트 주소&lt;br>
각 서브넷의 마지막 IP 주소는 브로드캐스트 주소로 사용된다.&lt;br>
이 주소로 보내진 패킷은 해당 서브넷의 모든 호스트가 수신한다.&lt;br>
192.168.1.0/24 서브넷에서는 192.168.1.255가 브로드캐스트 주소가 된다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>사용 가능한 호스트 주소&lt;br>
서브넷 주소와 브로드캐스트 주소 사이의 모든 IP 주소는 해당 서브넷 내의 호스트들이 사용할 수 있다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4>서브넷의 동작 방식&lt;/h4>&lt;ol>
&lt;li>
&lt;p>패킷 라우팅&lt;br>
서브넷은 라우터를 통해 서로 통신한다.&lt;br>
라우터는 목적지 IP 주소를 확인하고, 해당 패킷을 적절한 서브넷으로 전달한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>브로드캐스트 도메인&lt;br>
각 서브넷은 독립된 브로드캐스트 도메인을 형성한다.&lt;br>
한 서브넷에서 발생한 브로드캐스트 트래픽은 다른 서브넷으로 전파되지 않는다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>네트워크 세그먼테이션&lt;br>
서브넷을 통해 네트워크를 논리적으로 분할함으로써, 트래픽을 효율적으로 관리하고 보안을 강화할 수 있다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>서브넷의 종류&lt;/h3>&lt;ol>
&lt;li>
&lt;p>내부 서브넷&lt;/p>
&lt;ul>
&lt;li>조직 내부에서만 사용되는 사설 IP 주소를 사용&lt;/li>
&lt;li>일반적으로 NAT를 통해 외부와 통신&lt;/li>
&lt;li>보안성이 높고 관리가 용이&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>DMZ(비무장지대) 서브넷&lt;/p>
&lt;ul>
&lt;li>내부 네트워크와 외부 네트워크 사이에 위치&lt;/li>
&lt;li>웹 서버, 메일 서버 등 외부에 서비스를 제공하는 서버들이 위치&lt;/li>
&lt;li>보안과 접근성의 균형을 맞춘 구성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>외부 서브넷&lt;/p>
&lt;ul>
&lt;li>공인 IP 주소를 사용&lt;/li>
&lt;li>인터넷에 직접 연결&lt;/li>
&lt;li>주로 라우터나 방화벽이 위치&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>서브넷의 실제 구현 예시&lt;/h4>&lt;ol>
&lt;li>
&lt;p>사무실 환경의 서브넷 구성&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">본사 사무실:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 관리부 서브넷: 192.168.1.0/24
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 개발부 서브넷: 192.168.2.0/24
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 영업부 서브넷: 192.168.3.0/24
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 서버팜 서브넷: 192.168.10.0/24&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>데이터센터 환경의 서브넷 구성&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">데이터센터:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 웹 서버 서브넷: 10.1.1.0/24
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 데이터베이스 서브넷: 10.1.2.0/24
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 백업 서브넷: 10.1.3.0/24
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 관리 서브넷: 10.1.255.0/24&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>서브넷팅의 구성요소&lt;/h3>&lt;ol>
&lt;li>서브넷 마스크: IP 주소와 AND 연산을 통해 네트워크 ID를 추출하는 데 사용된다.&lt;br>
IP 주소를 서브넷팅하는 경우 IP 주소와 별도로 어디까지가 Network Address 이고 어디까지고 Host Address 인지 구별할 수 있는 식별자가 필요한데 이를 서브넷 마스크라고 한다.&lt;br>
주어진 IP 주소를 네트워크 환경에 맞게 나누어 주기 위해서 씌워주는 이진수의 조합이다.&lt;/li>
&lt;li>게이트웨이: 서로 다른 네트워크 간 통신을 가능하게 하는 장치.&lt;/li>
&lt;li>Network ID: 전체 네트워크에서 각 네트워크를 구분하는 주소.&lt;/li>
&lt;li>Host ID: 하나의 네트워크 내에서 각 호스트를 구분하는 주소.&lt;/li>
&lt;/ol>
&lt;h3>서브넷팅 계산 방법&lt;/h3>&lt;ol>
&lt;li>필요한 네트워크 수 결정&lt;/li>
&lt;li>네트워크 ID 생성을 위한 비트 수 결정&lt;/li>
&lt;li>서브넷 마스크 계산&lt;/li>
&lt;li>서브넷 ID 계산&lt;/li>
&lt;li>각 서브넷의 호스트 ID 범위 계산&lt;/li>
&lt;/ol>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Networking%20and%20Communications/Protocol/IP/function-subnet-mask.svg"
alt="The function of the subnet mask"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.networkacademy.io/ccna/ip-subnetting/the-subnet-mask" target="_blank" rel="noopener">https://www.networkacademy.io/ccna/ip-subnetting/the-subnet-mask&lt;/a> _&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Networking%20and%20Communications/Protocol/IP/number-hosts-per-subnet.svg"
alt="Number of hosts per subnet"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.networkacademy.io/ccna/ip-subnetting/the-subnet-mask" target="_blank" rel="noopener">https://www.networkacademy.io/ccna/ip-subnetting/the-subnet-mask&lt;/a> _&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Networking%20and%20Communications/Protocol/IP/determining-a_subnet-boundary.svg"
alt="Determining the boundaries of a subnet"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.networkacademy.io/ccna/ip-subnetting/the-subnet-mask" target="_blank" rel="noopener">https://www.networkacademy.io/ccna/ip-subnetting/the-subnet-mask&lt;/a> _&lt;/p>
&lt;h3>FLSM Vs VLSM&lt;/h3>&lt;p>VLSM(Variable Length Subnet Mask)과 FLSM(Fixed Length Subnet Mask)은 IP 네트워크 설계에서 사용되는 서브넷팅 기술이다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>비교 항목&lt;/th>
&lt;th>VLSM (Variable Length Subnet Mask)&lt;/th>
&lt;th>FLSM (Fixed Length Subnet Mask)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>각 서브넷마다 다른 크기의 서브넷 마스크를 사용할 수 있는 서브네팅 방식. 네트워크 요구사항에 따라 다양한 크기의 서브넷을 유연하게 생성할 수 있음&lt;/td>
&lt;td>모든 서브넷이 동일한 크기의 서브넷 마스크를 사용하는 서브네팅 방식. 네트워크를 동일한 크기의 블록으로 균등하게 분할&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>작동 방식&lt;/td>
&lt;td>1. 가장 큰 서브넷부터 순차적으로 주소 할당&lt;br>2. 남은 공간에서 그다음 크기의 서브넷 할당&lt;br>3. 각 서브넷의 요구사항에 맞는 최적의 크기로 분할&lt;br>4. 계층적 주소 지정 구조 사용&lt;/td>
&lt;td>1. 전체 네트워크를 동일한 크기로 균등 분할&lt;br>2. 각 서브넷에 동일한 수의 호스트 주소 할당&lt;br>3. 단순한 이진수 분할 방식 사용&lt;br>4. 평면적 주소 지정 구조 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주소 할당 방식&lt;/td>
&lt;td>- 각 서브넷의 실제 필요한 호스트 수에 기반하여 할당&lt;br>2의 거듭제곱 단위로 호스트 수 계산&lt;br>- 남은 주소 공간을 다른 서브넷에 재활용 가능&lt;/td>
&lt;td>- 모든 서브넷에 동일한 수의 호스트 주소 할당&lt;br>- 서브넷 크기는 처음 설계 시 고정&lt;br>- 사용하지 않는 주소도 예약됨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IP 주소 활용 효율성&lt;/td>
&lt;td>- 필요한 만큼만 할당하여 주소 낭비 최소화&lt;br>- 남은 주소 공간을 효율적으로 재사용&lt;br>- 주소 공간 활용도 90% 이상 달성 가능&lt;/td>
&lt;td>- 모든 서브넷이 동일 크기로 할당되어 주소 낭비 발생&lt;br>- 작은 네트워크에도 큰 주소 블록 할당&lt;br>- 주소 공간 활용도 50% 미만인 경우 많음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>설계 복잡도&lt;/td>
&lt;td>- 네트워크 요구사항 상세 분석 필요&lt;br>- 서브넷 크기 계산이 복잡&lt;br>- 주소 할당 순서 고려 필요&lt;br>- 세부적인 문서화 필요&lt;/td>
&lt;td>- 간단한 이진수 계산만으로 설계 가능&lt;br>- 모든 서브넷이 동일 크기로 균등 분할&lt;br>- 최소한의 계획만으로 구현 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>라우팅 구성&lt;/td>
&lt;td>- 각 서브넷마다 다른 마스크 적용&lt;br>- 라우팅 테이블이 복잡해짐&lt;br>- 라우팅 프로토콜이 VLSM을 지원해야 함&lt;/td>
&lt;td>- 모든 서브넷이 동일한 마스크 사용&lt;br>- 라우팅 테이블이 단순함&lt;br>- 기본적인 라우팅 프로토콜로도 구현 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>- 새로운 서브넷 추가가 유연함&lt;br>- 기존 할당에 영향 없이 확장 가능&lt;br>- 다양한 크기의 네트워크 수용 가능&lt;/td>
&lt;td>- 미리 정해진 크기로만 확장 가능&lt;br>- 새로운 크기의 서브넷 추가 어려움&lt;br>- 전체 구조 변경 필요할 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 도구&lt;/td>
&lt;td>- 고급 네트워크 관리 도구 필요&lt;br>VLSM 지원 라우터 필요&lt;br>- 전문 네트워크 설계 소프트웨어 활용&lt;/td>
&lt;td>- 기본적인 네트워크 도구로 충분&lt;br>- 대부분의 라우터에서 지원&lt;br>- 간단한 계산기로도 설계 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>오류 가능성&lt;/td>
&lt;td>- 잘못된 서브넷 마스크 할당 위험&lt;br>- 주소 중복 할당 가능성&lt;br>- 복잡한 구성으로 인한 오류 위험 높음&lt;/td>
&lt;td>- 단순한 구성으로 오류 가능성 낮음&lt;br>- 주소 중복 가능성 거의 없음&lt;br>- 설정 오류 발생 가능성 낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>유지보수&lt;/td>
&lt;td>- 정기적인 주소 할당 검토 필요&lt;br>- 복잡한 문서화 관리 필요&lt;br>- 전문 관리자 필요&lt;/td>
&lt;td>- 최소한의 유지보수만 필요&lt;br>- 간단한 문서화로 충분&lt;br>- 일반 관리자도 관리 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>비용 효율성&lt;/td>
&lt;td>- 초기 설계 비용 높음&lt;br>- 전문 인력 필요&lt;br>- 고급 장비 필요하나 장기적으로는 효율적&lt;/td>
&lt;td>- 초기 설계 비용 낮음&lt;br>- 일반 인력으로 충분&lt;br>- 기본 장비로 구현 가능하나 IP 낭비 비용 발생&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>적용 사례&lt;/td>
&lt;td>- 대규모 기업 네트워크&lt;br>ISP 네트워크&lt;br>- 다양한 규모의 지사를 가진 조직&lt;/td>
&lt;td>- 소규모 사무실 네트워크&lt;br>- 학교 네트워크&lt;br>- 비슷한 규모의 부서로 구성된 조직&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 차이점들을 고려할 때, 네트워크의 규모, 복잡성, 향후 확장 계획 등을 종합적으로 평가하여 적절한 서브네팅 방식을 선택하는 것이 중요하다.&lt;br>
VLSM은 복잡하지만 효율적인 주소 활용이 필요한 대규모 네트워크에 적합하며, FLSM은 단순하고 관리가 용이한 소규모 네트워크에 적합하다.&lt;/p>
&lt;p>192.168.1.0/24 네트워크를 4개의 동일한 서브넷으로 나누는 경우:&lt;/p>
&lt;ol>
&lt;li>FLSM(Fixed Length Subnet Mask)에서는
&lt;ol>
&lt;li>서브넷 마스크가 /26으로 변경된다.&lt;/li>
&lt;li>결과적으로 192.168.1.0/26, 192.168.1.64/26, 192.168.1.128/26, 192.168.1.192/26의 4개 서브넷이 생성된다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>VLSM(Variable Length Subnet Mask)
&lt;ol>
&lt;li>100개 호스트 필요: 192.168.1.0/25 (126개 사용 가능 주소)&lt;/li>
&lt;li>50개 호스트 필요: 192.168.1.128/26 (62개 사용 가능 주소)&lt;/li>
&lt;li>25개 호스트 필요: 192.168.1.192/27 (30개 사용 가능 주소)&lt;/li>
&lt;li>10개 호스트 필요: 192.168.1.224/28 (14개 사용 가능 주소)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2>&lt;h3>Subnet&lt;/h3>&lt;p>&lt;a href="https://www.cloudflare.com/ko-kr/learning/network-layer/what-is-a-subnet/" target="_blank" rel="noopener">서브넷이란? | 서브넷의 작동 방식&lt;/a>&lt;br>
&lt;a href="https://louis-j.tistory.com/entry/Subnet-mask-%EC%84%9C%EB%B8%8C%EB%84%B7-%EC%84%9C%EB%B8%8C%EB%84%B7%EB%A7%88%EC%8A%A4%ED%81%AC-%EC%84%9C%EB%B8%8C%EB%84%B7%ED%8C%85%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C#google_vignette" target="_blank" rel="noopener">\[Subnet mask\] 서브넷, 서브넷 마스크, 서브넷팅에 대해서!&lt;/a>&lt;br>
[The Subnet Mask](&lt;a href="https://www.networkacademy.io/ccna/ip-subnetting/the-subnet-mask" target="_blank" rel="noopener">https://www.networkacademy.io/ccna/ip-subnetting/the-subnet-mask&lt;/a>&lt;br>
&lt;a href="https://www.itworld.co.kr/news/191458" target="_blank" rel="noopener">다시 돌아보는 기본 : 서브넷의 이해&lt;/a>&lt;br>
&lt;a href="https://hyoje420.tistory.com/32" target="_blank" rel="noopener">[Network]서브넷(Subnet)&lt;/a>&lt;br>
&lt;a href="https://code-lab1.tistory.com/34" target="_blank" rel="noopener">\[네트워크\] 서브넷, 서브넷마스크, 서브넷팅이란?&lt;/a>&lt;br>
&lt;a href="https://www.cloudflare.com/ko-kr/learning/network-layer/what-is-a-subnet/" target="_blank" rel="noopener">서브넷이란? | 서브넷의 작동 방식&lt;/a>&lt;/p></description></item><item><title>CIDR (Classless Inter-Domain Routing)</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/ip/cidr/</link><pubDate>Fri, 04 Oct 2024 11:51:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/ip/cidr/</guid><description>
&lt;h2>CIDR (Classless Inter-Domain Routing)&lt;/h2>&lt;p>CIDR은 1993년에 도입된 IP 주소 할당 및 라우팅 방식으로, 기존의 클래스 기반 주소 체계(Classful Addressing)의 한계를 극복하기 위해 만들어졌다.&lt;br>
인터넷이 급속도로 성장하면서 기존의 고정된 클래스 체계로는 IP 주소를 효율적으로 할당하기 어려워졌고, 이를 해결하기 위해 더 유연한 주소 할당 방식이 필요해지면서 탄생되었다.&lt;br>
네트워크 정보를 여러 개로 나누어진 Sub-Network 들을 모두 나타낼 수 있는 하나의 Network 로 통합해서 보여주는 방법이다.&lt;/p>
&lt;h3>목적&lt;/h3>&lt;ul>
&lt;li>IP 주소 자원의 낭비를 줄임&lt;/li>
&lt;li>라우팅 테이블의 크기를 감소시킴&lt;/li>
&lt;li>더 유연하고 효율적인 주소 할당을 제공&lt;/li>
&lt;/ul>
&lt;h3>특징&lt;/h3>&lt;ol>
&lt;li>
&lt;p>주소 집약(Route Aggregation)&lt;br>
CIDR의 가장 중요한 특징 중 하나는 라우팅 테이블을 간소화할 수 있는 주소 집약이다.&lt;br>
예를 들어:&lt;/p>
&lt;ul>
&lt;li>192.168.0.0/24&lt;/li>
&lt;li>192.168.1.0/24&lt;/li>
&lt;li>192.168.2.0/24&lt;/li>
&lt;li>192.168.3.0/24 이 네 개의 네트워크를 192.168.0.0/22로 집약할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>유연한 네트워크 설계&lt;br>
CIDR을 사용하면 네트워크 크기를 필요에 따라 정확하게 조절할 수 있다.&lt;br>
이는 다음과 같은 이점을 제공한다:&lt;/p>
&lt;ul>
&lt;li>IP 주소 낭비 최소화&lt;/li>
&lt;li>효율적인 주소 공간 활용&lt;/li>
&lt;li>네트워크 구조의 유연한 설계&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;/h3>&lt;ol>
&lt;li>
&lt;p>IP 주소 활용 효율성&lt;/p>
&lt;ul>
&lt;li>필요한 만큼의 주소만 할당 가능&lt;/li>
&lt;li>주소 공간 낭비 최소화&lt;/li>
&lt;li>미사용 주소의 재할당 용이&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>라우팅 효율성&lt;/p>
&lt;ul>
&lt;li>라우팅 테이블 크기 감소&lt;/li>
&lt;li>네트워크 성능 향상&lt;/li>
&lt;li>라우터의 메모리 사용량 감소&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>네트워크 설계 유연성&lt;/p>
&lt;ul>
&lt;li>다양한 크기의 네트워크 수용&lt;/li>
&lt;li>쉬운 네트워크 확장&lt;/li>
&lt;li>효율적인 주소 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>표기법&lt;/h3>&lt;p>CIDR은 IP 주소와 슬래시(/) 뒤에 네트워크 프리픽스의 비트 수를 표기하는 방식을 사용한다.&lt;br>
이는 네트워크 주소와 프리픽스 길이로 표현되며, 프리픽스 길이는 네트워크 부분의 비트 수를 나타낸다.&lt;/p>
&lt;ul>
&lt;li>점과 숫자로 이루어진 4 부분의 주소와 &amp;lsquo;/&amp;rsquo; 뒤의 0 에서 32 까지의 숫자로 이루어진다.&lt;br>
즉, &lt;code>A.B.C.D/N&lt;/code> 과 같은 형태&lt;/li>
&lt;li>점과 숫자로 이루어진 부분은 IPv4 주소와 마찬가지로 4 개의 8 비트 단위 바이트로 이루어진 32 비트 이진 숫자이다.&lt;/li>
&lt;li>&amp;lsquo;/&amp;rsquo; 뒤의 숫자는 &lt;code>접두어 길이&lt;/code>라고 하며, 주소의 왼쪽으로부터 세어서 공유하는 초기 비트의 수를 가리킨다.&lt;/li>
&lt;/ul>
&lt;p>예를 들어 192.168.1.0/24는 다음을 의미한다:&lt;/p>
&lt;ul>
&lt;li>IP 주소: 192.168.1.0&lt;/li>
&lt;li>네트워크 프리픽스: 24비트&lt;/li>
&lt;li>호스트 비트: 8비트 (32-24) 이는 기존 클래스 체계의 서브넷 마스크 255.255.255.0과 동일한 의미를 가진다.&lt;/li>
&lt;/ul>
&lt;h4>CIDR 블록&lt;/h4>&lt;p>CIDR(Classless Inter-Domain Routing)는 IP 주소를 할당하고 라우팅하는 방식 자체를 의미하는 반면, &lt;strong>CIDR 블록&lt;/strong>은 CIDR 방식을 사용하여 실제로 정의된 특정 주소의 범위를 의미한다.&lt;br>
예를 들어 192.168.1.0/24와 같은 특정 네트워크 주소 범위를 CIDR 블록이라고 한다.&lt;/p>
&lt;p>구체적인 예시를 들어보면:&lt;/p>
&lt;ul>
&lt;li>CIDR은 &amp;ldquo;/24&amp;quot;나 &amp;ldquo;/16&amp;quot;과 같은 접두어 길이를 사용하여 네트워크를 유연하게 분할할 수 있게 해주는 방식.&lt;/li>
&lt;li>CIDR 블록은 이 방식을 사용하여 실제로 정의된 &amp;ldquo;192.168.1.0/24&amp;quot;나 &amp;ldquo;10.0.0.0/16&amp;quot;과 같은 특정 주소 범위.&lt;/li>
&lt;/ul>
&lt;p>예를 들어 192.168.1.0/24라는 CIDR 블록은 192.168.1.0부터 192.168.1.255까지의 256개 연속된 IP 주소를 포함한다.&lt;br>
CIDR 블록이라 불리는 그룹에 포함된 여러 IP 주소는 &lt;strong>이진 표기&lt;/strong>를 하였을 때 동일한 일련의 초기 비트를 가진다.&lt;br>
만약 이진 형태로 변화한 IP 주소의 첫 자리 비트에서 CIDR 접두어 N 비트 길이만큼 일치한다면, 해당 IP 주소는 CIDR 블록의 일부라고 하며, CIDR 접두어와 일치한다고 한다.&lt;/p>
&lt;p>IPv6 주소에서도 사용될 수 있으며, 이 경우 긴 주소로 말미암아 접두어 길이는 0~128 까지의 범위를 지닌다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Networking%20and%20Communications/Protocol/IP/487px-IP_Address_Match.svg.png"
alt="CIDR 접두어 일치의 예시"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://ko.wikipedia.org/wiki/CIDR" target="_blank" rel="noopener">https://ko.wikipedia.org/wiki/CIDR&lt;/a> _&lt;/p>
&lt;ul>
&lt;li>CIDR 블록의 할당
&lt;ul>
&lt;li>1990 년대 후반, 208.130.29.33 은 &lt;code>www.fresssoft.org&lt;/code> 웹 서버에 할당되어 있었는데, 3 개의 CIDR 접두어를 가진다.
&lt;ul>
&lt;li>큰 CIDR 블록인 208.128.0.0/11 이 ARIN(북미 RIR) 에서 MCI 에 할당됨.&lt;/li>
&lt;li>버지니아주에 있는 재공급업자인 Automation Research Systems 는 MCI 로부터 인터넷 접속을 승인받아 208.130.28.0/22 를 부여받음.&lt;/li>
&lt;li>ARS 는 /24 블록을 공공 서버용으로 할당하였고, 208.130.29.33 은 그 중 하나이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>하나의 주소에 대한 이러한 여러 CIDR 접두어는 네트워크상의 서로 다른 영역에서 각각 사용된다.
&lt;ul>
&lt;li>MCI 네트워크 외부에서는 208.128.0.0/11 접두어가 MCI 트래픽 영역으로 접근하기 위해 사용된다.&lt;/li>
&lt;li>MCI 네트워크 내부에서는 208.128.28.0/22 가 사용되며, 패킷을 ARS 로 보내는 역할을 한다.&lt;/li>
&lt;li>208.130.29.0/24 는 ARS 네트워크 내부에서만 사용된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Networking%20and%20Communications/Protocol/IP/640px-CIDR_Address.svg.png"
alt="An broken down by its CIDR prefixes"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://ko.wikipedia.org/wiki/CIDR" target="_blank" rel="noopener">https://ko.wikipedia.org/wiki/CIDR&lt;/a> _&lt;/p>
&lt;h3>CIDR의 작동 원리&lt;/h3>&lt;p>CIDR은 가변 길이 서브넷 마스킹(VLSM)을 사용하여 네트워크를 더 효율적으로 분할한다.&lt;br>
네트워크 프리픽스 길이를 자유롭게 조절할 수 있어서, 필요한 만큼의 호스트 주소만을 할당할 수 있다.&lt;/p>
&lt;p>예를 들어:&lt;/p>
&lt;ul>
&lt;li>/24 네트워크는 256개의 주소(254개 사용 가능)&lt;/li>
&lt;li>/25 네트워크는 128개의 주소(126개 사용 가능)&lt;/li>
&lt;li>/26 네트워크는 64개의 주소(62개 사용 가능)&lt;/li>
&lt;/ul>
&lt;h3>CIDR 계산 방법&lt;/h3>&lt;p>CIDR 네트워크를 계산할 때는 다음 단계를 따른다:&lt;/p>
&lt;ol>
&lt;li>네트워크 크기 결정 필요한 호스트 수를 파악하고, 이를 수용할 수 있는 가장 작은 2의 거듭제곱을 찾는다.&lt;/li>
&lt;li>프리픽스 길이 계산 32에서 필요한 호스트 비트 수를 뺀 값이 프리픽스 길이가 된다.&lt;/li>
&lt;li>네트워크 범위 계산 네트워크 주소와 브로드캐스트 주소를 계산하여 사용 가능한 IP 범위를 결정한다.&lt;/li>
&lt;/ol>
&lt;h4>실제 CIDR 적용 예시&lt;/h4>&lt;p>한 회사에서 직원 60명을 수용할 수 있는 네트워크를 설계해야 한다고 가정해보자.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>네트워크 크기 결정&lt;/p>
&lt;ul>
&lt;li>필요한 호스트 수: 60대&lt;/li>
&lt;li>네트워크 주소와 브로드캐스트 주소를 위해 추가로 2개 주소 필요&lt;/li>
&lt;li>따라서 총 필요한 주소 수: 62개&lt;/li>
&lt;li>이를 수용할 수 있는 가장 작은 2의 거듭제곱을 찾아보면:
&lt;ul>
&lt;li>2⁶ = 64가 62개의 주소를 수용할 수 있는 최소 크기&lt;/li>
&lt;li>즉, 6비트가 호스트 부분에 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>프리픽스 길이 계산&lt;/p>
&lt;ul>
&lt;li>IPv4는 총 32비트&lt;/li>
&lt;li>필요한 호스트 비트 수는 6비트&lt;/li>
&lt;li>프리픽스 길이 = 32 - 6 = 26&lt;/li>
&lt;li>따라서 /26 네트워크가 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>네트워크 범위 계산&lt;br>
예를 들어 192.168.1.0/26 네트워크를 사용한다고 하면:&lt;/p>
&lt;ul>
&lt;li>네트워크 주소: 192.168.1.0
&lt;ul>
&lt;li>이진수로 표현: 11000000.10101000.00000001.00000000&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>브로드캐스트 주소: 192.168.1.63
&lt;ul>
&lt;li>이진수로 표현: 11000000.10101000.00000001.00111111&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>사용 가능한 IP 주소 범위:
&lt;ul>
&lt;li>첫 번째 사용 가능 주소: 192.168.1.1&lt;/li>
&lt;li>마지막 사용 가능 주소: 192.168.1.62&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>총 사용 가능한 호스트 수: 62개 (64 - 2)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>접두어 합침 (Routing Prefix Aggregation, 혹은 summarization)&lt;/h3>&lt;p>접두어 합침(Routing Prefix Aggregation 또는 summarization)은 라우팅 테이블의 크기를 줄이고 네트워크 효율성을 높이기 위해 사용되는 중요한 기술이다.&lt;/p>
&lt;p>접두어 합침은 여러 개의 연속된 IP 주소 블록을 하나의 더 큰 블록으로 결합하는 과정이다.&lt;/p>
&lt;p>이 기술의 주요 목적은:&lt;/p>
&lt;ol>
&lt;li>라우팅 테이블 크기 감소&lt;/li>
&lt;li>네트워크 대역폭 절약&lt;/li>
&lt;li>라우터의 처리 부하 감소&lt;/li>
&lt;li>네트워크 안정성 향상&lt;/li>
&lt;/ol>
&lt;p>장점:&lt;/p>
&lt;ol>
&lt;li>라우팅 테이블 크기 감소: 여러 개의 경로를 하나로 합치면 라우터의 메모리 사용량이 줄어든다.&lt;/li>
&lt;li>라우팅 효율성 향상: 작은 라우팅 테이블은 더 빠른 경로 검색을 가능하게 한다.&lt;/li>
&lt;li>네트워크 안정성 개선: 개별 경로의 변동이 전체 네트워크에 미치는 영향을 줄일 수 있다.&lt;/li>
&lt;/ol>
&lt;p>주의사항:&lt;br>
접두어 합침을 사용할 때는 주의가 필요하다.&lt;br>
과도한 합침은 라우팅의 정확성을 떨어뜨릴 수 있으며, 특정 상황에서는 비효율적인 라우팅을 초래할 수 있다.&lt;/p>
&lt;p>작동 방식:&lt;br>
접두어 합침은 여러 개의 작은 네트워크를 하나의 큰 네트워크로 표현한다.&lt;br>
이는 CIDR(Classless Inter-Domain Routing) 표기법을 사용하여 수행된다.&lt;/p>
&lt;p>예시:&lt;br>
다음과 같은 네트워크 주소들이 있다고 가정해 봅시다:&lt;/p>
&lt;ul>
&lt;li>172.16.64.0/24 ~ 172.16.71.0/24&lt;br>
이 네 개의 주소는 172.16.64.0/21로 합칠 수 있다.&lt;br>
이렇게 하면 라우팅 테이블에 네 개의 항목 대신 하나의 항목만 필요하게 된다.&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Networking%20and%20Communications/Protocol/IP/GUID-CBB50420-82CE-4F46-98BA-24A1BF644290-low.png"
alt="Route Summarization"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://docs.vmware.com/en/VMware-SD-WAN/6.0/VMware-SD-WAN-Administration-Guide/GUID-72405FEF-C3B9-47E9-A332-869FB35DB1DC.html" target="_blank" rel="noopener">https://docs.vmware.com/en/VMware-SD-WAN/6.0/VMware-SD-WAN-Administration-Guide/GUID-72405FEF-C3B9-47E9-A332-869FB35DB1DC.html&lt;/a> _&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2>&lt;h3>CIDR&lt;/h3>&lt;p>&lt;a href="https://kim-dragon.tistory.com/9" target="_blank" rel="noopener">[네트워크] CIDR이란?(사이더 란?)&lt;/a>&lt;br>
&lt;a href="https://kim-dragon.tistory.com/154" target="_blank" rel="noopener">[네트워크] CIDR 범위 쉽게 계산하는 방법&lt;/a>&lt;br>
&lt;a href="https://ko.wikipedia.org/wiki/CIDR" target="_blank" rel="noopener">CIDR&lt;/a>&lt;/p></description></item></channel></rss>