<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Web</title><link>https://buenhyden.github.io/tags/web/</link><description>Recent content in Web on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 07 Nov 2024 09:44:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/web/index.xml" rel="self" type="application/rss+xml"/><item><title>Javascript Web Framework</title><link>https://buenhyden.github.io/posts/programming-languages/javascript/web-framework/</link><pubDate>Thu, 07 Nov 2024 09:44:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/programming-languages/javascript/web-framework/</guid><description>
&lt;h2>Javascript Web Framework&lt;/h2>&lt;h3>프론트엔드 프레임워크&lt;/h3>&lt;p>프론트엔드 프레임워크는 사용자 인터페이스(UI) 및 사용자 경험(UX)을 구축하는 데 사용&lt;br>
대표적인 프레임워크로는 React, Angular, Vue.js, Svelte, Preact 등이 있다.&lt;br>
이들 프레임워크는 싱글 페이지 애플리케이션(SPA) 개발, 동적인 UI 구성, 컴포넌트 기반 아키텍처를 지원하며 각각 고유한 장점과 단점을 가지고 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>프레임워크&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>주요 사용사례&lt;/th>
&lt;th>학습 난이도&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>React&lt;/td>
&lt;td>• Component 기반 구조&lt;br>• Virtual DOM 사용&lt;br>• JSX 문법 지원&lt;br>• Meta(구 Facebook) 개발&lt;/td>
&lt;td>• 풍부한 생태계&lt;br>• 높은 성능&lt;br>• 유연한 구조&lt;/td>
&lt;td>• 상태관리 도구 별도 필요&lt;br>• 가파른 학습 곡선&lt;/td>
&lt;td>• 대규모 SPA&lt;br>• 동적 웹앱&lt;br>• 기업용 웹사이트&lt;/td>
&lt;td>중상&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Vue.js&lt;/td>
&lt;td>• 점진적 프레임워크&lt;br>• 템플릿 기반 구문&lt;br>• 반응형 시스템&lt;/td>
&lt;td>• 쉬운 학습곡선&lt;br>• 가벼운 크기&lt;br>• 명확한 문서화&lt;/td>
&lt;td>• 영어권 자료 부족&lt;br>• 큰 규모 프로젝트시 복잡&lt;/td>
&lt;td>• 중소규모 웹앱&lt;br>• 마이크로사이트&lt;br>• 프로토타입&lt;/td>
&lt;td>중&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Angular&lt;/td>
&lt;td>• TypeScript 기반&lt;br>• 완전한 프레임워크&lt;br>• 구글 지원&lt;/td>
&lt;td>• 강력한 기능제공&lt;br>• 엔터프라이즈급 지원&lt;br>• 통합 개발환경&lt;/td>
&lt;td>• 무거운 크기&lt;br>• 높은 진입장벽&lt;/td>
&lt;td>• 엔터프라이즈 앱&lt;br>• 대규모 프로젝트&lt;/td>
&lt;td>상&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Svelte&lt;/td>
&lt;td>• 컴파일러 방식&lt;br>• 최소한의 코드&lt;br>• 반응형 시스템&lt;/td>
&lt;td>• 높은 성능&lt;br>• 작은 번들크기&lt;br>• 직관적인 문법&lt;/td>
&lt;td>• 상대적으로 작은 생태계&lt;br>• 도구 부족&lt;/td>
&lt;td>• 경량 웹앱&lt;br>• 인터랙티브 요소&lt;/td>
&lt;td>하중&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>백엔드 프레임워크&lt;/h3>&lt;p>백엔드 프레임워크는 서버 측 로직, 데이터베이스 관리, API 설계 등을 담당.&lt;br>
대표적으로 Express.js, NestJS, Koa, Hapi.js, Adonis.js 등이 있다.&lt;br>
이들 프레임워크는 RESTful API 개발, 실시간 애플리케이션 구축, 모듈화된 아키텍처 지원 등 다양한 기능을 제공.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>프레임워크&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>주요 사용사례&lt;/th>
&lt;th>학습 난이도&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Express.js&lt;/td>
&lt;td>• 미니멀한 구조&lt;br>• Node.js 기반&lt;br>• 미들웨어 시스템&lt;/td>
&lt;td>• 높은 자유도&lt;br>• 풍부한 생태계&lt;br>• 쉬운 확장성&lt;/td>
&lt;td>• 구조화 가이드 부족&lt;br>• 기본 기능 제한적&lt;/td>
&lt;td>• REST API&lt;br>• 마이크로서비스&lt;br>• 웹서버&lt;/td>
&lt;td>중&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NestJS&lt;/td>
&lt;td>• TypeScript 기반&lt;br>• Angular 스타일 구조&lt;br>• 모듈화 시스템&lt;/td>
&lt;td>• 체계적인 구조&lt;br>• 기업용 기능&lt;br>• TypeScript 지원&lt;/td>
&lt;td>• 복잡한 아키텍처&lt;br>• 높은 진입장벽&lt;/td>
&lt;td>• 대규모 백엔드&lt;br>• 마이크로서비스&lt;/td>
&lt;td>상&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Fastify&lt;/td>
&lt;td>• 고성능 포커스&lt;br>• Schema 기반 검증&lt;br>• 플러그인 아키텍처&lt;/td>
&lt;td>• 뛰어난 성능&lt;br>• JSON 처리 최적화&lt;br>• 타입 지원&lt;/td>
&lt;td>• 상대적으로 새로움&lt;br>• 학습자료 부족&lt;/td>
&lt;td>• 고성능 API&lt;br>• 실시간 서비스&lt;/td>
&lt;td>중상&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Koa&lt;/td>
&lt;td>• Express 제작진 개발&lt;br>• 비동기 미들웨어&lt;br>• 최소주의 설계&lt;/td>
&lt;td>• 가벼운 구조&lt;br>• 현대적 JavaScript&lt;br>• 유연한 미들웨어&lt;/td>
&lt;td>• 기본 기능 부족&lt;br>• 추가 모듈 필요&lt;/td>
&lt;td>• 경량 API&lt;br>• 마이크로서비스&lt;/td>
&lt;td>중하&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>