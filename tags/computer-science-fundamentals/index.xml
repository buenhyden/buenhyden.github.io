<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Computer-Science-Fundamentals on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/computer-science-fundamentals/</link>
    <description>Recent content in Computer-Science-Fundamentals on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.5</generator>
    <language>en</language>
    <lastBuildDate>Mon, 12 May 2025 03:31:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/computer-science-fundamentals/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Computer Science Fundamentals</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/</link>
      <pubDate>Thu, 19 Sep 2024 01:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/</guid>
      <description>컴퓨터 과학은 컴퓨팅 시스템의 이론적 기초와 실제 구현을 연구하는 학문 분야입니다. 이 섹션에서는 프로그래밍 패러다임, 컴퓨터 아키텍처, 운영 체제, 성능 최적화 등 컴퓨터 과학의 핵심 개념을 다룹니다. 비트 연산, 부동소수점, 엔디안, 블로킹/논블로킹 등의 기초 개념부터 컴퓨터 시스템의 하드웨어, 메모리 관리, 인터럽트 처리 등의 시스템 수준 주제까지 포괄합니다. 이러한 기초 지식은 고성능, 안정적인 소프트웨어 시스템을 설계하고 구현하는 데 필수적인 역할을 합니다.</description>
    </item>
    <item>
      <title>Syncronization Algorithms</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/methods/</link>
      <pubDate>Sat, 05 Oct 2024 08:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/methods/</guid>
      <description>동기화 알고리즘은 병행 시스템에서 상호 배제(Mutual Exclusion)를 보장하기 위한 핵심 메커니즘이다.</description>
    </item>
    <item>
      <title>Data Structures</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/</link>
      <pubDate>Mon, 07 Oct 2024 06:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/</guid>
      <description>데이터를 효율적으로 저장, 관리, 접근하기 위한 방법</description>
    </item>
    <item>
      <title>Algorithms</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/algorithms/</link>
      <pubDate>Mon, 14 Oct 2024 08:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/algorithms/</guid>
      <description>문제를 해결하거나 특정 작업을 수행하기 위한 명확하고 단계적인 절차</description>
    </item>
    <item>
      <title>Problem Solving Techniques</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/problem-solving-techniques/</link>
      <pubDate>Sun, 13 Oct 2024 05:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/problem-solving-techniques/</guid>
      <description>주어진 문제를 효과적으로 분석하고 해결하기 위한 알고리즘 및 자료 구조를 적용하는 방법론</description>
    </item>
    <item>
      <title>Process vs Thread vs Coroutine</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/processes/process-vs-thread-vs-coroutine/</link>
      <pubDate>Sun, 06 Oct 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/processes/process-vs-thread-vs-coroutine/</guid>
      <description>Process란 실행 중인 프로그램의 인스턴스를 이야기하며, Thread란 프로세스 내에서 실행되는 더 작은 실행 단위를 말한다.</description>
    </item>
    <item>
      <title>Multithreading vs. Multiprocessing vs Multitasking</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/thread-management/multithreading/multithreading-vs-multiprocessing-vs-multitasking/</link>
      <pubDate>Sat, 05 Oct 2024 14:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/thread-management/multithreading/multithreading-vs-multiprocessing-vs-multitasking/</guid>
      <description>Multithreading, Multiprocessing, Multitasking은 컴퓨터 시스템에서 동시성과 병렬성을 구현하는 세 가지 주요 개념이다.</description>
    </item>
    <item>
      <title>Process vs Thread</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/thread-management/thread-vs-process/process-vs-thread/</link>
      <pubDate>Sat, 05 Oct 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/thread-management/thread-vs-process/process-vs-thread/</guid>
      <description>Process란 실행 중인 프로그램의 인스턴스를 이야기하며, Thread란 프로세스 내에서 실행되는 더 작은 실행 단위를 말한다.</description>
    </item>
    <item>
      <title>Paging vs Segmentation</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/memory-management/paging-vs-segmentation/</link>
      <pubDate>Sat, 05 Oct 2024 08:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/memory-management/paging-vs-segmentation/</guid>
      <description>Paging과 Segmentation은 운영체제의 메모리 관리 기법이다.</description>
    </item>
    <item>
      <title>Complementary Concepts</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/complementary-concepts/</link>
      <pubDate>Mon, 12 May 2025 03:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/complementary-concepts/</guid>
      <description></description>
    </item>
    <item>
      <title>코루틴(Coroutine)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/thread-management/threads/coroutine/</link>
      <pubDate>Sat, 05 Oct 2024 06:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/thread-management/threads/coroutine/</guid>
      <description>코루틴은 &amp;#34;협력적인 루틴&amp;#34;이라는 의미로, 여러 작업이 협력하여 실행되는 방식을 말한다. 일반 함수와 달리, 코루틴은 실행 중간에 일시 중단되었다가 나중에 다시 재개될 수 있다.</description>
    </item>
    <item>
      <title>Thread</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/thread-management/threads/threads/</link>
      <pubDate>Fri, 04 Oct 2024 23:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/thread-management/threads/threads/</guid>
      <description>Thread는 프로그램 실행의 기본 단위로, 프로세스 내에서 실행되는 독립적인 작업 흐름을 의미한다.</description>
    </item>
    <item>
      <title>Multithreading</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/thread-management/multithreading/__index/</link>
      <pubDate>Fri, 04 Oct 2024 14:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/thread-management/multithreading/__index/</guid>
      <description>Multithreading은 운영 체제에서 프로그램이 여러 작업을 동시에 수행할 수 있게 해주는 기능이다.  즉, 하나의 프로세스 내에서 여러 스레드가 동시에 실행되는 것을 의미하며, 각 스레드는 프로세스의 자원을 공유하면서도 독립적인 실행 경로를 가진다.</description>
    </item>
    <item>
      <title>Mutex</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/mutex/</link>
      <pubDate>Fri, 04 Oct 2024 11:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/mutex/</guid>
      <description>Mutex(Mutual Exclusion)는 공유 자원에 대한 접근을 동기화하는 객체.</description>
    </item>
    <item>
      <title>조건 변수 (Condition Variable)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/condition-synchronization/condition-variable/</link>
      <pubDate>Fri, 04 Oct 2024 10:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/condition-synchronization/condition-variable/</guid>
      <description>조건 변수(Condition Variables)는 프로세스 동기화에서 중요한 역할을 하는 동기화 기본 요소로, 스레드가 특정 조건이 충족될 때까지 대기하도록 하는 메커니즘을 제공한다.</description>
    </item>
    <item>
      <title>원자적 연산 (Atomic Operation)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/atomic-operation/</link>
      <pubDate>Fri, 04 Oct 2024 10:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/atomic-operation/</guid>
      <description>원자적 연산이란, 더 이상 쪼개질 수 없는 최소 단위의 연산을 의미하는데 중단되거나 간섭받지 않고 완전히 실행되는 연산을 말한다.</description>
    </item>
    <item>
      <title>상호 배제 (Mutual Exclusion)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/__index/</link>
      <pubDate>Fri, 04 Oct 2024 07:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/__index/</guid>
      <description>여러 프로세스나 스레드가 공유 자원에 동시에 접근하는 것을 방지하는 동기화 메커니즘</description>
    </item>
    <item>
      <title>임계 영역 (Critical Section)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/critical-section/__index/</link>
      <pubDate>Fri, 04 Oct 2024 07:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/critical-section/__index/</guid>
      <description>여러 프로세스 또는 스레드가 공유하는 자원에 접근하는 코드 영역</description>
    </item>
    <item>
      <title>교착상태 (Deadlock)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/concurrency-problems/deadlock/__index/</link>
      <pubDate>Thu, 03 Oct 2024 23:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/concurrency-problems/deadlock/__index/</guid>
      <description>둘 이상의 프로세스가 서로가 가진 자원을 기다리며 더 이상 진행할 수 없는 상태</description>
    </item>
    <item>
      <title>Race Condition</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/concurrency-problems/race-condition/__index/</link>
      <pubDate>Thu, 03 Oct 2024 23:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/concurrency-problems/race-condition/__index/</guid>
      <description>여러 프로세스나 스레드가 공유 자원에 동시에 접근할 때, 접근의 타이밍이나 순서에 따라 결과가 달라질 수 있는 상황</description>
    </item>
    <item>
      <title>Monitor</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/monitor/</link>
      <pubDate>Thu, 03 Oct 2024 10:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/monitor/</guid>
      <description>모니터는 공유 데이터와 해당 데이터를 조작하는 연산을 하나의 모듈로 캡슐화하여, 다중 스레드 환경에서의 경쟁 조건(Race Condition)을 방지한다.</description>
    </item>
    <item>
      <title>Semaphore</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/semaphore/</link>
      <pubDate>Thu, 03 Oct 2024 10:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/semaphore/</guid>
      <description>멀티스레딩 환경에서 공유 자원에 대한 접근을 제어하는 동기화 도구</description>
    </item>
    <item>
      <title>데커 알고리즘 (Dekker&#39;s Algorithm)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/dekkers-algorithm/</link>
      <pubDate>Thu, 03 Oct 2024 10:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/dekkers-algorithm/</guid>
      <description>데커 알고리즘(Dekker&amp;#39;s Algorithm)은 두 프로세스 간 상호 배제(Mutual Exclusion)를 보장하기 위해 1965년 네덜란드의 수학자 Theodorus Dekker가 개발한 최초의 소프트웨어 상호 배제(mutual exclusion) 알고리즘이다.</description>
    </item>
    <item>
      <title>램포트의 빵집 알고리즘 (Lamport&#39;s Bakery Algorithm)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/lamports-bakery-algorithm/</link>
      <pubDate>Thu, 03 Oct 2024 10:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/lamports-bakery-algorithm/</guid>
      <description>N개 프로세스의 상호 배제(Mutual Exclusion) 문제를 해결하기 위한 소프트웨어 기반 알고리즘이다</description>
    </item>
    <item>
      <title>피터슨 알고리즘 (Peterson&#39;s Algorithm)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/petersons-algorithm/</link>
      <pubDate>Thu, 03 Oct 2024 10:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/mutual-exclusion/petersons-algorithm/</guid>
      <description>피터슨 알고리즘(Peterson&amp;#39;s Algorithm)은 두 프로세스의 상호 배제(Mutual Exclusion)를 보장하기 위한 소프트웨어 기반 동기화 알고리즘이다.</description>
    </item>
    <item>
      <title>라이브락 (Livelock)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/concurrency-problems/livelock/__index/</link>
      <pubDate>Thu, 03 Oct 2024 09:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/concurrency-problems/livelock/__index/</guid>
      <description>멀티스레딩 환경에서 발생할 수 있는 문제 상황으로, 프로세스나 스레드가 계속 실행 중이지만 실제로는 유용한 작업을 수행하지 못하는 상태</description>
    </item>
    <item>
      <title>Starvation</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/concurrency-problems/starvation/__index/</link>
      <pubDate>Thu, 03 Oct 2024 07:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/concurrency-problems/starvation/__index/</guid>
      <description>운영 체제 및 동시성 프로그래밍에서 중요한 문제로, 특정 프로세스가 필요한 자원을 지속적으로 얻지 못해 실행되지 못하는 상황</description>
    </item>
    <item>
      <title>Process Synchronization</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/process-synchronization/</link>
      <pubDate>Thu, 03 Oct 2024 06:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/synchronization/process-synchronization/</guid>
      <description>여러 프로세스가 공유하는 자원의 일관성을 유지하기 위한 메커니즘</description>
    </item>
    <item>
      <title>프로세스 제어 블록(Process Control Block, PCB)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/processes/process-control-block/</link>
      <pubDate>Wed, 02 Oct 2024 06:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/processes/process-control-block/</guid>
      <description>프로세스 제어 블록(Process Control Block, PCB)은 운영 체제에서 프로세스를 관리하기 위해 사용하는 핵심적인 데이터 구조이다. PCB는 각 프로세스에 대한 중요한 정보를 저장하고 관리하며, 운영 체제가 프로세스를 효율적으로 제어하고 실행할 수 있게 한다.</description>
    </item>
    <item>
      <title>프로세스 간 통신 (Inter-Process Communication, IPC)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/ipc/__index/</link>
      <pubDate>Wed, 02 Oct 2024 06:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/ipc/__index/</guid>
      <description>서로 독립적으로 실행되는 프로세스들이 데이터를 교환하고 상호작용하기 위한 메커니즘</description>
    </item>
    <item>
      <title>Context Switching</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/processes/context-switching/</link>
      <pubDate>Wed, 02 Oct 2024 01:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/processes/context-switching/</guid>
      <description>Context Switching은 운영 체제에서 매우 중요한 개념으로, 여러 프로세스나 스레드가 단일 CPU 자원을 공유하여 효율적으로 실행될 수 있게 하는 메커니즘으로, CPU가 현재 실행 중인 프로세스나 스레드의 상태를 저장하고, 다른 프로세스나 스레드의 상태를 불러와 실행을 재개하는 과정을 말한다.  이를 통해 여러 작업이 동시에 실행되는 것처럼 보이게 된다.</description>
    </item>
    <item>
      <title>Memory Management</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/memory-management/</link>
      <pubDate>Tue, 01 Oct 2024 17:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/memory-management/</guid>
      <description>메모리 관리는 운영체제가 컴퓨터의 주 메모리 (RAM) 를 효율적으로 할당, 추적, 해제하는 과정이다. 이를 통해 여러 프로세스가 동시에 실행될 수 있도록 하며, 페이징, 세그먼테이션, 가상 메모리와 같은 기법을 사용하여 물리적 메모리 제약을 극복한다. 효과적인 메모리 관리는 시스템 성능, 안정성, 보안을 향상시키며 현대 컴퓨팅의 기반이 된다.</description>
    </item>
    <item>
      <title>세그먼테이션 (Segmentation)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/memory-management/segmentation/</link>
      <pubDate>Tue, 01 Oct 2024 13:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/memory-management/segmentation/</guid>
      <description>세그먼테이션(Segmentation)은 운영체제의 메모리 관리 기법 중 하나로, 프로세스를 논리적 단위인 세그먼트로 나누어 관리하는 방식이다.</description>
    </item>
    <item>
      <title>페이징 (Paging)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/memory-management/paging/</link>
      <pubDate>Tue, 01 Oct 2024 13:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/memory-management/paging/</guid>
      <description>페이징(Paging)은 운영체제의 메모리 관리 기법 중 하나로, 프로세스를 고정 크기의 페이지로 나누고 물리적 메모리를 같은 크기의 프레임으로 나누어 관리하는 방식이다.</description>
    </item>
  </channel>
</rss>
