<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Locking-Protocols on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/locking-protocols/</link>
    <description>Recent content in Locking-Protocols on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.150.1</generator>
    <language>en</language>
    <lastBuildDate>Mon, 22 Sep 2025 04:42:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/locking-protocols/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Locking Protocols</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/locking-protocols/</link>
      <pubDate>Mon, 22 Sep 2025 04:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/locking-protocols/</guid>
      <description>락 프로토콜은 트랜잭션의 동시 접근을 제어해 일관성과 직렬성을 보장하는 규칙 집합이다. 대표적으로 Two-Phase Locking(공유·배타·업데이트·의도 락)과 범위 락이 있으며, MVCC·낙관적 기법과의 혼용으로 성능·무결성 간 트레이드오프를 관리한다.</description>
    </item>
  </channel>
</rss>
