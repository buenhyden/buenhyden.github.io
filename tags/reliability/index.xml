<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Reliability on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/reliability/</link>
    <description>Recent content in Reliability on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Thu, 15 May 2025 02:35:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/reliability/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ACID Properties</title>
      <link>https://buenhyden.github.io/posts/system-design/database-systems/transaction/acid-properties/</link>
      <pubDate>Thu, 15 May 2025 02:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/database-systems/transaction/acid-properties/</guid>
      <description>ACID는 데이터베이스 트랜잭션이 전부 수행 또는 전부 취소(원자성), 일관된 규칙 준수(일관성), 동시 실행 간 간섭 방지(격리성), **결과 영구 저장(지속성)**을 보장하는 원칙이다. 이를 통해 장애나 동시성 경쟁 상황에서도 데이터 무결성과 신뢰성을 유지하며, 현대 DB·분산 환경 설계의 핵심 기반이 된다.</description>
    </item>
    <item>
      <title>Bulkhead</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-isolation/bulkhead-pattern/</link>
      <pubDate>Sun, 17 Nov 2024 12:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-isolation/bulkhead-pattern/</guid>
      <description>Bulkhead 패턴은 마이크로서비스 아키텍처(MSA)에서 시스템의 복원력과 장애 격리를 향상시키기 위해 사용되는 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Fail Fast</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-isolation/fail-fast-pattern/fail-fast/</link>
      <pubDate>Sun, 17 Nov 2024 12:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-isolation/fail-fast-pattern/fail-fast/</guid>
      <description>Fail Fast는 시스템에서 문제가 발생했을 때 즉시 실패를 보고하고 정상 작동을 중지하는 설계 원칙</description>
    </item>
    <item>
      <title>Circuit Breaker</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-recovery/retry-patterns/circuit-breaker/</link>
      <pubDate>Sun, 17 Nov 2024 10:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-recovery/retry-patterns/circuit-breaker/</guid>
      <description>서킷 브레이커 패턴(Circuit Breaker Pattern)은 마이크로서비스 아키텍처에서 시스템의 안정성과 복원력을 향상시키기 위해 사용되는 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Timeout Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-isolation/timeout-pattern/</link>
      <pubDate>Sun, 17 Nov 2024 02:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-isolation/timeout-pattern/</guid>
      <description>서비스가 다른 서비스로부터의 응답을 무한정 기다리지 않도록 하여 시스템의 안정성과 응답성을 향상시킨다.</description>
    </item>
    <item>
      <title>Retry Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-recovery/retry-patterns/</link>
      <pubDate>Sun, 17 Nov 2024 02:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-recovery/retry-patterns/</guid>
      <description>Retry Pattern은 일시적인 오류가 발생했을 때 동일한 작업을 자동으로 재시도하여 시스템의 안정성과 신뢰성을 향상시키는 패턴이다.</description>
    </item>
  </channel>
</rss>
