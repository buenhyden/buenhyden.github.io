<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Specialized-Testing on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/specialized-testing/</link>
    <description>Recent content in Specialized-Testing on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.146.4</generator>
    <language>en</language>
    <lastBuildDate>Sun, 03 Nov 2024 14:28:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/specialized-testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>회귀 테스트 (Regression Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/regression-test/</link>
      <pubDate>Sun, 03 Nov 2024 14:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/regression-test/</guid>
      <description>회귀 테스트는 소프트웨어의 변경이나 수정 후에 기존 기능이 여전히 올바르게 작동하는지 확인하는 테스트이다.</description>
    </item>
    <item>
      <title>사용성 테스트 (Usability Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/usability-test/</link>
      <pubDate>Sun, 03 Nov 2024 14:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/usability-test/</guid>
      <description>사용성 테스트는 제품이나 서비스를 실제 사용자가 사용해보면서 그 과정을 관찰하고 분석하는 테스트 방법이다.</description>
    </item>
    <item>
      <title>부하 테스트(Load Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/load-testing/</link>
      <pubDate>Sun, 03 Nov 2024 14:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/load-testing/</guid>
      <description>부하 테스트는 소프트웨어 시스템이 예상되는 사용자 부하 하에서 어떻게 동작하는지 확인하는 성능 테스트의 한 유형이다.</description>
    </item>
    <item>
      <title>스트레스 테스트 (Stress Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/stress-testing/</link>
      <pubDate>Sun, 03 Nov 2024 14:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/stress-testing/</guid>
      <description>스트레스 테스트는 소프트웨어 시스템을 극한의 조건에서 테스트하여 그 한계를 파악하는 성능 테스트의 한 유형이다.</description>
    </item>
    <item>
      <title>보안 테스트 (Security Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/security-test/security-test/</link>
      <pubDate>Sun, 03 Nov 2024 05:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/security-test/security-test/</guid>
      <description>소프트웨어 시스템의 보안성을 평가하기 위한 일련의 활동</description>
    </item>
    <item>
      <title>전문화된 테스팅 (Specialized Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/specialized-testing/</link>
      <pubDate>Sun, 03 Nov 2024 04:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/specialized-testing/</guid>
      <description>Specialized Testing은 소프트웨어 테스팅의 한 분야로, 특정 영역이나 기능에 초점을 맞춘 심층적인 테스트 방식이다.</description>
    </item>
    <item>
      <title>호환성 테스트 (Compatibility Test)</title>
      <link>https://buenhyden.github.io/posts/qa/manual-testing/compatibility/compatibility-test/</link>
      <pubDate>Sun, 03 Nov 2024 03:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/manual-testing/compatibility/compatibility-test/</guid>
      <description>호환성 테스트는 소프트웨어가 다양한 하드웨어, 운영체제, 네트워크 환경 등에서 올바르게 작동하는지 확인하기 위해 수행되는 테스트이다.</description>
    </item>
    <item>
      <title>용량 테스트 (Volume Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/volume-test/</link>
      <pubDate>Sun, 03 Nov 2024 02:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/volume-test/</guid>
      <description>용량 테스트는 소프트웨어 시스템이 대량의 데이터를 처리할 때 어떻게 동작하는지 확인하는 성능 테스트의 한 유형이다.</description>
    </item>
    <item>
      <title>확장성 테스트 (Scalability Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/scalability-test/</link>
      <pubDate>Sun, 03 Nov 2024 02:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/scalability-test/</guid>
      <description>확장성 테스트는 소프트웨어 시스템이 증가하는 부하나 규모에 얼마나 잘 대응할 수 있는지를 평가하는 성능 테스트의 한 유형이다</description>
    </item>
    <item>
      <title>성능 테스트 (Performance Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/</link>
      <pubDate>Sun, 03 Nov 2024 02:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/</guid>
      <description>성능 테스트란 서비스 및 서비스 시스템의 성능을 확인하기 위해 실제 사용 환경과 비슷한 환경에서 테스트를 진행하는 것을 말한다</description>
    </item>
    <item>
      <title>스모크 테스트 (Smoke Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/smoke-test/</link>
      <pubDate>Sun, 03 Nov 2024 02:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/smoke-test/</guid>
      <description>스모크 테스트는 소프트웨어의 가장 중요한 기능이 제대로 작동하는지 빠르게 확인하는 예비 테스트이다</description>
    </item>
    <item>
      <title>기능 테스트 (Functional Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/</link>
      <pubDate>Sun, 03 Nov 2024 02:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/</guid>
      <description>기능 테스트는 소프트웨어가 사용자의 요구사항을 충족하는지 확인하는 테스트 방법이다. 이는 시스템이 &amp;#34;무엇을 하는지&amp;#34;에 초점을 맞추며, 사용자 관점에서 소프트웨어의 기능을 검증한다.</description>
    </item>
    <item>
      <title>스파이크 테스트(Spike Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/spike-test/</link>
      <pubDate>Sun, 03 Nov 2024 01:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/spike-test/</guid>
      <description>스파이크 테스트는 시스템에 갑작스럽고 극단적인 부하를 주어 시스템의 반응을 측정하는 성능 테스트의 한 유형이다.</description>
    </item>
    <item>
      <title>지속성 테스트(Endurance Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/endurance-test/</link>
      <pubDate>Sun, 03 Nov 2024 01:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/endurance-test/</guid>
      <description>지속성 테스트는 소프트웨어 시스템이 장기간 동안 지속적인 부하 상태에서 어떻게 동작하는지 확인하는 성능 테스트의 한 유형이다</description>
    </item>
  </channel>
</rss>
