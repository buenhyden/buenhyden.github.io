<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>WebSocket-API on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/websocket-api/</link>
    <description>Recent content in WebSocket-API on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.8</generator>
    <language>en</language>
    <lastBuildDate>Sun, 09 Mar 2025 02:31:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/websocket-api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web Socket vs. Long Polling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/application-development/api-design-and-implementation/api-styles/event-based-style/websocket/web-socket-vs-long-polling/</link>
      <pubDate>Sun, 09 Mar 2025 02:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/application-development/api-design-and-implementation/api-styles/event-based-style/websocket/web-socket-vs-long-polling/</guid>
      <description>WebSocket은 TCP 연결을 통해 전이중(full-duplex) 통신 채널을 제공하는 프로토콜이다. Long Polling은 기존 HTTP 요청-응답 모델을 확장한 기법으로, 클라이언트가 서버에 요청을 보내면 서버는 새로운 정보가 있을 때까지 응답을 보류한다.</description>
    </item>
    <item>
      <title>WebSocket</title>
      <link>https://buenhyden.github.io/posts/software-engineering/application-development/api-design-and-implementation/api-styles/event-based-style/websocket/</link>
      <pubDate>Sat, 08 Mar 2025 16:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/application-development/api-design-and-implementation/api-styles/event-based-style/websocket/</guid>
      <description>웹 소켓은 클라이언트와 서버 간에 지속적인 양방향 통신 채널을 제공하는 프로토콜이다. 전통적인 HTTP 통신과 달리, 웹 소켓은 한 번 연결이 수립되면 지속적으로 유지되어 실시간으로 데이터를 주고받을 수 있다.</description>
    </item>
    <item>
      <title>Websocket API vs. Websocket</title>
      <link>https://buenhyden.github.io/posts/software-engineering/application-development/api-design-and-implementation/api-styles/event-based-style/websocket/websocket-api-vs-websocket/</link>
      <pubDate>Fri, 28 Feb 2025 03:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/application-development/api-design-and-implementation/api-styles/event-based-style/websocket/websocket-api-vs-websocket/</guid>
      <description>WebSocket은 통신 프로토콜 자체를 의미하며, 인터넷 상에서 메시지를 주고받는 방식을 정의하며 WebSocket API는 개발자가 웹 애플리케이션에서 WebSocket 프로토콜을 사용할 수 있게 해주는 프로그래밍 인터페이스이다.</description>
    </item>
  </channel>
</rss>
