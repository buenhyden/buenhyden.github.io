<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Cache</title><link>https://buenhyden.github.io/tags/cache/</link><description>Recent content in Cache on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 19 Oct 2024 13:25:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/cache/index.xml" rel="self" type="application/rss+xml"/><item><title>캐시 (Cache)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache/</link><pubDate>Sat, 19 Oct 2024 13:25:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache/</guid><description>
&lt;h2>캐시 (Cache)&lt;/h2>&lt;p>캐시(Cache)는 컴퓨터 과학에서 데이터나 값을 미리 복사해 놓는 임시 저장소를 의미한다.&lt;br>
데이터 접근 속도를 높이고 시스템 성능을 향상시킬 수 있다.&lt;br>
자주 사용되는 데이터는 빠르게 접근할 수 있는 위치에 복사해두는데 이 위치를 캐시(Cache)라고 말한다.&lt;/p>
&lt;h3>캐시의 특징&lt;/h3>&lt;ol>
&lt;li>속도: 주 메모리나 디스크보다 훨씬 빠르다.&lt;/li>
&lt;li>용량: 일반적으로 주 메모리보다 작다.&lt;/li>
&lt;li>비용: 고속이기 때문에 상대적으로 비싸다.&lt;/li>
&lt;/ol>
&lt;h3>캐시의 장점&lt;/h3>&lt;ol>
&lt;li>빠른 데이터 접근: 자주 사용되는 데이터에 빠르게 접근할 수 있다.&lt;/li>
&lt;li>시스템 성능 향상: 전체적인 시스템 응답 시간을 줄인다.&lt;/li>
&lt;li>리소스 절약: 반복적인 데이터 요청을 줄여 서버 부하를 감소시킨다.&lt;/li>
&lt;/ol>
&lt;h3>캐시 사용 시 주의점&lt;/h3>&lt;ol>
&lt;li>일관성 유지: 원본 데이터가 변경될 때 캐시도 업데이트해야 한다.&lt;/li>
&lt;li>캐시 크기 관리: 너무 크면 메모리 낭비, 너무 작으면 효율이 떨어진다.&lt;/li>
&lt;li>캐시 교체 정책: 캐시가 가득 찼을 때 어떤 데이터를 제거할지 결정해야 한다.&lt;/li>
&lt;/ol>
&lt;h3>캐시의 동작 과정&lt;/h3>&lt;ol>
&lt;li>데이터 요청: 프로그램이 데이터를 요청한다.&lt;/li>
&lt;li>캐시 확인: 시스템은 먼저 캐시에서 데이터를 찾는다.&lt;/li>
&lt;li>캐시 히트(Cache Hit): 데이터가 캐시에 있으면 즉시 반환한다.&lt;/li>
&lt;li>캐시 미스(Cache Miss): 데이터가 캐시에 없으면 주 메모리나 디스크에서 가져와 캐시에 저장한 후 반환한다.&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 캐시의 기본 작동 원리를 보여주는 예제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SimpleCache&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cache&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1"># 데이터를 저장할 공간&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 1. 캐시에서 먼저 찾아봅니다&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;캐시에서 데이터를 찾았습니다!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 2. 캐시에 없다면 원본 소스에서 가져옵니다&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;캐시에 없어서 원본에서 가져옵니다…&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fetch_from_source&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 3. 다음 사용을 위해 캐시에 저장합니다&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cache&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">data&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>캐시의 종류&lt;/h3>&lt;ol>
&lt;li>
&lt;p>CPU 캐시: CPU와 주 메모리 사이에 위치한 고속의 소용량 메모리&lt;br>
역할:&lt;/p>
&lt;ul>
&lt;li>자주 사용되는 데이터와 명령어를 저장&lt;/li>
&lt;li>CPU와 주 메모리 간의 속도 차이를 완화&lt;br>
특징:&lt;/li>
&lt;li>L1, L2, L3 등 여러 레벨로 구성&lt;/li>
&lt;li>L1이 가장 빠르고 용량이 작으며, 레벨이 올라갈수록 용량은 증가하고 속도는 감소&lt;/li>
&lt;li>CPU에 직접 통합되어 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>메모리 캐시: 주 메모리(RAM)의 일부를 캐시로 사용하는 기술&lt;br>
역할:&lt;/p>
&lt;ul>
&lt;li>자주 접근하는 데이터를 임시 저장&lt;/li>
&lt;li>메모리 접근 시간 단축&lt;br>
특징:&lt;/li>
&lt;li>운영체제에 의해 관리됨&lt;/li>
&lt;li>페이지 캐시 등의 형태로 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>디스크 캐시: 하드 디스크의 데이터를 임시로 저장하는 메모리 영역&lt;br>
역할:&lt;/p>
&lt;ul>
&lt;li>디스크 접근 횟수를 줄여 I/O 성능 향상&lt;/li>
&lt;li>읽기/쓰기 작업 속도 개선&lt;br>
특징:&lt;/li>
&lt;li>하드 디스크 컨트롤러에 내장되거나 운영체제에 의해 관리됨&lt;/li>
&lt;li>읽기 캐시와 쓰기 캐시로 구분될 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>웹 캐시: 웹 페이지, 이미지 등의 웹 콘텐츠를 임시 저장하는 기술&lt;br>
역할:&lt;/p>
&lt;ul>
&lt;li>웹 페이지 로딩 속도 향상&lt;/li>
&lt;li>서버 부하 및 네트워크 트래픽 감소&lt;br>
특징:&lt;/li>
&lt;li>브라우저 캐시, 프록시 캐시, CDN 등 다양한 형태로 구현&lt;/li>
&lt;li>HTTP 헤더를 통해 캐시 정책 제어 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>데이터베이스 캐시: 데이터베이스 쿼리 결과를 임시 저장하는 메모리 영역&lt;br>
역할:&lt;/p>
&lt;ul>
&lt;li>반복적인 쿼리 실행 시간 단축&lt;/li>
&lt;li>데이터베이스 서버 부하 감소&lt;br>
특징:&lt;/li>
&lt;li>인메모리 데이터베이스나 별도의 캐시 서버로 구현 가능&lt;/li>
&lt;li>쿼리 결과 또는 자주 사용되는 데이터 세트를 저장&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>애플리케이션 캐시: 애플리케이션 레벨에서 구현되는 캐시 메커니즘&lt;br>
역할:&lt;/p>
&lt;ul>
&lt;li>애플리케이션 성능 향상&lt;/li>
&lt;li>반복적인 연산이나 데이터 접근 최소화&lt;br>
특징:&lt;/li>
&lt;li>개발자가 직접 구현하거나 프레임워크에서 제공하는 기능 활용&lt;/li>
&lt;li>메모이제이션, 객체 캐싱 등 다양한 기법 적용 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>이러한 다양한 캐시 유형들은 각각의 특성에 맞게 시스템의 여러 계층에서 활용되어 전반적인 성능 향상에 기여한다.&lt;/p>
&lt;h3>캐시의 지역성&lt;/h3>&lt;p>캐시의 지역성(Locality)은 프로그램이 메모리에 접근하는 패턴에 관한 중요한 개념이다.&lt;br>
이는 캐시의 효율성을 극대화하기 위해 사용되는 원리로, 크게 두 가지 유형으로 나눌 수 있다:&lt;/p>
&lt;ol>
&lt;li>시간 지역성 (Temporal Locality)&lt;br>
시간 지역성은 최근에 참조된 데이터가 가까운 미래에 다시 참조될 가능성이 높다는 원리이다.
&lt;ul>
&lt;li>예시: 반복문에서 같은 변수를 여러 번 사용하는 경우&lt;/li>
&lt;li>장점: 자주 사용되는 데이터를 캐시에 유지함으로써 접근 속도를 향상시킨다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>공간 지역성 (Spatial Locality)&lt;br>
공간 지역성은 최근 참조된 데이터의 주변 데이터도 곧 참조될 가능성이 높다는 원리이다.
&lt;ul>
&lt;li>예시: 배열의 요소를 순차적으로 접근하는 경우&lt;/li>
&lt;li>장점: 연속된 메모리 주소의 데이터를 미리 캐시에 로드하여 성능을 개선한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>캐시의 지역성 개념은 다른 메모리 구조와 비교했을 때 다음과 같은 주요 차이점이 있다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>데이터 접근 패턴:&lt;br>
캐시는 시간적, 공간적 지역성을 활용하여 자주 사용되는 데이터를 빠르게 접근할 수 있도록 하지만, 다른 메모리 구조는 일반적으로 순차적이거나 무작위적인 접근 패턴을 가진다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>메모리 레이아웃:&lt;br>
캐시는 연속된 메모리 주소의 데이터를 캐시 라인 단위로 저장하여 공간적 지역성을 극대화하며, 다른 메모리 구조는 데이터가 연속적으로 저장되지 않을 수 있어 접근 속도가 상대적으로 느리다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>성능 최적화:&lt;br>
캐시는 지역성을 활용하여 캐시 히트율을 높이고 전체 시스템 성능을 향상시며, 다른 메모리 구조는 지역성 개념을 적용하기 어려워 성능 최적화에 제한이 있을 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>데이터 구조 선택:&lt;br>
캐시는 배열과 같이 연속된 메모리를 사용하는 구조가 캐시 지역성을 잘 활용하며, 다른 메모리 구조는 링크드 리스트와 같이 비연속적인 메모리를 사용하는 구조는 캐시 효율성이 떨어질 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>프로그래밍 방식:&lt;br>
캐시: 지역성을 고려한 코드 작성이 성능 향상에 중요하며, 다른 메모리 구조는 지역성에 대한 고려 없이 코드를 작성할 수 있지만, 성능 최적화에 제한이 있을 수 있다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>캐시의 지역성은 다음과 같은 요인으로 중요하게 여겨진다.&lt;/p>
&lt;ol>
&lt;li>캐시 효율성 향상: 지역성은 캐시의 적중률(hit-rate)을 극대화하여 캐시의 효율성을 크게 높인다.&lt;/li>
&lt;li>시스템 성능 개선: 높은 캐시 적중률은 CPU와 주 메모리 간의 속도 차이로 인한 병목 현상을 줄여 전체 시스템 성능을 향상시킨다.&lt;/li>
&lt;li>예측 가능성: 지역성 원리를 통해 CPU가 다음에 필요로 할 데이터를 예측할 수 있어, 효율적인 데이터 pre-fetching이 가능해진다.&lt;/li>
&lt;li>리소스 절약: 시간적, 공간적 지역성을 활용하면 상대적으로 작은 크기의 캐시로도 높은 효율성을 얻을 수 있다.&lt;/li>
&lt;li>프로그램 최적화: 개발자가 지역성 원리를 이해하고 활용하면, 더 효율적인 코드 작성이 가능해진다.&lt;/li>
&lt;/ol>
&lt;p>캐시의 지역성을 고려한 프로그래밍은 성능 최적화에 중요하다.&lt;/p>
&lt;ol>
&lt;li>데이터 구조 설계: 연관된 데이터를 메모리상에서 가깝게 배치한다.&lt;/li>
&lt;li>루프 최적화: 데이터 접근 패턴을 개선하여 캐시 효율성을 높인다.&lt;/li>
&lt;li>함수 호출 최소화: 불필요한 컨텍스트 전환을 줄여 캐시 오염을 방지한다.&lt;br>
캐시의 지역성을 활용함으로써, 제한된 캐시 용량으로도 시스템의 전반적인 성능을 크게 향상시킬 수 있다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3>참고 및 출처&lt;/h3></description></item><item><title>HTTP Cache</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/http-cache/</link><pubDate>Tue, 08 Oct 2024 07:11:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/http-cache/</guid><description>
&lt;h2>HTTP Cache&lt;/h2>&lt;ul>
&lt;li>웹 브라우저나 서버에서 데이터를 임시 저장하는 기술&lt;/li>
&lt;li>동일한 리소스 요청 시 재사용하여 성능 향상&lt;/li>
&lt;li>서버 부하 감소와 사용자 경험 개선에 도움&lt;/li>
&lt;li>브라우저나 서버, CDN 등 다양한 위치에서 이루어질 수 있다.&lt;/li>
&lt;/ul>
&lt;h4>목적&lt;/h4>&lt;ol>
&lt;li>페이지 로드 시간 단축&lt;/li>
&lt;li>대역폭 사용량 감소&lt;/li>
&lt;li>서버 부하 감소&lt;/li>
&lt;/ol>
&lt;h4>&lt;strong>종류&lt;/strong>&lt;/h4>&lt;ol>
&lt;li>
&lt;p>브라우저 캐시 (Private Cache)&lt;/p>
&lt;ul>
&lt;li>개인 브라우저에 저장&lt;/li>
&lt;li>사용자별로 독립적&lt;/li>
&lt;li>예: 크롬, 파이어폭스의 캐시&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>공유 캐시 (Shared Cache)&lt;/p>
&lt;ul>
&lt;li>여러 사용자가 공유&lt;/li>
&lt;li>중간 서버에 저장&lt;/li>
&lt;li>예: CDN, 프록시 서버&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>캐시 제어 헤더&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>헤더&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Cache-Control&lt;/td>
&lt;td>캐시 동작 지정&lt;/td>
&lt;td>&lt;code>Cache-Control: max-age=3600&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Expires&lt;/td>
&lt;td>만료 일시 지정&lt;/td>
&lt;td>&lt;code>Expires: Wed, 21 Oct 2024 07:28:00 GMT&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ETag&lt;/td>
&lt;td>리소스 버전 식별자&lt;/td>
&lt;td>&lt;code>ETag: &amp;quot;33a64df551425fcc55e4&amp;quot;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Last-Modified&lt;/td>
&lt;td>마지막 수정 시간&lt;/td>
&lt;td>&lt;code>Last-Modified: Wed, 21 Oct 2024 07:28:00 GMT&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>Cache-Control 주요 지시어&lt;/h4>&lt;ol>
&lt;li>
&lt;p>캐시 저장 관련&lt;/p>
&lt;ul>
&lt;li>public: 공유 캐시에 저장 가능&lt;/li>
&lt;li>private: 브라우저만 저장 가능&lt;/li>
&lt;li>no-store: 캐시 저장 안 함&lt;/li>
&lt;li>no-cache: 저장은 하되 재사용 전 검증 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>유효 기간 관련&lt;/p>
&lt;ul>
&lt;li>max-age=초단위: 캐시 유효 시간&lt;/li>
&lt;li>s-maxage=초단위: 공유 캐시 유효 시간&lt;/li>
&lt;li>must-revalidate: 만료 시 반드시 재검증&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>캐시 동작 방식&lt;/h4>&lt;ol>
&lt;li>첫 번째 요청
&lt;ol>
&lt;li>`클라이언트가 리소스 요청&lt;/li>
&lt;li>서버가 리소스와 캐시 정보 응답&lt;/li>
&lt;li>브라우저가 응답을 캐시에 저장&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>이후 요청
&lt;ol>
&lt;li>캐시 유효성 확인&lt;/li>
&lt;li>유효하면 캐시에서 즉시 제공&lt;/li>
&lt;li>만료되었으면 서버에 재검증 요청&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h4>캐시 검증 방식&lt;/h4>&lt;ul>
&lt;li>
&lt;p>ETag 방식&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">클라이언트: If-None-Match: &amp;#34;이전_ETag값&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">서버 응답:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 304 Not Modified (변경 없음)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 200 OK (새로운 컨텐츠)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Last-Modified 방식&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">클라이언트: If-Modified-Since: 이전_수정일시
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">서버 응답:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 304 Not Modified (변경 없음)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- 200 OK (새로운 컨텐츠)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ul>
&lt;h4>캐시 시나리오 예시&lt;/h4>&lt;ul>
&lt;li>정적 파일 캐싱
&lt;ul>
&lt;li>이미지, CSS, JavaScript 파일&lt;/li>
&lt;li>장기간 캐시 적용&lt;/li>
&lt;li>버전 관리로 업데이트&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>API 응답 캐싱
&lt;ul>
&lt;li>자주 변경되지 않는 데이터&lt;/li>
&lt;li>짧은 시간 캐시 적용&lt;/li>
&lt;li>적절한 검증 방식 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4>캐시 전략&lt;/h4>&lt;ul>
&lt;li>기본 전략
&lt;ul>
&lt;li>자주 변경되지 않는 리소스: 긴 캐시 기간&lt;/li>
&lt;li>자주 변경되는 리소스: 짧은 캐시 기간&lt;/li>
&lt;li>개인화된 콘텐츠: private 캐시&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>최적화 전략
&lt;ul>
&lt;li>파일명에 버전 포함&lt;/li>
&lt;li>URL 매개변수 활용&lt;/li>
&lt;li>적절한 캐시 계층 활용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4>자주 발생하는 문제와 해결&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>문제&lt;/th>
&lt;th>원인&lt;/th>
&lt;th>해결 방법&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>캐시가 안됨&lt;/td>
&lt;td>잘못된 캐시 설정&lt;/td>
&lt;td>Cache-Control 헤더 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>오래된 컨텐츠 제공&lt;/td>
&lt;td>캐시 만료 설정 부적절&lt;/td>
&lt;td>적절한 max-age 설정&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>용량 문제&lt;/td>
&lt;td>과도한 캐시 저장&lt;/td>
&lt;td>캐시 정책 최적화&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>캐시 디버깅 방법&lt;/h4>&lt;ul>
&lt;li>브라우저 도구 활용
&lt;ul>
&lt;li>개발자 도구 Network 탭&lt;/li>
&lt;li>캐시 동작 확인&lt;/li>
&lt;li>헤더 정보 분석&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>캐시 테스트
&lt;ul>
&lt;li>캐시 비우기&lt;/li>
&lt;li>강제 새로고침&lt;/li>
&lt;li>헤더 확인&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4>HTTP 캐싱을 구현할 때 주의해야 할 주요 사항&lt;/h4>&lt;ul>
&lt;li>과도한 캐싱 주의:&lt;br>
성능 향상을 위해 과도하게 공격적인 캐싱을 적용하면 오래된 데이터를 제공하거나 민감한 정보를 노출할 수 있습니다. max-age 지시문을 신중하게 사용하고, 중요한 리소스에는 must-revalidate를 적용해야 합니다.&lt;/li>
&lt;li>일관된 캐시 정책 유지:&lt;br>
애플리케이션 전체에 걸쳐 일관된 캐시 정책을 적용해야 합니다. 미들웨어를 사용하여 전역 캐시 정책을 설정하고, 정기적으로 캐시 설정을 감사하는 것이 좋습니다.&lt;/li>
&lt;li>동적 콘텐츠와 정적 콘텐츠 구분:&lt;br>
정적 리소스에는 공격적인 캐싱 전략을 사용할 수 있지만, 동적 콘텐츠에는 짧은 TTL 값과 no-store 같은 지시문을 사용하여 개인화된 데이터의 관련성을 유지해야 합니다.&lt;/li>
&lt;li>보안 고려:&lt;br>
민감한 정보가 포함된 페이지에는 no-store 지시문을 사용하여 브라우저나 중간 캐시에 저장되지 않도록 해야 합니다.&lt;/li>
&lt;li>캐시 무효화 전략:&lt;br>
콘텐츠가 변경될 때 캐시를 적절히 무효화하는 전략을 구현해야 합니다. ETag와 Last-Modified 헤더를 활용하여 효율적인 재검증을 수행할 수 있습니다.&lt;/li>
&lt;li>CDN과의 통합:&lt;br>
CDN을 사용할 때는 s-maxage 지시문을 활용하여 CDN 특정 캐싱 동작을 제어해야 합니다.&lt;/li>
&lt;li>클라이언트와 서버 측 캐싱 균형:&lt;br>
클라이언트 측(브라우저) 캐싱과 서버 측 캐싱을 적절히 조합하여 최적의 성능을 달성해야 합니다&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>