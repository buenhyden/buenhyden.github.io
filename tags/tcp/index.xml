<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – TCP</title><link>https://buenhyden.github.io/tags/tcp/</link><description>Recent content in TCP on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 02 Oct 2024 04:21:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/tcp/index.xml" rel="self" type="application/rss+xml"/><item><title>OSI 7 Layers and TCPIP 4 Layers</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers-and-tcpip-4-layers/</link><pubDate>Fri, 27 Sep 2024 02:11:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers-and-tcpip-4-layers/</guid><description>
&lt;h2>OSI 7Layers와 TCPIP 4계층 비교&lt;span class="hx-absolute -hx-mt-20" id="osi-7layers와-tcpip-4계층-비교">&lt;/span>
&lt;a href="#osi-7layers%ec%99%80-tcpip-4%ea%b3%84%ec%b8%b5-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>비교 항목&lt;/th>
&lt;th>OSI 7계층 모델&lt;/th>
&lt;th>TCP/IP 모델&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>계층 수&lt;/td>
&lt;td>7계층&lt;/td>
&lt;td>4계층 (또는 5계층)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>계층 구성&lt;/td>
&lt;td>응용, 표현, 세션, 전송, 네트워크, 데이터 링크, 물리&lt;/td>
&lt;td>응용, 전송, 인터넷, 네트워크 접근 (또는 응용, 전송, 네트워크, 데이터 링크, 물리)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>개발 주체&lt;/td>
&lt;td>ISO (국제표준화기구)&lt;/td>
&lt;td>미국 국방부 DARPA&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>개발 시기&lt;/td>
&lt;td>1984년&lt;/td>
&lt;td>1970년대 초반&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>개발 접근 방식&lt;/td>
&lt;td>이론적, 개념적 접근&lt;/td>
&lt;td>실용적, 프로토콜 중심 접근&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 사용 목적&lt;/td>
&lt;td>네트워크 통신의 표준 참조 모델&lt;/td>
&lt;td>실제 인터넷 통신의 기반&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>유연성&lt;/td>
&lt;td>각 계층이 명확히 분리되어 유연성 높음&lt;/td>
&lt;td>계층 간 경계가 덜 명확하나 실용적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>복잡성&lt;/td>
&lt;td>상대적으로 복잡&lt;/td>
&lt;td>단순하고 구현하기 쉬움&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로토콜 정의&lt;/td>
&lt;td>프로토콜을 명확히 정의하지 않음&lt;/td>
&lt;td>각 계층에 대한 프로토콜 명확히 정의&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>보안 고려&lt;/td>
&lt;td>보안을 별도의 계층으로 고려하지 않음&lt;/td>
&lt;td>IP 계층에서 IPsec 등 보안 기능 포함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>계층 간 통신&lt;/td>
&lt;td>인접한 계층 간에만 통신&lt;/td>
&lt;td>인접하지 않은 계층 간 통신 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>상용화&lt;/td>
&lt;td>실제 구현보다는 개념적 모델로 사용&lt;/td>
&lt;td>인터넷의 기반이 되어 널리 사용됨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>문제 해결 접근&lt;/td>
&lt;td>각 계층별 독립적 문제 해결 용이&lt;/td>
&lt;td>통합적 접근이 필요할 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 단위&lt;/td>
&lt;td>각 계층마다 다른 데이터 단위 사용 (PDU, SDU 등)&lt;/td>
&lt;td>주로 세그먼트, 패킷, 프레임 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>네트워크 주소 지정&lt;/td>
&lt;td>데이터 링크 계층(MAC)과 네트워크 계층(IP)에서 처리&lt;/td>
&lt;td>인터넷 계층(IP)에서 주로 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>세션 관리&lt;/td>
&lt;td>세션 계층에서 별도로 관리&lt;/td>
&lt;td>응용 계층에서 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 표현&lt;/td>
&lt;td>표현 계층에서 별도로 처리&lt;/td>
&lt;td>응용 계층에서 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>표준화&lt;/td>
&lt;td>국제 표준으로 널리 인정됨&lt;/td>
&lt;td>사실상의 표준(de facto standard)으로 사용됨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>새로운 프로토콜 추가가 상대적으로 어려움&lt;/td>
&lt;td>새로운 프로토콜 추가가 용이함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>신뢰성&lt;/td>
&lt;td>각 계층에서 신뢰성 보장 메커니즘 제공&lt;/td>
&lt;td>주로 전송 계층(TCP)에서 신뢰성 보장&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>연결 지향성&lt;/td>
&lt;td>연결 지향 및 비연결 지향 서비스 모두 지원&lt;/td>
&lt;td>TCP(연결 지향), UDP(비연결 지향) 프로토콜 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>캡슐화 과정&lt;/td>
&lt;td>각 계층마다 헤더 추가 (7단계)&lt;/td>
&lt;td>주요 계층에서만 헤더 추가 (4단계)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>시장 수용도&lt;/td>
&lt;td>이론적 모델로 주로 사용&lt;/td>
&lt;td>실제 네트워크 구현에 널리 사용됨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>계층 간 의존성&lt;/td>
&lt;td>각 계층이 독립적으로 동작&lt;/td>
&lt;td>계층 간 의존성이 상대적으로 높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>트러블슈팅&lt;/td>
&lt;td>문제 발생 시 특정 계층 식별 용이&lt;/td>
&lt;td>문제 발생 시 여러 계층을 동시에 고려해야 할 수 있음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Network Layer - TCP/IP 4 Layers</title><link>https://buenhyden.github.io/posts/networking-and-communications/tcp-ip-4-layers/</link><pubDate>Thu, 26 Sep 2024 02:03:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/tcp-ip-4-layers/</guid><description>
&lt;h2>TCP/IP 4 계층&lt;span class="hx-absolute -hx-mt-20" id="tcpip-4-계층">&lt;/span>
&lt;a href="#tcpip-4-%ea%b3%84%ec%b8%b5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>인터넷과 네트워크 통신을 위한 프로토콜 체계로 데이터를 네트워크를 통해 안정적으로 전송하고 통신하기 위한 구조.&lt;br>
&lt;img src="tcp-ip-model-vs-osi.png" alt="A side-by-side comparison illustration of the TCP/IP mod_el structure and OSI model structure_." loading="lazy" />&lt;br>
_Source: &lt;a href="https://cheapsslsecurity.com/blog/what-is-the-tcp-model-an-exploration-of-tcp-ip-layers/" target="_blank" rel="noopener">https://cheapsslsecurity.com/blog/what-is-the-tcp-model-an-exploration-of-tcp-ip-layers/&lt;/a> _&lt;/p>
&lt;h3>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>유연성과 확장성
&lt;ul>
&lt;li>각 계층이 독립적으로 발전 가능&lt;/li>
&lt;li>새로운 프로토콜 추가 용이&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>표준화
&lt;ul>
&lt;li>계층 간 표준 인터페이스 제공&lt;/li>
&lt;li>다양한 시스템 간 호환성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>문제 해결 용이
&lt;ul>
&lt;li>계층별 독립적 문제 해결&lt;/li>
&lt;li>효율적인 유지 보수&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>모듈화
&lt;ul>
&lt;li>복잡한 네트워크 기능을 단순화&lt;/li>
&lt;li>개발과 구현이 용이&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3>TCP/IP 4계층의 각 계층의 역할과 주요 프로토콜&lt;span class="hx-absolute -hx-mt-20" id="tcpip-4계층의-각-계층의-역할과-주요-프로토콜">&lt;/span>
&lt;a href="#tcpip-4%ea%b3%84%ec%b8%b5%ec%9d%98-%ea%b0%81-%ea%b3%84%ec%b8%b5%ec%9d%98-%ec%97%ad%ed%95%a0%ea%b3%bc-%ec%a3%bc%ec%9a%94-%ed%94%84%eb%a1%9c%ed%86%a0%ec%bd%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>계층&lt;/th>
&lt;th>주요 역할&lt;/th>
&lt;th>주요 프로토콜&lt;/th>
&lt;th>데이터 단위&lt;/th>
&lt;th>주요 장비/기술&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>응용 계층 (Application Layer)&lt;/td>
&lt;td>• 사용자와 직접 상호작용하는 인터페이스 제공&lt;br>• 데이터 형식 정의 및 응용 프로그램 간 통신 담당&lt;br>• 네트워크 서비스 제공&lt;/td>
&lt;td>• HTTP/HTTPS (웹)&lt;br>• FTP (파일 전송)&lt;br>• SMTP/POP3/IMAP (이메일)&lt;br>• DNS (도메인 네임)&lt;br>• SSH (보안 셸)&lt;br>• Telnet (원격 접속)&lt;/td>
&lt;td>메시지 (Message)&lt;/td>
&lt;td>• 웹 서버&lt;br>• 메일 서버&lt;br>• DNS 서버&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>전송 계층 (Transport Layer)&lt;/td>
&lt;td>• 종단간 신뢰성 있는 데이터 전송&lt;br>• 오류 검출 및 복구&lt;br>• 흐름 제어와 혼잡 제어&lt;br>• 포트 번호를 통한 프로세스 구분&lt;/td>
&lt;td>• TCP (신뢰성 있는 연결 지향)&lt;br>• UDP (비연결성, 실시간)&lt;br>• SCTP (스트림 제어)&lt;/td>
&lt;td>세그먼트 (Segment)&lt;/td>
&lt;td>• 방화벽&lt;br>• 로드 밸런서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>인터넷 계층 (Internet Layer)&lt;/td>
&lt;td>• 패킷의 경로 설정 (라우팅)&lt;br>• 논리적 주소 지정 (IP)&lt;br>• 패킷 분할과 재조립&lt;br>• 서로 다른 네트워크 연결&lt;/td>
&lt;td>• IPv4/IPv6 (IP 주소)&lt;br>• ICMP (오류 제어)&lt;br>• ARP (주소 변환)&lt;br>• IGMP (멀티캐스트)&lt;/td>
&lt;td>패킷 (Packet)&lt;/td>
&lt;td>• 라우터&lt;br>• L3 스위치&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>네트워크 접근 계층 (Network Access Layer)&lt;/td>
&lt;td>• 물리적 주소 지정 (MAC)&lt;br>• 매체 접근 제어&lt;br>• 물리적 신호 전송&lt;br>• 에러 검출&lt;/td>
&lt;td>• 이더넷&lt;br>• Wi-Fi&lt;br>• PPP&lt;br>• HDLC&lt;/td>
&lt;td>프레임 (Frame)&lt;br>비트 (Bit)&lt;/td>
&lt;td>• 네트워크 카드&lt;br>• 스위치&lt;br>• 허브&lt;br>• 케이블&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>각 계층의 특징적인 기능을 추가로 설명해보면,&lt;/p>
&lt;ol>
&lt;li>&lt;strong>응용 계층&lt;/strong>은 사용자가 실제로 사용하는 네트워크 애플리케이션이 동작하는 계층.&lt;br>
웹 브라우징, 이메일, 파일 전송 등의 서비스가 이 계층에서 이루어진다.&lt;/li>
&lt;li>&lt;strong>전송 계층&lt;/strong>은 데이터의 신뢰성을 보장하며, TCP의 경우 3-way handshake를 통한 연결 설정, 흐름 제어, 혼잡 제어 등의 기능을 제공한다.&lt;/li>
&lt;li>&lt;strong>인터넷 계층&lt;/strong>은 서로 다른 네트워크를 연결하고, IP 주소를 기반으로 한 라우팅을 담당한다.&lt;br>
IPv4에서 IPv6로의 전환이 진행 중인 계층.&lt;/li>
&lt;li>&lt;strong>네트워크 접근 계층&lt;/strong>은 실제 물리적인 네트워크 연결과 관련된 모든 것을 처리한다.&lt;br>
하드웨어 수준의 통신 프로토콜과 물리적 매체를 통한 데이터 전송을 담당한다.&lt;/li>
&lt;/ol>
&lt;p>이러한 계층 구조는 각 계층이 독립적으로 동작하면서도 서로 유기적으로 연결되어 있어, 네트워크 통신의 복잡성을 관리하기 쉽게 만들어준다.&lt;br>
또한 한 계층의 변경이 다른 계층에 미치는 영향을 최소화할 수 있다는 장점이 있다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>TCP/IP&lt;span class="hx-absolute -hx-mt-20" id="tcpip">&lt;/span>
&lt;a href="#tcpip" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;a href="https://yozm.wishket.com/magazine/detail/1956/" target="_blank" rel="noopener">주니어 개발자를 위한 엄청 쉬운 TCP/IP 4계층 이야기&lt;/a>&lt;br>
&lt;a href="https://yozm.wishket.com/magazine/detail/2005/" target="_blank" rel="noopener">주니어 개발자를 위한 TCP/IP 주요 프로토콜 알아보기&lt;/a>&lt;br>
&lt;a href="https://wormwlrm.github.io/2021/09/23/Overview-of-TCP-and-UDP.html" target="_blank" rel="noopener">10분 만에 훑어보는 TCP와 UDP&lt;/a>&lt;/p>
&lt;h3>Port&lt;span class="hx-absolute -hx-mt-20" id="port">&lt;/span>
&lt;a href="#port" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;a href="https://sangbeomkim.tistory.com/101" target="_blank" rel="noopener">포트(PORT)란?&lt;/a>&lt;/p></description></item><item><title>Network Layer - TCP/IP 4 Layers</title><link>https://buenhyden.github.io/posts/networking-and-communications/tcp-ip-4-layers/</link><pubDate>Thu, 26 Sep 2024 02:03:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/tcp-ip-4-layers/</guid><description>
&lt;h2>TCP/IP 4 계층&lt;span class="hx-absolute -hx-mt-20" id="tcpip-4-계층">&lt;/span>
&lt;a href="#tcpip-4-%ea%b3%84%ec%b8%b5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>인터넷과 네트워크 통신을 위한 프로토콜 체계로 데이터를 네트워크를 통해 안정적으로 전송하고 통신하기 위한 구조.&lt;br>
&lt;img src="tcp-ip-model-vs-osi.png" alt="A side-by-side comparison illustration of the TCP/IP mod_el structure and OSI model structure_." loading="lazy" />&lt;br>
_Source: &lt;a href="https://cheapsslsecurity.com/blog/what-is-the-tcp-model-an-exploration-of-tcp-ip-layers/" target="_blank" rel="noopener">https://cheapsslsecurity.com/blog/what-is-the-tcp-model-an-exploration-of-tcp-ip-layers/&lt;/a> _&lt;/p>
&lt;h3>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>유연성과 확장성
&lt;ul>
&lt;li>각 계층이 독립적으로 발전 가능&lt;/li>
&lt;li>새로운 프로토콜 추가 용이&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>표준화
&lt;ul>
&lt;li>계층 간 표준 인터페이스 제공&lt;/li>
&lt;li>다양한 시스템 간 호환성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>문제 해결 용이
&lt;ul>
&lt;li>계층별 독립적 문제 해결&lt;/li>
&lt;li>효율적인 유지 보수&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>모듈화
&lt;ul>
&lt;li>복잡한 네트워크 기능을 단순화&lt;/li>
&lt;li>개발과 구현이 용이&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3>TCP/IP 4계층의 각 계층의 역할과 주요 프로토콜&lt;span class="hx-absolute -hx-mt-20" id="tcpip-4계층의-각-계층의-역할과-주요-프로토콜">&lt;/span>
&lt;a href="#tcpip-4%ea%b3%84%ec%b8%b5%ec%9d%98-%ea%b0%81-%ea%b3%84%ec%b8%b5%ec%9d%98-%ec%97%ad%ed%95%a0%ea%b3%bc-%ec%a3%bc%ec%9a%94-%ed%94%84%eb%a1%9c%ed%86%a0%ec%bd%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>계층&lt;/th>
&lt;th>주요 역할&lt;/th>
&lt;th>주요 프로토콜&lt;/th>
&lt;th>데이터 단위&lt;/th>
&lt;th>주요 장비/기술&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>응용 계층 (Application Layer)&lt;/td>
&lt;td>• 사용자와 직접 상호작용하는 인터페이스 제공&lt;br>• 데이터 형식 정의 및 응용 프로그램 간 통신 담당&lt;br>• 네트워크 서비스 제공&lt;/td>
&lt;td>• HTTP/HTTPS (웹)&lt;br>• FTP (파일 전송)&lt;br>• SMTP/POP3/IMAP (이메일)&lt;br>• DNS (도메인 네임)&lt;br>• SSH (보안 셸)&lt;br>• Telnet (원격 접속)&lt;/td>
&lt;td>메시지 (Message)&lt;/td>
&lt;td>• 웹 서버&lt;br>• 메일 서버&lt;br>• DNS 서버&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>전송 계층 (Transport Layer)&lt;/td>
&lt;td>• 종단간 신뢰성 있는 데이터 전송&lt;br>• 오류 검출 및 복구&lt;br>• 흐름 제어와 혼잡 제어&lt;br>• 포트 번호를 통한 프로세스 구분&lt;/td>
&lt;td>• TCP (신뢰성 있는 연결 지향)&lt;br>• UDP (비연결성, 실시간)&lt;br>• SCTP (스트림 제어)&lt;/td>
&lt;td>세그먼트 (Segment)&lt;/td>
&lt;td>• 방화벽&lt;br>• 로드 밸런서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>인터넷 계층 (Internet Layer)&lt;/td>
&lt;td>• 패킷의 경로 설정 (라우팅)&lt;br>• 논리적 주소 지정 (IP)&lt;br>• 패킷 분할과 재조립&lt;br>• 서로 다른 네트워크 연결&lt;/td>
&lt;td>• IPv4/IPv6 (IP 주소)&lt;br>• ICMP (오류 제어)&lt;br>• ARP (주소 변환)&lt;br>• IGMP (멀티캐스트)&lt;/td>
&lt;td>패킷 (Packet)&lt;/td>
&lt;td>• 라우터&lt;br>• L3 스위치&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>네트워크 접근 계층 (Network Access Layer)&lt;/td>
&lt;td>• 물리적 주소 지정 (MAC)&lt;br>• 매체 접근 제어&lt;br>• 물리적 신호 전송&lt;br>• 에러 검출&lt;/td>
&lt;td>• 이더넷&lt;br>• Wi-Fi&lt;br>• PPP&lt;br>• HDLC&lt;/td>
&lt;td>프레임 (Frame)&lt;br>비트 (Bit)&lt;/td>
&lt;td>• 네트워크 카드&lt;br>• 스위치&lt;br>• 허브&lt;br>• 케이블&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>각 계층의 특징적인 기능을 추가로 설명해보면,&lt;/p>
&lt;ol>
&lt;li>&lt;strong>응용 계층&lt;/strong>은 사용자가 실제로 사용하는 네트워크 애플리케이션이 동작하는 계층.&lt;br>
웹 브라우징, 이메일, 파일 전송 등의 서비스가 이 계층에서 이루어진다.&lt;/li>
&lt;li>&lt;strong>전송 계층&lt;/strong>은 데이터의 신뢰성을 보장하며, TCP의 경우 3-way handshake를 통한 연결 설정, 흐름 제어, 혼잡 제어 등의 기능을 제공한다.&lt;/li>
&lt;li>&lt;strong>인터넷 계층&lt;/strong>은 서로 다른 네트워크를 연결하고, IP 주소를 기반으로 한 라우팅을 담당한다.&lt;br>
IPv4에서 IPv6로의 전환이 진행 중인 계층.&lt;/li>
&lt;li>&lt;strong>네트워크 접근 계층&lt;/strong>은 실제 물리적인 네트워크 연결과 관련된 모든 것을 처리한다.&lt;br>
하드웨어 수준의 통신 프로토콜과 물리적 매체를 통한 데이터 전송을 담당한다.&lt;/li>
&lt;/ol>
&lt;p>이러한 계층 구조는 각 계층이 독립적으로 동작하면서도 서로 유기적으로 연결되어 있어, 네트워크 통신의 복잡성을 관리하기 쉽게 만들어준다.&lt;br>
또한 한 계층의 변경이 다른 계층에 미치는 영향을 최소화할 수 있다는 장점이 있다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>TCP/IP&lt;span class="hx-absolute -hx-mt-20" id="tcpip">&lt;/span>
&lt;a href="#tcpip" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;a href="https://yozm.wishket.com/magazine/detail/1956/" target="_blank" rel="noopener">주니어 개발자를 위한 엄청 쉬운 TCP/IP 4계층 이야기&lt;/a>&lt;br>
&lt;a href="https://yozm.wishket.com/magazine/detail/2005/" target="_blank" rel="noopener">주니어 개발자를 위한 TCP/IP 주요 프로토콜 알아보기&lt;/a>&lt;br>
&lt;a href="https://wormwlrm.github.io/2021/09/23/Overview-of-TCP-and-UDP.html" target="_blank" rel="noopener">10분 만에 훑어보는 TCP와 UDP&lt;/a>&lt;/p>
&lt;h3>Port&lt;span class="hx-absolute -hx-mt-20" id="port">&lt;/span>
&lt;a href="#port" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;a href="https://sangbeomkim.tistory.com/101" target="_blank" rel="noopener">포트(PORT)란?&lt;/a>&lt;/p></description></item><item><title>TCP</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/tcp/</link><pubDate>Wed, 02 Oct 2024 04:21:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/tcp/</guid><description>
&lt;h2>TCP (Transmission Control Protocol)&lt;span class="hx-absolute -hx-mt-20" id="tcp-transmission-control-protocol">&lt;/span>
&lt;a href="#tcp-transmission-control-protocol" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>인터넷 프로토콜 스위트의 핵심 프로토콜 중 하나로, IP(Internet Protocol)와 함께 TCP/IP로 널리 알려져 있다.&lt;br>
TCP는 연결 지향적이며, 신뢰성 있는 데이터 전송을 보장하는 전송 계층 프로토콜이다.&lt;/p>
&lt;p>OSI 7계층에서 TCP는 전송 계층(Transport Layer)인 4계층에 위치하며,&lt;br>
TCP/IP 4계층 모델에서도 마찬가지로 전송 계층에 해당한다.&lt;br>
이 위치에서 TCP는 데이터의 신뢰성 있는 전송을 담당하는 핵심적인 역할을 수행한다.&lt;/p>
&lt;p>TCP의 가장 중요한 특징은 연결 지향성과 신뢰성이다.&lt;br>
연결 지향성이란 데이터를 주고받기 전에 먼저 연결을 설정하는 것을 의미하는데, 이는 3-way handshaking이라는 과정을 통해 이루어진다.&lt;br>
신뢰성은 데이터가 손실없이 순서대로 전달되는 것을 보장한다는 의미이다.&lt;/p>
&lt;h3>주요 특징&lt;span class="hx-absolute -hx-mt-20" id="주요-특징">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>신뢰성 보장&lt;/strong>: TCP는 데이터가 정확하게, 순서대로, 그리고 오류 없이 전달되도록 보장한다.&lt;/li>
&lt;li>&lt;strong>연결 지향적&lt;/strong>: 데이터 전송 전에 연결을 설정하고, 전송 후에는 연결을 종료한다.&lt;/li>
&lt;li>&lt;strong>흐름 제어&lt;/strong>: 수신자의 처리 능력에 맞춰 데이터 전송 속도를 조절한다.&lt;/li>
&lt;li>&lt;strong>혼잡 제어&lt;/strong>: 네트워크의 혼잡 상태를 감지하고 데이터 전송 속도를 조절한다.&lt;/li>
&lt;li>&lt;strong>전이중(Full-Duplex) 통신&lt;/strong>: 양방향으로 동시에 데이터 전송이 가능하다.&lt;/li>
&lt;li>&lt;strong>점대점(Point to Point) 통신&lt;/strong>: 정확히 2개의 종단점을 가진다.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>Window Size:&lt;br>
한 번에 전송할 수 있는 데이터의 양을 조절하는 값.&lt;br>
이는 흐름제어와 직접적인 관련이 있으며, 수신측의 처리 능력에 따라 동적으로 조절된다.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>MSS(Maximum Segment Size):&lt;br>
TCP가 한 번에 전송할 수 있는 최대 세그먼트 크기를 의미한다.&lt;br>
이는 네트워크의 특성을 고려하여 설정된다.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>타임아웃과 재전송:&lt;br>
일정 시간 내에 ACK를 받지 못하면 패킷 손실로 간주하고 재전송을 수행한다.&lt;br>
이는 데이터의 신뢰성을 보장하는 중요한 메커니즘이다.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Slow Start:&lt;br>
네트워크 혼잡을 방지하기 위해 처음에는 적은 양의 데이터부터 전송을 시작한다.&lt;/p>
&lt;/blockquote>
&lt;h3>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>신뢰성 있는 데이터 전송&lt;/li>
&lt;li>순서 보장&lt;/li>
&lt;li>오류 검출 및 복구&lt;/li>
&lt;li>흐름 제어를 통한 효율적인 네트워크 사용&lt;/li>
&lt;li>다양한 애플리케이션 지원 (웹 브라우징, 이메일, 파일 전송 등)&lt;/li>
&lt;/ol>
&lt;h3>동작 방식&lt;span class="hx-absolute -hx-mt-20" id="동작-방식">&lt;/span>
&lt;a href="#%eb%8f%99%ec%9e%91-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;pre class="mermaid hx-mt-6">%%{init: {'theme': 'default', 'themeVariables': { 'fontSize': '12px'}, 'flowchart': {'width': 400, 'height': 250, 'diagramPadding': 8}}}%%
sequenceDiagram
participant Client
participant Server
Note over Client,Server: 3-way Handshake (연결 수립)
Client->>Server: SYN (Seq = x)
Server-->>Client: SYN + ACK (Seq = y, Ack = x+1)
Client->>Server: ACK (Seq = x+1, Ack = y+1)
Note over Client,Server: 데이터 전송
Note over Client,Server: 4-way Handshake (연결 종료)
Client->>Server: FIN
Server-->>Client: ACK
Note right of Server: CLOSE_WAIT 상태
Server->>Client: FIN
Note left of Client: TIME_WAIT 상태
Client-->>Server: ACK&lt;/pre>&lt;ol start="2">
&lt;li>
&lt;p>데이터 전송:&lt;/p>
&lt;ul>
&lt;li>순차번호(Sequence Number)를 사용하여 패킷의 순서를 보장한다.&lt;/li>
&lt;li>확인응답(ACK)을 통해 패킷의 수신을 확인한다.&lt;/li>
&lt;li>흐름제어와 혼잡제어를 통해 네트워크의 효율성을 관리한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>연결 종료 (4-way handshaking):&lt;/p>
&lt;ul>
&lt;li>FIN과 ACK 패킷을 주고받으며 연결을 종료한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>연결 설정: 3-way Handshake&lt;br>
목적: 클라이언트와 서버 간의 연결을 설정하고 초기 시퀀스 번호를 동기화&lt;br>
과정&lt;/p>
&lt;ol>
&lt;li>SYN (클라이언트 → 서버)
&lt;ul>
&lt;li>클라이언트가 연결을 시작하려고 SYN 패킷을 보낸다.&lt;/li>
&lt;li>SYN 플래그가 1로 설정된다.&lt;/li>
&lt;li>초기 시퀀스 번호(ISN)를 포함한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>SYN-ACK (서버 → 클라이언트)
&lt;ul>
&lt;li>서버가 SYN을 받고 응답한다.&lt;/li>
&lt;li>SYN과 ACK 플래그가 모두 1로 설정된다.&lt;/li>
&lt;li>서버의 ISN을 포함합니다.&lt;/li>
&lt;li>확인 응답 번호는 클라이언트의 ISN + 1입니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ACK (클라이언트 → 서버)
&lt;ul>
&lt;li>클라이언트가 서버의 응답을 확인합니다.&lt;/li>
&lt;li>ACK 플래그가 1로 설정됩니다.&lt;/li>
&lt;li>확인 응답 번호는 서버의 ISN + 1입니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>이 과정이 완료되면 연결이 설정되고 데이터 전송이 시작될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>데이터 전송&lt;br>
연결이 설정된 후, TCP는 다음과 같은 방식으로 데이터를 전송한다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>세그먼트 분할&lt;/strong>: 큰 데이터를 작은 조각(세그먼트)으로 나눈다.&lt;/li>
&lt;li>&lt;strong>순서 번호 부여&lt;/strong>: 각 세그먼트에 번호를 매겨 순서를 보장한다.&lt;/li>
&lt;li>&lt;strong>확인 응답&lt;/strong>: 수신자는 받은 데이터에 대해 확인 응답을 보낸다.&lt;/li>
&lt;li>&lt;strong>재전송&lt;/strong>: 손실된 데이터는 자동으로 재전송된다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>연결 종료: 4-way Handshake&lt;br>
목적: 클라이언트와 서버 간의 연결을 안전하게 종료한다.&lt;br>
과정&lt;/p>
&lt;ol>
&lt;li>FIN (클라이언트 → 서버)
&lt;ul>
&lt;li>클라이언트가 연결 종료를 요청한다.&lt;/li>
&lt;li>FIN 플래그가 1로 설정된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ACK (서버 → 클라이언트)
&lt;ul>
&lt;li>서버가 FIN을 받았음을 확인한다.&lt;/li>
&lt;li>ACK 플래그가 1로 설정된다.&lt;/li>
&lt;li>이 시점에서 클라이언트→서버 방향의 연결이 닫힌다.&lt;br>
3.FIN (서버 → 클라이언트)&lt;/li>
&lt;li>서버가 모든 데이터 전송을 완료하고 연결 종료를 요청한다.&lt;/li>
&lt;li>FIN 플래그가 1로 설정된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ACK (클라이언트 → 서버)
&lt;ul>
&lt;li>클라이언트가 서버의 FIN을 확인한다.&lt;/li>
&lt;li>ACK 플래그가 1로 설정된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>이 과정이 완료되면 연결이 완전히 종료된다.&lt;/li>
&lt;li>클라이언트는 마지막 ACK 전송 후 일정 시간 (일반적으로 2MSL) 동안 TIME_WAIT 상태를 유지하여 지연된 패킷을 처리한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>데이터를 세그먼트로 나누는 이유&lt;span class="hx-absolute -hx-mt-20" id="데이터를-세그먼트로-나누는-이유">&lt;/span>
&lt;a href="#%eb%8d%b0%ec%9d%b4%ed%84%b0%eb%a5%bc-%ec%84%b8%ea%b7%b8%eb%a8%bc%ed%8a%b8%eb%a1%9c-%eb%82%98%eb%88%84%eb%8a%94-%ec%9d%b4%ec%9c%a0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>네트워크 제한 사항 준수
&lt;ol>
&lt;li>MTU(Maximum Transmission Unit) 제한: 네트워크 계층 프로토콜마다 MTU가 다르며, TCP는 이를 초과하지 않도록 데이터를 분할한다.&lt;/li>
&lt;li>효율적인 전송: 큰 데이터 스트림을 작은 세그먼트로 나누어 네트워크 패킷에 맞게 전송한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>신뢰성 향상
&lt;ol>
&lt;li>오류 처리: 작은 세그먼트로 나누면 오류 발생 시 해당 세그먼트만 재전송할 수 있어 효율적이다.&lt;/li>
&lt;li>순서 보장: 각 세그먼트에 시퀀스 번호를 할당하여 수신 측에서 올바른 순서로 재조립할 수 있다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>흐름 제어 및 혼잡 제어
&lt;ol>
&lt;li>수신자 처리 능력 고려: 세그먼트 단위로 전송함으로써 수신자의 처리 능력에 맞춰 데이터 전송 속도를 조절할 수 있다.&lt;/li>
&lt;li>네트워크 상태 대응: 세그먼트 단위로 전송하면 네트워크 혼잡 상황에 더 유연하게 대응할 수 있다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h4>세그먼트로 나누는 데이터가 에러를 감지하는 방법&lt;span class="hx-absolute -hx-mt-20" id="세그먼트로-나누는-데이터가-에러를-감지하는-방법">&lt;/span>
&lt;a href="#%ec%84%b8%ea%b7%b8%eb%a8%bc%ed%8a%b8%eb%a1%9c-%eb%82%98%eb%88%84%eb%8a%94-%eb%8d%b0%ec%9d%b4%ed%84%b0%ea%b0%80-%ec%97%90%eb%9f%ac%eb%a5%bc-%ea%b0%90%ec%a7%80%ed%95%98%eb%8a%94-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>TCP는 세그먼트로 나눈 데이터의 에러를 감지하기 위해 다음과 같은 방법들을 사용한다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>체크섬(Checksum)&lt;/p>
&lt;ul>
&lt;li>각 세그먼트에는 16비트 체크섬 필드가 포함된다.&lt;/li>
&lt;li>송신자는 데이터를 기반으로 체크섬을 계산하여 세그먼트에 포함시킨다.&lt;/li>
&lt;li>수신자는 받은 세그먼트의 체크섬을 다시 계산하여 송신자의 체크섬과 비교한다.&lt;/li>
&lt;li>두 체크섬이 일치하지 않으면 해당 세그먼트는 손상된 것으로 간주하고 폐기한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>시퀀스 번호(Sequence Numbers)&lt;/p>
&lt;ul>
&lt;li>TCP는 각 데이터 세그먼트에 고유한 시퀀스 번호를 할당한다.&lt;/li>
&lt;li>이를 통해 수신자는 데이터의 순서를 확인하고 누락된 세그먼트를 감지할 수 있다.&lt;/li>
&lt;li>순서가 맞지 않는 세그먼트를 받으면 에러로 간주한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>확인 응답(Acknowledgements)&lt;/p>
&lt;ul>
&lt;li>수신자는 성공적으로 받은 데이터에 대해 확인 응답(ACK)을 보낸다.&lt;/li>
&lt;li>송신자는 일정 시간 내에 ACK를 받지 못하면 해당 세그먼트가 손실되었다고 판단한다.&lt;/li>
&lt;li>중복된 ACK를 연속으로 받으면 특정 세그먼트의 손실을 감지할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>