<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Thread</title><link>https://buenhyden.github.io/tags/thread/</link><description>Recent content in Thread on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 14 Oct 2024 08:30:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/thread/index.xml" rel="self" type="application/rss+xml"/><item><title>Process vs Thread</title><link>https://buenhyden.github.io/til/2024/10/process-vs-thread/</link><pubDate>Mon, 14 Oct 2024 08:30:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/10/process-vs-thread/</guid><description>
&lt;h2>Process Vs Thread&lt;span class="hx-absolute -hx-mt-20" id="process-vs-thread">&lt;/span>
&lt;a href="#process-vs-thread" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ol>
&lt;li>
&lt;p>프로세스:&lt;/p>
&lt;ul>
&lt;li>독립적인 실행 단위로, 자체 메모리 공간과 시스템 자원을 가진다.&lt;/li>
&lt;li>다른 프로세스와 완전히 격리되어 있어 안정성이 높다.&lt;/li>
&lt;li>생성과 전환에 많은 비용이 든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>스레드:&lt;/p>
&lt;ul>
&lt;li>프로세스 내부의 실행 단위로, 같은 프로세스의 다른 스레드와 메모리를 공유한다.&lt;/li>
&lt;li>프로세스보다 가볍고, 생성과 전환 비용이 적다.&lt;/li>
&lt;li>동시성을 제공하지만, 동기화 문제에 주의해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>
&lt;img src="../Screenshot-from-2024-02-26-11-48-56-768.png" alt="Single Threaded vs Multi-threaded Process" loading="lazy" />&lt;br>
&lt;em>Source: &lt;a href="https://www.geeksforgeeks.org/thread-in-operating-system/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/thread-in-operating-system/&lt;/a>&lt;/em>&lt;/p>
&lt;h3>Process Vs Thread&lt;span class="hx-absolute -hx-mt-20" id="process-vs-thread-1">&lt;/span>
&lt;a href="#process-vs-thread-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>실행 중인 프로그램의 인스턴스&lt;/td>
&lt;td>프로세스 내에서 실행되는 더 작은 실행 단위&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 공간&lt;/td>
&lt;td>독립적인 메모리 공간 (코드, 데이터, 스택, 힙)&lt;/td>
&lt;td>프로세스의 메모리 공간 공유 (코드, 데이터, 힙), 독립적인 스택&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구성 요소&lt;/td>
&lt;td>- 코드 영역&lt;br>- 데이터 영역&lt;br>- 스택 영역&lt;br>- 힙 영역&lt;/td>
&lt;td>- 스레드 ID&lt;br>- 프로그램 카운터&lt;br>- 레지스터 집합&lt;br>- 스택&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 공유&lt;/td>
&lt;td>다른 프로세스와 자원 공유 안 함&lt;/td>
&lt;td>같은 프로세스 내 스레드 간 자원 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>생성 비용&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>컨텍스트 스위칭&lt;/td>
&lt;td>비용이 큼&lt;/td>
&lt;td>비용이 적음 (같은 프로세스 내에서)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>안정성&lt;/td>
&lt;td>높음 (한 프로세스의 오류가 다른 프로세스에 영향 없음)&lt;/td>
&lt;td>상대적으로 낮음 (한 스레드의 오류가 전체 프로세스에 영향)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>통신&lt;/td>
&lt;td>프로세스 간 통신(IPC) 필요 (복잡하고 오버헤드 큼)&lt;/td>
&lt;td>쉽고 빠른 통신 (공유 메모리 사용)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>병렬 처리&lt;/td>
&lt;td>가능하지만 오버헤드 큼&lt;/td>
&lt;td>효율적인 병렬 처리 가능&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>메모리 구조 비교&lt;span class="hx-absolute -hx-mt-20" id="메모리-구조-비교">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b5%ac%ec%a1%b0-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>메모리 영역&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>코드 영역&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>데이터 영역&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>힙 영역&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>스택 영역&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>각 스레드마다 독립적&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>특성 상세 비교&lt;span class="hx-absolute -hx-mt-20" id="특성-상세-비교">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%84%b1-%ec%83%81%ec%84%b8-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>독립성&lt;/strong>&lt;/td>
&lt;td>완전히 독립적&lt;/td>
&lt;td>부분적으로 독립적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>자원 공유&lt;/strong>&lt;/td>
&lt;td>제한적 (IPC 필요)&lt;/td>
&lt;td>쉽게 공유 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>오류 영향&lt;/strong>&lt;/td>
&lt;td>다른 프로세스에 영향 없음&lt;/td>
&lt;td>같은 프로세스의 모든 스레드에 영향&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>동기화&lt;/strong>&lt;/td>
&lt;td>필요성 낮음&lt;br>- IPC 메커니즘 필요&lt;/td>
&lt;td>공유 자원에 대한 동기화 필요&lt;br>- 뮤텍스, 세마포어 등 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>생성 시간&lt;/strong>&lt;/td>
&lt;td>더 오래 걸림&lt;/td>
&lt;td>더 빠름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>종료 시간&lt;/strong>&lt;/td>
&lt;td>더 오래 걸림&lt;/td>
&lt;td>더 빠름&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>장단점 비교&lt;span class="hx-absolute -hx-mt-20" id="장단점-비교">&lt;/span>
&lt;a href="#%ec%9e%a5%eb%8b%a8%ec%a0%90-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>구분&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>장점&lt;/strong>&lt;/td>
&lt;td>- 높은 안정성&lt;br>- 다른 프로세스의 영향 받지 않음&lt;br>- 보안성이 높음&lt;/td>
&lt;td>- 생성/종료가 빠름&lt;br>- 자원 공유가 쉬움&lt;br>- 통신 비용이 적음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>단점&lt;/strong>&lt;/td>
&lt;td>- 많은 시스템 자원 필요&lt;br>- 프로세스 간 통신이 복잡&lt;br>- 컨텍스트 스위칭 비용이 큼&lt;/td>
&lt;td>- 동기화 문제 발생 가능&lt;br>- 디버깅이 어려움&lt;br>- 하나의 스레드 문제가 전체에 영향&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>사용 사례 비교&lt;span class="hx-absolute -hx-mt-20" id="사용-사례-비교">&lt;/span>
&lt;a href="#%ec%82%ac%ec%9a%a9-%ec%82%ac%eb%a1%80-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>용도&lt;/th>
&lt;th>Process 선호&lt;/th>
&lt;th>Thread 선호&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>웹 서버&lt;/strong>&lt;/td>
&lt;td>안정성이 중요한 경우&lt;/td>
&lt;td>높은 동시성이 필요한 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>GUI 앱&lt;/strong>&lt;/td>
&lt;td>독립적인 작업이 많은 경우&lt;/td>
&lt;td>반응성이 중요한 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>데이터 처리&lt;/strong>&lt;/td>
&lt;td>대용량 병렬 처리&lt;/td>
&lt;td>데이터 공유가 많은 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>시스템 서비스&lt;/strong>&lt;/td>
&lt;td>격리가 필요한 경우&lt;/td>
&lt;td>빈번한 통신이 필요한 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>활용 예&lt;/td>
&lt;td>- 독립적인 애플리케이션 &lt;br>- 웹 브라우저의 각 탭 &lt;br>- 다중 사용자 서버&lt;/td>
&lt;td>- 웹 서버 요청 처리 &lt;br>- 게임 엔진 (렌더링, 물리 연산) &lt;br>- 멀티미디어 애플리케이션&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>동기화 메커니즘 비교&lt;span class="hx-absolute -hx-mt-20" id="동기화-메커니즘-비교">&lt;/span>
&lt;a href="#%eb%8f%99%ea%b8%b0%ed%99%94-%eb%a9%94%ec%bb%a4%eb%8b%88%ec%a6%98-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>메커니즘&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>공유 메모리&lt;/strong>&lt;/td>
&lt;td>명시적으로 설정 필요&lt;/td>
&lt;td>기본적으로 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>뮤텍스&lt;/strong>&lt;/td>
&lt;td>프로세스 간 뮤텍스 필요&lt;/td>
&lt;td>프로세스 내 뮤텍스 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>세마포어&lt;/strong>&lt;/td>
&lt;td>시스템 세마포어 필요&lt;/td>
&lt;td>프로세스 내 세마포어 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메시지 전달&lt;/strong>&lt;/td>
&lt;td>IPC 메커니즘 사용&lt;/td>
&lt;td>직접 메모리 접근&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 차이점들을 이해하고 적절히 활용하면, 상황에 맞는 최적의 실행 단위를 선택할 수 있다.&lt;/p>
&lt;hr>
&lt;h3>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3></description></item><item><title>Process vs Thread vs Coroutine</title><link>https://buenhyden.github.io/til/2024/10/process-vs-thread-vs-coroutine/</link><pubDate>Mon, 14 Oct 2024 08:30:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/10/process-vs-thread-vs-coroutine/</guid><description>
&lt;h2>Process Vs Thread Vs Coroutine&lt;span class="hx-absolute -hx-mt-20" id="process-vs-thread-vs-coroutine">&lt;/span>
&lt;a href="#process-vs-thread-vs-coroutine" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Process, Thread, Coroutine은 모두 프로그램 실행의 단위이지만, 각각 다른 특성과 용도를 가지고 있다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Process:&lt;/p>
&lt;ul>
&lt;li>독립적인 실행 단위로, 자체 메모리 공간과 시스템 자원을 가진다.&lt;/li>
&lt;li>다른 프로세스와 완전히 격리되어 있어 안정성이 높다.&lt;/li>
&lt;li>생성과 전환에 많은 비용이 든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Thread:&lt;/p>
&lt;ul>
&lt;li>프로세스 내부의 실행 단위로, 같은 프로세스의 다른 스레드와 메모리를 공유한다.&lt;/li>
&lt;li>프로세스보다 가볍고, 생성과 전환 비용이 적다.&lt;/li>
&lt;li>동시성을 제공하지만, 동기화 문제에 주의해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Coroutine:&lt;/p>
&lt;ul>
&lt;li>경량 스레드라고도 불리며, 스레드 내에서 실행되는 협력적 멀티태스킹 단위.&lt;/li>
&lt;li>매우 가볍고, 생성과 전환 비용이 매우 적다.&lt;/li>
&lt;li>비동기 프로그래밍을 단순화하고, 동시성을 효율적으로 관리한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Process, Thread, Coroutine의 관계는 다음과 같이 계층적으로 표현할 수 있다:&lt;br>
&lt;code>CPU &amp;gt; Core &amp;gt; Process &amp;gt; Thread &amp;gt; Coroutine&lt;/code>&lt;/p>
&lt;ul>
&lt;li>프로세스는 독립적인 메모리 공간을 가지며, 하나 이상의 스레드를 포함한다.&lt;/li>
&lt;li>스레드는 프로세스 내에서 실행되며, 같은 프로세스의 메모리를 공유한다.&lt;/li>
&lt;li>코루틴은 스레드 내에서 실행되는 더 가벼운 실행 단위이다.&lt;br>
이 구조는 각 단위의 특성과 리소스 사용을 잘 보여준다.&lt;br>
프로세스가 가장 무겁고, 코루틴이 가장 가벼운 실행 단위이다.&lt;/li>
&lt;/ul>
&lt;p>
&lt;img src="../1_AD4ZqhM1MgNe-npYcrkWzQ.webp" alt="Coroutine in User-level Thread" loading="lazy" />&lt;br>
&lt;em>Source: &lt;a href="https://choi-geonu.medium.com/%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%93%A4%EC%9D%B4-%EC%95%8C%EC%95%84%EC%95%BC%ED%95%A0-%EB%8F%99%EC%8B%9C%EC%84%B1-6-coroutine-9eecdbeb2d2d" target="_blank" rel="noopener">https://choi-geonu.medium.com/%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%93%A4%EC%9D%B4-%EC%95%8C%EC%95%84%EC%95%BC%ED%95%A0-%EB%8F%99%EC%8B%9C%EC%84%B1-6-coroutine-9eecdbeb2d2d&lt;/a>&lt;/em>&lt;/p>
&lt;h3>Process Vs Thread Vs Coroutine 비교&lt;span class="hx-absolute -hx-mt-20" id="process-vs-thread-vs-coroutine-비교">&lt;/span>
&lt;a href="#process-vs-thread-vs-coroutine-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;th>Coroutine&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>정의&lt;/strong>&lt;/td>
&lt;td>독립적인 실행 단위로 자체 메모리 공간 보유&lt;/td>
&lt;td>프로세스 내의 실행 단위로 메모리 공유&lt;/td>
&lt;td>협력적 멀티태스킹을 위한 서브루틴&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 공유&lt;/strong>&lt;/td>
&lt;td>독립적인 메모리 공간&lt;/td>
&lt;td>같은 프로세스의 메모리 공유&lt;/td>
&lt;td>같은 스레드의 메모리 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>컨텍스트 스위칭 비용&lt;/strong>&lt;/td>
&lt;td>매우 높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>매우 낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>생성/소멸 비용&lt;/strong>&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>자원 사용&lt;/strong>&lt;/td>
&lt;td>많음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>적음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>통신 방식&lt;/strong>&lt;/td>
&lt;td>IPC (파이프, 소켓 등)&lt;/td>
&lt;td>공유 메모리, 뮤텍스&lt;/td>
&lt;td>yield/await&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>병렬 처리&lt;/strong>&lt;/td>
&lt;td>실제 병렬 처리 가능&lt;/td>
&lt;td>실제 병렬 처리 가능&lt;/td>
&lt;td>동시성만 제공 (병렬x)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>적합한 작업&lt;/strong>&lt;/td>
&lt;td>CPU 집약적 작업&lt;/td>
&lt;td>I/O + CPU 혼합 작업&lt;/td>
&lt;td>I/O 집약적 작업&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>에러 영향&lt;/strong>&lt;/td>
&lt;td>다른 프로세스에 영향 없음&lt;/td>
&lt;td>같은 프로세스의 스레드들에 영향&lt;/td>
&lt;td>명시적 에러 처리 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>디버깅 난이도&lt;/strong>&lt;/td>
&lt;td>쉬움&lt;/td>
&lt;td>어려움&lt;/td>
&lt;td>중간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>확장성&lt;/strong>&lt;/td>
&lt;td>높음 (여러 CPU 코어)&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>단일 스레드 내 제한&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 격리&lt;/strong>&lt;/td>
&lt;td>완전 격리&lt;/td>
&lt;td>부분 공유&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>실행 모델 비교&lt;span class="hx-absolute -hx-mt-20" id="실행-모델-비교">&lt;/span>
&lt;a href="#%ec%8b%a4%ed%96%89-%eb%aa%a8%eb%8d%b8-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>실행 모델&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;th>Coroutine&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>스케줄링 주체&lt;/strong>&lt;/td>
&lt;td>OS&lt;/td>
&lt;td>OS&lt;/td>
&lt;td>프로그램&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>선점 여부&lt;/strong>&lt;/td>
&lt;td>선점형&lt;/td>
&lt;td>선점형&lt;/td>
&lt;td>비선점형&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>컨텍스트 스위치&lt;/strong>&lt;/td>
&lt;td>OS 레벨&lt;/td>
&lt;td>OS 레벨&lt;/td>
&lt;td>사용자 레벨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>동시성 모델&lt;/strong>&lt;/td>
&lt;td>진정한 병렬성&lt;/td>
&lt;td>진정한 병렬성&lt;/td>
&lt;td>협력적 멀티태스킹&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>리소스 사용 비교&lt;span class="hx-absolute -hx-mt-20" id="리소스-사용-비교">&lt;/span>
&lt;a href="#%eb%a6%ac%ec%86%8c%ec%8a%a4-%ec%82%ac%ec%9a%a9-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>리소스&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;th>Coroutine&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>메모리 사용량&lt;/strong>&lt;/td>
&lt;td>높음 (독립 메모리)&lt;/td>
&lt;td>중간 (공유 메모리)&lt;/td>
&lt;td>낮음 (최소 오버헤드)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>CPU 사용&lt;/strong>&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>시스템 리소스&lt;/strong>&lt;/td>
&lt;td>많음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>적음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>스택 크기&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>성능 특성 비교&lt;span class="hx-absolute -hx-mt-20" id="성능-특성-비교">&lt;/span>
&lt;a href="#%ec%84%b1%eb%8a%a5-%ed%8a%b9%ec%84%b1-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>성능 특성&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;th>Coroutine&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>생성 시간&lt;/strong>&lt;/td>
&lt;td>느림&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>빠름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>컨텍스트 스위치 시간&lt;/strong>&lt;/td>
&lt;td>느림&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>빠름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 접근&lt;/strong>&lt;/td>
&lt;td>독립적 (느림)&lt;/td>
&lt;td>공유 (빠름)&lt;/td>
&lt;td>공유 (매우 빠름)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>확장성 한계&lt;/strong>&lt;/td>
&lt;td>CPU 코어 수&lt;/td>
&lt;td>시스템 리소스&lt;/td>
&lt;td>이벤트 루프 성능&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>사용 사례별 비교&lt;span class="hx-absolute -hx-mt-20" id="사용-사례별-비교">&lt;/span>
&lt;a href="#%ec%82%ac%ec%9a%a9-%ec%82%ac%eb%a1%80%eb%b3%84-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>사용 사례&lt;/th>
&lt;th>적합한 모델&lt;/th>
&lt;th>이유&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>대규모 데이터 처리&lt;/td>
&lt;td>Process&lt;/td>
&lt;td>메모리 격리와 CPU 활용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>웹 서버&lt;/td>
&lt;td>Thread/Coroutine&lt;/td>
&lt;td>I/O 작업 처리에 효율적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실시간 게임&lt;/td>
&lt;td>Thread&lt;/td>
&lt;td>낮은 지연시간 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GUI 애플리케이션&lt;/td>
&lt;td>Thread&lt;/td>
&lt;td>사용자 인터페이스 반응성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>네트워크 서비스&lt;/td>
&lt;td>Coroutine&lt;/td>
&lt;td>많은 동시 연결 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>이미지/비디오 처리&lt;/td>
&lt;td>Process&lt;/td>
&lt;td>CPU 집약적 작업&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Thread</title><link>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/thread/</link><pubDate>Thu, 26 Sep 2024 23:32:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/thread/</guid><description>
&lt;h2>Thread&lt;span class="hx-absolute -hx-mt-20" id="thread">&lt;/span>
&lt;a href="#thread" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Thread는 프로그램 실행의 기본 단위로, 프로세스 내에서 실행되는 독립적인 작업 흐름을 의미한다.&lt;/p>
&lt;p>하나의 프로세스는 여러 개의 Thread를 가질 수 있으며, 이들은 프로세스의 자원을 공유한다.&lt;/p>
&lt;p>
&lt;img src="../1_ILkJu8YvpoldbL4kpNL9aA.webp" alt="This chart displays the hierarchy among Program, Process and Thread" loading="lazy" />&lt;br>
_Source: &lt;a href="https://blog.devgenius.io/program-process-and-thread-explained-in-one-minute-6016e4fdf4de" target="_blank" rel="noopener">https://blog.devgenius.io/program-process-and-thread-explained-in-one-minute-6016e4fdf4de&lt;/a> _&lt;/p>
&lt;h3>Thread의 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="thread의-구성-요소">&lt;/span>
&lt;a href="#thread%ec%9d%98-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Thread는 다음과 같은 구성 요소를 가진다:&lt;/p>
&lt;ol>
&lt;li>프로그램 카운터&lt;/li>
&lt;li>레지스터 집합&lt;/li>
&lt;li>스택 공간&lt;/li>
&lt;li>Thread ID&lt;br>
이러한 요소들은 각 Thread의 독립적인 실행을 가능하게 한다.&lt;/li>
&lt;/ol>
&lt;h3>Thread의 특징&lt;span class="hx-absolute -hx-mt-20" id="thread의-특징">&lt;/span>
&lt;a href="#thread%ec%9d%98-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>경량성: Thread는 프로세스에 비해 생성과 관리가 더 빠르고 효율적이다.&lt;/li>
&lt;li>자원 공유: 같은 프로세스 내의 Thread들은 코드, 데이터, 파일 등의 자원을 공유한다.&lt;/li>
&lt;li>병렬 실행: 멀티코어 시스템에서는 여러 Thread가 실제로 동시에 실행될 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>기능과 역할&lt;span class="hx-absolute -hx-mt-20" id="기능과-역할">&lt;/span>
&lt;a href="#%ea%b8%b0%eb%8a%a5%ea%b3%bc-%ec%97%ad%ed%95%a0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>기능&lt;/th>
&lt;th>역할&lt;/th>
&lt;th>장점&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>병렬 처리&lt;/td>
&lt;td>- 동시에 여러 작업 수행&lt;br>CPU 활용도 증가&lt;/td>
&lt;td>- 성능 향상&lt;br>- 응답성 개선&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 공유&lt;/td>
&lt;td>- 프로세스 자원 공유&lt;br>- 효율적인 메모리 사용&lt;/td>
&lt;td>- 메모리 절약&lt;br>- 통신 비용 감소&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>비동기 처리&lt;/td>
&lt;td>- 독립적인 작업 수행&lt;br>- 이벤트 처리&lt;/td>
&lt;td>- 응답성 향상&lt;br>UI 처리 효율화&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Thread의 종류&lt;span class="hx-absolute -hx-mt-20" id="thread의-종류">&lt;/span>
&lt;a href="#thread%ec%9d%98-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Thread는 크게 두 가지로 나눌 수 있다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>사용자 수준 Thread (User-level Thread)&lt;/p>
&lt;ul>
&lt;li>사용자 공간에서 관리되며, 커널은 이를 인식하지 못한다.&lt;/li>
&lt;li>생성과 관리가 빠르지만, 한 Thread가 블로킹되면 전체 프로세스가 블로킹된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>커널 수준 Thread (Kernel-level Thread)&lt;/p>
&lt;ul>
&lt;li>운영 체제 커널에 의해 관리된다.&lt;/li>
&lt;li>생성과 관리가 상대적으로 느리지만, 한 Thread가 블로킹되어도 다른 Thread는 계속 실행될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>유형&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>사용 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>사용자 수준&lt;/td>
&lt;td>- 사용자 모드에서 관리&lt;br>- 커널 지원 불필요&lt;/td>
&lt;td>- 라이브러리 구현&lt;br>- 응용 프로그램&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>커널 수준&lt;/td>
&lt;td>- 커널에 의해 관리&lt;br>- 운영체제 지원 필요&lt;/td>
&lt;td>- 시스템 서비스&lt;br>- 디바이스 드라이버&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Thread의 장점&lt;span class="hx-absolute -hx-mt-20" id="thread의-장점">&lt;/span>
&lt;a href="#thread%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>응답성 향상: 프로그램의 일부가 블로킹되어도 다른 부분이 계속 실행될 수 있다.&lt;/li>
&lt;li>자원 공유: 같은 프로세스 내의 Thread들은 자원을 효율적으로 공유할 수 있다.&lt;/li>
&lt;li>경제성: Thread 생성은 프로세스 생성보다 비용이 적게 든다.&lt;/li>
&lt;li>확장성: 멀티프로세서 아키텍처의 이점을 활용할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>Thread의 사용 예&lt;span class="hx-absolute -hx-mt-20" id="thread의-사용-예">&lt;/span>
&lt;a href="#thread%ec%9d%98-%ec%82%ac%ec%9a%a9-%ec%98%88" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>웹 브라우저: 여러 탭을 동시에 로드하고 실행할 수 있다.&lt;/li>
&lt;li>워드 프로세서: 문서 편집, 맞춤법 검사, 자동 저장 등을 동시에 수행할 수 있다.&lt;/li>
&lt;li>게임: 그래픽 렌더링, 물리 연산, 사운드 처리 등을 병렬로 처리할 수 있다.&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>분야&lt;/th>
&lt;th>활용 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>웹 서버&lt;/td>
&lt;td>- 클라이언트 요청 처리&lt;br>- 동시 접속 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GUI 응용&lt;/td>
&lt;td>- 이벤트 처리&lt;br>- 화면 갱신&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>게임&lt;/td>
&lt;td>- 물리 엔진&lt;br>AI 처리&lt;br>- 렌더링&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>멀티미디어&lt;/td>
&lt;td>- 영상 처리&lt;br>- 음향 처리&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Thread 상태와 생명주기&lt;span class="hx-absolute -hx-mt-20" id="thread-상태와-생명주기">&lt;/span>
&lt;a href="#thread-%ec%83%81%ed%83%9c%ec%99%80-%ec%83%9d%eb%aa%85%ec%a3%bc%ea%b8%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>상태&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>전이 조건&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>NEW&lt;/td>
&lt;td>스레드 생성&lt;/td>
&lt;td>start() 호출 전&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RUNNABLE&lt;/td>
&lt;td>실행 대기/실행 중&lt;/td>
&lt;td>start() 호출 후&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BLOCKED&lt;/td>
&lt;td>동기화 블록 진입 대기&lt;/td>
&lt;td>모니터 락 대기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>WAITING&lt;/td>
&lt;td>대기 상태&lt;/td>
&lt;td>wait() 호출&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TIMED_WAITING&lt;/td>
&lt;td>일정 시간 대기&lt;/td>
&lt;td>sleep() 호출&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TERMINATED&lt;/td>
&lt;td>종료 상태&lt;/td>
&lt;td>실행 완료&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Thread 동기화 메커니즘&lt;span class="hx-absolute -hx-mt-20" id="thread-동기화-메커니즘">&lt;/span>
&lt;a href="#thread-%eb%8f%99%ea%b8%b0%ed%99%94-%eb%a9%94%ec%bb%a4%eb%8b%88%ec%a6%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>동기화 메커니즘 선택 기준&lt;span class="hx-absolute -hx-mt-20" id="동기화-메커니즘-선택-기준">&lt;/span>
&lt;a href="#%eb%8f%99%ea%b8%b0%ed%99%94-%eb%a9%94%ec%bb%a4%eb%8b%88%ec%a6%98-%ec%84%a0%ed%83%9d-%ea%b8%b0%ec%a4%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>상황&lt;/th>
&lt;th>권장 메커니즘&lt;/th>
&lt;th>이유&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>단순한 임계 영역&lt;/td>
&lt;td>synchronized&lt;/td>
&lt;td>- 구현 간단&lt;br>- 자동 락 해제&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>복잡한 락킹 로직&lt;/td>
&lt;td>Lock&lt;/td>
&lt;td>- 더 많은 제어&lt;br>- 타임아웃 지원&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>리소스 풀 관리&lt;/td>
&lt;td>Semaphore&lt;/td>
&lt;td>- 동시 접근 제어&lt;br>- 카운팅 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>작업 완료 대기&lt;/td>
&lt;td>CountDownLatch&lt;/td>
&lt;td>- 간단한 구현&lt;br>- 명확한 의도&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>반복적 동기화&lt;/td>
&lt;td>CyclicBarrier&lt;/td>
&lt;td>- 재사용 가능&lt;br>- 배리어 동기화&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>유형별 종류&lt;span class="hx-absolute -hx-mt-20" id="유형별-종류">&lt;/span>
&lt;a href="#%ec%9c%a0%ed%98%95%eb%b3%84-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;h5>기본 동기화 메커니즘&lt;span class="hx-absolute -hx-mt-20" id="기본-동기화-메커니즘">&lt;/span>
&lt;a href="#%ea%b8%b0%eb%b3%b8-%eb%8f%99%ea%b8%b0%ed%99%94-%eb%a9%94%ec%bb%a4%eb%8b%88%ec%a6%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>메커니즘&lt;/th>
&lt;th>사용 목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>synchronized&lt;/td>
&lt;td>임계 영역 보호&lt;/td>
&lt;td>- 한 번에 하나의 스레드만 접근&lt;br>- 모니터 락 사용&lt;br>- 자동 락 해제&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>volatile&lt;/td>
&lt;td>변수의 가시성 보장&lt;/td>
&lt;td>- 메인 메모리에서 직접 읽고 쓰기&lt;br>- 캐시 사용 안 함&lt;br>- 단일 변수 동기화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Lock&lt;/td>
&lt;td>명시적 락 제어&lt;/td>
&lt;td>- 더 유연한 락 제어&lt;br>try-finally 사용 권장&lt;br>- 다양한 락 구현체 제공&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5>스레드 간 통신 메커니즘&lt;span class="hx-absolute -hx-mt-20" id="스레드-간-통신-메커니즘">&lt;/span>
&lt;a href="#%ec%8a%a4%eb%a0%88%eb%93%9c-%ea%b0%84-%ed%86%b5%ec%8b%a0-%eb%a9%94%ec%bb%a4%eb%8b%88%ec%a6%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>메커니즘&lt;/th>
&lt;th>사용 목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>wait/notify&lt;/td>
&lt;td>스레드 간 신호 전달&lt;/td>
&lt;td>Object 클래스의 메소드&lt;br>synchronized 블록 내에서 사용&lt;br>- 조건 동기화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Condition&lt;/td>
&lt;td>조건부 스레드 제어&lt;/td>
&lt;td>Lock과 함께 사용&lt;br>- 더 정교한 스레드 제어&lt;br>- 다중 조건 지원&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CountDownLatch&lt;/td>
&lt;td>작업 완료 대기&lt;/td>
&lt;td>- 지정된 수의 이벤트 대기&lt;br>- 일회성 사용&lt;br>- 재사용 불가&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5>세마포어와 뮤텍스&lt;span class="hx-absolute -hx-mt-20" id="세마포어와-뮤텍스">&lt;/span>
&lt;a href="#%ec%84%b8%eb%a7%88%ed%8f%ac%ec%96%b4%ec%99%80-%eb%ae%a4%ed%85%8d%ec%8a%a4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>메커니즘&lt;/th>
&lt;th>사용 목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Semaphore&lt;/td>
&lt;td>리소스 접근 제어&lt;/td>
&lt;td>- 카운팅 세마포어&lt;br>- 여러 스레드 동시 접근&lt;br>- 리소스 풀 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Mutex&lt;/td>
&lt;td>상호 배제&lt;/td>
&lt;td>- 이진 세마포어&lt;br>- 한 번에 하나의 스레드만&lt;br>- 소유권 개념&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5>고급 동기화 도구&lt;span class="hx-absolute -hx-mt-20" id="고급-동기화-도구">&lt;/span>
&lt;a href="#%ea%b3%a0%ea%b8%89-%eb%8f%99%ea%b8%b0%ed%99%94-%eb%8f%84%ea%b5%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>메커니즘&lt;/th>
&lt;th>사용 목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CyclicBarrier&lt;/td>
&lt;td>동기 작업 조정&lt;/td>
&lt;td>- 여러 스레드 동기화&lt;br>- 재사용 가능&lt;br>- 배리어 작업 지원&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Exchanger&lt;/td>
&lt;td>데이터 교환&lt;/td>
&lt;td>- 두 스레드 간 데이터 교환&lt;br>- 랑데부 동기화&lt;br>- 양방향 데이터 전송&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Phaser&lt;/td>
&lt;td>단계별 동기화&lt;/td>
&lt;td>- 유연한 동기화&lt;br>- 단계별 진행&lt;br>- 동적 참여자 수&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>