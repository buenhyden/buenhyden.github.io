<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Error-Guessing</title><link>https://buenhyden.github.io/tags/error-guessing/</link><description>Recent content in Error-Guessing on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 08 Dec 2024 00:13:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/error-guessing/index.xml" rel="self" type="application/rss+xml"/><item><title>오류 예측 검사(Error Guessing)</title><link>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/experience-based-test/error-guessing/</link><pubDate>Sun, 08 Dec 2024 00:13:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/test/test-design/black-box-testing/experience-based-test/error-guessing/</guid><description>
&lt;h2>오류 예측 검사(Error Guessing)&lt;span class="hx-absolute -hx-mt-20" id="오류-예측-검사error-guessing">&lt;/span>
&lt;a href="#%ec%98%a4%eb%a5%98-%ec%98%88%ec%b8%a1-%ea%b2%80%ec%82%acerror-guessing" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>오류 예측 검사(Error Guessing)는 블랙박스 테스트 기법 중 하나로, 테스터의 &lt;strong>경험, 지식, 직관&lt;/strong>을 활용하여 소프트웨어에서 발생할 가능성이 높은 오류를 예측하고 이를 기반으로 테스트 케이스를 설계하는 방법.&lt;br>
이 기법은 다른 테스트 기법으로는 발견하기 어려운 결함을 보완적으로 찾아내는 데 유용하다.&lt;/p>
&lt;h3>&lt;strong>오류 예측 검사의 특징&lt;/strong>&lt;span class="hx-absolute -hx-mt-20" id="오류-예측-검사의-특징">&lt;/span>
&lt;a href="#%ec%98%a4%eb%a5%98-%ec%98%88%ec%b8%a1-%ea%b2%80%ec%82%ac%ec%9d%98-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>경험 기반 접근&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>과거의 경험, 유사한 시스템에서 발견된 오류 유형, 그리고 직관을 활용하여 잠재적 오류를 예측한다.&lt;/li>
&lt;li>특정한 규칙이나 구조에 의존하지 않고 테스터의 전문성과 감각에 의존한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>보충적 검사 기법&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>명세 기반 테스트(예: 동치 분할, 경계값 분석)로 놓칠 수 있는 오류를 보완적으로 탐지한다.&lt;/li>
&lt;li>데이터 확인 검사라고도 불리며, 다른 기법과 함께 사용하여 테스트의 완성도를 높인다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>유연성&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>정형화된 절차 없이 테스터의 판단에 따라 다양한 상황과 입력값을 테스트한다.&lt;/li>
&lt;li>예상치 못한 결함을 발견할 가능성을 높인다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>일반적인 오류 예측 영역&lt;span class="hx-absolute -hx-mt-20" id="일반적인-오류-예측-영역">&lt;/span>
&lt;a href="#%ec%9d%bc%eb%b0%98%ec%a0%81%ec%9d%b8-%ec%98%a4%eb%a5%98-%ec%98%88%ec%b8%a1-%ec%98%81%ec%97%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>입력 데이터 관련 오류:&lt;/p>
&lt;ul>
&lt;li>경계값 근처의 입력&lt;/li>
&lt;li>특수 문자가 포함된 데이터&lt;/li>
&lt;li>매우 큰 데이터 또는 작은 데이터&lt;/li>
&lt;li>한글, 이모지 등 유니코드 문자&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>처리 과정 관련 오류:&lt;/p>
&lt;ul>
&lt;li>동시 접근 상황&lt;/li>
&lt;li>메모리 부족 상황&lt;/li>
&lt;li>네트워크 지연 또는 단절&lt;/li>
&lt;li>데이터베이스 연결 실패&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>인터페이스 관련 오류:&lt;/p>
&lt;ul>
&lt;li>브라우저 호환성 문제&lt;/li>
&lt;li>화면 크기 변경에 따른 레이아웃 깨짐&lt;/li>
&lt;li>다양한 디바이스에서의 동작 차이&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>오류 예측의 주요 접근 방법&lt;span class="hx-absolute -hx-mt-20" id="오류-예측의-주요-접근-방법">&lt;/span>
&lt;a href="#%ec%98%a4%eb%a5%98-%ec%98%88%ec%b8%a1%ec%9d%98-%ec%a3%bc%ec%9a%94-%ec%a0%91%ea%b7%bc-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시스템적 접근: 테스터는 먼저 시스템의 구조와 기능을 전체적으로 파악한다.&lt;br>
예를 들어, 웹 애플리케이션을 테스트할 때는 사용자 입력, 데이터 처리, 네트워크 통신 등 각 계층에서 발생할 수 있는 오류를 예측한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>경험 기반 접근: 과거 프로젝트에서 발견된 유사한 오류 패턴을 활용한다. 특정 기능이나 모듈에서 자주 발생했던 문제들을 기반으로 테스트 케이스를 설계한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>효과적인 오류 예측을 위한 전략&lt;span class="hx-absolute -hx-mt-20" id="효과적인-오류-예측을-위한-전략">&lt;/span>
&lt;a href="#%ed%9a%a8%ea%b3%bc%ec%a0%81%ec%9d%b8-%ec%98%a4%eb%a5%98-%ec%98%88%ec%b8%a1%ec%9d%84-%ec%9c%84%ed%95%9c-%ec%a0%84%eb%9e%b5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>과거 경험 활용: 이전 프로젝트에서 발견된 오류들을 데이터베이스화하여 참조한다. 이는 마치 의료 분야에서 케이스 스터디를 활용하는 것과 비슷하다.&lt;/li>
&lt;li>스트레스 상황 고려: 시스템이 극한 상황에서 어떻게 동작할지 예측한다.&lt;br>
예를 들어:
&lt;ul>
&lt;li>대량의 사용자 동시 접속&lt;/li>
&lt;li>시스템 리소스 부족&lt;/li>
&lt;li>네트워크 불안정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>사용자 행동 패턴 분석: 실제 사용자들이 시스템을 어떻게 사용할지, 어떤 실수를 할 수 있을지 예측한다.&lt;/li>
&lt;/ol>
&lt;h3>&lt;strong>오류 예측 검사의 설계 방법&lt;/strong>&lt;span class="hx-absolute -hx-mt-20" id="오류-예측-검사의-설계-방법">&lt;/span>
&lt;a href="#%ec%98%a4%eb%a5%98-%ec%98%88%ec%b8%a1-%ea%b2%80%ec%82%ac%ec%9d%98-%ec%84%a4%ea%b3%84-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>잠재적 오류 식별&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>과거 유사 프로젝트에서 발생했던 일반적인 결함 유형을 검토한다.&lt;/li>
&lt;li>소프트웨어의 복잡한 부분이나 오류가 발생하기 쉬운 영역(예: 경계값, 예외 처리)을 중점적으로 분석한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>테스트 케이스 작성&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>예상되는 오류 상황에 맞는 입력값과 조건을 설정한다.&lt;/li>
&lt;li>정상적인 입력뿐 아니라 비정상적이거나 극단적인 입력값도 포함시킨다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>테스트 실행 및 평가&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>작성된 테스트 케이스를 실행하여 시스템이 예상대로 동작하지 않는 부분을 확인한다.&lt;/li>
&lt;li>발견된 결함을 기록하고 수정 과정을 거친다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>&lt;strong>오류 예측 검사의 장점&lt;/strong>&lt;span class="hx-absolute -hx-mt-20" id="오류-예측-검사의-장점">&lt;/span>
&lt;a href="#%ec%98%a4%eb%a5%98-%ec%98%88%ec%b8%a1-%ea%b2%80%ec%82%ac%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>효율성&lt;/strong>: 테스터의 경험을 활용하여 빠르게 결함을 탐지할 수 있다.&lt;/li>
&lt;li>&lt;strong>보완적 역할&lt;/strong>: 다른 블랙박스 테스트 기법으로는 발견하기 어려운 오류를 찾아낼 수 있다.&lt;/li>
&lt;li>&lt;strong>적용 범위가 넓음&lt;/strong>: 다양한 소프트웨어 애플리케이션과 환경에 적용 가능하다.&lt;/li>
&lt;/ul>
&lt;h3>&lt;strong>오류 예측 검사의 단점&lt;/strong>&lt;span class="hx-absolute -hx-mt-20" id="오류-예측-검사의-단점">&lt;/span>
&lt;a href="#%ec%98%a4%eb%a5%98-%ec%98%88%ec%b8%a1-%ea%b2%80%ec%82%ac%ec%9d%98-%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>주관성 의존&lt;/strong>: 테스터의 경험과 능력에 크게 의존하므로 일관성이 부족할 수 있다.&lt;/li>
&lt;li>&lt;strong>체계적이지 않음&lt;/strong>: 정형화된 절차 없이 진행되기 때문에 모든 잠재적 결함을 포괄하지 못할 가능성이 있다.&lt;/li>
&lt;/ul>
&lt;h3>&lt;strong>적용 사례&lt;/strong>&lt;span class="hx-absolute -hx-mt-20" id="적용-사례">&lt;/span>
&lt;a href="#%ec%a0%81%ec%9a%a9-%ec%82%ac%eb%a1%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>복잡한 시스템이나 새로운 소프트웨어 도메인에서 초기 결함 탐지&lt;/li>
&lt;li>경계값 분석이나 상태 전이 테스트 등 명세 기반 기법으로 놓친 결함 보완&lt;/li>
&lt;li>사용자 입력 데이터를 다양하게 변형하여 예상치 못한 오류 탐지&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>