<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Architecture-Styles on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/architecture-styles/</link>
    <description>Recent content in Architecture-Styles on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.8</generator>
    <language>en</language>
    <lastBuildDate>Sat, 14 Jun 2025 07:18:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/architecture-styles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Architecture Styles and Patterns</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/</link>
      <pubDate>Sat, 14 Jun 2025 07:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/</guid>
      <description>Architecture Styles and Patterns은 시스템의 고수준 구조를 정의하고 컴포넌트 간 상호작용을 조직화하는 재사용 가능한 설계 솔루션이다. Architecture Style 은 시스템 전체 구조와 상호작용 원칙을 정의하며, Architecture Pattern 은 특정 구조적 문제에 대한 재사용 가능한 해결책을 제공한다. 다양한 패턴이 존재하며, 각각 특정 문제를 해결하고 확장성, 유지보수성, 테스트 용이성을 향상시킨다.</description>
    </item>
    <item>
      <title>Event-Driven Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/messaging-oriented-architecture/event-driven-architecture/</link>
      <pubDate>Sat, 01 Feb 2025 03:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/messaging-oriented-architecture/event-driven-architecture/</guid>
      <description>이벤트 기반 아키텍처는 시스템 내에서 발생하는 상태 변화나 중요한 사건을 &amp;#39;이벤트&amp;#39;로 정의하고, 이러한 이벤트의 생성, 전송, 처리를 중심으로 시스템을 구성하는 방식이다.</description>
    </item>
    <item>
      <title>Event-Driven Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/messaging-oriented-architecture/event-driven-architecture/event-driven-pattern/</link>
      <pubDate>Sat, 28 Dec 2024 10:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/messaging-oriented-architecture/event-driven-architecture/event-driven-pattern/</guid>
      <description>이 패턴은 시스템의 상태 변화를 이벤트로 표현하고, 이를 기반으로 서비스 간 통신을 구현하는 방식이다.</description>
    </item>
    <item>
      <title>Peer-to-Peer Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed-architecture/peer-to-peer/</link>
      <pubDate>Fri, 27 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed-architecture/peer-to-peer/</guid>
      <description>분산 네트워크 아키텍처의 한 형태로, 각 노드(피어)가 클라이언트와 서버의 역할을 동시에 수행하는 구조</description>
    </item>
    <item>
      <title>Client Server Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed-architecture/client-server/</link>
      <pubDate>Thu, 26 Sep 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed-architecture/client-server/</guid>
      <description>클라이언트-서버 아키텍처는 네트워크 환경에서 **클라이언트**와 **서버**가 역할을 분담하여 상호작용하는 모델이다. 클라이언트(Client)가 요청(Request)을 보내고, 서버(Server)가 요청을 처리하여 응답(Response)한다.</description>
    </item>
    <item>
      <title>Client-Server Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed-architecture/client-server/client-server-pattern/</link>
      <pubDate>Thu, 26 Sep 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed-architecture/client-server/client-server-pattern/</guid>
      <description>서비스를 제공하는 서버와 서비스를 요청하는 클라이언트로 구성되는 소프트웨어 아키텍처 패턴</description>
    </item>
  </channel>
</rss>
