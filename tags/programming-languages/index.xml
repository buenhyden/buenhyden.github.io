<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Programming-Languages on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/programming-languages/</link>
    <description>Recent content in Programming-Languages on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.149.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 24 Feb 2025 09:46:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/programming-languages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Variables</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/syntax-and-basic-types/variables/</link>
      <pubDate>Wed, 25 Dec 2024 01:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/syntax-and-basic-types/variables/</guid>
      <description>자바스크립트 변수는 프로그램 내에서 데이터를 효과적으로 저장하고 관리하는 기본 도구이다.</description>
    </item>
    <item>
      <title>Basic Syntax</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/syntax-basics/</link>
      <pubDate>Fri, 20 Dec 2024 12:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/syntax-basics/</guid>
      <description>Python의 기본 구문법</description>
    </item>
    <item>
      <title>어셈블러(Assembler)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/interpreter-vs-compiler-vs-assembler/assembler/</link>
      <pubDate>Thu, 05 Dec 2024 03:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/interpreter-vs-compiler-vs-assembler/assembler/</guid>
      <description>Assembler는 어셈블리 언어로 작성된 소스 코드를 컴퓨터가 직접 실행할 수 있는 기계어 코드로 변환하는 번역 도구</description>
    </item>
    <item>
      <title>Control Structures</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/programming-fundamentals/basic-concepts/control-structures/</link>
      <pubDate>Thu, 05 Dec 2024 03:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/programming-fundamentals/basic-concepts/control-structures/</guid>
      <description>Control Structures는 프로그램 내에서 실행 흐름을 제어하는 기본적이고 필수적인 구성 요소이다.  이 구조들은 코드의 순차적 실행, 조건에 따른 분기 처리, 그리고 반복문 실행을 통해 프로그램이 동적으로 동작할 수 있도록 돕는다.</description>
    </item>
    <item>
      <title>ECMAScript</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/es6&#43;-features/ecmascript/</link>
      <pubDate>Wed, 04 Dec 2024 17:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/es6&#43;-features/ecmascript/</guid>
      <description>ECMAScript는 자바스크립트의 표준 규격으로, **Ecma International**이 ECMA-262 기술 규격을 통해 정의한 스크립트 프로그래밍 언어이다.</description>
    </item>
    <item>
      <title>Native Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/compiler-types/native-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 15:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/compiler-types/native-compiler/</guid>
      <description>Native Compiler는 소스 코드를 현재 컴파일러가 실행되고 있는 시스템의 운영체제와 하드웨어 아키텍처에 최적화된 기계어로 변환하는 컴파일러</description>
    </item>
    <item>
      <title>Callback</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/asynchronous-programming/callback/</link>
      <pubDate>Sun, 06 Oct 2024 08:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/asynchronous-programming/callback/</guid>
      <description>콜백(Callback)은 다른 함수에 인자로 전달되는 함수를 의미한다.</description>
    </item>
    <item>
      <title>Language Syntax</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/programming-fundamentals/basic-concepts/language-syntax/</link>
      <pubDate>Fri, 04 Oct 2024 03:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/programming-fundamentals/basic-concepts/language-syntax/</guid>
      <description>프로그래밍 언어의 구문(Language Syntax)은 코드의 구조와 형식을 결정하는 규칙 집합으로, 코드가 올바르게 실행되기 위한 기초 역할을 한다.</description>
    </item>
    <item>
      <title>Programming Languages Overview</title>
      <link>https://buenhyden.github.io/posts/programming-languages/overview/</link>
      <pubDate>Thu, 19 Sep 2024 10:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/overview/</guid>
      <description>프로그래밍 언어는 **표현 방법 (문법)** 과 **의미 (의미론)** 를 규정하며, 하드웨어 독립성과 추상화 레벨에 따라 고/저급 언어로 분류된다. 컴파일러·인터프리터·JIT 기반의 구현 방식과 객체지향, 함수형, 절차적 같은 패러다임을 통해 다양한 문제 해결에 최적화돼 있으며, 실무에서는 성능, 안전성, 유지보수성을 고려해 선택된다.</description>
    </item>
    <item>
      <title>Low-Level Virtual Machine</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/interpreter-vs-compiler-vs-assembler/compiler/low-level-virtual-machine/</link>
      <pubDate>Thu, 05 Dec 2024 03:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/interpreter-vs-compiler-vs-assembler/compiler/low-level-virtual-machine/</guid>
      <description>LLVM은 소스 코드를 최적화하고 대상 플랫폼에 맞는 기계어로 변환하는 모듈식 컴파일러 프레임워크</description>
    </item>
    <item>
      <title>Functions</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/programming-fundamentals/basic-concepts/functions-and-procedures/functions/</link>
      <pubDate>Thu, 05 Dec 2024 01:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/programming-fundamentals/basic-concepts/functions-and-procedures/functions/</guid>
      <description>함수는 프로그래밍의 핵심 구성 요소로, 특정 작업을 수행하는 독립적이고 재사용 가능한 코드 블록이다.</description>
    </item>
    <item>
      <title>Cross Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/compiler-types/cross-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 15:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/compiler-types/cross-compiler/</guid>
      <description>크로스 컴파일러는 현재 코드를 실행하는 환경(호스트)와는 다른 플랫폼(대상)에서 실행될 수 있는 실행 파일이나 바이너리를 생성하는 컴파일러</description>
    </item>
    <item>
      <title>컴파일러(Compiler)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/interpreter-vs-compiler-vs-assembler/compiler/</link>
      <pubDate>Sun, 06 Oct 2024 05:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/interpreter-vs-compiler-vs-assembler/compiler/</guid>
      <description>우리가 작성한 프로그래밍 언어(고급 언어)를 컴퓨터가 이해할 수 있는 기계어(저급 언어)로 번역해주는 특별한 프로그램</description>
    </item>
    <item>
      <title>Python vs Javascript vs Typescript vs Java</title>
      <link>https://buenhyden.github.io/posts/programming-languages/overview/python-vs-javascript-vs-typescript-vs-java/</link>
      <pubDate>Sun, 19 Jan 2025 00:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/overview/python-vs-javascript-vs-typescript-vs-java/</guid>
      <description>프로그래밍 언어마다 각기 다른 설계 철학과 실행 방식, 개발 생태계 및 목적이 존재한다.</description>
    </item>
    <item>
      <title>LLVM vs 기존 컴파일러 비교</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/interpreter-vs-compiler-vs-assembler/compiler/llvm-vs-%EA%B8%B0%EC%A1%B4-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC-%EB%B9%84%EA%B5%90/</link>
      <pubDate>Thu, 05 Dec 2024 07:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/interpreter-vs-compiler-vs-assembler/compiler/llvm-vs-%EA%B8%B0%EC%A1%B4-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC-%EB%B9%84%EA%B5%90/</guid>
      <description>LLVM은 현대 컴파일러 인프라스트럭처의 중요한 혁신으로, 모듈화된 설계, 강력한 최적화 기능, 다양한 언어와 타겟 지원을 통해 소프트웨어 개발 환경을 크게 발전시켰다.  전통적인 컴파일러와 비교할 때, LLVM은 재사용성, 확장성, 개발자 친화적 도구 측면에서 큰 강점을 가지고 있다.</description>
    </item>
    <item>
      <title>Python Web Framework</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/</link>
      <pubDate>Fri, 29 Nov 2024 04:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/</guid>
      <description>동적 웹사이트, 웹 서비스 및 웹 애플리케이션의 개발을 지원하기 위해 만들어진 소프트웨어 프레임워크</description>
    </item>
    <item>
      <title>Ahead-of-Time Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/compiler-types/ahead-of-time-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 18:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/compiler-types/ahead-of-time-compiler/</guid>
      <description>**Ahead-of-Time(AOT) 컴파일러**는 프로그램 실행 전에 소스 코드나 중간 언어(예: 바이트코드)를 **네이티브 머신 코드로 미리 변환**하는 기술</description>
    </item>
    <item>
      <title>Callback Hell</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/asynchronous-programming/callback/callback-hell/</link>
      <pubDate>Wed, 09 Oct 2024 05:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/asynchronous-programming/callback/callback-hell/</guid>
      <description>콜백 지옥(Callback Hell)은 JavaScript 등의 비동기 프로그래밍 환경에서 중첩된 콜백 함수가 과도하게 사용되어 코드의 가독성과 유지보수성을 크게 저하시키는 현상을 의미한다.</description>
    </item>
    <item>
      <title>인터프리터(Interpreter)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/interpreter-vs-compiler-vs-assembler/interpreter/</link>
      <pubDate>Sun, 06 Oct 2024 05:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/interpreter-vs-compiler-vs-assembler/interpreter/</guid>
      <description>프로그래밍 언어의 소스 코드를 직접 실행하는 프로그램 또는 환경</description>
    </item>
    <item>
      <title>Interpreter vs Compiler vs Assembler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/interpreter-vs-compiler-vs-assembler/</link>
      <pubDate>Thu, 05 Dec 2024 03:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/interpreter-vs-compiler-vs-assembler/</guid>
      <description>컴파일러, 인터프리터, 어셈블러는 소스 코드를 기계가 이해할 수 있는 형태로 변환하는 서로 다른 언어 처리 도구이다.</description>
    </item>
    <item>
      <title>의사코드(Pseudocode)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/programming-fundamentals/code-organization/pseudocode/</link>
      <pubDate>Thu, 05 Dec 2024 01:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/programming-fundamentals/code-organization/pseudocode/</guid>
      <description>의사코드(Pseudocode)는 알고리즘을 설명하기 위한 비공식적이고 고수준의 표현 방식으로, 특정 프로그래밍 언어의 문법에 얽매이지 않고 간단한 텍스트 형태로 작성된다.</description>
    </item>
    <item>
      <title>Python</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/</link>
      <pubDate>Sun, 27 Oct 2024 01:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/</guid>
      <description>다양한 특징을 가진 강력하고 유연한 프로그래밍 언어</description>
    </item>
    <item>
      <title>Just-In-Time (JIT) Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/compiler-types/just-in-time-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 17:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/compiler-types/just-in-time-compiler/</guid>
      <description>**JIT(Just-In-Time) 컴파일**은 프로그램 실행 시점에 코드를 기계어로 변환하는 기술로, **인터프리터의 유연성**과 **컴파일러의 성능**을 결합한 혁신적인 방식</description>
    </item>
    <item>
      <title>Native Compiler vs Cross Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/interpreter-vs-compiler-vs-assembler/compiler/native-compiler-vs-cross-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 03:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/interpreter-vs-compiler-vs-assembler/compiler/native-compiler-vs-cross-compiler/</guid>
      <description>Native Compiler와 Cross Compiler는 모두 프로그래밍 언어로 작성된 소스 코드를 기계어 또는 실행 가능한 바이너리로 변환하는 컴파일 도구이지만, 그들이 생성하는 산출물이 실행되는 대상이 서로 다르다는 점에서 구분된다.</description>
    </item>
    <item>
      <title>JIT Compiler vs AOT Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/interpreter-vs-compiler-vs-assembler/compiler/jit-compiler-vs-aot-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 18:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/interpreter-vs-compiler-vs-assembler/compiler/jit-compiler-vs-aot-compiler/</guid>
      <description>JIT 컴파일러와 AOT 컴파일러는 모두 소스 코드 또는 중간 표현(바이트코드)을 기계어 코드로 변환한다는 공통점을 가지지만, 언제 그리고 어떻게 컴파일하는지에 큰 차이가 있다</description>
    </item>
    <item>
      <title>Java</title>
      <link>https://buenhyden.github.io/posts/programming-languages/java/</link>
      <pubDate>Wed, 20 Nov 2024 01:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/java/</guid>
      <description>제임스 고슬링(James Gosling)과 썬 마이크로시스템즈(Sun Microsystems)에서 개발한 객체 지향 프로그래밍 언어.</description>
    </item>
    <item>
      <title>Typescript</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/typescript/</link>
      <pubDate>Wed, 20 Nov 2024 11:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/typescript/</guid>
      <description>TypeScript는 Microsoft가 개발한 오픈소스 프로그래밍 언어로, JavaScript의 상위 집합(superset)으로, JavaScript의 모든 기능을 포함하면서 정적 타입 시스템을 추가</description>
    </item>
    <item>
      <title>가비지 컬렉션 (Garbage Collection, GC)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/memory-management/garbage-collection/</link>
      <pubDate>Sun, 06 Oct 2024 10:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/memory-management/garbage-collection/</guid>
      <description>프로그래밍 언어의 메모리 관리 기법 중 하나로, 프로그램이 동적으로 할당했던 메모리 영역 중에서 더 이상 사용하지 않는 영역을 자동으로 찾아내어 해제하는 기능</description>
    </item>
    <item>
      <title>Programming Languages</title>
      <link>https://buenhyden.github.io/posts/programming-languages/</link>
      <pubDate>Thu, 19 Sep 2024 10:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/</guid>
      <description>프로그래밍 언어는 **표현 방법 (문법)** 과 **의미 (의미론)** 를 규정하며, 하드웨어 독립성과 추상화 레벨에 따라 고/저급 언어로 분류된다. 컴파일러·인터프리터·JIT 기반의 구현 방식과 객체지향, 함수형, 절차적 같은 패러다임을 통해 다양한 문제 해결에 최적화돼 있으며, 실무에서는 성능, 안전성, 유지보수성을 고려해 선택된다.</description>
    </item>
    <item>
      <title>Blocking vs Non-Blocking</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/system-software/operating-systems/io-system-fundamentals/io-models/blocking-vs-non-blocking/</link>
      <pubDate>Sun, 06 Oct 2024 12:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/system-software/operating-systems/io-system-fundamentals/io-models/blocking-vs-non-blocking/</guid>
      <description>프로그래밍에서 작업 처리 방식에 따라 프로그램의 실행 흐름이 어떻게 영향을 받는지를 설명하는 개념.</description>
    </item>
    <item>
      <title>Poetry vs uv vs Rye</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry-vs-uv-vs-rye/</link>
      <pubDate>Wed, 27 Nov 2024 06:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry-vs-uv-vs-rye/</guid>
      <description>파이썬 프로젝트 관리와 패키지 설치를 위한 도구들</description>
    </item>
    <item>
      <title>Callback vs Promise vs Async/Await</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/asynchronous-programming/callback-vs-promise-vs-async-await/</link>
      <pubDate>Sat, 23 Nov 2024 09:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/asynchronous-programming/callback-vs-promise-vs-async-await/</guid>
      <description>JavaScript의 비동기 처리 방식</description>
    </item>
    <item>
      <title>setup.cfg vs pyproject.toml</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/configuration/setup.cfg-vs-pyproject.toml/</link>
      <pubDate>Wed, 27 Nov 2024 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/configuration/setup.cfg-vs-pyproject.toml/</guid>
      <description>Python 프로젝트의 구성과 메타데이터를 정의하는 파일 형식이다.</description>
    </item>
    <item>
      <title>NodeJS vs. Javascript</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/nodejs-javascript/</link>
      <pubDate>Sat, 23 Nov 2024 09:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/nodejs-javascript/</guid>
      <description>JavaScript는 웹 페이지에 동적인 기능을 추가하기 위해 만들어진 프로그래밍 언어이며, Node.js는 JavaScript를 서버 측에서 실행할 수 있게 해주는 런타임 환경이다.</description>
    </item>
    <item>
      <title>import vs require</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/modules/import-vs-require/</link>
      <pubDate>Sat, 23 Nov 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/modules/import-vs-require/</guid>
      <description>`require`는 Node.js에서 사용되는 CommonJS 모듈 시스템의 키워드로, 동기적으로 모듈을 로드하며 프로그램의 어느 지점에서나 호출할 수 있다. 반면에 `import`는 ES6에서 도입된 모듈 시스템의 키워드로, 코드 실행 전에 모듈을 미리 로드하며 파일의 시작 부분에서만 사용할 수 있다.</description>
    </item>
    <item>
      <title>Javascript Engines</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/language-internals/javascript-engines/</link>
      <pubDate>Mon, 24 Feb 2025 09:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/language-internals/javascript-engines/</guid>
      <description>JavaScript 엔진은 JavaScript 코드를 이해하고 실행하는 프로그램으로, 웹 브라우저나 Node.js와 같은 환경에서 JavaScript 코드를 해석하고 실행하는 핵심 요소이다.</description>
    </item>
    <item>
      <title>prefetch_related</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/django/orm/queryset/optimization/prefetch_related/</link>
      <pubDate>Sat, 08 Feb 2025 02:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/django/orm/queryset/optimization/prefetch_related/</guid>
      <description>`prefetch_related`는 Django ORM에서 관련 객체들을 미리 가져오기 위해 사용하는 메서드로, 주로 &amp;#34;many-to-many&amp;#34; 또는 &amp;#34;one-to-many&amp;#34; 관계에서 발생하는 N&#43;1 쿼리 문제를 해결하기 위해 설계되었다.</description>
    </item>
    <item>
      <title>select_related</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/django/orm/queryset/optimization/select_related/</link>
      <pubDate>Sat, 08 Feb 2025 02:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/django/orm/queryset/optimization/select_related/</guid>
      <description>SQL의 JOIN 연산을 활용하여 외래 키(Foreign Key) 관계가 있는 객체를 단일 쿼리로 함께 가져오는 메서드</description>
    </item>
    <item>
      <title>ORM</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/django/orm/</link>
      <pubDate>Fri, 07 Feb 2025 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/django/orm/</guid>
      <description>Django ORM은 Python 클래스(모델)를 데이터베이스 테이블에 매핑하고, 모델 인스턴스를 테이블의 행으로 매핑한다. 이를 통해 개발자는 SQL 쿼리를 직접 작성하지 않고도 데이터베이스 작업을 수행할 수 있게 된다.</description>
    </item>
    <item>
      <title>asyncio</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/concurrency/asyncio/</link>
      <pubDate>Sun, 19 Jan 2025 06:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/concurrency/asyncio/</guid>
      <description>Python의 `asyncio`는 비동기 I/O 프로그래밍을 지원하는 표준 라이브러리로, `async/await` 구문을 활용해 동시성 코드를 작성할 수 있게 해 준다. 특히 I/O 바운드 작업(네트워크 통신, 파일 입출력 등)에서 성능을 극대화할 수 있다.</description>
    </item>
    <item>
      <title>Greenlet and Gevent</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/concurrency/greenlet-and-gevent/</link>
      <pubDate>Sun, 19 Jan 2025 05:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/concurrency/greenlet-and-gevent/</guid>
      <description>Greenlet과 Gevent는 Python에서 동시성 프로그래밍을 위한 라이브러리이다.</description>
    </item>
    <item>
      <title>Typescript vs. Javascript</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/typescript-vs-javascript/</link>
      <pubDate>Sun, 19 Jan 2025 00:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/typescript-vs-javascript/</guid>
      <description>JavaScript와 TypeScript는 둘 다 웹 및 기타 환경에서 널리 사용되는 프로그래밍 언어이지만, 설계와 사용 목적에 있어 몇 가지 중요한 차이가 있다.</description>
    </item>
    <item>
      <title>Modin</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/modin/</link>
      <pubDate>Fri, 17 Jan 2025 07:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/modin/</guid>
      <description>pandas를 대체할 수 있는 고성능 데이터프레임 라이브러리</description>
    </item>
    <item>
      <title>Dask</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/dask/</link>
      <pubDate>Fri, 17 Jan 2025 07:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/dask/</guid>
      <description>파이썬을 위한 유연한 병렬 컴퓨팅 라이브러리</description>
    </item>
    <item>
      <title>Polars</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/polars/</link>
      <pubDate>Fri, 17 Jan 2025 07:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/polars/</guid>
      <description>고성능 데이터 처리를 위해 설계된 파이썬 DataFrame 라이브러리</description>
    </item>
    <item>
      <title>Numpy</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/numpy/</link>
      <pubDate>Fri, 17 Jan 2025 07:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/numpy/</guid>
      <description>파이썬에서 과학 계산을 위한 핵심 라이브러리.</description>
    </item>
    <item>
      <title>pandas</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/pandas/</link>
      <pubDate>Fri, 17 Jan 2025 05:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/pandas/</guid>
      <description>데이터를 다루기 위한 강력한 도구로, 엑셀의 스프레드시트와 비슷한 형태로 데이터를 처리할 수 있게 해준다.</description>
    </item>
    <item>
      <title>Event Loop</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/language-internals/event-loop-and-concurrency/event-loop/</link>
      <pubDate>Thu, 26 Dec 2024 14:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/language-internals/event-loop-and-concurrency/event-loop/</guid>
      <description>Node.js의 이벤트 루프는 Node.js 애플리케이션의 핵심 작동 원리로, 비동기 I/O 작업을 효율적으로 처리하는 메커니즘이다.</description>
    </item>
    <item>
      <title>Currying vs. Partial Application</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/asynchronous-programming/callback/currying-vs-partial-application/</link>
      <pubDate>Thu, 26 Dec 2024 10:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/asynchronous-programming/callback/currying-vs-partial-application/</guid>
      <description> 커링(Currying)과 부분 적용(Partial Application)은 콜백 함수를 다루는 강력한 패턴으로, 코드의 재사용성과 모듈성을 크게 향상시킨다.</description>
    </item>
    <item>
      <title>Partial Application</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/asynchronous-programming/callback/partial-application/</link>
      <pubDate>Thu, 26 Dec 2024 09:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/asynchronous-programming/callback/partial-application/</guid>
      <description>부분 적용이란 여러 개의 인자를 받는 함수에 일부 인자를 미리 제공하여, 나머지 인자만 받는 새로운 함수를 생성하는 기법이다.</description>
    </item>
    <item>
      <title>Currying</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/asynchronous-programming/callback/currying/</link>
      <pubDate>Thu, 26 Dec 2024 07:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/asynchronous-programming/callback/currying/</guid>
      <description>여러 개의 인자를 받는 함수를 단일 인자를 받는 일련의 함수들로 변환하는 기법이다.</description>
    </item>
    <item>
      <title>Tree Shaking</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/build-tools-and-bundlers/module-bundlers/tree-shaking/</link>
      <pubDate>Thu, 26 Dec 2024 07:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/build-tools-and-bundlers/module-bundlers/tree-shaking/</guid>
      <description>트리 쉐이킹(Tree Shaking)은 사용되지 않는 코드를 최종 번들에서 제거하는 프로세스</description>
    </item>
    <item>
      <title>Temporal Dead Zone</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/syntax-and-basic-types/variables/temporal-dead-zone/</link>
      <pubDate>Wed, 25 Dec 2024 15:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/syntax-and-basic-types/variables/temporal-dead-zone/</guid>
      <description>일시적 사각지대(Temporal Dead Zone, TDZ)는 JavaScript에서 변수가 선언되었지만 아직 초기화되지 않은 상태로 존재하는 코드 영역을 의미한다.</description>
    </item>
    <item>
      <title>Block</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/functions-and-scope/scopes/block/</link>
      <pubDate>Wed, 25 Dec 2024 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/functions-and-scope/scopes/block/</guid>
      <description>JavaScript에서 블록 스코프(Block Scope) 는 중괄호(`{}`)로 감싸진 코드 블록 내에서 선언된 변수나 함수가 해당 블록 내부에서만 유효한 범위를 의미한다</description>
    </item>
    <item>
      <title>Function</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/functions-and-scope/scopes/function/</link>
      <pubDate>Wed, 25 Dec 2024 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/functions-and-scope/scopes/function/</guid>
      <description>함수 스코프란 함수 내부에 선언된 변수와 함수가 해당 함수 내부에서만 접근 가능하다는 JavaScript의 특성을 의미한다.</description>
    </item>
    <item>
      <title>Global</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/functions-and-scope/scopes/global/</link>
      <pubDate>Wed, 25 Dec 2024 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/functions-and-scope/scopes/global/</guid>
      <description>자바스크립트에서 글로벌 스코프는 코드 전체에서 접근할 수 있는 가장 넓은 범위를 의미하며, 여기서 선언된 변수나 함수는 프로그램 전반에서 사용이 가능하다.</description>
    </item>
    <item>
      <title>Hoisting</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/syntax-and-basic-types/variables/hoisting/</link>
      <pubDate>Wed, 25 Dec 2024 14:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/syntax-and-basic-types/variables/hoisting/</guid>
      <description>JavaScript 엔진이 코드를 실행하기 전에 변수, 함수, 클래스 또는 임포트의 선언부를 스코프의 최상단으로 끌어올리는 것처럼 동작하는 JavaScript의 메커니즘으로, 이름 그대로 &amp;#39;끌어올린다(hoist)&amp;#39;는 의미를 가진다.</description>
    </item>
    <item>
      <title>Variable Declarations</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/syntax-and-basic-types/variables/variable-declarations/</link>
      <pubDate>Wed, 25 Dec 2024 14:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/syntax-and-basic-types/variables/variable-declarations/</guid>
      <description>프로그램에서 데이터를 저장하고 참조하는 데 사용되는 중요한 개념이다. 변수 선언 방식에 따라 변수의 **유효 범위(Scope)**와 **재할당 가능 여부** 등이 결정된다.</description>
    </item>
    <item>
      <title>변수 명명 규칙(Variable Naming Rules)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/syntax-and-basic-types/variables/naming-rules/</link>
      <pubDate>Wed, 25 Dec 2024 14:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/syntax-and-basic-types/variables/naming-rules/</guid>
      <description>JavaScript의 변수 명명 규칙(Variable Naming Rules)</description>
    </item>
    <item>
      <title>scopes</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/functions-and-scope/scopes/</link>
      <pubDate>Wed, 25 Dec 2024 00:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/functions-and-scope/scopes/</guid>
      <description>JavaScript의 스코프는 변수와 함수의 접근성과 생존 기간을 결정하는 중요한 개념으로, 변수나 함수가 **유효하게 접근할 수 있는 범위**를 의미한다.</description>
    </item>
    <item>
      <title>Type Casting</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/data-types-and-structures/data-types/type-casting/</link>
      <pubDate>Tue, 24 Dec 2024 13:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/data-types-and-structures/data-types/type-casting/</guid>
      <description>파이썬에서는 다양한 내장 함수를 사용하여 데이터 타입을 변환할 수 있다.</description>
    </item>
    <item>
      <title>Data Types</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/data-types-and-structures/data-types/</link>
      <pubDate>Tue, 24 Dec 2024 11:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/data-types-and-structures/data-types/</guid>
      <description>Python은 동적 타입 언어로, 변수를 선언할 때 명시적으로 타입을 지정할 필요가 없다.  하지만 각 데이터 타입을 이해하는 것은 효율적인 코딩과 디버깅에 필수적이다.</description>
    </item>
    <item>
      <title>NodeJS vs. FastAPI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/nodejs-vs-fastapi/</link>
      <pubDate>Sun, 22 Dec 2024 10:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/nodejs-vs-fastapi/</guid>
      <description>Node.js와 FastAPI는 각각 JavaScript와 Python 생태계에서 인기 있는 백엔드 기술로, 서로 다른 접근 방식과 강점을 가지고 있다.</description>
    </item>
    <item>
      <title>NodeJS vs. Flask</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/nodejs-vs-flask/</link>
      <pubDate>Sun, 22 Dec 2024 10:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/nodejs-vs-flask/</guid>
      <description>Node.js와 Flask는 현대 웹 애플리케이션 개발에 널리 사용되는 두 가지 인기 있는 백엔드 기술이다.  이 두 기술은 각각 다른 언어(JavaScript vs Python), 다른 철학, 그리고 서로 다른 접근 방식을 가지고 있다.</description>
    </item>
    <item>
      <title>ES Modules vs. CommonJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/modules/es-modules-vs-commonjs/</link>
      <pubDate>Sun, 22 Dec 2024 04:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/modules/es-modules-vs-commonjs/</guid>
      <description>ES Modules(ESM)과 CommonJS(CJS)는 JavaScript에서 사용되는 두 가지 주요 모듈 시스템이다.</description>
    </item>
    <item>
      <title>CommonJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/modules/commonjs/</link>
      <pubDate>Sun, 22 Dec 2024 04:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/modules/commonjs/</guid>
      <description>자바스크립트를 브라우저 외부 환경, 특히 서버 사이드에서 사용하기 위해 만들어진 모듈 시스템</description>
    </item>
    <item>
      <title>ES Modules</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/modules/es6/</link>
      <pubDate>Sun, 22 Dec 2024 04:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/modules/es6/</guid>
      <description>JavaScript 코드를 모듈 단위로 구성하고 관리할 수 있게 해주는 공식 표준 모듈 시스템이다.  이 시스템은 ECMAScript 2015(ES6)에서 처음 도입되었으며, 코드의 재사용성, 유지보수성, 그리고 의존성 관리를 크게 향상시켰다</description>
    </item>
    <item>
      <title>NodeJS vs. Django</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/nodejs-vs-django/</link>
      <pubDate>Sun, 22 Dec 2024 03:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/nodejs-vs-django/</guid>
      <description>Node.js와 Django는 각각 다른 철학, 접근 방식, 그리고 강점을 가진 인기 있는 두 가지 백엔드 기술이다.</description>
    </item>
    <item>
      <title>BunJS vs. NodeJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/bunjs/bunjs-vs-nodejs/</link>
      <pubDate>Sun, 22 Dec 2024 03:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/bunjs/bunjs-vs-nodejs/</guid>
      <description>서버 사이드 JavaScript 런타임인 BunJS와 NodeJS의 비교</description>
    </item>
    <item>
      <title>SQLAlchemy</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/orms/sqlalchemy/</link>
      <pubDate>Sat, 30 Nov 2024 09:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/orms/sqlalchemy/</guid>
      <description>파이썬에서 사용되는 강력하고 유연한 SQL 툴킷 및 객체 관계 매핑(ORM) 라이브러리</description>
    </item>
    <item>
      <title>daphne</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/web-application-server/asgi-server/daphne/</link>
      <pubDate>Sat, 30 Nov 2024 08:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/web-application-server/asgi-server/daphne/</guid>
      <description>Daphne는 Django Channels를 위해 개발된 HTTP, HTTP2 및 WebSocket 프로토콜 서버이다.</description>
    </item>
    <item>
      <title>uvicorn</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/web-application-server/asgi-server/uvicorn/</link>
      <pubDate>Sat, 30 Nov 2024 08:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/web-application-server/asgi-server/uvicorn/</guid>
      <description>Uvicorn은 Python용 ASGI(Asynchronous Server Gateway Interface) 웹 서버 구현체이다.</description>
    </item>
    <item>
      <title>Celery</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/task-queue/celery/</link>
      <pubDate>Sat, 30 Nov 2024 07:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/task-queue/celery/</guid>
      <description>Celery는 파이썬으로 작성된 분산 작업 큐 시스템이다.  주로 웹 애플리케이션에서 비동기 작업 처리와 작업 스케줄링을 위해 사용된다.</description>
    </item>
    <item>
      <title>gunicorn</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/web-application-server/wsgi-server/gunicorn/</link>
      <pubDate>Sat, 30 Nov 2024 03:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/web-application-server/wsgi-server/gunicorn/</guid>
      <description>Gunicorn(Green Unicorn)은 Python WSGI(Web Server Gateway Interface) HTTP 서버로, 파이썬 웹 애플리케이션을 위한 강력하고 효율적인 서버 솔루션이다.</description>
    </item>
    <item>
      <title>UWSGI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/web-application-server/wsgi-server/uwsgi/</link>
      <pubDate>Sat, 30 Nov 2024 03:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/web-application-server/wsgi-server/uwsgi/</guid>
      <description>파이썬 웹 애플리케이션을 위한 강력하고 유연한 애플리케이션 서버</description>
    </item>
    <item>
      <title>pydantic</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/validation/pydantic/</link>
      <pubDate>Sat, 30 Nov 2024 03:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/validation/pydantic/</guid>
      <description>데이터 검증과 설정 관리를 위한 라이브러리</description>
    </item>
    <item>
      <title>Pytest</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/testing/pytest/</link>
      <pubDate>Fri, 29 Nov 2024 23:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/testing/pytest/</guid>
      <description>파이썬을 위한 강력하고 유연한 테스트 프레임워크</description>
    </item>
    <item>
      <title>Unittest</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/testing/unittest/</link>
      <pubDate>Fri, 29 Nov 2024 23:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/testing/unittest/</guid>
      <description>파이썬의 표준 라이브러리에 포함된 단위 테스트 프레임워크</description>
    </item>
    <item>
      <title>Python Testing</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/testing/</link>
      <pubDate>Fri, 29 Nov 2024 14:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/testing/</guid>
      <description>Python에서 활용할 수 있는 다양한 테스팅 도구</description>
    </item>
    <item>
      <title>Starlette</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/starlette/</link>
      <pubDate>Fri, 29 Nov 2024 03:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/starlette/</guid>
      <description>고성능 비동기 웹 애플리케이션을 구축하기 위한 경량 ASGI 프레임워크</description>
    </item>
    <item>
      <title>Django</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/django/</link>
      <pubDate>Fri, 29 Nov 2024 02:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/django/</guid>
      <description>웹 개발에 필요한 모든 요소를 포함하는 풀 스택 프레임워크</description>
    </item>
    <item>
      <title>Flask</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/flask/</link>
      <pubDate>Fri, 29 Nov 2024 02:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/flask/</guid>
      <description>&amp;#34;마이크로 프레임워크&amp;#34;라고 불리는 Flask는 핵심 기능만을 가볍게 유지하면서도 필요에 따라 확장할 수 있는 유연한 구조를 제공한다.</description>
    </item>
    <item>
      <title>FastAPI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/fastapi/</link>
      <pubDate>Fri, 29 Nov 2024 02:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/fastapi/</guid>
      <description>Python 3.6&#43; 의 타입 힌트를 기반으로 하며, 비동기 프로그래밍을 지원하는 고성능 웹 프레임워크</description>
    </item>
    <item>
      <title>Python Linter와 Formatter</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/</link>
      <pubDate>Thu, 28 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/</guid>
      <description>Python에서 활용할 수 있는 소스 코드에서 문법 오류나 스타일 문제, 잠재적인 버그를 자동으로 검사해주는 도구</description>
    </item>
    <item>
      <title>ruff</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/ruff/</link>
      <pubDate>Thu, 28 Nov 2024 08:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/ruff/</guid>
      <description>Python 코드 품질을 개선하기 위한 린터</description>
    </item>
    <item>
      <title>ASGI vs CGI vs WSGI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/gateway-interface/</link>
      <pubDate>Thu, 28 Nov 2024 03:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/gateway-interface/</guid>
      <description>웹 서버와 애플리케이션 간의 통신 방식을 정의하는 인터페이스 규격</description>
    </item>
    <item>
      <title>autopep8</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/autopep8/</link>
      <pubDate>Thu, 28 Nov 2024 03:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/autopep8/</guid>
      <description>Python 코드를 PEP 8 스타일 가이드라인에 맞게 자동으로 포맷팅해주는 도구</description>
    </item>
    <item>
      <title>Black</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/black/</link>
      <pubDate>Thu, 28 Nov 2024 03:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/black/</guid>
      <description>파이썬을 위한 강력하고 엄격한 코드 포매터</description>
    </item>
    <item>
      <title>Flake8</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/flake8/</link>
      <pubDate>Thu, 28 Nov 2024 03:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/flake8/</guid>
      <description>파이썬 코드를 위한 강력한 린팅(linting) 도구</description>
    </item>
    <item>
      <title>YAPF(Yet Another Python Formatter)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/yapf/</link>
      <pubDate>Thu, 28 Nov 2024 03:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/yapf/</guid>
      <description>Google에서 개발한 파이썬 코드 포매터.</description>
    </item>
    <item>
      <title>Pylint</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/pylint/</link>
      <pubDate>Thu, 28 Nov 2024 03:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/pylint/</guid>
      <description>파이썬 코드의 품질을 검사하고 개선하는데 도움을 주는 강력한 정적 코드 분석 도구</description>
    </item>
    <item>
      <title>CGI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/gateway-interface/cgi/</link>
      <pubDate>Thu, 28 Nov 2024 03:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/gateway-interface/cgi/</guid>
      <description>웹 서버와 외부 프로그램 간의 통신을 위한 표준 인터페이스</description>
    </item>
    <item>
      <title>WSGI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/gateway-interface/wsgi/</link>
      <pubDate>Thu, 28 Nov 2024 03:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/gateway-interface/wsgi/</guid>
      <description>파이썬 웹 애플리케이션과 웹 서버 간의 표준 인터페이스를 정의하는 규약</description>
    </item>
    <item>
      <title>setup.cfg</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/configuration/setup.cfg/</link>
      <pubDate>Wed, 27 Nov 2024 14:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/configuration/setup.cfg/</guid>
      <description>파이썬 프로젝트의 설정을 관리하는 구성 파일</description>
    </item>
    <item>
      <title>Poetry</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/</link>
      <pubDate>Wed, 27 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/</guid>
      <description>Python 프로젝트의 의존성 관리와 패키징을 위한 도구</description>
    </item>
    <item>
      <title>Poetry Configuration</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/poetry-configuration/</link>
      <pubDate>Wed, 27 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/poetry-configuration/</guid>
      <description>`config` 명령어나 `config.toml` 파일을 통해 설정할 수 있다.</description>
    </item>
    <item>
      <title>Poetry Libraries</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/poetry-libraries/</link>
      <pubDate>Wed, 27 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/poetry-libraries/</guid>
      <description>Poetry는 파이썬 라이브러리를 효율적으로 관리하고 배포할 수 있도록 지원하는 도구로 라이브러리를 설치 가능하게 만들기 위해 다음과 같은 절차를 따를 수 있다.</description>
    </item>
    <item>
      <title>Poetry Managing dependencies</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/poetry-managing-dependencies/</link>
      <pubDate>Wed, 27 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/poetry-managing-dependencies/</guid>
      <description>Poetry는 의존성을 효율적으로 관리하기 위해 다양한 기능을 제공한다.</description>
    </item>
    <item>
      <title>Poetry Usage</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/poetry-usage/</link>
      <pubDate>Wed, 27 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/poetry-usage/</guid>
      <description>Python 프로젝트의 의존성 관리와 패키징을 위한 도구</description>
    </item>
    <item>
      <title>The pyproject.toml file</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/configuration/the-pyproject.toml-file/</link>
      <pubDate>Wed, 27 Nov 2024 06:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/configuration/the-pyproject.toml-file/</guid>
      <description>Python 프로젝트의 구성 정보와 빌드 시스템 요구 사항을 정의하는 표준화된 구성 파일</description>
    </item>
    <item>
      <title>Rye</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/rye/</link>
      <pubDate>Wed, 27 Nov 2024 04:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/rye/</guid>
      <description>Rye는 파이썬 프로젝트와 패키지 관리를 위한 통합 솔루션으로, 2022년 11월에 Pynecone이라는 이름으로 처음 공개되었으나, 2023년 6월에 Rye로 이름이 변경되었다.</description>
    </item>
    <item>
      <title>uv</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/uv/</link>
      <pubDate>Wed, 27 Nov 2024 04:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/uv/</guid>
      <description>Rust로 작성된 UV는 기존의 pip, pip-tools, virtualenv 등을 대체할 수 있는 초고속 파이썬 패키지 설치 및 의존성 해결 도구이다.</description>
    </item>
    <item>
      <title>PEP</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/</guid>
      <description>Python Enhancement Proposal의 약자로 파이썬 커뮤니티에 새로운 기능을 알리거나 설명하는 설계 문서.</description>
    </item>
    <item>
      <title>PEP 20–The Zen of Python</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-20-the-zen-of-python/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-20-the-zen-of-python/</guid>
      <description>파이썬의 철학과 디자인 원칙을 담고 있는 19개의 지침.</description>
    </item>
    <item>
      <title>PEP 257–Docstring Conventions</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-257docstring-conventions/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-257docstring-conventions/</guid>
      <description>Python 코드의 docstring 작성에 대한 규칙과 관례를 정의한 문서</description>
    </item>
    <item>
      <title>PEP 3000–Python 3000</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-3000python-3000/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-3000python-3000/</guid>
      <description>Python 3000 (Python 3.0 또는 Py3k로도 알려짐) 개발에 대한 가이드라인을 제시하는 문서</description>
    </item>
    <item>
      <title>PEP 3333–Python Web Server Gateway Interface V1.0.1</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-3333python-web-server-gateway-interface-v1/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-3333python-web-server-gateway-interface-v1/</guid>
      <description>Python Web Server Gateway Interface (WSGI) 버전 1.0.1을 정의하는 문서</description>
    </item>
    <item>
      <title>PEP 484–Type Hints</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-484type-hints/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-484type-hints/</guid>
      <description>Python에 타입 힌트(Type Hints)를 도입하여 함수의 인자와 반환값에 대한 타입을 명시할 수 있도록 하는 표준을 정의</description>
    </item>
    <item>
      <title>PEP 492–Coroutines with Async and Await Syntax</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-492coroutines-with-async-and-await-syntax/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-492coroutines-with-async-and-await-syntax/</guid>
      <description>Python에 비동기 프로그래밍을 위한 async와 await 구문을 도입하여 코루틴(coroutine)을 명시적으로 정의하고 사용하는 방법을 제안</description>
    </item>
    <item>
      <title>PEP 8-Style Guide for Python Code</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-8-style-guide-for-python-code/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-8-style-guide-for-python-code/</guid>
      <description>Python 코드의 스타일 가이드로, 가독성과 일관성을 높이기 위한 다양한 규칙과 권장사항을 제시</description>
    </item>
    <item>
      <title>Python-Special Methods</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/special-methods/</link>
      <pubDate>Mon, 25 Nov 2024 23:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/special-methods/</guid>
      <description>클래스에 특별한 기능을 부여하는 특수한 메소드</description>
    </item>
    <item>
      <title>Python - Iterators</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/iterators/</link>
      <pubDate>Mon, 25 Nov 2024 17:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/iterators/</guid>
      <description>데이터 컬렉션의 요소들을 순차적으로 접근할 수 있게 해주는 객체</description>
    </item>
    <item>
      <title>Structural Pattern Matching</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/control-flow/conditionals/structural-pattern-matching/</link>
      <pubDate>Mon, 25 Nov 2024 14:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/control-flow/conditionals/structural-pattern-matching/</guid>
      <description>Python 3.10부터 도입된 **구조적 패턴 매칭(Structural Pattern Matching)** 은 데이터의 구조와 값을 기반으로 코드의 흐름을 제어한다.</description>
    </item>
    <item>
      <title>Classes</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/</link>
      <pubDate>Mon, 25 Nov 2024 12:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/</guid>
      <description>Python의 클래스(class)는 객체 지향 프로그래밍의 핵심 개념으로, 데이터와 그 데이터를 조작하는 메서드를 하나의 단위로 묶는 틀이다.</description>
    </item>
    <item>
      <title>name mangling</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/name-mangling/</link>
      <pubDate>Mon, 25 Nov 2024 09:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/name-mangling/</guid>
      <description>파이썬에서 &amp;#34;name mangling&amp;#34;은 클래스 내부의 속성이나 메서드의 이름을 변경하는 기능이다.  이 기능은 주로 정보 은닉과 캡슐화를 위해 사용된다.</description>
    </item>
    <item>
      <title>Python Super</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/super/</link>
      <pubDate>Mon, 25 Nov 2024 02:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/super/</guid>
      <description>super()는 상속 관계에서 부모 클래스의 메서드를 호출하는 데 사용되는 중요한 도구.</description>
    </item>
    <item>
      <title>Method Resolution Order (MRO)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/method-resolution-order/</link>
      <pubDate>Mon, 25 Nov 2024 01:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/method-resolution-order/</guid>
      <description>파이썬에서 클래스의 상속 관계에서 메서드를 찾는 순서를 정의하는 규칙</description>
    </item>
    <item>
      <title>Conditionals</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/control-flow/conditionals/</link>
      <pubDate>Sun, 24 Nov 2024 12:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/control-flow/conditionals/</guid>
      <description>Python의 조건문(Conditional Statements)은 프로그램의 흐름을 제어하는 데 사용된다.</description>
    </item>
    <item>
      <title>classmethod and staticmethod</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/core-features/decorators-and-context-managers/decorators/classmethod-and-staticmethod/</link>
      <pubDate>Sun, 24 Nov 2024 12:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/core-features/decorators-and-context-managers/decorators/classmethod-and-staticmethod/</guid>
      <description>Python의 클래스에서 사용되는 두 가지 다른 종류의 메서드 데코레이터</description>
    </item>
    <item>
      <title>Python Keywords</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/syntax-basics/keywords/</link>
      <pubDate>Sun, 24 Nov 2024 10:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/syntax-basics/keywords/</guid>
      <description>파이썬에서 이미 예약되어있는 문자열</description>
    </item>
    <item>
      <title>Generator and Iterator</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/control-flow/generator-and-iterator/</link>
      <pubDate>Sun, 24 Nov 2024 10:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/control-flow/generator-and-iterator/</guid>
      <description>이터레이터는 값을 차례대로 반환하는 객체로, `__iter__()`와 `__next__()` 메서드를 구현한다.  제너레이터는 `yield` 키워드를 사용하여 값을 하나씩 반환하는 함수로, 이터레이터를 생성한다.</description>
    </item>
    <item>
      <title>Python - Generators</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/functions-and-modules/functions/generators/</link>
      <pubDate>Sun, 24 Nov 2024 08:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/functions-and-modules/functions/generators/</guid>
      <description>반복 가능한 객체를 생성하는 강력한 도구</description>
    </item>
    <item>
      <title>내장 데코레이터 (Built-in Decorator)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/core-features/decorators-and-context-managers/decorators/built-in-decorators/</link>
      <pubDate>Sun, 24 Nov 2024 07:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/core-features/decorators-and-context-managers/decorators/built-in-decorators/</guid>
      <description>파이썬에는 다양한 내장 데코레이터가 있으며, 이들은 코드를 최적화하고 기능을 확장하는 데 중요한 역할을 한다.</description>
    </item>
    <item>
      <title>Docstring</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/syntax-basics/comments/docstring/</link>
      <pubDate>Sun, 24 Nov 2024 03:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/syntax-basics/comments/docstring/</guid>
      <description>python에서 함수, 클래스, 모듈에 대한 문서화를 위해 사용되는 문자열</description>
    </item>
    <item>
      <title>연산자(Operators)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/syntax-basics/operations/</link>
      <pubDate>Sun, 24 Nov 2024 00:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/syntax-basics/operations/</guid>
      <description>연산자는 프로그래밍의 기본적인 구성 요소로, 데이터를 조작하고 계산하는 데 사용된다.</description>
    </item>
    <item>
      <title>Cypress</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/testing-frameworks/cypress/</link>
      <pubDate>Fri, 22 Nov 2024 23:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/testing-frameworks/cypress/</guid>
      <description>Cypress는 JavaScript 기반의 강력한 프론트엔드 테스팅 프레임워크.</description>
    </item>
    <item>
      <title>Jest</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/testing-frameworks/jest/</link>
      <pubDate>Fri, 22 Nov 2024 23:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/testing-frameworks/jest/</guid>
      <description>JavaScript 테스팅 프레임워크로, JavaScript 코드의 단위 테스트(Unit Test)를 위해 설계되었다.</description>
    </item>
    <item>
      <title>MochaJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/testing-frameworks/mochajs/</link>
      <pubDate>Fri, 22 Nov 2024 23:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/testing-frameworks/mochajs/</guid>
      <description>Mocha.js는 Node.js와 브라우저 환경 모두에서 동작하는 유연하고 강력한 JavaScript 코드의 단위 테스트, 통합 테스트 등을 위한 JavaScript 테스팅 프레임워크.</description>
    </item>
    <item>
      <title>Playwright</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/testing-frameworks/playwright/</link>
      <pubDate>Fri, 22 Nov 2024 23:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/testing-frameworks/playwright/</guid>
      <description>Playwright는 Microsoft에서 개발한 현대적이고 강력한 웹 자동화 및 테스팅 라이브러리</description>
    </item>
    <item>
      <title>Puppeteer</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/testing-frameworks/puppeteer/</link>
      <pubDate>Fri, 22 Nov 2024 23:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/testing-frameworks/puppeteer/</guid>
      <description>Google에서 개발한 Node.js 라이브러리로, 프로그래밍을 통해 Chrome 또는 Chromium 브라우저를 제어할 수 있게 해주는 고급 웹 자동화 도구</description>
    </item>
    <item>
      <title>Fastify</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/frameworks/fastify/</link>
      <pubDate>Fri, 22 Nov 2024 13:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/frameworks/fastify/</guid>
      <description>Fastify는 Node.js를 위한 빠르고 낮은 오버헤드의 웹 프레임워크</description>
    </item>
    <item>
      <title>Koa</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/frameworks/koa/</link>
      <pubDate>Fri, 22 Nov 2024 13:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/frameworks/koa/</guid>
      <description>Node.js를 위한 경량 웹 프레임워크로, Express.js 팀에 의해 개발되었다. Koa는 더 작고, 더 표현력이 풍부하며, 더 강력한 웹 애플리케이션과 API의 기초를 제공하기 위해 설계되었다.</description>
    </item>
    <item>
      <title>Javascript Web Framework</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/frameworks/</link>
      <pubDate>Fri, 22 Nov 2024 09:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/frameworks/</guid>
      <description>Javascript Web Framework의 프론트엔드 영역과 백엔드 영역의 대표적인 프레임워크와 라이브러리에 대해 비교분석해본다.</description>
    </item>
    <item>
      <title>jasmine</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/testing-frameworks/jasmine/</link>
      <pubDate>Fri, 22 Nov 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/testing-frameworks/jasmine/</guid>
      <description>Jasmine은 JavaScript 애플리케이션을 위한 행위 주도 개발(BDD) 스타일의 테스팅 프레임워크</description>
    </item>
    <item>
      <title>Karma</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/testing-frameworks/karma/</link>
      <pubDate>Fri, 22 Nov 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/testing-frameworks/karma/</guid>
      <description>Karma는 모든 브라우저에서 JavaScript 코드를 테스트할 수 있게 해주는 테스트 러너이다.</description>
    </item>
    <item>
      <title>ExpressJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/frameworks/expressjs/</link>
      <pubDate>Fri, 22 Nov 2024 03:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/frameworks/expressjs/</guid>
      <description>Express.js는 Node.js를 위한 빠르고 개방적인 웹 프레임워크</description>
    </item>
    <item>
      <title>NestJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/frameworks/nestjs/</link>
      <pubDate>Fri, 22 Nov 2024 01:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/frameworks/nestjs/</guid>
      <description>Nest.js는 효율적이고 확장 가능한 Node.js 서버 측 애플리케이션을 구축하기 위한 프레임워크</description>
    </item>
    <item>
      <title>winston</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/libraries/logging/winston/</link>
      <pubDate>Thu, 21 Nov 2024 15:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/libraries/logging/winston/</guid>
      <description>Winston은 Node.js 애플리케이션을 위한 다목적 로깅 라이브러리</description>
    </item>
    <item>
      <title>pino</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/libraries/logging/pino/</link>
      <pubDate>Thu, 21 Nov 2024 15:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/libraries/logging/pino/</guid>
      <description>Node.js를 위한 매우 빠르고 가벼운 로깅 라이브러리</description>
    </item>
    <item>
      <title>Mongoose</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/libraries/working-with-dbs/mongoose/</link>
      <pubDate>Thu, 21 Nov 2024 15:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/libraries/working-with-dbs/mongoose/</guid>
      <description>MongoDB와 Node.js 애플리케이션을 연결해주는 강력한 Object Document Mapper(ODM) 라이브러리</description>
    </item>
    <item>
      <title>Sequelize</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/libraries/working-with-dbs/sequelize/</link>
      <pubDate>Thu, 21 Nov 2024 15:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/libraries/working-with-dbs/sequelize/</guid>
      <description>Node.js 환경에서 사용되는 강력한 ORM(Object-Relational Mapping) 라이브러리</description>
    </item>
    <item>
      <title>Biome</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/linter-and-formatter/biome/</link>
      <pubDate>Thu, 21 Nov 2024 15:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/linter-and-formatter/biome/</guid>
      <description>JavaScript, TypeScript, JSX, TSX, JSON, CSS, GraphQL 등 다양한 웹 개발 언어를 위한 빠른 포매터이자 린터</description>
    </item>
    <item>
      <title>eslint</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/linter-and-formatter/eslint/</link>
      <pubDate>Thu, 21 Nov 2024 15:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/linter-and-formatter/eslint/</guid>
      <description>JavaScript 코드 분석 도구로, 코드의 품질을 향상시키고 잠재적인 문제를 미리 발견하는 것이 주요 목적</description>
    </item>
    <item>
      <title>prettier</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/linter-and-formatter/prettier/</link>
      <pubDate>Thu, 21 Nov 2024 15:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/linter-and-formatter/prettier/</guid>
      <description>JavaScript를 포함한 여러 웹 개발 언어를 위한 강력한 코드 포매터</description>
    </item>
    <item>
      <title>프로미스(Promises)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/asynchronous-programming/promises/</link>
      <pubDate>Thu, 21 Nov 2024 14:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/core-features/asynchronous-programming/promises/</guid>
      <description>자바스크립트에서 비동기 처리를 위해 사용되는 객체</description>
    </item>
    <item>
      <title>Javascript Linter와 Formatter</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/linter-and-formatter/</link>
      <pubDate>Thu, 21 Nov 2024 13:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/linter-and-formatter/</guid>
      <description>Javascript에서 활용할 수 있는 소스 코드에서 문법 오류나 스타일 문제, 잠재적인 버그를 자동으로 검사해주는 도구</description>
    </item>
    <item>
      <title>이벤트 루프(Event Loop)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/language-internals/event-loop-and-concurrency/event-loop/</link>
      <pubDate>Thu, 21 Nov 2024 12:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/language-internals/event-loop-and-concurrency/event-loop/</guid>
      <description>이벤트 루프(Event Loop)는 자바스크립트의 비동기 작업을 관리하고 실행하는 핵심 메커니즘으로, 싱글 스레드 언어인 자바스크립트가 비동기적으로 동작할 수 있게 해주는 중요한 요소이다.</description>
    </item>
    <item>
      <title>pm2</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/libraries/keep-app-running/pm2/</link>
      <pubDate>Thu, 21 Nov 2024 12:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/ecosystem--practice/runtime-environments/nodejs/ecosystem--practice/libraries/keep-app-running/pm2/</guid>
      <description>PM2는 Node.js 애플리케이션을 위한 고급 프로덕션 프로세스 관리자.</description>
    </item>
    <item>
      <title>jsdoc</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/docs/jsdoc/</link>
      <pubDate>Thu, 21 Nov 2024 11:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/docs/jsdoc/</guid>
      <description>JSDoc은 JavaScript 소스 코드에 대한 API 문서를 생성하기 위한 마크업 언어.</description>
    </item>
    <item>
      <title>Keywords</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/syntax-and-basic-types/keywords/</link>
      <pubDate>Thu, 21 Nov 2024 03:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-family/javascript/getting-started/syntax-and-basic-types/keywords/</guid>
      <description>키워드들은 JavaScript 프로그래밍의 기본 구성 요소이며, ECMAScript 표준의 일부이다.  각 키워드는 특정한 프로그래밍 목적을 위해 설계되었으며, 이들을 올바르게 이해하고 사용하는 것이 효과적인 JavaScript 프로그래밍의 기초가 된다.</description>
    </item>
    <item>
      <title>Spring</title>
      <link>https://buenhyden.github.io/posts/programming-languages/java/ecosystem--practice/spring-ecosystem/</link>
      <pubDate>Wed, 20 Nov 2024 09:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/java/ecosystem--practice/spring-ecosystem/</guid>
      <description>Spring은 Java 기반의 현대적인 엔터프라이즈 애플리케이션 개발을 위한 포괄적인 프레임워크</description>
    </item>
    <item>
      <title>Spring Boot</title>
      <link>https://buenhyden.github.io/posts/programming-languages/java/ecosystem--practice/spring-ecosystem/spring-boot/</link>
      <pubDate>Wed, 20 Nov 2024 04:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/java/ecosystem--practice/spring-ecosystem/spring-boot/</guid>
      <description>Spring 프레임워크를 기반으로 한 Java 애플리케이션 개발을 더욱 쉽고 빠르게 만들어주는 도구</description>
    </item>
    <item>
      <title>Java Keywords</title>
      <link>https://buenhyden.github.io/posts/programming-languages/java/getting-started/syntax-basics/keywords/</link>
      <pubDate>Wed, 20 Nov 2024 02:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/java/getting-started/syntax-basics/keywords/</guid>
      <description>키워드들은 Java 언어의 기본 구성 요소이며, 각각이 특정한 프로그래밍 목적을 위해 설계되었다.  변수, 메서드, 클래스, 제어문 등 다양한 요소를 정의하고 제어하는 데 필수적인 역할을 한다.</description>
    </item>
    <item>
      <title>Junit</title>
      <link>https://buenhyden.github.io/posts/programming-languages/java/ecosystem--practice/testing/junit/</link>
      <pubDate>Wed, 20 Nov 2024 00:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/java/ecosystem--practice/testing/junit/</guid>
      <description>Java 프로그래밍 언어를 위한 가장 널리 사용되는 단위 테스트(Unit Testing) 프레임워크</description>
    </item>
    <item>
      <title>동시성 (Concurrency)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/basic-concepts/concurrency-vs-parallelism/concurrency/</link>
      <pubDate>Fri, 04 Oct 2024 06:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/basic-concepts/concurrency-vs-parallelism/concurrency/</guid>
      <description>동시성 (Concurrency)은 여러 작업이 동시에 실행되는 것처럼 보이지만, 실제로는 매우 빠르게 작업 간 전환을 하면서 처리하는 방식이다.</description>
    </item>
    <item>
      <title>병렬성 (Parallelism)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/basic-concepts/concurrency-vs-parallelism/parallelism/</link>
      <pubDate>Fri, 04 Oct 2024 02:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/basic-concepts/concurrency-vs-parallelism/parallelism/</guid>
      <description>병렬성(Parallelism)은 컴퓨터 프로그래밍에서 여러 작업을 동시에 실행하여 전체적인 처리 속도를 향상시키는 기술을 말한다.</description>
    </item>
    <item>
      <title>Synchronous vs Asynchronous Programming</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/programming-fundamentals/synchronous-vs-asynchronous-programming/</link>
      <pubDate>Wed, 02 Oct 2024 07:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/programming-fundamentals/synchronous-vs-asynchronous-programming/</guid>
      <description>동기는 작업이 순차적으로 완료될 때까지 대기하는 블로킹 실행 모델로 단순성과 예측 가능성이 강점이지만 확장성이 낮다. 비동기는 이벤트 루프·콜백·프라미스를 통해 요청과 응답을 분리해 높은 I/O 처리량과 응답성을 제공하나 상태 관리와 디버깅 난도가 크다. 시스템 요구에 따라 선택은 성능, 안정성, 사용자 경험에 직접적 영향을 미친다.</description>
    </item>
    <item>
      <title>동시성 제어 (Concurrency Control)</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/</link>
      <pubDate>Wed, 02 Oct 2024 02:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/</guid>
      <description>동시성 제어는 여러 프로세스나 스레드가 동시에 공유 자원에 접근할 때, 데이터의 일관성과 무결성을 보장하기 위한 제어 메커니즘</description>
    </item>
  </channel>
</rss>
