<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – 메모리-관리</title><link>https://buenhyden.github.io/tags/%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC/</link><description>Recent content in 메모리-관리 on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 18 Dec 2024 00:08:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC/index.xml" rel="self" type="application/rss+xml"/><item><title>Thrashing</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/thrashing/</link><pubDate>Wed, 18 Dec 2024 00:08:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/thrashing/</guid><description>
&lt;h2>스래싱 (Thrashing)&lt;span class="hx-absolute -hx-mt-20" id="스래싱-thrashing">&lt;/span>
&lt;a href="#%ec%8a%a4%eb%9e%98%ec%8b%b1-thrashing" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>스래싱은 운영체제에서 발생하는 성능 저하 현상으로, 프로세스의 실제 작업 시간보다 페이지 교체(페이징)에 더 많은 시간을 소비하는 현상을 말한다.&lt;/p>
&lt;p>이를 더 쉽게 이해하기 위해 실생활의 예시를 들어보자.&lt;br>
작은 책상에서 여러 개의 큰 책을 동시에 참고하며 공부하는 상황을 상상해보자.&lt;br>
책상이 너무 작아서 한 번에 펼칠 수 있는 책의 수가 제한적이라, 새로운 책을 보기 위해서는 기존에 펼쳐져 있던 책을 닫고 치워야 한다. 만약 연관된 내용을 위해 계속해서 다른 책을 번갈아가며 봐야 한다면, 실제 공부하는 시간보다 책을 꺼내고 넣는 시간이 더 많아질 것이다. 이것이 바로 컴퓨터에서 일어나는 스래싱 현상과 유사하다.&lt;/p>
&lt;h3>스래싱이 발생하는 과정&lt;span class="hx-absolute -hx-mt-20" id="스래싱이-발생하는-과정">&lt;/span>
&lt;a href="#%ec%8a%a4%eb%9e%98%ec%8b%b1%ec%9d%b4-%eb%b0%9c%ec%83%9d%ed%95%98%eb%8a%94-%ea%b3%bc%ec%a0%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시작 단계:&lt;/p>
&lt;ul>
&lt;li>시스템에서 다수의 프로세스가 실행된다.&lt;/li>
&lt;li>각 프로세스는 자신의 페이지를 메모리에 로드하려 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>메모리 부족 발생:&lt;/p>
&lt;ul>
&lt;li>실제 물리 메모리보다 더 많은 페이지가 요구된다.&lt;/li>
&lt;li>운영체제는 페이지 교체를 시작한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>스래싱 발생:&lt;/p>
&lt;ul>
&lt;li>한 프로세스의 페이지를 내보내면, 다른 프로세스가 그 공간을 사용한다.&lt;/li>
&lt;li>하지만 곧 이전 프로세스가 내보낸 페이지가 다시 필요하게 된다.&lt;/li>
&lt;li>이러한 과정이 계속해서 반복된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스래싱의 주요 특징과 영향&lt;span class="hx-absolute -hx-mt-20" id="스래싱의-주요-특징과-영향">&lt;/span>
&lt;a href="#%ec%8a%a4%eb%9e%98%ec%8b%b1%ec%9d%98-%ec%a3%bc%ec%9a%94-%ed%8a%b9%ec%a7%95%ea%b3%bc-%ec%98%81%ed%96%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시스템 성능:&lt;/p>
&lt;ul>
&lt;li>CPU 활용률이 급격히 감소합니다.&lt;/li>
&lt;li>디스크 I/O가 급증합니다.&lt;/li>
&lt;li>시스템 응답 시간이 현저히 늘어납니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>사용자 경험:`&lt;/p>
&lt;ul>
&lt;li>프로그램의 실행 속도가 매우 느려집니다.&lt;/li>
&lt;li>시스템이 멈춘 것처럼 보일 수 있습니다.&lt;/li>
&lt;li>전반적인 시스템 반응성이 떨어집니다.&lt;br>
`&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스래싱 해결을 위한 방법들&lt;span class="hx-absolute -hx-mt-20" id="스래싱-해결을-위한-방법들">&lt;/span>
&lt;a href="#%ec%8a%a4%eb%9e%98%ec%8b%b1-%ed%95%b4%ea%b2%b0%ec%9d%84-%ec%9c%84%ed%95%9c-%eb%b0%a9%eb%b2%95%eb%93%a4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>예방적 접근:&lt;/p>
&lt;ul>
&lt;li>적절한 메모리 할당 정책 수립&lt;/li>
&lt;li>프로세스 수의 제한&lt;/li>
&lt;li>작업 세트(Working Set) 모델 적용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>대응적 접근:&lt;/p>
&lt;ul>
&lt;li>페이지 부재 빈도(PFF) 모니터링&lt;/li>
&lt;li>로컬 교체 정책 사용&lt;/li>
&lt;li>메모리 증설 고려&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>운영체제 레벨의 해결책:&lt;/p>
&lt;ul>
&lt;li>프로세스 우선순위 조정&lt;/li>
&lt;li>페이지 교체 알고리즘 최적화&lt;/li>
&lt;li>메모리 관리 정책 개선&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스래싱을 모니터링하는 방법&lt;span class="hx-absolute -hx-mt-20" id="스래싱을-모니터링하는-방법">&lt;/span>
&lt;a href="#%ec%8a%a4%eb%9e%98%ec%8b%b1%ec%9d%84-%eb%aa%a8%eb%8b%88%ed%84%b0%eb%a7%81%ed%95%98%eb%8a%94-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시스템 지표 관찰:&lt;/p>
&lt;ul>
&lt;li>페이지 폴트(Page Fault) 발생 빈도&lt;/li>
&lt;li>CPU 사용률 변화&lt;/li>
&lt;li>디스크 I/O 활동량&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 모니터링 도구 사용:&lt;/p>
&lt;ul>
&lt;li>운영체제의 성능 모니터&lt;/li>
&lt;li>리소스 모니터링 툴&lt;/li>
&lt;li>시스템 로그 분석&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스래싱 예방을 위한 실용적인 팁&lt;span class="hx-absolute -hx-mt-20" id="스래싱-예방을-위한-실용적인-팁">&lt;/span>
&lt;a href="#%ec%8a%a4%eb%9e%98%ec%8b%b1-%ec%98%88%eb%b0%a9%ec%9d%84-%ec%9c%84%ed%95%9c-%ec%8b%a4%ec%9a%a9%ec%a0%81%ec%9d%b8-%ed%8c%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>프로그램 설계 시:&lt;/p>
&lt;ul>
&lt;li>메모리 사용량을 최적화합니다.&lt;/li>
&lt;li>필요한 데이터만 메모리에 로드합니다.&lt;/li>
&lt;li>효율적인 메모리 관리 기법을 사용합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>시스템 운영 시:&lt;/p>
&lt;ul>
&lt;li>적절한 가상 메모리 크기를 설정합니다.&lt;/li>
&lt;li>동시 실행 프로세스 수를 제한합니다.&lt;/li>
&lt;li>주기적인 시스템 모니터링을 수행합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>메모리 관리 (Memory Management)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/</link><pubDate>Tue, 15 Oct 2024 17:18:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/</guid><description>
&lt;h2>메모리 관리 (Memory Management)&lt;span class="hx-absolute -hx-mt-20" id="메모리-관리-memory-management">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b4%80%eb%a6%ac-memory-management" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>운영체제의 핵심 기능 중 하나로, 컴퓨터의 주 메모리를 효율적으로 관리하는 역할을 한다.&lt;/p>
&lt;p>목적:&lt;/p>
&lt;ul>
&lt;li>프로세스 간 메모리 할당 및 해제&lt;/li>
&lt;li>사용 중인 메모리 공간 추적&lt;/li>
&lt;li>메모리 단편화 최소화&lt;/li>
&lt;li>주 메모리의 효율적 활용&lt;/li>
&lt;/ul>
&lt;h3>주요 메모리 관리 기법&lt;span class="hx-absolute -hx-mt-20" id="주요-메모리-관리-기법">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b4%80%eb%a6%ac-%ea%b8%b0%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>페이징 (Paging)&lt;span class="hx-absolute -hx-mt-20" id="페이징-paging">&lt;/span>
&lt;a href="#%ed%8e%98%ec%9d%b4%ec%a7%95-paging" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>물리 메모리를 고정 크기의 블록(페이지)으로 나눔&lt;/li>
&lt;li>프로세스의 가상 주소 공간도 같은 크기의 페이지로 나눔&lt;/li>
&lt;li>장점:&lt;br>
외부 단편화 문제 해결, 가상 메모리 구현 용이&lt;/li>
&lt;li>단점:&lt;br>
내부 단편화 발생 가능&lt;/li>
&lt;/ul>
&lt;h4>세그멘테이션 (Segmentation)&lt;span class="hx-absolute -hx-mt-20" id="세그멘테이션-segmentation">&lt;/span>
&lt;a href="#%ec%84%b8%ea%b7%b8%eb%a9%98%ed%85%8c%ec%9d%b4%ec%85%98-segmentation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>프로세스를 논리적 단위(세그먼트)로 나눔&lt;/li>
&lt;li>각 세그먼트는 서로 다른 크기를 가질 수 있음&lt;/li>
&lt;li>장점:&lt;br>
논리적 분할로 보안성 향상, 공유와 보호 용이&lt;/li>
&lt;li>단점:&lt;br>
외부 단편화 발생 가능&lt;/li>
&lt;/ul>
&lt;h4>가상 메모리 (Virtual Memory)&lt;span class="hx-absolute -hx-mt-20" id="가상-메모리-virtual-memory">&lt;/span>
&lt;a href="#%ea%b0%80%ec%83%81-%eb%a9%94%eb%aa%a8%eb%a6%ac-virtual-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>물리적 메모리보다 큰 주소 공간 제공&lt;/li>
&lt;li>하드 디스크를 RAM의 확장으로 사용&lt;/li>
&lt;li>장점:&lt;br>
더 큰 프로그램 실행 가능, 멀티태스킹 효율 향상&lt;/li>
&lt;li>단점:&lt;br>
물리적 메모리보다 접근 속도 느림&lt;/li>
&lt;/ul>
&lt;h3>메모리 할당 방식&lt;span class="hx-absolute -hx-mt-20" id="메모리-할당-방식">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ed%95%a0%eb%8b%b9-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>연속 할당: 프로세스에 연속된 메모리 공간 할당&lt;/li>
&lt;li>비연속 할당: 프로세스를 여러 조각으로 나누어 할당 (페이징, 세그멘테이션)&lt;/li>
&lt;/ol>
&lt;h3>메모리 관리의 주요 문제와 해결 방안&lt;span class="hx-absolute -hx-mt-20" id="메모리-관리의-주요-문제와-해결-방안">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b4%80%eb%a6%ac%ec%9d%98-%ec%a3%bc%ec%9a%94-%eb%ac%b8%ec%a0%9c%ec%99%80-%ed%95%b4%ea%b2%b0-%eb%b0%a9%ec%95%88" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>메모리 단편화:&lt;/p>
&lt;ul>
&lt;li>외부 단편화: 프로그램들 사이에 발생하는 작은 빈 공간들&lt;/li>
&lt;li>내부 단편화: 할당된 메모리의 일부가 사용되지 않는 현상&lt;/li>
&lt;li>해결방안: 메모리 압축, 페이징 기법 사용&lt;/li>
&lt;/ul>
&lt;p>페이지 교체: 메모리가 부족할 때 어떤 페이지를 디스크로 내보낼지 결정해야 합니다. 다양한 교체 알고리즘(LRU, FIFO 등)이 사용된다.&lt;/p>
&lt;p>스래싱(Thrashing): 페이지 교체가 너무 빈번하게 일어나 실제 작업보다 페이지 교체에 더 많은 시간을 소요하는 현상. 적절한 메모리 할당과 프로세스 수 조절로 해결할 수 있습니다.&lt;/p>
&lt;p>현대적인 메모리 관리 기술:&lt;/p>
&lt;ul>
&lt;li>메모리 압축: 사용하지 않는 메모리 영역을 압축하여 더 많은 공간을 확보하는 기술입니다.&lt;/li>
&lt;li>대용량 페이지: 더 큰 크기의 페이지를 사용하여 페이지 테이블의 크기를 줄이고 성능을 향상시키는 기술입니다.&lt;/li>
&lt;li>NUMA(Non-Uniform Memory Access): 멀티프로세서 시스템에서 메모리 접근 시간을 최적화하는 기술입니다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>