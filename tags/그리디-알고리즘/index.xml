<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – 그리디-알고리즘</title><link>https://buenhyden.github.io/tags/%EA%B7%B8%EB%A6%AC%EB%94%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/</link><description>Recent content in 그리디-알고리즘 on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 05 Nov 2024 02:01:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/%EA%B7%B8%EB%A6%AC%EB%94%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/index.xml" rel="self" type="application/rss+xml"/><item><title>그리디 알고리즘 (Greedy Algorithms)</title><link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/greedy-algorithms/greedy-algorithms/</link><pubDate>Tue, 05 Nov 2024 02:01:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/greedy-algorithms/greedy-algorithms/</guid><description>
&lt;h2>그리디 알고리즘 (Greedy Algorithms)&lt;/h2>&lt;p>&amp;ldquo;탐욕적&amp;rdquo; 또는 &amp;ldquo;욕심쟁이&amp;rdquo; 알고리즘이라고도 불리며, 현재 상황에서 가장 최적의 선택을 하는 방식으로 문제를 해결하는 알고리즘.&lt;br>
매 선택의 순간마다 당장 눈앞에 보이는 최적의 선택을 하여 최종적인 해답에 도달하는 방식이다.&lt;/p>
&lt;p>예를 들어, 거스름돈을 계산할 때 가장 큰 단위의 동전부터 사용하는 것이 그리디 알고리즘의 대표적인 예시이다.&lt;br>
500원짜리 동전을 최대한 사용하고, 그 다음 100원, 50원 순으로 사용하는 방식.&lt;/p>
&lt;p>장점:&lt;/p>
&lt;ol>
&lt;li>단순성: 직관적이고 이해하기 쉬워서 구현이 간단하다.&lt;/li>
&lt;li>속도: 매 단계에서 최적의 선택을 하므로 계산 속도가 빠르다.&lt;/li>
&lt;li>효율성: 많은 문제에서 적절한 해를 빠르게 제공한다.&lt;/li>
&lt;li>근사해 제공: NP-Hard 문제에서 근사해를 빠르게 찾을 수 있다.&lt;/li>
&lt;/ol>
&lt;p>단점:&lt;/p>
&lt;ol>
&lt;li>최적해 보장 불가: 항상 최적해를 보장하지 않는다.&lt;/li>
&lt;li>문제 특성 의존성: 그리디 특성을 가진 문제에만 적용 가능하다.&lt;/li>
&lt;li>전역 최적화 부재: 지역적 최적해가 전역 최적해를 보장하지 않는다.&lt;/li>
&lt;/ol>
&lt;h3>특징&lt;/h3>&lt;ol>
&lt;li>탐욕적 선택 속성(Greedy Choice Property): 각 단계에서 &lt;strong>현재 상태에서 최적의 선택&lt;/strong>을 한다.&lt;/li>
&lt;li>최적 부분 구조(Optimal Substructure): 문제의 최적해가 부분 문제의 최적해로 구성될 수 있다.&lt;/li>
&lt;li>단계적 선택: 문제를 해결하는 과정에서 매 단계마다 가장 최적의 선택을 한다.&lt;/li>
&lt;li>비가역적 선택: 한번 선택한 것은 다시 번복하지 않는다.&lt;/li>
&lt;/ol>
&lt;h3>그리디 알고리즘 종류와 특징&lt;/h3>&lt;h4>동전 거스름돈 문제&lt;/h4>&lt;p>가장 큰 단위의 동전부터 사용&lt;/p>
&lt;ul>
&lt;li>장점: 간단하고 빠른 해결 가능&lt;/li>
&lt;li>단점: 특정 동전 체계에서만 최적해 보장&lt;/li>
&lt;li>활용 사례: 자판기, 화폐 교환 시스템&lt;/li>
&lt;/ul>
&lt;h4>활동 선택 문제 (Activity Selection Problem)&lt;/h4>&lt;p>종료 시간을 기준으로 활동 선택&lt;/p>
&lt;ul>
&lt;li>장점: 최대 활동 수를 효율적으로 선택&lt;/li>
&lt;li>단점: 활동의 중요도를 고려하지 않음&lt;/li>
&lt;li>활용 사례: 회의실 예약 시스템, 작업 스케줄링&lt;/li>
&lt;/ul>
&lt;h4>분할 가능 배낭 문제 (Fractional Knapsack Problem)&lt;/h4>&lt;p>단위 무게당 가치를 기준으로 물건 선택&lt;/p>
&lt;ul>
&lt;li>장점: 최적해 보장&lt;/li>
&lt;li>단점: 물건을 분할할 수 있는 경우에만 적용 가능&lt;/li>
&lt;li>활용 사례: 자원 할당, 투자 포트폴리오 구성&lt;/li>
&lt;/ul>
&lt;h4>크러스컬 알고리즘 (Kruskal&amp;rsquo;s Algorithm)&lt;/h4>&lt;p>최소 신장 트리를 찾는 알고리즘&lt;/p>
&lt;ul>
&lt;li>장점: 희소 그래프에서 효율적&lt;/li>
&lt;li>단점: 밀집 그래프에서는 프림 알고리즘보다 성능이 떨어짐&lt;/li>
&lt;li>활용: 네트워크 설계, 통신망 구축&lt;/li>
&lt;/ul>
&lt;h4>허프만 코딩(Huffman Coding)&lt;/h4>&lt;p>빈도수에 따라 가변 길이 코드 할당&lt;/p>
&lt;ul>
&lt;li>장점: 효율적인 데이터 압축 가능&lt;/li>
&lt;li>단점: 빈도수 정보가 필요함&lt;/li>
&lt;li>활용 사례: 데이터 압축, 파일 압축 알고리즘&lt;/li>
&lt;/ul>
&lt;h4>다익스트라 알고리즘(Dijkstra&amp;rsquo;s Algorithm)&lt;/h4>&lt;p>최단 경로를 찾기 위해 가장 가까운 노드 선택&lt;/p>
&lt;ul>
&lt;li>장점: 단일 출발점 최단 경로 문제 해결에 효율적&lt;/li>
&lt;li>단점: 음의 가중치를 가진 간선에 적용 불가&lt;/li>
&lt;li>활용 사례: 네트워크 라우팅, GPS 내비게이션 시스템&lt;/li>
&lt;/ul>
&lt;h3>최신 트렌드와 발전 방향&lt;/h3>&lt;ol>
&lt;li>다중 목적 그리디 알고리즘: 여러 목적을 동시에 고려하는 알고리즘 개발&lt;/li>
&lt;li>그리디 알고리즘과 기계학습의 결합: 복잡한 최적화 문제 해결에 활용&lt;/li>
&lt;li>근사 알고리즘으로서의 활용: NP-Hard 문제의 근사해 도출에 사용&lt;/li>
&lt;/ol>
&lt;h3>그리디 알고리즘 선택 시 고려사항&lt;/h3>&lt;ol>
&lt;li>문제의 최적 부분 구조 확인&lt;/li>
&lt;li>탐욕적 선택 속성 만족 여부 검토&lt;/li>
&lt;li>단계적 결정 가능성 평가&lt;/li>
&lt;li>정렬이나 우선순위 큐 관련 문제인지 확인&lt;/li>
&lt;/ol>
&lt;h3>활용 사례&lt;/h3>&lt;ol>
&lt;li>네트워크 프로토콜: Open Shortest Path First 프로토콜&lt;/li>
&lt;li>인공지능: 실시간 얼굴 추적&lt;/li>
&lt;li>데이터 압축: 허프만 인코딩&lt;/li>
&lt;li>그래프 알고리즘: 최소 신장 트리, 최단 경로 문제&lt;/li>
&lt;li>스케줄링: 작업 스케줄링, 회의실 배정&lt;/li>
&lt;li>리소스 할당: 분할 가능 배낭 문제&lt;/li>
&lt;li>금융: 포트폴리오 최적화&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>