<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Time-Complexity</title><link>https://buenhyden.github.io/tags/time-complexity/</link><description>Recent content in Time-Complexity on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 26 Oct 2024 01:46:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/time-complexity/index.xml" rel="self" type="application/rss+xml"/><item><title>계산 복잡도 (Computational Complexity)</title><link>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/</link><pubDate>Sat, 26 Oct 2024 01:46:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/</guid><description>
&lt;h2>계산 복잡도 (Computational Complexity)&lt;/h2>&lt;p>계산 복잡도 이론은 컴퓨터 과학의 중요한 분야로, 알고리즘과 문제의 효율성을 분석하고 분류하는 데 사용된다. 이는 알고리즘이나 문제를 해결하는 데 필요한 자원의 양을 측정하는 것으로, 주로 시간 복잡도(Time Complexity)와 공간 복잡도(Space Complexity)로 나누어 분석한다.&lt;/p>
&lt;p>계산 복잡도 이론은 다음과 같은 주요 특징을 가진다:&lt;/p>
&lt;ol>
&lt;li>문제 해결에 필요한 자원의 양을 정량화한다.&lt;/li>
&lt;li>알고리즘의 효율성을 평가하고 비교한다.&lt;/li>
&lt;li>문제를 복잡도 클래스로 분류한다.&lt;/li>
&lt;li>주로 최악의 경우 시나리오를 고려한다.&lt;/li>
&lt;/ol>
&lt;h3>시간복잡도와 공간복잡도 (Time Complexity and Space Complexity)&lt;/h3>&lt;p>시간복잡도와 공간복잡도는 알고리즘의 효율성을 평가하는 중요한 개념으로, 이를 이해하고 최적화하는 것은 효율적인 알고리즘 설계의 핵심이다. 알고리즘의 효율성을 개선하기 위해서는 다양한 알고리즘 설계 기법을 이해하고 적용할 필요가 있으며, 이를 통해 더 나은 알고리즘을 개발할 수 있다.&lt;/p>
&lt;h3>시간복잡도 (Time Complexity)&lt;/h3>&lt;p>시간 복잡도는 알고리즘이 실행되는 데 걸리는 시간을 측정한다:&lt;/p>
&lt;ul>
&lt;li>입력 크기에 따른 연산 횟수로 표현된다.&lt;/li>
&lt;li>주로 빅오(Big O) 표기법을 사용합니다.&lt;/li>
&lt;li>예: O(1), O(log n), O(n), O(n log n), O(n²), O(2ⁿ)&lt;br>
시간 복잡도는 알고리즘의 실행 속도를 나타내며, 주로 반복문의 수행 횟수에 큰 영향을 받는다.&lt;/li>
&lt;/ul>
&lt;h4>주요 종류 (Big O 표기법)&lt;/h4>&lt;h5>O(1) - 상수 시간&lt;/h5>&lt;ul>
&lt;li>입력 크기와 관계없이 항상 같은 시간이 걸린다.&lt;/li>
&lt;li>가장 효율적인 시간복잡도&lt;/li>
&lt;li>예: 배열의 첫 번째 요소 접근, 스택의 push/pop 연산&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">constant_time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;배열의 첫 번째 요소를 반환하는 함수&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="kc">None&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h5>O(log n) - 로그 시간&lt;/h5>&lt;ul>
&lt;li>입력 크기가 증가할 때마다 처리 시간이 로그만큼만 증가&lt;/li>
&lt;li>매우 효율적이며, 큰 데이터셋에서도 좋은 성능을 보인다.&lt;/li>
&lt;li>예: 이진 탐색, 균형 이진 트리에서의 검색&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">binary_search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;정렬된 배열에서 이진 검색 수행&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">left&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">left&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">right&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">right&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">mid&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">mid&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">mid&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h5>O(n) - 선형 시간&lt;/h5>&lt;ul>
&lt;li>입력 크기에 비례하여 실행 시간이 증가합니다.&lt;/li>
&lt;li>적절한 효율성을 가지며, 많은 기본 알고리즘의 시간복잡도.&lt;/li>
&lt;li>예: 배열의 모든 요소 순회, 선형 탐색&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">linear_time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;배열의 모든 요소를 순회하며 합계를 계산&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># n번 반복&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">total&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">num&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">total&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h5>O(n Log n) - 선형 로그 시간&lt;/h5>&lt;ul>
&lt;li>선형-로그 시간으로, 효율적인 정렬 알고리즘의 시간복잡도.&lt;/li>
&lt;li>대규모 데이터 정렬에 적합&lt;/li>
&lt;li>예: 퀵 정렬, 병합 정렬&lt;/li>
&lt;/ul>
&lt;h5>O(n^2) - 이차 시간&lt;/h5>&lt;ul>
&lt;li>입력 크기의 제곱에 비례하여 실행 시간이 증가한다.&lt;/li>
&lt;li>작은 입력에는 괜찮지만, 큰 데이터셋에서는 비효율적&lt;/li>
&lt;li>예: 버블 정렬, 선택 정렬&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">quadratic_time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;모든 가능한 숫자 쌍의 합을 계산&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">results&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">)):&lt;/span> &lt;span class="c1"># n번 반복&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">)):&lt;/span> &lt;span class="c1"># 각각에 대해 n번 반복&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">results&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h5>O(2^n) - 지수 시간&lt;/h5>&lt;ul>
&lt;li>가장 비효율적인 시간복잡도&lt;/li>
&lt;li>입력이 하나 증가할 때마다 실행 시간이 두 배로 증가하는 알고리즘&lt;/li>
&lt;li>재귀적인 문제나 백트래킹 문제에서 발생&lt;/li>
&lt;li>예시: 피보나치 수열을 계산하는 단순 재귀 알고리즘.&lt;/li>
&lt;/ul>
&lt;h5>O(n!) - 팩토리얼 시간 복잡도&lt;/h5>&lt;ul>
&lt;li>매우 비효율적인 시간복잡도&lt;/li>
&lt;li>데이터의 모든 가능한 순열을 확인해야 하는 경우&lt;/li>
&lt;li>예시: 순열을 전부 확인하는 완전 탐색 알고리즘&lt;/li>
&lt;/ul>
&lt;h3>공간복잡도 (Space Complexity)&lt;/h3>&lt;p>공간 복잡도는 알고리즘이 실행되는 동안 사용하는 메모리의 양을 측정한다:&lt;/p>
&lt;ul>
&lt;li>고정 공간: 입력 크기와 무관한 공간 (변수, 상수 등)&lt;/li>
&lt;li>가변 공간: 입력 크기에 따라 변하는 공간 (동적 할당 메모리, 재귀 호출 스택 등)&lt;br>
공간 복잡도는 S(P) = c + Sp(n) 형태로 표현되며, c는 고정 공간, Sp(n)은 가변 공간을 나타낸다.&lt;/li>
&lt;/ul>
&lt;h4>주요 종류&lt;/h4>&lt;h5>O(1) - 상수 공간&lt;/h5>&lt;ul>
&lt;li>입력 크기와 관계없이 일정한 추가 공간만 사용한다.&lt;/li>
&lt;li>메모리 효율이 가장 좋다.&lt;/li>
&lt;li>예시: 간단한 변수 몇 개만 사용하는 경우&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">space_constant&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;입력 크기와 관계없이 일정한 추가 공간만 사용&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">i&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h5>O(n) - 선형 공간&lt;/h5>&lt;ul>
&lt;li>입력 크기에 비례하는 추가 공간이 필요하다.&lt;/li>
&lt;li>많은 알고리즘의 일반적인 공간복잡도.&lt;/li>
&lt;li>예시: 입력 크기만큼의 새로운 배열을 생성하는 경우&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">space_linear&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;입력 크기에 비례하는 추가 공간 사용&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">results&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="c1"># 크기 n의 새로운 배열 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">results&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">results&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h5>O(n^2) - 이차 공간&lt;/h5>&lt;ul>
&lt;li>입력 크기의 제곱에 비례하는 공간이 필요.&lt;/li>
&lt;li>큰 입력에 대해 많은 메모리가 필요.&lt;/li>
&lt;li>예시: n×n 크기의 2차원 행렬을 생성하는 경우&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">space_quadratic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;2차원 행렬 생성&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">matrix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">row&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">row&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">matrix&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">row&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">matrix&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>시간 복잡도와 공간 복잡도의 관계&lt;/h3>&lt;p>시간 복잡도와 공간 복잡도는 종종 상호 관련이 있지만, 항상 반비례 관계에 있는 것은 아니다:&lt;/p>
&lt;ol>
&lt;li>일반적으로 시간을 절약하기 위해 더 많은 공간을 사용하거나, 공간을 절약하기 위해 더 많은 시간을 소비하는 경향이 있다.&lt;/li>
&lt;li>현대 컴퓨팅에서는 메모리가 상대적으로 풍부해져 시간 복잡도에 더 중점을 두는 경향이 있다.&lt;/li>
&lt;/ol>
&lt;h3>계산 복잡도의 중요성&lt;/h3>&lt;ol>
&lt;li>알고리즘 효율성 평가: 다양한 알고리즘의 성능을 객관적으로 비교할 수 있다.&lt;/li>
&lt;li>자원 사용 예측: 대규모 데이터 처리 시 필요한 시간과 메모리를 예측할 수 있다.&lt;/li>
&lt;li>알고리즘 설계: 효율적인 알고리즘을 개발하는 데 지침을 제공한다.&lt;/li>
&lt;li>문제 분류: NP-완전 문제와 같은 복잡도 클래스를 통해 문제의 난이도를 분류한다.&lt;/li>
&lt;/ol>
&lt;h3>최적화하는 방법&lt;/h3>&lt;p>시간 복잡도와 공간 복잡도 사이에는 종종 트레이드오프 관계가 있으므로, 상황에 따라 적절한 균형을 찾는 것이 중요하다. 또한 실제 성능 측정을 통해 최적화의 효과를 확인하고, 필요한 수준의 성능과 자원 사용을 고려하여 균형을 맞추는 것이 중요하다.&lt;/p>
&lt;blockquote>
&lt;p>트레이드 오프(Trade-off)&lt;br>
두 개의 대안이 있을 때, 어느 하나를 선택하면 다른 하나의 성과가 줄어드는 상황.&lt;br>
즉, 한 쪽을 추구하면 다른 쪽을 희생해야 하는 관계를 의미한다.&lt;/p>
&lt;/blockquote>
&lt;p>시간 복잡도와 공간 복잡도를 최적화하는 방법은 다음과 같다:&lt;/p>
&lt;h4>시간 복잡도 최적화&lt;/h4>&lt;ol>
&lt;li>
&lt;p>효율적인 알고리즘 선택&lt;/p>
&lt;ul>
&lt;li>정렬이 필요한 경우 O(n log n) 시간 복잡도를 가진 퀵 정렬이나 병합 정렬 사용&lt;/li>
&lt;li>탐색 시 이진 탐색 등의 O(log n) 알고리즘 활용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>반복문 최적화&lt;/p>
&lt;ul>
&lt;li>중첩 반복문 줄이기&lt;/li>
&lt;li>불필요한 반복 제거&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>적절한 자료구조 사용&lt;/p>
&lt;ul>
&lt;li>해시 테이블을 이용한 O(1) 시간 복잡도의 검색 구현&lt;/li>
&lt;li>균형 이진 트리를 이용한 O(log n) 시간 복잡도의 삽입/삭제/검색 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>캐싱과 메모이제이션&lt;/p>
&lt;ul>
&lt;li>이미 계산된 결과를 저장하여 재사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>동적 프로그래밍&lt;/p>
&lt;ul>
&lt;li>큰 문제를 작은 부분 문제로 나누어 해결&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4>공간 복잡도 최적화&lt;/h4>&lt;ol>
&lt;li>
&lt;p>인플레이스(In-place) 알고리즘 사용&lt;/p>
&lt;ul>
&lt;li>추가 메모리 사용을 최소화하는 알고리즘 선택&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>메모리 재사용&lt;/p>
&lt;ul>
&lt;li>불필요한 변수 제거 및 변수 재사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>적절한 자료구조 선택&lt;/p>
&lt;ul>
&lt;li>상황에 맞는 효율적인 자료구조 사용 (예: 연결 리스트 대신 배열)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>재귀 대신 반복문 사용&lt;/p>
&lt;ul>
&lt;li>재귀 호출로 인한 스택 메모리 사용 줄이기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>비트 연산 활용&lt;/p>
&lt;ul>
&lt;li>정수형 변수를 비트 마스크로 활용하여 메모리 사용 줄이기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>메모리 풀링&lt;/p>
&lt;ul>
&lt;li>객체 재사용을 통한 메모리 할당/해제 최소화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>