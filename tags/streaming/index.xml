<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Streaming</title><link>https://buenhyden.github.io/tags/streaming/</link><description>Recent content in Streaming on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 17 Dec 2024 08:44:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/streaming/index.xml" rel="self" type="application/rss+xml"/><item><title>Streaming vs Polling</title><link>https://buenhyden.github.io/til/2024/12/streaming-vs-polling/</link><pubDate>Tue, 17 Dec 2024 08:44:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/12/streaming-vs-polling/</guid><description>
&lt;h2>Streaming Vs Polling&lt;/h2>&lt;p>Streaming과 polling은 실시간 데이터 전송을 위해 사용되는 두 가지 주요 기술입니다. 각각의 특징과 차이점을 자세히 살펴보겠습니다.&lt;/p>
&lt;h2>Streaming&lt;/h2>&lt;p>Streaming은 데이터를 연속적으로 전송하는 방식입니다.&lt;/p>
&lt;h3>주요 특징&lt;/h3>&lt;ol>
&lt;li>연속적인 데이터 흐름: 서버에서 클라이언트로 데이터를 지속적으로 전송합니다.&lt;/li>
&lt;li>실시간성: 데이터가 생성되는 즉시 전송되어 높은 실시간성을 제공합니다.&lt;/li>
&lt;li>효율적인 대역폭 사용: 필요한 데이터만 전송하므로 대역폭을 효율적으로 사용합니다.&lt;/li>
&lt;li>지속적인 연결: 클라이언트와 서버 간 연결이 유지됩니다.&lt;/li>
&lt;/ol>
&lt;h3>사용 사례&lt;/h3>&lt;ul>
&lt;li>비디오/오디오 스트리밍&lt;/li>
&lt;li>실시간 주식 시세 정보&lt;/li>
&lt;li>라이브 이벤트 중계&lt;/li>
&lt;/ul>
&lt;h2>Polling&lt;/h2>&lt;p>Polling은 클라이언트가 주기적으로 서버에 데이터를 요청하는 방식입니다.&lt;/p>
&lt;h3>주요 특징&lt;/h3>&lt;ol>
&lt;li>주기적 요청: 클라이언트가 일정 간격으로 서버에 데이터를 요청합니다.&lt;/li>
&lt;li>간단한 구현: HTTP 요청을 사용하여 쉽게 구현할 수 있습니다.&lt;/li>
&lt;li>서버 부하: 불필요한 요청으로 인해 서버에 부담을 줄 수 있습니다.&lt;/li>
&lt;li>실시간성 제한: 폴링 주기에 따라 실시간성이 제한됩니다.&lt;/li>
&lt;/ol>
&lt;h3>사용 사례&lt;/h3>&lt;ul>
&lt;li>이메일 확인&lt;/li>
&lt;li>소셜 미디어 피드 업데이트&lt;/li>
&lt;li>간단한 채팅 애플리케이션&lt;/li>
&lt;/ul>
&lt;h2>Streaming Vs Polling 비교 분석표&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Streaming&lt;/th>
&lt;th>Polling&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>데이터 전송 방식&lt;/td>
&lt;td>서버에서 클라이언트로 실시간 데이터 전송&lt;/td>
&lt;td>클라이언트가 주기적으로 서버에 요청&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>연결 유지 여부&lt;/td>
&lt;td>지속적인 연결 유지&lt;/td>
&lt;td>연결 유지 안 함 (요청마다 새 연결)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 지연 시간&lt;/td>
&lt;td>낮음 (실시간 데이터 전송)&lt;/td>
&lt;td>높음 (요청 주기에 따라 다름)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>서버 부하&lt;/td>
&lt;td>높음 (지속적인 연결 유지로 인한 부하)&lt;/td>
&lt;td>낮음 (요청 주기에 따라 부하 분산 가능)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡성&lt;/td>
&lt;td>복잡 (지속적인 연결 관리 필요)&lt;/td>
&lt;td>간단 (HTTP 요청/응답 기반)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실시간성&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음 (폴링 주기에 의존)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>대역폭 사용&lt;/td>
&lt;td>효율적 (필요한 데이터만 전송)&lt;/td>
&lt;td>비효율적 (불필요한 요청 발생 가능)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>클라이언트 구현&lt;/td>
&lt;td>복잡 (스트림 처리 로직 필요)&lt;/td>
&lt;td>간단 (주기적 HTTP 요청)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>방화벽 통과&lt;/td>
&lt;td>어려울 수 있음&lt;/td>
&lt;td>쉬움 (표준 HTTP 사용)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>적합한 사용 사례&lt;/td>
&lt;td>라이브 비디오/오디오 스트리밍, 실시간 분석, 금융 거래 플랫폼&lt;/td>
&lt;td>이메일 확인, 소셜 미디어 피드 업데이트, 시스템 상태 모니터링&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>