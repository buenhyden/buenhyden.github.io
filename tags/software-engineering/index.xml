<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Software-Engineering on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/software-engineering/</link>
    <description>Recent content in Software-Engineering on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.8</generator>
    <language>en</language>
    <lastBuildDate>Sat, 14 Jun 2025 07:18:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/software-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Software Engineering</title>
      <link>https://buenhyden.github.io/posts/software-engineering/</link>
      <pubDate>Thu, 19 Sep 2024 10:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/</guid>
      <description>소프트웨어 공학은 **요구분석, 설계, 구현, 테스트, 유지보수**까지 전체 개발주기를 아우르며, **품질**, **생산성**, **유지보수성**을 높이기 위한 구조화된 접근이다. SDLC 방법론과 설계 원칙을 바탕으로 확장 가능하고 신뢰성 있는 소프트웨어 시스템을 구축한다.</description>
    </item>
    <item>
      <title>Architecture Styles and Patterns</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/</link>
      <pubDate>Sat, 14 Jun 2025 07:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/</guid>
      <description>Architecture Styles and Patterns은 시스템의 고수준 구조를 정의하고 컴포넌트 간 상호작용을 조직화하는 재사용 가능한 설계 솔루션이다. Architecture Style 은 시스템 전체 구조와 상호작용 원칙을 정의하며, Architecture Pattern 은 특정 구조적 문제에 대한 재사용 가능한 해결책을 제공한다. 다양한 패턴이 존재하며, 각각 특정 문제를 해결하고 확장성, 유지보수성, 테스트 용이성을 향상시킨다.</description>
    </item>
    <item>
      <title>Messaging Systems</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/integration/messaging-systems/</link>
      <pubDate>Tue, 22 Apr 2025 13:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/integration/messaging-systems/</guid>
      <description>메시징 시스템은 분산 애플리케이션의 구성 요소 간 비동기 통신을 지원하여 결합도를 낮추고, 신뢰성·확장성·유연성을 제공합니다. 메시지 큐, 이벤트 스트리밍, 태스크 큐 등 다양한 형태가 존재하며, 실시간 데이터 처리, 작업 분산, 장애 복원력 등 다양한 요구에 대응한다.</description>
    </item>
  </channel>
</rss>
