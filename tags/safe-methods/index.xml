<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Safe-Methods</title><link>https://buenhyden.github.io/tags/safe-methods/</link><description>Recent content in Safe-Methods on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 14 Oct 2024 16:31:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/safe-methods/index.xml" rel="self" type="application/rss+xml"/><item><title>안전한 메서드 (Safe Methods)</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/safe-methods/</link><pubDate>Mon, 14 Oct 2024 16:31:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/safe-methods/</guid><description>
&lt;h2>안전한 메서드 (Safe Methods)&lt;span class="hx-absolute -hx-mt-20" id="안전한-메서드-safe-methods">&lt;/span>
&lt;a href="#%ec%95%88%ec%a0%84%ed%95%9c-%eb%a9%94%ec%84%9c%eb%93%9c-safe-methods" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>서버의 상태를 변경하지 않는 HTTP 메서드.&lt;/p>
&lt;h3>특징&lt;span class="hx-absolute -hx-mt-20" id="특징">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>리소스 변경 없음: 요청을 여러 번 보내도 서버의 상태가 동일하게 유지됩니다.&lt;/li>
&lt;li>읽기 전용 작업: 주로 데이터를 조회하는 용도로 사용됩니다.&lt;/li>
&lt;li>부작용 없음: 서버의 상태를 변경하지 않으므로 안전하게 여러 번 호출할 수 있습니다.&lt;/li>
&lt;/ol>
&lt;h3>중요성&lt;span class="hx-absolute -hx-mt-20" id="중요성">&lt;/span>
&lt;a href="#%ec%a4%91%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>신뢰성: 클라이언트가 서버의 상태를 변경하지 않고 안전하게 정보를 요청할 수 있습니다.&lt;/li>
&lt;li>캐싱 최적화: 안전한 메서드는 캐시하기에 적합하여 성능 향상에 도움이 됩니다.&lt;/li>
&lt;li>사용자 경험: 브라우저가 안전한 메서드를 자유롭게 호출할 수 있어 프리페칭 등의 기능을 구현할 수 있습니다.&lt;/li>
&lt;/ol>
&lt;h3>구현 방법&lt;span class="hx-absolute -hx-mt-20" id="구현-방법">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>읽기 전용 로직: 안전한 메서드 구현 시 서버의 상태를 변경하지 않는 로직만 포함해야 합니다.&lt;/li>
&lt;li>멱등성 보장: 안전한 메서드는 멱등성도 가져야 하므로, 여러 번 호출해도 동일한 결과를 반환하도록 구현합니다.&lt;/li>
&lt;li>예외 처리: 안전한 메서드가 서버 상태를 변경하지 않도록 주의깊게 예외를 처리해야 합니다.&lt;/li>
&lt;/ol>
&lt;h3>이점&lt;span class="hx-absolute -hx-mt-20" id="이점">&lt;/span>
&lt;a href="#%ec%9d%b4%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>성능 최적화: 안전한 메서드는 캐싱이 가능하여 네트워크 트래픽을 줄이고 응답 시간을 개선할 수 있습니다.&lt;/li>
&lt;li>보안 강화: 데이터를 변경하지 않으므로 무단 수정이나 삭제의 위험이 없습니다.&lt;/li>
&lt;li>확장성: 안전한 메서드는 프록시나 중간 계층에서 자유롭게 처리할 수 있어 시스템 확장성이 향상됩니다.&lt;/li>
&lt;/ol>
&lt;h3>HTTP 메서드별 안전성&lt;span class="hx-absolute -hx-mt-20" id="http-메서드별-안전성">&lt;/span>
&lt;a href="#http-%eb%a9%94%ec%84%9c%eb%93%9c%eb%b3%84-%ec%95%88%ec%a0%84%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>GET: 안전한 메서드. 리소스를 조회하는 용도로 사용됩니다.&lt;/li>
&lt;li>HEAD: 안전한 메서드. GET과 유사하지만 헤더 정보만 반환합니다.&lt;/li>
&lt;li>OPTIONS: 안전한 메서드. 서버가 지원하는 메서드 정보를 반환합니다.&lt;/li>
&lt;li>POST: 안전하지 않은 메서드. 새로운 리소스를 생성하거나 데이터를 제출합니다.&lt;/li>
&lt;li>PUT: 안전하지 않은 메서드. 리소스를 생성하거나 대체합니다.&lt;/li>
&lt;li>DELETE: 안전하지 않은 메서드. 지정된 리소스를 삭제합니다.&lt;/li>
&lt;li>PATCH: 안전하지 않은 메서드. 리소스의 부분적인 수정에 사용됩니다.&amp;mdash;&lt;/li>
&lt;/ol>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>멱등성 (Idempotency)과 안전한 메서드 (Safe Methods)의 비교</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/idempotency-and-safe-methods/</link><pubDate>Mon, 14 Oct 2024 00:49:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/idempotency-and-safe-methods/</guid><description>
&lt;h2>멱등성 (Idempotency)과 안전한 메서드 (Safe Methods)의 비교&lt;span class="hx-absolute -hx-mt-20" id="멱등성-idempotency과-안전한-메서드-safe-methods의-비교">&lt;/span>
&lt;a href="#%eb%a9%b1%eb%93%b1%ec%84%b1-idempotency%ea%b3%bc-%ec%95%88%ec%a0%84%ed%95%9c-%eb%a9%94%ec%84%9c%eb%93%9c-safe-methods%ec%9d%98-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>멱등성과 안전한 메서드는 HTTP 메서드의 중요한 특성으로, 서버의 상태 변화와 관련이 있다.&lt;/p>
&lt;p>멱등성(Idempotency)은 동일한 요청을 여러 번 수행해도 서버의 상태가 동일하게 유지되는 특성을 말한다.&lt;br>
즉, 요청을 한 번 보내는 것과 여러 번 연속으로 보내는 것이 같은 효과를 지니고, 서버의 상태도 동일하게 유지된다.&lt;/p>
&lt;p>안전한 메서드(Safe Methods)는 서버의 상태를 변경하지 않는 HTTP 메서드를 의미한다.&lt;br>
이는 주로 리소스를 조회하는 용도로 사용되며, 서버의 데이터나 상태를 수정하지 않는다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>멱등성&lt;/th>
&lt;th>안전한 메서드&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>동일한 요청을 여러 번 수행해도 서버의 상태가 같음&lt;/td>
&lt;td>서버의 상태를 변경하지 않음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>서버 상태 변경&lt;/td>
&lt;td>변경 가능, 단 여러 번 수행해도 결과가 같아야 함&lt;/td>
&lt;td>변경하지 않음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>해당하는 HTTP 메서드&lt;/td>
&lt;td>GET, HEAD, PUT, DELETE, OPTIONS, TRACE&lt;/td>
&lt;td>GET, HEAD, OPTIONS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>관계&lt;/td>
&lt;td>모든 안전한 메서드는 멱등성을 가짐&lt;/td>
&lt;td>안전한 메서드는 항상 멱등성을 가짐&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 목적&lt;/td>
&lt;td>네트워크 오류 시 안전한 재시도 가능&lt;/td>
&lt;td>서버 상태 보호 및 캐싱 최적화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>예시&lt;/td>
&lt;td>PUT: 리소스 대체, 여러 번 실행해도 결과 동일&lt;/td>
&lt;td>GET: 리소스 조회, 서버 상태 변경 없음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>멱등성을 가진 메서드가 반드시 안전한 것은 아니다.&lt;br>
예를 들어, PUT과 DELETE는 멱등성은 있지만 안전하지 않다.&lt;br>
반면, 모든 안전한 메서드는 멱등성을 갖는다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>