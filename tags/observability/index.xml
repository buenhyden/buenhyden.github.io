<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Observability on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/observability/</link>
    <description>Recent content in Observability on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 03 Oct 2024 11:23:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/observability/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Application metrics</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/application-metrics/</link>
      <pubDate>Thu, 03 Oct 2024 11:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/application-metrics/</guid>
      <description>&lt;h2 id=&#34;application-metrics&#34;&gt;Application Metrics&lt;/h2&gt;
&lt;p&gt;마이크로서비스 아키텍처(MSA) 패턴에서 Observability는 매우 중요한 개념이며, 그 중 Application Metrics는 핵심적인 요소이다.&lt;br&gt;
Application Metrics는 애플리케이션의 성능과 동작을 이해하고 문제를 해결하는 데 필수적인 도구이다.&lt;/p&gt;
&lt;p&gt;Application Metrics는 애플리케이션의 성능, 동작, 그리고 건강 상태를 나타내는 수치화된 데이터이다.&lt;br&gt;
이는 개별 작업에 대한 통계를 수집하고, 이를 중앙 집중식 메트릭 서비스에 집계하여 보고 및 경고를 제공하는 패턴을 말한다.&lt;/p&gt;
&lt;p&gt;Application Metrics는 MSA 환경에서 Observability를 달성하는 데 핵심적인 역할을 한다.&lt;br&gt;
이를 통해 개발자와 운영팀은 복잡한 시스템을 더 잘 이해하고, 문제를 신속하게 해결하며, 시스템의 성능을 지속적으로 개선할 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Log deployments and changes</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/log-deployments-and-changes/</link>
      <pubDate>Thu, 03 Oct 2024 11:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/log-deployments-and-changes/</guid>
      <description>&lt;h2 id=&#34;log-deployments-and-changes&#34;&gt;Log Deployments and Changes&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Log deployments and changes&amp;rdquo; 패턴은 마이크로서비스 아키텍처(MSA)의 Observability를 향상시키기 위한 전략으로 이 패턴은 시스템의 변경사항을 추적하고 문제 해결을 용이하게 하는 데 중점을 둔다.&lt;/p&gt;
&lt;h3 id=&#34;패턴의-정의와-목적&#34;&gt;패턴의 정의와 목적&lt;/h3&gt;
&lt;p&gt;&amp;ldquo;Log deployments and changes&amp;rdquo; 패턴은 프로덕션 환경에서 발생하는 모든 배포와 변경사항을 로깅하는 것을 의미한다.&lt;br&gt;
이 패턴의 주요 목적은 다음과 같다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시스템 변경사항과 문제 발생 간의 상관관계 파악&lt;/li&gt;
&lt;li&gt;문제 해결 시간 단축&lt;/li&gt;
&lt;li&gt;시스템 동작에 대한 이해도 향상&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;ldquo;Log deployments and changes&amp;rdquo; 패턴을 효과적으로 구현함으로써, 개발팀과 운영팀은 시스템의 변화를 더 잘 이해하고, 문제를 신속하게 해결할 수 있으며, 전반적인 시스템 안정성을 향상시킬 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Observability</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/</link>
      <pubDate>Thu, 03 Oct 2024 11:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/</guid>
      <description>&lt;h2 id=&#34;observability&#34;&gt;Observability&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Audit Logging</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/audit-logging/</link>
      <pubDate>Thu, 03 Oct 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/audit-logging/</guid>
      <description>&lt;h2 id=&#34;audit-logging&#34;&gt;Audit Logging&lt;/h2&gt;
&lt;p&gt;Audit Logging은 시스템 내에서 발생하는 중요한 이벤트와 변경사항을 기록하는 프로세스이다.&lt;br&gt;
이는 사용자 활동, 시스템 변경, 데이터 접근 등을 포함하며, 시스템의 동작을 이해하고 문제를 해결하는 데 필수적이다.&lt;/p&gt;
&lt;p&gt;Audit Logging은 MSA 환경에서 시스템의 투명성, 보안성, 그리고 문제 해결 능력을 크게 향상시킨다. 적절히 구현된 Audit Logging 시스템은 개발팀과 운영팀이 복잡한 마이크로서비스 환경을 효과적으로 관리하고 최적화하는 데 필수적인 도구가 된다.&lt;/p&gt;
&lt;h3 id=&#34;기본-구성-요소&#34;&gt;기본 구성 요소&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-1&#34;&gt; 1&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-2&#34;&gt; 2&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-3&#34;&gt; 3&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-4&#34;&gt; 4&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-5&#34;&gt; 5&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-6&#34;&gt; 6&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-7&#34;&gt; 7&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-8&#34;&gt; 8&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-9&#34;&gt; 9&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-10&#34;&gt;10&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-11&#34;&gt;11&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-12&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-12&#34;&gt;12&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-13&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-13&#34;&gt;13&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-14&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-14&#34;&gt;14&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-15&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-15&#34;&gt;15&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-16&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-16&#34;&gt;16&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-17&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-17&#34;&gt;17&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-18&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-18&#34;&gt;18&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-19&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-19&#34;&gt;19&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-20&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-20&#34;&gt;20&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Audit Log 엔티티 예시&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Entity&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;AuditLog&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Id&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@GeneratedValue&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 이벤트 유형&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resourceType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 리소스 유형&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resourceId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 리소스 식별자&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;           &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 사용자 ID&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;           &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 수행된 작업&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 변경 전 값&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 변경 후 값&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 발생 시간&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ipAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// IP 주소&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userAgent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 사용자 에이전트&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// getters, setters&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;audit-logging의-중요성&#34;&gt;Audit Logging의 중요성&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;규정 준수&lt;/strong&gt;: PCI DSS, SOC 2 등의 산업 표준 및 규제 요구사항을 충족하는 데 필요하다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;보안 강화&lt;/strong&gt;: 비정상적인 활동을 감지하고 보안 위협을 조사하는 데 도움이 된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;문제 해결&lt;/strong&gt;: 시스템 장애나 오류의 원인을 파악하는 데 유용하다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;사용자 행동 이해&lt;/strong&gt;: 고객 지원, 시스템 개선을 위한 인사이트를 제공한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;audit-logging-구현-방법&#34;&gt;Audit Logging 구현 방법&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;중앙 집중식 로깅 서비스&lt;/strong&gt;: 모든 마이크로서비스의 로그를 한 곳에서 수집하고 저장한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;표준화된 로그 형식&lt;/strong&gt;: 일관된 형식을 사용하여 로그 분석을 용이하게 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;보안 및 접근 제어&lt;/strong&gt;: 로그 데이터의 무결성과 기밀성을 보장한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;확장성 고려&lt;/strong&gt;: 대량의 로그 데이터를 효율적으로 처리할 수 있어야 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;audit-logging-구현-시-고려사항&#34;&gt;Audit Logging 구현 시 고려사항&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;과도한 로깅 vs 부족한 로깅&lt;/strong&gt;: 적절한 수준의 로깅을 유지해야 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;성능 영향&lt;/strong&gt;: 로깅이 시스템 성능에 미치는 영향을 최소화해야 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;데이터 보존 정책&lt;/strong&gt;: 로그 데이터의 보존 기간과 방법을 정의해야 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;실시간 모니터링&lt;/strong&gt;: 중요한 이벤트에 대한 실시간 알림 시스템을 구축해야 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;audit-logging-도구-및-기술&#34;&gt;Audit Logging 도구 및 기술&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Elasticsearch, Logstash, Kibana (ELK) 스택&lt;/strong&gt;: 로그 수집, 저장, 시각화에 널리 사용된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Serilog&lt;/strong&gt;:.NET 환경에서 구조화된 로깅을 위한 프레임워크이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kafka&lt;/strong&gt;: 대규모 로그 스트림 처리에 적합한 메시징 시스템이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloud-native 솔루션&lt;/strong&gt;: AWS CloudWatch, Google Cloud Logging 등이 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;audit-logging을-효과적으로-구현하기-위한-방법&#34;&gt;Audit Logging을 효과적으로 구현하기 위한 방법&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;비즈니스 로직 내에 로깅 코드 추가&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;장점&lt;/strong&gt;: 구현이 비교적 간단하며, 특정 이벤트에 대한 상세한 로깅이 가능하다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;단점&lt;/strong&gt;: 비즈니스 로직과 로깅 코드가 혼재되어 코드의 가독성과 유지보수성이 저하될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AOP(Aspect-Oriented Programming) 활용&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;장점&lt;/strong&gt;: 비즈니스 로직과 로깅 기능을 분리하여 코드의 모듈성을 향상시킨다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;단점&lt;/strong&gt;: 메서드명이나 인수에만 접근할 수 있어, 비즈니스 컨텍스트에 따른 상세한 로깅에는 한계가 있을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;이벤트 소싱(Event Sourcing) 사용&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;장점&lt;/strong&gt;: 시스템의 상태 변화를 이벤트 형태로 저장하여, 모든 변경 이력을 추적할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;단점&lt;/strong&gt;: 쿼리 작업은 이벤트로 기록되지 않으므로, 이러한 작업에 대한 로깅은 별도의 방법을 통해 구현해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;모범-사례&#34;&gt;모범 사례&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;상관 관계 ID 사용&lt;/strong&gt;: 마이크로서비스 간 요청 추적을 위해 고유 ID를 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;컨텍스트 정보 포함&lt;/strong&gt;: 사용자 ID, 서비스 이름, 요청 ID 등을 로그에 포함한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;민감한 정보 보호&lt;/strong&gt;: 개인정보나 보안 관련 데이터는 마스킹 처리한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;로그 레벨 구분&lt;/strong&gt;: 중요도에 따라 로그 레벨을 적절히 설정한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Exception Tracking</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/exception-tracking/</link>
      <pubDate>Thu, 03 Oct 2024 02:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/exception-tracking/</guid>
      <description>&lt;h2 id=&#34;exception-tracking&#34;&gt;Exception Tracking&lt;/h2&gt;
&lt;p&gt;Exception Tracking은 분산 시스템 전반에 걸쳐 발생하는 예외를 중앙에서 수집, 집계, 분석하는 패턴이다.&lt;br&gt;
이 패턴은 복잡한 마이크로서비스 환경에서 오류를 효과적으로 모니터링하고 디버깅하는 데 필수적이다.&lt;/p&gt;
&lt;p&gt;Exception Tracking은 MSA 환경에서 시스템의 안정성을 유지하고 문제를 신속하게 해결하는 데 필수적인 도구이다.&lt;br&gt;
이를 통해 개발팀은 복잡한 분산 시스템을 효과적으로 관리하고 사용자 경험을 개선할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;주요-구성-요소&#34;&gt;주요 구성 요소&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;중앙 집중식 예외 로거&lt;/strong&gt;: 여러 마이크로서비스에서 발생하는 예외 데이터를 수집하고 저장하는 전용 서비스나 도구이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예외 처리 미들웨어&lt;/strong&gt;: 각 마이크로서비스에 구현되어 예외를 캐치하고 중앙 로거로 전달하는 컴포넌트이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;상관 관계 ID&lt;/strong&gt;: 여러 서비스에 걸친 요청 흐름과 관련 예외를 추적하는 데 사용되는 고유 식별자이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;알림 및 모니터링&lt;/strong&gt;: 중요한 문제에 대해 개발 및 운영 팀에 실시간으로 알리는 통합 모니터링 도구이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;대시보드&lt;/strong&gt;: 예외의 빈도, 심각도, 잠재적 영향 등에 대한 인사이트와 분석을 제공하는 사용자 인터페이스이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;exception-tracking의-중요성&#34;&gt;Exception Tracking의 중요성&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;복잡성 관리&lt;/strong&gt;: 수많은 서비스로 구성된 시스템에서 오류의 흐름을 파악할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;성능 최적화&lt;/strong&gt;: 병목 현상과 지연을 식별하여 시스템 성능을 개선할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;신속한 문제 해결&lt;/strong&gt;: 오류 발생 지점을 정확히 파악하여 디버깅 시간을 단축할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;시스템 이해 향상&lt;/strong&gt;: 서비스 간 의존성과 상호작용을 시각화하여 시스템 아키텍처를 더 잘 이해할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;구현-방법&#34;&gt;구현 방법&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;중앙 집중식 로깅 서비스 구축&lt;/strong&gt;: ELK 스택(Elasticsearch, Logstash, Kibana)과 같은 도구를 사용하여 모든 마이크로서비스의 로그를 한 곳에서 수집하고 분석한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;고유 요청 ID 생성&lt;/strong&gt;: 각 요청에 고유한 ID를 할당하여 여러 서비스에 걸친 예외 추적을 가능하게 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;표준화된 예외 형식 사용&lt;/strong&gt;: 일관된 형식을 사용하여 예외 데이터를 수집하고 분석한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;실시간 알림 설정&lt;/strong&gt;: 중요한 예외 발생 시 개발팀에 즉시 알림을 보내도록 구성한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feign Error Decoder 활용&lt;/strong&gt;: Spring Cloud Openfeign을 사용하는 경우, Feign Error Decoder를 구현하여 마이크로서비스 간 통신 중 발생하는 예외를 효과적으로 처리한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;모범-사례&#34;&gt;모범 사례&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;예외 분류 및 우선순위 지정&lt;/strong&gt;: 예외의 심각도와 영향도에 따라 분류하고 우선순위를 지정한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;컨텍스트 정보 포함&lt;/strong&gt;: 예외 로그에 사용자 정보, 요청 세부 사항 등 충분한 컨텍스트 정보를 포함시킨다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;정기적인 분석 및 개선&lt;/strong&gt;: 수집된 예외 데이터를 정기적으로 분석하여 시스템 안정성을 지속적으로 개선한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fail Fast 원칙 적용&lt;/strong&gt;: 문제를 조기에 감지하고 신속하게 대응할 수 있도록 Fail Fast 원칙을 적용한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Distributed Tracing</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/distributed-tracing/</link>
      <pubDate>Thu, 03 Oct 2024 01:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/distributed-tracing/</guid>
      <description>&lt;h2 id=&#34;distributed-tracing&#34;&gt;Distributed Tracing&lt;/h2&gt;
&lt;p&gt;Distributed Tracing은 마이크로서비스 환경에서 요청이 여러 서비스를 거쳐 처리되는 과정을 추적하고 관찰하는 방법이다. 이 기술은 복잡한 분산 시스템에서 요청의 흐름을 시각화하고, 성능 문제를 식별하며, 시스템 동작을 이해하는 데 필수적이다.&lt;/p&gt;
&lt;p&gt;Distributed Tracing은 현대적인 마이크로서비스 아키텍처에서 시스템의 동작을 이해하고 최적화하는 데 필수적인 도구이며 이를 통해 개발팀은 복잡한 분산 시스템을 효과적으로 관리하고, 사용자 경험을 개선할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;작동-원리&#34;&gt;작동 원리&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;고유 식별자 할당&lt;/strong&gt;: 각 요청에 고유한 Trace ID를 부여한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;스팬 생성&lt;/strong&gt;: 요청이 각 서비스를 통과할 때마다 &amp;lsquo;스팬&amp;rsquo;이라는 작업 단위가 생성된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;계층 구조&lt;/strong&gt;: 스팬들은 부모-자식 관계를 형성하여 요청의 전체 경로를 표현한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;메타데이터 수집&lt;/strong&gt;: 각 스팬은 시작/종료 시간, 서비스 이름, 오류 정보 등의 메타데이터를 포함한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;distributed-tracing의-중요성&#34;&gt;Distributed Tracing의 중요성&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;복잡성 관리&lt;/strong&gt;: 수십 또는 수백 개의 서비스로 구성된 시스템에서 요청 흐름을 파악할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;성능 최적화&lt;/strong&gt;: 병목 현상과 지연을 식별하여 시스템 성능을 개선할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;문제 해결&lt;/strong&gt;: 오류 발생 지점을 정확히 파악하여 디버깅 시간을 단축할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;시스템 이해&lt;/strong&gt;: 서비스 간 의존성과 상호작용을 시각화하여 시스템 아키텍처를 더 잘 이해할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;주요-사용-사례&#34;&gt;주요 사용 사례&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;성능 병목 식별&lt;/strong&gt;: 요청 처리 과정에서 지연이 발생하는 서비스를 찾아낸다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;오류 추적&lt;/strong&gt;: 실패한 요청의 정확한 실패 지점과 원인을 파악한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;서비스 의존성 분석&lt;/strong&gt;: 서비스 간 통신 패턴과 의존성을 시각화한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;최적화&lt;/strong&gt;: 전체 시스템의 성능을 개선하기 위한 인사이트를 제공한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;구현-방법&#34;&gt;구현 방법&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;계측&lt;/strong&gt;: 코드에 트레이싱 기능을 추가한다. 많은 도구들이 자동 계측을 지원한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;데이터 수집&lt;/strong&gt;: 각 요청에 대한 스팬 데이터를 수집한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;분석 및 시각화&lt;/strong&gt;: 수집된 데이터를 분석하고 시각화하여 인사이트를 얻는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;주요-도구&#34;&gt;주요 도구&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Jaeger&lt;/strong&gt;: 성능 최적화와 지연 시간 분석에 적합한 오픈소스 도구.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zipkin&lt;/strong&gt;: 트레이스 데이터를 의존성 그래프와 플레임 그래프로 시각화한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Datadog APM&lt;/strong&gt;: 심층적인 가시성과 다양한 기능을 제공하는 엔터프라이즈 솔루션이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;New Relic&lt;/strong&gt;: 분산 환경에 최적화된 실시간 시각화와 분석 기능을 제공한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;모범-사례&#34;&gt;모범 사례&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;샘플링 전략 수립&lt;/strong&gt;: 트래픽 패턴과 시스템 요구사항에 따라 적절한 샘플링 비율을 설정한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;컨텍스트 전파&lt;/strong&gt;: 서비스 간 요청 시 트레이스 정보를 올바르게 전달한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;표준화&lt;/strong&gt;: OpenTelemetry와 같은 표준 프레임워크를 사용하여 호환성을 확보한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;시각화 도구 활용&lt;/strong&gt;: 트레이스 타임라인, 서비스 의존성, 중요 경로 정보를 명확히 표시하는 대시보드를 구성한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Health Check API</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/health-check-api/</link>
      <pubDate>Thu, 03 Oct 2024 01:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/health-check-api/</guid>
      <description>&lt;h2 id=&#34;health-check-api&#34;&gt;Health Check API&lt;/h2&gt;
&lt;p&gt;Health Check API는 서비스의 상태를 주기적으로 확인하여 서비스의 정상 작동 여부를 판단하는 엔드포인트이다.&lt;br&gt;
이는 마이크로서비스 환경에서 각 서비스의 가용성과 성능을 모니터링하는 데 필수적이다.&lt;/p&gt;
&lt;p&gt;Health Check API는 MSA 환경에서 시스템의 안정성과 가용성을 유지하는 데 핵심적인 역할을 한다.&lt;br&gt;
적절히 구현된 Health Check는 문제를 조기에 발견하고, 시스템의 전반적인 상태를 실시간으로 모니터링할 수 있게 해주어 서비스의 품질을 높이는 데 크게 기여한다.&lt;/p&gt;
&lt;h3 id=&#34;health-check-api의-중요성&#34;&gt;Health Check API의 중요성&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;고가용성 보장&lt;/strong&gt;: 로드 밸런서가 정상 작동 중인 서비스에만 트래픽을 전달하여 서비스의 고가용성을 확보한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;문제 조기 발견&lt;/strong&gt;: 서비스의 이상을 조기에 감지하여 대응할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;시스템 안정성 향상&lt;/strong&gt;: 전체 시스템의 안정성을 높이고 장애 전파를 방지한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;health-check-api의-주요-기능&#34;&gt;Health Check API의 주요 기능&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;상태 확인:&lt;/strong&gt; 서비스 인스턴스의 현재 상태를 반환하여, 해당 인스턴스가 요청을 처리할 수 있는지 여부를 판단한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;종속성 검사:&lt;/strong&gt; 서비스가 의존하는 데이터베이스, 메시지 브로커 등 외부 시스템과의 연결 상태를 확인한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;리소스 모니터링:&lt;/strong&gt; 디스크 공간, 메모리 사용량 등 호스트 시스템의 자원 상태를 점검한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;health-check-api의-중요성-1&#34;&gt;Health Check API의 중요성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;장애 감지:&lt;/strong&gt; 서비스 인스턴스가 비정상 상태에 빠졌을 때 이를 신속하게 감지하여 알림을 생성하고, 로드 밸런서나 서비스 레지스트리가 해당 인스턴스를 요청 대상에서 제외할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;서비스 디스커버리 통합:&lt;/strong&gt; 서비스 레지스트리는 헬스 체크를 통해 현재 사용 가능한 서비스 인스턴스 목록을 유지하며, 클라이언트는 이 정보를 기반으로 요청을 보낸다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;시스템 안정성 향상:&lt;/strong&gt; 주기적인 상태 확인을 통해 잠재적인 문제를 조기에 발견하고 대응함으로써 전체 시스템의 안정성을 높일 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;health-check-api-구현-방법&#34;&gt;Health Check API 구현 방법&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;엔드포인트 생성&lt;/strong&gt;: 일반적으로 &lt;code&gt;/health&lt;/code&gt; 또는 &lt;code&gt;/ping&lt;/code&gt; 경로로 설정한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;응답 코드&lt;/strong&gt;: 정상 상태일 때 HTTP 200 OK를 반환한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;상태 정보 포함&lt;/strong&gt;: 단순 생존 여부뿐만 아니라 데이터베이스 연결, 외부 서비스 의존성 등의 상태도 포함할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;health-check-유형&#34;&gt;Health Check 유형&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Passive Health Checks&lt;/strong&gt;: 실제 요청에 대한 응답을 모니터링한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Active Health Checks&lt;/strong&gt;: 주기적으로 특별한 요청을 보내 서비스 상태를 확인한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agent-based Health Checks&lt;/strong&gt;: 서버 내부에 에이전트를 설치하여 상세한 정보를 수집한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;health-check-api-구현-도구&#34;&gt;Health Check API 구현 도구&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Spring Boot Actuator&lt;/strong&gt;: 자동으로 &lt;code&gt;/actuator/health&lt;/code&gt; 엔드포인트를 제공한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes Probes&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Liveness Probe: 애플리케이션이 살아있는지 확인&lt;/li&gt;
&lt;li&gt;Readiness Probe: 애플리케이션이 요청을 처리할 준비가 되었는지 확인&lt;/li&gt;
&lt;li&gt;Startup Probe: 애플리케이션의 시작이 완료되었는지 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;health-check-api-모범-사례&#34;&gt;Health Check API 모범 사례&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;상세한 상태 정보&lt;/strong&gt;: 단순 UP/DOWN이 아닌 구체적인 상태 정보를 제공한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;성능 고려&lt;/strong&gt;: Health Check 자체가 시스템에 부담을 주지 않도록 설계한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;보안&lt;/strong&gt;: Health Check 엔드포인트에 대한 적절한 접근 제어를 구현한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;로깅 및 모니터링&lt;/strong&gt;: Health Check 결과를 로깅하고 모니터링하여 트렌드를 분석한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;커스터마이징&lt;/strong&gt;: 애플리케이션의 특성에 맞게 Health Check 로직을 커스터마이징한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Log Aggregation</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/log-aggregation/</link>
      <pubDate>Thu, 03 Oct 2024 01:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/log-aggregation/</guid>
      <description>&lt;h2 id=&#34;log-aggregation&#34;&gt;Log Aggregation&lt;/h2&gt;
&lt;p&gt;마이크로서비스 아키텍처(MSA)에서 Log Aggregation은 Observability를 구현하는 핵심 패턴 중 하나이다.&lt;br&gt;
이 패턴은 분산된 마이크로서비스 환경에서 로그 데이터를 효과적으로 관리하고 분석하는 방법을 제공한다.&lt;/p&gt;
&lt;p&gt;Log Aggregation은 여러 마이크로서비스와 시스템 구성 요소에서 생성된 로그 데이터를 중앙 집중식 저장소로 수집, 통합, 정규화하는 프로세스이다. 이를 통해 개발자와 운영팀은 전체 시스템의 동작을 포괄적으로 이해하고 문제를 효과적으로 해결할 수 있다.&lt;/p&gt;
&lt;p&gt;Log Aggregation은 MSA 환경에서 시스템의 투명성을 높이고, 문제 해결 능력을 향상시키며, 전반적인 시스템 성능과 안정성을 개선하는 데 핵심적인 역할을 한다. 적절히 구현된 Log Aggregation 시스템은 개발팀과 운영팀이 복잡한 마이크로서비스 환경을 효과적으로 관리하고 최적화하는 데 필수적인 도구가 된다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monitoring and Observability</title>
      <link>https://buenhyden.github.io/til/2024/09/27/monitoring-and-observability/</link>
      <pubDate>Fri, 27 Sep 2024 08:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/27/monitoring-and-observability/</guid>
      <description>Observability는 시스템의 내부 상태를 외부 출력을 통해 이해하고 추론할 수 있는 능력을 말하고, Monitoring은 시스템의 동작과 성능을 지속적으로 관찰하고 추적하는 활동을 말한다.</description>
    </item>
    <item>
      <title>Metric</title>
      <link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability/metric/</link>
      <pubDate>Fri, 27 Sep 2024 02:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability/metric/</guid>
      <description>Metric는 시스템의 상태, 동작, 성능 등을 나타내는 수치화된 측정값</description>
    </item>
    <item>
      <title>Trace</title>
      <link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability/trace/</link>
      <pubDate>Fri, 27 Sep 2024 02:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability/trace/</guid>
      <description>분산 시스템에서 요청이나 트랜잭션이 여러 서비스와 컴포넌트를 통과하는 전체 여정을 기록한 것</description>
    </item>
    <item>
      <title>Log</title>
      <link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability/log/</link>
      <pubDate>Fri, 27 Sep 2024 02:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability/log/</guid>
      <description>Log는 애플리케이션 실행 시 생성되는 텍스트 기반의 기록이다. 이는 구조화된 형식(예: JSON)이나 비구조화된 텍스트 형식으로 제공될 수 있다.</description>
    </item>
    <item>
      <title>Observability</title>
      <link>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability/</link>
      <pubDate>Fri, 27 Sep 2024 02:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development-and-maintenance/devops/observability/</guid>
      <description>외부 출력(로그, 메트릭, 트레이스)을 분석하여 시스템의 내부 상태를 이해하는 방식으로 단순한 모니터링을 넘어 텔레메트리 데이터를 수집, 분석, 해석 및 시각화한다.</description>
    </item>
  </channel>
</rss>
