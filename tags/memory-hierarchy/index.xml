<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Memory-Hierarchy</title><link>https://buenhyden.github.io/tags/memory-hierarchy/</link><description>Recent content in Memory-Hierarchy on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 23 Sep 2024 03:33:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/memory-hierarchy/index.xml" rel="self" type="application/rss+xml"/><item><title>메모리의 계층 구조 (Memory Hierarchy)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-hierarchy/</link><pubDate>Mon, 23 Sep 2024 03:33:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-hierarchy/</guid><description>
&lt;h2>메모리의 계층 구조 (Memory Hierarchy)&lt;/h2>&lt;p>메모리 계층 구조는 컴퓨터 시스템에서 데이터 접근의 효율성을 극대화하고 전체 시스템 성능을 향상시키기 위해 설계된 구조.&lt;br>
이 구조는 속도, 용량, 비용 간의 균형을 고려하여 여러 종류의 메모리를 계층적으로 배치한다.&lt;/p>
&lt;p>메모리 계층 구조의 각 레벨은 위로 올라갈수록 다음과 같은 특성을 가진다.&lt;/p>
&lt;ul>
&lt;li>접근 속도가 빨라짐&lt;/li>
&lt;li>용량이 작아짐&lt;/li>
&lt;li>비트당 가격이 높아짐&lt;/li>
&lt;li>CPU에 의한 접근 빈도가 증가함&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">계층 구조 (위에서 아래로):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">레지스터
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">캐시 (L1 → L2 → L3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">메인 메모리 (RAM)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">보조 기억 장치 (SSD/HDD)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이러한 계층 구조는 &amp;lsquo;참조 지역성(Locality of Reference)&amp;rsquo; 원리를 활용하여 전체 시스템의 성능을 최적화한다.&lt;br>
자주 사용되는 데이터를 빠른 상위 계층에 유지함으로써, 평균 데이터 접근 시간을 줄이고 전체적인 시스템 성능을 향상시킨다.&lt;/p>
&lt;blockquote>
&lt;p>참조 지역성(Locality of Reference)&lt;br>
컴퓨터 프로그램이 메모리에 접근하는 패턴에 관한 원리로, 프로그램이 일정 기간 동안 특정한 메모리 위치 집합에 집중적으로 접근하는 경향.&lt;/p>
&lt;ul>
&lt;li>중요성
&lt;ul>
&lt;li>캐시 메모리 최적화: 참조 지역성 원리를 활용하여 캐시 메모리에 자주 사용되는 데이터를 저장함으로써 캐시 적중률(hit rate)을 높일 수 있다&lt;/li>
&lt;li>시스템 성능 향상: 캐시 적중률이 높아지면 메모리 접근 시간이 줄어들어 전체적인 시스템 성능이 향상된다.&lt;/li>
&lt;li>프로그램 최적화: 개발자가 참조 지역성을 고려하여 코드를 작성하면 프로그램의 실행 속도를 크게 개선할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>유형
&lt;ul>
&lt;li>시간적 지역성 (Temporal Locality): 최근에 참조된 메모리 위치가 가까운 미래에 다시 참조될 가능성이 높다.
&lt;ul>
&lt;li>반복문에서 같은 변수를 여러 번 사용하는 경우&lt;/li>
&lt;li>자주 호출되는 함수나 서브루틴&lt;/li>
&lt;li>스택에 저장된 지역 변수에 대한 반복적인 접근&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>공간적 지역성 (Spatial Locality): 특정 메모리 위치가 참조되면, 그 주변의 메모리 위치들도 곧 참조될 가능성이 높다.
&lt;ul>
&lt;li>배열의 요소를 순차적으로 접근하는 경우&lt;/li>
&lt;li>구조체의 멤버 변수들에 연속적으로 접근하는 경우&lt;/li>
&lt;li>명령어들이 메모리에 연속적으로 저장되어 있는 경우&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Computer%20Architecture/Memory%20Architecture/memory-hierarchy-design.webp"
alt="Memory Hierarchy Design"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.scaler.com/topics/memory-hierarchy/" target="_blank" rel="noopener">https://www.scaler.com/topics/memory-hierarchy/&lt;/a> _&lt;/p>
&lt;h3>레지스터 (Register)&lt;/h3>&lt;p>레지스터는 메모리 계층 구조의 최상위에 위치하며, CPU 내부에 존재한다.&lt;/p>
&lt;p>특징:&lt;/p>
&lt;ul>
&lt;li>가장 빠른 접근 속도를 제공&lt;/li>
&lt;li>매우 작은 용량 (일반적으로 32비트 또는 64비트)&lt;/li>
&lt;li>CPU가 직접 사용할 수 있는 데이터를 저장&lt;/li>
&lt;li>비용이 가장 높음&lt;/li>
&lt;/ul>
&lt;h3>캐시 메모리 (Cache Memory)&lt;/h3>&lt;p>캐시 메모리는 CPU와 주 메모리 사이에 위치하며, 자주 사용되는 데이터와 명령어를 저장한다.&lt;/p>
&lt;p>종류:&lt;/p>
&lt;ul>
&lt;li>L1 캐시: CPU 코어에 가장 가까이 위치, 가장 빠르지만 용량이 작음 (보통 8~64KB)&lt;/li>
&lt;li>L2 캐시: L1보다 느리지만 더 큰 용량 (64KB~4MB)&lt;/li>
&lt;li>L3 캐시: 일부 프로세서에서 사용, L2보다 더 큰 용량&lt;/li>
&lt;/ul>
&lt;p>캐시 메모리는 SRAM(Static RAM)으로 구성되며, 빠른 접근 속도를 제공한다.&lt;/p>
&lt;h3>주 메모리 (Main Memory)&lt;/h3>&lt;p>주 메모리는 일반적으로 RAM(Random Access Memory)을 의미한다.&lt;/p>
&lt;p>특징:&lt;/p>
&lt;ul>
&lt;li>CPU가 직접 접근할 수 있는 가장 큰 메모리&lt;/li>
&lt;li>주로 DRAM(Dynamic RAM)으로 구성&lt;/li>
&lt;li>캐시보다 느리지만 더 큰 용량 제공&lt;/li>
&lt;li>휘발성 메모리 (전원이 꺼지면 데이터 손실)&lt;/li>
&lt;/ul>
&lt;h3>보조 기억 장치 (Secondary Storage)&lt;/h3>&lt;p>보조 기억 장치는 메모리 계층 구조의 가장 하위에 위치한다.&lt;/p>
&lt;p>특징:&lt;/p>
&lt;ul>
&lt;li>하드 디스크 드라이브(HDD)나 솔리드 스테이트 드라이브(SSD) 등이 포함&lt;/li>
&lt;li>가장 큰 용량을 제공&lt;/li>
&lt;li>비휘발성 (전원이 꺼져도 데이터 유지)&lt;/li>
&lt;li>접근 속도가 가장 느림&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>