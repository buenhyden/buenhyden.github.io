<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Javascript on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 07 Mar 2025 05:36:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic Syntax</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/</link>
      <pubDate>Fri, 07 Mar 2025 03:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/</guid>
      <description>&lt;h2 id=&#34;basic-syntax&#34;&gt;Basic Syntax&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Variables</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/</link>
      <pubDate>Wed, 25 Dec 2024 01:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/</guid>
      <description>자바스크립트 변수는 프로그램 내에서 데이터를 효과적으로 저장하고 관리하는 기본 도구이다.</description>
    </item>
    <item>
      <title>ECMAScript</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/ecmascript/</link>
      <pubDate>Wed, 04 Dec 2024 17:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/ecmascript/</guid>
      <description>ECMAScript는 자바스크립트의 표준 규격으로, **Ecma International**이 ECMA-262 기술 규격을 통해 정의한 스크립트 프로그래밍 언어이다.</description>
    </item>
    <item>
      <title>Callback</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/</link>
      <pubDate>Sun, 06 Oct 2024 08:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/</guid>
      <description>콜백(Callback)은 다른 함수에 인자로 전달되는 함수를 의미한다.</description>
    </item>
    <item>
      <title>Data Types</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-types/</link>
      <pubDate>Wed, 29 Jan 2025 01:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-types/</guid>
      <description>&lt;h2 id=&#34;data-types&#34;&gt;Data Types&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Javascript vs. Python</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/javascript-vs-python/</link>
      <pubDate>Sun, 22 Dec 2024 04:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/javascript-vs-python/</guid>
      <description>&lt;h2 id=&#34;javascript-vs-python&#34;&gt;Javascript vs. Python&lt;/h2&gt;
&lt;p&gt;JavaScript와 Python은 현대 프로그래밍 세계에서 가장 인기 있는 두 언어이다.&lt;br&gt;
두 언어 모두 높은 수준의 프로그래밍 언어이지만, 설계 철학, 사용 사례, 문법 등에서 중요한 차이점이 있다.&lt;/p&gt;
&lt;p&gt;JavaScript와 Python은 각각 고유한 강점과 약점을 가진 강력한 프로그래밍 언어이다.&lt;br&gt;
JavaScript는 웹 개발에서 독보적인 위치를 차지하고 있으며, 비동기 프로그래밍 모델과 빠른 실행 속도가 특징이다. Python은 가독성이 뛰어나고 데이터 과학, 기계 학습, 자동화 분야에서 뛰어난 라이브러리 지원을 제공한다.&lt;/p&gt;
&lt;h3 id=&#34;역사와-배경&#34;&gt;역사와 배경&lt;/h3&gt;
&lt;h4 id=&#34;javascript&#34;&gt;JavaScript&lt;/h4&gt;
&lt;p&gt;JavaScript는 1995년 Netscape의 Brendan Eich에 의해 웹 브라우저용 스크립팅 언어로 개발되었다.&lt;br&gt;
처음에는 &amp;lsquo;Mocha&amp;rsquo;라고 불렸으며, 나중에 &amp;lsquo;LiveScript&amp;rsquo;로 이름이 바뀌었고, 마지막으로 마케팅 목적으로 &amp;lsquo;JavaScript&amp;rsquo;라는 이름이 되었다 (Java와의 관련성은 거의 없다).&lt;br&gt;
JavaScript는 웹 페이지에 상호작용성을 추가하기 위해 만들어졌으며, 시간이 지남에 따라 Node.js와 같은 플랫폼 덕분에 서버 측 개발로 확장되었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Type Casting</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/type-casting/</link>
      <pubDate>Tue, 04 Mar 2025 10:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/type-casting/</guid>
      <description>&lt;h2 id=&#34;type-casting&#34;&gt;Type Casting&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Python vs Javascript vs Typescript vs Java</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python-vs-javascript-vs-typescript-vs-java/</link>
      <pubDate>Fri, 06 Dec 2024 00:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python-vs-javascript-vs-typescript-vs-java/</guid>
      <description>프로그래밍 언어마다 각기 다른 설계 철학과 실행 방식, 개발 생태계 및 목적이 존재한다.</description>
    </item>
    <item>
      <title>Callback Hell</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/callback-hell/</link>
      <pubDate>Wed, 09 Oct 2024 05:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/callback-hell/</guid>
      <description>콜백 지옥(Callback Hell)은 JavaScript 등의 비동기 프로그래밍 환경에서 중첩된 콜백 함수가 과도하게 사용되어 코드의 가독성과 유지보수성을 크게 저하시키는 현상을 의미한다.</description>
    </item>
    <item>
      <title>Data Structures</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-structures/</link>
      <pubDate>Mon, 23 Dec 2024 01:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-structures/</guid>
      <description>&lt;h2 id=&#34;data-structures&#34;&gt;Data Structures&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Equality Comparisons</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/equality-comparisons/</link>
      <pubDate>Mon, 23 Dec 2024 01:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/equality-comparisons/</guid>
      <description>&lt;h2 id=&#34;equality-comparisons&#34;&gt;Equality Comparisons&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Javascript</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/</link>
      <pubDate>Thu, 21 Nov 2024 01:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/</guid>
      <description>웹 개발에서 널리 사용되는 프로그래밍 언어</description>
    </item>
    <item>
      <title>Loops and Iterations</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/loops-and-iterations/</link>
      <pubDate>Mon, 23 Dec 2024 01:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/loops-and-iterations/</guid>
      <description>&lt;h2 id=&#34;loops-and-iterations&#34;&gt;Loops and Iterations&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Control Flow</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/control-flow/</link>
      <pubDate>Mon, 23 Dec 2024 02:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/control-flow/</guid>
      <description>&lt;h2 id=&#34;control-flow&#34;&gt;Control Flow&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Expressions and Operators</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/expressions-and-operators/</link>
      <pubDate>Mon, 23 Dec 2024 02:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/expressions-and-operators/</guid>
      <description>&lt;h2 id=&#34;expressions-and-operators&#34;&gt;Expressions and Operators&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>DOM APIs</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/dom-apis/</link>
      <pubDate>Mon, 23 Dec 2024 02:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/dom-apis/</guid>
      <description>&lt;h2 id=&#34;dom-apis&#34;&gt;DOM APIs&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Strict Mode</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/strict-mode/</link>
      <pubDate>Mon, 23 Dec 2024 02:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/strict-mode/</guid>
      <description>&lt;h2 id=&#34;strict-mode&#34;&gt;Strict Mode&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Asynchronous JavaScript</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/</link>
      <pubDate>Mon, 23 Dec 2024 01:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/</guid>
      <description>&lt;h2 id=&#34;asynchronous-javascript&#34;&gt;Asynchronous JavaScript&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Working with APIs</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/working-with-apis/</link>
      <pubDate>Tue, 24 Dec 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/working-with-apis/</guid>
      <description>&lt;h2 id=&#34;working-with-apis&#34;&gt;Working with APIs&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Classes</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/classes/</link>
      <pubDate>Mon, 23 Dec 2024 02:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/classes/</guid>
      <description>&lt;h2 id=&#34;classes&#34;&gt;Classes&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Javascript Iterators and Generators</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/javascript-iterators-and-generators/</link>
      <pubDate>Mon, 23 Dec 2024 02:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/javascript-iterators-and-generators/</guid>
      <description>&lt;h2 id=&#34;javascript-iterators-and-generators&#34;&gt;Javascript Iterators and Generators&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Callback vs Promise vs Async/Await</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback-vs-promise-vs-async-await/</link>
      <pubDate>Sat, 23 Nov 2024 09:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback-vs-promise-vs-async-await/</guid>
      <description>JavaScript의 비동기 처리 방식</description>
    </item>
    <item>
      <title>Memory Management</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/memory-management/</link>
      <pubDate>Tue, 24 Dec 2024 02:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/memory-management/</guid>
      <description>&lt;h2 id=&#34;memory-management&#34;&gt;Memory Management&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>JavaScript Chrome Dev Tools</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/javascript-chrome-dev-tools/</link>
      <pubDate>Tue, 24 Dec 2024 02:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/javascript-chrome-dev-tools/</guid>
      <description>&lt;h2 id=&#34;javascript-chrome-dev-tools&#34;&gt;JavaScript Chrome Dev Tools&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Build Tools</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/build-tools/</link>
      <pubDate>Sat, 23 Nov 2024 07:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/build-tools/</guid>
      <description>&lt;h2 id=&#34;build-tools&#34;&gt;Build Tools&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Javascript Testing</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/</link>
      <pubDate>Fri, 22 Nov 2024 06:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/</guid>
      <description>Javascript에서 활용할 수 있는 다양한 테스팅 도구</description>
    </item>
    <item>
      <title>NodeJS vs. Javascript</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/nodejs-javascript/</link>
      <pubDate>Sat, 23 Nov 2024 09:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/nodejs-javascript/</guid>
      <description>JavaScript는 웹 페이지에 동적인 기능을 추가하기 위해 만들어진 프로그래밍 언어이며, Node.js는 JavaScript를 서버 측에서 실행할 수 있게 해주는 런타임 환경이다.</description>
    </item>
    <item>
      <title>import vs require</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/modules/import-vs-require/</link>
      <pubDate>Sat, 23 Nov 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/modules/import-vs-require/</guid>
      <description>`require`는 Node.js에서 사용되는 CommonJS 모듈 시스템의 키워드로, 동기적으로 모듈을 로드하며 프로그램의 어느 지점에서나 호출할 수 있다. 반면에 `import`는 ES6에서 도입된 모듈 시스템의 키워드로, 코드 실행 전에 모듈을 미리 로드하며 파일의 시작 부분에서만 사용할 수 있다.</description>
    </item>
    <item>
      <title>APIs</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/</link>
      <pubDate>Fri, 07 Mar 2025 05:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/</guid>
      <description>&lt;h2 id=&#34;apis&#34;&gt;APIs&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Keep App Running</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/keep-app-running/</link>
      <pubDate>Fri, 07 Mar 2025 05:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/keep-app-running/</guid>
      <description>&lt;h2 id=&#34;keep-app-running&#34;&gt;Keep App Running&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Making API Calls</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/making-api-calls/</link>
      <pubDate>Fri, 07 Mar 2025 05:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/making-api-calls/</guid>
      <description>&lt;h2 id=&#34;making-api-calls&#34;&gt;Making API Calls&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Testing</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/testing/</link>
      <pubDate>Fri, 07 Mar 2025 05:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/testing/</guid>
      <description>&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Working with DBs</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/working-with-dbs/</link>
      <pubDate>Fri, 07 Mar 2025 05:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/working-with-dbs/</guid>
      <description>&lt;h2 id=&#34;working-with-dbs&#34;&gt;Working with DBs&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Authentication</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/authentication/</link>
      <pubDate>Fri, 07 Mar 2025 05:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/authentication/</guid>
      <description>&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Object</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-types/object/</link>
      <pubDate>Fri, 07 Mar 2025 04:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-types/object/</guid>
      <description>&lt;h2 id=&#34;object&#34;&gt;Object&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Module Bundlers</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/build-tools/module-bundlers/</link>
      <pubDate>Fri, 07 Mar 2025 03:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/build-tools/module-bundlers/</guid>
      <description>&lt;h2 id=&#34;module-bundlers&#34;&gt;Module Bundlers&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Javascript Engines</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/javascript-engines/</link>
      <pubDate>Wed, 05 Mar 2025 09:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/javascript-engines/</guid>
      <description>&lt;h2 id=&#34;javascript-engines&#34;&gt;Javascript Engines&lt;/h2&gt;
&lt;p&gt;JavaScript 엔진은 JavaScript 코드를 이해하고 실행하는 프로그램이다.&lt;br&gt;
웹 브라우저나 Node.js와 같은 환경에서 JavaScript 코드를 해석하고 실행하는 핵심 요소이다.&lt;br&gt;
JavaScript는 원래 인터프리터 언어로 설계되었지만, 현대의 JavaScript 엔진들은 성능 향상을 위해 다양한 최적화 기술을 사용한다.&lt;/p&gt;
&lt;p&gt;JavaScript 엔진의 주요 역할:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript 코드를 읽고 구문 분석(파싱)&lt;/li&gt;
&lt;li&gt;코드를 기계어 또는 중간 표현으로 변환&lt;/li&gt;
&lt;li&gt;코드 실행&lt;/li&gt;
&lt;li&gt;메모리 관리 (가비지 컬렉션 포함)&lt;/li&gt;
&lt;li&gt;최적화 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JavaScript 엔진은 현대 웹의 핵심 구성 요소로, 웹 브라우저와 서버 측 애플리케이션 모두에서 JavaScript 코드를 실행하는 데 필수적이다. Google의 V8, Mozilla의 SpiderMonkey, Apple의 JavaScriptCore와 같은 주요 엔진들은 계속해서 발전하며, 성능을 향상시키고 새로운 언어 기능을 지원하고 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Async and Await</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/promises/async-and-await/</link>
      <pubDate>Tue, 04 Mar 2025 09:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/promises/async-and-await/</guid>
      <description>&lt;h2 id=&#34;async-and-await&#34;&gt;Async and Await&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Closures</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/functions/scope-and-function-stack/closures/</link>
      <pubDate>Tue, 04 Mar 2025 09:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/functions/scope-and-function-stack/closures/</guid>
      <description>&lt;h2 id=&#34;closures&#34;&gt;Closures&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Event Loop</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/fundamentals/async-programming/event-loop/</link>
      <pubDate>Thu, 26 Dec 2024 14:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/fundamentals/async-programming/event-loop/</guid>
      <description>Node.js의 이벤트 루프는 Node.js 애플리케이션의 핵심 작동 원리로, 비동기 I/O 작업을 효율적으로 처리하는 메커니즘이다.</description>
    </item>
    <item>
      <title>Currying vs. Partial Application</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/currying-vs-partial-application/</link>
      <pubDate>Thu, 26 Dec 2024 10:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/currying-vs-partial-application/</guid>
      <description>&lt;h2 id=&#34;currying-vs-partial-application&#34;&gt;Currying vs. Partial Application&lt;/h2&gt;
&lt;p&gt;자바스크립트의 함수형 프로그래밍에서 가장 중요한 개념 중 두 가지는 커링(Currying)과 부분 적용(Partial Application)이다. 이 두 기법은 콜백 함수를 다루는 강력한 패턴으로, 코드의 재사용성과 모듈성을 크게 향상시킨다.&lt;/p&gt;
&lt;p&gt;커링과 부분 적용은 자바스크립트의 콜백 함수를 더 효과적으로 다루기 위한 강력한 기법이다.&lt;br&gt;
두 패턴 모두 함수의 재사용성을 높이고 코드를 더 모듈화하는 데 도움이 된다.&lt;/p&gt;
&lt;p&gt;두 기법의 핵심 차이는 인자 처리 방식과 최종 함수의 구조에 있다.&lt;br&gt;
커링은 항상 단일 인자 함수의 체인을 만들고, 부분 적용은 일부 인자를 고정한 새로운 함수를 만든다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Partial Application</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/partial-application/</link>
      <pubDate>Thu, 26 Dec 2024 09:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/partial-application/</guid>
      <description>부분 적용이란 여러 개의 인자를 받는 함수에 일부 인자를 미리 제공하여, 나머지 인자만 받는 새로운 함수를 생성하는 기법이다.</description>
    </item>
    <item>
      <title>Event Emitter</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/fundamentals/async-programming/event-loop/event-emitter/</link>
      <pubDate>Thu, 26 Dec 2024 08:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/fundamentals/async-programming/event-loop/event-emitter/</guid>
      <description>&lt;h2 id=&#34;event-emitter&#34;&gt;Event Emitter&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Memoization</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/memoization/</link>
      <pubDate>Thu, 26 Dec 2024 07:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/memoization/</guid>
      <description>&lt;h2 id=&#34;memoization&#34;&gt;Memoization&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Debouncing</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/debouncing/</link>
      <pubDate>Thu, 26 Dec 2024 07:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/debouncing/</guid>
      <description>&lt;h2 id=&#34;debouncing&#34;&gt;Debouncing&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Throttling</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/throttling/</link>
      <pubDate>Thu, 26 Dec 2024 07:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/throttling/</guid>
      <description>&lt;h2 id=&#34;throttling&#34;&gt;Throttling&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Currying</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/currying/</link>
      <pubDate>Thu, 26 Dec 2024 07:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/currying/</guid>
      <description>&lt;h2 id=&#34;currying&#34;&gt;Currying&lt;/h2&gt;
&lt;p&gt;커링(Currying)은 함수형 프로그래밍에서 유래한 중요한 개념으로, 여러 개의 인자를 받는 함수를 단일 인자를 받는 일련의 함수들로 변환하는 기법이다.&lt;br&gt;
이 기법은 수학자이자 논리학자인 하스켈 커리(Haskell Curry)의 이름을 따서 명명되었다.&lt;br&gt;
커링은 자바스크립트의 함수형 프로그래밍 패러다임에서 특히 유용하며, 함수 합성과 부분 적용을 가능하게 하는 강력한 도구이다.&lt;/p&gt;
&lt;p&gt;커링은 자바스크립트에서 함수형 프로그래밍을 구현하는 데 중요한 기법 중 하나이다.&lt;br&gt;
이 기법은 코드의 재사용성과 모듈성을 높이고, 함수 조합을 용이하게 하며, 복잡한 로직을 더 작고 관리하기 쉬운 단위로 분해하는 데 도움이 된다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tree Shaking</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/build-tools/module-bundlers/tree-shaking/</link>
      <pubDate>Thu, 26 Dec 2024 07:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/build-tools/module-bundlers/tree-shaking/</guid>
      <description>트리 쉐이킹(Tree Shaking)은 사용되지 않는 코드를 최종 번들에서 제거하는 프로세스</description>
    </item>
    <item>
      <title>Temporal Dead Zone</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/temporal-dead-zone/</link>
      <pubDate>Wed, 25 Dec 2024 15:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/temporal-dead-zone/</guid>
      <description>일시적 사각지대(Temporal Dead Zone, TDZ)는 JavaScript에서 변수가 선언되었지만 아직 초기화되지 않은 상태로 존재하는 코드 영역을 의미한다.</description>
    </item>
    <item>
      <title>Block</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/scopes/block/</link>
      <pubDate>Wed, 25 Dec 2024 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/scopes/block/</guid>
      <description>JavaScript에서 블록 스코프(Block Scope) 는 중괄호(`{}`)로 감싸진 코드 블록 내에서 선언된 변수나 함수가 해당 블록 내부에서만 유효한 범위를 의미한다</description>
    </item>
    <item>
      <title>Function</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/scopes/function/</link>
      <pubDate>Wed, 25 Dec 2024 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/scopes/function/</guid>
      <description>함수 스코프란 함수 내부에 선언된 변수와 함수가 해당 함수 내부에서만 접근 가능하다는 JavaScript의 특성을 의미한다.</description>
    </item>
    <item>
      <title>Global</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/scopes/global/</link>
      <pubDate>Wed, 25 Dec 2024 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/scopes/global/</guid>
      <description>자바스크립트에서 글로벌 스코프는 코드 전체에서 접근할 수 있는 가장 넓은 범위를 의미하며, 여기서 선언된 변수나 함수는 프로그램 전반에서 사용이 가능하다.</description>
    </item>
    <item>
      <title>Hoisting</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/hoisting/</link>
      <pubDate>Wed, 25 Dec 2024 14:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/hoisting/</guid>
      <description>JavaScript 엔진이 코드를 실행하기 전에 변수, 함수, 클래스 또는 임포트의 선언부를 스코프의 최상단으로 끌어올리는 것처럼 동작하는 JavaScript의 메커니즘으로, 이름 그대로 &amp;#39;끌어올린다(hoist)&amp;#39;는 의미를 가진다.</description>
    </item>
    <item>
      <title>Variable Declarations</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/variable-declarations/</link>
      <pubDate>Wed, 25 Dec 2024 14:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/variable-declarations/</guid>
      <description>프로그램에서 데이터를 저장하고 참조하는 데 사용되는 중요한 개념이다. 변수 선언 방식에 따라 변수의 **유효 범위(Scope)**와 **재할당 가능 여부** 등이 결정된다.</description>
    </item>
    <item>
      <title>변수 명명 규칙(Variable Naming Rules)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/naming-rules/</link>
      <pubDate>Wed, 25 Dec 2024 14:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/naming-rules/</guid>
      <description>JavaScript의 변수 명명 규칙(Variable Naming Rules)</description>
    </item>
    <item>
      <title>Built-in objects</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-types/object/built-in-objects/</link>
      <pubDate>Wed, 25 Dec 2024 01:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-types/object/built-in-objects/</guid>
      <description>&lt;h2 id=&#34;built-in-objects&#34;&gt;Built-in objects&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Prototypal Inheritance</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-types/object/prototypal-inheritance/</link>
      <pubDate>Wed, 25 Dec 2024 01:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-types/object/prototypal-inheritance/</guid>
      <description>&lt;h2 id=&#34;prototypal-inheritance&#34;&gt;Prototypal Inheritance&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Prototypes</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-types/object/prototypes/</link>
      <pubDate>Wed, 25 Dec 2024 01:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-types/object/prototypes/</guid>
      <description>&lt;h2 id=&#34;prototypes&#34;&gt;Prototypes&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Primitive Types</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-types/primitive-types/</link>
      <pubDate>Wed, 25 Dec 2024 01:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-types/primitive-types/</guid>
      <description>&lt;h2 id=&#34;primitive-types&#34;&gt;Primitive Types&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>scopes</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/scopes/</link>
      <pubDate>Wed, 25 Dec 2024 00:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/scopes/</guid>
      <description>JavaScript의 스코프는 변수와 함수의 접근성과 생존 기간을 결정하는 중요한 개념으로, 변수나 함수가 **유효하게 접근할 수 있는 범위**를 의미한다.</description>
    </item>
    <item>
      <title>ExpressJS vs. NestJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-nestjs/</link>
      <pubDate>Tue, 24 Dec 2024 10:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-nestjs/</guid>
      <description>&lt;h2 id=&#34;expressjs-vs-nestjs&#34;&gt;ExpressJS vs. NestJS&lt;/h2&gt;
&lt;p&gt;ExpressJS와 NestJS의 주요 특징들을 상세히 비교 분석하여 표로 정리해드리겠습니다.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;비교 기준&lt;/th&gt;
          &lt;th&gt;ExpressJS&lt;/th&gt;
          &lt;th&gt;NestJS&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;프레임워크 특성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;미니멀리스트, 유연한 Node.js 웹 프레임워크&lt;/td&gt;
          &lt;td&gt;TypeScript 기반의 구조화된 풀스택 프레임워크&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;아키텍처 스타일&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;자유로운 구조 (개발자가 직접 설계)&lt;/td&gt;
          &lt;td&gt;Angular 스타일의 모듈식 아키텍처 (강제됨)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;언어 지원&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;JavaScript 중심 (TypeScript도 사용 가능)&lt;/td&gt;
          &lt;td&gt;TypeScript 중심 (JavaScript도 사용 가능)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;학습 곡선&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;낮음 (시작하기 쉬움)&lt;/td&gt;
          &lt;td&gt;높음 (많은 개념과 패턴 학습 필요)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;기본 구조&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;최소한의 구조만 제공&lt;/td&gt;
          &lt;td&gt;모듈, 컨트롤러, 서비스 등 세분화된 구조&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;라우팅 예시&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;javascript app.get(&#39;/users&#39;, (req, res) =&amp;gt; { res.send(&#39;Users list&#39;); });&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;typescript @Controller(&#39;users&#39;) export class UsersController { @Get() findAll(): string { return &#39;Users list&#39;; } }&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;의존성 주입&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;없음 (수동으로 구현 필요)&lt;/td&gt;
          &lt;td&gt;내장된 강력한 DI 시스템 제공&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;데코레이터 지원&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;지원하지 않음&lt;/td&gt;
          &lt;td&gt;광범위한 데코레이터 지원&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;미들웨어 처리&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;직관적이고 단순한 미들웨어 체인&lt;/td&gt;
          &lt;td&gt;복잡하지만 강력한 미들웨어 시스템&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;테스트 용이성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;별도 테스트 도구 설정 필요&lt;/td&gt;
          &lt;td&gt;내장된 테스트 도구 제공&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;확장성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;수동 구성 필요&lt;/td&gt;
          &lt;td&gt;모듈 시스템을 통한 쉬운 확장&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;성능&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;매우 가벼움 (적은 오버헤드)&lt;/td&gt;
          &lt;td&gt;약간의 오버헤드 존재&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;실시간 처리&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;WebSocket 수동 구현 필요&lt;/td&gt;
          &lt;td&gt;WebSocket 데코레이터 제공&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;유효성 검사&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;외부 라이브러리 필요&lt;/td&gt;
          &lt;td&gt;내장 파이프를 통한 유효성 검사&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;문서화&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Swagger 등 수동 설정 필요&lt;/td&gt;
          &lt;td&gt;자동 API 문서 생성 지원&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;적합한 프로젝트&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;- 작은 규모의 프로젝트&lt;br&gt;- 빠른 프로토타이핑&lt;br&gt;- 마이크로서비스&lt;/td&gt;
          &lt;td&gt;- 대규모 엔터프라이즈 애플리케이션&lt;br&gt;- 복잡한 비즈니스 로직&lt;br&gt;- 팀 프로젝트&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;개발 생산성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;초기에는 빠르나 규모가 커지면 관리 어려움&lt;/td&gt;
          &lt;td&gt;초기 설정에 시간이 걸리나 장기적으로 생산성 높음&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;커뮤니티/생태계&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;매우 큰 커뮤니티, 풍부한 미들웨어&lt;/td&gt;
          &lt;td&gt;성장하는 커뮤니티, 내장 기능 많음&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;에러 처리&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;수동 구현 필요&lt;/td&gt;
          &lt;td&gt;내장된 예외 필터 시스템&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;데이터베이스 통합&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;ORM 선택 자유&lt;/td&gt;
          &lt;td&gt;TypeORM/Sequelize 등과 쉬운 통합&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;보안 기능&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;외부 미들웨어 필요&lt;/td&gt;
          &lt;td&gt;내장된 보안 기능 제공&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;모니터링/로깅&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;외부 도구 통합 필요&lt;/td&gt;
          &lt;td&gt;내장된 로깅 시스템 제공&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;선택 가이드:&lt;/p&gt;</description>
    </item>
    <item>
      <title>ExpressJS vs. FastAPI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-fastapi/</link>
      <pubDate>Tue, 24 Dec 2024 10:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-fastapi/</guid>
      <description>&lt;h2 id=&#34;expressjs-vs-fastapi&#34;&gt;ExpressJS vs. FastAPI&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>ExpressJS vs. Flask</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-flask/</link>
      <pubDate>Tue, 24 Dec 2024 10:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-flask/</guid>
      <description>&lt;h2 id=&#34;expressjs-vs-flask&#34;&gt;ExpressJS vs. Flask&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>ExpressJS vs. Django</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-django/</link>
      <pubDate>Tue, 24 Dec 2024 03:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-django/</guid>
      <description>&lt;h2 id=&#34;expressjs-vs-django&#34;&gt;ExpressJS vs. Django&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>NodeJS vs. FastAPI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/nodejs-vs-fastapi/</link>
      <pubDate>Sun, 22 Dec 2024 10:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/nodejs-vs-fastapi/</guid>
      <description>&lt;h2 id=&#34;nodejs-vs-fastapi&#34;&gt;NodeJS vs. FastAPI&lt;/h2&gt;
&lt;p&gt;현대 웹 개발에서 백엔드 기술 선택은 프로젝트의 성공에 중요한 요소이다.&lt;br&gt;
Node.js와 FastAPI는 각각 JavaScript와 Python 생태계에서 인기 있는 백엔드 기술로, 서로 다른 접근 방식과 강점을 가지고 있다.&lt;/p&gt;
&lt;p&gt;Node.js는 오랜 기간 동안 검증된 기술로, 방대한 생태계와 JavaScript를 백엔드에서도 사용할 수 있는 일관성을 제공한다. 실시간 애플리케이션과 I/O 집약적 작업에 특히 뛰어나다.&lt;/p&gt;
&lt;p&gt;FastAPI는 비교적 새로운 프레임워크이지만, 현대적인 Python 기능을 최대한 활용하여 빠른 개발 속도, 뛰어난 개발자 경험, 자동 문서화와 데이터 검증을 제공한다. Python의 데이터 과학 생태계와 통합이 필요한 프로젝트에 특히 적합하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NodeJS vs. Flask</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/nodejs-vs-flask/</link>
      <pubDate>Sun, 22 Dec 2024 10:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/nodejs-vs-flask/</guid>
      <description>&lt;h2 id=&#34;nodejs-vs-flask&#34;&gt;NodeJS vs. Flask&lt;/h2&gt;
&lt;p&gt;Node.js와 Flask는 현대 웹 애플리케이션 개발에 널리 사용되는 두 가지 인기 있는 백엔드 기술이다.&lt;br&gt;
이 두 기술은 각각 다른 언어(JavaScript vs Python), 다른 철학, 그리고 서로 다른 접근 방식을 가지고 있다.&lt;/p&gt;
&lt;p&gt;Node.js와 Flask는 각각 고유한 강점과 약점을 가진 강력한 백엔드 기술이다.&lt;br&gt;
선택은 프로젝트의 요구사항, 팀의 전문성, 그리고 장기적인 목표에 따라 달라진다.&lt;/p&gt;
&lt;p&gt;Node.js는 실시간 기능, 높은 동시성, 그리고 JavaScript의 일관성을 활용하려는 프로젝트에 적합하다.&lt;br&gt;
특히 I/O 집약적인 애플리케이션과 실시간 웹 애플리케이션에서 강점을 보인다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ES Modules Vs CommonJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/modules/es-modules-vs-commonjs/</link>
      <pubDate>Sun, 22 Dec 2024 04:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/modules/es-modules-vs-commonjs/</guid>
      <description>ES Modules(ESM)과 CommonJS(CJS)는 JavaScript에서 사용되는 두 가지 주요 모듈 시스템이다.</description>
    </item>
    <item>
      <title>CommonJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/modules/commonjs/</link>
      <pubDate>Sun, 22 Dec 2024 04:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/modules/commonjs/</guid>
      <description>자바스크립트를 브라우저 외부 환경, 특히 서버 사이드에서 사용하기 위해 만들어진 모듈 시스템</description>
    </item>
    <item>
      <title>ES Modules</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/modules/es-modules/</link>
      <pubDate>Sun, 22 Dec 2024 04:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/modules/es-modules/</guid>
      <description>JavaScript 코드를 모듈 단위로 구성하고 관리할 수 있게 해주는 공식 표준 모듈 시스템이다.  이 시스템은 ECMAScript 2015(ES6)에서 처음 도입되었으며, 코드의 재사용성, 유지보수성, 그리고 의존성 관리를 크게 향상시켰다</description>
    </item>
    <item>
      <title>NodeJS vs. Django</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/nodejs-vs-django/</link>
      <pubDate>Sun, 22 Dec 2024 03:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/nodejs-vs-django/</guid>
      <description>&lt;h2 id=&#34;nodejs-vs-django&#34;&gt;NodeJS vs. Django&lt;/h2&gt;
&lt;p&gt;웹 개발에서 백엔드 프레임워크를 선택하는 것은 프로젝트의 성공에 중요한 요소이다. Node.js와 Django는 각각 다른 철학, 접근 방식, 그리고 강점을 가진 인기 있는 두 가지 백엔드 기술이다.&lt;/p&gt;
&lt;p&gt;Node.js와 Django는 각각 고유한 강점과 약점을 가진 강력한 백엔드 기술이다.&lt;br&gt;
선택은 프로젝트의 요구사항, 팀의 전문성, 그리고 장기적인 목표에 따라 달라진다.&lt;/p&gt;
&lt;p&gt;Node.js는 실시간 기능, 높은 동시성, 그리고 JavaScript의 일관성을 활용하려는 프로젝트에 적합하다.&lt;br&gt;
빠른 프로토타이핑, 견고한 데이터 모델링, 내장된 관리 기능이 필요한 프로젝트에는 Django가 더 적합할 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>BunJS vs. NodeJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/bunjs/bunjs-vs-nodejs/</link>
      <pubDate>Sun, 22 Dec 2024 03:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/bunjs/bunjs-vs-nodejs/</guid>
      <description>서버 사이드 JavaScript 런타임인 BunJS와 NodeJS의 비교</description>
    </item>
    <item>
      <title>Typescript vs. Javascript</title>
      <link>https://buenhyden.github.io/posts/programming-languages/typescript/typescript-vs-javascript/</link>
      <pubDate>Fri, 06 Dec 2024 00:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/typescript/typescript-vs-javascript/</guid>
      <description>JavaScript와 TypeScript는 둘 다 웹 및 기타 환경에서 널리 사용되는 프로그래밍 언어이지만, 설계와 사용 목적에 있어 몇 가지 중요한 차이가 있다.</description>
    </item>
    <item>
      <title>NodeJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/</link>
      <pubDate>Sat, 23 Nov 2024 04:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/</guid>
      <description>Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임 환경</description>
    </item>
    <item>
      <title>Vitest</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/vitest/</link>
      <pubDate>Sat, 23 Nov 2024 00:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/vitest/</guid>
      <description>&lt;h2 id=&#34;vitest&#34;&gt;Vitest&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Cypress</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/cypress/</link>
      <pubDate>Fri, 22 Nov 2024 23:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/cypress/</guid>
      <description>Cypress는 JavaScript 기반의 강력한 프론트엔드 테스팅 프레임워크.</description>
    </item>
    <item>
      <title>Jest</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/jest/</link>
      <pubDate>Fri, 22 Nov 2024 23:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/jest/</guid>
      <description>JavaScript 테스팅 프레임워크로, JavaScript 코드의 단위 테스트(Unit Test)를 위해 설계되었다.</description>
    </item>
    <item>
      <title>MochaJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/mochajs/</link>
      <pubDate>Fri, 22 Nov 2024 23:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/mochajs/</guid>
      <description>Mocha.js는 Node.js와 브라우저 환경 모두에서 동작하는 유연하고 강력한 JavaScript 코드의 단위 테스트, 통합 테스트 등을 위한 JavaScript 테스팅 프레임워크.</description>
    </item>
    <item>
      <title>Playwright</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/playwright/</link>
      <pubDate>Fri, 22 Nov 2024 23:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/playwright/</guid>
      <description>Playwright는 Microsoft에서 개발한 현대적이고 강력한 웹 자동화 및 테스팅 라이브러리</description>
    </item>
    <item>
      <title>Puppeteer</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/puppeteer/</link>
      <pubDate>Fri, 22 Nov 2024 23:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/puppeteer/</guid>
      <description>Google에서 개발한 Node.js 라이브러리로, 프로그래밍을 통해 Chrome 또는 Chromium 브라우저를 제어할 수 있게 해주는 고급 웹 자동화 도구</description>
    </item>
    <item>
      <title>Fastify</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/fastify/</link>
      <pubDate>Fri, 22 Nov 2024 13:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/fastify/</guid>
      <description>Fastify는 Node.js를 위한 빠르고 낮은 오버헤드의 웹 프레임워크</description>
    </item>
    <item>
      <title>Koa</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/koa/</link>
      <pubDate>Fri, 22 Nov 2024 13:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/koa/</guid>
      <description>Node.js를 위한 경량 웹 프레임워크로, Express.js 팀에 의해 개발되었다. Koa는 더 작고, 더 표현력이 풍부하며, 더 강력한 웹 애플리케이션과 API의 기초를 제공하기 위해 설계되었다.</description>
    </item>
    <item>
      <title>NextJS</title>
      <link>https://buenhyden.github.io/posts/frontend/framework/reactjs/ssr-frameworks/nextjs/</link>
      <pubDate>Fri, 22 Nov 2024 11:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/frontend/framework/reactjs/ssr-frameworks/nextjs/</guid>
      <description>NextJS는 React 기반의 풀스택 웹 프레임워크로, React의 장점을 모두 활용하면서도, 서버 사이드 렌더링(SSR)과 정적 사이트 생성(SSG)과 같은 고급 기능들을 손쉽게 구현할 수 있게 해준다.</description>
    </item>
    <item>
      <title>Javascript Web Framework</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/</link>
      <pubDate>Fri, 22 Nov 2024 09:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/</guid>
      <description>Javascript Web Framework의 프론트엔드 영역과 백엔드 영역의 대표적인 프레임워크와 라이브러리에 대해 비교분석해본다.</description>
    </item>
    <item>
      <title>jasmine</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/jasmine/</link>
      <pubDate>Fri, 22 Nov 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/jasmine/</guid>
      <description>Jasmine은 JavaScript 애플리케이션을 위한 행위 주도 개발(BDD) 스타일의 테스팅 프레임워크</description>
    </item>
    <item>
      <title>Karma</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/karma/</link>
      <pubDate>Fri, 22 Nov 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/testing/karma/</guid>
      <description>Karma는 모든 브라우저에서 JavaScript 코드를 테스트할 수 있게 해주는 테스트 러너이다.</description>
    </item>
    <item>
      <title>ExpressJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/</link>
      <pubDate>Fri, 22 Nov 2024 03:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/</guid>
      <description>Express.js는 Node.js를 위한 빠르고 개방적인 웹 프레임워크</description>
    </item>
    <item>
      <title>NestJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/nestjs/</link>
      <pubDate>Fri, 22 Nov 2024 01:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/nestjs/</guid>
      <description>Nest.js는 효율적이고 확장 가능한 Node.js 서버 측 애플리케이션을 구축하기 위한 프레임워크</description>
    </item>
    <item>
      <title>winston</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/logging/winston/</link>
      <pubDate>Thu, 21 Nov 2024 15:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/logging/winston/</guid>
      <description>Winston은 Node.js 애플리케이션을 위한 다목적 로깅 라이브러리</description>
    </item>
    <item>
      <title>pino</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/logging/pino/</link>
      <pubDate>Thu, 21 Nov 2024 15:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/logging/pino/</guid>
      <description>Node.js를 위한 매우 빠르고 가벼운 로깅 라이브러리</description>
    </item>
    <item>
      <title>Mongoose</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/working-with-dbs/mongoose/</link>
      <pubDate>Thu, 21 Nov 2024 15:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/working-with-dbs/mongoose/</guid>
      <description>MongoDB와 Node.js 애플리케이션을 연결해주는 강력한 Object Document Mapper(ODM) 라이브러리</description>
    </item>
    <item>
      <title>Sequelize</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/working-with-dbs/sequelize/</link>
      <pubDate>Thu, 21 Nov 2024 15:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/working-with-dbs/sequelize/</guid>
      <description>Node.js 환경에서 사용되는 강력한 ORM(Object-Relational Mapping) 라이브러리</description>
    </item>
    <item>
      <title>Biome</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/build-tools/linter-and-formatter/biome/</link>
      <pubDate>Thu, 21 Nov 2024 15:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/build-tools/linter-and-formatter/biome/</guid>
      <description>JavaScript, TypeScript, JSX, TSX, JSON, CSS, GraphQL 등 다양한 웹 개발 언어를 위한 빠른 포매터이자 린터</description>
    </item>
    <item>
      <title>eslint</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/build-tools/linter-and-formatter/eslint/</link>
      <pubDate>Thu, 21 Nov 2024 15:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/build-tools/linter-and-formatter/eslint/</guid>
      <description>JavaScript 코드 분석 도구로, 코드의 품질을 향상시키고 잠재적인 문제를 미리 발견하는 것이 주요 목적</description>
    </item>
    <item>
      <title>prettier</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/build-tools/linter-and-formatter/prettier/</link>
      <pubDate>Thu, 21 Nov 2024 15:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/build-tools/linter-and-formatter/prettier/</guid>
      <description>JavaScript를 포함한 여러 웹 개발 언어를 위한 강력한 코드 포매터</description>
    </item>
    <item>
      <title>프로미스(Promises)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/promises/</link>
      <pubDate>Thu, 21 Nov 2024 14:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/promises/</guid>
      <description>자바스크립트에서 비동기 처리를 위해 사용되는 객체</description>
    </item>
    <item>
      <title>Javascript Linter와 Formatter</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/build-tools/linter-and-formatter/</link>
      <pubDate>Thu, 21 Nov 2024 13:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/advanced/build-tools/linter-and-formatter/</guid>
      <description>Javascript에서 활용할 수 있는 소스 코드에서 문법 오류나 스타일 문제, 잠재적인 버그를 자동으로 검사해주는 도구</description>
    </item>
    <item>
      <title>이벤트 루프(Event Loop)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/event-loop/</link>
      <pubDate>Thu, 21 Nov 2024 12:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/event-loop/</guid>
      <description>이벤트 루프(Event Loop)는 자바스크립트의 비동기 작업을 관리하고 실행하는 핵심 메커니즘으로, 싱글 스레드 언어인 자바스크립트가 비동기적으로 동작할 수 있게 해주는 중요한 요소이다.</description>
    </item>
    <item>
      <title>pm2</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/keep-app-running/pm2/</link>
      <pubDate>Thu, 21 Nov 2024 12:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/keep-app-running/pm2/</guid>
      <description>PM2는 Node.js 애플리케이션을 위한 고급 프로덕션 프로세스 관리자.</description>
    </item>
    <item>
      <title>jsdoc</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/jsdoc/</link>
      <pubDate>Thu, 21 Nov 2024 11:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/jsdoc/</guid>
      <description>JSDoc은 JavaScript 소스 코드에 대한 API 문서를 생성하기 위한 마크업 언어.</description>
    </item>
    <item>
      <title>Keywords</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/keywords/</link>
      <pubDate>Thu, 21 Nov 2024 03:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/keywords/</guid>
      <description>키워드들은 JavaScript 프로그래밍의 기본 구성 요소이며, ECMAScript 표준의 일부이다.  각 키워드는 특정한 프로그래밍 목적을 위해 설계되었으며, 이들을 올바르게 이해하고 사용하는 것이 효과적인 JavaScript 프로그래밍의 기초가 된다.</description>
    </item>
  </channel>
</rss>
