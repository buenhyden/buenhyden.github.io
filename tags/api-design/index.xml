<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>API-Design on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/api-design/</link>
    <description>Recent content in API-Design on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.146.4</generator>
    <language>en</language>
    <lastBuildDate>Fri, 04 Apr 2025 06:02:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/api-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>API Styles</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/</link>
      <pubDate>Wed, 26 Feb 2025 06:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/</guid>
      <description>API 스타일은 소프트웨어 아키텍처에서 중요한 설계 요소로, 다양한 시스템과 장치가 서로 쉽게 통신할 수 있도록 디지털 방식으로 연결하는 역할을 한다.</description>
    </item>
    <item>
      <title>APIs</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/</link>
      <pubDate>Sat, 19 Oct 2024 17:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/</guid>
      <description>소프트웨어 애플리케이션 간의 통신을 가능하게 하는 중요한 도구</description>
    </item>
    <item>
      <title>API Performance</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-performance/</link>
      <pubDate>Wed, 26 Feb 2025 06:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-performance/</guid>
      <description>API 성능은 백엔드 시스템 설계에서 핵심적인 요소로, 최종 사용자 경험과 시스템 효율성에 직접적인 영향을 미친다.</description>
    </item>
    <item>
      <title>JSON vs. XML vs. Protobuf</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/fundamentals/json-vs-xml-vs-protobuf/</link>
      <pubDate>Sat, 26 Oct 2024 11:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/fundamentals/json-vs-xml-vs-protobuf/</guid>
      <description>데이터 직렬화 형식은 애플리케이션 간 데이터 교환의 핵심 요소이다.</description>
    </item>
    <item>
      <title>Real-time APIs</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/</link>
      <pubDate>Fri, 31 Jan 2025 15:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/</guid>
      <description>실시간 API(Real-time API)는 클라이언트와 서버 간에 지속적인 연결을 유지하면서 데이터가 생성되거나 변경되는 즉시 자동으로 전송하는 API이다.</description>
    </item>
    <item>
      <title>Synchronous vs Asynchronous APIs</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/synchronous-vs-asynchronous-apis/</link>
      <pubDate>Sun, 06 Oct 2024 00:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/synchronous-vs-asynchronous-apis/</guid>
      <description>프로그래밍에서 작업을 처리하는 두 가지 주요 방식</description>
    </item>
    <item>
      <title>Server-Sent Events vs. Webhook</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/server-sent-events/server-sent-events-vs-webhook/</link>
      <pubDate>Sat, 08 Mar 2025 06:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/server-sent-events/server-sent-events-vs-webhook/</guid>
      <description>Webhook과 Server-Sent Events(SSE)는 실시간 데이터 전송을 위한 웹 기술이다.</description>
    </item>
    <item>
      <title>API Gateways</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/api-gateways/</link>
      <pubDate>Sun, 20 Oct 2024 09:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/api-gateways/</guid>
      <description>클라이언트와 백엔드 서비스 사이에서 중개자 역할을 하는 서버로, 여러 마이크로서비스나 백엔드 시스템에 대한 단일 진입점을 제공하는 중요한 컴포넌트</description>
    </item>
    <item>
      <title>Event-driven APIs vs. Pub and Sub APIs</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/event-driven-apis/event-driven-apis-vs-pub-and-sub-apis/</link>
      <pubDate>Fri, 04 Apr 2025 06:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/event-driven-apis/event-driven-apis-vs-pub-and-sub-apis/</guid>
      <description>이벤트 기반 API는 시스템 내에서 발생하는 상태 변화나 중요한 사건(이벤트)을 중심으로 설계된다. Pub/Sub 패턴은 메시지 발행자(Publisher)와 구독자(Subscriber) 사이의 느슨한 결합을 제공하는 메시징 패러다임이다.</description>
    </item>
    <item>
      <title>OAuth 2.0 vs. OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/oauth/oauth-20-vs-openid-connect/</link>
      <pubDate>Thu, 03 Apr 2025 14:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/oauth/oauth-20-vs-openid-connect/</guid>
      <description>OAuth 2.0과 OpenID Connect(OIDC)는 사용자 인증 및 권한 부여를 처리하는 데 사용되는 프로토콜이지만, 목적과 기능에서 명확한 차이가 있다.</description>
    </item>
    <item>
      <title>JWT vs. OAuth 2.0</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/jwt/jwt-vs-oauth-20/</link>
      <pubDate>Thu, 03 Apr 2025 07:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/jwt/jwt-vs-oauth-20/</guid>
      <description>JWT는 당사자 간에 안전하게 정보를 JSON 객체로 전송하기 위한 방식이다. 주로 인증(Authentication)과 정보 교환을 위해 사용된다. OAuth 2.0은 사용자가 자신의 정보에 대한 접근 권한을 제3자 애플리케이션에 부여할 수 있게 해주는 인가(Authorization) 프레임워크이다. 사용자가 비밀번호를 공유하지 않고도 제한된 접근 권한을 제3자에게 제공할 수 있다.</description>
    </item>
    <item>
      <title>Token Authentication vs. SAML</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/token-authentication/token-authentication-vs-saml/</link>
      <pubDate>Thu, 03 Apr 2025 07:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/token-authentication/token-authentication-vs-saml/</guid>
      <description>토큰 인증은 사용자의 자격 증명(보통 사용자 이름과 비밀번호)을 검증한 후, 서버가 발급한 토큰을 통해 이후 요청에서 인증을 처리하는 방식이다. SAML은 서로 다른 도메인 간에 인증 및 권한 부여 데이터를 교환하기 위한 XML 기반 표준이다.</description>
    </item>
    <item>
      <title>Token Authentication vs. JWT</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/token-authentication/token-authentication-vs-jwt/</link>
      <pubDate>Thu, 03 Apr 2025 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/token-authentication/token-authentication-vs-jwt/</guid>
      <description>토큰 인증은 사용자의 인증 정보를 검증한 후 서버가 고유한 토큰을 발급하고, 클라이언트가 이후 요청 시 이 토큰을 제시하여 자신을 인증하는 광범위한 인증 패러다임이다. JWT는 토큰 인증의 한 형태로, 정보를 안전하게 전송하기 위한 컴팩트하고 자체 포함적인(self-contained) JSON 객체이다.</description>
    </item>
    <item>
      <title>Token Authentication vs. OAuth</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/token-authentication/token-authentication-vs-oauth-20/</link>
      <pubDate>Thu, 03 Apr 2025 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/token-authentication/token-authentication-vs-oauth-20/</guid>
      <description>토큰 인증은 사용자의 자격 증명을 한 번만 확인한 후, 서버가 서명된 토큰을 발급하여 클라이언트가 이 토큰을 사용해 자신을 인증하도록 하는 것이다. OAuth 2.0의 핵심 아이디어는 사용자(리소스 소유자)가 비밀번호를 공유하지 않고도 제3자 애플리케이션(클라이언트)에게 자신의 데이터에 대한 특정 접근 권한을 부여할 수 있도록 하는 것이다.</description>
    </item>
    <item>
      <title>Token Authentication vs. OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/token-authentication/token-authentication-vs-openid-connect/</link>
      <pubDate>Thu, 03 Apr 2025 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/token-authentication/token-authentication-vs-openid-connect/</guid>
      <description>토큰 인증은 사용자의 자격 증명(주로 사용자 이름과 비밀번호)을 검증한 후, 서버가 발급한 토큰을 통해 이후의 요청에서 인증을 수행하는 방식이다. OpenID Connect는 OAuth 2.0 프로토콜 위에 구축된 ID 계층으로, 클라이언트가 사용자의 신원을 확인하고 기본적인 프로필 정보를 얻을 수 있게 하는 인증 프로토콜이다.</description>
    </item>
    <item>
      <title>Token Authentication vs. Cookie-Based Auth</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/token-authentication/token-authentication-vs-cookie-based-auth/</link>
      <pubDate>Thu, 03 Apr 2025 07:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/token-authentication/token-authentication-vs-cookie-based-auth/</guid>
      <description>토큰 인증은 서버가 사용자의 인증 정보를 확인한 후 서명된 토큰을 발급하고, 클라이언트가 이 토큰을 이후의 요청에 포함시켜 자신을 인증하는 방식이다. 쿠키 기반 인증은 서버가 사용자 인증 후 세션 ID를 포함한 쿠키를 클라이언트에 전송하고, 클라이언트가 이 쿠키를 모든 요청에 자동으로 포함시켜 인증하는 방식이다.</description>
    </item>
    <item>
      <title>SAML vs. OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/saml/saml-vs-openid-connect/</link>
      <pubDate>Thu, 03 Apr 2025 05:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/saml/saml-vs-openid-connect/</guid>
      <description>SAML(Security Assertion Markup Language)과 OpenID Connect는 모두 사용자 인증 및 권한 부여를 위한 프로토콜</description>
    </item>
    <item>
      <title>jwt vs. Basic Authentication</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/jwt/jwt-vs-basic-authentication/</link>
      <pubDate>Wed, 02 Apr 2025 02:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/jwt/jwt-vs-basic-authentication/</guid>
      <description>JWT는 JSON 형식의 토큰을 사용하여 사용자 정보와 서명을 포함하는 상태 비저장(stateless) 인증 방식으로 토큰 자체에 모든 인증 정보가 포함된다. Basic Authentication는 사용자 ID와 비밀번호를 Base64로 인코딩하여 HTTP 헤더에 전송하는 상태 비저장 방식으로 매 요청마다 자격 증명을 전송한다.</description>
    </item>
    <item>
      <title>Session-Based Auth vs. Basic Authentication</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/session-based-auth/session-based-auth-vs-basic-authentication/</link>
      <pubDate>Wed, 02 Apr 2025 02:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/session-based-auth/session-based-auth-vs-basic-authentication/</guid>
      <description>기본 인증은 HTTP 프로토콜에 내장된 가장 단순한 인증 방식 중 하나이다. 세션 기반 인증은 서버 측에서 사용자의 상태를 유지하는 인증 방식이다.</description>
    </item>
    <item>
      <title>Cookie-Based Auth vs. Basic Authentication</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/cookie-based-auth/cookie-based-auth-vs-basic-authentication/</link>
      <pubDate>Wed, 02 Apr 2025 02:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/cookie-based-auth/cookie-based-auth-vs-basic-authentication/</guid>
      <description>웹 애플리케이션에서 사용자 인증을 처리하는 두 가지 주요 방식</description>
    </item>
    <item>
      <title>jwt vs. Cookie-Based Auth</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/jwt/jwt-vs-cookie-based-auth/</link>
      <pubDate>Wed, 02 Apr 2025 02:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/jwt/jwt-vs-cookie-based-auth/</guid>
      <description>JWT는 Stateless한 인증이 필요한 경우(예: API 중심 애플리케이션, 마이크로서비스)에 적합하다. Cookie 기반 인증은 전통적인 웹 애플리케이션에서 더 적합하며, 특히 보안 요구 사항이 높은 경우 유리한다.</description>
    </item>
    <item>
      <title>jwt vs. Session-based Auth</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/jwt/jwt-vs-session-based-auth/</link>
      <pubDate>Wed, 02 Apr 2025 02:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/jwt/jwt-vs-session-based-auth/</guid>
      <description>JWT는 Stateless가 필요한 API 중심 애플리케이션이나 마이크로서비스에 적합하다. 토큰을 안전하게 저장하려면 HttpOnly 쿠키 사용을 권장한다.세션 기반 인증은 보안이 우선시되는 금융 서비스나 소규모 웹 앱에서 유리하다.  Redis와 같은 인메모리 DB로 세션을 관리하면 확장성을 개선할 수 있다.</description>
    </item>
    <item>
      <title>Token Authentication vs. Session-based Auth</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/token-authentication/token-authentication-vs-session-based-auth/</link>
      <pubDate>Wed, 02 Apr 2025 02:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/token-authentication/token-authentication-vs-session-based-auth/</guid>
      <description>세션 기반 인증은 전통적인 인증 방식으로, 서버가 사용자의 로그인 상태를 세션으로 유지하는 방식이다. 토큰 인증은 클라이언트에게 서명된 토큰을 발급하여 인증하는 방식이다.</description>
    </item>
    <item>
      <title>JWT vs. OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/jwt/jwt-vs-openid-connect/</link>
      <pubDate>Tue, 01 Apr 2025 14:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/jwt/jwt-vs-openid-connect/</guid>
      <description>JWT는 당사자 간에 안전하게 정보를 전송하기 위한 개방형 표준(RFC 7519)으로, 컴팩트하고 자체 포함적인 방식으로 정보를 안전하게 전달한다. OpenID Connect는 OAuth 2.0 프로토콜 위에 구축된 인증 계층으로, 클라이언트가 사용자의 신원을 확인하고 기본적인 프로필 정보를 얻을 수 있도록 하는 표준이다.</description>
    </item>
    <item>
      <title>SOAP API vs. SOAP</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/soap-api/soap-api-vs-soap/</link>
      <pubDate>Tue, 01 Apr 2025 03:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/soap-api/soap-api-vs-soap/</guid>
      <description>SOAP는 메시지 교환 프로토콜이고, SOAP API는 이 프로토콜을 사용하여 구현된 웹 서비스이다.</description>
    </item>
    <item>
      <title>HIPAA</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/standards-and-compliance/hipaa/</link>
      <pubDate>Tue, 01 Apr 2025 02:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/standards-and-compliance/hipaa/</guid>
      <description>HIPAA는 1996년 미국에서 제정된 법률로, 의료 정보의 보호와 의료보험의 이식성을 보장하기 위한 규정을 제공한다.</description>
    </item>
    <item>
      <title>Mockoon</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-testing/mocking-apis/tools/mockoon/</link>
      <pubDate>Tue, 01 Apr 2025 02:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-testing/mocking-apis/tools/mockoon/</guid>
      <description>Mockoon은 개발자가 빠르고 쉽게 API를 모킹(가짜로 구현)할 수 있는 오픈 소스 데스크톱 애플리케이션이다.</description>
    </item>
    <item>
      <title>WireMock</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-testing/mocking-apis/tools/wiremock/</link>
      <pubDate>Tue, 01 Apr 2025 02:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-testing/mocking-apis/tools/wiremock/</guid>
      <description>WireMock은 HTTP 기반 API를 위한 시뮬레이션 도구로, Java 환경에서 개발되었으나 다양한 플랫폼에서 활용 가능하다.</description>
    </item>
    <item>
      <title>ReDoc</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-documentation/tools/redoc/</link>
      <pubDate>Mon, 31 Mar 2025 09:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-documentation/tools/redoc/</guid>
      <description>ReDoc은 OpenAPI(이전의 Swagger) 명세를 기반으로 한 오픈 소스 API 문서 생성 도구이다.</description>
    </item>
    <item>
      <title>Error Handling</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/grpc-api/error-handling/</link>
      <pubDate>Mon, 31 Mar 2025 08:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/grpc-api/error-handling/</guid>
      <description>gRPC는 이러한 다양한 오류 상황을 일관되고 체계적으로 처리하기 위한 포괄적인 오류 처리 메커니즘을 제공한다.</description>
    </item>
    <item>
      <title>Implementations of API Gateway</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/api-gateways/implementations/</link>
      <pubDate>Sun, 23 Mar 2025 04:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/api-gateways/implementations/</guid>
      <description>API 게이트웨이는 현대적인 애플리케이션 아키텍처의 핵심 구성 요소로, 클라이언트 요청을 처리하고 다양한 마이크로서비스로 라우팅하는 중앙 진입점 역할을 한다.</description>
    </item>
    <item>
      <title>Adaptive Polling</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/polling/types/adaptive-polling/</link>
      <pubDate>Sun, 23 Mar 2025 04:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/polling/types/adaptive-polling/</guid>
      <description>어댑티브 폴링은 데이터 수집이나 시스템 모니터링 과정에서 폴링(polling) 주기를 상황과 필요에 따라 동적으로 조절하는 기술이다.</description>
    </item>
    <item>
      <title>Smart Polling</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/polling/types/smart-polling/</link>
      <pubDate>Sun, 23 Mar 2025 04:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/polling/types/smart-polling/</guid>
      <description>스마트 폴링은 단순히 일정 주기로 데이터를 확인하는 전통적인 폴링과 달리, 다양한 컨텍스트 정보와 알고리즘을 활용하여 &amp;#39;언제&amp;#39;, &amp;#39;무엇을&amp;#39;, &amp;#39;어떻게&amp;#39; 폴링할지 지능적으로 결정한다.</description>
    </item>
    <item>
      <title>Apache APISIX</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/api-gateways/implementations/apache-apisix/</link>
      <pubDate>Sun, 23 Mar 2025 01:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/api-gateways/implementations/apache-apisix/</guid>
      <description>Apache APISIX는 고성능 클라우드 네이티브 API 게이트웨이로, 2019년 CNCF(Cloud Native Computing Foundation) 샌드박스 프로젝트로 시작되어 2022년 10월에는 CNCF 인큐베이팅 프로젝트로 승격되었다.</description>
    </item>
    <item>
      <title>KrakenD</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/api-gateways/implementations/krakend/</link>
      <pubDate>Sun, 23 Mar 2025 01:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/api-gateways/implementations/krakend/</guid>
      <description>KrakenD는 고성능 API 게이트웨이로, 2016년에 오픈 소스 프로젝트로 시작되었으며 현재는 KrakenD 회사에서 개발 및 유지보수하고 있다. Go 언어로 작성되었으며, 마이크로서비스 아키텍처에서 백엔드 API들을 통합하고 최적화하기 위해 설계되었다.</description>
    </item>
    <item>
      <title>Tyk</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/api-gateways/implementations/tyk/</link>
      <pubDate>Sun, 23 Mar 2025 01:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/api-gateways/implementations/tyk/</guid>
      <description>Tyk는 강력한 오픈 소스 API 관리 플랫폼으로, 2014년 Martin Buhr에 의해 설립된 Tyk Technologies에서 개발했다. Go 언어로 작성되었으며, API 게이트웨이, 개발자 포털, API 분석 대시보드를 포함한 완전한 API 관리 솔루션을 제공한다.</description>
    </item>
    <item>
      <title>Kong</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/api-gateways/implementations/kong/</link>
      <pubDate>Sun, 23 Mar 2025 01:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/api-gateways/implementations/kong/</guid>
      <description>Kong은 마이크로서비스 아키텍처를 위한 클라우드 네이티브, 오픈 소스 API 게이트웨이 및 서비스 메시이다.</description>
    </item>
    <item>
      <title>Traefik</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/api-gateways/implementations/traefik/</link>
      <pubDate>Sun, 23 Mar 2025 01:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/api-gateways/implementations/traefik/</guid>
      <description>Traefik(트래픽이라고 발음)은 2015년 Containous(현재 Traefik Labs)에서 개발한 오픈 소스 API 게이트웨이이자 엣지 라우터이다.</description>
    </item>
    <item>
      <title>OpenAPI 사양(OpenAPI Specification, OAS)</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-documentation/tools/swagger-and-open-api/open-api/oas/</link>
      <pubDate>Fri, 14 Mar 2025 11:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-documentation/tools/swagger-and-open-api/open-api/oas/</guid>
      <description>OpenAPI 사양(OpenAPI Specification, OAS)은 REST API를 설계, 문서화 및 표준화하기 위한 언어에 구애받지 않는 정의 형식이다.</description>
    </item>
    <item>
      <title>SAML vs. OAuth 2.0</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/saml/saml-vs-oauth-20/</link>
      <pubDate>Tue, 11 Mar 2025 13:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/saml/saml-vs-oauth-20/</guid>
      <description>SAML의 주요 목적은 신원 공급자(Identity Provider, IdP)와 서비스 공급자(Service Provider, SP) 사이에 인증 정보를 교환할 수 있는 표준화된 방법을 제공하는 것이고 OAuth 2.0의 주요 목적은 사용자가 자신의 자격 증명을 공유하지 않고도 타사 애플리케이션에 자신의 데이터에 대한 제한된 접근 권한을 부여할 수 있도록 하는 것이다.</description>
    </item>
    <item>
      <title>Session-Based Auth vs. Cookie-Based Auth</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/session-based-auth/session-based-auth-vs-cookie-based-auth/</link>
      <pubDate>Tue, 11 Mar 2025 13:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/session-based-auth/session-based-auth-vs-cookie-based-auth/</guid>
      <description>세션 기반 인증은 서버 측에 사용자 상태 정보를 저장하고, 클라이언트에는 세션을 식별하는 고유 ID만 제공하는 방식이다. 쿠키 기반 인증은 HTTP 쿠키를 사용하여 사용자의 인증 상태를 유지하는 방식이다.</description>
    </item>
    <item>
      <title>OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/openid/openid-connect/</link>
      <pubDate>Tue, 11 Mar 2025 13:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/openid/openid-connect/</guid>
      <description>OpenID Connect(OIDC)는 웹 기반 애플리케이션과 서비스를 위한 현대적인 인증 프로토콜로, OAuth 2.0 프레임워크를 기반으로 구축되었다. 이 프로토콜은 사용자의 신원을 검증하고, 안전하게 정보를 교환하는 표준화된 방법을 제공한다.</description>
    </item>
    <item>
      <title>Basic Authentication</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/basic-authentication/</link>
      <pubDate>Tue, 11 Mar 2025 13:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/basic-authentication/</guid>
      <description>HTTP 프로토콜에서 가장 단순한 형태의 인증 방식으로, 클라이언트가 서버에 요청을 보낼 때 사용자의 ID와 비밀번호를 Base64로 인코딩하여 전송하는 방식</description>
    </item>
    <item>
      <title>SAML</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/saml/</link>
      <pubDate>Tue, 11 Mar 2025 13:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/saml/</guid>
      <description>SAML(Security Assertion Markup Language)은 기업과 조직에서 단일 로그인(SSO, Single Sign-On)과 신원 연합(Identity Federation)을 구현하기 위한 XML 기반 표준 프레임워크이다.</description>
    </item>
    <item>
      <title>Token Authentication</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/token-authentication/</link>
      <pubDate>Tue, 11 Mar 2025 13:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/token-authentication/</guid>
      <description>토큰 기반 인증은 사용자가 자신의 자격 증명(일반적으로 사용자 이름과 비밀번호)을 인증 서버에 제출하면, 서버가 이를 검증한 후 디지털 토큰을 발급하는 방식이다.</description>
    </item>
    <item>
      <title>OpenID</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/openid/</link>
      <pubDate>Tue, 11 Mar 2025 13:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/openid/</guid>
      <description>OpenID는 사용자가 여러 웹사이트와 애플리케이션에 단일 자격 증명으로 로그인할 수 있게 해주는 분산형 인증 표준이다.</description>
    </item>
    <item>
      <title>OAuth</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/oauth/</link>
      <pubDate>Tue, 11 Mar 2025 12:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/oauth/</guid>
      <description>OAuth는 현대 웹과 모바일 애플리케이션의 인증 및 권한 부여 방식을 근본적으로 변화시킨 오픈 표준 프로토콜이다.</description>
    </item>
    <item>
      <title>OpenID vs. OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/openid/openid-vs-openid-connect/</link>
      <pubDate>Tue, 11 Mar 2025 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/openid/openid-vs-openid-connect/</guid>
      <description>OpenID와 OpenID Connect는 사용자 인증을 위한 중요한 표준이다.</description>
    </item>
    <item>
      <title>Postman</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-documentation/tools/postman/</link>
      <pubDate>Mon, 10 Mar 2025 13:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-documentation/tools/postman/</guid>
      <description>Postman은 API(Application Programming Interface) 개발, 테스트, 문서화 및 협업을 위한 종합적인 플랫폼이다.</description>
    </item>
    <item>
      <title>Open API</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-documentation/tools/swagger-and-open-api/open-api/</link>
      <pubDate>Mon, 10 Mar 2025 13:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-documentation/tools/swagger-and-open-api/open-api/</guid>
      <description>OpenAPI는 REST API를 설명하기 위한 업계 표준 명세(Specification)이다. 이 명세는 API의 엔드포인트, 입력 파라미터, 응답 형식, 인증 방법 등 API의 모든 측면을 상세히 기술할 수 있는 방법을 제공한다.</description>
    </item>
    <item>
      <title>Swagger</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-documentation/tools/swagger-and-open-api/swagger/</link>
      <pubDate>Mon, 10 Mar 2025 13:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-documentation/tools/swagger-and-open-api/swagger/</guid>
      <description>Swagger는 RESTful API를 설계, 개발, 문서화, 테스트하기 위한 종합적인 도구 모음이다.</description>
    </item>
    <item>
      <title>Swagger and Open API</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-documentation/tools/swagger-and-open-api/</link>
      <pubDate>Mon, 10 Mar 2025 11:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-documentation/tools/swagger-and-open-api/</guid>
      <description>API를 효과적으로 설계, 개발, 문서화, 테스트하기 위한 도구로서 Swagger와 OpenAPI가 등장했다.</description>
    </item>
    <item>
      <title>API Testing</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-testing/</link>
      <pubDate>Mon, 10 Mar 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-testing/</guid>
      <description>API 테스팅은 애플리케이션 프로그래밍 인터페이스(API)의 기능성, 신뢰성, 성능 및 보안을 확인하는 프로세스이다.</description>
    </item>
    <item>
      <title>Unit Testing</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-testing/unit-testing/</link>
      <pubDate>Mon, 10 Mar 2025 02:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-testing/unit-testing/</guid>
      <description>단위 테스팅은 API 설계 과정에서 개별 컴포넌트나 함수를 독립적으로 테스트하여 각 부분이 올바르게 작동하는지 확인하는 과정이다.</description>
    </item>
    <item>
      <title>Contract Testing</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-testing/contract-testing/</link>
      <pubDate>Mon, 10 Mar 2025 02:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-testing/contract-testing/</guid>
      <description>계약 테스트(Contract Testing)는 서비스 간 상호작용이 명시된 계약을 준수하는지 확인하는 테스트 방법론이다.</description>
    </item>
    <item>
      <title>Functional Testing</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-testing/functional-testing/</link>
      <pubDate>Mon, 10 Mar 2025 02:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-testing/functional-testing/</guid>
      <description>API 기능 테스트는 API가 의도한 모든 기능을 올바르게 수행하는지 검증하는 과정이다.</description>
    </item>
    <item>
      <title>Integration Testing</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-testing/integration-testing/</link>
      <pubDate>Mon, 10 Mar 2025 02:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-testing/integration-testing/</guid>
      <description>API 통합 테스트는 API 개발 및 설계에서 필수적인 단계로, 개별 컴포넌트들이 서로 올바르게 상호작용하는지 검증하는 프로세스이다.</description>
    </item>
    <item>
      <title>Load Testing</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-testing/load-testing/</link>
      <pubDate>Mon, 10 Mar 2025 02:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-testing/load-testing/</guid>
      <description>API 부하 테스트는 API가 예상된 사용자 부하와 그 이상의 상황에서 어떻게 동작하는지 검증하는 중요한 성능 테스트 유형이다.</description>
    </item>
    <item>
      <title>Throttling</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-performance/rate-limiting-and-throttling/throttling/</link>
      <pubDate>Sun, 09 Mar 2025 16:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-performance/rate-limiting-and-throttling/throttling/</guid>
      <description>Throttling은 트래픽이 과도하게 몰릴 때 시스템이 완전히 중단되거나 요청을 거부하는 대신, 요청 처리 속도를 늦추거나 대기열에 넣어 점진적으로 처리하는 방식이다.</description>
    </item>
    <item>
      <title>Session-based Auth</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/session-based-auth/</link>
      <pubDate>Sun, 09 Mar 2025 15:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/session-based-auth/</guid>
      <description>세션 기반 인증은 서버 측에서 사용자의 상태를 유지하는 인증 방식이다.</description>
    </item>
    <item>
      <title>Cookie-Based Auth</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/cookie-based-auth/</link>
      <pubDate>Sun, 09 Mar 2025 15:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/cookie-based-auth/</guid>
      <description>HTTP 프로토콜의 무상태(stateless) 특성을 극복하고 사용자의 로그인 상태를 유지하기 위한 메커니즘으로, 오랜 시간 동안 웹의 핵심 인증 기술로 자리잡아 왔다.</description>
    </item>
    <item>
      <title>Performance Testing</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-performance/performance-testing/</link>
      <pubDate>Sun, 09 Mar 2025 13:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-performance/performance-testing/</guid>
      <description>API 성능 테스트는 API가 다양한 부하 조건에서 얼마나 안정적이고 효율적으로 작동하는지를 평가하는 중요한 과정이다.</description>
    </item>
    <item>
      <title>Web Socket vs. Long Polling</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/websocket-api/web-socket-vs-long-polling/</link>
      <pubDate>Sun, 09 Mar 2025 02:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/websocket-api/web-socket-vs-long-polling/</guid>
      <description>WebSocket은 TCP 연결을 통해 전이중(full-duplex) 통신 채널을 제공하는 프로토콜이다. Long Polling은 기존 HTTP 요청-응답 모델을 확장한 기법으로, 클라이언트가 서버에 요청을 보내면 서버는 새로운 정보가 있을 때까지 응답을 보류한다.</description>
    </item>
    <item>
      <title>Types of Polling</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/polling/types/</link>
      <pubDate>Sun, 09 Mar 2025 02:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/polling/types/</guid>
      <description>클라이언트-서버 통신에서 폴링(Polling)은 클라이언트가 서버의 데이터 변경사항을 확인하기 위해 주기적으로 요청을 보내는 기법으로 다양한 폴링 메커니즘이 존재하며, 각각 고유한 특성과 적합한 사용 환경이 있다.</description>
    </item>
    <item>
      <title>WebSocket API</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/websocket-api/</link>
      <pubDate>Sat, 08 Mar 2025 16:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/websocket-api/</guid>
      <description>웹 소켓은 클라이언트와 서버 간에 지속적인 양방향 통신 채널을 제공하는 프로토콜이다. 전통적인 HTTP 통신과 달리, 웹 소켓은 한 번 연결이 수립되면 지속적으로 유지되어 실시간으로 데이터를 주고받을 수 있다.</description>
    </item>
    <item>
      <title>Server sent Events</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/server-sent-events/</link>
      <pubDate>Sat, 08 Mar 2025 16:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/server-sent-events/</guid>
      <description>서버 전송 이벤트(Server-Sent Events, SSE)는 웹 서버가 클라이언트 브라우저로 데이터를 자동으로 푸시할 수 있게 해주는 웹 기술이다.</description>
    </item>
    <item>
      <title>Polling</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/polling/</link>
      <pubDate>Sat, 08 Mar 2025 15:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/polling/</guid>
      <description>폴링은 클라이언트가 주기적으로 서버에 요청을 보내 새로운 정보나 상태 변화를 확인하는 통신 방식이다. 이는 &amp;#39;끌어오기(Pull)&amp;#39; 방식의 대표적인 예로, 클라이언트가 능동적으로 서버에서 정보를 요청한다.</description>
    </item>
    <item>
      <title>Webhook</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/webhook/</link>
      <pubDate>Sat, 08 Mar 2025 15:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/webhook/</guid>
      <description> webhook은 특정 이벤트가 발생했을 때 서버가 미리 지정된 클라이언트의 URL로 데이터를 능동적으로 보내는 방식이다.</description>
    </item>
    <item>
      <title>Asynchronous APIs</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/synchronous-vs-asynchronous-apis/asynchronous-apis/</link>
      <pubDate>Thu, 06 Mar 2025 15:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/synchronous-vs-asynchronous-apis/asynchronous-apis/</guid>
      <description>비동기식 API의 핵심은 요청과 응답 사이의 시간적 분리이다. 이 패턴에서는 클라이언트가 요청을 보낸 후 즉각적인 응답을 기다리지 않고, 다른 작업을 계속 진행할 수 있다. 서버는 요청을 처리한 후, 다양한 메커니즘을 통해 결과를 클라이언트에게 전달한다.</description>
    </item>
    <item>
      <title>Synchronous APIs</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/synchronous-vs-asynchronous-apis/synchronous-apis/</link>
      <pubDate>Thu, 06 Mar 2025 15:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/synchronous-vs-asynchronous-apis/synchronous-apis/</guid>
      <description>클라이언트가 요청을 보내고 서버가 해당 요청을 처리한 후 즉시 응답을 반환하는 방식으로 작동한다. 이러한 동기식 통신의 본질은 &amp;#34;요청-응답&amp;#34; 주기가 완료될 때까지 클라이언트가 다른 작업으로 진행하지 않고 대기한다는 점이다.</description>
    </item>
    <item>
      <title>API Integration Patterns</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/</link>
      <pubDate>Thu, 06 Mar 2025 13:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/</guid>
      <description>API 통합 패턴은 다양한 시스템, 서비스, 애플리케이션이 효과적으로 통신하고 상호작용할 수 있도록 하는 설계 접근법이다.</description>
    </item>
    <item>
      <title>GraphQL API</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/graphql-api/</link>
      <pubDate>Mon, 03 Mar 2025 05:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/graphql-api/</guid>
      <description>GraphQL은 API를 위한 쿼리 언어이자 서버 측에서 이러한 쿼리를 실행하기 위한 런타임이다</description>
    </item>
    <item>
      <title>Server-sent Events vs. Websocket</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/server-sent-events/server-sent-events-vs-websocket/</link>
      <pubDate>Mon, 03 Mar 2025 05:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/server-sent-events/server-sent-events-vs-websocket/</guid>
      <description>전통적인 HTTP 요청-응답 모델은 실시간 데이터 전송에 최적화되어 있지 않기 때문에, 이를 보완하기 위한 기술로 서버 전송 이벤트(Server-Sent Events, SSE)와 웹소켓(WebSocket)이 등장했다.</description>
    </item>
    <item>
      <title>RFC 6749</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/oauth/rfc-6749/</link>
      <pubDate>Fri, 28 Feb 2025 11:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/oauth/rfc-6749/</guid>
      <description>RFC 6749는 OAuth 2.0 권한 부여 프레임워크(The OAuth 2.0 Authorization Framework)를 정의하는 인터넷 표준 문서이다.</description>
    </item>
    <item>
      <title>Protocol Buffers</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/grpc-api/protocol-buffers/</link>
      <pubDate>Fri, 28 Feb 2025 04:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/grpc-api/protocol-buffers/</guid>
      <description>Protocol Buffers(이하 protobuf)는 Google에서 개발한 언어 중립적, 플랫폼 중립적, 확장 가능한 구조화된 데이터 직렬화 메커니즘이다.</description>
    </item>
    <item>
      <title>Streaming APIs</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/streaming-apis/</link>
      <pubDate>Fri, 28 Feb 2025 03:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/streaming-apis/</guid>
      <description>스트리밍 API는 서버에서 클라이언트로 데이터를 연속적인 흐름(stream) 형태로 전송하는 인터페이스이다.</description>
    </item>
    <item>
      <title>Event-driven APIs</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/event-driven-apis/</link>
      <pubDate>Fri, 28 Feb 2025 03:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/event-driven-apis/</guid>
      <description>이벤트 기반 API(Event-Driven API)는 시스템 내에서 발생하는 상태 변화나 중요 사건을 이벤트로 정의하고, 이러한 이벤트를 중심으로 설계된 API 아키텍처이다</description>
    </item>
    <item>
      <title>Pub and Sub APIs</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/pub-and-sub-apis/</link>
      <pubDate>Fri, 28 Feb 2025 03:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/pub-and-sub-apis/</guid>
      <description>Pub/Sub(Publish-Subscribe) 패턴은 메시지 기반 아키텍처의 핵심 패러다임으로, 데이터를 생성하는 발행자(Publisher)와 데이터를 소비하는 구독자(Subscriber) 사이의 느슨한 결합(loose coupling)을 제공한다.</description>
    </item>
    <item>
      <title>Push APIs</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/push-apis/</link>
      <pubDate>Fri, 28 Feb 2025 03:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/push-apis/</guid>
      <description>Push API는 서버가 클라이언트의 요청 없이도 능동적으로 데이터나 알림을 클라이언트에게 전송할 수 있게 해주는 통신 메커니즘이다.</description>
    </item>
    <item>
      <title>Websocket API vs. Websocket</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/websocket-api/websocket-api-vs-websocket/</link>
      <pubDate>Fri, 28 Feb 2025 03:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/websocket-api/websocket-api-vs-websocket/</guid>
      <description>WebSocket은 통신 프로토콜 자체를 의미하며, 인터넷 상에서 메시지를 주고받는 방식을 정의하며 WebSocket API는 개발자가 웹 애플리케이션에서 WebSocket 프로토콜을 사용할 수 있게 해주는 프로그래밍 인터페이스이다.</description>
    </item>
    <item>
      <title>gRPC API vs. gRPC</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/grpc-api/grpc-api-vs-grpc/</link>
      <pubDate>Fri, 28 Feb 2025 03:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/grpc-api/grpc-api-vs-grpc/</guid>
      <description>gRPC는 기술적 프레임워크이고, gRPC API는 이 프레임워크를 사용하여 구축된 실제 응용 프로그램 인터페이스이다.</description>
    </item>
    <item>
      <title>GraphQL API vs. GraphQL</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/graphql-api/graphql-api-vs-graphql/</link>
      <pubDate>Thu, 27 Feb 2025 11:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/graphql-api/graphql-api-vs-graphql/</guid>
      <description>GraphQL은 페이스북이 2012년에 개발하고 2015년에 오픈소스로 공개한 쿼리 언어와 서버 측 런타임 사양(specification)이다. 반면 GraphQL API는 이 GraphQL 사양을 구현한 실제 API 인터페이스를 의미한다.</description>
    </item>
    <item>
      <title>Error Handling</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/graphql-api/error-handling/</link>
      <pubDate>Thu, 27 Feb 2025 08:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/graphql-api/error-handling/</guid>
      <description>GraphQL에서의 오류 처리는 REST API와는 다른 접근 방식을 취한다. GraphQL은 단일 엔드포인트로 여러 리소스에 접근할 수 있기 때문에, 오류 처리도 더 복잡하고 구조화되어 있다.</description>
    </item>
    <item>
      <title>Pagination</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/fundamentals/pagination/</link>
      <pubDate>Thu, 27 Feb 2025 02:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/fundamentals/pagination/</guid>
      <description>페이지네이션을 통해 서버는 데이터를 작은 &amp;#34;페이지&amp;#34; 단위로 나누어 전달하여 성능, 사용자 경험, 리소스 사용을 모두 최적화할 수 있다.</description>
    </item>
    <item>
      <title>URI Design</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/fundamentals/uri-design/</link>
      <pubDate>Thu, 27 Feb 2025 02:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/fundamentals/uri-design/</guid>
      <description>잘 설계된 URI는 API의 직관성을 높이고, 학습 곡선을 완화하며, 리소스의 구조와 관계를 명확히 보여준다.</description>
    </item>
    <item>
      <title>Versioning Strategies</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/fundamentals/versioning-strategies/</link>
      <pubDate>Thu, 27 Feb 2025 02:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/fundamentals/versioning-strategies/</guid>
      <description>API 버전 관리는 현대 소프트웨어 개발의 핵심 요소로, 기존 클라이언트의 호환성을 유지하면서 API를 발전시키는 방법이다.</description>
    </item>
    <item>
      <title>Get-and-Patch</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/handling-crud-operations/get-and-patch/</link>
      <pubDate>Wed, 26 Feb 2025 11:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/handling-crud-operations/get-and-patch/</guid>
      <description>&amp;#34;Get-and-Patch&amp;#34;는 **리소스의 부분적 업데이트를 효율적으로 처리하기 위한 REST API 디자인 패턴**으로, 기존 CRUD(Create, Read, Update, Delete) 방식의 한계를 보완한다.</description>
    </item>
    <item>
      <title>Get-and-Set</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/handling-crud-operations/get-and-set/</link>
      <pubDate>Wed, 26 Feb 2025 11:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/handling-crud-operations/get-and-set/</guid>
      <description>&amp;#34;Get-and-Set&amp;#34;은 전통적인 CRUD(Create, Read, Update, Delete) 방식을 개선한 REST API 디자인 패턴으로, **리소스의 존재 여부와 관계없이 단순화된 작업 흐름**을 제공한다.</description>
    </item>
    <item>
      <title>Timestamp-Checked</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/handling-crud-operations/timestamp-checked/</link>
      <pubDate>Wed, 26 Feb 2025 11:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/handling-crud-operations/timestamp-checked/</guid>
      <description>Timestamp-Checked 방식은 동시성 제어를 위한 중요한 기법 중 하나로, 주로 낙관적 동시성 제어(Optimistic Concurrency Control)의 맥락에서 사용된다.</description>
    </item>
    <item>
      <title>Handling CRUD Operations</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/handling-crud-operations/</link>
      <pubDate>Wed, 26 Feb 2025 02:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/handling-crud-operations/</guid>
      <description>CRUD는 데이터 중심 애플리케이션에서 가장 기본적인 네 가지 작업인 생성(Create), 읽기(Read), 업데이트(Update), 삭제(Delete)를 의미한다.</description>
    </item>
    <item>
      <title>Error Handling</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/error-handling/</link>
      <pubDate>Wed, 26 Feb 2025 02:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/error-handling/</guid>
      <description>RESTful API의.오류 처리는 개발자 경험과 시스템 안정성에 중요한 영향을 미치는 핵심 요소이다.  오류 상황을 어떻게 다루고 전달하는지에 따라 API의 품질이 크게 달라질 수 있다.</description>
    </item>
    <item>
      <title>Rate Limiting and Throttling</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-performance/rate-limiting-and-throttling/</link>
      <pubDate>Tue, 25 Feb 2025 13:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-performance/rate-limiting-and-throttling/</guid>
      <description>Rate Limiting은 특정 시간 프레임 내에 클라이언트가 API에 보낼 수 있는 요청 수를 제한하는 기술이며 Throttling은 요청 속도를 조절하여 제한에 도달했을 때 요청을 지연시키거나 대기열에 넣는다.</description>
    </item>
    <item>
      <title>Types of Real-time APIs</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/</link>
      <pubDate>Sat, 15 Feb 2025 01:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/types/</guid>
      <description>Real-time API는 클라이언트와 서버 간의 데이터를 거의 즉각적으로 주고받을 수 있는 API로, 실시간 데이터 교환을 가능하게 한다.</description>
    </item>
    <item>
      <title>Monitoring</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-performance/profiling-and-monitoring/monitoring/</link>
      <pubDate>Fri, 14 Feb 2025 01:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-performance/profiling-and-monitoring/monitoring/</guid>
      <description>API 모니터링은 단순한 로그 수집을 넘어서, API 시스템의 건강 상태를 종합적으로 관찰하고 평가하는 프로세스이다.</description>
    </item>
    <item>
      <title>Profiling</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-performance/profiling-and-monitoring/profiling/</link>
      <pubDate>Fri, 14 Feb 2025 01:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-performance/profiling-and-monitoring/profiling/</guid>
      <description>API 프로파일링은 API의 성능, 행동, 리소스 사용 특성을 체계적으로 분석하는 프로세스로, 최적화 기회를 발견하고 성능 문제를 해결하는 데 필수적인 접근법이다</description>
    </item>
    <item>
      <title>Profiling and Monitoring</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-performance/profiling-and-monitoring/</link>
      <pubDate>Fri, 14 Feb 2025 01:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-performance/profiling-and-monitoring/</guid>
      <description>프로파일링은 API의 행동과 성능을 분석하여 최적화할 수 있는 영역을 파악하는 과정이며 모니터링은 API의 상태와 성능을 지속적으로 관찰하고 문제가 발생했을 때 신속하게 대응하는 과정이다.</description>
    </item>
    <item>
      <title>Rate Limiting</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-performance/rate-limiting-and-throttling/rate-limiting/</link>
      <pubDate>Fri, 14 Feb 2025 01:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-performance/rate-limiting-and-throttling/rate-limiting/</guid>
      <description>Rate Limiting은 특정 시간 간격 동안 API에 대한 요청 수를 제한하는 기술이다. 쉽게 말해, 사용자나 클라이언트가 특정 시간 동안 보낼 수 있는 요청의 횟수에 상한선을 두는 것이다.</description>
    </item>
    <item>
      <title>Error Handling and Retries</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-performance/error-handling-and-retries/</link>
      <pubDate>Thu, 13 Feb 2025 01:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-performance/error-handling-and-retries/</guid>
      <description>효과적인 오류 처리와 재시도 메커니즘은 안정적인 API 설계의 핵심 요소이다.</description>
    </item>
    <item>
      <title>Caching Strategies</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-performance/caching-strategies/</link>
      <pubDate>Thu, 13 Feb 2025 01:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-performance/caching-strategies/</guid>
      <description>캐싱은 API 설계에서 성능을 최적화하는 핵심 전략이다. 자주 요청되는 데이터를 임시 저장소에 저장함으로써 반복적인 계산, 데이터베이스 쿼리, 네트워크 요청을 줄이고 응답 시간을 대폭 향상시킬 수 있다.</description>
    </item>
    <item>
      <title>Load Balancing</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-performance/load-balancing/</link>
      <pubDate>Thu, 13 Feb 2025 01:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-performance/load-balancing/</guid>
      <description>API 로드 밸런싱은 현대 웹 아키텍처와 분산 시스템의 필수적인 구성 요소로, 트래픽을 여러 서버에 효율적으로 분산하여 성능, 가용성, 안정성을 극대화한다.</description>
    </item>
    <item>
      <title>Performance Metrics</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-performance/performance-metrics/</link>
      <pubDate>Thu, 13 Feb 2025 01:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-performance/performance-metrics/</guid>
      <description>API 성능 메트릭스는 API의 효율성, 안정성, 그리고 전반적인 품질을 측정하는 중요한 지표이다.</description>
    </item>
    <item>
      <title>API Documentation</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-documentation/</link>
      <pubDate>Wed, 12 Feb 2025 01:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-documentation/</guid>
      <description>API 문서화란 API의 기능, 사용 방법, 엔드포인트, 매개변수, 응답 형식 등을 설명하는 기술 문서를 말한다.</description>
    </item>
    <item>
      <title>API Documentation Tools</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-documentation/tools/</link>
      <pubDate>Wed, 12 Feb 2025 01:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-documentation/tools/</guid>
      <description>API 문서화 도구는 개발자들이 API를 효과적으로 설계, 문서화, 테스트할 수 있도록 돕는 중요한 도구이다.</description>
    </item>
    <item>
      <title>RFC 7519</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/jwt/rfc-7519/</link>
      <pubDate>Thu, 06 Feb 2025 03:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/jwt/rfc-7519/</guid>
      <description>2015년 5월에 Internet Engineering Task Force(IETF)에 의해 발행된 이 문서는 JWT의 구조, 형식, 서명 방법, 암호화 방법 등을 상세히 정의하고 있다.</description>
    </item>
    <item>
      <title>Mocking APIs</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-testing/mocking-apis/</link>
      <pubDate>Wed, 05 Feb 2025 04:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-testing/mocking-apis/</guid>
      <description>목 API는 소프트웨어 개발 과정에서 실제 API를 대체하여 테스트, 개발, 디버깅을 용이하게 하는 가상의 API이다.</description>
    </item>
    <item>
      <title>Personal Identifiable Information (PII)</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/standards-and-compliance/pii/</link>
      <pubDate>Sun, 02 Feb 2025 03:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/standards-and-compliance/pii/</guid>
      <description>개인 식별 정보(Personal Identifiable Information, PII)는 개인의 신원을 식별하거나 추적하는 데 사용될 수 있는 정보를 의미한다.</description>
    </item>
    <item>
      <title>API Lifecycle Management</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/</link>
      <pubDate>Sun, 02 Feb 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/</guid>
      <description>API 라이프사이클 관리는 API의 계획 단계부터 폐기 단계까지 전체 수명주기를 체계적으로 관리하는 프로세스이다</description>
    </item>
    <item>
      <title>Short Polling</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/polling/types/short-polling/</link>
      <pubDate>Sat, 01 Feb 2025 03:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/polling/types/short-polling/</guid>
      <description>Short polling은 클라이언트가 주기적으로 서버에 HTTP 요청을 보내 새로운 데이터가 있는지 확인하는 방식이다.</description>
    </item>
    <item>
      <title>Long Polling</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/polling/types/long-polling/</link>
      <pubDate>Sat, 01 Feb 2025 03:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/polling/types/long-polling/</guid>
      <description>Long polling은 클라이언트가 서버에 HTTP 요청을 보내고, 서버는 새로운 정보가 있을 때까지 응답을 보류하는 방식이다.</description>
    </item>
    <item>
      <title>API Keys and Management</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-keys-and-management/</link>
      <pubDate>Sat, 01 Feb 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-keys-and-management/</guid>
      <description>API 키는 API에 접근하려는 클라이언트를 식별하고 인증하는 데 사용되는 고유한 문자열</description>
    </item>
    <item>
      <title>Messaging Queues</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/messaging-queues/</link>
      <pubDate>Sat, 01 Feb 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/messaging-queues/</guid>
      <description>메시징 큐는 비동기 통신을 가능하게 하는 중간 저장소로, 메시지 생산자(Producer)와 소비자(Consumer) 사이에서 데이터를 버퍼링하는 역할을 한다.</description>
    </item>
    <item>
      <title>Microservices Architecture</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/microservices-architecture/</link>
      <pubDate>Sat, 01 Feb 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/microservices-architecture/</guid>
      <description>마이크로서비스 아키텍처는 단일 애플리케이션을 작고 독립적인 서비스 집합으로 개발하는 접근 방식이다.</description>
    </item>
    <item>
      <title>Batch Processing</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/batch-processing/</link>
      <pubDate>Sat, 01 Feb 2025 03:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/batch-processing/</guid>
      <description>배치 처리는 여러 개별 API 요청을 하나의 그룹으로 묶어 단일 요청으로 처리하는 방식이다. 이는 여러 개의 개별 API 호출을 하는 대신, 다수의 작업을 포함한 하나의 요청을 보내는 것이다.</description>
    </item>
    <item>
      <title>Event Driven Architecture</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/event-driven-architecture/</link>
      <pubDate>Sat, 01 Feb 2025 03:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/event-driven-architecture/</guid>
      <description>이벤트 기반 아키텍처는 시스템 내에서 발생하는 상태 변화나 중요한 사건을 &amp;#39;이벤트&amp;#39;로 정의하고, 이러한 이벤트의 생성, 전송, 처리를 중심으로 시스템을 구성하는 방식이다.</description>
    </item>
    <item>
      <title>Webhooks vs Polling</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/</link>
      <pubDate>Fri, 31 Jan 2025 15:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/</guid>
      <description>웹 애플리케이션에서 외부 시스템과 통신하거나 상태 변화를 감지하는 방식에는 대표적으로 웹훅(Webhooks)과 폴링(Polling)이 있다.</description>
    </item>
    <item>
      <title>RFC 9457</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/error-handling/rfc-9457/</link>
      <pubDate>Sun, 15 Dec 2024 14:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/error-handling/rfc-9457/</guid>
      <description>**RFC 9457**은 그 후속 버전으로, **HTTP API의 오류 응답을 구조화된 형식으로 전달하기 위한 표준**이다.</description>
    </item>
    <item>
      <title>RFC 7807</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/error-handling/rfc-7807/</link>
      <pubDate>Sun, 15 Dec 2024 14:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/error-handling/rfc-7807/</guid>
      <description>RFC 7807은 HTTP API에서 오류 상황을 일관되고 기계가 처리하기 쉬운 방식으로 전달하기 위한 표준이다.</description>
    </item>
    <item>
      <title>DAC</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/dac/</link>
      <pubDate>Wed, 06 Nov 2024 23:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/dac/</guid>
      <description>리소스의 소유자가 해당 리소스에 대한다른  사용자들의 접근 권한을 직접 제어할 수 있는 접근 제어 방식</description>
    </item>
    <item>
      <title>MAC</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/mac/</link>
      <pubDate>Wed, 06 Nov 2024 23:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/mac/</guid>
      <description>시스템 전체에 걸쳐 중앙에서 정의된 보안 정책에 따라 접근 권한을 강제로 적용하는 접근 제어 방식.</description>
    </item>
    <item>
      <title>PBAC</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/pbac/</link>
      <pubDate>Wed, 06 Nov 2024 23:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/pbac/</guid>
      <description>중앙에서 정의된 정책들을 기반으로 접근 권한을 결정하는 접근 제어 방식.  각 정책은 &amp;#34;누가&amp;#34;, &amp;#34;무엇을&amp;#34;, &amp;#34;어떤 조건에서&amp;#34; 할 수 있는지를 정의하며, 이러한 정책들은 프로그래밍 방식으로 표현되고 평가된다.</description>
    </item>
    <item>
      <title>ABAC</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/abac/</link>
      <pubDate>Wed, 06 Nov 2024 23:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/abac/</guid>
      <description>ABAC는 주체(사용자), 객체(리소스), 작업, 환경 조건의 속성을 조합하여 접근 제어 정책을 정의한다.</description>
    </item>
    <item>
      <title>RBAC</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/rbac/</link>
      <pubDate>Wed, 06 Nov 2024 23:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/rbac/</guid>
      <description>RBAC는 &amp;#34;만약 ~라면 ~할 수 있다&amp;#34;와 같은 형태의 규칙들을 사용하여 접근 권한을 제어한다. 각 규칙은 조건부와 결과부로 구성되며, 시스템은 이러한 규칙들을 순차적으로 평가하여 접근 허용 여부를 결정한다.</description>
    </item>
    <item>
      <title>Authorization Methods</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/</link>
      <pubDate>Wed, 06 Nov 2024 11:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/</guid>
      <description>API 권한 부여(Authorization)는 인증(Authentication)이 완료된 후, 사용자가 어떤 리소스에 접근할 수 있는지를 결정하는 중요한 보안 메커니즘이다.</description>
    </item>
    <item>
      <title>JWT</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/jwt/</link>
      <pubDate>Wed, 06 Nov 2024 11:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/jwt/</guid>
      <description>JSON Web Token(JWT)은 웹 애플리케이션과 서비스 간에 안전하게 정보를 전송하기 위한 개방형 표준(RFC 7519)이다.</description>
    </item>
    <item>
      <title>Authentication Methods</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/</link>
      <pubDate>Wed, 06 Nov 2024 05:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/</guid>
      <description>API 인증은 API를 사용하는 클라이언트의 신원을 확인하고 승인된 사용자만 API 리소스에 접근할 수 있도록 보장하는 핵심 보안 메커니즘이다.</description>
    </item>
    <item>
      <title>Payment Card Industry Data Security Standard (PCI DSS)</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/standards-and-compliance/pci-dss/</link>
      <pubDate>Sun, 27 Oct 2024 13:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/standards-and-compliance/pci-dss/</guid>
      <description>PCI DSS(Payment Card Industry Data Security Standard)는 신용카드 결제 과정에서 카드 소유자의 데이터를 안전하게 보호하기 위해 주요 글로벌 카드 브랜드(Visa, MasterCard, American Express, Discover, JCB)가 공동으로 제정한 국제 보안 표준이다.</description>
    </item>
    <item>
      <title>HATEOAS (Hypermedia As The Engine Of Application State)</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/hateoas/</link>
      <pubDate>Sat, 19 Oct 2024 07:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/hateoas/</guid>
      <description>RESTful API 설계의 중요한 개념으로, 클라이언트와 서버 간의 동적이고 유연한 상호작용을 가능하게 하는 방식.</description>
    </item>
    <item>
      <title>gRPC API</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/grpc-api/</link>
      <pubDate>Sat, 19 Oct 2024 03:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/grpc-api/</guid>
      <description>gRPC는 Google에서 개발한 고성능, 오픈소스 RPC(Remote Procedure Call) 프레임워크이다.</description>
    </item>
    <item>
      <title>RESTful API</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/</link>
      <pubDate>Sat, 19 Oct 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/</guid>
      <description>REST는 네트워크 시스템, 특히 웹에서 자원을 정의하고 접근하는 방법을 제공한다. 그 이름에서 알 수 있듯이 핵심은 &amp;#34;표현(Representation)&amp;#34;과 &amp;#34;상태 전이(State Transfer)&amp;#34;이다.</description>
    </item>
    <item>
      <title>SOAP API</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/soap-api/</link>
      <pubDate>Sat, 19 Oct 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/soap-api/</guid>
      <description>SOAP(Simple Object Access Protocol)은 네트워크를 통해 구조화된 정보를 교환하기 위한 메시지 프로토콜이다.</description>
    </item>
  </channel>
</rss>
