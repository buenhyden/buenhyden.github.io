<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Communication-Style on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/communication-style/</link>
    <description>Recent content in Communication-Style on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.143.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 12 Nov 2024 11:22:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/communication-style/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Domain-specific</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication-style/domain-specific/</link>
      <pubDate>Tue, 12 Nov 2024 11:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication-style/domain-specific/</guid>
      <description>&lt;h2 id=&#34;domain-specific&#34;&gt;Domain-specific&lt;/h2&gt;
&lt;p&gt;Domain-specific 프로토콜은 특정 도메인이나 비즈니스 영역에 특화된 통신 프로토콜을 의미한다.&lt;br&gt;
이 프로토콜은 일반적인 통신 프로토콜보다 해당 도메인의 특성과 요구사항에 더 적합하게 설계되어 있다.&lt;/p&gt;
&lt;h3 id=&#34;주요-특징&#34;&gt;주요 특징&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;도메인 주도 설계(DDD)와의 연계:&lt;/strong&gt; 도메인 주도 설계는 복잡한 소프트웨어를 개발할 때 도메인 모델을 중심으로 설계하는 접근 방식이다. MSA에서 도메인별 통신 스타일을 적용하면, 각 도메인의 비즈니스 로직과 데이터가 해당 서비스 내에서 캡슐화되어 독립성을 유지할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;통신 프로토콜의 선택:&lt;/strong&gt; 각 도메인의 특성에 따라 적합한 통신 프로토콜을 선택한다. 예를 들어, 실시간성이 중요한 도메인에서는 gRPC나 GraphQL과 같은 프로토콜을, 비동기 처리가 적합한 도메인에서는 Kafka나 AMQP와 같은 메시징 프로토콜을 사용할 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Remote-Procedure</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication-style/remote-procedure/</link>
      <pubDate>Tue, 12 Nov 2024 11:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication-style/remote-procedure/</guid>
      <description>&lt;h2 id=&#34;remote-procedure&#34;&gt;Remote-Procedure&lt;/h2&gt;
&lt;p&gt;Remote Procedure Call은 분산 컴퓨팅 환경에서 한 프로그램이 다른 주소 공간(일반적으로 다른 컴퓨터)에 있는 프로시저나 함수를 마치 로컬 함수처럼 호출할 수 있게 해주는 프로토콜이다.&lt;/p&gt;
&lt;h3 id=&#34;rpc의-작동-원리&#34;&gt;RPC의 작동 원리&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;클라이언트가 로컬 프로시저를 호출한다.&lt;/li&gt;
&lt;li&gt;클라이언트 스텁이 파라미터를 마샬링(marshaling)하여 메시지로 패킹한다.&lt;/li&gt;
&lt;li&gt;클라이언트의 운영체제가 메시지를 서버 머신으로 전송한다.&lt;/li&gt;
&lt;li&gt;서버의 운영체제가 수신된 패킷을 서버 스텁으로 전달한다.&lt;/li&gt;
&lt;li&gt;서버 스텁이 파라미터를 언마샬링(unmarshalling)한다.&lt;/li&gt;
&lt;li&gt;서버 스텁이 서버 프로시저를 호출한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;rpc의-특징&#34;&gt;RPC의 특징&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;투명성: 분산 컴퓨팅을 중앙 집중식 컴퓨팅처럼 보이게 만든다.&lt;/li&gt;
&lt;li&gt;높은 수준의 프로토콜: 소켓 통신보다 더 높은 수준의 추상화를 제공한다.&lt;/li&gt;
&lt;li&gt;위치 및 구현 언어에 대한 투명성 제공: 클라이언트-서버 통신에 대한 투명성을 제공한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;rpi-패턴의-주요-구성-요소&#34;&gt;RPI 패턴의 주요 구성 요소&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;통신 프로토콜: HTTP/REST가 가장 일반적이지만, gRPC나 GraphQL도 사용될 수 있습니다. 각 프로토콜은 자신만의 장단점이 있다. 예를 들어, REST는 간단하고 이해하기 쉽지만, gRPC는 더 높은 성능을 제공한다.&lt;/li&gt;
&lt;li&gt;서비스 인터페이스: API 계약은 매우 중요하다. 버저닝, 문서화, 그리고 하위 호환성을 고려해야 한다. 예를 들어, Swagger나 OpenAPI를 사용하여 API를 문서화하고 관리할 수 있다.&lt;/li&gt;
&lt;li&gt;오류 처리: 네트워크 오류, 타임아웃, 서비스 불가용 등 다양한 실패 케이스를 고려해야 한다. Circuit Breaker 패턴을 사용하여 연쇄 실패를 방지할 수 있다.&lt;/li&gt;
&lt;li&gt;보안: 인증, 인가, 데이터 암호화 등 보안 측면을 고려해야 한다. OAuth2나 JWT를 사용하여 서비스 간 인증을 구현할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;rpc의-장점&#34;&gt;RPC의 장점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;효율성: 도메인 특화 기능으로 통신 효율성이 높아진다.&lt;/li&gt;
&lt;li&gt;구현 용이성: REST나 gRPC와 같은 잘 알려진 RPC 기술을 사용하여 쉽게 구현할 수 있다.&lt;/li&gt;
&lt;li&gt;직관적인 프로그래밍 모델: 개발자가 분산 시스템을 로컬 시스템처럼 프로그래밍할 수 있게 해준다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;rpc의-단점&#34;&gt;RPC의 단점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;네트워크 문제로 인한 실패 가능성: 예측할 수 없는 네트워크 문제로 인해 원격 호출이 실패할 수 있다.&lt;/li&gt;
&lt;li&gt;복잡성: 로컬 호출과 달리 네트워크 지연, 오류 처리 등 추가적인 복잡성이 발생한다.&lt;/li&gt;
&lt;li&gt;호환성 문제: 다른 시스템과의 통합이 어려울 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;rpi-패턴-구현-시-고려해야-할-사항&#34;&gt;RPI 패턴 구현 시 고려해야 할 사항&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;성능 최적화: 네트워크 지연을 최소화하고, 캐싱을 활용하며, 배치 처리를 고려해야 한다. 예를 들어, 여러 개의 작은 요청 대신 하나의 큰 요청으로 처리하는 것이 효율적일 수 있다.&lt;/li&gt;
&lt;li&gt;확장성: 서비스 디스커버리, 로드 밸런싱, 그리고 자동 스케일링을 구현해야 한다. Eureka나 Consul과 같은 서비스 디스커버리 도구를 활용할 수 있다.&lt;/li&gt;
&lt;li&gt;모니터링: 요청/응답 시간, 오류율, 처리량 등을 모니터링해야 한다. Prometheus나 Grafana와 같은 도구를 사용하여 메트릭스를 수집하고 시각화할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;msa에서의-rpc-활용&#34;&gt;MSA에서의 RPC 활용&lt;/h3&gt;
&lt;p&gt;마이크로서비스 아키텍처에서 RPC는 서비스 간 통신을 위한 효과적인 방법 중 하나이다. 특히 동기식, 저지연 상호작용이 필요한 경우에 적합하다. REST, gRPC, Apache Thrift 등의 기술을 활용하여 구현할 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Messaging</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication-style/messaging/</link>
      <pubDate>Tue, 12 Nov 2024 11:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication-style/messaging/</guid>
      <description>&lt;h2 id=&#34;messaging&#34;&gt;Messaging&lt;/h2&gt;
&lt;p&gt;마이크로서비스 아키텍처(MSA)에서 Messaging은 중요한 Communication style 중 하나이다.&lt;br&gt;
Messaging은 서비스 간 비동기 통신을 가능하게 하며, 시스템의 확장성과 유연성을 향상시킨다.&lt;/p&gt;
&lt;p&gt;Messaging은 서비스들이 메시지를 통해 비동기적으로 통신하는 방식이다. 서비스들은 메시지 브로커를 통해 메시지를 주고받으며, 이를 통해 느슨한 결합(loose coupling)을 실현한다.&lt;/p&gt;
&lt;h3 id=&#34;주요-특징&#34;&gt;주요 특징&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;비동기 통신&lt;/strong&gt;: 서비스는 메시지를 보내고 즉시 다른 작업을 수행할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;느슨한 결합&lt;/strong&gt;: 서비스들은 직접적인 연결 없이 메시지를 통해 통신한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;메시지 구조&lt;/strong&gt;: 메시지는 일반적으로 헤더(header)와 바디(message body)로 구성된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;채널 기반 통신&lt;/strong&gt;: 메시지는 채널을 통해 전달된다. point-to-point 채널과 publish-subscribe 채널이 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;messaging-패턴&#34;&gt;Messaging 패턴&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Request/Response&lt;/strong&gt;: 서비스가 요청 메시지를 보내고 응답을 기다린다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notifications&lt;/strong&gt;: 서비스가 메시지를 보내지만 응답을 기대하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Publish/Subscribe&lt;/strong&gt;: 서비스가 메시지를 발행하면 여러 수신자가 구독할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Event-Driven&lt;/strong&gt;: 서비스가 이벤트를 발행하고 다른 서비스들이 이에 반응한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;messaging-패턴의-주요-구성-요소&#34;&gt;Messaging 패턴의 주요 구성 요소&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;메시지 구조:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Communication style</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication-style/</link>
      <pubDate>Tue, 12 Nov 2024 02:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication-style/</guid>
      <description>&lt;h2 id=&#34;communication-style&#34;&gt;Communication style&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
  </channel>
</rss>
