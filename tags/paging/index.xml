<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Paging</title><link>https://buenhyden.github.io/tags/paging/</link><description>Recent content in Paging on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 16 Jan 2025 08:24:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/paging/index.xml" rel="self" type="application/rss+xml"/><item><title>Paging vs Segmentation</title><link>https://buenhyden.github.io/til/2024/12/paging-vs-segmentation/</link><pubDate>Thu, 16 Jan 2025 08:24:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/12/paging-vs-segmentation/</guid><description>
&lt;h2>Paging Vs Segmentation&lt;span class="hx-absolute -hx-mt-20" id="paging-vs-segmentation">&lt;/span>
&lt;a href="#paging-vs-segmentation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Paging과 Segmentation은 운영체제의 메모리 관리 기법이다.&lt;/p>
&lt;p>Paging:&lt;/p>
&lt;ul>
&lt;li>프로세스의 주소 공간을 고정 크기의 페이지로 나누어 관리한다.&lt;/li>
&lt;li>물리적 메모리를 같은 크기의 프레임으로 나눈다.&lt;/li>
&lt;li>외부 단편화 문제를 해결하고 메모리 할당을 단순화한다.&lt;/li>
&lt;/ul>
&lt;p>Segmentation:&lt;/p>
&lt;ul>
&lt;li>프로세스를 논리적 단위인 세그먼트로 나누어 관리한다.&lt;/li>
&lt;li>각 세그먼트의 크기는 가변적이다.&lt;/li>
&lt;li>프로그램의 논리적 구조를 반영하여 메모리를 관리한다.&lt;/li>
&lt;/ul>
&lt;h3>Paging과 Segmentation 비교&lt;span class="hx-absolute -hx-mt-20" id="paging과-segmentation-비교">&lt;/span>
&lt;a href="#paging%ea%b3%bc-segmentation-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Paging&lt;/th>
&lt;th>Segmentation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>분할 단위&lt;/td>
&lt;td>고정 크기 페이지&lt;/td>
&lt;td>가변 크기 세그먼트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주소 변환&lt;/td>
&lt;td>페이지 테이블 사용&lt;/td>
&lt;td>세그먼트 테이블 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>외부 단편화&lt;/td>
&lt;td>없음&lt;/td>
&lt;td>발생 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>내부 단편화&lt;/td>
&lt;td>발생 가능&lt;/td>
&lt;td>거의 없음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 활용&lt;/td>
&lt;td>효율적&lt;/td>
&lt;td>유연함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡도&lt;/td>
&lt;td>상대적으로 간단&lt;/td>
&lt;td>복잡함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>공유와 보호&lt;/td>
&lt;td>페이지 단위&lt;/td>
&lt;td>세그먼트 단위&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용자 관점&lt;/td>
&lt;td>투명함&lt;/td>
&lt;td>프로그램 구조 반영&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>할당/해제 속도&lt;/td>
&lt;td>빠름&lt;/td>
&lt;td>상대적으로 느림&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테이블 크기&lt;/td>
&lt;td>큼&lt;/td>
&lt;td>작음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>페이징 (Paging)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/paging/</link><pubDate>Fri, 20 Dec 2024 13:37:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/paging/</guid><description>
&lt;h2>페이징 (Paging)&lt;span class="hx-absolute -hx-mt-20" id="페이징-paging">&lt;/span>
&lt;a href="#%ed%8e%98%ec%9d%b4%ec%a7%95-paging" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>먼저 페이징이 필요한 배경을 이해해보자.&lt;br>
초기 컴퓨터 시스템에서는 프로그램 전체가 물리 메모리에 연속적으로 적재되어야 했다.&lt;br>
이는 두 가지 큰 문제를 발생시켰다:&lt;/p>
&lt;ol>
&lt;li>큰 프로그램은 메모리에 적재하기 어려웠다.&lt;/li>
&lt;li>메모리 단편화(fragmentation)가 심각했다.&lt;br>
이러한 문제를 해결하기 위해 페이징이 도입되었다.&lt;/li>
&lt;/ol>
&lt;p>페이징의 기본 개념은 프로그램의 논리적 주소 공간과 물리적 메모리를 동일한 크기의 작은 단위로 나누어 관리하는 것이다. 이때 논리적 주소 공간의 단위를 &amp;lsquo;페이지(page)&amp;lsquo;라 하고, 물리적 메모리의 단위를 &amp;lsquo;프레임(frame)&amp;lsquo;이라고 한다.&lt;/p>
&lt;p>
&lt;img src="../paging.webp" alt="Paging" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/paging-in-operating-system/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/paging-in-operating-system/&lt;/a> _&lt;/p>
&lt;h3>페이징 시스템의 주요 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="페이징-시스템의-주요-구성-요소">&lt;/span>
&lt;a href="#%ed%8e%98%ec%9d%b4%ec%a7%95-%ec%8b%9c%ec%8a%a4%ed%85%9c%ec%9d%98-%ec%a3%bc%ec%9a%94-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>페이지 테이블(Page Table):&lt;/p>
&lt;ul>
&lt;li>각 프로세스마다 존재하며, 논리적 페이지 번호와 물리적 프레임 번호의 매핑 정보를 저장한다.&lt;/li>
&lt;li>페이지 테이블 엔트리(PTE)에는 다음과 같은 정보가 포함된다:
&lt;ul>
&lt;li>Valid bit: 페이지가 물리 메모리에 있는지 여부&lt;/li>
&lt;li>Protection bit: 읽기/쓰기/실행 권한&lt;/li>
&lt;li>Modified bit (Dirty bit): 페이지 내용이 변경되었는지 여부&lt;/li>
&lt;li>Referenced bit: 최근에 접근했는지 여부&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>주소 변환 과정:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>논리적 주소 = 페이지 번호(p) &amp;#43; 오프셋(d)
물리적 주소 = 프레임 번호(f) × 페이지 크기 &amp;#43; 오프셋(d)&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>예를 들어, 페이지 크기가 4KB(2¹²)이고 32비트 주소 체계를 사용한다면:&lt;/p>
&lt;ul>
&lt;li>상위 20비트는 페이지 번호&lt;/li>
&lt;li>하위 12비트는 오프셋&lt;br>
이 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>TLB(Translation Lookaside Buffer):&lt;br>
페이지 테이블 접근 시간을 줄이기 위한 캐시로, 최근에 사용된 페이지 테이블 엔트리를 저장한다.&lt;br>
주소 변환 과정은 다음과 같다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>1. CPU가 논리적 주소 생성
2. TLB 검색
3. TLB Hit: 바로 물리적 주소 변환
TLB Miss: 페이지 테이블 접근 필요
4. 페이지 테이블에서 프레임 번호 확인
5. 물리적 주소로 변환하여 메모리 접근&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>다단계 페이지 테이블:&lt;br>
큰 주소 공간을 효율적으로 관리하기 위해 페이지 테이블을 여러 단계로 구성한다.&lt;br>
예를 들어 2단계 페이지 테이블의 경우:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>논리적 주소 = 외부 페이지 번호 &amp;#43; 내부 페이지 번호 &amp;#43; 오프셋&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>페이지 부재 처리(Page Fault Handling):&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">handle_page_fault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">logical_address&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">is_valid_address&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">logical_address&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="n">SegmentationFault&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">page_number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_page_number&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">logical_address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">has_free_frame&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">victim_page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">select_victim_page&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 페이지 교체 알고리즘 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">is_dirty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">victim_page&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">write_to_disk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">victim_page&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">remove_page_table_entry&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">victim_page&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">free_frame&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">allocate_free_frame&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">load_page_from_disk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">page_number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">free_frame&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">update_page_table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">page_number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">free_frame&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">restart_instruction&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>페이징의 주요 특징&lt;span class="hx-absolute -hx-mt-20" id="페이징의-주요-특징">&lt;/span>
&lt;a href="#%ed%8e%98%ec%9d%b4%ec%a7%95%ec%9d%98-%ec%a3%bc%ec%9a%94-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>메모리 분할:&lt;/p>
&lt;ul>
&lt;li>논리적 메모리(프로세스)를 동일한 크기의 페이지로 나눈다.&lt;/li>
&lt;li>물리적 메모리를 동일한 크기의 프레임으로 나눈다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>주소 변환:&lt;/p>
&lt;ul>
&lt;li>논리 주소를 물리 주소로 변환하기 위해 페이지 테이블을 사용한다.&lt;/li>
&lt;li>MMU(Memory Management Unit)가 주소 변환을 수행한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>비연속적 할당:&lt;/p>
&lt;ul>
&lt;li>프로세스의 페이지들은 물리 메모리의 여러 프레임에 분산되어 저장될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>내부 단편화:&lt;/p>
&lt;ul>
&lt;li>페이지 크기가 고정되어 있어 프로세스의 마지막 페이지에서 내부 단편화가 발생할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>페이징의 작동 방식&lt;span class="hx-absolute -hx-mt-20" id="페이징의-작동-방식">&lt;/span>
&lt;a href="#%ed%8e%98%ec%9d%b4%ec%a7%95%ec%9d%98-%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>프로세스가 메모리에 로드될 때, 운영체제는 프로세스를 페이지 단위로 나눈다.&lt;/li>
&lt;li>각 페이지는 사용 가능한 메모리 프레임에 할당된다.&lt;/li>
&lt;li>운영체제는 페이지 테이블을 생성하여 각 페이지와 해당 프레임 간의 매핑을 유지한다.&lt;/li>
&lt;li>CPU가 메모리에 접근할 때, 논리 주소는 페이지 번호와 오프셋으로 나뉜다.&lt;/li>
&lt;li>MMU는 페이지 테이블을 참조하여 페이지 번호를 프레임 번호로 변환한다.&lt;/li>
&lt;li>프레임 번호와 오프셋을 조합하여 실제 물리 주소를 생성한다.&lt;/li>
&lt;/ol>
&lt;h3>페이징의 장점&lt;span class="hx-absolute -hx-mt-20" id="페이징의-장점">&lt;/span>
&lt;a href="#%ed%8e%98%ec%9d%b4%ec%a7%95%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>외부 단편화 제거: 메모리를 고정 크기로 관리하여 외부 단편화를 방지한다.&lt;/li>
&lt;li>유연한 메모리 할당: 프로세스의 페이지들을 비연속적으로 할당할 수 있다.&lt;/li>
&lt;li>메모리 보호: 페이지 단위로 접근 권한을 설정할 수 있어 보안성이 향상된다.&lt;/li>
&lt;li>가상 메모리 지원: 실제 물리 메모리보다 큰 주소 공간을 제공할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>페이징의 단점&lt;span class="hx-absolute -hx-mt-20" id="페이징의-단점">&lt;/span>
&lt;a href="#%ed%8e%98%ec%9d%b4%ec%a7%95%ec%9d%98-%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>내부 단편화: 페이지 크기가 고정되어 있어 마지막 페이지에서 낭비가 발생할 수 있다.&lt;/li>
&lt;li>페이지 테이블 오버헤드: 큰 프로세스의 경우 페이지 테이블이 많은 메모리를 차지할 수 있다.&lt;/li>
&lt;li>주소 변환 시간: 페이지 테이블 참조로 인한 추가적인 메모리 접근이 필요하다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>