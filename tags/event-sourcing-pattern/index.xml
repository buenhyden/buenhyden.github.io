<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Event-Sourcing-Pattern</title><link>https://buenhyden.github.io/tags/event-sourcing-pattern/</link><description>Recent content in Event-Sourcing-Pattern on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 16 Jan 2025 03:37:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/event-sourcing-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Event-Driven Architecture vs Event Sourcing Pattern vs Publisher-Subscriber Pattern vs Producer-Consumer Pattern</title><link>https://buenhyden.github.io/til/2025/01/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</link><pubDate>Thu, 16 Jan 2025 03:37:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</guid><description>
&lt;h2>Event-Driven Architecture Vs Event Sourcing Pattern Vs Publisher-Subscriber Pattern Vs Producer-Consumer Pattern&lt;span class="hx-absolute -hx-mt-20" id="event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern">&lt;/span>
&lt;a href="#event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Event Sourcing Pattern, Publisher-Subscriber Pattern, Event-Driven Architecture, Producer-Consumer Pattern은 모두 소프트웨어 아키텍처에서 중요한 역할을 하는 패턴들이며, 서로 밀접한 관계를 가지고 있다.&lt;br>
이들의 관계를 다음과 같이 설명할 수 있다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Event-Driven Architecture (EDA)와 다른 패턴들의 관계:&lt;/p>
&lt;ul>
&lt;li>EDA는 이벤트 중심의 시스템 설계를 위한 상위 수준의 아키텍처 스타일.&lt;/li>
&lt;li>Publisher-Subscriber Pattern과 Producer-Consumer Pattern은 EDA를 구현하는 데 사용되는 구체적인 통신 모델이다.&lt;/li>
&lt;li>Event Sourcing Pattern은 EDA의 한 구현 방식으로 볼 수 있으며, 이벤트를 저장하고 관리하는 방법을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Publisher-Subscriber Pattern과 Producer-Consumer Pattern의 관계:&lt;/p>
&lt;ul>
&lt;li>두 패턴 모두 비동기 메시징을 위한 디자인 패턴이지만, 약간의 차이가 있다.&lt;/li>
&lt;li>Publisher-Subscriber Pattern은 메시지를 특정 주제(topic)에 발행하고, 해당 주제를 구독하는 모든 구독자에게 메시지를 전달한다.&lt;/li>
&lt;li>Producer-Consumer Pattern은 일반적으로 메시지를 큐에 넣고, 하나의 소비자가 메시지를 처리한다.&lt;/li>
&lt;li>Publisher-Subscriber Pattern은 Producer-Consumer Pattern의 확장된 형태로 볼 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Event Sourcing Pattern과 다른 패턴들의 관계:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Event Sourcing은 시스템의 상태 변화를 이벤트로 저장하는 방식.&lt;/li>
&lt;li>이 패턴은 Publisher-Subscriber 또는 Producer-Consumer 패턴을 활용하여 이벤트를 발행하고 구독할 수 있다.&lt;/li>
&lt;li>Event Sourcing은 EDA의 핵심 구성 요소 중 하나로, 이벤트의 저장과 재생을 통해 시스템의 상태를 관리한다.&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>통합적 관점:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>EDA는 이러한 패턴들을 포괄하는 상위 개념으로, 시스템 전체의 이벤트 중심 설계를 지향한다.&lt;/li>
&lt;li>Publisher-Subscriber와 Producer-Consumer 패턴은 EDA 내에서 이벤트의 생성과 소비를 관리하는 메커니즘을 제공한다.&lt;/li>
&lt;li>Event Sourcing은 이벤트의 지속성과 시스템 상태 관리를 담당하며, EDA의 이벤트 처리 방식을 보완한다.&lt;/li>
&lt;/ul>
&lt;p>이러한 패턴들은 서로 보완적인 관계를 가지며, 복잡한 분산 시스템에서 함께 사용되어 시너지 효과를 낼 수 있다.&lt;br>
예를 들어, Event Sourcing을 통해 저장된 이벤트는 Publisher-Subscriber 패턴을 통해 다른 서비스에 전파될 수 있으며, 이는 전체적인 Event-Driven Architecture의 일부로 작동할 수 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Event-Driven Architecture&lt;/th>
&lt;th>Event Sourcing Pattern&lt;/th>
&lt;th>Publisher-Subscriber Pattern&lt;/th>
&lt;th>Producer-Consumer Pattern&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>주요 목적&lt;/td>
&lt;td>이벤트 중심의 시스템 설계&lt;/td>
&lt;td>모든 상태 변경을 이벤트로 저장하고 재구성&lt;/td>
&lt;td>메시지 발행자와 구독자 간 느슨한 결합 제공&lt;/td>
&lt;td>데이터 생성과 소비 작업 분리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>핵심 구성 요소&lt;/td>
&lt;td>이벤트 생성자, 이벤트 채널, 이벤트 처리자&lt;/td>
&lt;td>이벤트 스토어, 이벤트 생성자, 이벤트 소비자&lt;/td>
&lt;td>발행자, 구독자, 메시지 브로커&lt;/td>
&lt;td>프로듀서, 컨슈머, 공유 버퍼(큐)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 흐름&lt;/td>
&lt;td>이벤트 발생 → 채널 → 처리&lt;/td>
&lt;td>이벤트 생성 → 저장 → 재생&lt;/td>
&lt;td>메시지 발행 → 브로커 → 구독자 전달&lt;/td>
&lt;td>데이터 생성 → 버퍼 저장 → 소비&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 사용 사례&lt;/td>
&lt;td>마이크로서비스, IoT, 실시간 분석&lt;/td>
&lt;td>감사, 규정 준수, 복잡한 도메인 모델링&lt;/td>
&lt;td>실시간 알림, 데이터 동기화&lt;/td>
&lt;td>작업 큐, 로그 처리, 스트리밍 데이터&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>장점&lt;/td>
&lt;td>높은 확장성, 반응성&lt;/td>
&lt;td>완전한 감사 추적, 시간 기반 쿼리&lt;/td>
&lt;td>느슨한 결합, 실시간 데이터 처리&lt;/td>
&lt;td>비동기 처리, 부하 분산&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>단점&lt;/td>
&lt;td>시스템 복잡도 증가, 일관성 유지 어려움&lt;/td>
&lt;td>구현 복잡성, 스키마 변경 어려움&lt;/td>
&lt;td>메시지 순서 보장 어려움, 복잡한 디버깅&lt;/td>
&lt;td>버퍼 관리 복잡성, 메모리 사용량 증가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>전체 시스템 확장성 제공&lt;/td>
&lt;td>이벤트 저장소 확장성에 의존&lt;/td>
&lt;td>메시지 브로커 확장성에 의존&lt;/td>
&lt;td>프로듀서와 컨슈머 독립 확장 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 저장&lt;/td>
&lt;td>패턴에 따라 다름&lt;/td>
&lt;td>모든 이벤트 영구 저장&lt;/td>
&lt;td>일시적 저장 또는 즉시 처리&lt;/td>
&lt;td>일시적 버퍼 저장&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>복잡성 수준&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>중간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>상태 관리&lt;/td>
&lt;td>이벤트 기반 상태 변경&lt;/td>
&lt;td>이벤트 기반 상태 재구성&lt;/td>
&lt;td>현재 상태 중심&lt;/td>
&lt;td>현재 상태 중심&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Publisher-Subscriber Pattern Vs Producer-Consumer Pattern&lt;span class="hx-absolute -hx-mt-20" id="publisher-subscriber-pattern-vs-producer-consumer-pattern">&lt;/span>
&lt;a href="#publisher-subscriber-pattern-vs-producer-consumer-pattern" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Producer-Consumer Pattern과 Publisher-Subscriber Pattern은 비동기 통신을 위한 소프트웨어 아키텍처 패턴이지만, 몇 가지 중요한 차이점이 있다:&lt;/p>
&lt;p>Producer-Consumer Pattern과 Publisher-Subscriber Pattern의 주요 차이점을 다음 표로 정리했습니다:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Producer-Consumer Pattern&lt;/th>
&lt;th>Publisher-Subscriber Pattern&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>통신 방식&lt;/td>
&lt;td>일대일 또는 일대다&lt;/td>
&lt;td>일대다&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메시지 처리&lt;/td>
&lt;td>각 메시지는 단일 소비자에 의해 처리&lt;/td>
&lt;td>하나의 메시지가 여러 구독자에 의해 동시에 처리 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결합도&lt;/td>
&lt;td>생산자와 소비자 간의 결합도가 상대적으로 높음&lt;/td>
&lt;td>발행자와 구독자 간의 결합도가 낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메시지 분배&lt;/td>
&lt;td>작업 큐를 통해 메시지 분배&lt;/td>
&lt;td>토픽/채널을 통해 메시지 분배&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>소비자 추가로 처리량 증가, 각 메시지는 하나의 소비자만 처리&lt;/td>
&lt;td>새로운 구독자를 쉽게 추가 가능, 모든 구독자가 메시지를 받을 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용 사례&lt;/td>
&lt;td>작업 큐, 부하 분산, 비동기 처리&lt;/td>
&lt;td>이벤트 기반 아키텍처, 실시간 업데이트, 다중 수신자에게 메시지 브로드캐스팅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메시지 보존&lt;/td>
&lt;td>일반적으로 처리 후 메시지 삭제&lt;/td>
&lt;td>메시지 브로커에 따라 메시지 보존 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡성&lt;/td>
&lt;td>상대적으로 단순&lt;/td>
&lt;td>메시지 필터링, 라우팅 등으로 인해 더 복잡할 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>동기화&lt;/td>
&lt;td>생산자와 소비자 간 동기화 필요&lt;/td>
&lt;td>발행자와 구독자 간 동기화 불필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>백프레셔 관리&lt;/td>
&lt;td>큐 크기 제한으로 백프레셔 관리 가능&lt;/td>
&lt;td>메시지 브로커를 통한 백프레셔 관리&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Event Sourcing Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-sourcing-pattern/</link><pubDate>Wed, 20 Nov 2024 11:17:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-sourcing-pattern/</guid><description>
&lt;h2>Event Sourcing Pattern&lt;span class="hx-absolute -hx-mt-20" id="event-sourcing-pattern">&lt;/span>
&lt;a href="#event-sourcing-pattern" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Event Sourcing Pattern은 데이터 처리와 저장에 대한 접근 방식을 정의하는 아키텍처 패턴으로, 시스템의 상태 변화를 일련의 이벤트로 기록하고 저장하는 방식을 채택한다.&lt;/p>
&lt;p>
&lt;img src="../Event-Sourcing-Pattern_1.webp" alt="Event Sourcing Pattern" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/event-sourcing-pattern/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/event-sourcing-pattern/&lt;/a> _&lt;/p>
&lt;h3>주요 개념&lt;span class="hx-absolute -hx-mt-20" id="주요-개념">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ea%b0%9c%eb%85%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>이벤트 기반 데이터 저장&lt;br>
Event Sourcing은 데이터의 최종 상태만을 저장하는 대신, 모든 변경 사항을 이벤트로 기록한다.&lt;br>
예를 들어, 주문 시스템에서 &amp;ldquo;주문 생성&amp;rdquo;, &amp;ldquo;아이템 추가&amp;rdquo;, &amp;ldquo;주문 완료&amp;rdquo; 등의 이벤트가 순차적으로 저장된다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>이벤트 스토어&lt;br>
모든 이벤트는 추가 전용(append-only) 로그인 이벤트 스토어에 순차적으로 저장된다.&lt;br>
이 스토어는 시스템의 권위 있는 데이터 소스 역할을 한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>상태 재구성&lt;br>
현재 상태가 필요할 때, 시스템은 저장된 이벤트를 순서대로 재생하여 상태를 재구성한다.&lt;br>
이를 통해 시스템의 어느 시점의 상태도 재현할 수 있다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>Event Sourcing Pattern의 주요 특징&lt;span class="hx-absolute -hx-mt-20" id="event-sourcing-pattern의-주요-특징">&lt;/span>
&lt;a href="#event-sourcing-pattern%ec%9d%98-%ec%a3%bc%ec%9a%94-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>불변성과 순차적 저장
Event Sourcing의 핵심 특징은 모든 상태 변화를 불변의 이벤트로 기록한다는 점이다.
이벤트는 시간 순서대로 추가 전용(append-only) 로그에 저장되며, 한 번 저장된 이벤트는 절대 변경되거나 삭제되지 않는다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>상태 재구성
현재 상태는 저장된 이벤트를 순차적으로 재생(replay)하여 얻어진다.
이를 통해 시스템의 어느 시점의 상태도 재현할 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>완전한 감사 추적
모든 변경사항이 이벤트로 기록되기 때문에, 시스템의 전체 히스토리를 정확하게 추적할 수 있다.
이는 감사, 규정 준수, 디버깅에 매우 유용하다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>성능과 확장성
이벤트는 단순히 추가되기만 하므로 쓰기 성능이 우수하며, 수평적 확장이 용이하다.
또한 이벤트 처리를 백그라운드에서 수행할 수 있어 UI 응답성을 향상시킬 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>시스템 복원력
장애 발생 시 이벤트를 재생하여 시스템 상태를 복구할 수 있어 높은 복원력을 제공한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>도메인 중심 설계
이벤트는 비즈니스 도메인의 중요한 변화를 표현하므로, 도메인 주도 설계(DDD)와 잘 어울린다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>유연성과 다양한 뷰
동일한 이벤트 스트림을 사용하여 다양한 뷰나 모델을 생성할 수 있어 유연성이 높다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>이러한 특징들로 인해 Event Sourcing은 복잡한 비즈니스 로직, 높은 감사 요구사항, 실시간 데이터 분석이 필요한 시스템에 특히 유용하다.
그러나 구현의 복잡성과 학습 곡선, 이벤트 스키마 변경의 어려움 등의 단점도 고려해야 한다.&lt;/p>
&lt;h3>구성 요소&lt;span class="hx-absolute -hx-mt-20" id="구성-요소">&lt;/span>
&lt;a href="#%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Event Sourcing Pattern의 주요 구성 요소와 그 역할, 특징은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>이벤트 (Events)&lt;/p>
&lt;ul>
&lt;li>역할: 시스템의 상태 변화를 나타내는 불변의 기록&lt;/li>
&lt;li>특징:
&lt;ul>
&lt;li>과거 시제로 명명 (예: &amp;ldquo;OrderCreated&amp;rdquo;, &amp;ldquo;ItemAdded&amp;rdquo;)&lt;/li>
&lt;li>변경 불가능(immutable)&lt;/li>
&lt;li>시간 순서대로 저장&lt;/li>
&lt;li>상태 변화에 필요한 모든 관련 정보 포함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>이벤트 스토어 (Event Store)&lt;/p>
&lt;ul>
&lt;li>역할: 이벤트를 영구적으로 저장하고 관리하는 데이터 저장소&lt;/li>
&lt;li>특징:
&lt;ul>
&lt;li>추가 전용(append-only) 로그 형태&lt;/li>
&lt;li>이벤트를 시간 순서대로 저장&lt;/li>
&lt;li>이벤트 조회 및 재생 기능 제공&lt;/li>
&lt;li>시스템의 권위 있는 데이터 소스 역할&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>애그리게이트 (Aggregate)&lt;/p>
&lt;ul>
&lt;li>역할: 관련 도메인 객체들을 논리적으로 그룹화하여 일관성 경계를 형성&lt;/li>
&lt;li>특징:
&lt;ul>
&lt;li>명령을 처리하고 이벤트를 생성&lt;/li>
&lt;li>비즈니스 로직과 상태 변경을 캡슐화&lt;/li>
&lt;li>각 애그리게이트는 이벤트 스토어에서 고유한 이벤트 스트림과 연결&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>명령 (Command)&lt;/p>
&lt;ul>
&lt;li>역할: 시스템에 상태 변경을 요청하는 지시&lt;/li>
&lt;li>특징:
&lt;ul>
&lt;li>의도를 표현하는 명령형으로 명명 (예: &amp;ldquo;CreateOrder&amp;rdquo;, &amp;ldquo;AddItem&amp;rdquo;)&lt;/li>
&lt;li>애그리게이트에 의해 처리되어 이벤트 생성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2>프로젝션 (Projection)&lt;span class="hx-absolute -hx-mt-20" id="프로젝션-projection">&lt;/span>
&lt;a href="#%ed%94%84%eb%a1%9c%ec%a0%9d%ec%85%98-projection" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ul>
&lt;li>역할: 이벤트 스트림을 기반으로 현재 상태를 표현하는 읽기 모델 생성&lt;/li>
&lt;li>특징:
&lt;ul>
&lt;li>이벤트를 처리하여 쿼리에 최적화된 뷰 모델 생성&lt;/li>
&lt;li>보고 및 조회를 위한 효율적인 데이터 접근 제공&lt;/li>
&lt;li>CQRS 패턴과 함께 자주 사용됨&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2>이벤트 버스 (Event Bus)&lt;span class="hx-absolute -hx-mt-20" id="이벤트-버스-event-bus">&lt;/span>
&lt;a href="#%ec%9d%b4%eb%b2%a4%ed%8a%b8-%eb%b2%84%ec%8a%a4-event-bus" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ul>
&lt;li>역할: 이벤트를 발행하고 구독하는 메시징 인프라&lt;/li>
&lt;li>특징:
&lt;ul>
&lt;li>이벤트 발행자와 구독자 간의 느슨한 결합 제공&lt;/li>
&lt;li>비동기 이벤트 처리 지원&lt;/li>
&lt;li>시스템 컴포넌트 간 확장성과 유연성 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Event Sourcing Pattern은 이러한 구성 요소들을 통해 시스템의 모든 상태 변화를 순차적인 이벤트로 기록하고, 이를 기반으로 현재 상태를 재구성할 수 있는 아키텍처를 제공한다.&lt;br>
이 패턴은 데이터의 완전한 감사 추적, 시스템 상태의 시간 기반 쿼리, 그리고 복잡한 도메인 모델링에 특히 유용하다.&lt;/p>
&lt;h3>작동 방식&lt;span class="hx-absolute -hx-mt-20" id="작동-방식">&lt;/span>
&lt;a href="#%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>이벤트 캡처&lt;/strong>: 시스템의 모든 변경사항을 이벤트로 기록한다.&lt;/li>
&lt;li>&lt;strong>순차적 저장&lt;/strong>: 이벤트를 발생 순서대로 이벤트 스토어에 저장한다.&lt;/li>
&lt;li>&lt;strong>상태 재구성&lt;/strong>: 필요시 이벤트를 재생하여 현재 상태를 구축한다.&lt;/li>
&lt;li>&lt;strong>새 이벤트 처리&lt;/strong>: 새로운 변경사항이 발생하면 새 이벤트를 생성하고 추가한다.&lt;/li>
&lt;li>&lt;strong>디버깅을 위한 이벤트 재생&lt;/strong>: 문제 해결이나 상태 변화 추적을 위해 이벤트를 재생할 수 있다.&lt;/li>
&lt;/ol>
&lt;p>
&lt;img src="../Event-Sourcing.webp" alt="Event Sourcing" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.perplexity.ai/search/architecture-patternsjung-even-OKzUvT2NR8Cu7LeglzRn8A" target="_blank" rel="noopener">https://www.perplexity.ai/search/architecture-patternsjung-even-OKzUvT2NR8Cu7LeglzRn8A&lt;/a> _&lt;/p>
&lt;h3>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>데이터 무결성&lt;/strong>: 이벤트는 변경 불가능하며 추가만 가능하므로 데이터 무결성이 보장된다.&lt;/li>
&lt;li>&lt;strong>성능 및 확장성&lt;/strong>: 이벤트 처리가 백그라운드에서 이루어져 UI 응답성이 향상된다.&lt;/li>
&lt;li>&lt;strong>완전한 감사 추적&lt;/strong>: 모든 변경사항이 이벤트로 기록되어 완벽한 감사가 가능한다.&lt;/li>
&lt;li>&lt;strong>시스템 복원력&lt;/strong>: 장애 발생 시 이벤트를 재생하여 시스템을 복구할 수 있다.&lt;/li>
&lt;li>&lt;strong>유연성&lt;/strong>: 다양한 유형의 메시지를 저장할 수 있고, 적절한 접근 권한이 있는 모든 소비자가 이벤트 스토어에 접근할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>단점&lt;span class="hx-absolute -hx-mt-20" id="단점">&lt;/span>
&lt;a href="#%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>복잡성&lt;/strong>: 전통적인 CRUD 모델에 비해 구현과 이해가 더 복잡할 수 있다.&lt;/li>
&lt;li>&lt;strong>이벤트 스키마 변경&lt;/strong>: 이벤트 구조 변경 시 기존 이벤트와의 호환성 문제가 발생할 수 있다.&lt;/li>
&lt;li>&lt;strong>쿼리 성능&lt;/strong>: 현재 상태를 얻기 위해 많은 이벤트를 처리해야 할 수 있어 쿼리 성능이 저하될 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>사용 사례&lt;span class="hx-absolute -hx-mt-20" id="사용-사례">&lt;/span>
&lt;a href="#%ec%82%ac%ec%9a%a9-%ec%82%ac%eb%a1%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Event Sourcing은 금융, 물류, 의료, 소매, 정부, 운송, 비디오 게임 개발 등 다양한 분야에서 활용된다.&lt;br>
특히 다음과 같은 상황에서 유용하다:&lt;/p>
&lt;ul>
&lt;li>복잡한 도메인 모델링이 필요한 경우&lt;/li>
&lt;li>감사, 규정 준수, 보안이 중요한 시스템&lt;/li>
&lt;li>실시간 데이터 분석이 필요한 경우&lt;/li>
&lt;li>마이크로서비스 아키텍처에서 데이터 일관성 유지가 필요한 경우&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>