<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Socket</title><link>https://buenhyden.github.io/tags/socket/</link><description>Recent content in Socket on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 05 Jan 2025 16:30:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/socket/index.xml" rel="self" type="application/rss+xml"/><item><title>소켓(Socket)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/socket/</link><pubDate>Sun, 05 Jan 2025 16:30:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/socket/</guid><description>
&lt;h2>소켓(Socket)&lt;span class="hx-absolute -hx-mt-20" id="소켓socket">&lt;/span>
&lt;a href="#%ec%86%8c%ec%bc%93socket" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>소켓은 네트워크 상에서 수행되는 두 프로그램 간의 양방향 통신 링크의 한쪽 끝 단을 의미한다.&lt;br>
소켓은 프로세스가 네트워크를 통해 데이터를 송수신하기 위한 실제적인 창구 역할을 한다.&lt;br>
운영체제는 소켓을 통해 네트워크 통신을 위한 인터페이스를 제공한다.&lt;/p>
&lt;h3>소켓의 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="소켓의-구성-요소">&lt;/span>
&lt;a href="#%ec%86%8c%ec%bc%93%ec%9d%98-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>소켓은 다음 세 가지 요소로 구성된다:&lt;/p>
&lt;ol>
&lt;li>프로토콜: 데이터 전송을 위한 표준 집합 규칙 (예: TCP/IP, UDP/IP)&lt;/li>
&lt;li>IP 주소: 서버 또는 클라이언트의 주소&lt;/li>
&lt;li>포트 번호: 통신을 사용하는 애플리케이션을 식별하는 번호&lt;/li>
&lt;/ol>
&lt;h3>소켓의 특징&lt;span class="hx-absolute -hx-mt-20" id="소켓의-특징">&lt;/span>
&lt;a href="#%ec%86%8c%ec%bc%93%ec%9d%98-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>프로토콜, IP 주소, 포트 번호로 정의된다.&lt;/li>
&lt;li>서버 소켓과 클라이언트 소켓으로 구분된다.&lt;/li>
&lt;li>실시간 데이터 전송에 적합하다.&lt;/li>
&lt;/ul>
&lt;h3>소켓 통신의 장점&lt;span class="hx-absolute -hx-mt-20" id="소켓-통신의-장점">&lt;/span>
&lt;a href="#%ec%86%8c%ec%bc%93-%ed%86%b5%ec%8b%a0%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>실시간 양방향 통신이 가능하다.&lt;/li>
&lt;li>서버와 클라이언트 간 지속적인 연결을 유지할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3>소켓 통신의 단점&lt;span class="hx-absolute -hx-mt-20" id="소켓-통신의-단점">&lt;/span>
&lt;a href="#%ec%86%8c%ec%bc%93-%ed%86%b5%ec%8b%a0%ec%9d%98-%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>HTTP 통신에 비해 구현이 복잡할 수 있다.&lt;/li>
&lt;li>지속적인 연결 유지로 인한 리소스 소비가 있을 수 있다.&lt;/li>
&lt;/ul>
&lt;h3>소켓의 종류&lt;span class="hx-absolute -hx-mt-20" id="소켓의-종류">&lt;/span>
&lt;a href="#%ec%86%8c%ec%bc%93%ec%9d%98-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>소켓은 크게 두 가지 유형으로 나눌 수 있다:&lt;/p>
&lt;ol>
&lt;li>스트림 소켓(SOCK_STREAM)
&lt;ul>
&lt;li>TCP를 사용하는 연결 지향형 소켓&lt;/li>
&lt;li>연결 지향적이며 양방향으로 바이트 스트림을 전송한다.&lt;/li>
&lt;li>오류 수정, 전송 처리, 흐름 제어를 보장한다.&lt;/li>
&lt;li>데이터의 경계가 없는 바이트 스트림 서비스를 제공한다.&lt;/li>
&lt;li>웹 서버, 데이터베이스 연결 등에 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터그램 소켓(SOCK_DGRAM)
&lt;ul>
&lt;li>UDP를 사용하는 비연결형 소켓&lt;/li>
&lt;li>비연결형 소켓이다.&lt;/li>
&lt;li>데이터의 크기에 제한이 있으며, 전달이 보장되지 않는다.&lt;/li>
&lt;li>데이터 경계를 구분하는 데이터그램 서비스를 제공한다.&lt;/li>
&lt;li>실시간 스트리밍, 게임 등에 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>소켓 통신의 기본 흐름&lt;span class="hx-absolute -hx-mt-20" id="소켓-통신의-기본-흐름">&lt;/span>
&lt;a href="#%ec%86%8c%ec%bc%93-%ed%86%b5%ec%8b%a0%ec%9d%98-%ea%b8%b0%eb%b3%b8-%ed%9d%90%eb%a6%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>서버와 클라이언트 간의 연결이 성립되면 양방향으로 데이터 통신이 가능하다.&lt;/li>
&lt;li>TCP 연결의 경우, 연결 요청 시 3-way handshake 과정이 진행된다.&lt;/li>
&lt;li>서버는 여러 클라이언트의 연결 요청을 처리하기 위해 대기열(queue)을 만들어 관리한다.&lt;/li>
&lt;li>실제 데이터 송수신은 accept() 함수로 생성된 새로운 소켓을 통해 이루어진다.&lt;/li>
&lt;/ul>
&lt;p>이러한 기본 흐름을 통해 소켓은 네트워크 상에서 프로세스 간 통신의 종착점 역할을 하며, 전송 계층과 응용 프로그램 사이의 인터페이스로 작동한다.&lt;/p>
&lt;p>소켓 통신의 기본 흐름은 서버와 클라이언트 간의 상호작용으로 이루어진다. :&lt;/p>
&lt;ul>
&lt;li>
&lt;p>서버 측 흐름&lt;/p>
&lt;ol>
&lt;li>소켓 생성: socket() 함수를 사용하여 소켓을 생성한다.&lt;/li>
&lt;li>바인딩: bind() 함수로 소켓에 IP 주소와 포트 번호를 할당한다.&lt;/li>
&lt;li>연결 대기: listen() 함수를 호출하여 클라이언트의 연결 요청을 기다린다.&lt;/li>
&lt;li>연결 수락: accept() 함수로 클라이언트의 연결 요청을 수락한다. 이 때 새로운 소켓이 생성되어 클라이언트와의 통신에 사용된다.&lt;/li>
&lt;li>데이터 송수신: send()/recv() 함수를 사용하여 클라이언트와 데이터를 주고받는다.&lt;/li>
&lt;li>연결 종료: close() 함수로 소켓을 닫는다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>클라이언트 측 흐름&lt;/p>
&lt;ol>
&lt;li>소켓 생성: socket() 함수를 사용하여 소켓을 생성한다.&lt;/li>
&lt;li>연결 요청: connect() 함수를 호출하여 서버에 연결을 요청한다.&lt;/li>
&lt;li>데이터 송수신: send()/recv() 함수를 사용하여 서버와 데이터를 주고받는다.&lt;/li>
&lt;li>연결 종료: close() 함수로 소켓을 닫는다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>TCP 소켓의 경우:&lt;/p>
&lt;ol>
&lt;li>서버 소켓 생성&lt;/li>
&lt;li>서버 소켓 바인딩 (IP주소와 포트번호 할당)&lt;/li>
&lt;li>연결 대기 (Listen)&lt;/li>
&lt;li>클라이언트의 연결 요청 수락 (Accept)&lt;/li>
&lt;li>데이터 송수신&lt;/li>
&lt;li>연결 종료&lt;/li>
&lt;/ol>
&lt;p>UDP 소켓의 경우:&lt;/p>
&lt;ol>
&lt;li>소켓 생성&lt;/li>
&lt;li>소켓 바인딩&lt;/li>
&lt;li>데이터 송수신&lt;/li>
&lt;li>소켓 종료&lt;/li>
&lt;/ol>
&lt;h3>주요 소켓 함수&lt;span class="hx-absolute -hx-mt-20" id="주요-소켓-함수">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ec%86%8c%ec%bc%93-%ed%95%a8%ec%88%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>소켓의 작동 방식에서 각 함수는 다음과 같은 역할을 수행한다:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>서버 측 함수&lt;/p>
&lt;ol>
&lt;li>socket(): 소켓을 생성한다. 통신의 첫 단계로, 네트워크 통신을 위한 엔드포인트를 만든다.&lt;/li>
&lt;li>bind(): 생성된 소켓에 IP 주소와 포트 번호를 할당한다. 이를 통해 특정 주소와 포트에서 들어오는 연결을 수신할 수 있게 된다.&lt;/li>
&lt;li>listen(): 클라이언트의 연결 요청을 대기하는 상태로 소켓을 변경한다. 연결 요청을 수신할 준비가 되었음을 나타낸다.&lt;/li>
&lt;li>accept(): 클라이언트의 연결 요청을 수락한다. 새로운 소켓을 생성하여 클라이언트와의 통신에 사용한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>클라이언트 측 함수&lt;/p>
&lt;ol>
&lt;li>socket(): 서버와 마찬가지로 소켓을 생성한다.&lt;/li>
&lt;li>connect(): 서버에 연결을 요청한다. 서버의 IP 주소와 포트 번호를 지정하여 연결을 시도한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>공통 함수&lt;/p>
&lt;ol>
&lt;li>send()/recv(): 데이터를 송수신한다. 연결된 소켓을 통해 실제 데이터 통신이 이루어진다.&lt;/li>
&lt;li>close(): 소켓을 닫는다. 통신이 완료되면 소켓을 종료하여 리소스를 해제한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>이러한 함수들의 호출 순서와 역할을 통해 소켓은 네트워크 상에서 두 프로그램 간의 양방향 통신을 가능하게 한다.&lt;br>
서버는 연결을 수신하고 관리하는 역할을, 클라이언트는 연결을 요청하고 데이터를 교환하는 역할을 수행한다.&lt;/p>
&lt;h4>소켓의 작동 방식과 함수 호출 과정&lt;span class="hx-absolute -hx-mt-20" id="소켓의-작동-방식과-함수-호출-과정">&lt;/span>
&lt;a href="#%ec%86%8c%ec%bc%93%ec%9d%98-%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d%ea%b3%bc-%ed%95%a8%ec%88%98-%ed%98%b8%ec%b6%9c-%ea%b3%bc%ec%a0%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>호출 과정:&lt;/p>
&lt;ol>
&lt;li>서버는 socket() → bind() → listen() 순으로 초기화&lt;/li>
&lt;li>클라이언트는 socket() → connect() 로 연결 시도&lt;/li>
&lt;li>서버는 accept()로 연결 수락&lt;/li>
&lt;li>send()/recv() 를 통한 양방향 통신&lt;/li>
&lt;li>close()로 연결 종료&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>