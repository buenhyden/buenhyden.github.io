<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Event-Driven-Architecture on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/event-driven-architecture/</link>
    <description>Recent content in Event-Driven-Architecture on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Mon, 23 Jun 2025 12:02:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/event-driven-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Message-Driven vs. Event-Driven Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles/messaging-oriented-architecture/message-driven-vs-event-driven-architecture/</link>
      <pubDate>Mon, 23 Jun 2025 12:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles/messaging-oriented-architecture/message-driven-vs-event-driven-architecture/</guid>
      <description>메시지 기반 아키텍처 (Message-Driven Architecture, MDA) 와 이벤트 기반 아키텍처 (Event-Driven Architecture, EDA) 는 시스템 간의 통신 및 동작 연결 방식에서 핵심적인 패러다임이다. 메시지 - 기반은 직접적 명령과 데이터 전달에 집중하며, 이벤트 - 기반은 상태 변화와 그에 대한 반응에 중점을 둔다. 각각의 방식은 구조적 장점과 단점이 명확하므로 실무에서 상황에 맞는 선택이 필요하다.</description>
    </item>
    <item>
      <title>Messaging Systems</title>
      <link>https://buenhyden.github.io/posts/system-design/distributed-systems/message-oriented-systems/message-processing-systems/messaging-systems/</link>
      <pubDate>Tue, 22 Apr 2025 13:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/distributed-systems/message-oriented-systems/message-processing-systems/messaging-systems/</guid>
      <description>메시징 시스템은 분산 애플리케이션의 구성 요소 간 비동기 통신을 지원하여 결합도를 낮추고, 신뢰성·확장성·유연성을 제공합니다. 메시지 큐, 이벤트 스트리밍, 태스크 큐 등 다양한 형태가 존재하며, 실시간 데이터 처리, 작업 분산, 장애 복원력 등 다양한 요구에 대응한다.</description>
    </item>
    <item>
      <title>Event-Driven Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles/messaging-oriented-architecture/event-driven-architecture/</link>
      <pubDate>Sat, 01 Feb 2025 03:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles/messaging-oriented-architecture/event-driven-architecture/</guid>
      <description>Event‑Driven Architecture 는 시스템 내부에서 상태 변화나 이벤트를 생성, 브로커를 통해 비동기 전파하고, 이를 구독하는 소비자들이 반응하도록 설계된 아키텍처로, 느슨한 결합, 독립적 확장, 실시간 응답성, 내결함성, 및 유연성을 제공하여 복잡하고 분산된 환경에서 효과적인 구조이다.</description>
    </item>
  </channel>
</rss>
