<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Networking-and-Communications :: Tag :: hyunyoun's Blog</title><link>https://buenhyden.github.io/tags/networking-and-communications.html</link><description/><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Tue, 14 Jan 2025 09:19:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/networking-and-communications/index.xml" rel="self" type="application/rss+xml"/><item><title>TCP/IP 4 Layers - 1. Network Access Layer</title><link>https://buenhyden.github.io/posts/networking-and-communications/tcp-ip-4-layers/tcpip-4-layers-1-network-access-layer.html</link><pubDate>Fri, 27 Sep 2024 05:57:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/tcp-ip-4-layers/tcpip-4-layers-1-network-access-layer.html</guid><description>데이터를 전송 매체에 맞게 포맷팅하고 물리적 하드웨어 주소를 기반으로 데이터를 주소 지정한다</description></item><item><title>OSI 7 Layers and TCPIP 4 Layers</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers-and-tcpip-4-layers.html</link><pubDate>Fri, 27 Sep 2024 02:11:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers-and-tcpip-4-layers.html</guid><description>OSI 7계층은 네트워크 통신의 표준 참조 모델이며, TCP/IP 4계층은 이를 바탕으로 구현된 실제 인터넷 통신의 기반이 된다.</description></item><item><title>OSI 7 Layers - 1. Phygical Layer</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/osi-7-layers-1-phygical-layer.html</link><pubDate>Wed, 25 Sep 2024 07:18:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/osi-7-layers-1-phygical-layer.html</guid><description>OSI 7계층의 가장 첫 번째 계층으로, 실제 데이터가 전기 신호나 빛으로 변환되어 전송되는 곳</description></item><item><title>TCP/IP 4계층 - 2. Internet Layer</title><link>https://buenhyden.github.io/posts/networking-and-communications/tcp-ip-4-layers/tcpip-4-layers-2-internet-layer.html</link><pubDate>Fri, 27 Sep 2024 05:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/tcp-ip-4-layers/tcpip-4-layers-2-internet-layer.html</guid><description>인터넷 계층은 TCP/IP 프로토콜 스택에서 네트워크 간의 통신을 담당하는 핵심 계층으로, 네트워크 간 데이터 전송을 담당하며, 데이터 패킷이 출발지에서 목적지까지 효율적으로 전달되도록 라우팅과 주소 지정(Addressing)을 수행한다.</description></item><item><title>OSI 7 Layers - 2. DataLink Layer</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/osi-7-layers-2-datalink-layer.html</link><pubDate>Wed, 25 Sep 2024 07:17:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/osi-7-layers-2-datalink-layer.html</guid><description>OSI 7계층에서 두 번째 계층으로, 직접 연결된 두 장치 간의 안전한 데이터 전송을 담당</description></item><item><title>Network Layer - OSI 7 계층</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers.html</link><pubDate>Wed, 25 Sep 2024 02:03:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers.html</guid><description>표준 프로토콜을 사용하여 다양한 통신 시스템이 통신할 수 있도록 국제표준화기구(ISO)에서 만든 개념 모델</description></item><item><title>TCP/IP 4계층 - 3. Transport Layer</title><link>https://buenhyden.github.io/posts/networking-and-communications/tcp-ip-4-layers/tcpip-4-layers-3-transport-layer.html</link><pubDate>Fri, 27 Sep 2024 05:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/tcp-ip-4-layers/tcpip-4-layers-3-transport-layer.html</guid><description>전송 계층은 서로 다른 호스트에서 동작하는 애플리케이션 프로세스 간의 논리적 통신을 제공한다.</description></item><item><title>Network Layer - TCP/IP 4 Layers</title><link>https://buenhyden.github.io/posts/networking-and-communications/tcp-ip-4-layers.html</link><pubDate>Thu, 26 Sep 2024 02:03:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/tcp-ip-4-layers.html</guid><description>인터넷 프로토콜 스위트의 구조를 설명하는 계층화된 모델.</description></item><item><title>OSI 7 Layers - 3. Network Layer</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/network-layer.html</link><pubDate>Wed, 25 Sep 2024 07:17:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/network-layer.html</guid><description>3계층으로, 서로 다른 네트워크 간의 데이터 전송을 담당</description></item><item><title>Network Traffic</title><link>https://buenhyden.github.io/posts/networking-and-communications/network-traffic.html</link><pubDate>Tue, 15 Oct 2024 02:43:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/network-traffic.html</guid><description>네트워크 트래픽은 컴퓨터 네트워크를 통해 이동하는 데이터의 양을 의미한다.</description></item><item><title>TCP/IP 4계층 - 4. Application Layer</title><link>https://buenhyden.github.io/posts/networking-and-communications/tcp-ip-4-layers/tcpip-4-layers-4-application-layer.html</link><pubDate>Fri, 27 Sep 2024 05:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/tcp-ip-4-layers/tcpip-4-layers-4-application-layer.html</guid><description>TCP/IP 프로토콜 스택에서 가장 상위 계층으로, 사용자와 가장 가까운 계층으로 이메일, 웹 서핑, 파일 전송 등의 서비스를 위한 프로토콜들이 모여 있는 계층이다.</description></item><item><title>OSI 7 Layers - 4. Transport Layer</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/osi-7-layers-4-transport-layer.html</link><pubDate>Wed, 25 Sep 2024 07:17:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/osi-7-layers-4-transport-layer.html</guid><description>4번째 계층으로, 데이터 전송의 신뢰성과 효율성을 담당하는 중요한 역할을 한다</description></item><item><title>APIs</title><link>https://buenhyden.github.io/posts/networking-and-communications/apis.html</link><pubDate>Sat, 05 Oct 2024 17:42:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/apis.html</guid><description>소프트웨어 애플리케이션 간의 통신을 가능하게 하는 중요한 도구</description></item><item><title>OSI 7 Layers - 5. Session Layer</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/osi-7-layers-5-session-layer.html</link><pubDate>Wed, 25 Sep 2024 07:17:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/osi-7-layers-5-session-layer.html</guid><description>세션 계층은 OSI 모델의 5번째 계층으로, 통신 세션을 구성하는 계층으로 응용 프로그램 간의 대화를 유지하기 위한 구조를 제공하고, 프로세스들의 논리적인 연결을 담당한다.</description></item><item><title>Network Protocol</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol.html</link><pubDate>Wed, 02 Oct 2024 02:03:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol.html</guid><description>컴퓨터나 원거리 통신 장비 사이에서 메시지를 주고 받는 양식과 규칙의 체계로 신호 체계, 인증, 그리고 오류 감지 및 수정 기능을 포함한다.</description></item><item><title>OSI 7 Layers - 6. Presentation Layer</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/osi-7-layers-6-presentation-layer.html</link><pubDate>Wed, 25 Sep 2024 07:17:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/osi-7-layers-6-presentation-layer.html</guid><description>OSI 7계층 모델에서 6번째 계층으로, 데이터의 표현과 암호화를 담당하는 중요한 역할을 한다.</description></item><item><title>OSI 7 Layers - 7. Application Layer</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/osi-7-layers-7-application-layer.html</link><pubDate>Wed, 25 Sep 2024 07:16:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/osi-7-layers-7-application-layer.html</guid><description>OSI 7계층 모델에서 최상위 계층으로, 사용자와 네트워크 간의 직접적인 상호작용을 담당한다</description></item><item><title>Websocket vs WebRTC</title><link>https://buenhyden.github.io/til/2024/10/websocket-vs-webrtc.html</link><pubDate>Tue, 08 Oct 2024 05:53:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/til/2024/10/websocket-vs-webrtc.html</guid><description>WebSocket과 WebRTC는 실시간 웹 통신을 위한 중요한 기술</description></item><item><title>Webhook vs Server-Sent Events</title><link>https://buenhyden.github.io/til/2024/12/webhook-vs-server-sent-events.html</link><pubDate>Fri, 20 Dec 2024 06:04:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/til/2024/12/webhook-vs-server-sent-events.html</guid><description>Webhook과 Server-Sent Events(SSE)는 실시간 데이터 전송을 위한 웹 기술이다.</description></item><item><title>Network Hop</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/network-layer/network-hop.html</link><pubDate>Tue, 14 Jan 2025 09:19:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/network-layer/network-hop.html</guid><description>네트워크 홉(Network Hop)은 데이터 패킷이 출발지에서 목적지로 이동하는 과정에서 거치는 네트워크 장비(주로 라우터)의 횟수를 의미한다.</description></item><item><title>프래그먼테이션 (Fragmentation)</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/network-layer/fragmentation.html</link><pubDate>Sun, 05 Jan 2025 02:40:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/network-layer/fragmentation.html</guid><description>Fragmentation은 큰 데이터 패킷을 네트워크의 최대 전송 단위(Maximum Transmission Unit, MTU)보다 작은 조각으로 나누는 과정이다.</description></item><item><title>SSH (Secure Shell)</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/ssh.html</link><pubDate>Mon, 23 Dec 2024 12:35:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/ssh.html</guid><description>SSH는 네트워크 상의 다른 컴퓨터에 안전하게 접속하기 위한 암호화 네트워크 프로토콜.</description></item><item><title>웹훅 (Webhook)</title><link>https://buenhyden.github.io/posts/networking-and-communications/apis/webhook.html</link><pubDate>Fri, 20 Dec 2024 06:46:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/apis/webhook.html</guid><description>웹훅은 웹 애플리케이션에서 특정 이벤트가 발생했을 때 다른 애플리케이션에 실시간으로 정보를 전달하는 방법이다.</description></item><item><title>RESTful API vs GraphQL API vs Webhook vs Server-sent Events vs Websocket vs WebRTC</title><link>https://buenhyden.github.io/til/2024/12/restful-api-vs-graphql-api-vs-webhook-vs-server-sent-events-vs-websocket-vs-webrtc.html</link><pubDate>Fri, 20 Dec 2024 06:08:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/til/2024/12/restful-api-vs-graphql-api-vs-webhook-vs-server-sent-events-vs-websocket-vs-webrtc.html</guid><description>API의 여러 유형인 RESTful API, GraphQL API, Webhook, Server-sent Events, WebSocket, WebRTC에 대해 정리하고 비교 분석</description></item><item><title>Streaming vs Polling</title><link>https://buenhyden.github.io/til/2024/12/streaming-vs-polling.html</link><pubDate>Tue, 17 Dec 2024 08:44:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/til/2024/12/streaming-vs-polling.html</guid><description>Streaming과 polling은 실시간 데이터 전송을 위해 사용되는 두 가지 주요 기술</description></item><item><title>RDMA</title><link>https://buenhyden.github.io/posts/networking-and-communications/rdma.html</link><pubDate>Tue, 10 Dec 2024 01:36:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/rdma.html</guid><description>네트워크 상의 한 컴퓨터에서 다른 컴퓨터의 메모리에 직접 접근할 수 있게 해주는 기술로, CPU의 개입 없이 데이터를 전송할 수 있는 고성능 네트워크 기술</description></item><item><title>hop</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/network-layer/hop.html</link><pubDate>Fri, 06 Dec 2024 10:26:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/network-layer/hop.html</guid><description>네트워크 계층에서 hop은 데이터 패킷이 출발지에서 목적지로 이동하는 과정에서 거치는 각각의 네트워크 장치를 의미한다.</description></item><item><title>Packet</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/network-layer/packet.html</link><pubDate>Fri, 06 Dec 2024 10:18:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/network-layer/packet.html</guid><description>패킷(Packet)은 네트워크를 통해 전송되는 데이터의 기본 단위</description></item><item><title>Server sent Events</title><link>https://buenhyden.github.io/posts/networking-and-communications/apis/server-sent-events.html</link><pubDate>Sat, 30 Nov 2024 06:18:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/apis/server-sent-events.html</guid><description>SSE는 서버가 클라이언트로 단방향 실시간 이벤트 스트림을 전송할 수 있게 해주는 웹 기술</description></item><item><title>API Gateway</title><link>https://buenhyden.github.io/til/2024/11/api-gateway.html</link><pubDate>Tue, 26 Nov 2024 09:40:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/til/2024/11/api-gateway.html</guid><description>클라이언트와 백엔드 서비스 사이에서 중개자 역할을 하는 서버로, 여러 마이크로서비스나 백엔드 시스템에 대한 단일 진입점을 제공하는 중요한 컴포넌트</description></item><item><title>멱등성 (Idempotency)</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/idempotency.html</link><pubDate>Mon, 14 Oct 2024 16:31:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/idempotency.html</guid><description>일한 동요청을 여러 번 수행해도 시스템의 상태가 한 번 수행한 것과 동일한 결과를 보장하는 속성</description></item><item><title>안전한 메서드 (Safe Methods)</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/safe-methods.html</link><pubDate>Mon, 14 Oct 2024 16:31:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/safe-methods.html</guid><description>서버의 상태를 변경하지 않는 HTTP 메서드</description></item><item><title>Routing</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/network-layer/routing.html</link><pubDate>Mon, 14 Oct 2024 10:18:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/network-layer/routing.html</guid><description>데이터 패킷이 출발지에서 목적지까지 가장 효율적인 경로로 전달되도록 하는 과정.</description></item><item><title>멱등성 (Idempotency)과 안전한 메서드 (Safe Methods)의 비교</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/idempotency-and-safe-methods.html</link><pubDate>Mon, 14 Oct 2024 00:49:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/idempotency-and-safe-methods.html</guid><description>멱등성과 안전한 메서드는 HTTP 메서드의 중요한 특성으로, 서버의 상태 변화와 관련이 있다.</description></item><item><title>CORS</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/cors.html</link><pubDate>Tue, 08 Oct 2024 07:13:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/cors.html</guid><description>다른 출처(Origin)의 리소스를 공유하기 위한 보안 메커니즘</description></item><item><title>Cookies</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/cookies.html</link><pubDate>Tue, 08 Oct 2024 07:12:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/cookies.html</guid><description>웹사이트가 사용자의 브라우저에 저장하는 작은 텍스트 파일</description></item><item><title>HTTP Cache</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/http-cache.html</link><pubDate>Tue, 08 Oct 2024 07:11:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/http-cache.html</guid><description>웹 브라우저나 서버에서 데이터를 임시 저장하는 기술</description></item><item><title>WebSocket API</title><link>https://buenhyden.github.io/posts/networking-and-communications/apis/websocket-api.html</link><pubDate>Tue, 08 Oct 2024 05:37:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/apis/websocket-api.html</guid><description>WebSocket API는 WebSocket 프로토콜을 사용하여 클라이언트와 서버 간의 양방향, 실시간 통신을 가능하게 하는 웹 API이다.</description></item><item><title>WebSocket</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/websocket.html</link><pubDate>Tue, 08 Oct 2024 04:24:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/websocket.html</guid><description>웹 환경에서 클라이언트와 서버 간의 실시간 양방향 통신을 가능하게 하는 프로토콜</description></item><item><title>HTTP Headers</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/http-headers.html</link><pubDate>Mon, 07 Oct 2024 07:09:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/http-headers.html</guid><description>HTTP 요청이나 응답에서 전달할 부가적인 정보를 담는 데이터</description></item><item><title>HTTP Request Methods</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/http-request-methods.html</link><pubDate>Mon, 07 Oct 2024 07:07:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/http-request-methods.html</guid><description>클라이언트가 서버에 특정 작업을 요청하기 위해 사용하는 방식</description></item><item><title>HTTP Status Code</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/http-status-code.html</link><pubDate>Mon, 07 Oct 2024 07:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/http-status-code.html</guid><description>서버가 클라이언트의 요청에 대한 응답 상태를 나타내는 3자리 숫자.</description></item><item><title>URI</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/uri.html</link><pubDate>Mon, 07 Oct 2024 04:44:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/http/uri.html</guid><description>인터넷 상의 자원을 고유하게 식별하기 위한 문자열로 URL과 URN은 모두 URI의 하위 개념이라고 볼 수 있다.</description></item><item><title>DNS 캐싱 (DNS Caching)</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/dns/dns-caching.html</link><pubDate>Sun, 06 Oct 2024 07:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/dns/dns-caching.html</guid><description>DNS 캐싱은 이전에 조회한 도메인 이름과 IP 주소의 매핑 정보를 임시로 저장하는 메커니즘이다.</description></item><item><title>DNS Records</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/dns/dns-records.html</link><pubDate>Sun, 06 Oct 2024 07:26:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/dns/dns-records.html</guid><description>DNS Records는 도메인 이름 시스템(DNS)에서 사용되는 데이터 구조로, 도메인과 관련된 다양한 정보를 저장한다.</description></item><item><title>DNS(Domain Name System)</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/dns.html</link><pubDate>Sun, 06 Oct 2024 02:03:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/dns.html</guid><description>도메인은 인터넷 상의 주소 체계를 의미하며, 웹사이트나 네트워크 리소스를 식별하는 고유한 이름이며, dns는 특정 컴퓨터(또는 네트워크로 연결된 임의의 장치)의 주소를 찾기 위해, 사람이 이해하기 쉬운 호스트 이름(예: www.example.com)을 실제 네트워크 상에서 사용하는 IP주소(예: 192.168.1.1)로 변환하고 해당 IP 주소로 접속하는 일련의 시스템</description></item><item><title>Domain</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/dns/domain.html</link><pubDate>Sun, 06 Oct 2024 02:03:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/dns/domain.html</guid><description>도메인(Domain)은 인터넷 상의 계층적 주소 체계로, 사용자가 이해하기 쉬운 형태의 웹사이트 주소를 제공한다.</description></item><item><title>SSL and TLS</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/ssl-and-tls.html</link><pubDate>Sat, 05 Oct 2024 08:48:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/ssl-and-tls.html</guid><description>인터넷 상에서 데이터를 안전하게 전송하기 위한 암호화 프로토콜.</description></item><item><title>HTTP (HyperText Transfer Protocol) / HTTPS (HyperText Transfer Protocol Secure)</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/http.html</link><pubDate>Sat, 05 Oct 2024 02:03:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/http.html</guid><description>웹 브라우저와 웹 서버 간의 통신을 위한 프로토콜로, 클라이언트-서버 모델을 기반으로 작동한다</description></item><item><title>서브넷팅 (Subnetting)</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/ip/subnetting.html</link><pubDate>Fri, 04 Oct 2024 13:09:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/ip/subnetting.html</guid><description>서브넷팅(Subnetting)은 네트워크를 더 작은 단위의 네트워크로 분할하는 기술로 IP 주소의 효율적인 사용과 네트워크 관리를 개선하기 위해 사용된다.</description></item><item><title>네트워크 주소 변환 (NAT, Network Address Translation)</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/ip/nat.html</link><pubDate>Fri, 04 Oct 2024 13:07:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/ip/nat.html</guid><description>네트워크 주소 변환(NAT, Network Address Translation)은 IP 패킷의 TCP/UDP 포트 번호와 소스 및 목적지의 IP 주소를 재기록하면서 라우터를 통해 네트워크 트래픽을 주고받는 기술이다.</description></item><item><title>CIDR (Classless Inter-Domain Routing)</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/ip/cidr.html</link><pubDate>Fri, 04 Oct 2024 11:51:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/ip/cidr.html</guid><description>CIDR는 도메인 간 라우팅에 사용되는 인터넷 주소를 기존의 IP 주소 클래스 체계보다 더 유연하게 할당하고 지정하는 방식</description></item><item><title>IP Delivery Modes</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/ip/ip-delivery-modes.html</link><pubDate>Fri, 04 Oct 2024 07:37:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/ip/ip-delivery-modes.html</guid><description>네트워크에서 데이터를 전송하는 다양한 방식.</description></item><item><title>IP(Internet Protocol)</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/ip.html</link><pubDate>Fri, 04 Oct 2024 02:03:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/ip.html</guid><description>데이터 패킷이 네트워크를 통해 이동하고 올바른 대상에 도착할 수 있도록 데이터 패킷을 라우팅하고 주소를 지정하기 위한 프로토콜 또는 규칙의 집합</description></item><item><title>HATEOAS (Hypermedia As The Engine Of Application State)</title><link>https://buenhyden.github.io/posts/networking-and-communications/apis/hateoas.html</link><pubDate>Thu, 03 Oct 2024 07:35:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/apis/hateoas.html</guid><description>RESTful API 설계의 중요한 개념으로, 클라이언트와 서버 간의 동적이고 유연한 상호작용을 가능하게 하는 방식.</description></item><item><title>WebRTC(Web Real-Time Communication) API</title><link>https://buenhyden.github.io/posts/networking-and-communications/apis/webrtc-api.html</link><pubDate>Thu, 03 Oct 2024 06:37:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/apis/webrtc-api.html</guid><description>WebRTC(Web Real-Time Communication) API는 웹 브라우저 간에 플러그인 없이 실시간 통신을 가능하게 하는 기술.</description></item><item><title>GraphQL API</title><link>https://buenhyden.github.io/posts/networking-and-communications/apis/graphql-api.html</link><pubDate>Thu, 03 Oct 2024 03:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/apis/graphql-api.html</guid><description>API를 위한 쿼리 언어이자 서버 측 런타임으로, 클라이언트가 필요한 데이터를 정확하게 요청하고 받을 수 있게 해주는 강력한 도구</description></item><item><title>gRPC API</title><link>https://buenhyden.github.io/posts/networking-and-communications/apis/grpc-api.html</link><pubDate>Thu, 03 Oct 2024 03:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/apis/grpc-api.html</guid><description>Google에서 개발한 오픈소스 원격 프로시저 호출(RPC) 시스템</description></item><item><title>RESTful API</title><link>https://buenhyden.github.io/posts/networking-and-communications/apis/restful-api.html</link><pubDate>Thu, 03 Oct 2024 03:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/apis/restful-api.html</guid><description>웹 서비스를 설계하고 구현하기 위한 아키텍처 스타일</description></item><item><title>SOAP API</title><link>https://buenhyden.github.io/posts/networking-and-communications/apis/soap-api.html</link><pubDate>Thu, 03 Oct 2024 03:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/apis/soap-api.html</guid><description>SOAP(Simple Object Access Protocol) API는 XML 기반의 메시지 교환 프로토콜</description></item><item><title>Media Access Control Address (MAC Address)</title><link>https://buenhyden.github.io/posts/networking-and-communications/media-access-control-address.html</link><pubDate>Wed, 02 Oct 2024 12:19:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/media-access-control-address.html</guid><description>네트워크 장비를 식별하기 위한 고유한 하드웨어 주소</description></item><item><title>TCP</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/tcp.html</link><pubDate>Wed, 02 Oct 2024 04:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/tcp.html</guid><description>TCP는 연결 지향적이며, 신뢰성 있는 데이터 전송을 보장하는 전송 계층 프로토콜</description></item><item><title>UDP</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/udp.html</link><pubDate>Wed, 02 Oct 2024 04:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/udp.html</guid><description>연결 설정 과정 없이 데이터그램 단위로 전송하며, 신뢰성보다는 속도와 실시간 처리가 중요한 애플리케이션에서 주로 사용한다</description></item><item><title>Network and Communication Devices</title><link>https://buenhyden.github.io/posts/networking-and-communications/network-and-communication-devices.html</link><pubDate>Wed, 02 Oct 2024 02:03:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications/network-and-communication-devices.html</guid><description>컴퓨터 네트워크와 통신 시스템에서 데이터를 전송, 수신, 처리하는데 사용되는 하드웨어 장치.</description></item><item><title>Network</title><link>https://buenhyden.github.io/posts/networking-and-communications.html</link><pubDate>Sun, 22 Sep 2024 02:03:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/networking-and-communications.html</guid><description>몇 개의 독립적인 장치가 적절한 영역 내에서 적당히 빠른 속도의 물리적 통신 채널을 통하여 서로가 직접 통신할 수 있도록 지원해 주는 데이터 통신 체계</description></item></channel></rss>