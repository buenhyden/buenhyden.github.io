<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Networking-and-Communications on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/networking-and-communications/</link>
    <description>Recent content in Networking-and-Communications on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Sun, 20 Oct 2024 09:32:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/networking-and-communications/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Network</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/</link>
      <pubDate>Wed, 16 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/</guid>
      <description>몇 개의 독립적인 장치가 적절한 영역 내에서 적당히 빠른 속도의 물리적 통신 채널을 통하여 서로가 직접 통신할 수 있도록 지원해 주는 데이터 통신 체계</description>
    </item>
    <item>
      <title>Websocket vs WebRTC</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/websocket-vs-webrtc/</link>
      <pubDate>Sat, 19 Oct 2024 05:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/websocket-vs-webrtc/</guid>
      <description>WebSocket과 WebRTC는 실시간 웹 통신을 위한 중요한 기술</description>
    </item>
    <item>
      <title>Streaming vs Polling</title>
      <link>https://buenhyden.github.io/til/2024/10/20/streaming-vs-polling/</link>
      <pubDate>Sun, 20 Oct 2024 08:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/20/streaming-vs-polling/</guid>
      <description>Streaming과 polling은 실시간 데이터 전송을 위해 사용되는 두 가지 주요 기술</description>
    </item>
    <item>
      <title>RESTful API vs GraphQL API vs Webhook vs Server-sent Events vs Websocket vs WebRTC</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/restful-api-vs-graphql-api-vs-webhook-vs-server-sent-events-vs-websocket-vs-webrtc/</link>
      <pubDate>Sat, 19 Oct 2024 06:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/restful-api-vs-graphql-api-vs-webhook-vs-server-sent-events-vs-websocket-vs-webrtc/</guid>
      <description>API의 여러 유형인 RESTful API, GraphQL API, Webhook, Server-sent Events, WebSocket, WebRTC에 대해 정리하고 비교 분석</description>
    </item>
    <item>
      <title>Webhook vs Server-Sent Events</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/webhook-vs-server-sent-events/</link>
      <pubDate>Sat, 19 Oct 2024 06:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/webhook-vs-server-sent-events/</guid>
      <description>Webhook과 Server-Sent Events(SSE)는 실시간 데이터 전송을 위한 웹 기술이다.</description>
    </item>
    <item>
      <title>Data Transmission</title>
      <link>https://buenhyden.github.io/til/2024/10/20/data-transmission/</link>
      <pubDate>Sun, 20 Oct 2024 09:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/20/data-transmission/</guid>
      <description>데이터 전송 및 처리 방식은 다양한 기준에 따라 분류되며, 각 방식은 특정한 통신 환경과 요구 사항에 맞게 선택된다.</description>
    </item>
    <item>
      <title>스트리밍 (Streaming)</title>
      <link>https://buenhyden.github.io/til/2024/10/20/streaming/</link>
      <pubDate>Sun, 20 Oct 2024 06:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/20/streaming/</guid>
      <description>스트리밍은 인터넷을 통해 오디오, 비디오 및 기타 콘텐츠를 실시간으로 전송하고 재생하는 기술</description>
    </item>
    <item>
      <title>RDMA</title>
      <link>https://buenhyden.github.io/til/2024/10/20/rdma/</link>
      <pubDate>Sun, 20 Oct 2024 01:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/20/rdma/</guid>
      <description>네트워크 상의 한 컴퓨터에서 다른 컴퓨터의 메모리에 직접 접근할 수 있게 해주는 기술로, CPU의 개입 없이 데이터를 전송할 수 있는 고성능 네트워크 기술</description>
    </item>
    <item>
      <title>HATEOAS (Hypermedia As The Engine Of Application State)</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/hateoas/</link>
      <pubDate>Sat, 19 Oct 2024 07:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/hateoas/</guid>
      <description>RESTful API 설계의 중요한 개념으로, 클라이언트와 서버 간의 동적이고 유연한 상호작용을 가능하게 하는 방식.</description>
    </item>
    <item>
      <title>쓰로틀링 (Throttling)</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-performance/rate-limiting-and-throttling/throttling/</link>
      <pubDate>Sat, 19 Oct 2024 04:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-performance/rate-limiting-and-throttling/throttling/</guid>
      <description>쓰로틀링(Throttling)은 시스템이나 리소스의 과도한 사용을 제어하고 관리하는 기술이다.</description>
    </item>
    <item>
      <title>gRPC API</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/grpc-api/</link>
      <pubDate>Sat, 19 Oct 2024 03:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/grpc-api/</guid>
      <description>Google에서 개발한 오픈소스 원격 프로시저 호출(RPC) 시스템</description>
    </item>
    <item>
      <title>RESTful API</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/</link>
      <pubDate>Sat, 19 Oct 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/</guid>
      <description>웹 서비스를 설계하고 구현하기 위한 아키텍처 스타일</description>
    </item>
    <item>
      <title>SOAP API</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/soap-api/</link>
      <pubDate>Sat, 19 Oct 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/soap-api/</guid>
      <description>SOAP(Simple Object Access Protocol) API는 XML 기반의 메시지 교환 프로토콜</description>
    </item>
    <item>
      <title>로드밸런싱 (LoadBalancing)</title>
      <link>https://buenhyden.github.io/posts/system-design/load-balancers/loadbalancing/</link>
      <pubDate>Sat, 19 Oct 2024 02:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/load-balancers/loadbalancing/</guid>
      <description>여러 서버나 네트워크 리소스에 작업량을 분산시켜주는 방법으로 이를 통해 특정 서버에 부하가 집중되는 것을 방지하고, 전체 시스템의 안정성과 가용성을 높일 수 있다.</description>
    </item>
    <item>
      <title>SSL and TLS</title>
      <link>https://buenhyden.github.io/posts/backend/web-security/ssl-and-tls/</link>
      <pubDate>Fri, 18 Oct 2024 08:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/web-security/ssl-and-tls/</guid>
      <description>인터넷 상에서 데이터를 안전하게 전송하기 위한 암호화 프로토콜.</description>
    </item>
    <item>
      <title>DNS 캐싱 (DNS Caching)</title>
      <link>https://buenhyden.github.io/posts/system-design/domain-name-system/dns-caching/</link>
      <pubDate>Thu, 17 Oct 2024 07:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/domain-name-system/dns-caching/</guid>
      <description>DNS 캐싱은 이전에 조회한 도메인 이름과 IP 주소의 매핑 정보를 임시로 저장하는 메커니즘이다.</description>
    </item>
    <item>
      <title>DNS Records</title>
      <link>https://buenhyden.github.io/posts/system-design/domain-name-system/dns-records/</link>
      <pubDate>Thu, 17 Oct 2024 07:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/domain-name-system/dns-records/</guid>
      <description>DNS Records는 도메인 이름 시스템(DNS)에서 사용되는 데이터 구조로, 도메인과 관련된 다양한 정보를 저장한다.</description>
    </item>
    <item>
      <title>DNS(Domain Name System)</title>
      <link>https://buenhyden.github.io/posts/system-design/domain-name-system/</link>
      <pubDate>Thu, 17 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/domain-name-system/</guid>
      <description>도메인은 인터넷 상의 주소 체계를 의미하며, 웹사이트나 네트워크 리소스를 식별하는 고유한 이름이며, dns는 특정 컴퓨터(또는 네트워크로 연결된 임의의 장치)의 주소를 찾기 위해, 사람이 이해하기 쉬운 호스트 이름(예: www.example.com)을  실제 네트워크 상에서 사용하는 IP주소(예: 192.168.1.1)로 변환하고 해당 IP 주소로 접속하는 일련의 시스템</description>
    </item>
    <item>
      <title>Domain</title>
      <link>https://buenhyden.github.io/posts/system-design/domain-name-system/domain/</link>
      <pubDate>Thu, 17 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/domain-name-system/domain/</guid>
      <description>도메인(Domain)은 인터넷 상의 계층적 주소 체계로, 사용자가 이해하기 쉬운 형태의 웹사이트 주소를 제공한다.</description>
    </item>
  </channel>
</rss>
