<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JWT on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/jwt/</link>
    <description>Recent content in JWT on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.3</generator>
    <language>en</language>
    <lastBuildDate>Thu, 03 Apr 2025 07:30:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/jwt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JWT vs. OAuth 2.0</title>
      <link>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-oauth-20/</link>
      <pubDate>Thu, 03 Apr 2025 07:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-oauth-20/</guid>
      <description>JWT는 당사자 간에 안전하게 정보를 JSON 객체로 전송하기 위한 방식이다. 주로 인증(Authentication)과 정보 교환을 위해 사용된다. OAuth 2.0은 사용자가 자신의 정보에 대한 접근 권한을 제3자 애플리케이션에 부여할 수 있게 해주는 인가(Authorization) 프레임워크이다. 사용자가 비밀번호를 공유하지 않고도 제한된 접근 권한을 제3자에게 제공할 수 있다.</description>
    </item>
    <item>
      <title>jwt vs. Basic Authentication</title>
      <link>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-basic-authentication/</link>
      <pubDate>Wed, 02 Apr 2025 02:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-basic-authentication/</guid>
      <description>JWT는 JSON 형식의 토큰을 사용하여 사용자 정보와 서명을 포함하는 상태 비저장(stateless) 인증 방식으로 토큰 자체에 모든 인증 정보가 포함된다. Basic Authentication는 사용자 ID와 비밀번호를 Base64로 인코딩하여 HTTP 헤더에 전송하는 상태 비저장 방식으로 매 요청마다 자격 증명을 전송한다.</description>
    </item>
    <item>
      <title>jwt vs. Cookie-Based Auth</title>
      <link>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-cookie-based-auth/</link>
      <pubDate>Wed, 02 Apr 2025 02:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-cookie-based-auth/</guid>
      <description>JWT는 Stateless한 인증이 필요한 경우(예: API 중심 애플리케이션, 마이크로서비스)에 적합하다. Cookie 기반 인증은 전통적인 웹 애플리케이션에서 더 적합하며, 특히 보안 요구 사항이 높은 경우 유리한다.</description>
    </item>
    <item>
      <title>jwt vs. Session-based Auth</title>
      <link>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-session-based-auth/</link>
      <pubDate>Wed, 02 Apr 2025 02:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-session-based-auth/</guid>
      <description>JWT는 Stateless가 필요한 API 중심 애플리케이션이나 마이크로서비스에 적합하다. 토큰을 안전하게 저장하려면 HttpOnly 쿠키 사용을 권장한다.세션 기반 인증은 보안이 우선시되는 금융 서비스나 소규모 웹 앱에서 유리하다.  Redis와 같은 인메모리 DB로 세션을 관리하면 확장성을 개선할 수 있다.</description>
    </item>
    <item>
      <title>JWT vs. OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-openid-connect/</link>
      <pubDate>Tue, 01 Apr 2025 14:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/jwt/jwt-vs-openid-connect/</guid>
      <description>JWT는 당사자 간에 안전하게 정보를 전송하기 위한 개방형 표준(RFC 7519)으로, 컴팩트하고 자체 포함적인 방식으로 정보를 안전하게 전달한다. OpenID Connect는 OAuth 2.0 프로토콜 위에 구축된 인증 계층으로, 클라이언트가 사용자의 신원을 확인하고 기본적인 프로필 정보를 얻을 수 있도록 하는 표준이다.</description>
    </item>
    <item>
      <title>RFC 7519</title>
      <link>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/jwt/rfc-7519/</link>
      <pubDate>Thu, 06 Feb 2025 03:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/access-control/authentication/implementations/token-based-authentication/jwt/rfc-7519/</guid>
      <description>2015년 5월에 Internet Engineering Task Force(IETF)에 의해 발행된 이 문서는 JWT의 구조, 형식, 서명 방법, 암호화 방법 등을 상세히 정의하고 있다.</description>
    </item>
  </channel>
</rss>
