<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>API-Integration-Patterns on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/api-integration-patterns/</link>
    <description>Recent content in API-Integration-Patterns on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.5</generator>
    <language>en</language>
    <lastBuildDate>Sun, 23 Mar 2025 04:35:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/api-integration-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Synchronous vs Asynchronous APIs</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/synchronous-vs-asynchronous-apis/</link>
      <pubDate>Sun, 06 Oct 2024 00:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/synchronous-vs-asynchronous-apis/</guid>
      <description>프로그래밍에서 작업을 처리하는 두 가지 주요 방식</description>
    </item>
    <item>
      <title>API Gateways</title>
      <link>https://buenhyden.github.io/posts/backend-development/web-infrastructure/api-gateways/</link>
      <pubDate>Sun, 20 Oct 2024 09:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/web-infrastructure/api-gateways/</guid>
      <description>클라이언트와 백엔드 서비스 사이에서 중개자 역할을 하는 서버로, 여러 마이크로서비스나 백엔드 시스템에 대한 단일 진입점을 제공하는 중요한 컴포넌트</description>
    </item>
    <item>
      <title>Implementations of API Gateway</title>
      <link>https://buenhyden.github.io/posts/backend-development/web-infrastructure/api-gateways/implementations/</link>
      <pubDate>Sun, 23 Mar 2025 04:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/web-infrastructure/api-gateways/implementations/</guid>
      <description>API 게이트웨이는 현대적인 애플리케이션 아키텍처의 핵심 구성 요소로, 클라이언트 요청을 처리하고 다양한 마이크로서비스로 라우팅하는 중앙 진입점 역할을 한다.</description>
    </item>
    <item>
      <title>Adaptive Polling</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/polling/types/adaptive-polling/</link>
      <pubDate>Sun, 23 Mar 2025 04:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/polling/types/adaptive-polling/</guid>
      <description>어댑티브 폴링은 데이터 수집이나 시스템 모니터링 과정에서 폴링(polling) 주기를 상황과 필요에 따라 동적으로 조절하는 기술이다.</description>
    </item>
    <item>
      <title>Smart Polling</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/polling/types/smart-polling/</link>
      <pubDate>Sun, 23 Mar 2025 04:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/polling/types/smart-polling/</guid>
      <description>스마트 폴링은 단순히 일정 주기로 데이터를 확인하는 전통적인 폴링과 달리, 다양한 컨텍스트 정보와 알고리즘을 활용하여 &amp;#39;언제&amp;#39;, &amp;#39;무엇을&amp;#39;, &amp;#39;어떻게&amp;#39; 폴링할지 지능적으로 결정한다.</description>
    </item>
    <item>
      <title>Apache APISIX</title>
      <link>https://buenhyden.github.io/posts/backend-development/web-infrastructure/api-gateways/implementations/apache-apisix/</link>
      <pubDate>Sun, 23 Mar 2025 01:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/web-infrastructure/api-gateways/implementations/apache-apisix/</guid>
      <description>Apache APISIX는 고성능 클라우드 네이티브 API 게이트웨이로, 2019년 CNCF(Cloud Native Computing Foundation) 샌드박스 프로젝트로 시작되어 2022년 10월에는 CNCF 인큐베이팅 프로젝트로 승격되었다.</description>
    </item>
    <item>
      <title>KrakenD</title>
      <link>https://buenhyden.github.io/posts/backend-development/web-infrastructure/api-gateways/implementations/krakend/</link>
      <pubDate>Sun, 23 Mar 2025 01:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/web-infrastructure/api-gateways/implementations/krakend/</guid>
      <description>KrakenD는 고성능 API 게이트웨이로, 2016년에 오픈 소스 프로젝트로 시작되었으며 현재는 KrakenD 회사에서 개발 및 유지보수하고 있다. Go 언어로 작성되었으며, 마이크로서비스 아키텍처에서 백엔드 API들을 통합하고 최적화하기 위해 설계되었다.</description>
    </item>
    <item>
      <title>Tyk</title>
      <link>https://buenhyden.github.io/posts/backend-development/web-infrastructure/api-gateways/implementations/tyk/</link>
      <pubDate>Sun, 23 Mar 2025 01:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/web-infrastructure/api-gateways/implementations/tyk/</guid>
      <description>Tyk는 강력한 오픈 소스 API 관리 플랫폼으로, 2014년 Martin Buhr에 의해 설립된 Tyk Technologies에서 개발했다. Go 언어로 작성되었으며, API 게이트웨이, 개발자 포털, API 분석 대시보드를 포함한 완전한 API 관리 솔루션을 제공한다.</description>
    </item>
    <item>
      <title>Kong</title>
      <link>https://buenhyden.github.io/posts/backend-development/web-infrastructure/api-gateways/implementations/kong/</link>
      <pubDate>Sun, 23 Mar 2025 01:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/web-infrastructure/api-gateways/implementations/kong/</guid>
      <description>Kong은 마이크로서비스 아키텍처를 위한 클라우드 네이티브, 오픈 소스 API 게이트웨이 및 서비스 메시이다.</description>
    </item>
    <item>
      <title>Traefik</title>
      <link>https://buenhyden.github.io/posts/backend-development/web-infrastructure/api-gateways/implementations/traefik/</link>
      <pubDate>Sun, 23 Mar 2025 01:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/web-infrastructure/api-gateways/implementations/traefik/</guid>
      <description>Traefik(트래픽이라고 발음)은 2015년 Containous(현재 Traefik Labs)에서 개발한 오픈 소스 API 게이트웨이이자 엣지 라우터이다.</description>
    </item>
    <item>
      <title>Types of Polling</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/polling/types/</link>
      <pubDate>Sun, 09 Mar 2025 02:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/polling/types/</guid>
      <description>클라이언트-서버 통신에서 폴링(Polling)은 클라이언트가 서버의 데이터 변경사항을 확인하기 위해 주기적으로 요청을 보내는 기법으로 다양한 폴링 메커니즘이 존재하며, 각각 고유한 특성과 적합한 사용 환경이 있다.</description>
    </item>
    <item>
      <title>Polling</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/polling/</link>
      <pubDate>Sat, 08 Mar 2025 15:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/polling/</guid>
      <description>폴링은 클라이언트가 주기적으로 서버에 요청을 보내 새로운 정보나 상태 변화를 확인하는 통신 방식이다. 이는 &amp;#39;끌어오기(Pull)&amp;#39; 방식의 대표적인 예로, 클라이언트가 능동적으로 서버에서 정보를 요청한다.</description>
    </item>
    <item>
      <title>Webhook</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/event-based-style/webhook/</link>
      <pubDate>Sat, 08 Mar 2025 15:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/event-based-style/webhook/</guid>
      <description>webhook은 특정 이벤트가 발생했을 때 서버가 미리 지정된 클라이언트의 URL로 데이터를 능동적으로 보내는 방식이다.</description>
    </item>
    <item>
      <title>Asynchronous APIs</title>
      <link>https://buenhyden.github.io/posts/backend-development/backend-fundamentals/request-response-cycle/asynchronous/</link>
      <pubDate>Thu, 06 Mar 2025 15:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/backend-fundamentals/request-response-cycle/asynchronous/</guid>
      <description>비동기식 API의 핵심은 요청과 응답 사이의 시간적 분리이다. 이 패턴에서는 클라이언트가 요청을 보낸 후 즉각적인 응답을 기다리지 않고, 다른 작업을 계속 진행할 수 있다. 서버는 요청을 처리한 후, 다양한 메커니즘을 통해 결과를 클라이언트에게 전달한다.</description>
    </item>
    <item>
      <title>Synchronous APIs</title>
      <link>https://buenhyden.github.io/posts/backend-development/backend-fundamentals/request-response-cycle/synchronous/</link>
      <pubDate>Thu, 06 Mar 2025 15:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/backend-fundamentals/request-response-cycle/synchronous/</guid>
      <description>클라이언트가 요청을 보내고 서버가 해당 요청을 처리한 후 즉시 응답을 반환하는 방식으로 작동한다. 이러한 동기식 통신의 본질은 &amp;#34;요청-응답&amp;#34; 주기가 완료될 때까지 클라이언트가 다른 작업으로 진행하지 않고 대기한다는 점이다.</description>
    </item>
    <item>
      <title>API Integration Patterns</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/</link>
      <pubDate>Thu, 06 Mar 2025 13:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/</guid>
      <description>API 통합 패턴은 다양한 시스템, 서비스, 애플리케이션이 효과적으로 통신하고 상호작용할 수 있도록 하는 설계 접근법이다.</description>
    </item>
    <item>
      <title>Short Polling</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/polling/types/short-polling/</link>
      <pubDate>Sat, 01 Feb 2025 03:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/polling/types/short-polling/</guid>
      <description>Short polling은 클라이언트가 주기적으로 서버에 HTTP 요청을 보내 새로운 데이터가 있는지 확인하는 방식이다.</description>
    </item>
    <item>
      <title>Long Polling</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/polling/types/long-polling/</link>
      <pubDate>Sat, 01 Feb 2025 03:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/polling/types/long-polling/</guid>
      <description>Long polling은 클라이언트가 서버에 HTTP 요청을 보내고, 서버는 새로운 정보가 있을 때까지 응답을 보류하는 방식이다.</description>
    </item>
    <item>
      <title>Messaging Queues</title>
      <link>https://buenhyden.github.io/posts/backend-development/event-and-message-brokers/messaging-systems/message-queues/</link>
      <pubDate>Sat, 01 Feb 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/event-and-message-brokers/messaging-systems/message-queues/</guid>
      <description>메시징 큐는 비동기 통신을 가능하게 하는 중간 저장소로, 메시지 생산자(Producer)와 소비자(Consumer) 사이에서 데이터를 버퍼링하는 역할을 한다.</description>
    </item>
    <item>
      <title>Microservices Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/distributed/microservices/</link>
      <pubDate>Sat, 01 Feb 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/distributed/microservices/</guid>
      <description>마이크로서비스 아키텍처는 단일 애플리케이션을 작고 독립적인 서비스 집합으로 개발하는 접근 방식이다.</description>
    </item>
    <item>
      <title>Batch Processing</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/batch-processing/</link>
      <pubDate>Sat, 01 Feb 2025 03:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/batch-processing/</guid>
      <description>배치 처리는 여러 개별 API 요청을 하나의 그룹으로 묶어 단일 요청으로 처리하는 방식이다. 이는 여러 개의 개별 API 호출을 하는 대신, 다수의 작업을 포함한 하나의 요청을 보내는 것이다.</description>
    </item>
    <item>
      <title>Event Driven Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/messaging/event-driven-architecture/</link>
      <pubDate>Sat, 01 Feb 2025 03:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/messaging/event-driven-architecture/</guid>
      <description>이벤트 기반 아키텍처는 시스템 내에서 발생하는 상태 변화나 중요한 사건을 &amp;#39;이벤트&amp;#39;로 정의하고, 이러한 이벤트의 생성, 전송, 처리를 중심으로 시스템을 구성하는 방식이다.</description>
    </item>
    <item>
      <title>Webhooks vs. Polling</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/</link>
      <pubDate>Fri, 31 Jan 2025 15:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/</guid>
      <description>웹 애플리케이션에서 외부 시스템과 통신하거나 상태 변화를 감지하는 방식에는 대표적으로 웹훅(Webhooks)과 폴링(Polling)이 있다.</description>
    </item>
  </channel>
</rss>
