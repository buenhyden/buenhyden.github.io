<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Microservice-Architecture-Pattern :: Tag :: hyunyoun's Blog</title><link>https://buenhyden.github.io/tags/microservice-architecture-pattern.html</link><description/><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Wed, 01 Jan 2025 10:05:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/microservice-architecture-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>MSA Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns.html</link><pubDate>Tue, 19 Nov 2024 09:15:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns.html</guid><description>마이크로서비스 아키텍처의 주요 패턴</description></item><item><title>Circuit Breaker Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/circuit-breaker-pattern.html</link><pubDate>Wed, 01 Jan 2025 10:05:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/circuit-breaker-pattern.html</guid><description>Circuit Breaker Pattern 참고 및 출처</description></item><item><title>외부 구성 저장소 패턴(External Configuration Store Pattern)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/external-configuration-store.html</link><pubDate>Mon, 30 Dec 2024 01:58:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/configuration-management/external-configuration-store.html</guid><description>외부 구성 저장소 패턴(External Configuration Store Pattern)은 마이크로서비스 아키텍처(MSA)에서 구성 관리 패턴 중 하나로 애플리케이션의 구성 정보를 외부 저장소로 분리하여 관리하는 방식을 제안한다.</description></item><item><title>Ambassador Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/ambassador-pattern.html</link><pubDate>Tue, 19 Nov 2024 10:07:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/ambassador-pattern.html</guid><description>Ambassador Pattern은 클라이언트와 마이크로서비스 사이에 별도의 서비스(Ambassador)를 두어 통신을 관리하는 디자인 패턴이다.</description></item><item><title>Sidecar Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/sidecar-pattern.html</link><pubDate>Tue, 19 Nov 2024 10:07:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/sidecar-pattern.html</guid><description>Sidecar Pattern은 마치 오토바이의 사이드카처럼, 주 애플리케이션 컨테이너 옆에 보조 컨테이너를 배치하여 추가 기능을 제공한다.</description></item><item><title>Service Discovery Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-discovery-pattern.html</link><pubDate>Tue, 19 Nov 2024 10:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-discovery-pattern.html</guid><description>Service Discovery Pattern은 클라이언트가 서비스의 정확한 위치(IP 주소와 포트)를 알지 못해도 서비스를 호출할 수 있게 해주는 메커니즘</description></item><item><title>Service Mesh</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-mesh.html</link><pubDate>Tue, 19 Nov 2024 09:47:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-mesh.html</guid><description>마이크로서비스 아키텍처에서 서비스 간 통신을 관리하고 제어하기 위한 인프라 계층</description></item></channel></rss>