<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Computer-Science on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/computer-science/</link>
    <description>Recent content in Computer-Science on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.146.5</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Mar 2025 13:16:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/computer-science/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Computer Architecture</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/</link>
      <pubDate>Sun, 29 Sep 2024 21:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/</guid>
      <description>컴퓨터 시스템의 구조와 설계를 정의하는 기본적인 프레임워크.</description>
    </item>
    <item>
      <title>Computer System</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/</link>
      <pubDate>Sun, 29 Sep 2024 01:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/</guid>
      <description>컴퓨터 시스템은 하드웨어와 소프트웨어로 구성된 복잡한 구조</description>
    </item>
    <item>
      <title>Computer Science and Engineering</title>
      <link>https://buenhyden.github.io/posts/computer-science/</link>
      <pubDate>Thu, 19 Sep 2024 15:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/</guid>
      <description>계산(Computation), 정보(Information) 그리고 자동화(Automation)에 대한 학문</description>
    </item>
    <item>
      <title>보안 취약점 (Security Vulnerability)</title>
      <link>https://buenhyden.github.io/posts/security/security-attacks/security-vulnerability/</link>
      <pubDate>Thu, 07 Nov 2024 07:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-attacks/security-vulnerability/</guid>
      <description>보안 취약점(Security Vulnerability)은 정보 시스템이나 소프트웨어에 존재하는 보안상의 약점으로, 공격자가 악용하여 시스템에 무단으로 접근하거나 데이터를 유출, 변조할 수 있는 결함을 말한다.</description>
    </item>
    <item>
      <title>Data Structures and Algorithms</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/</link>
      <pubDate>Thu, 19 Sep 2024 15:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/</guid>
      <description>데이터를 효율적으로 저장, 관리, 처리하는 방법에 관한 학문</description>
    </item>
    <item>
      <title>Backend</title>
      <link>https://buenhyden.github.io/posts/backend/</link>
      <pubDate>Mon, 21 Oct 2024 01:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/</guid>
      <description>웹 애플리케이션이나 소프트웨어의 서버 측 개발을 담당하는 영역</description>
    </item>
    <item>
      <title>Runtime</title>
      <link>https://buenhyden.github.io/posts/computer-science/fundamentals/runtime/</link>
      <pubDate>Thu, 05 Dec 2024 04:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/fundamentals/runtime/</guid>
      <description>컴퓨터 과학에서 **런타임(runtime)** 은 프로그램이 실제로 실행되는 기간과 그 실행 환경 전체를 의미한다.</description>
    </item>
    <item>
      <title>DevOps</title>
      <link>https://buenhyden.github.io/posts/devops/</link>
      <pubDate>Sat, 28 Sep 2024 06:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/</guid>
      <description>소프트웨어 개발(Development)과 IT 운영(Operations)을 통합하는 문화, 철학, 방법론</description>
    </item>
    <item>
      <title>Software Design and Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/</link>
      <pubDate>Fri, 20 Sep 2024 10:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/</guid>
      <description>Software Architecture란 소프트웨어 시스템의 기본적인 구조와 조직을 정의하는 것이다.</description>
    </item>
    <item>
      <title>Suffix Array vs Suffix Tree vs Trie</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/array/suffix-array-vs-suffix-tree-vs-trie/</link>
      <pubDate>Sat, 12 Oct 2024 15:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/array/suffix-array-vs-suffix-tree-vs-trie/</guid>
      <description>Suffix Array, Suffix Tree, 그리고 Trie는 모두 문자열 처리와 패턴 매칭을 위한 데이터 구조로, 각각 고유한 특성과 용도를 가지고 있다.</description>
    </item>
    <item>
      <title>Programming Languages</title>
      <link>https://buenhyden.github.io/posts/programming-languages/</link>
      <pubDate>Sun, 06 Oct 2024 10:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/</guid>
      <description>기계(컴퓨터)에게 명령이나 연산을 시킬 목적으로 설계되어 기계와 의사소통을 할 수 있게 해주는 언어</description>
    </item>
    <item>
      <title>System Design</title>
      <link>https://buenhyden.github.io/posts/system-design/</link>
      <pubDate>Sun, 10 Nov 2024 21:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/</guid>
      <description>소프트웨어 시스템 디자인은 소프트웨어의 구조와 동작을 계획하고 정의하는 과정</description>
    </item>
    <item>
      <title>Quality Assurance (QA)</title>
      <link>https://buenhyden.github.io/posts/qa/</link>
      <pubDate>Sun, 27 Oct 2024 19:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/</guid>
      <description>소프트웨어 개발의 전체 과정에서 품질을 보증하고 관리하는 체계적인 활동</description>
    </item>
    <item>
      <title>Frontend</title>
      <link>https://buenhyden.github.io/posts/frontend/</link>
      <pubDate>Sun, 01 Dec 2024 01:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/frontend/</guid>
      <description>프론트엔드는 사용자가 직접 보고 상호작용하는 웹사이트나 애플리케이션의 사용자 인터페이스(UI)와 사용자 경험(UX)을 담당하는 부분이다.</description>
    </item>
    <item>
      <title>Data Engineering</title>
      <link>https://buenhyden.github.io/posts/data/data-engineering/</link>
      <pubDate>Sat, 26 Oct 2024 01:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data/data-engineering/</guid>
      <description>원시 데이터를 수집, 저장, 처리하여 분석 가능한 형태로 변환하는 과정을 다루는 분야</description>
    </item>
    <item>
      <title>인공지능(Artificial Intelligence, AI)</title>
      <link>https://buenhyden.github.io/posts/ai/</link>
      <pubDate>Wed, 04 Dec 2024 01:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/ai/</guid>
      <description>인공지능은 인간의 학습능력과 추론능력, 지각능력, 자연언어의 이해 능력 등을 컴퓨터 프로그램으로 실현한 기술</description>
    </item>
    <item>
      <title>CCE vs CVE vs CWE</title>
      <link>https://buenhyden.github.io/posts/security/security-attacks/security-vulnerability/management-frameworks/cce-vs-cve-vs-cwe/</link>
      <pubDate>Thu, 07 Nov 2024 07:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-attacks/security-vulnerability/management-frameworks/cce-vs-cve-vs-cwe/</guid>
      <description>CCE, CVE, CWE는 모두 컴퓨터 시스템과 소프트웨어의 보안 취약점을 식별하고 분류하기 위한 표준화된 체계이다.</description>
    </item>
    <item>
      <title>Software Architecture pattern vs Software Design Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/software-architecture-pattern-vs-software-design-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 08:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/software-architecture-pattern-vs-software-design-pattern/</guid>
      <description>Software Architecture Pattern과 Software Design Pattern은 소프트웨어 개발에서 반복적으로 발생하는 문제들에 대한 검증된 해결책을 제공하는 개념이다. 이 두 패턴은 서로 다른 수준의 추상화와 범위를 다루고 있다.</description>
    </item>
    <item>
      <title>UTF-8</title>
      <link>https://buenhyden.github.io/posts/data/fundamentals/encoding-and-decoding/character/types/unicode/utf-8/</link>
      <pubDate>Wed, 12 Mar 2025 13:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data/fundamentals/encoding-and-decoding/character/types/unicode/utf-8/</guid>
      <description>UTF-8은 현대 컴퓨팅 환경에서 가장 널리 사용되는 문자 인코딩 방식으로, 전 세계의 모든 문자를 표현할 수 있는 유니코드를 효율적으로 저장하고 전송하기 위해 설계되었다.</description>
    </item>
    <item>
      <title>Cache Memory</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/components/memory/hierarchy/cache-memory/</link>
      <pubDate>Sat, 22 Feb 2025 05:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/components/memory/hierarchy/cache-memory/</guid>
      <description>캐시 메모리(Cache Memory)는 컴퓨터 아키텍처에서 중요한 역할을 하는 CPU와 주 메모리(RAM) 사이에 위치한 소규모의 고속 메모리이다.</description>
    </item>
    <item>
      <title>Hashing</title>
      <link>https://buenhyden.github.io/posts/security/cryptography/hashing/</link>
      <pubDate>Thu, 02 Jan 2025 01:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/cryptography/hashing/</guid>
      <description>해싱(Hashing)은 임의의 크기를 가진 데이터를 고정된 크기의 값으로 변환하는 과정이다.</description>
    </item>
    <item>
      <title>UML</title>
      <link>https://buenhyden.github.io/posts/computer-science/fundamentals/uml/</link>
      <pubDate>Mon, 16 Dec 2024 12:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/fundamentals/uml/</guid>
      <description>UML(Unified Modeling Language)은 시스템, 소프트웨어, 비즈니스 프로세스를 시각적으로 모델링하기 위한 표준화된 범용 모델링 언어이다.</description>
    </item>
    <item>
      <title>Bitwise Operators</title>
      <link>https://buenhyden.github.io/posts/computer-science/fundamentals/bitwise-operators/</link>
      <pubDate>Sat, 14 Dec 2024 12:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/fundamentals/bitwise-operators/</guid>
      <description>비트와이즈 연산자는 비트 수준에서 작동하는 연산자로, 데이터를 효율적으로 다루는 데 필수적인 도구</description>
    </item>
    <item>
      <title>Little Endian</title>
      <link>https://buenhyden.github.io/posts/computer-science/fundamentals/endianness/little-endian/</link>
      <pubDate>Fri, 13 Dec 2024 16:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/fundamentals/endianness/little-endian/</guid>
      <description>리틀 엔디안은 낮은 자리의 바이트가 낮은 메모리 주소에 먼저 저장되는 방식이다. 즉, 데이터의 &amp;#34;작은&amp;#34; 부분(Least Significant Byte)이 메모리의 작은 주소에 위치한다.</description>
    </item>
    <item>
      <title>Big Endian</title>
      <link>https://buenhyden.github.io/posts/computer-science/fundamentals/endianness/big-endian/</link>
      <pubDate>Fri, 13 Dec 2024 16:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/fundamentals/endianness/big-endian/</guid>
      <description>빅 엔디안은 가장 중요한 바이트(Most Significant Byte, MSB)를 먼저 저장하는 방식이다. 즉, 높은 자리의 바이트가 낮은 메모리 주소에 위치한다.</description>
    </item>
    <item>
      <title>Endianness</title>
      <link>https://buenhyden.github.io/posts/computer-science/fundamentals/endianness/</link>
      <pubDate>Fri, 13 Dec 2024 16:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/fundamentals/endianness/</guid>
      <description>Endianness(엔디안)는 컴퓨터 메모리에서 데이터를 저장하는 바이트 순서를 의미한다.</description>
    </item>
    <item>
      <title>Floating Point Numbers</title>
      <link>https://buenhyden.github.io/posts/computer-science/fundamentals/floating-point-numbers/</link>
      <pubDate>Fri, 13 Dec 2024 16:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/fundamentals/floating-point-numbers/</guid>
      <description>부동소수점 수는 컴퓨터에서 실수를 표현하는 핵심적인 방식</description>
    </item>
    <item>
      <title>비대칭키 암호화 (Asymmetric Encryption)</title>
      <link>https://buenhyden.github.io/posts/security/cryptography/encryption/asymmetric-encryption/</link>
      <pubDate>Sat, 09 Nov 2024 21:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/cryptography/encryption/asymmetric-encryption/</guid>
      <description>공개키 암호화라고도 불리며, 암호화와 복호화에 서로 다른 두 개의 키를 사용하는 암호화 방식</description>
    </item>
    <item>
      <title>대칭키 암호화 (Symmetric Encryption)</title>
      <link>https://buenhyden.github.io/posts/security/cryptography/encryption/symmetric-encryption/</link>
      <pubDate>Sat, 09 Nov 2024 21:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/cryptography/encryption/symmetric-encryption/</guid>
      <description>동일한 키를 사용하여 데이터를 암호화하고 복호화하는 방식</description>
    </item>
    <item>
      <title>동형 암호화(Homomorphic Encryption)</title>
      <link>https://buenhyden.github.io/posts/security/cryptography/encryption/homomorphic-encryption/</link>
      <pubDate>Sat, 09 Nov 2024 13:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/cryptography/encryption/homomorphic-encryption/</guid>
      <description>동형 암호화는 암호화된 데이터를 복호화하지 않은 상태에서 연산을 수행할 수 있게 해주는 암호화 기술</description>
    </item>
    <item>
      <title>양자 암호화(quantum cryptography)</title>
      <link>https://buenhyden.github.io/posts/security/cryptography/quantum-cryptography/</link>
      <pubDate>Sat, 09 Nov 2024 13:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/cryptography/quantum-cryptography/</guid>
      <description>양자역학의 원리를 활용하여 완벽한 보안을 실현하는 암호화 기술</description>
    </item>
    <item>
      <title>영지식 증명(Zero-Knowledge Proof, ZKP)</title>
      <link>https://buenhyden.github.io/posts/security/cryptography/zero-knowledge-proof/</link>
      <pubDate>Sat, 09 Nov 2024 13:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/cryptography/zero-knowledge-proof/</guid>
      <description>영지식 증명은 어떤 명제가 참이라는 것을 증명하면서도, 그 명제에 대한 구체적인 정보는 전혀 공개하지 않는 암호학적 방법.</description>
    </item>
    <item>
      <title>The Open Web Application Security Project</title>
      <link>https://buenhyden.github.io/posts/security/fundamentals/the-open-web-application-security-project/</link>
      <pubDate>Sat, 09 Nov 2024 11:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/fundamentals/the-open-web-application-security-project/</guid>
      <description>웹 애플리케이션의 가장 심각한 보안 위험 10가지를 정리한 보고서</description>
    </item>
    <item>
      <title>디지털 서명 (digital signature)</title>
      <link>https://buenhyden.github.io/posts/security/cryptography/authentication/digital-signature/</link>
      <pubDate>Sat, 09 Nov 2024 06:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/cryptography/authentication/digital-signature/</guid>
      <description>전자 문서나 메시지의 진위성, 무결성, 그리고 부인 방지를 보장하기 위해 사용되는 암호화 기술</description>
    </item>
    <item>
      <title>제로 트러스트 (Zero Trust)</title>
      <link>https://buenhyden.github.io/posts/security/fundamentals/zero-trust/</link>
      <pubDate>Sat, 09 Nov 2024 01:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/fundamentals/zero-trust/</guid>
      <description> &amp;#34;절대 신뢰하지 말고, 항상 검증하라(Never trust, always verify)&amp;#34;라는 보안 철학에 기반을 둔 현대적인 보안 접근 방식</description>
    </item>
    <item>
      <title>암호화 모드 (Modes of Operation)</title>
      <link>https://buenhyden.github.io/posts/security/cryptography/encryption/symmetric-encryption/modes-of-operation/</link>
      <pubDate>Fri, 08 Nov 2024 13:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/cryptography/encryption/symmetric-encryption/modes-of-operation/</guid>
      <description>암호화 모드는 블록 암호를 사용하여 한 블록보다 긴 평문을 안전하게 암호화하는 방법을 정의한다</description>
    </item>
    <item>
      <title>Message Authentication Code</title>
      <link>https://buenhyden.github.io/posts/security/cryptography/authentication/message-authentication-code/</link>
      <pubDate>Fri, 08 Nov 2024 13:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/cryptography/authentication/message-authentication-code/</guid>
      <description>Message Authentication Code는 메시지의 무결성(integrity)과 출처 인증(authentication)을 동시에 보장하기 위한 암호학적 도구로, 메시지와 비밀키를 입력으로 받아 고정된 길이의 값을 생성하며, 이 값은 메시지에 대한 일종의 디지털 지문 역할을 한다.</description>
    </item>
    <item>
      <title>방화벽 (Firewall)</title>
      <link>https://buenhyden.github.io/posts/security/security-tools/firewall/</link>
      <pubDate>Fri, 08 Nov 2024 06:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-tools/firewall/</guid>
      <description>네트워크 보안의 핵심 요소로, 내부 네트워크를 외부의 위협으로부터 보호하는 시스템.</description>
    </item>
    <item>
      <title>CCE(Common Configuration Enumeration)</title>
      <link>https://buenhyden.github.io/posts/security/security-attacks/security-vulnerability/management-frameworks/cce/</link>
      <pubDate>Thu, 07 Nov 2024 07:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-attacks/security-vulnerability/management-frameworks/cce/</guid>
      <description>CCE(Common Configuration Enumeration)는 시스템의 보안 설정과 관련된 취약점을 식별하고 관리하기 위한 표준화된 명명 체계</description>
    </item>
    <item>
      <title>CVE</title>
      <link>https://buenhyden.github.io/posts/security/security-attacks/security-vulnerability/management-frameworks/cve/</link>
      <pubDate>Thu, 07 Nov 2024 07:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-attacks/security-vulnerability/management-frameworks/cve/</guid>
      <description>CVE(Common Vulnerabilities and Exposures)는 공개적으로 알려진 컴퓨터 보안 취약점을 식별하고 카탈로그화하는 표준화된 시스템</description>
    </item>
    <item>
      <title>CVSS(Common Vulnerability Scoring System)</title>
      <link>https://buenhyden.github.io/posts/security/security-attacks/security-vulnerability/management-frameworks/cvss/</link>
      <pubDate>Thu, 07 Nov 2024 07:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-attacks/security-vulnerability/management-frameworks/cvss/</guid>
      <description>CVSS(Common Vulnerability Scoring System)는 보안 취약점의 심각도를 평가하고 수치화하는 표준화된 시스템</description>
    </item>
    <item>
      <title>CWE(Common Weakness Enumeration)</title>
      <link>https://buenhyden.github.io/posts/security/security-attacks/security-vulnerability/management-frameworks/cwe/</link>
      <pubDate>Thu, 07 Nov 2024 07:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-attacks/security-vulnerability/management-frameworks/cwe/</guid>
      <description>CWE(Common Weakness Enumeration)는 소프트웨어와 하드웨어의 보안 약점을 체계적으로 분류하고 나열한 표준화된 목록</description>
    </item>
    <item>
      <title>교착상태 (Deadlock)</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/critical-section/problems/deadlock/</link>
      <pubDate>Thu, 03 Oct 2024 23:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/critical-section/problems/deadlock/</guid>
      <description>둘 이상의 프로세스가 서로가 가진 자원을 기다리며 더 이상 진행할 수 없는 상태</description>
    </item>
    <item>
      <title>Race Condition</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/critical-section/problems/race-condition/</link>
      <pubDate>Thu, 03 Oct 2024 23:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/critical-section/problems/race-condition/</guid>
      <description>여러 프로세스나 스레드가 공유 자원에 동시에 접근할 때, 접근의 타이밍이나 순서에 따라 결과가 달라질 수 있는 상황</description>
    </item>
    <item>
      <title>라이브락 (Livelock)</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/critical-section/problems/livelock/</link>
      <pubDate>Thu, 03 Oct 2024 09:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/critical-section/problems/livelock/</guid>
      <description>멀티스레딩 환경에서 발생할 수 있는 문제 상황으로, 프로세스나 스레드가 계속 실행 중이지만 실제로는 유용한 작업을 수행하지 못하는 상태</description>
    </item>
    <item>
      <title>Starvation</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/critical-section/problems/starvation/</link>
      <pubDate>Thu, 03 Oct 2024 07:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/critical-section/problems/starvation/</guid>
      <description>운영 체제 및 동시성 프로그래밍에서 중요한 문제로, 특정 프로세스가 필요한 자원을 지속적으로 얻지 못해 실행되지 못하는 상황</description>
    </item>
    <item>
      <title>임계 영역 (Critical Section)</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/critical-section/</link>
      <pubDate>Thu, 03 Oct 2024 07:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/critical-section/</guid>
      <description>여러 프로세스 또는 스레드가 공유하는 자원에 접근하는 코드 영역</description>
    </item>
    <item>
      <title>Types of Computer Architecture</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/types/</link>
      <pubDate>Sun, 29 Sep 2024 05:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/types/</guid>
      <description>하버드 아키텍처(Harvard Architecture)와 폰 노이만 아키텍처(von Neumann Architecture)는 컴퓨터 시스템의 메모리 구조를 정의하는 두 가지 대표적인 설계 방식이다.</description>
    </item>
    <item>
      <title>Instruction Set Architecture</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/processor/instruction-set-architecture/</link>
      <pubDate>Sun, 29 Sep 2024 02:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/processor/instruction-set-architecture/</guid>
      <description>ISA는 프로세서가 실행할 수 있는 명령어들의 집합을 정의하며, 프로그래머와 컴파일러 작성자에게 중요한 추상화 계층을 제공한다.</description>
    </item>
    <item>
      <title>Harvard Architecture</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/types/harvard-architecture/</link>
      <pubDate>Sun, 29 Sep 2024 01:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/types/harvard-architecture/</guid>
      <description>하버드 아키텍처(Harvard Architecture)는 프로세서 설계에서 중요한 구조로, 명령어와 데이터를 위한 별도의 메모리 및 버스 시스템을 사용하는 컴퓨터 아키텍처이다.</description>
    </item>
    <item>
      <title>Von Neumann architecture</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/types/von-neumann-architecture/</link>
      <pubDate>Sun, 29 Sep 2024 01:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/types/von-neumann-architecture/</guid>
      <description>Von Neumann architecture는 1945년 John von Neumann이 제안한 컴퓨터 아키텍처로, 현대 대부분의 컴퓨터 시스템의 기본이 되는 설계이다.</description>
    </item>
  </channel>
</rss>
