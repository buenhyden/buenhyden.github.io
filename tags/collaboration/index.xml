<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Collaboration on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/collaboration/</link>
    <description>Recent content in Collaboration on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.149.1</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Oct 2024 09:48:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/collaboration/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DevOps</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/hybrid-and-modern/devops/</link>
      <pubDate>Sat, 28 Sep 2024 06:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/hybrid-and-modern/devops/</guid>
      <description>DevOps는 개발과 운영의 경계를 허물고 협업과 자동화를 중심으로 애플리케이션을 빠르고 안정적으로 제공하는 현대적 엔지니어링 모델이다. CI/CD, 관측성, 보안 내재화, 플랫폼 엔지니어링을 통해 리드타임 단축과 품질 향상을 동시에 달성하며, DORA 지표로 성과를 계량화한다.</description>
    </item>
    <item>
      <title>Code Review Best Practices</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/collaboration-workflows/code-review-best-practices/</link>
      <pubDate>Tue, 01 Oct 2024 09:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/collaboration-workflows/code-review-best-practices/</guid>
      <description>코드 리뷰 모범 사례는 소프트웨어 개발 과정에서 코드 품질과 팀 협업을 향상시키는 핵심 요소이다. 효과적인 코드 리뷰는 버그 감소, 지식 공유, 코드 표준화를 촉진하며, 건설적인 피드백과 명확한 커뮤니케이션을 기반으로 한다. 핵심 원칙인 작은 단위 검토와 명확한 피드백을 기반으로, GitHub Copilot 등의 도구로 기본 검사를 자동화하고 팀은 아키텍처 검증에 집중하는 협업 모델이 주류이다. 지속적 통합 (CI) 파이프라인과의 결합으로 품질 관리를 선제적으로 수행하는 것이 핵심 경쟁력으로 부상했다.</description>
    </item>
    <item>
      <title>Release Management</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/advanced-topics/release-management/</link>
      <pubDate>Tue, 01 Oct 2024 09:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/advanced-topics/release-management/</guid>
      <description>버전 관리 시스템 (VCS) 에서의 릴리스 관리는 소프트웨어 변경사항을 개발 환경에서 프로덕션 환경으로 안전하고 체계적으로 배포하는 전체 프로세스를 관리하는 방법론이다.  시맨틱 버저닝, 릴리스 브랜치, 태그 시스템을 활용하여 코드 버전을 체계적으로 관리하고, CI/CD 파이프라인을 통해 빌드, 테스트, 배포 과정을 자동화한다. 효과적인 릴리스 관리는 반복성, 자동화, 투명성, 롤백 준비 등의 핵심 원칙을 따르며, 다양한 배포 전략 (블루 - 그린, 카나리, 롤링 배포 등) 을 통해 배포 위험을 최소화한다.</description>
    </item>
    <item>
      <title>Open Source Contribution</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/collaboration-workflows/open-source-contribution/</link>
      <pubDate>Tue, 01 Oct 2024 06:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/development-practices/version-control/collaboration-workflows/open-source-contribution/</guid>
      <description>버전 관리 시스템에서의 오픈소스 기여는 소프트웨어 개발 생태계의 핵심 협업 방식으로, Fork-Clone- 수정 -Pull Request 의 워크플로우를 통해 이루어진다. 이는 단순한 코드 공유를 넘어 지식 확산, 개발자 성장, 기술 혁신의 원동력이 되고 있다. 2025 년 기준 오픈소스 생태계는 기여자 다변화, 기업 참여 확대, AI 기반 도구 통합 등 새로운 변화를 맞이하고 있으며, 진입 장벽 완화와 기여 중심 학습 모델로 더욱 넓은 참여를 이끌어내고 있다.</description>
    </item>
  </channel>
</rss>
