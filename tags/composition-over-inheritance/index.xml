<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Composition-Over-Inheritance on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/composition-over-inheritance/</link>
    <description>Recent content in Composition-Over-Inheritance on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Tue, 04 Feb 2025 14:26:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/composition-over-inheritance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Composition Over Inheritance</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/composition-over-inheritance/</link>
      <pubDate>Tue, 04 Feb 2025 14:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/composition-over-inheritance/</guid>
      <description>&amp;#34;Composition Over Inheritance&amp;#34; 는 객체지향 설계에서 상속 (Inheritance) 보다 컴포지션 (Composition, 구성) 을 우선시하라는 원칙이다. 객체간 &amp;#34;is-a&amp;#34; 관계보다 &amp;#34;has-a&amp;#34; 관계를 통해 코드 재사용과 유연성을 달성하고자 한다. 이는 코드의 유연성과 재사용성을 높이고, 변화에 강한 구조를 만들기 위함이다. 상속의 단점을 보완하며, 다양한 기능을 조합해 객체를 설계할 수 있다.</description>
    </item>
  </channel>
</rss>
