<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Data-Management-Patterns on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/data-management-patterns/</link>
    <description>Recent content in Data-Management-Patterns on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.149.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 19 Nov 2024 03:56:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/data-management-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Pipeline Pattern</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-pipeline-development/data-pipeline-patterns/</link>
      <pubDate>Tue, 19 Nov 2024 03:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-pipeline-development/data-pipeline-patterns/</guid>
      <description>데이터 파이프라인 패턴은 데이터를 원천에서 목적지로 이동시키는 과정을 자동화하고 최적화하는 아키텍처 패턴이다.</description>
    </item>
    <item>
      <title>CQRS</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/event-driven/cqrs/</link>
      <pubDate>Sat, 16 Nov 2024 10:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/event-driven/cqrs/</guid>
      <description>CQRS는 쓰기(명령)와 읽기(조회)를 별도 모델로 분리해 각자 최적화·독립적 확장을 가능하게 하는 아키텍처 패턴이다. 읽기 전용 뷰·비대칭 스케일링에 유리하고 보안/검증 경계도 선명해진다. 다만 복잡성과 동기화 비용이 늘며, ES와의 결합은 선택 사항이다.</description>
    </item>
    <item>
      <title>Event Sourcing</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/event-driven/event-sourcing/</link>
      <pubDate>Fri, 15 Nov 2024 01:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/distributed-architecture/event-driven/event-sourcing/</guid>
      <description>이 패턴은 시스템의 상태 변화를 일련의 이벤트로 저장하고 관리하는 방식을 말한다.</description>
    </item>
    <item>
      <title>Database per Service</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-architecture/database-design-patterns/microservices-patterns/database-per-service/</link>
      <pubDate>Tue, 12 Nov 2024 10:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-architecture/database-design-patterns/microservices-patterns/database-per-service/</guid>
      <description>Database per Service Pattern은 각 마이크로서비스가 자체적인 독립된 데이터베이스를 가지는 구조를 말한다.  이는 서비스 간의 느슨한 결합을 촉진하고, 각 서비스의 자율성을 높이는 것을 목표로 한다.</description>
    </item>
    <item>
      <title>Shared Database</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-architecture/database-design-patterns/microservices-patterns/shared-database/</link>
      <pubDate>Tue, 12 Nov 2024 07:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-architecture/database-design-patterns/microservices-patterns/shared-database/</guid>
      <description>여러 마이크로서비스가 동일한 데이터베이스 인스턴스를 사용하여 데이터를 저장하고 접근하는 방식이다</description>
    </item>
    <item>
      <title>Idempotent Operations</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/message-infrastructure/integration-patterns/eip/message-reliability/idempotency-patterns/idempotent-operations/</link>
      <pubDate>Wed, 09 Oct 2024 02:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/message-infrastructure/integration-patterns/eip/message-reliability/idempotency-patterns/idempotent-operations/</guid>
      <description>멱등 연산 (Idempotent Operation) 은 동일한 입력으로 여러 번 수행하더라도 결과가 첫 번째 수행한 것과 동일한 특성을 가진 연산이다. 분산 시스템, REST API, 데이터베이스 등에서 중요하게 활용되며, 시스템의 신뢰성과 일관성을 보장하는 핵심 원칙이다. 네트워크 오류나 중복 요청 상황에서도 안전하게 작업을 수행할 수 있게 해주는 설계 패턴으로 현대 시스템 아키텍처에서 필수적인 개념이다.</description>
    </item>
  </channel>
</rss>
