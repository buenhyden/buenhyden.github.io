<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Design-and-Architecture on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/design-and-architecture/</link>
    <description>Recent content in Design-and-Architecture on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.1</generator>
    <language>en</language>
    <lastBuildDate>Sun, 06 Jul 2025 10:14:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/design-and-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Principles</title>
      <link>https://buenhyden.github.io/posts/software-engineering/principles/</link>
      <pubDate>Tue, 27 May 2025 07:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/principles/</guid>
      <description>시스템 아키텍처와 소프트웨어 아키텍처 원칙들은 견고하고 유지보수 가능하며 확장 가능한 소프트웨어 시스템을 설계하기 위한 핵심 지침들로, SOLID 원칙, 관심사의 분리, 의존성 역전 등의 기본 원칙을 바탕으로 계층화 아키텍처, 클린 아키텍처, 마이크로서비스 아키텍처 등 다양한 패턴을 통해 복잡한 시스템의 설계와 구현을 체계적으로 지원한다.</description>
    </item>
    <item>
      <title>Creational</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/</link>
      <pubDate>Wed, 25 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/</guid>
      <description>Creational Design Patterns(생성 디자인 패턴) 는 객체 생성 메커니즘을 다루는 디자인 패턴 분류로, 시스템이 객체를 생성, 구성, 표현하는 방식에 독립성을 제공한다. GoF 에서 정의한 5 가지 패턴 (Singleton, Factory Method, Abstract Factory, Builder, Prototype) 을 포함하며, 객체 생성의 복잡성을 캡슐화하고 유연성을 향상시켜 재사용 가능하고 유지보수가 용이한 소프트웨어 시스템 구축을 지원한다.</description>
    </item>
    <item>
      <title>Structural</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/</link>
      <pubDate>Wed, 25 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/</guid>
      <description>GoF의 Structural Patterns 는 **객체와 클래스 간의 관계를 구성하고 조합하는 설계 기법**으로, 유연성과 유지보수성을 강화한다. 이 패턴들은 Adapter 를 통한 인터페이스 호환, Bridge 를 통한 추상화 구현 분리, Composite 를 통한 트리 구조 관리, Decorator 로 기능 동적 추가, Facade 를 통한 서브시스템 단순화, Flyweight 로 메모리 최적화, Proxy 로 접근 제어 등을 통해 구조적 문제를 해결한다.</description>
    </item>
    <item>
      <title>Behavioral</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/</link>
      <pubDate>Tue, 24 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/</guid>
      <description>Behavioral Pattern 은 객체들 간 **책임 분배와 실행 흐름 협력**을 설계하여, 코드 의존성을 줄이고 유연성을 강화한다.  대표 패턴으로는 Observer, Strategy, Command 등이 있으며, 런타임 행동 변경과 확장에 효과적이다.</description>
    </item>
    <item>
      <title>Event-Driven Pattern vs Event Sourcing Pattern vs Publisher-Subscriber Pattern vs Producer-Consumer Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/comparative/event-driven-pattern-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</link>
      <pubDate>Tue, 19 Nov 2024 03:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/comparative/event-driven-pattern-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</guid>
      <description>EDA는 이벤트 중심의 시스템 설계를 위한 상위 수준의 아키텍처 스타일이며, Publisher-Subscriber Pattern과 Producer-Consumer Pattern은 EDA를 구현하는 데 사용되는 구체적인 통신 모델이다. 그리고 Event Sourcing Pattern은 EDA의 한 구현 방식으로 볼 수 있으며, 이벤트를 저장하고 관리하는 방법을 제공한다.</description>
    </item>
    <item>
      <title>Mediator Pattern vs Observer Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/mediator-pattern-vs-observer-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/mediator-pattern-vs-observer-pattern/</guid>
      <description>Mediator 패턴과 Observer 패턴은 객체 간 통신을 관리하는 디자인 패턴이지만, 그 접근 방식과 용도에 차이가 있다.</description>
    </item>
    <item>
      <title>Data Mesh Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/data-mesh-architecture/</link>
      <pubDate>Sun, 06 Jul 2025 10:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/data-mesh-architecture/</guid>
      <description>Data Mesh Architecture 는 도메인 중심의 탈중앙화된 데이터 관리 방식으로, 각 비즈니스 도메인이 자체 데이터를 제품으로 취급하며 소유권을 갖는 아키텍처이다. 셀프서비스 인프라와 연합 거버넌스를 통해 확장성과 민첩성을 제공하며, 전통적인 중앙집중형 데이터 플랫폼의 한계를 극복한다.</description>
    </item>
    <item>
      <title>Kappa Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/kappa-architecture/</link>
      <pubDate>Sun, 06 Jul 2025 10:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/kappa-architecture/</guid>
      <description>Kappa 아키텍처는 배치와 스트림 분리 없이 &amp;#34;모든 데이터를 스트림으로 처리&amp;#34; 하는 단일 레이어 방식이다. 단순성, 코드 통일성, 실시간 응답성을 확보하고 이벤트 재처리 방식으로 유연하게 대응하지만, 이력 분석 및 리플레이 처리 비용 등의 trade-off 가 존재한다.</description>
    </item>
    <item>
      <title>Lakehouse Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/lakehouse-architecture/</link>
      <pubDate>Sun, 06 Jul 2025 10:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/lakehouse-architecture/</guid>
      <description>Lakehouse Architecture는 데이터 레이크의 유연성과 비용 효율성을 데이터 웨어하우스의 성능 및 거버넌스 기능과 결합한 차세대 데이터 관리 아키텍처이다. 오픈 포맷 (Parquet, Delta Lake) 을 기반으로 구조화 및 비구조화 데이터를 단일 플랫폼에서 통합 관리하며, ACID 트랜잭션과 스키마 진화를 지원하여 실시간 분석과 머신러닝을 가능하게 한다.</description>
    </item>
    <item>
      <title>Lambda Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/lambda-architecture/</link>
      <pubDate>Sun, 06 Jul 2025 10:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/lambda-architecture/</guid>
      <description>Lambda Architecture 는 배치 처리 (Batch Processing) 와 실시간 스트림 처리 (Real-time Stream Processing) 를 결합하여 대용량 데이터를 효과적으로 처리하는 하이브리드 아키텍처 패턴이다. 배치 레이어 (Batch Layer), 스피드 레이어 (Speed Layer), 서빙 레이어 (Serving Layer) 세 계층으로 구성되어 높은 처리량과 낮은 지연시간을 동시에 제공한다.</description>
    </item>
    <item>
      <title>Multi-Cloud Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/cloud-native/multi-cloud-architecture/</link>
      <pubDate>Sun, 06 Jul 2025 02:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/cloud-native/multi-cloud-architecture/</guid>
      <description>멀티클라우드 아키텍처 (Multi-Cloud Architecture) 는 둘 이상의 퍼블릭 클라우드 제공자를 활용해 애플리케이션이나 인프라를 분산 배치하는 전략이다. 이를 통해 유연성, 가용성, 비용 최적화, 벤더 종속성 해소, 규제 준수, 혁신 가속 등 다양한 이점을 얻을 수 있으며, 복잡한 관리와 보안, 네트워크, 데이터 일관성 등 도전 과제가 동반된다.</description>
    </item>
    <item>
      <title>Performance Optimization</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/performance-optimization/</link>
      <pubDate>Tue, 24 Jun 2025 13:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/performance-optimization/</guid>
      <description>&lt;h2 id=&#34;performance-optimization&#34;&gt;Performance Optimization&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;용어-정리&#34;&gt;용어 정리&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;용어&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;
&lt;hr&gt;</description>
    </item>
    <item>
      <title>Object Pooling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/performance-optimization/object-pooling/</link>
      <pubDate>Tue, 24 Jun 2025 10:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/performance-optimization/object-pooling/</guid>
      <description>Object Pooling 은 객체의 생성과 소멸 비용을 줄이기 위해 미리 생성된 객체들을 풀 (Pool) 에 보관하고 재사용하는 성능 최적화 디자인 패턴이다.  메모리 할당/해제 오버헤드를 줄이고 가비지 컬렉션 압력을 감소시켜 시스템 성능을 향상시킨다.</description>
    </item>
    <item>
      <title>Data-Centric Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/</link>
      <pubDate>Sun, 22 Jun 2025 08:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/</guid>
      <description>Data-Centric Architecture 는 데이터가 시스템 설계와 운영의 중심에 위치하는 아키텍처 스타일로, 데이터의 일관성, 접근성, 관리 효율성을 극대화하여 데이터 기반 의사결정과 신속한 서비스 제공을 지원한다.</description>
    </item>
    <item>
      <title>Architecture Styles and Patterns</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/</link>
      <pubDate>Sat, 14 Jun 2025 07:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/</guid>
      <description>Architecture Styles and Patterns은 시스템의 고수준 구조를 정의하고 컴포넌트 간 상호작용을 조직화하는 재사용 가능한 설계 솔루션이다. Architecture Style 은 시스템 전체 구조와 상호작용 원칙을 정의하며, Architecture Pattern 은 특정 구조적 문제에 대한 재사용 가능한 해결책을 제공한다. 다양한 패턴이 존재하며, 각각 특정 문제를 해결하고 확장성, 유지보수성, 테스트 용이성을 향상시킨다.</description>
    </item>
    <item>
      <title>Design Methodology</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-methodology/</link>
      <pubDate>Fri, 06 Jun 2025 16:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-methodology/</guid>
      <description>설계 방법론은 소프트웨어 시스템의 구조, 아키텍처, 개발 프로세스를 체계화하여 효율적이고 유지보수 가능한 소프트웨어를 개발하기 위한 원칙, 패턴, 실무 기법의 집합이다.</description>
    </item>
    <item>
      <title>Strategic Design</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-methodology/domain-driven-design/strategic-design/</link>
      <pubDate>Wed, 04 Jun 2025 13:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-methodology/domain-driven-design/strategic-design/</guid>
      <description>Strategic Design 은 DDD 내부에서 &amp;#39;무엇을&amp;#39; &amp;#39;왜&amp;#39; 만들지 결정하는 고수준 접근 방식이다. 복잡한 비즈니스 도메인의 핵심 (Subdomain/Core Domain) 을 정의하고 Bounded Context(경계 컨텍스트) 를 설정하며 Ubiquitous Language(공통 언어) 를 개발해 조직과 도메인 간 협업 기반을 마련하며 Context Map (컨텍스트 맵) 으로 시스템 전체 아키텍처를 관리한다.</description>
    </item>
    <item>
      <title>Tactical Design</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-methodology/domain-driven-design/tactical-design/</link>
      <pubDate>Wed, 04 Jun 2025 13:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-methodology/domain-driven-design/tactical-design/</guid>
      <description>전술적 설계 (Tactical Design) 는 **어떻게 구현할 것인가** 에 집중한다. 도메인 주도 설계 (DDD) 에서 전략적 설계로 정의된 도메인 모델을 실제 코드와 아키텍처로 구현하는 단계로, 단일 Bounded Context 내에서 Entity, Value Object, Aggregate, Repository, Factory, Domain Service 등 패턴을 적용해 **도메인 모델의 일관성, 트랜잭션 경계, 불변성, 도메인 규칙**을 구현한다.</description>
    </item>
    <item>
      <title>Messaging Systems</title>
      <link>https://buenhyden.github.io/posts/systems-and-infrastructure/infrastructure/infrastructure-components/messaging-systems/</link>
      <pubDate>Tue, 22 Apr 2025 13:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/systems-and-infrastructure/infrastructure/infrastructure-components/messaging-systems/</guid>
      <description>메시징 시스템은 분산 애플리케이션의 구성 요소 간 비동기 통신을 지원하여 결합도를 낮추고, 신뢰성·확장성·유연성을 제공합니다. 메시지 큐, 이벤트 스트리밍, 태스크 큐 등 다양한 형태가 존재하며, 실시간 데이터 처리, 작업 분산, 장애 복원력 등 다양한 요구에 대응한다.</description>
    </item>
    <item>
      <title>POSA(Pattern-Oriented Software Architecture)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/posa/</link>
      <pubDate>Sat, 05 Apr 2025 01:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/posa/</guid>
      <description>POSA(패턴 지향 소프트웨어 아키텍처) 는 복잡한 소프트웨어 시스템 설계 문제에 대한 검증된 해결책을 패턴 형태로 제공하는 아키텍처 접근 방식이다. 다양한 수준의 추상화에서 재사용 가능한 디자인 패턴을 체계적으로 적용하여 소프트웨어의 품질, 유지보수성 및 확장성을 향상시키는 방법론을 제시한다.</description>
    </item>
    <item>
      <title>Load Shifting vs. Load Balancing</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/comparative/load-shifting-vs-load-balancing/</link>
      <pubDate>Fri, 04 Apr 2025 02:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/comparative/load-shifting-vs-load-balancing/</guid>
      <description>로드 시프팅과 로드 밸런싱은 자주 혼동되지만 실제로는 매우 다른 개념과 목적을 가지고 있다. 두 기술 모두 시스템 자원을 최적화하는 데 사용되지만, 접근 방식과 적용 시나리오가 다르다.</description>
    </item>
    <item>
      <title>Load shifting vs. autoscaling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/comparative/load-shifting-vs-autoscaling/</link>
      <pubDate>Wed, 02 Apr 2025 15:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/comparative/load-shifting-vs-autoscaling/</guid>
      <description>**Load Shifting**과 **Autoscaling**은 백엔드 시스템에서 리소스를 효율적으로 관리하기 위한 두 가지 전략이다</description>
    </item>
    <item>
      <title>Load Shifting</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/performance-and-scalability-patterns/load-shifting/</link>
      <pubDate>Tue, 01 Apr 2025 15:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/performance-and-scalability-patterns/load-shifting/</guid>
      <description>로드 시프팅은 시스템 부하를 효율적으로 관리하는 전략으로, 피크 시간대의 작업 부하를 비피크 시간대로 이동시켜 자원 활용을 최적화하는 방법이다.</description>
    </item>
    <item>
      <title>Throttling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/performance-and-scalability-patterns/throttling/</link>
      <pubDate>Sun, 09 Mar 2025 16:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/performance-and-scalability-patterns/throttling/</guid>
      <description>Throttling은 트래픽이 과도하게 몰릴 때 시스템이 완전히 중단되거나 요청을 거부하는 대신, 요청 처리 속도를 늦추거나 대기열에 넣어 점진적으로 처리하는 방식이다.</description>
    </item>
    <item>
      <title>Rate Limiting vs. Throttling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/comparative/rate-limiting-vs-throttling/</link>
      <pubDate>Tue, 25 Feb 2025 13:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/comparative/rate-limiting-vs-throttling/</guid>
      <description>Rate Limiting은 특정 시간 프레임 내에 클라이언트가 API에 보낼 수 있는 요청 수를 제한하는 기술이며 Throttling은 요청 속도를 조절하여 제한에 도달했을 때 요청을 지연시키거나 대기열에 넣는다.</description>
    </item>
    <item>
      <title>Replication</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/performance-and-scalability-patterns/replication/</link>
      <pubDate>Tue, 18 Feb 2025 05:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/performance-and-scalability-patterns/replication/</guid>
      <description>복제 (Replication) 는 데이터나 서비스의 사본을 여러 노드나 시스템에 분산 저장하는 기법으로, 시스템의 가용성, 내결함성, 확장성을 향상시킨다. 주로 마스터 - 슬레이브, 다중 마스터, 액티브 - 액티브와 같은 아키텍처로 구현되며, 동기식 또는 비동기식 복제 방식을 사용한다. CAP 이론에 따라 일관성과 가용성 사이의 균형을 고려해 설계된다.</description>
    </item>
    <item>
      <title>Rate Limiting</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/performance-and-scalability-patterns/rate-limiting/</link>
      <pubDate>Fri, 14 Feb 2025 01:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/performance-and-scalability-patterns/rate-limiting/</guid>
      <description>Rate Limiting은 특정 시간 간격 동안 API에 대한 요청 수를 제한하는 기술이다. 쉽게 말해, 사용자나 클라이언트가 특정 시간 동안 보낼 수 있는 요청의 횟수에 상한선을 두는 것이다.</description>
    </item>
    <item>
      <title>Microservices Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/cloud-native/microservices-architecture/</link>
      <pubDate>Sat, 01 Feb 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/cloud-native/microservices-architecture/</guid>
      <description>마이크로서비스 아키텍처는 하나의 애플리케이션을 독립적으로 배포 가능한 작은 서비스들의 집합으로 구성하는 소프트웨어 아키텍처 스타일이다. 각 서비스는 특정 비즈니스 기능을 담당하며, API 를 통해 통신하고, 자체 데이터베이스를 보유한다. 확장성, 유연성, 기술적 다양성을 제공하여 현대 클라우드 네이티브 애플리케이션 개발의 핵심 방식으로 자리잡았다.</description>
    </item>
    <item>
      <title>지연 초기화(Lazy Initialization)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/performance-optimization/lazy-initialization/</link>
      <pubDate>Wed, 18 Dec 2024 10:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/performance-optimization/lazy-initialization/</guid>
      <description>지연 초기화는 객체나 값의 생성을 실제로 필요할 때까지 미루는 설계 패턴이다. 메모리 절약, 빠른 시작, 불필요한 연산 방지 등 자원 효율성을 극대화할 수 있지만, 최초 접근 시 지연, 예외 발생의 지연, 동시성 관리 등 주의가 필요하다.</description>
    </item>
    <item>
      <title>Ambassador</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/deployment-and-scalability-patterns/ambassador/</link>
      <pubDate>Tue, 19 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/deployment-and-scalability-patterns/ambassador/</guid>
      <description>Ambassador Pattern은 클라이언트와 마이크로서비스 사이에 별도의 서비스(Ambassador)를 두어 통신을 관리하는 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Rate Limiting</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/performance-and-scalability-patterns/rate-limiting/rate-limiting/</link>
      <pubDate>Mon, 18 Nov 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/performance-and-scalability-patterns/rate-limiting/rate-limiting/</guid>
      <description>클라이언트/서비스 간 요청 처리량을 제어하는 메커니즘으로, 특히 API 기반 마이크로서비스 통신에서 중요하다.</description>
    </item>
    <item>
      <title>Consumer-side contract test</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/test-patterns-and-strategies/consumer-side-contract-test/</link>
      <pubDate>Mon, 18 Nov 2024 10:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/test-patterns-and-strategies/consumer-side-contract-test/</guid>
      <description>테스팅 패턴 중 하나로, 서비스 간 상호작용을 검증하는 중요한 방법이다.</description>
    </item>
    <item>
      <title>Consumer-Driven Contract Testing</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/test-patterns-and-strategies/consumer-driven-contract-testing/</link>
      <pubDate>Mon, 18 Nov 2024 03:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/test-patterns-and-strategies/consumer-driven-contract-testing/</guid>
      <description>서비스 소비자(consumer)와 제공자(provider) 간의 상호작용을 검증하는 방법</description>
    </item>
    <item>
      <title>Service Component Test</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/test-patterns-and-strategies/service-component-test/</link>
      <pubDate>Mon, 18 Nov 2024 03:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/test-patterns-and-strategies/service-component-test/</guid>
      <description>개별 서비스 컴포넌트를 테스트하기 위한 중요한 패턴이다.</description>
    </item>
    <item>
      <title>Anti-Corruption Layer</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/specialized-patterns/anti-corruption-layer/</link>
      <pubDate>Sun, 17 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/specialized-patterns/anti-corruption-layer/</guid>
      <description>이 패턴은 서로 다른 도메인 모델이나 통신 프로토콜을 가진 시스템 간의 통합을 위해 사용된다.</description>
    </item>
    <item>
      <title>API Composition</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/api-composition-strategies/api-composition/</link>
      <pubDate>Sat, 16 Nov 2024 10:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/api-composition-strategies/api-composition/</guid>
      <description>이 패턴은 여러 마이크로서비스의 데이터를 조합하여 클라이언트에게 단일 응답으로 제공하는 방식이다.</description>
    </item>
    <item>
      <title>CQRS</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/data-management-patterns/cqrs/</link>
      <pubDate>Sat, 16 Nov 2024 10:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/data-management-patterns/cqrs/</guid>
      <description>CQRS는 시스템의 명령(Command)과 조회(Query) 작업을 분리하여 각각의 책임을 명확히 하는 패턴이다.</description>
    </item>
    <item>
      <title>Event Sourcing</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/data-management-patterns/event-sourcing/</link>
      <pubDate>Fri, 15 Nov 2024 01:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/data-management-patterns/event-sourcing/</guid>
      <description>이 패턴은 시스템의 상태 변화를 일련의 이벤트로 저장하고 관리하는 방식을 말한다.</description>
    </item>
    <item>
      <title>Backend for Frontend Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/integration-patterns/backend-for-frontend/</link>
      <pubDate>Thu, 14 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/integration-patterns/backend-for-frontend/</guid>
      <description>Backend for Frontend 아키텍처는 다양한 프론트엔드의 요구사항에 맞춤화된 백엔드 서비스를 제공하여 사용자 경험을 최적화하고, 보안성과 개발 효율성을 향상시키는 설계 패턴이다.</description>
    </item>
    <item>
      <title>API Gateway Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/integration-patterns/api-gateway-pattern/</link>
      <pubDate>Thu, 14 Nov 2024 01:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/integration-patterns/api-gateway-pattern/</guid>
      <description>마이크로서비스 아키텍처에서 클라이언트와 백엔드 서비스 간의 단일 진입점 역할을 수행하는 중요한 구성 요소</description>
    </item>
    <item>
      <title>Sidecar Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/deployment-and-scalability-patterns/sidecar/</link>
      <pubDate>Wed, 13 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/deployment-and-scalability-patterns/sidecar/</guid>
      <description>Sidecar Pattern은 마치 오토바이의 사이드카처럼, 주 애플리케이션 컨테이너 옆에 보조 컨테이너를 배치하여 추가 기능을 제공한다.</description>
    </item>
    <item>
      <title>Database per Service Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/data-management-patterns/database-per-service/</link>
      <pubDate>Tue, 12 Nov 2024 10:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/data-management-patterns/database-per-service/</guid>
      <description>Database per Service Pattern은 각 마이크로서비스가 자체적인 독립된 데이터베이스를 가지는 구조를 말한다.  이는 서비스 간의 느슨한 결합을 촉진하고, 각 서비스의 자율성을 높이는 것을 목표로 한다.</description>
    </item>
    <item>
      <title>Shared Database</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/data-management-patterns/shared-database/</link>
      <pubDate>Tue, 12 Nov 2024 07:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/data-management-patterns/shared-database/</guid>
      <description>여러 마이크로서비스가 동일한 데이터베이스 인스턴스를 사용하여 데이터를 저장하고 접근하는 방식이다</description>
    </item>
    <item>
      <title>Idempotent Operations</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/data-management-patterns/idempotency/</link>
      <pubDate>Wed, 09 Oct 2024 02:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/data-management-patterns/idempotency/</guid>
      <description>멱등 연산 (Idempotent Operation) 은 동일한 입력으로 여러 번 수행하더라도 결과가 첫 번째 수행한 것과 동일한 특성을 가진 연산이다. 분산 시스템, REST API, 데이터베이스 등에서 중요하게 활용되며, 시스템의 신뢰성과 일관성을 보장하는 핵심 원칙이다. 네트워크 오류나 중복 요청 상황에서도 안전하게 작업을 수행할 수 있게 해주는 설계 패턴으로 현대 시스템 아키텍처에서 필수적인 개념이다.</description>
    </item>
    <item>
      <title>Master-Slave</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/performance-and-scalability-patterns/replication/replication-model/master-slave/</link>
      <pubDate>Fri, 27 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-patterns/performance-and-scalability-patterns/replication/replication-model/master-slave/</guid>
      <description>하나의 마스터 컴포넌트와 여러 슬레이브 컴포넌트로 구성되어 있으며, 작업을 효율적으로 분배하고 관리하는 데 사용된다</description>
    </item>
    <item>
      <title>Domain-Driven Design</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-methodology/domain-driven-design/</link>
      <pubDate>Thu, 26 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-methodology/domain-driven-design/</guid>
      <description>Domain-Driven Design (DDD, 도메인 주도 설계) 는 복잡한 비즈니스 도메인을 중심으로 소프트웨어를 설계하는 방법론으로, 도메인 전문가와 개발자가 유비쿼터스 언어 (Ubiquitous Language) 를 통해 협력하여 도메인 모델을 구축하고, 바운디드 컨텍스트 (Bounded Context) 로 복잡성을 관리하며, 전략적 설계와 전술적 설계를 통해 유지보수 가능한 소프트웨어를 개발하는 접근법이다.</description>
    </item>
    <item>
      <title>Factory Method Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/factory-method-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 18:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/factory-method-pattern/</guid>
      <description>Factory Method Pattern 은 객체 생성을 위한 인터페이스를 정의하되, 어떤 클래스를 인스턴스화할지는 서브클래스가 결정하도록 하는 생성 패턴이다. 클라이언트 코드와 구체적인 제품 클래스 간의 결합도를 낮추고, 상속을 통해 객체 생성의 책임을 서브클래스에 위임하여 확장성과 유지보수성을 향상시킨다.</description>
    </item>
    <item>
      <title>Singleton Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/singleton-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 18:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/singleton-pattern/</guid>
      <description>Singleton 패턴은 클래스의 인스턴스를 하나만 생성하고, 어디서든 이 인스턴스를 공유하도록 보장하는 패턴이다. 전역 상태 관리, 설정 객체, 로깅, 캐시 등에서 활용되며, thread-safe 구현이 핵심이다.</description>
    </item>
    <item>
      <title>Flyweight Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/flyweight-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 08:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/flyweight-pattern/</guid>
      <description>플라이웨이트 패턴은 대량의 유사한 객체들 간에 공통 상태를 공유하여 메모리 사용량을 최소화하는 구조적 디자인 패턴이다.  고유 상태 (Intrinsic State) 와 외부 상태 (Extrinsic State) 를 분리하여, 공유 가능한 고유 상태는 하나의 플라이웨이트 객체에 저장하고 외부 상태는 컨텍스트에서 관리함으로써 메모리 효율성과 성능을 향상시킨다.</description>
    </item>
    <item>
      <title>Bridge Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/bridge-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/bridge-pattern/</guid>
      <description>브리지 패턴 (Bridge Pattern) 은 추상화 (Abstraction) 와 구현 (Implementation) 을 분리하여 두 계층이 독립적으로 변화할 수 있도록 하는 구조적 디자인 패턴이다.  상속 대신 컴포지션을 사용하여 클래스 계층의 폭발적 증가를 방지하고, 런타임에 구현체를 변경할 수 있는 유연성을 제공한다. 크로스 플랫폼 애플리케이션, 데이터베이스 추상화 계층, API 게이트웨이 등에서 광범위하게 활용된다.</description>
    </item>
    <item>
      <title>Decorator Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/decorator-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/decorator-pattern/</guid>
      <description>Decorator Pattern 은 기존 객체에 동적으로 추가 기능을 부여하기 위해 사용되는 GoF 구조 패턴이다. 컴포넌트 인터페이스를 유지하면서 기능을 래핑하는 Decorator 클래스들을 체인 형태로 조합해, 상속 대신 조합을 통해 유연한 확장이 가능하게 한다. 주로 입력/출력 스트림, UI 요소, 로깅, 트랜잭션 처리 등에서 활용된다.</description>
    </item>
    <item>
      <title>Facade Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/facade-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/facade-pattern/</guid>
      <description>Facade Pattern(퍼사드 패턴) 은 복잡한 서브시스템의 인터페이스들을 통합하여 단순화된 단일 인터페이스를 제공하는 구조적 디자인 패턴이다. 클라이언트가 복잡한 시스템의 내부 구조를 알지 않고도 쉽게 사용할 수 있도록 하며, 시스템 간의 결합도를 낮추고 유지보수성을 향상시킨다.</description>
    </item>
    <item>
      <title>Adapter Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/adapter-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/adapter-pattern/</guid>
      <description>Adapter Pattern 은 호환되지 않는 인터페이스를 가진 클래스들이 함께 작동할 수 있도록 하는 구조적 설계 패턴이다. 기존 코드 수정 없이 레거시 시스템과 신규 시스템을 연결하는 브리지 역할을 하며, 인터페이스 변환을 통해 시스템 간 상호 운용성을 제공한다.</description>
    </item>
    <item>
      <title>Abstract Factory Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/abstract-factory-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/abstract-factory-pattern/</guid>
      <description>Abstract Factory Pattern 은 관련된 객체들의 패밀리를 구체적인 클래스를 명시하지 않고 생성할 수 있게 하는 생성형 디자인 패턴이다. 제품군의 일관성을 보장하며, 시스템의 독립성과 확장성을 제공하여 다양한 플랫폼이나 환경에서 동일한 인터페이스로 서로 다른 구현체를 생성할 수 있게 한다.</description>
    </item>
    <item>
      <title>Builder Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/builder-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/builder-pattern/</guid>
      <description>빌더 패턴은 복잡한 객체를 단계별로 생성하며, 생성 과정과 표현 방법을 분리해 다양한 조합의 객체 생성을 유연하게 지원하는 생성 패턴이다. 매개변수가 많거나 생성 절차가 복잡한 객체에 효과적이며, 코드 가독성, 유지보수성, 불변성 보장에 유리하다.</description>
    </item>
    <item>
      <title>Prototype Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/prototype-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/prototype-pattern/</guid>
      <description>Prototype 패턴은 객체 생성 비용이 높거나 런타임에 객체 유형이 동적으로 결정될 때 기존 인스턴스를 복제 (clone) 해 새 객체를 만드는 Creational 패턴이다. 클라이언트는 구체 클래스에 의존하지 않고 인터페이스 기반 clone 메서드를 통해 객체를 생성해 유연성과 성능을 개선한다.</description>
    </item>
    <item>
      <title>GoF</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/</link>
      <pubDate>Wed, 25 Sep 2024 01:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/</guid>
      <description>GoF 디자인 패턴은 객체 생성, 구조 조합, 행동 관리를 체계화한 23 가지 솔루션이다. 재사용 가능한 코드 작성을 통해 **유지보수성**과 **확장성**을 높이며, Singleton, Adapter, Observer 등이 대표적이다. 이 패턴들은 복잡한 시스템에서 발생하는 공통 문제를 해결하기 위해 필수적으로 활용된다.</description>
    </item>
  </channel>
</rss>
