<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Transaction-Isolation on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/transaction-isolation/</link>
    <description>Recent content in Transaction-Isolation on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.150.1</generator>
    <language>en</language>
    <lastBuildDate>Fri, 12 Sep 2025 03:49:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/transaction-isolation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lost Update</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/concurrency-anomalies/lost-update/</link>
      <pubDate>Fri, 12 Sep 2025 03:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/concurrency-anomalies/lost-update/</guid>
      <description>로스트 업데이트는 여러 트랜잭션이 동일 데이터를 동시 수정할 때 읽기→수정→쓰기 과정의 비원자성으로 인해 한 트랜잭션의 변경이 다른 트랜잭션에 의해 덮어써지는 현상이다. 원자적 SQL, 잠금(선점적), 낙관적 버저닝, 직렬화 등으로 예방한다.</description>
    </item>
    <item>
      <title>Phantom Read</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/concurrency-anomalies/phantom-read/</link>
      <pubDate>Fri, 12 Sep 2025 03:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/concurrency-anomalies/phantom-read/</guid>
      <description>팬텀 리드는 한 트랜잭션이 동일 조건으로 반복 조회할 때 다른 트랜잭션의 삽입·삭제로 결과가 달라지는 동시성 이상이다. SQL 표준의 SERIALIZABLE이 팬텀을 방지하며, 구현체는 키-범위 잠금, 프레디케이트 잠금 또는 스냅샷 기반 직렬화(SSI)로 대응한다.</description>
    </item>
    <item>
      <title>Write Skew</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/concurrency-anomalies/write-skew/</link>
      <pubDate>Fri, 12 Sep 2025 03:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/concurrency-anomalies/write-skew/</guid>
      <description>Write Skew는 스냅샷 격리에서 서로 다른 행을 동시에 수정해 전체 불변식(예: 최소 인원 유지)을 깨뜨리는 동시성 이상이다. 직접적인 쓰기-쓰기 충돌이 없어 SI에서 감지되지 않으며, 해결책으로는 Serializable/SSI, 읽은 집합 잠금(SELECT FOR UPDATE), 데이터베이스 제약 또는 커밋 전 재검증이 있다.</description>
    </item>
    <item>
      <title>Dirty Read</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/concurrency-anomalies/dirty-read/</link>
      <pubDate>Fri, 12 Sep 2025 03:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/concurrency-anomalies/dirty-read/</guid>
      <description>Dirty Read는 한 트랜잭션이 아직 커밋되지 않은 다른 트랜잭션의 변경을 읽는 현상으로, 롤백 시 잘못된 값을 근거로 후속 연산이 발생해 무결성·재현성·감사 가능성을 해친다. 대다수 실무 환경에서는 기본 금지하고, 허용 시에는 읽기 복제본·스냅샷 사용 또는 엄격한 가드레일을 병행해야 한다.</description>
    </item>
    <item>
      <title>Serializable</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/serializable/</link>
      <pubDate>Fri, 12 Sep 2025 03:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/serializable/</guid>
      <description>Serializable은 트랜잭션 동시 실행 결과가 어떤 순차적 실행 결과와 동일하도록 보장하는 최고 격리 수준이다. 팬텀·쓰기 스큐 등 무결성 위협을 차단하지만, 락·검증·충돌 재시도로 성능 저하 및 재시도 비용이 증가하므로 핵심 업무에 선별 적용해야 한다.</description>
    </item>
    <item>
      <title>Read Committed</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/read-committed/</link>
      <pubDate>Fri, 12 Sep 2025 03:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/read-committed/</guid>
      <description>Read Committed은 트랜잭션이 커밋된 데이터만 읽도록 보장해 Dirty Read를 방지하는 표준 격리 수준이다. 다만 동일 트랜잭션 내 반복 조회에서 값이 달라지는 Non-Repeatable Read와 레코드 추가/삭제로 인한 Phantom은 허용한다. 구현은 락 기반과 MVCC 기반으로 달라지므로 적용 전 엔진 동작·재현 테스트·보완 패턴(재검증, FOR UPDATE, 상향 격리)을 설계해야 한다.</description>
    </item>
    <item>
      <title>Read Uncommitted</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/read-uncommitted/</link>
      <pubDate>Fri, 12 Sep 2025 03:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/read-uncommitted/</guid>
      <description>Read Uncommitted는 SQL 표준의 최저 격리 수준으로 다른 트랜잭션의 커밋되지 않은 변경을 읽을 수 있게 허용한다. 락·스냅샷 오버헤드를 줄여 읽기 지연은 낮지만, Dirty Read·Non-repeatable Read·Phantom 같은 심각한 정합성 이상을 초래할 수 있다. 실제 영향은 DB 엔진(MVCC 여부 등)에 따라 달라지므로 사용 전 엔진 동작 확인과 재현 테스트가 필요하다.</description>
    </item>
    <item>
      <title>Repeatable Read</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/repeatable-read/</link>
      <pubDate>Fri, 12 Sep 2025 03:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/repeatable-read/</guid>
      <description>Repeatable Read는 트랜잭션 안에서 동일 쿼리의 결과가 반복되도록 보장해 Non-repeatable Read를 막는 격리 수준이다. 구현은 락(범위/next-key)과 MVCC(스냅샷) 방식으로 나뉘며, Phantom 억제 여부는 DBMS별 차이가 있어 실무 적용 전 벤더 동작과 성능 영향을 검증해야 한다.</description>
    </item>
    <item>
      <title>MVCC(Multi-Version Concurrency Control, 다중 버전 동시성 제어)</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/optimistic-concurrency-control/versioning/mvcc/</link>
      <pubDate>Wed, 27 Aug 2025 06:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/optimistic-concurrency-control/versioning/mvcc/</guid>
      <description>MVCC는 트랜잭션마다 일관된 스냅샷을 제공하기 위해 데이터의 여러 버전을 유지하는 동시성 제어 방식이다. 읽기는 기존 버전을 읽어 비차단으로 처리되고, 쓰기는 새 버전을 생성해 커밋 시 가시성이 바뀐다. 높은 읽기 동시성과 낮은 락 경합을 제공하지만 버전 누적으로 인한 저장·GC 부담과 일부 격리 이상(issue)이 존재한다.</description>
    </item>
    <item>
      <title>Transaction Isolation</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/</link>
      <pubDate>Mon, 12 May 2025 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/</guid>
      <description>트랜잭션 격리(Transaction Isolation)는 ACID 속성 중 하나로, 동시에 실행되는 트랜잭션 간 간섭을 제어해 데이터 일관성을 보장한다. SQL 표준 격리 수준은 Read Uncommitted, Read Committed, Repeatable Read, Serializable로, 각 수준에 따라 Dirty/Non-Repeatable/Phantom Read 허용 여부와 성능이 달라진다.</description>
    </item>
    <item>
      <title>Transaction Isolation Levels</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/</link>
      <pubDate>Thu, 06 Feb 2025 04:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/</guid>
      <description>트랜잭션 격리 수준(Transaction Isolation Level)은 DBMS가 동시에 실행되는 트랜잭션 간 데이터 접근·갱신 방식을 제어해 Dirty Read, Non-repeatable Read, Phantom Read 등을 방지하는 메커니즘이다. SQL-92 표준의 4단계(Read Uncommitted~Serializable)와 Lock·MVCC 기반 구현을 통해 성능과 일관성 간 균형을 조정한다.</description>
    </item>
  </channel>
</rss>
