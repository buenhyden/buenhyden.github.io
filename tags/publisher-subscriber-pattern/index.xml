<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Publisher-Subscriber-Pattern</title><link>https://buenhyden.github.io/tags/publisher-subscriber-pattern/</link><description>Recent content in Publisher-Subscriber-Pattern on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 16 Jan 2025 03:37:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/publisher-subscriber-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Event-Driven Architecture vs Event Sourcing Pattern vs Publisher-Subscriber Pattern vs Producer-Consumer Pattern</title><link>https://buenhyden.github.io/til/2025/01/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</link><pubDate>Thu, 16 Jan 2025 03:37:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</guid><description>
&lt;h2>Event-Driven Architecture Vs Event Sourcing Pattern Vs Publisher-Subscriber Pattern Vs Producer-Consumer Pattern&lt;span class="hx-absolute -hx-mt-20" id="event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern">&lt;/span>
&lt;a href="#event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Event Sourcing Pattern, Publisher-Subscriber Pattern, Event-Driven Architecture, Producer-Consumer Pattern은 모두 소프트웨어 아키텍처에서 중요한 역할을 하는 패턴들이며, 서로 밀접한 관계를 가지고 있다.&lt;br>
이들의 관계를 다음과 같이 설명할 수 있다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Event-Driven Architecture (EDA)와 다른 패턴들의 관계:&lt;/p>
&lt;ul>
&lt;li>EDA는 이벤트 중심의 시스템 설계를 위한 상위 수준의 아키텍처 스타일.&lt;/li>
&lt;li>Publisher-Subscriber Pattern과 Producer-Consumer Pattern은 EDA를 구현하는 데 사용되는 구체적인 통신 모델이다.&lt;/li>
&lt;li>Event Sourcing Pattern은 EDA의 한 구현 방식으로 볼 수 있으며, 이벤트를 저장하고 관리하는 방법을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Publisher-Subscriber Pattern과 Producer-Consumer Pattern의 관계:&lt;/p>
&lt;ul>
&lt;li>두 패턴 모두 비동기 메시징을 위한 디자인 패턴이지만, 약간의 차이가 있다.&lt;/li>
&lt;li>Publisher-Subscriber Pattern은 메시지를 특정 주제(topic)에 발행하고, 해당 주제를 구독하는 모든 구독자에게 메시지를 전달한다.&lt;/li>
&lt;li>Producer-Consumer Pattern은 일반적으로 메시지를 큐에 넣고, 하나의 소비자가 메시지를 처리한다.&lt;/li>
&lt;li>Publisher-Subscriber Pattern은 Producer-Consumer Pattern의 확장된 형태로 볼 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Event Sourcing Pattern과 다른 패턴들의 관계:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Event Sourcing은 시스템의 상태 변화를 이벤트로 저장하는 방식.&lt;/li>
&lt;li>이 패턴은 Publisher-Subscriber 또는 Producer-Consumer 패턴을 활용하여 이벤트를 발행하고 구독할 수 있다.&lt;/li>
&lt;li>Event Sourcing은 EDA의 핵심 구성 요소 중 하나로, 이벤트의 저장과 재생을 통해 시스템의 상태를 관리한다.&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>통합적 관점:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>EDA는 이러한 패턴들을 포괄하는 상위 개념으로, 시스템 전체의 이벤트 중심 설계를 지향한다.&lt;/li>
&lt;li>Publisher-Subscriber와 Producer-Consumer 패턴은 EDA 내에서 이벤트의 생성과 소비를 관리하는 메커니즘을 제공한다.&lt;/li>
&lt;li>Event Sourcing은 이벤트의 지속성과 시스템 상태 관리를 담당하며, EDA의 이벤트 처리 방식을 보완한다.&lt;/li>
&lt;/ul>
&lt;p>이러한 패턴들은 서로 보완적인 관계를 가지며, 복잡한 분산 시스템에서 함께 사용되어 시너지 효과를 낼 수 있다.&lt;br>
예를 들어, Event Sourcing을 통해 저장된 이벤트는 Publisher-Subscriber 패턴을 통해 다른 서비스에 전파될 수 있으며, 이는 전체적인 Event-Driven Architecture의 일부로 작동할 수 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Event-Driven Architecture&lt;/th>
&lt;th>Event Sourcing Pattern&lt;/th>
&lt;th>Publisher-Subscriber Pattern&lt;/th>
&lt;th>Producer-Consumer Pattern&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>주요 목적&lt;/td>
&lt;td>이벤트 중심의 시스템 설계&lt;/td>
&lt;td>모든 상태 변경을 이벤트로 저장하고 재구성&lt;/td>
&lt;td>메시지 발행자와 구독자 간 느슨한 결합 제공&lt;/td>
&lt;td>데이터 생성과 소비 작업 분리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>핵심 구성 요소&lt;/td>
&lt;td>이벤트 생성자, 이벤트 채널, 이벤트 처리자&lt;/td>
&lt;td>이벤트 스토어, 이벤트 생성자, 이벤트 소비자&lt;/td>
&lt;td>발행자, 구독자, 메시지 브로커&lt;/td>
&lt;td>프로듀서, 컨슈머, 공유 버퍼(큐)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 흐름&lt;/td>
&lt;td>이벤트 발생 → 채널 → 처리&lt;/td>
&lt;td>이벤트 생성 → 저장 → 재생&lt;/td>
&lt;td>메시지 발행 → 브로커 → 구독자 전달&lt;/td>
&lt;td>데이터 생성 → 버퍼 저장 → 소비&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 사용 사례&lt;/td>
&lt;td>마이크로서비스, IoT, 실시간 분석&lt;/td>
&lt;td>감사, 규정 준수, 복잡한 도메인 모델링&lt;/td>
&lt;td>실시간 알림, 데이터 동기화&lt;/td>
&lt;td>작업 큐, 로그 처리, 스트리밍 데이터&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>장점&lt;/td>
&lt;td>높은 확장성, 반응성&lt;/td>
&lt;td>완전한 감사 추적, 시간 기반 쿼리&lt;/td>
&lt;td>느슨한 결합, 실시간 데이터 처리&lt;/td>
&lt;td>비동기 처리, 부하 분산&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>단점&lt;/td>
&lt;td>시스템 복잡도 증가, 일관성 유지 어려움&lt;/td>
&lt;td>구현 복잡성, 스키마 변경 어려움&lt;/td>
&lt;td>메시지 순서 보장 어려움, 복잡한 디버깅&lt;/td>
&lt;td>버퍼 관리 복잡성, 메모리 사용량 증가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>전체 시스템 확장성 제공&lt;/td>
&lt;td>이벤트 저장소 확장성에 의존&lt;/td>
&lt;td>메시지 브로커 확장성에 의존&lt;/td>
&lt;td>프로듀서와 컨슈머 독립 확장 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 저장&lt;/td>
&lt;td>패턴에 따라 다름&lt;/td>
&lt;td>모든 이벤트 영구 저장&lt;/td>
&lt;td>일시적 저장 또는 즉시 처리&lt;/td>
&lt;td>일시적 버퍼 저장&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>복잡성 수준&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>중간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>상태 관리&lt;/td>
&lt;td>이벤트 기반 상태 변경&lt;/td>
&lt;td>이벤트 기반 상태 재구성&lt;/td>
&lt;td>현재 상태 중심&lt;/td>
&lt;td>현재 상태 중심&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Publisher-Subscriber Pattern Vs Producer-Consumer Pattern&lt;span class="hx-absolute -hx-mt-20" id="publisher-subscriber-pattern-vs-producer-consumer-pattern">&lt;/span>
&lt;a href="#publisher-subscriber-pattern-vs-producer-consumer-pattern" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Producer-Consumer Pattern과 Publisher-Subscriber Pattern은 비동기 통신을 위한 소프트웨어 아키텍처 패턴이지만, 몇 가지 중요한 차이점이 있다:&lt;/p>
&lt;p>Producer-Consumer Pattern과 Publisher-Subscriber Pattern의 주요 차이점을 다음 표로 정리했습니다:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Producer-Consumer Pattern&lt;/th>
&lt;th>Publisher-Subscriber Pattern&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>통신 방식&lt;/td>
&lt;td>일대일 또는 일대다&lt;/td>
&lt;td>일대다&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메시지 처리&lt;/td>
&lt;td>각 메시지는 단일 소비자에 의해 처리&lt;/td>
&lt;td>하나의 메시지가 여러 구독자에 의해 동시에 처리 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결합도&lt;/td>
&lt;td>생산자와 소비자 간의 결합도가 상대적으로 높음&lt;/td>
&lt;td>발행자와 구독자 간의 결합도가 낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메시지 분배&lt;/td>
&lt;td>작업 큐를 통해 메시지 분배&lt;/td>
&lt;td>토픽/채널을 통해 메시지 분배&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>소비자 추가로 처리량 증가, 각 메시지는 하나의 소비자만 처리&lt;/td>
&lt;td>새로운 구독자를 쉽게 추가 가능, 모든 구독자가 메시지를 받을 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용 사례&lt;/td>
&lt;td>작업 큐, 부하 분산, 비동기 처리&lt;/td>
&lt;td>이벤트 기반 아키텍처, 실시간 업데이트, 다중 수신자에게 메시지 브로드캐스팅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메시지 보존&lt;/td>
&lt;td>일반적으로 처리 후 메시지 삭제&lt;/td>
&lt;td>메시지 브로커에 따라 메시지 보존 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡성&lt;/td>
&lt;td>상대적으로 단순&lt;/td>
&lt;td>메시지 필터링, 라우팅 등으로 인해 더 복잡할 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>동기화&lt;/td>
&lt;td>생산자와 소비자 간 동기화 필요&lt;/td>
&lt;td>발행자와 구독자 간 동기화 불필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>백프레셔 관리&lt;/td>
&lt;td>큐 크기 제한으로 백프레셔 관리 가능&lt;/td>
&lt;td>메시지 브로커를 통한 백프레셔 관리&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Communication Patterns</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/</link><pubDate>Sat, 28 Dec 2024 12:41:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/</guid><description>
&lt;h2>Communication Patterns&lt;span class="hx-absolute -hx-mt-20" id="communication-patterns">&lt;/span>
&lt;a href="#communication-patterns" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>통신 패턴들은 마이크로서비스 아키텍처에서 서비스 간의 효율적인 통신을 가능하게 하며, 시스템의 확장성, 유연성, 성능을 향상시키는 데 중요한 역할을 한다. 각 패턴은 특정 상황과 요구사항에 따라 선택되어 사용되며, 때로는 여러 패턴을 조합하여 사용하기도 한다.&lt;/p>
&lt;p>비동기 통신 패턴과 메시지 기반 통신 패턴은 유사한 특성을 가지고 있으며, 둘 다 높은 확장성과 성능을 제공한다.&lt;br>
동기 통신 패턴은 구현이 간단하지만 확장성과 성능 면에서 제한적이다.&lt;br>
발행/구독 패턴은 가장 낮은 결합도와 높은 확장성을 제공하지만, 구현 복잡성이 높다.&lt;/p>
&lt;p>&lt;img src="1895.1550201849.png" alt="Illustrating the call flows of sync and async communication. Source: Walking Tree Technologies 2018." loading="lazy" />&lt;br>
_Source: &lt;a href="https://devopedia.org/inter-service-communication-for-microservices" target="_blank" rel="noopener">https://devopedia.org/inter-service-communication-for-microservices&lt;/a> _&lt;/p>
&lt;p>마이크로서비스 아키텍처에서는 서비스 간의 느슨한 결합과 높은 확장성이 중요하기 때문에, 비동기 통신 패턴, 메시지 기반 통신 패턴, 그리고 발행/구독 패턴이 더 널리 사용되는 경향이 있다.&lt;/p>
&lt;p>이러한 통신 패턴들은 다음과 같은 목적을 위해 사용된다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>유연성과 확장성 향상&lt;/strong>:&lt;br>
이러한 패턴들은 서비스 간의 결합도를 낮추어 시스템의 유연성과 확장성을 높인다.&lt;br>
특히 비동기 통신과 발행/구독 패턴은 서비스를 독립적으로 확장할 수 있게 해준다.&lt;/li>
&lt;li>&lt;strong>성능 최적화&lt;/strong>:&lt;br>
비동기 통신과 메시지 기반 통신은 시스템의 전반적인 성능을 향상시킬 수 있다.&lt;br>
서비스가 다른 서비스의 응답을 기다리지 않고 작업을 계속할 수 있어 리소스를 효율적으로 사용할 수 있다.&lt;/li>
&lt;li>&lt;strong>장애 격리&lt;/strong>:&lt;br>
이러한 패턴들은 서비스 간의 의존성을 줄여 한 서비스의 장애가 전체 시스템으로 전파되는 것을 방지한다.&lt;br>
특히 비동기 통신과 메시지 기반 통신은 일시적인 서비스 중단을 더 잘 처리할 수 있다.&lt;/li>
&lt;li>&lt;strong>이벤트 기반 아키텍처 지원&lt;/strong>:&lt;br>
발행/구독 패턴과 메시지 기반 통신은 이벤트 기반 아키텍처를 구현하는 데 매우 유용하다.&lt;br>
이는 시스템이 실시간으로 변화에 반응할 수 있게 해준다.&lt;/li>
&lt;li>&lt;strong>분산 시스템 구현&lt;/strong>:&lt;br>
이러한 패턴들은 분산 시스템을 구현하는 데 필수적이다.&lt;br>
서비스 간의 효율적인 통신을 가능하게 하여 복잡한 분산 시스템을 구축하고 관리할 수 있게 해준다.&lt;/li>
&lt;li>&lt;strong>비즈니스 요구사항 대응&lt;/strong>:&lt;br>
다양한 통신 패턴을 사용함으로써 다양한 비즈니스 요구사항에 더 잘 대응할 수 있다.&lt;br>
예를 들어, 실시간 처리가 필요한 경우 비동기 통신을, 즉각적인 응답이 필요한 경우 동기 통신을 사용할 수 있다.&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>항목&lt;/th>
&lt;th>Synchronous Communication&lt;/th>
&lt;th>Asynchronous Communication&lt;/th>
&lt;th>Request-Response Pattern&lt;/th>
&lt;th>Message-based Communication&lt;/th>
&lt;th>Publisher-Subscriber Pattern&lt;/th>
&lt;th>Event-Driven Pattern&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>기본 개념&lt;/strong>&lt;/td>
&lt;td>- 요청-응답 기반 통신&lt;br>- 호출자가 응답을 기다림&lt;br>- 직접적인 서비스 간 통신&lt;/td>
&lt;td>- 비동기 요청-응답&lt;br>- 호출자가 응답을 기다리지 않음&lt;br>- 콜백이나 이벤트로 결과 처리&lt;/td>
&lt;td>- 클라이언트가 서버에 요청을 보내고 응답을 받음&lt;br>1:1 통신&lt;br>- 요청-응답 사이클 기반&lt;br>- 서비스 간 직접 통신&lt;/td>
&lt;td>- 메시지 큐를 통한 통신&lt;br>- 메시지 브로커 사용&lt;br>- 메시지 기반의 비동기 처리&lt;/td>
&lt;td>- 이벤트 기반 통신&lt;br>- 발행자와 구독자의 분리&lt;br>- 다대다 통신 지원&lt;/td>
&lt;td>- 이벤트 생성과 소비 기반&lt;br>- 이벤트 브로커 사용&lt;br>- 이벤트 중심 비즈니스 로직&lt;br>- 느슨한 결합 구조&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>통신 방식&lt;/strong>&lt;/td>
&lt;td>- REST API&lt;br>gRPC&lt;br>GraphQL&lt;/td>
&lt;td>- 웹소켓&lt;br>Server-Sent Events&lt;br>Long Polling&lt;/td>
&lt;td>- HTTP/REST API&lt;br>gRPC&lt;br>GraphQL&lt;br>SOAP&lt;/td>
&lt;td>- Apache Kafka&lt;br>RabbitMQ&lt;br>Amazon SQS&lt;/td>
&lt;td>- Apache Kafka&lt;br>Redis Pub/Sub&lt;br>RabbitMQ&lt;/td>
&lt;td>- Event Bus&lt;br>Message Broker&lt;br>Event Stream&lt;br>Webhook&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>장점&lt;/strong>&lt;/td>
&lt;td>- 구현이 단순&lt;br>- 즉각적인 응답&lt;br>- 직관적인 에러 처리&lt;br>- 트랜잭션 관리 용이&lt;/td>
&lt;td>- 높은 확장성&lt;br>- 성능 향상&lt;br>- 서비스 간 느슨한 결합&lt;br>- 부하 분산 용이&lt;/td>
&lt;td>- 직관적인 구현&lt;br>- 즉각적인 피드백&lt;br>- 간단한 디버깅&lt;br>- 명확한 인터페이스&lt;/td>
&lt;td>- 안정적인 메시지 전달&lt;br>- 시스템 복원력 향상&lt;br>- 부하 처리 우수&lt;br>- 메시지 영속성&lt;/td>
&lt;td>- 높은 확장성&lt;br>- 유연한 시스템 구조&lt;br>- 실시간 이벤트 처리&lt;br>- 다중 구독자 지원&lt;/td>
&lt;td>- 높은 확장성&lt;br>- 느슨한 결합&lt;br>- 유연한 시스템 구조&lt;br>- 실시간 처리 용이&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>단점&lt;/strong>&lt;/td>
&lt;td>- 강한 결합&lt;br>- 확장성 제한&lt;br>- 지연 시간 증가&lt;br>- 단일 장애점 위험&lt;/td>
&lt;td>- 복잡한 구현&lt;br>- 디버깅 어려움&lt;br>- 일관성 보장 어려움&lt;br>- 추적성 관리 필요&lt;/td>
&lt;td>- 강한 결합도&lt;br>- 동기 처리의 제약&lt;br>- 확장성 제한&lt;br>- 대기 시간 증가&lt;/td>
&lt;td>- 메시지 브로커 의존성&lt;br>- 시스템 복잡도 증가&lt;br>- 추가 인프라 필요&lt;br>- 운영 비용 증가&lt;/td>
&lt;td>- 메시지 순서 보장 어려움&lt;br>- 시스템 복잡도 증가&lt;br>- 메시지 신뢰성 관리 필요&lt;br>- 구독자 관리 부담&lt;/td>
&lt;td>- 복잡한 이벤트 추적&lt;br>- 일관성 보장 어려움&lt;br>- 이벤트 순서 관리&lt;br>- 시스템 복잡도 증가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>적용 사례&lt;/strong>&lt;/td>
&lt;td>- 사용자 인증&lt;br>- 결제 처리&lt;br>CRUD 작업&lt;br>- 실시간 조회&lt;/td>
&lt;td>- 알림 시스템&lt;br>- 로그 처리&lt;br>- 비동기 작업&lt;br>- 배치 처리&lt;/td>
&lt;td>- API 호출&lt;br>- 데이터 조회&lt;br>- 인증/인가&lt;br>- 단순 CRUD 작업&lt;/td>
&lt;td>- 주문 처리&lt;br>- 재고 관리&lt;br>- 이메일 발송&lt;br>- 작업 큐 관리&lt;/td>
&lt;td>- 실시간 모니터링&lt;br>- 이벤트 스트리밍&lt;br>- 로그 수집&lt;br>- 메트릭 수집&lt;/td>
&lt;td>- 실시간 분석&lt;br>- 워크플로우 관리&lt;br>- 도메인 이벤트 처리&lt;br>- 시스템 통합&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>성능 특성&lt;/strong>&lt;/td>
&lt;td>- 낮은 지연 시간&lt;br>- 높은 일관성&lt;br>- 제한된 처리량&lt;br>- 리소스 사용 증가&lt;/td>
&lt;td>- 변동적 지연 시간&lt;br>- 높은 처리량&lt;br>- 리소스 효율성&lt;br>- 부하 분산 가능&lt;/td>
&lt;td>- 예측 가능한 지연시간&lt;br>- 높은 일관성&lt;br>- 제한된 처리량&lt;br>- 동시성 제약&lt;/td>
&lt;td>- 안정적인 처리량&lt;br>- 메시지 보장&lt;br>- 부하 조절 가능&lt;br>- 장애 복구 지원&lt;/td>
&lt;td>- 높은 처리량&lt;br>- 실시간 성능&lt;br>- 확장성 우수&lt;br>- 부하 분산 자동화&lt;/td>
&lt;td>- 높은 처리량&lt;br>- 비동기 처리&lt;br>- 확장성 우수&lt;br>- 이벤트 버퍼링&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>설계 고려사항&lt;/strong>&lt;/td>
&lt;td>- 타임아웃 설정&lt;br>- 서킷 브레이커 적용&lt;br>- 재시도 정책&lt;br>- 에러 처리&lt;/td>
&lt;td>- 메시지 순서&lt;br>- 상태 관리&lt;br>- 장애 처리&lt;br>- 모니터링&lt;/td>
&lt;td>- 타임아웃 설정&lt;br>- 재시도 정책&lt;br>- 서킷브레이커&lt;br>API 버전 관리&lt;/td>
&lt;td>- 메시지 포맷&lt;br>- 큐 관리&lt;br>- 데드레터 큐&lt;br>- 메시지 라우팅&lt;/td>
&lt;td>- 이벤트 스키마&lt;br>- 구독자 관리&lt;br>- 메시지 필터링&lt;br>- 장애 복구&lt;/td>
&lt;td>- 이벤트 스키마&lt;br>- 이벤트 저장소&lt;br>- 이벤트 라우팅&lt;br>- 실패 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>모니터링/운영&lt;/strong>&lt;/td>
&lt;td>- 응답 시간&lt;br>- 에러율&lt;br>- 서비스 상태&lt;br>- 트래픽 패턴&lt;/td>
&lt;td>- 메시지 처리율&lt;br>- 큐 길이&lt;br>- 처리 지연&lt;br>- 실패율&lt;/td>
&lt;td>- 응답 시간&lt;br>- 요청 성공률&lt;br>API 사용량&lt;br>- 에러율&lt;/td>
&lt;td>- 큐 상태&lt;br>- 처리량&lt;br>- 브로커 상태&lt;br>- 메시지 적체&lt;/td>
&lt;td>- 이벤트 처리율&lt;br>- 구독자 상태&lt;br>- 전달 지연&lt;br>- 시스템 부하&lt;/td>
&lt;td>- 이벤트 처리율&lt;br>- 이벤트 지연시간&lt;br>- 이벤트 큐 상태&lt;br>consumer 상태&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Request-Response Pattern은 Synchronous Communication과 많은 특징을 공유하지만, 비동기적으로도 구현될 수 있어 더 유연하다.&lt;/li>
&lt;li>Event-Driven Pattern은 Publisher-Subscriber Pattern과 유사하나, 이벤트의 발생과 처리에 더 중점을 두며 시스템 전체의 아키텍처적 관점을 가진다.&lt;/li>
&lt;li>두 패턴 모두 다른 패턴들과 조합하여 사용될 수 있으며, 특히 마이크로서비스 아키텍처에서는 여러 패턴을 상황에 맞게 혼용하는 것이 일반적이다.&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>패턴 선택 기준&lt;/p>
&lt;ul>
&lt;li>실시간성이 필요한 경우: Synchronous Communication&lt;/li>
&lt;li>높은 확장성이 필요한 경우: Asynchronous 또는 Pub/Sub&lt;/li>
&lt;li>안정적인 메시지 전달이 중요한 경우: Message-based&lt;/li>
&lt;li>이벤트 기반 처리가 필요한 경우: Publisher-Subscriber&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>패턴 조합 사용&lt;/p>
&lt;ul>
&lt;li>실제 MSA 환경에서는 단일 패턴만 사용하지 않음&lt;/li>
&lt;li>요구사항에 따라 여러 패턴을 조합하여 사용&lt;/li>
&lt;li>각 패턴의 장점을 활용하고 단점을 보완&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>구현 시 고려사항&lt;/p>
&lt;ul>
&lt;li>시스템의 규모와 복잡도&lt;/li>
&lt;li>팀의 기술적 역량&lt;/li>
&lt;li>운영/모니터링 환경&lt;/li>
&lt;li>비용과 리소스 제약&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>MSA 환경에서는 이러한 통신 패턴들을 적절히 조합하여 사용하는 것이 중요하다.&lt;br>
각 서비스의 특성과 요구사항을 고려하여 최적의 패턴을 선택하고, 필요한 경우 여러 패턴을 함께 사용하는 것이 효과적이다.&lt;/p>
&lt;h3>Message-based Communication Vs Publisher-subscriber Pattern Vs Event-Driven Pattern&lt;span class="hx-absolute -hx-mt-20" id="message-based-communication-vs-publisher-subscriber-pattern-vs-event-driven-pattern">&lt;/span>
&lt;a href="#message-based-communication-vs-publisher-subscriber-pattern-vs-event-driven-pattern" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>&lt;img src="event-driven-architecture-pubsub-1-comparison-overview.svg" alt="메시지 큐 모델과 Pub/Sub 이벤트 스트림 모델의 비교" loading="lazy" />&lt;br>
_Source: &lt;a href="https://cloud.google.com/solutions/event-driven-architecture-pubsub?hl=ko" target="_blank" rel="noopener">https://cloud.google.com/solutions/event-driven-architecture-pubsub?hl=ko&lt;/a> _&lt;/p>
&lt;p>Event-Driven Pattern은 이벤트 중심의 설계로, 상태 변화를 이벤트로 처리하고 비동기적으로 시스템 컴포넌트들이 반응하는 방식을 취한다.&lt;br>
이는 높은 확장성과 유연성을 제공하며, 복잡한 비즈니스 프로세스를 처리하는 데 적합하다.&lt;br>
Event-Driven Pattern은 다른 두 패턴과 비교하여 더 높은 수준의 추상화를 제공하며, 시스템의 전반적인 아키텍처에 영향을 미친다. 이 패턴은 마이크로서비스 아키텍처와 잘 어울리며, 실시간 데이터 처리와 복잡한 워크플로우 관리에 특히 유용하다.&lt;/p>
&lt;p>각 패턴은 고유한 장단점을 가지고 있으며, 시스템의 요구사항과 특성에 따라 적절한 패턴을 선택하거나 조합하여 사용할 수 있다.&lt;br>
예를 들어, 높은 신뢰성과 순서 보장이 필요한 경우 Message-based Communication을,&lt;br>
실시간 데이터 스트리밍이 필요한 경우 Publisher-Subscriber Pattern을,&lt;br>
그리고 복잡한 비즈니스 로직과 높은 확장성이 필요한 경우 Event-Driven Pattern을 선택할 수 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>비교 항목&lt;/th>
&lt;th>Message-based Communication&lt;/th>
&lt;th>Publisher-Subscriber Pattern&lt;/th>
&lt;th>Event-Driven Pattern&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>기본 개념&lt;/strong>&lt;/td>
&lt;td>- 메시지 큐를 통한 점대점(Point-to-Point) 통신&lt;br>- 단일 수신자 지향&lt;br>- 메시지는 한 번만 처리됨&lt;br>- 메시지 보존 및 순서 보장 중시&lt;/td>
&lt;td>- 이벤트 기반의 다대다 통신&lt;br>- 다중 수신자 지향&lt;br>- 동일 메시지 다수 구독자 처리 가능&lt;br>- 이벤트 전파와 실시간성 중시&lt;/td>
&lt;td>- 이벤트 중심의 비즈니스 로직&lt;br>- 상태 변화를 이벤트로 처리&lt;br>- 이벤트 소싱 가능&lt;br>- 도메인 이벤트 중심 설계&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메시지 전달 방식&lt;/strong>&lt;/td>
&lt;td>- 큐 기반 전달&lt;br>FIFO 순서 보장&lt;br>- 메시지 영속성 지원&lt;br>- 메시지 손실 방지 메커니즘&lt;/td>
&lt;td>- 토픽/채널 기반 전달&lt;br>- 브로드캐스팅 방식&lt;br>- 실시간 스트리밍 가능&lt;br>- 이벤트 기반 라우팅&lt;/td>
&lt;td>- 이벤트 스트림 기반&lt;br>- 이벤트 소싱&lt;br>- 상태 변경 전파&lt;br>- 이벤트 저장소 활용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>수신자 처리&lt;/strong>&lt;/td>
&lt;td>- 단일 수신자가 메시지 처리&lt;br>- 메시지 처리 후 큐에서 제거&lt;br>- 작업 분배 패턴&lt;br>- 로드 밸런싱 용이&lt;/td>
&lt;td>- 다수의 구독자 동시 처리&lt;br>- 메시지 복사본 전달&lt;br>- 관심사 기반 구독&lt;br>- 동적 구독자 관리&lt;/td>
&lt;td>- 이벤트 핸들러 기반 처리&lt;br>- 이벤트 소스별 처리&lt;br>- 이벤트 재생 가능&lt;br>- 상태 재구성 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>데이터 지속성&lt;/strong>&lt;/td>
&lt;td>- 강력한 메시지 보존&lt;br>- 디스크 기반 저장&lt;br>- 장애 복구 지원&lt;br>- 트랜잭션 지원&lt;/td>
&lt;td>- 일시적 메시지 처리&lt;br>- 메모리 기반 처리&lt;br>- 실시간 전달 중심&lt;br>- 이벤트 스트리밍&lt;/td>
&lt;td>- 이벤트 저장소 영구 보존&lt;br>- 이벤트 히스토리 관리&lt;br>- 상태 스냅샷 지원&lt;br>- 이벤트 버전 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>확장성 특성&lt;/strong>&lt;/td>
&lt;td>- 수직적 확장성&lt;br>- 큐 파티셔닝&lt;br>- 메시지 그룹핑&lt;br>- 처리량 제어&lt;/td>
&lt;td>- 수평적 확장성&lt;br>- 토픽 파티셔닝&lt;br>- 구독자 그룹&lt;br>- 동적 스케일링&lt;/td>
&lt;td>- 이벤트 소싱 기반 확장&lt;br>- 이벤트 파티셔닝&lt;br>CQRS 패턴 활용&lt;br>- 분산 처리 용이&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주요 사용 사례&lt;/strong>&lt;/td>
&lt;td>- 주문 처리 시스템&lt;br>- 결제 처리&lt;br>- 배치 작업&lt;br>- 워크플로우 관리&lt;/td>
&lt;td>- 실시간 모니터링&lt;br>- 로그 수집&lt;br>- 알림 시스템&lt;br>- 실시간 분석&lt;/td>
&lt;td>- 도메인 이벤트 처리&lt;br>- 감사 로깅&lt;br>- 상태 추적&lt;br>- 비즈니스 프로세스 자동화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>구현 도구&lt;/strong>&lt;/td>
&lt;td>- RabbitMQ&lt;br>ActiveMQ&lt;br>Amazon SQS&lt;br>Azure Service Bus&lt;/td>
&lt;td>- Apache Kafka&lt;br>Redis Pub/Sub&lt;br>Google Cloud Pub/Sub&lt;br>AWS SNS&lt;/td>
&lt;td>- Event Store&lt;br>Axon Framework&lt;br>Eventuate&lt;br>Apache Kafka Streams&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>장점&lt;/strong>&lt;/td>
&lt;td>- 신뢰성 높은 메시지 전달&lt;br>- 트랜잭션 보장&lt;br>- 순서 보장&lt;br>- 장애 복구 용이&lt;/td>
&lt;td>- 높은 확장성&lt;br>- 낮은 지연 시간&lt;br>- 유연한 구독 모델&lt;br>- 실시간 처리&lt;/td>
&lt;td>- 완벽한 감사 추적&lt;br>- 시스템 상태 재현&lt;br>- 높은 확장성&lt;br>- 도메인 중심 설계&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>단점&lt;/strong>&lt;/td>
&lt;td>- 상대적으로 높은 지연시간&lt;br>- 시스템 복잡도 증가&lt;br>- 운영 비용 증가&lt;br>- 큐 관리 부담&lt;/td>
&lt;td>- 메시지 순서 보장 어려움&lt;br>- 일시적 메시지 손실 가능&lt;br>- 구독자 관리 복잡&lt;br>- 중복 처리 가능성&lt;/td>
&lt;td>- 학습 곡선이 높음&lt;br>- 복잡한 이벤트 관리&lt;br>- 저장소 크기 증가&lt;br>- 이벤트 버전 관리 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>성능 특성&lt;/strong>&lt;/td>
&lt;td>- 높은 신뢰성&lt;br>- 중간~높은 지연시간&lt;br>- 보통 처리량&lt;br>- 리소스 사용량 높음&lt;/td>
&lt;td>- 낮은 지연시간&lt;br>- 매우 높은 처리량&lt;br>- 효율적 리소스 사용&lt;br>- 실시간 성능&lt;/td>
&lt;td>- 읽기 성능 우수&lt;br>- 쓰기 지연 가능&lt;br>- 이벤트 재생 부하&lt;br>- 스냅샷 처리 영향&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>모니터링 중점&lt;/strong>&lt;/td>
&lt;td>- 큐 길이&lt;br>- 처리 지연&lt;br>- 메시지 상태&lt;br>- 실패율&lt;/td>
&lt;td>- 구독자 상태&lt;br>- 이벤트 처리율&lt;br>- 전달 지연&lt;br>- 시스템 부하&lt;/td>
&lt;td>- 이벤트 처리 상태&lt;br>- 이벤트 스토어 크기&lt;br>- 재생 성능&lt;br>- 스냅샷 생성 주기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>장애 처리&lt;/strong>&lt;/td>
&lt;td>- 자동 재시도&lt;br>- 데드레터 큐&lt;br>- 장애 복구 메커니즘&lt;br>- 메시지 재처리&lt;/td>
&lt;td>- 구독자 재연결&lt;br>- 이벤트 재발행&lt;br>- 장애 격리&lt;br>- 백프레셔 처리&lt;/td>
&lt;td>- 이벤트 재생&lt;br>- 스냅샷 복구&lt;br>- 버전 충돌 해결&lt;br>- 이벤트 정합성 검증&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>세 패턴의 주요 차이점:&lt;/p>
&lt;ol>
&lt;li>메시지 전달 방식과 목적
&lt;ol>
&lt;li>Message-based Communication은 신뢰성 있는 메시지 전달에 중점을 둔다.&lt;br>
메시지는 큐에 저장되어 순차적으로 처리되며, 하나의 메시지는 단일 수신자에 의해서만 처리된다.&lt;br>
예를 들어, 주문 처리 시스템에서 각 주문은 정확히 한 번만 처리되어야 하므로 이 패턴이 적합하다.&lt;/li>
&lt;li>Publisher-Subscriber Pattern은 이벤트의 실시간 전파에 초점을 맞춘다.&lt;br>
하나의 이벤트가 여러 구독자에게 동시에 전달될 수 있으며, 구독자들은 자신의 관심사에 따라 필요한 이벤트만 수신한다.&lt;br>
실시간 모니터링 시스템이 좋은 예시이다. 시스템 상태 변경을 여러 모니터링 도구가 동시에 관찰해야 하는 경우에 효과적이다.&lt;/li>
&lt;li>Event-Driven Pattern은 비즈니스 로직을 이벤트 중심으로 구성한다.&lt;br>
시스템의 상태 변화를 이벤트로 표현하고, 이를 기반으로 다른 작업들이 트리거된다.&lt;br>
이는 도메인 이벤트를 중심으로 시스템을 설계하는 방식으로, 예를 들어 전자상거래 시스템에서 &amp;lsquo;주문완료&amp;rsquo; 이벤트가 발생하면 자동으로 재고 확인, 결제 처리, 배송 준비 등의 프로세스가 시작되는 방식이다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>데이터 처리와 저장
&lt;ol>
&lt;li>Message-based Communication은 메시지의 영속성과 순서를 보장한다.&lt;br>
모든 메시지는 디스크에 저장되어 장애 상황에서도 손실되지 않으며, FIFO(First In First Out) 순서가 유지된다.&lt;br>
이는 금융 거래와 같이 데이터 손실이 허용되지 않는 시스템에 적합하다.&lt;/li>
&lt;li>Publisher-Subscriber Pattern은 일반적으로 메모리 기반의 실시간 처리를 수행한다.&lt;br>
이벤트는 발생 즉시 구독자들에게 전달되며, 영속성보다는 전달 속도가 중요시된다.&lt;br>
실시간 채팅 시스템이나 주식 시세 정보 전달과 같은 용도에 적합하다.&lt;/li>
&lt;li>Event-Driven Pattern은 이벤트 저장소를 통해 모든 이벤트의 히스토리를 보관한다.&lt;br>
이를 통해 시스템의 상태를 언제든 재구성할 수 있으며, 감사(audit) 추적이 가능하다.&lt;br>
이는 규제가 엄격한 산업이나 변경 이력 추적이 중요한 시스템에 유용하다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>선택 기준:&lt;/p>
&lt;ol>
&lt;li>시스템 요구사항에 따른 선택 신뢰성이 최우선인 경우: Message-based Communication을 선택한다.&lt;br>
메시지 손실이 허용되지 않는 금융 거래, 주문 처리 등의 시스템에 적합하다.&lt;/li>
&lt;li>실시간성이 중요한 경우: Publisher-Subscriber Pattern이 적합하다.&lt;br>
실시간 알림, 모니터링, 로그 수집 등 즉각적인 데이터 전파가 필요한 상황에서 사용한다.&lt;/li>
&lt;li>비즈니스 프로세스 자동화가 필요한 경우: Event-Driven Pattern을 고려한다.&lt;br>
복잡한 업무 흐름을 이벤트 기반으로 자동화하고, 시스템의 상태 변화를 추적해야 하는 경우에 적합하다.&lt;/li>
&lt;li>기술적 고려사항 확장성 요구사항: Publisher-Subscriber Pattern과 Event-Driven Pattern은 높은 확장성을 제공한다.&lt;br>
구독자나 이벤트 핸들러를 독립적으로 확장할 수 있다.&lt;/li>
&lt;li>운영 복잡도:&lt;br>
Message-based Communication은 상대적으로 단순한 운영을 제공한다.&lt;br>
반면 Event-Driven Pattern은 복잡한 이벤트 관리와 버전 관리가 필요할 수 있다.&lt;/li>
&lt;li>리소스 사용:&lt;br>
Message-based Communication은 메시지 저장과 관리를 위해 더 많은 리소스를 필요로 한다.&lt;br>
Publisher-Subscriber Pattern은 메모리 기반 처리로 리소스 사용이 효율적이다.&lt;/li>
&lt;/ol>
&lt;p>실제 구현 시에는 이러한 패턴들을 조합하여 사용하는 것이 일반적이다. 예를 들어, 중요한 트랜잭션은 Message-based Communication으로 처리하고, 상태 변경 알림은 Publisher-Subscriber Pattern을 통해 전달하며, 전체 시스템의 워크플로우는 Event-Driven Pattern으로 관리하는 방식이다. 이를 통해 각 패턴의 장점을 최대한 활용하면서 시스템의 요구사항을 효과적으로 충족할 수 있다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>발행/구독 패턴 (Publisher-Subscriber Pattern)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/publisher-subscriber-pattern/</link><pubDate>Sat, 28 Dec 2024 07:05:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication/publisher-subscriber-pattern/</guid><description>
&lt;h2>발행/구독 패턴 (Publisher-Subscriber Pattern)&lt;span class="hx-absolute -hx-mt-20" id="발행구독-패턴-publisher-subscriber-pattern">&lt;/span>
&lt;a href="#%eb%b0%9c%ed%96%89%ea%b5%ac%eb%8f%85-%ed%8c%a8%ed%84%b4-publisher-subscriber-pattern" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>발행/구독 패턴(Publisher-Subscriber Pattern)은 마이크로서비스 아키텍처(MSA)에서 통신 패턴 중 하나이다.&lt;br>
이 패턴은 컴포넌트 간의 느슨한 결합을 가능하게 하며, 확장성과 유연성을 제공한다.&lt;/p>
&lt;p>발행/구독 패턴은 메시지를 생성하는 발행자(Publisher)와 메시지를 수신하는 구독자(Subscriber) 사이의 비동기 통신 모델이다.&lt;br>
이 패턴에서 발행자는 특정 수신자를 지정하지 않고 메시지를 발행하며, 구독자는 관심 있는 메시지 유형을 구독한다.&lt;/p>
&lt;h3>MSA에서의 활용&lt;span class="hx-absolute -hx-mt-20" id="msa에서의-활용">&lt;/span>
&lt;a href="#msa%ec%97%90%ec%84%9c%ec%9d%98-%ed%99%9c%ec%9a%a9" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>마이크로서비스 아키텍처에서 발행/구독 패턴은 다음과 같은 상황에서 유용하다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>이벤트 기반 아키텍처&lt;/strong>: 서비스 간 이벤트 전파에 사용된다.&lt;/li>
&lt;li>&lt;strong>비동기 통신&lt;/strong>: 서비스 간 느슨한 결합을 유지하면서 비동기 통신을 구현한다.&lt;/li>
&lt;li>&lt;strong>확장성&lt;/strong>: 새로운 마이크로서비스를 쉽게 추가하고 기존 서비스에 영향을 주지 않고 기능을 확장할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>낮은 결합도&lt;/strong>: 발행자와 구독자는 서로의 존재를 알 필요가 없다.&lt;/li>
&lt;li>&lt;strong>확장성&lt;/strong>: 새로운 구독자나 발행자를 쉽게 추가할 수 있다.&lt;/li>
&lt;li>&lt;strong>유연성&lt;/strong>: 다양한 컴포넌트가 메시지를 다른 방식으로 처리할 수 있다.&lt;/li>
&lt;li>&lt;strong>비동기 통신&lt;/strong>: 시스템 컴포넌트 간의 비동기 통신을 가능하게 한다.&lt;/li>
&lt;/ol>
&lt;h3>단점&lt;span class="hx-absolute -hx-mt-20" id="단점">&lt;/span>
&lt;a href="#%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>복잡성&lt;/strong>: 브로커의 로직이 복잡해질 수 있으며, 디버깅이 어려울 수 있다.&lt;/li>
&lt;li>&lt;strong>메시지 전달 보장&lt;/strong>: 일부 시스템에서는 메시지 전달을 완전히 보장하기 어려울 수 있다.&lt;/li>
&lt;li>&lt;strong>일관성&lt;/strong>: 발행자와 구독자 간의 관계 파악이 어려울 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>주요 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="주요-구성-요소">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>발행자(Publisher)&lt;/strong>: 메시지나 이벤트를 생성하고 브로커에게 전송한다.&lt;/li>
&lt;li>&lt;strong>구독자(Subscriber)&lt;/strong>: 특정 유형의 메시지나 이벤트를 수신하고 처리한다.&lt;/li>
&lt;li>&lt;strong>메시지 브로커(Message Broker)&lt;/strong>: 발행자와 구독자 사이에서 메시지를 중개하는 역할을 한다.&lt;/li>
&lt;/ol>
&lt;h3>작동 방식&lt;span class="hx-absolute -hx-mt-20" id="작동-방식">&lt;/span>
&lt;a href="#%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>구독자는 메시지 브로커를 통해 관심 있는 토픽이나 메시지 유형을 구독한다.&lt;/li>
&lt;li>발행자는 메시지를 생성하고 브로커에게 전송한다.&lt;/li>
&lt;li>브로커는 수신한 메시지를 해당 토픽이나 유형을 구독한 모든 구독자에게 전달한다.&lt;/li>
&lt;li>구독자는 수신한 메시지를 처리한다.&lt;/li>
&lt;/ol>
&lt;pre class="mermaid hx-mt-6">flowchart TD
Publisher-->|이벤트 발행|Topic[토픽/채널]
Topic-->|구독|Subscriber1
Topic-->|구독|Subscriber2
Topic-->|구독|Subscriber3
style Topic fill:#f9f,stroke:#333,stroke-width:4px
style Publisher fill:#bbf
style Subscriber1 fill:#bfb
style Subscriber2 fill:#bfb
style Subscriber3 fill:#bfb&lt;/pre>&lt;h3>메시지 필터링&lt;span class="hx-absolute -hx-mt-20" id="메시지-필터링">&lt;/span>
&lt;a href="#%eb%a9%94%ec%8b%9c%ec%a7%80-%ed%95%84%ed%84%b0%eb%a7%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>발행/구독 패턴에서는 두 가지 주요 필터링 방식이 있다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>토픽 기반(Topic-based)&lt;/strong>: 메시지는 특정 토픽이나 채널로 발행되며, 구독자는 관심 있는 토픽을 구독한다.&lt;/li>
&lt;li>&lt;strong>내용 기반(Content-based)&lt;/strong>: 구독자가 정의한 조건에 따라 메시지가 필터링된다.&lt;/li>
&lt;/ol>
&lt;h3>토폴로지&lt;span class="hx-absolute -hx-mt-20" id="토폴로지">&lt;/span>
&lt;a href="#%ed%86%a0%ed%8f%b4%eb%a1%9c%ec%a7%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>발행/구독 시스템은 주로 두 가지 토폴로지를 사용한다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>브로커 기반&lt;/strong>: 중앙 메시지 브로커나 이벤트 버스를 사용하여 메시지를 라우팅한다.&lt;/li>
&lt;li>&lt;strong>브로커리스&lt;/strong>: 발행자와 구독자가 직접 통신하며, IP 멀티캐스트를 통해 메타데이터를 공유한다.&lt;/li>
&lt;/ol>
&lt;h3>메시지 전달 품질(QoS)&lt;span class="hx-absolute -hx-mt-20" id="메시지-전달-품질qos">&lt;/span>
&lt;a href="#%eb%a9%94%ec%8b%9c%ec%a7%80-%ec%a0%84%eb%8b%ac-%ed%92%88%ec%a7%88qos" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>발행/구독 시스템은 다음과 같은 서비스 품질 수준을 제공할 수 있다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>최대 한 번(At most once)&lt;/strong>: 메시지가 전달되지 않을 수 있지만 중복 전달은 없다.&lt;/li>
&lt;li>&lt;strong>최소 한 번(At least once)&lt;/strong>: 메시지가 반드시 전달되지만 중복 전달이 발생할 수 있다.&lt;/li>
&lt;li>&lt;strong>정확히 한 번(Exactly once)&lt;/strong>: 메시지가 정확히 한 번만 전달된다.&lt;/li>
&lt;/ol>
&lt;h3>구현 예시&lt;span class="hx-absolute -hx-mt-20" id="구현-예시">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Dict&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Callable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">dataclasses&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">dataclass&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">field&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">datetime&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">datetime&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">queue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@dataclass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Message&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">topic&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">content&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">any&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">timestamp&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">datetime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">field&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">default_factory&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MessageBroker&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">topics&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Dict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Callable&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">message_queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Queue&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_start_dispatcher&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">publish&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">topic&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">any&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;메시지를 특정 토픽으로 발행&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">msg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">topic&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">topic&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">message_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Published: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">topic&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> - &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">topic&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">callback&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Callable&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;특정 토픽에 대한 구독자 등록&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">topic&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">topics&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">topics&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">topic&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">topics&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">topic&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">callback&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Subscribed to: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">topic&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">_start_dispatcher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;메시지 디스패처 스레드 시작&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">dispatcher&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">msg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">message_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">topic&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">topics&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">callback&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">topics&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">topic&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">message_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">task_done&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">dispatcher&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">daemon&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 사용 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">order_processor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">order_data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Processing order: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">order_data&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">inventory_manager&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">order_data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Updating inventory for order: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">order_data&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">notification_sender&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">order_data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Sending notification for order: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">order_data&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 메시지 브로커 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">broker&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MessageBroker&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 구독자 등록&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">broker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;new_order&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">order_processor&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">broker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;new_order&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">inventory_manager&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">broker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;new_order&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">notification_sender&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 주문 발행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">order&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;order_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;12345&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;product&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;laptop&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;quantity&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">broker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">publish&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;new_order&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">order&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 메시지 처리 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>위 코드는 발행/구독 패턴의 핵심 컴포넌트들을 구현한 것이다.&lt;br>
각 부분을 자세히 살펴보자:&lt;/p>
&lt;ol>
&lt;li>Message 클래스
&lt;ul>
&lt;li>토픽, 컨텐츠, 타임스탬프를 포함하는 메시지 구조 정의&lt;/li>
&lt;li>데이터의 일관성과 추적성 보장&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>MessageBroker 클래스
&lt;ul>
&lt;li>메시지의 발행과 구독을 관리하는 중앙 컴포넌트&lt;/li>
&lt;li>토픽별 구독자 관리 및 메시지 큐 처리&lt;/li>
&lt;li>비동기 메시지 처리를 위한 디스패처 스레드 운영&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>주요 메서드
&lt;ul>
&lt;li>publish(): 특정 토픽으로 메시지 발행&lt;/li>
&lt;li>subscribe(): 토픽에 대한 구독자 등록&lt;/li>
&lt;li>_start_dispatcher(): 백그라운드에서 메시지 처리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>구현 기술&lt;span class="hx-absolute -hx-mt-20" id="구현-기술">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84-%ea%b8%b0%ec%88%a0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>발행/구독 패턴을 구현하는 데 사용되는 기술들은 다음과 같다:&lt;/p>
&lt;ul>
&lt;li>Apache Kafka&lt;/li>
&lt;li>RabbitMQ&lt;/li>
&lt;li>Redis&lt;/li>
&lt;li>Amazon SNS/SQS&lt;/li>
&lt;li>Google Cloud Pub/Sub&lt;/li>
&lt;li>Azure Service Bus&lt;/li>
&lt;/ul>
&lt;h3>실제 구현 시 고려사항&lt;span class="hx-absolute -hx-mt-20" id="실제-구현-시-고려사항">&lt;/span>
&lt;a href="#%ec%8b%a4%ec%a0%9c-%ea%b5%ac%ed%98%84-%ec%8b%9c-%ea%b3%a0%eb%a0%a4%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>메시지 신뢰성&lt;/p>
&lt;ul>
&lt;li>메시지 전달 보장&lt;/li>
&lt;li>중복 메시지 처리 방지&lt;/li>
&lt;li>실패 시 재시도 메커니즘&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>확장성&lt;/p>
&lt;ul>
&lt;li>다수의 발행자/구독자 처리&lt;/li>
&lt;li>대용량 메시지 처리 능력&lt;/li>
&lt;li>시스템 부하 분산&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>모니터링과 디버깅&lt;/p>
&lt;ul>
&lt;li>메시지 흐름 추적&lt;/li>
&lt;li>시스템 상태 모니터링&lt;/li>
&lt;li>문제 발생 시 빠른 대응&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Publisher-Subscriber Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/publisher-subscriber-pattern/</link><pubDate>Wed, 20 Nov 2024 11:40:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/publisher-subscriber-pattern/</guid><description>
&lt;h2>Publisher-Subscriber Pattern&lt;span class="hx-absolute -hx-mt-20" id="publisher-subscriber-pattern">&lt;/span>
&lt;a href="#publisher-subscriber-pattern" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Publisher-Subscriber Pattern(게시자-구독자 패턴)은 소프트웨어 아키텍처에서 중요한 디자인 패턴 중 하나로, 분산 시스템에서 비동기 통신을 구현하는 데 널리 사용된다.&lt;br>
이 패턴은 메시지를 보내는 발행자(Publisher)와 메시지를 받는 구독자(Subscriber) 사이의 느슨한 결합(Loose Coupling)을 제공하는 메시징 패턴으로, 발행자는 메시지를 특정 주제(Topic)나 채널로 발행하고, 해당 주제를 구독하는 모든 구독자들이 그 메시지를 받게 된다.&lt;br>
이 패턴은 컴포넌트 간의 느슨한 결합을 제공하여 확장성과 유연성을 높이는 데 기여한다.&lt;/p>
&lt;p>
&lt;img src="../publish-subscribe.png" alt="logical components of Publisher-Subscriber Pattern" loading="lazy" />&lt;br>
_Source: &lt;a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/publisher-subscriber" target="_blank" rel="noopener">https://learn.microsoft.com/en-us/azure/architecture/patterns/publisher-subscriber&lt;/a> _&lt;/p>
&lt;h3>기본 개념&lt;span class="hx-absolute -hx-mt-20" id="기본-개념">&lt;/span>
&lt;a href="#%ea%b8%b0%eb%b3%b8-%ea%b0%9c%eb%85%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Publisher-Subscriber 패턴의 핵심 개념은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>게시자(Publisher)&lt;/strong>: 메시지를 생성하고 전송하는 컴포넌트이다.&lt;/li>
&lt;li>&lt;strong>구독자(Subscriber)&lt;/strong>: 메시지를 수신하고 처리하는 컴포넌트이다.&lt;/li>
&lt;li>&lt;strong>메시지 브로커(Message Broker)&lt;/strong>: 게시자와 구독자 사이에서 메시지를 중계하는 중간 컴포넌트이다.&lt;/li>
&lt;li>&lt;strong>토픽(Topic)&lt;/strong>: 메시지를 분류하는 논리적 채널이다.&lt;/li>
&lt;/ol>
&lt;h3>작동 방식&lt;span class="hx-absolute -hx-mt-20" id="작동-방식">&lt;/span>
&lt;a href="#%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>구독자는 관심 있는 토픽에 대해 메시지 브로커에 구독을 등록한다.&lt;/li>
&lt;li>게시자는 특정 토픽에 대한 메시지를 메시지 브로커에 전송한다.&lt;/li>
&lt;li>메시지 브로커는 해당 토픽을 구독한 모든 구독자에게 메시지를 전달한다.&lt;/li>
&lt;li>구독자는 수신한 메시지를 비동기적으로 처리한다.&lt;/li>
&lt;/ol>
&lt;h3>주요 특징&lt;span class="hx-absolute -hx-mt-20" id="주요-특징">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>느슨한 결합&lt;/strong>: 게시자와 구독자는 서로의 존재를 모르며, 오직 메시지 브로커를 통해 통신한다.&lt;/li>
&lt;li>&lt;strong>확장성&lt;/strong>: 새로운 게시자나 구독자를 쉽게 추가할 수 있어 시스템 확장이 용이하다.&lt;/li>
&lt;li>&lt;strong>비동기 통신&lt;/strong>: 메시지 전송과 처리가 비동기적으로 이루어져 시스템의 응답성을 향상시킨다.&lt;/li>
&lt;li>&lt;strong>다대다 통신&lt;/strong>: 하나의 메시지가 여러 구독자에게 전달될 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>유연성&lt;/strong>: 시스템 구성 요소를 독립적으로 개발하고 수정할 수 있다.&lt;/li>
&lt;li>&lt;strong>신뢰성&lt;/strong>: 메시지 브로커가 메시지 전달을 보장하여 시스템의 안정성을 높인다.&lt;/li>
&lt;li>&lt;strong>성능&lt;/strong>: 비동기 처리로 인해 전체 시스템의 성능이 향상된다.&lt;/li>
&lt;li>&lt;strong>이벤트 기반 아키텍처&lt;/strong>: 실시간 이벤트 처리와 반응형 시스템 구축에 적합하다.&lt;/li>
&lt;/ol>
&lt;h3>단점&lt;span class="hx-absolute -hx-mt-20" id="단점">&lt;/span>
&lt;a href="#%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>복잡성&lt;/strong>: 직접 통신에 비해 구현과 디버깅이 더 복잡할 수 있다.&lt;/li>
&lt;li>&lt;strong>메시지 순서&lt;/strong>: 메시지의 순서가 보장되지 않을 수 있다.&lt;/li>
&lt;li>&lt;strong>단일 실패 지점&lt;/strong>: 메시지 브로커가 시스템의 단일 실패 지점이 될 수 있다.&lt;/li>
&lt;li>&lt;strong>구독자 상태 파악&lt;/strong>: 구독자의 건강 상태를 확인하기 어려울 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>사용 사례&lt;span class="hx-absolute -hx-mt-20" id="사용-사례">&lt;/span>
&lt;a href="#%ec%82%ac%ec%9a%a9-%ec%82%ac%eb%a1%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>이벤트 알림 시스템&lt;/strong>: 대규모 사용자에게 실시간 알림을 전송하는 경우.&lt;/li>
&lt;li>&lt;strong>분산 캐싱&lt;/strong>: 여러 서버 간의 캐시 동기화.&lt;/li>
&lt;li>&lt;strong>마이크로서비스 아키텍처&lt;/strong>: 서비스 간 비동기 통신.&lt;/li>
&lt;li>&lt;strong>IoT 시스템&lt;/strong>: 센서 데이터 수집 및 처리.&lt;/li>
&lt;li>&lt;strong>실시간 분석&lt;/strong>: 대량의 데이터 스트림 처리.&lt;/li>
&lt;/ol>
&lt;h3>코드 예시&lt;span class="hx-absolute -hx-mt-20" id="코드-예시">&lt;/span>
&lt;a href="#%ec%bd%94%eb%93%9c-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// publisher.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">Redis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ioredis&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">publisher&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Redis&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">NewsPublisher&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">publisher&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">publisher&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 뉴스 발행 메서드
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="nx">publishNews&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">category&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">newsData&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">category&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">newsData&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">timestamp&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">toISOString&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 카테고리별 채널로 뉴스 발행
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">publisher&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">publish&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`news:&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">category&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Published news to &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">category&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">:`&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Error publishing news:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// subscriber.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">Redis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ioredis&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">subscriber&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Redis&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">NewsSubscriber&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">categories&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscriber&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">subscriber&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">categories&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">categories&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setup&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setup&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 각 카테고리 채널 구독
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">categories&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">category&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscriber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`news:&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">category&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 메시지 수신 이벤트 처리
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscriber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">channel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">news&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleNews&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">channel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">news&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">handleNews&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">channel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">news&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Received news on &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">channel&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">:`&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">news&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 실제 뉴스 처리 로직 구현
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 메시지 브로커 역할을 하는 이벤트 버스
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">EventBus&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">redis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Redis&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">channels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Map&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 메시지 필터링 및 전달 관리
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="nx">handleMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">channel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">subscribers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">channels&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">channel&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">parsedMessage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 메시지 유효성 검사
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">validateMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">parsedMessage&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Invalid message format:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">parsedMessage&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 구독자들에게 메시지 전달
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">subscribers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">subscriber&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">subscriber&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleNews&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">channel&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">parsedMessage&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Error delivering message to subscriber:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">validateMessage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">category&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">content&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>