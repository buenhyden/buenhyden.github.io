<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – K-D-Tree</title><link>https://buenhyden.github.io/tags/k-d-tree/</link><description>Recent content in K-D-Tree on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 05 Jan 2025 12:57:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/k-d-tree/index.xml" rel="self" type="application/rss+xml"/><item><title>K-d Tree</title><link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/k-d-tree/</link><pubDate>Sun, 05 Jan 2025 12:57:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/k-d-tree/</guid><description>
&lt;h2>K-d Tree&lt;span class="hx-absolute -hx-mt-20" id="k-d-tree">&lt;/span>
&lt;a href="#k-d-tree" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>K-d Tree는 k차원 공간에서 점들을 효율적으로 저장하고 검색하기 위한 이진 트리 기반의 공간 분할 데이터 구조로, K-d Tree는 k차원 공간을 재귀적으로 분할하여 표현하는 이진 트리이다.&lt;br>
각 노드는 k차원 공간의 한 점을 나타내며, 비단말 노드는 해당 차원을 기준으로 공간을 두 개의 하위 공간으로 분할한다.&lt;/p>
&lt;p>
&lt;img src="../sualization-of-the-k-d-tree-algorithm.png" alt="Visualization of the k-d tree algorithm" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.researchgate.net/figure/sualization-of-the-k-d-tree-algorithm_fig4_327289160" target="_blank" rel="noopener">https://www.researchgate.net/figure/sualization-of-the-k-d-tree-algorithm_fig4_327289160&lt;/a> _&lt;/p>
&lt;h3>특징&lt;span class="hx-absolute -hx-mt-20" id="특징">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>다차원 데이터 처리: k차원 공간의 점들을 효율적으로 저장하고 검색할 수 있다.&lt;/li>
&lt;li>계층적 구조: 공간을 재귀적으로 분할하여 계층적으로 표현한다.&lt;/li>
&lt;li>차원 순환: 트리의 각 레벨마다 분할 기준이 되는 차원이 순환된다.&lt;/li>
&lt;li>균형 구조: 중앙값을 기준으로 분할하여 균형 잡힌 트리를 구성한다.&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>효율적인 검색: 다차원 공간에서의 근접 이웃 검색이나 범위 검색을 빠르게 수행할 수 있다.&lt;/li>
&lt;li>차원 축소: 문제의 차원을 줄여 검색 시간을 단축하고 메모리 사용을 줄일 수 있다.&lt;/li>
&lt;li>다양한 응용: 데이터 마이닝, 컴퓨터 그래픽스, 과학 계산 등 다양한 분야에 활용된다.&lt;/li>
&lt;/ol>
&lt;h3>단점&lt;span class="hx-absolute -hx-mt-20" id="단점">&lt;/span>
&lt;a href="#%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>고차원 데이터의 한계: 차원이 증가할수록 성능이 저하될 수 있다.&lt;/li>
&lt;li>불균형 가능성: 데이터 분포에 따라 트리가 불균형해질 수 있다.&lt;/li>
&lt;li>동적 데이터 처리의 어려움: 데이터 삽입/삭제 시 트리 재구성이 필요할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>응용&lt;span class="hx-absolute -hx-mt-20" id="응용">&lt;/span>
&lt;a href="#%ec%9d%91%ec%9a%a9" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>최근접 이웃 검색: 머신러닝의 k-최근접 이웃(k-NN) 알고리즘에 활용된다.&lt;/li>
&lt;li>범위 검색: 지리 정보 시스템(GIS)에서 특정 영역 내 객체 검색에 사용된다.&lt;/li>
&lt;li>컴퓨터 비전: 이미지 처리와 특징점 매칭에 활용된다.&lt;/li>
&lt;li>충돌 감지: 게임이나 시뮬레이션에서 객체 간 충돌 감지에 사용된다.&lt;/li>
&lt;/ol>
&lt;h3>동작 원리&lt;span class="hx-absolute -hx-mt-20" id="동작-원리">&lt;/span>
&lt;a href="#%eb%8f%99%ec%9e%91-%ec%9b%90%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>트리 구축:&lt;/p>
&lt;ul>
&lt;li>각 레벨에서 분할 축(차원)을 선택한다.&lt;/li>
&lt;li>선택된 축을 기준으로 데이터의 중앙값을 찾는다.&lt;/li>
&lt;li>중앙값을 기준으로 데이터를 좌우 하위 트리로 분할한다.&lt;/li>
&lt;li>이 과정을 재귀적으로 반복하여 트리를 구축한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>검색:&lt;/p>
&lt;ul>
&lt;li>루트 노드부터 시작하여 검색 대상과 노드의 값을 비교한다.&lt;/li>
&lt;li>현재 레벨의 분할 축을 기준으로 좌우 서브트리 중 하나를 선택하여 탐색을 계속한다.&lt;/li>
&lt;li>리프 노드에 도달하거나 조건을 만족하는 노드를 찾을 때까지 이 과정을 반복한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>구성 요소&lt;span class="hx-absolute -hx-mt-20" id="구성-요소">&lt;/span>
&lt;a href="#%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>노드: 각 노드는 k차원 점과 분할 축 정보를 저장한다.&lt;/li>
&lt;li>분할 축: 각 레벨에서 공간을 분할하는 기준이 되는 차원을 나타낸다.&lt;/li>
&lt;li>좌우 자식 노드: 분할된 하위 공간을 나타내는 노드들이다.&lt;/li>
&lt;/ol>
&lt;h3>구현 방식&lt;span class="hx-absolute -hx-mt-20" id="구현-방식">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>다음은 Python을 사용한 K-d Tree의 기본 구현 예시:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">KDNode&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">point&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">left&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">right&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">None&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">point&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">point&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">left&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">right&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">KDTree&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">points&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build_kdtree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">points&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">build_kdtree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">points&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">depth&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">points&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">points&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">axis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">depth&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">k&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">points&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">axis&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">median&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">points&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">KDNode&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">point&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">points&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">median&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">left&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build_kdtree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">points&lt;/span>&lt;span class="p">[:&lt;/span>&lt;span class="n">median&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">depth&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">right&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build_kdtree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">points&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">median&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:],&lt;/span> &lt;span class="n">depth&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">nearest_neighbor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">depth&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">best&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">best&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">axis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">depth&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">k&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">next_best&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">best&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">point&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">distance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">next_branch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">axis&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">point&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">axis&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">other_branch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">next_branch&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">best&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">next_branch&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">depth&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next_best&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">distance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">best&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nb">abs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">axis&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">point&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">axis&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">best&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other_branch&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">depth&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">best&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">best&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">point&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@staticmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">distance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">sum&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">zip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mf">0.5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 사용 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">points&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">kdtree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">KDTree&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">points&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">nearest&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kdtree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">nearest_neighbor&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Nearest point to (9, 2): &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">nearest&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이 구현은 K-d Tree의 기본 구조와 최근접 이웃 검색 기능을 보여줍니다. 실제 응용에서는 더 복잡한 기능과 최적화가 필요할 수 있습니다.&lt;/p>
&lt;h2>Citations:
[1] &lt;a href="https://www.geeksforgeeks.org/ball-tree-and-kd-tree-algorithms/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/ball-tree-and-kd-tree-algorithms/&lt;/a>
[2] &lt;a href="https://www.activeloop.ai/resources/glossary/kd-tree/" target="_blank" rel="noopener">https://www.activeloop.ai/resources/glossary/kd-tree/&lt;/a>
[3] &lt;a href="https://www.youtube.com/watch?v=TLxWtXEbtFE" target="_blank" rel="noopener">https://www.youtube.com/watch?v=TLxWtXEbtFE&lt;/a>
[4] &lt;a href="https://www.scholarhat.com/tutorial/datastructures/k-dimentional-tree-in-data-structures" target="_blank" rel="noopener">https://www.scholarhat.com/tutorial/datastructures/k-dimentional-tree-in-data-structures&lt;/a>
[5] &lt;a href="https://stackoverflow.com/questions/37132774/why-k-d-trees-is-not-used-for-high-dimensional-data" target="_blank" rel="noopener">https://stackoverflow.com/questions/37132774/why-k-d-trees-is-not-used-for-high-dimensional-data&lt;/a>
[6] &lt;a href="https://www.javatpoint.com/k-d-tree-in-data-structures" target="_blank" rel="noopener">https://www.javatpoint.com/k-d-tree-in-data-structures&lt;/a>
[7] &lt;a href="https://www.youtube.com/watch?v=Glp7THUpGow" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Glp7THUpGow&lt;/a>
[8] &lt;a href="https://www.baeldung.com/cs/k-d-trees" target="_blank" rel="noopener">https://www.baeldung.com/cs/k-d-trees&lt;/a>
[9] &lt;a href="https://www.cs.cmu.edu/~ckingsf/bioinfo-lectures/kdtrees.pdf" target="_blank" rel="noopener">https://www.cs.cmu.edu/~ckingsf/bioinfo-lectures/kdtrees.pdf&lt;/a>
[10] &lt;a href="https://acme.byu.edu/0000017a-17ef-d8b9-adfe-77ef21040000/vol2a-ds3-kdtrees-2016-pdf" target="_blank" rel="noopener">https://acme.byu.edu/0000017a-17ef-d8b9-adfe-77ef21040000/vol2a-ds3-kdtrees-2016-pdf&lt;/a>
[11] &lt;a href="https://www.baeldung.com/cs/k-d-trees" target="_blank" rel="noopener">https://www.baeldung.com/cs/k-d-trees&lt;/a>
[12] &lt;a href="https://upload.wikimedia.org/wikipedia/commons/b/b6/3dtree.png?sa=X&amp;amp;ved=2ahUKEwiGzNCoieqKAxVkVPEDHZNSEhIQ_B16BAgOEAI" target="_blank" rel="noopener">https://upload.wikimedia.org/wikipedia/commons/b/b6/3dtree.png?sa=X&amp;ved=2ahUKEwiGzNCoieqKAxVkVPEDHZNSEhIQ_B16BAgOEAI&lt;/a>
[13] &lt;a href="https://opendsa-server.cs.vt.edu/ODSA/Books/CS3/html/KDtree.html" target="_blank" rel="noopener">https://opendsa-server.cs.vt.edu/ODSA/Books/CS3/html/KDtree.html&lt;/a>
[14] &lt;a href="https://upload.wikimedia.org/wikipedia/commons/b/b6/3dtree.png?sa=X&amp;amp;ved=2ahUKEwjJ6dCoieqKAxUaQvEDHSTzMd8Q_B16BAgHEAI" target="_blank" rel="noopener">https://upload.wikimedia.org/wikipedia/commons/b/b6/3dtree.png?sa=X&amp;ved=2ahUKEwjJ6dCoieqKAxUaQvEDHSTzMd8Q_B16BAgHEAI&lt;/a>
[15] &lt;a href="https://en.wikipedia.org/wiki/K-d_tree" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/K-d_tree&lt;/a>
[16] &lt;a href="https://arxiv.org/pdf/1903.04936.pdf" target="_blank" rel="noopener">https://arxiv.org/pdf/1903.04936.pdf&lt;/a>
[17] &lt;a href="https://www.geeksforgeeks.org/search-and-insertion-in-k-dimensional-tree/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/search-and-insertion-in-k-dimensional-tree/&lt;/a>
[18] &lt;a href="https://www.researchgate.net/figure/A-KD-Tree-structure-for-relationship-classification_fig4_372337272" target="_blank" rel="noopener">https://www.researchgate.net/figure/A-KD-Tree-structure-for-relationship-classification_fig4_372337272&lt;/a>
[19] &lt;a href="https://www.geeksforgeeks.org/kd-trees-in-cpp/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/kd-trees-in-cpp/&lt;/a>
[20] &lt;a href="https://rosettacode.org/wiki/K-d_tree" target="_blank" rel="noopener">https://rosettacode.org/wiki/K-d_tree&lt;/a>
[21] &lt;a href="https://www.geeksforgeeks.org/ball-tree-and-kd-tree-algorithms/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/ball-tree-and-kd-tree-algorithms/&lt;/a>
[22] &lt;a href="https://pcl.readthedocs.io/projects/tutorials/en/master/kdtree_search.html" target="_blank" rel="noopener">https://pcl.readthedocs.io/projects/tutorials/en/master/kdtree_search.html&lt;/a>
[23] &lt;a href="https://www.tdcommons.org/cgi/viewcontent.cgi?article=5428&amp;amp;context=dpubs_series" target="_blank" rel="noopener">https://www.tdcommons.org/cgi/viewcontent.cgi?article=5428&amp;context=dpubs_series&lt;/a>
[24] &lt;a href="https://cs-people.bu.edu/evimaria/cs565/lect10.ppt" target="_blank" rel="noopener">https://cs-people.bu.edu/evimaria/cs565/lect10.ppt&lt;/a>
[25] &lt;a href="https://www.cs.cmu.edu/~kdeng/thesis/kdtree.pdf" target="_blank" rel="noopener">https://www.cs.cmu.edu/~kdeng/thesis/kdtree.pdf&lt;/a>
[26] &lt;a href="https://www.youtube.com/watch?v=Glp7THUpGow" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Glp7THUpGow&lt;/a>
[27] &lt;a href="https://www.youtube.com/watch?v=TLxWtXEbtFE" target="_blank" rel="noopener">https://www.youtube.com/watch?v=TLxWtXEbtFE&lt;/a>
[28] &lt;a href="https://github.com/adioshun/gitBook_PCL/blob/master/Tutorial/KdTree/how-to-use-a-kdtree-to-search-PCL-Cpp.md" target="_blank" rel="noopener">https://github.com/adioshun/gitBook_PCL/blob/master/Tutorial/KdTree/how-to-use-a-kdtree-to-search-PCL-Cpp.md&lt;/a>
[29] &lt;a href="https://www.cs.umd.edu/class/fall2019/cmsc420-0201/Handouts/sg-kd-tree.pdf" target="_blank" rel="noopener">https://www.cs.umd.edu/class/fall2019/cmsc420-0201/Handouts/sg-kd-tree.pdf&lt;/a>&lt;span class="hx-absolute -hx-mt-20" id="29-httpswwwcsumdeduclassfall2019cmsc420-0201handoutssg-kd-treepdf">&lt;/span>
&lt;a href="#29-httpswwwcsumdeduclassfall2019cmsc420-0201handoutssg-kd-treepdf" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>