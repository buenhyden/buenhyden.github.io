<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Iteration</title><link>https://buenhyden.github.io/tags/iteration/</link><description>Recent content in Iteration on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 13 Jan 2025 11:03:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/iteration/index.xml" rel="self" type="application/rss+xml"/><item><title>Iteration vs Recursion</title><link>https://buenhyden.github.io/til/2025/01/iteration-vs-recursion/</link><pubDate>Mon, 13 Jan 2025 11:03:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/iteration-vs-recursion/</guid><description>
&lt;h2>Iteration Vs Recursion&lt;span class="hx-absolute -hx-mt-20" id="iteration-vs-recursion">&lt;/span>
&lt;a href="#iteration-vs-recursion" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Iteration과 Recursion은 프로그래밍에서 반복적인 작업을 수행하는 두 가지 주요 방식이다.&lt;/p>
&lt;p>Iteration은 루프를 사용하여 특정 조건이 만족될 때까지 코드 블록을 반복 실행하는 방식이다.&lt;br>
주로 for, while 등의 루프 구조를 사용한다.&lt;br>
Iteration은 명시적인 반복 구조를 가지며, 각 반복마다 변수의 상태가 변경된다.&lt;/p>
&lt;p>Recursion은 함수가 자기 자신을 호출하여 문제를 해결하는 방식이다.&lt;br>
복잡한 문제를 더 작고 간단한 문제로 나누어 해결한다.&lt;br>
Recursion은 base case(종료 조건)와 recursive case(재귀 호출)로 구성된다.&lt;/p>
&lt;h3>Iteration Vs Recursion&lt;span class="hx-absolute -hx-mt-20" id="iteration-vs-recursion-1">&lt;/span>
&lt;a href="#iteration-vs-recursion-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Iteration&lt;/th>
&lt;th>Recursion&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>루프를 사용한 반복 실행&lt;/td>
&lt;td>함수가 자기 자신을 호출&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>제어 구조&lt;/td>
&lt;td>루프 (for, while 등)&lt;/td>
&lt;td>함수 호출 스택&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>종료 조건&lt;/td>
&lt;td>루프 조건이 거짓이 될 때&lt;/td>
&lt;td>Base case에 도달할 때&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 사용&lt;/td>
&lt;td>일반적으로 적음&lt;/td>
&lt;td>함수 호출 스택으로 인해 많음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>속도&lt;/td>
&lt;td>대체로 빠름&lt;/td>
&lt;td>대체로 느림 (오버헤드 존재)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>코드 복잡성&lt;/td>
&lt;td>간단한 문제에 적합&lt;/td>
&lt;td>복잡한 문제 해결에 유용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>무한 반복 위험&lt;/td>
&lt;td>루프 조건 오류 시 발생&lt;/td>
&lt;td>Base case 누락 시 발생&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>문제 해결 접근&lt;/td>
&lt;td>순차적 실행&lt;/td>
&lt;td>분할 정복&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>가독성&lt;/td>
&lt;td>단순한 경우 높음&lt;/td>
&lt;td>복잡한 경우 높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>디버깅&lt;/td>
&lt;td>상대적으로 쉬움&lt;/td>
&lt;td>상대적으로 어려움&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>두 방식 모두 장단점이 있으며, 문제의 특성과 요구사항에 따라 적절한 방식을 선택해야 한다.&lt;br>
Iteration은 단순하고 반복적인 작업에 적합하며, Recursion은 복잡한 문제를 분할하여 해결하는 데 유용하다.&lt;/p>
&lt;h4>예시를 통한 비교&lt;span class="hx-absolute -hx-mt-20" id="예시를-통한-비교">&lt;/span>
&lt;a href="#%ec%98%88%ec%8b%9c%eb%a5%bc-%ed%86%b5%ed%95%9c-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>피보나치 수열을 구하는 알고리즘을 통한 두 가지 방식의 구현:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">fibonacci_iterative&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 반복적 방식으로 피보나치 수열의 n번째 값을 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 이전 두 수를 저장할 변수 초기화&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># n-1번 반복하면서 다음 피보나치 수를 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prev&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">prev&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">current&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">current&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">fibonacci_recursive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 재귀적 방식으로 피보나치 수열의 n번째 값을 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 기저 조건&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 재귀 단계: f(n) = f(n-1) + f(n-2)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">fibonacci_recursive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">fibonacci_recursive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 실행 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Iterative result: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">fibonacci_iterative&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Recursive result: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">fibonacci_recursive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 5&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>반복문(Iteration)</title><link>https://buenhyden.github.io/posts/programming-languages/concepts/iteration/</link><pubDate>Tue, 12 Nov 2024 15:06:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/programming-languages/concepts/iteration/</guid><description>
&lt;h2>반복문(Iteration)&lt;span class="hx-absolute -hx-mt-20" id="반복문iteration">&lt;/span>
&lt;a href="#%eb%b0%98%eb%b3%b5%eb%ac%b8iteration" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>프로그래밍에서 반복문(Iteration)은 특정 코드 블록을 여러 번 실행하는 제어 구조이다.&lt;/p>
&lt;p>반복문은 프로그램에서 같은 작업을 여러 번 수행해야 할 때 사용한다.&lt;br>
이를 통해 코드의 중복을 줄이고 효율적으로 작업을 처리할 수 있다.&lt;/p>
&lt;h3>주요 반복문 종류&lt;span class="hx-absolute -hx-mt-20" id="주요-반복문-종류">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%eb%b0%98%eb%b3%b5%eb%ac%b8-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>for 문:&lt;/p>
&lt;ul>
&lt;li>정해진 횟수만큼 반복할 때 주로 사용.&lt;/li>
&lt;li>초기화, 조건, 증감식을 한 줄에 표현한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>while 문:&lt;/p>
&lt;ul>
&lt;li>조건이 참인 동안 계속해서 반복한다.&lt;/li>
&lt;li>반복 횟수가 정해지지 않았을 때 유용하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>do-while 문:&lt;/p>
&lt;ul>
&lt;li>while 문과 비슷하지만, 최소 한 번은 실행된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>반복문의 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="반복문의-구성-요소">&lt;/span>
&lt;a href="#%eb%b0%98%eb%b3%b5%eb%ac%b8%ec%9d%98-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>초기화: 반복문에서 사용할 변수를 초기화한다.&lt;/li>
&lt;li>조건식: 반복을 계속할지 결정하는 조건을 설정한다.&lt;/li>
&lt;li>반복 실행문: 조건이 참일 때 실행되는 코드 블록이다.&lt;/li>
&lt;li>증감식: 반복 변수를 변경하여 언젠가 조건이 거짓이 되도록 한다.&lt;/li>
&lt;/ol>
&lt;h3>반복문의 장점&lt;span class="hx-absolute -hx-mt-20" id="반복문의-장점">&lt;/span>
&lt;a href="#%eb%b0%98%eb%b3%b5%eb%ac%b8%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>코드 재사용: 같은 코드를 여러 번 작성하지 않아도 된다.&lt;/li>
&lt;li>효율성: 대량의 데이터나 반복적인 작업을 효율적으로 처리할 수 있다.&lt;/li>
&lt;li>가독성: 반복되는 작업을 간결하게 표현할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>주의사항&lt;span class="hx-absolute -hx-mt-20" id="주의사항">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9d%98%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>무한 루프: 조건식이 항상 참이 되지 않도록 주의해야 한다.&lt;/li>
&lt;li>성능: 중첩된 반복문은 성능에 영향을 줄 수 있으므로 필요한 경우에만 사용한다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>