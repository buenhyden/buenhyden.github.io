<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Methodologies on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/methodologies/</link>
    <description>Recent content in Methodologies on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.150.1</generator>
    <language>en</language>
    <lastBuildDate>Sat, 21 Jun 2025 06:22:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/methodologies/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Software Development Methodology</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/</link>
      <pubDate>Sat, 21 Jun 2025 06:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/</guid>
      <description>소프트웨어 개발 방법론은 기획부터 유지보수까지 개발 전 과정을 구조화해 품질, 위험 관리, 협업을 체계화하는 프레임워크다. 워터폴·V-모델 등 전통적 접근부터 애자일·DevOps·ISO 표준까지 활용되며, DORA 지표와 CMMI를 통해 성과를 측정하고 지속 개선한다.</description>
    </item>
    <item>
      <title>DevOps</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/hybrid-and-modern/devops/</link>
      <pubDate>Sat, 28 Sep 2024 06:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/hybrid-and-modern/devops/</guid>
      <description>DevOps는 개발과 운영의 경계를 허물고 협업과 자동화를 중심으로 애플리케이션을 빠르고 안정적으로 제공하는 현대적 엔지니어링 모델이다. CI/CD, 관측성, 보안 내재화, 플랫폼 엔지니어링을 통해 리드타임 단축과 품질 향상을 동시에 달성하며, DORA 지표로 성과를 계량화한다.</description>
    </item>
    <item>
      <title>Incremental Model</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/incremental-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/incremental-model/</guid>
      <description>전체 시스템을 여러 개의 작은 부분(증분)으로 나누어 순차적으로 개발하고 제공하는 접근 방식.</description>
    </item>
    <item>
      <title>Test-Driven Development</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/hybrid-and-modern/tdd/</link>
      <pubDate>Sat, 21 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/hybrid-and-modern/tdd/</guid>
      <description>테스트 주도 개발(TDD)은 코드 작성 전 테스트를 정의하고 Red-Green-Refactor 사이클을 반복해 동작을 검증하며 설계를 개선하는 애자일 기법이다. 이는 코드 품질과 유지보수성을 높이고 회귀를 방지하며, CI/CD와 결합해 빠른 피드백과 안정적 배포를 지원한다.</description>
    </item>
    <item>
      <title>Prototyping Model</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/prototyping-models/</link>
      <pubDate>Sat, 21 Sep 2024 00:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/prototyping-models/</guid>
      <description>최종 제품의 초기 버전 또는 모형을 만들어 사용자의 피드백을 받고 요구사항을 명확히 하는 방법.</description>
    </item>
    <item>
      <title>Rapid Application Development</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/hybrid-and-modern/rad/</link>
      <pubDate>Sat, 21 Sep 2024 00:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/hybrid-and-modern/rad/</guid>
      <description>빠른 프로토타이핑과 반복적인 개발을 통해 신속하게 애플리케이션을 구축하는 접근 방식</description>
    </item>
    <item>
      <title>Agile</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/agile/</link>
      <pubDate>Sat, 21 Sep 2024 00:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/agile/</guid>
      <description>Agile은 2001년 Agile Manifesto를 기반으로 한 반복적·점진적 개발 철학으로, 짧은 주기와 고객 피드백을 통해 변화에 빠르게 적응하고 리스크를 줄인다. 경험주의 원칙을 바탕으로 Scrum, Kanban, XP 등으로 구현되며, DevOps·관측성·DORA 지표와 결합해 가치 중심의 지속적 개선을 가능하게 한다.</description>
    </item>
    <item>
      <title>Iterative Model</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/iterative-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/iterative-model/</guid>
      <description>전체 시스템을 여러 개의 작은 부분으로 나누어 반복적으로 개발하고 개선하는 방법</description>
    </item>
    <item>
      <title>Spiral Model</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/spiral-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/spiral-model/</guid>
      <description>위험 분석을 중심으로 반복적인 개발을 수행하며, 각 반복 주기마다 위험 요소를 평가하고 대응한다.</description>
    </item>
    <item>
      <title>V Model</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/v-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/v-model/</guid>
      <description>개발 단계와 테스트 단계를 병행하여 진행하는 검증(Verification)과 확인(Validation) 중심의 접근 방식이다.</description>
    </item>
    <item>
      <title>Waterfall Model</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/waterfall-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc/methodologies/traditional/waterfall-model/</guid>
      <description>각 단계를 순차적으로 진행하며, 이전 단계가 완료되어야 다음 단계로 넘어가는 전통적인 모델.</description>
    </item>
  </channel>
</rss>
