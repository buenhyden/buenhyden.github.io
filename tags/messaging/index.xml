<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Messaging on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/messaging/</link>
    <description>Recent content in Messaging on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.146.5</generator>
    <language>en</language>
    <lastBuildDate>Fri, 15 Nov 2024 12:10:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/messaging/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dead Letter Queue</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-patterns/microservices/messaging/dead-letter-queue/</link>
      <pubDate>Fri, 15 Nov 2024 12:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-patterns/microservices/messaging/dead-letter-queue/</guid>
      <description>Dead Letter Queue는 메시징 시스템에서 정상적으로 처리되지 못한 메시지를 저장하는 특별한 큐</description>
    </item>
    <item>
      <title>Message Broker</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-patterns/microservices/messaging/message-broker/</link>
      <pubDate>Fri, 15 Nov 2024 12:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-patterns/microservices/messaging/message-broker/</guid>
      <description>메시지 브로커(Message Broker)는 마이크로서비스 아키텍처(MSA)에서 중요한 역할을 하는 소프트웨어 컴포넌트로, 서비스 간 메시지를 안전하고 효율적으로 전달하는 중간 역할을 한다. 이를 통해 비동기 통신과 시스템 간의 느슨한 결합(loose coupling)을 가능하게 한다.</description>
    </item>
    <item>
      <title>Competing Consumers</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-patterns/microservices/messaging/competing-consumers/</link>
      <pubDate>Fri, 15 Nov 2024 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-patterns/microservices/messaging/competing-consumers/</guid>
      <description>여러 소비자(Consumer)가 동일한 메시지 채널에서 동시에 메시지를 처리하는 방식이다. 이 패턴을 통해 시스템의 처리량을 높이고 확장성과 가용성을 개선할 수 있다.</description>
    </item>
    <item>
      <title>Message Filter</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-patterns/microservices/messaging/message-filter/</link>
      <pubDate>Fri, 15 Nov 2024 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-patterns/microservices/messaging/message-filter/</guid>
      <description>Message Filter는 특정 기준에 따라 원하지 않는 메시지를 제거하고 원하는 메시지만 통과시키는 패턴</description>
    </item>
    <item>
      <title>Message Router</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-patterns/microservices/messaging/message-router/</link>
      <pubDate>Fri, 15 Nov 2024 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-patterns/microservices/messaging/message-router/</guid>
      <description>Message Router는 메시지의 내용이나 메타데이터를 기반으로 메시지를 적절한 목적지로 전달하는 컴포넌트이다. 이는 메시지의 흐름을 제어하고 시스템의 유연성을 높이는 데 중요한 역할을 한다.</description>
    </item>
    <item>
      <title>Idempotent Consumer</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-patterns/microservices/messaging/idempotent-consumer/</link>
      <pubDate>Fri, 15 Nov 2024 11:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-patterns/microservices/messaging/idempotent-consumer/</guid>
      <description>Idempotent Consumer는 동일한 메시지를 여러 번 처리하더라도 시스템의 상태가 변하지 않도록 설계된 소비자를 의미한다</description>
    </item>
    <item>
      <title>Messaging</title>
      <link>https://buenhyden.github.io/posts/system-design/cloud-design-patterns/messaging/messaging/</link>
      <pubDate>Tue, 12 Nov 2024 11:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/cloud-design-patterns/messaging/messaging/</guid>
      <description>Messaging은 서비스들이 메시지를 통해 비동기적으로 통신하는 방식이다. 서비스들은 메시지 브로커를 통해 메시지를 주고받으며, 이를 통해 느슨한 결합(loose coupling)을 실현한다.</description>
    </item>
    <item>
      <title>AMQP</title>
      <link>https://buenhyden.github.io/posts/networking/network-protocols/application-layer-protocols/messaging/amqp/</link>
      <pubDate>Sun, 20 Oct 2024 05:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking/network-protocols/application-layer-protocols/messaging/amqp/</guid>
      <description>AMQP(Advanced Message Queuing Protocol)는 메시지 지향 미들웨어를 위한 개방형 표준 응용 계층 프로토콜이다.</description>
    </item>
    <item>
      <title>MQTT</title>
      <link>https://buenhyden.github.io/posts/networking/network-protocols/application-layer-protocols/messaging/mqtt/</link>
      <pubDate>Sun, 20 Oct 2024 04:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking/network-protocols/application-layer-protocols/messaging/mqtt/</guid>
      <description>MQTT(Message Queuing Telemetry Transport)는 IoT 환경에서 널리 사용되는 경량 메시징 프로토콜이다.</description>
    </item>
  </channel>
</rss>
