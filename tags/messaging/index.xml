<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Messaging on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/messaging/</link>
    <description>Recent content in Messaging on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 28 Feb 2025 04:48:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/messaging/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Publish Subscribe</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/messaging/publish-subscribe/publish-subscribe/</link>
      <pubDate>Fri, 28 Feb 2025 04:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/messaging/publish-subscribe/publish-subscribe/</guid>
      <description>&lt;h2 id=&#34;publish-subscribe&#34;&gt;Publish Subscribe&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Dead Letter Queue</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/dead-letter-queue/</link>
      <pubDate>Fri, 15 Nov 2024 12:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/dead-letter-queue/</guid>
      <description>&lt;h2 id=&#34;dead-letter-queue&#34;&gt;Dead Letter Queue&lt;/h2&gt;
&lt;p&gt;Dead Letter Queue(DLQ)는 마이크로서비스 아키텍처(MSA)의 메시징 패턴 중 하나로, 처리할 수 없는 메시지를 안전하게 저장하고 관리하는 중요한 메커니즘이다.&lt;/p&gt;
&lt;p&gt;Dead Letter Queue는 메시징 시스템에서 정상적으로 처리되지 못한 메시지를 저장하는 특별한 큐이다.&lt;/p&gt;
&lt;p&gt;Dead Letter Queue는 MSA 환경에서 메시지 처리의 신뢰성과 안정성을 높이는 중요한 패턴이다. 적절히 구현하고 관리함으로써 시스템의 복원력을 향상시키고 문제 상황에 대한 가시성을 확보할 수 있다. DLQ를 효과적으로 활용하면 마이크로서비스 간 통신의 안정성을 크게 개선할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;데드-레터-큐에-메시지가-전달되는-일반적인-상황&#34;&gt;데드 레터 큐에 메시지가 전달되는 일반적인 상황&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;존재하지 않는 큐로의 메시지 전송&lt;/strong&gt;: 메시지가 존재하지 않는 큐로 전송될 때.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;큐의 최대 길이 초과&lt;/strong&gt;: 큐의 저장 용량이 초과되어 더 이상 메시지를 수용할 수 없을 때.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;메시지 크기 제한 초과&lt;/strong&gt;: 메시지의 크기가 시스템에서 허용하는 최대 크기를 초과할 때.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;메시지 만료&lt;/strong&gt;: 메시지가 설정된 TTL(Time To Live, 생존 시간)을 초과하여 만료되었을 때.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;메시지 거부&lt;/strong&gt;: 다른 큐나 교환기에 의해 메시지가 거부되었을 때.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;과도한 재시도 실패&lt;/strong&gt;: 메시지가 여러 번 처리되었지만 계속해서 실패할 때.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;dlq의-주요-특징&#34;&gt;DLQ의 주요 특징&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;분리 저장&lt;/strong&gt;: 문제가 있는 메시지를 정상적인 메시지와 분리하여 저장한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;재처리 가능성&lt;/strong&gt;: DLQ에 저장된 메시지는 나중에 분석하거나 재처리할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;시스템 안정성 향상&lt;/strong&gt;: 문제가 있는 메시지로 인한 시스템 장애를 방지한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;모니터링 및 알림&lt;/strong&gt;: DLQ를 모니터링하여 시스템 문제를 조기에 발견할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;dlq-구현-방법&#34;&gt;DLQ 구현 방법&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;큐 생성&lt;/strong&gt;: 일반 큐와 별도로 DLQ를 생성한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;재시도 정책 설정&lt;/strong&gt;: 메시지 처리 실패 시 재시도 횟수와 간격을 정의한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DLQ 연결&lt;/strong&gt;: 일반 큐에 DLQ를 연결하여 처리 실패한 메시지가 자동으로 이동하도록 설정한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;dlq-활용-전략&#34;&gt;DLQ 활용 전략&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;분석 및 디버깅&lt;/strong&gt;: DLQ에 저장된 메시지를 분석하여 실패 원인을 파악한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;자동 재처리&lt;/strong&gt;: 특정 조건에 따라 DLQ의 메시지를 자동으로 원래 큐로 되돌려 재처리한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;알림 설정&lt;/strong&gt;: DLQ에 메시지가 쌓이면 운영팀에 알림을 보내 신속한 대응을 유도한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;로깅 및 모니터링&lt;/strong&gt;: DLQ 상태를 지속적으로 모니터링하고 로깅하여 시스템 건강 상태를 파악한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;주의사항&#34;&gt;주의사항&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;보존 기간 설정&lt;/strong&gt;: DLQ에 저장된 메시지의 보존 기간을 적절히 설정하여 리소스 관리에 유의해야 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;보안&lt;/strong&gt;: DLQ에 저장된 메시지에 민감한 정보가 포함될 수 있으므로 보안에 주의해야 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;성능 영향&lt;/strong&gt;: DLQ 처리로 인한 시스템 부하를 고려해야 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;데드-레터-큐를-지원하는-주요-메시징-시스템&#34;&gt;데드 레터 큐를 지원하는 주요 메시징 시스템&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Amazon SQS&lt;/strong&gt;: 데드 레터 큐를 통해 처리 실패한 메시지를 별도로 보관하고, 이후에 재처리할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;: 메시지 처리 중 오류가 발생한 경우, 해당 메시지를 데드 레터 토픽에 저장하여 후속 조치를 취할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;: 데드 레터 교환기(Dead Letter Exchange)를 설정하여 처리되지 않은 메시지를 지정된 큐로 라우팅할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;구현-예시&#34;&gt;구현 예시&lt;/h3&gt;
&lt;p&gt;Node.js와 RabbitMQ를 사용&lt;/p&gt;</description>
    </item>
    <item>
      <title>Message Broker</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/message-broker/</link>
      <pubDate>Fri, 15 Nov 2024 12:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/message-broker/</guid>
      <description>메시지 브로커(Message Broker)는 마이크로서비스 아키텍처(MSA)에서 중요한 역할을 하는 소프트웨어 컴포넌트로, 서비스 간 메시지를 안전하고 효율적으로 전달하는 중간 역할을 한다. 이를 통해 비동기 통신과 시스템 간의 느슨한 결합(loose coupling)을 가능하게 한다.</description>
    </item>
    <item>
      <title>Competing Consumers</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/competing-consumers/</link>
      <pubDate>Fri, 15 Nov 2024 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/competing-consumers/</guid>
      <description>&lt;h2 id=&#34;competing-consumers&#34;&gt;Competing Consumers&lt;/h2&gt;
&lt;p&gt;Competing Consumers 패턴은 여러 소비자(Consumer)가 동일한 메시지 채널에서 동시에 메시지를 처리하는 방식이다. 이 패턴을 통해 시스템의 처리량을 높이고 확장성과 가용성을 개선할 수 있다.&lt;/p&gt;
&lt;p&gt;Competing Consumers 패턴은 MSA 환경에서 메시지 처리의 확장성과 효율성을 크게 향상시킬 수 있다. 하지만 메시지 순서와 같은 특정 요구사항이 있는 경우에는 신중하게 적용해야 한다.&lt;/p&gt;
&lt;h3 id=&#34;작동-원리&#34;&gt;작동 원리&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;메시지 생성: 애플리케이션이 메시지 큐에 메시지를 게시한다.&lt;/li&gt;
&lt;li&gt;메시지 소비: 여러 소비자 인스턴스가 동일한 큐에서 메시지를 가져와 처리한다.&lt;/li&gt;
&lt;li&gt;경쟁: 각 소비자는 다음 메시지를 처리하기 위해 경쟁한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;동작-방식&#34;&gt;동작 방식&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;메시지 생산자(Producer)&lt;/strong&gt;: 애플리케이션은 처리해야 할 작업을 메시지 형태로 메시지 큐에 게시한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;메시지 큐(Message Queue)&lt;/strong&gt;: 게시된 메시지는 큐에 저장되어 대기한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;메시지 소비자(Consumer)&lt;/strong&gt;: 여러 개의 소비자 인스턴스가 동일한 메시지 큐에서 메시지를 수신한다. 각 메시지는 한 번에 하나의 소비자에게만 전달되며, 이를 통해 작업이 병렬로 처리된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이러한 구조를 통해 시스템은 &lt;strong&gt;작업 부하를 여러 소비자 인스턴스에 분산&lt;/strong&gt;시켜 병목 현상을 방지하고, &lt;strong&gt;동시 처리 능력&lt;/strong&gt;을 향상시킨다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Message Filter</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/message-filter/</link>
      <pubDate>Fri, 15 Nov 2024 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/message-filter/</guid>
      <description>&lt;h2 id=&#34;message-filter&#34;&gt;Message Filter&lt;/h2&gt;
&lt;p&gt;Message Filter는 특정 기준에 따라 원하지 않는 메시지를 제거하고 원하는 메시지만 통과시키는 패턴이다.&lt;br&gt;
이 패턴은 컴포넌트가 관심 없는 메시지를 받지 않도록 하여 시스템의 효율성을 높이는 데 사용된다.&lt;/p&gt;
&lt;p&gt;Message Filter 패턴을 적절히 활용하면 MSA 환경에서 메시지 처리의 효율성을 크게 높일 수 있다. 하지만 필터링 로직의 복잡성과 유지보수성을 고려하여 설계해야 한다.&lt;/p&gt;
&lt;h3 id=&#34;주요-특징&#34;&gt;주요 특징&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;단일 입력 채널과 단일 출력 채널을 가진다.&lt;/li&gt;
&lt;li&gt;정의된 기준에 따라 메시지를 평가한다.&lt;/li&gt;
&lt;li&gt;기준을 충족하는 메시지만 출력 채널로 전달한다.&lt;/li&gt;
&lt;li&gt;기준을 충족하지 않는 메시지는 폐기된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;구현-방법&#34;&gt;구현 방법&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;필터 조건 정의: 메시지를 평가할 기준을 설정한다.&lt;/li&gt;
&lt;li&gt;메시지 평가: 입력된 메시지가 정의된 조건을 충족하는지 확인한다.&lt;/li&gt;
&lt;li&gt;메시지 라우팅: 조건을 충족하는 메시지는 다음 단계로 전달하고, 그렇지 않은 메시지는 폐기한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;구현-방식&#34;&gt;구현 방식&lt;/h3&gt;
&lt;p&gt;메시지 필터는 주로 다음과 같은 방식으로 구현된다:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Message Router</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/message-router/</link>
      <pubDate>Fri, 15 Nov 2024 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/message-router/</guid>
      <description>Message Router는 메시지의 내용이나 메타데이터를 기반으로 메시지를 적절한 목적지로 전달하는 컴포넌트이다. 이는 메시지의 흐름을 제어하고 시스템의 유연성을 높이는 데 중요한 역할을 한다.</description>
    </item>
    <item>
      <title>Messaging</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/</link>
      <pubDate>Fri, 15 Nov 2024 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/</guid>
      <description>&lt;h2 id=&#34;messaging&#34;&gt;Messaging&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Idempotent Consumer</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/idempotent-consumer/</link>
      <pubDate>Fri, 15 Nov 2024 11:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/idempotent-consumer/</guid>
      <description>&lt;h2 id=&#34;idempotent-consumer&#34;&gt;Idempotent Consumer&lt;/h2&gt;
&lt;p&gt;Idempotent Consumer는 마이크로서비스 아키텍처(MSA)의 메시징 패턴 중 하나로, 메시지의 중복 처리를 방지하고 시스템의 일관성을 유지하는 데 중요한 역할을 한다.&lt;/p&gt;
&lt;p&gt;Idempotent Consumer는 동일한 메시지를 여러 번 처리하더라도 시스템의 상태가 변하지 않도록 설계된 소비자를 의미한다. 즉, 메시지의 중복 처리가 발생해도 최종 결과는 항상 동일하다.&lt;/p&gt;
&lt;p&gt;Idempotent Consumer 패턴은 MSA 환경에서 메시지의 안정적인 처리를 보장하고, 시스템의 일관성을 유지하는 데 중요한 역할을 한다. 이 패턴을 적절히 구현함으로써 분산 시스템의 신뢰성과 견고성을 크게 향상시킬 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Messaging</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication-style/messaging/</link>
      <pubDate>Tue, 12 Nov 2024 11:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication-style/messaging/</guid>
      <description>Messaging은 서비스들이 메시지를 통해 비동기적으로 통신하는 방식이다. 서비스들은 메시지 브로커를 통해 메시지를 주고받으며, 이를 통해 느슨한 결합(loose coupling)을 실현한다.</description>
    </item>
  </channel>
</rss>
