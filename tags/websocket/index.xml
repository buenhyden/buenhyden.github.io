<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Websocket on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/websocket/</link>
    <description>Recent content in Websocket on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 19 Oct 2024 06:08:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/websocket/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RESTful API vs GraphQL API vs Webhook vs Server-sent Events vs Websocket vs WebRTC</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/restful-api-vs-graphql-api-vs-webhook-vs-server-sent-events-vs-websocket-vs-webrtc/</link>
      <pubDate>Sat, 19 Oct 2024 06:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/restful-api-vs-graphql-api-vs-webhook-vs-server-sent-events-vs-websocket-vs-webrtc/</guid>
      <description>API의 여러 유형인 RESTful API, GraphQL API, Webhook, Server-sent Events, WebSocket, WebRTC에 대해 정리하고 비교 분석</description>
    </item>
    <item>
      <title>WebSocket</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/application-layer-protocols/web-service/websocket/</link>
      <pubDate>Fri, 18 Oct 2024 04:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/application-layer-protocols/web-service/websocket/</guid>
      <description>&lt;h2 id=&#34;websocket&#34;&gt;WebSocket&lt;/h2&gt;
&lt;p&gt;OSI 7계층에서 응용 계층(7계층)에 위치하며, TCP/IP 4계층에서는 응용 계층에 해당한다.&lt;/p&gt;
&lt;p&gt;WebSocket은 HTTP를 기반으로 한 통신 프로토콜이지만, 연결이 수립된 후에는 HTTP와는 독립적으로 동작한다.&lt;br&gt;
HTTP가 단방향 통신만을 지원하는 것과 달리, WebSocket은 전이중(Full-duplex) 통신을 지원한다.&lt;br&gt;
이는 전화 통화처럼 양쪽에서 동시에 데이터를 주고받을 수 있다는 의미이다.&lt;br&gt;
즉, 클라이언트와 서버 간의 지속적인 연결을 통해 양방향, 실시간 통신을 가능하게 하는 컴퓨터 통신 프로토콜이다.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;img alt=&#34;Web Socket&#34; loading=&#34;lazy&#34; src=&#34;https://buenhyden.github.io/img/web-socket.png&#34;&gt;&lt;figcaption&gt;Source: https://blog.stackademic.com/api-101-introduction-imp-of-api-paradigms-8d8e0e463f96&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;주요-특징&#34;&gt;주요 특징&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;전이중 통신: 클라이언트와 서버가 동시에 데이터를 주고받을 수 있습니다.&lt;/li&gt;
&lt;li&gt;지속적 연결: 한 번 연결이 수립되면 계속 유지됩니다.&lt;/li&gt;
&lt;li&gt;실시간 데이터 전송: 서버에서 클라이언트로 요청 없이도 데이터를 전송할 수 있습니다.&lt;/li&gt;
&lt;li&gt;낮은 지연 시간: 연결이 유지되므로 데이터 전송 시 지연이 적습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;장점&#34;&gt;장점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;실시간 통신: 채팅, 게임, 실시간 협업 도구 등에 적합하다.&lt;/li&gt;
&lt;li&gt;효율성: HTTP에 비해 오버헤드가 적어 네트워크 리소스를 효율적으로 사용한다.&lt;/li&gt;
&lt;li&gt;양방향 통신: 서버에서 클라이언트로의 푸시 알림이 가능하다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;단점&#34;&gt;단점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;복잡성: 연결 관리, 오류 처리 등 구현이 복잡할 수 있다.&lt;/li&gt;
&lt;li&gt;브라우저 지원: 일부 구형 브라우저에서는 지원되지 않을 수 있다.&lt;/li&gt;
&lt;li&gt;서버 부하: 많은 동시 연결을 유지해야 하므로 서버 리소스 사용이 증가할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;동작-방식&#34;&gt;동작 방식&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;핸드셰이크:&lt;br&gt;
웹소켓 연결은 HTTP를 통해 시작된다.&lt;br&gt;
클라이언트가 &amp;ldquo;Upgrade: websocket&amp;rdquo; 헤더를 포함한 요청을 보내면, 서버는 이를 수락하여 웹소켓 연결로 전환한다.&lt;/li&gt;
&lt;li&gt;데이터 전송:&lt;br&gt;
연결이 수립된 후, 클라이언트와 서버는 웹소켓 프로토콜을 사용하여 데이터를 주고받는다.&lt;br&gt;
데이터는 프레임 단위로 전송된다.&lt;/li&gt;
&lt;li&gt;연결 종료:&lt;br&gt;
클라이언트나 서버 중 어느 한 쪽이 연결을 종료할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;연결-수립-과정-handshake&#34;&gt;연결 수립 과정 (Handshake)&lt;/h4&gt;
&lt;p&gt;연결 수립 과정(Handshake)에 대해서 조금더 자세히 알아보도록 하자.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
