<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Websocket</title><link>https://buenhyden.github.io/tags/websocket/</link><description>Recent content in Websocket on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 20 Dec 2024 06:08:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/websocket/index.xml" rel="self" type="application/rss+xml"/><item><title>RESTful API vs GraphQL API vs Webhook vs Server-sent Events vs Websocket vs WebRTC</title><link>https://buenhyden.github.io/til/2024/12/restful-api-vs-graphql-api-vs-webhook-vs-server-sent-events-vs-websocket-vs-webrtc/</link><pubDate>Fri, 20 Dec 2024 06:08:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/12/restful-api-vs-graphql-api-vs-webhook-vs-server-sent-events-vs-websocket-vs-webrtc/</guid><description>
&lt;h2>RESTful API Vs GraphQL API Vs Webhook Vs Server-sent Events Vs Websocket Vs WebRTC&lt;span class="hx-absolute -hx-mt-20" id="restful-api-vs-graphql-api-vs-webhook-vs-server-sent-events-vs-websocket-vs-webrtc">&lt;/span>
&lt;a href="#restful-api-vs-graphql-api-vs-webhook-vs-server-sent-events-vs-websocket-vs-webrtc" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>API의 여러 유형인 RESTful API, GraphQL API, Webhook, Server-sent Events, WebSocket, WebRTC에 대해 정리하고 비교 분석해보자.&lt;/p>
&lt;p>RESTful API는 HTTP 프로토콜을 기반으로 하는 웹 서비스 아키텍처이다. 리소스를 URI로 표현하고, HTTP 메서드(GET, POST, PUT, DELETE 등)를 사용하여 리소스를 조작한다. 클라이언트-서버 모델을 따르며, 상태를 저장하지 않는 특징이 있다.&lt;/p>
&lt;p>GraphQL은 페이스북에서 개발한 쿼리 언어 및 런타임으로, 클라이언트가 필요한 데이터를 정확하게 요청할 수 있게 해준다. 단일 엔드포인트를 사용하며, 클라이언트가 쿼리를 정의하여 필요한 데이터만 받을 수 있다.&lt;/p>
&lt;p>Webhook은 특정 이벤트가 발생했을 때 실시간으로 정보를 전달하는 방식이다. 서버에서 클라이언트로 HTTP POST 요청을 보내는 방식으로 작동하며, 실시간 업데이트나 알림 시스템에 주로 사용된다.&lt;/p>
&lt;p>SSE는 서버에서 클라이언트로 단방향 실시간 데이터 스트림을 제공하는 기술입니다. HTTP 연결을 통해 서버가 클라이언트에게 업데이트를 푸시할 수 있으며, 실시간 알림이나 업데이트에 적합합니다.&lt;/p>
&lt;p>WebSocket은 클라이언트와 서버 간의 양방향, 전이중 통신을 제공하는 프로토콜이다. 단일 TCP 연결을 통해 실시간 데이터 교환이 가능하며, 채팅 애플리케이션이나 실시간 게임 등에 사용된다.&lt;/p>
&lt;p>WebRTC(Web Real-Time Communication)는 브라우저 간 직접적인 피어-투-피어 통신을 가능하게 하는 기술이다. 비디오, 음성, 데이터의 실시간 통신을 지원하며, 화상 통화나 파일 공유 등에 사용된다.&lt;/p>
&lt;h3>비교 분석 표&lt;span class="hx-absolute -hx-mt-20" id="비교-분석-표">&lt;/span>
&lt;a href="#%eb%b9%84%ea%b5%90-%eb%b6%84%ec%84%9d-%ed%91%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>RESTful API&lt;/th>
&lt;th>GraphQL API&lt;/th>
&lt;th>Webhook&lt;/th>
&lt;th>Server-sent Events&lt;/th>
&lt;th>WebSocket&lt;/th>
&lt;th>WebRTC&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>통신 방향&lt;/td>
&lt;td>양방향&lt;/td>
&lt;td>양방향&lt;/td>
&lt;td>단방향(서버→클라이언트)&lt;/td>
&lt;td>단방향(서버→클라이언트)&lt;/td>
&lt;td>양방향&lt;/td>
&lt;td>양방향&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실시간성&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>매우 높음&lt;/td>
&lt;td>매우 높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로토콜&lt;/td>
&lt;td>HTTP&lt;/td>
&lt;td>HTTP&lt;/td>
&lt;td>HTTP&lt;/td>
&lt;td>HTTP&lt;/td>
&lt;td>WebSocket&lt;/td>
&lt;td>UDP/TCP&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 형식&lt;/td>
&lt;td>JSON, XML 등&lt;/td>
&lt;td>JSON&lt;/td>
&lt;td>JSON&lt;/td>
&lt;td>텍스트&lt;/td>
&lt;td>바이너리, 텍스트&lt;/td>
&lt;td>바이너리, 텍스트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>연결 유지&lt;/td>
&lt;td>연결 유지 안 함&lt;/td>
&lt;td>연결 유지 안 함&lt;/td>
&lt;td>연결 유지 안 함&lt;/td>
&lt;td>단방향 연결 유지&lt;/td>
&lt;td>양방향 연결 유지&lt;/td>
&lt;td>P2P 연결&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 용도&lt;/td>
&lt;td>일반적인 API&lt;/td>
&lt;td>유연한 데이터 요청&lt;/td>
&lt;td>이벤트 기반 알림&lt;/td>
&lt;td>실시간 업데이트&lt;/td>
&lt;td>실시간 양방향 통신&lt;/td>
&lt;td>미디어 스트리밍, P2P 통신&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>매우 높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡성&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이 표를 통해 각 기술의 특성과 용도를 비교할 수 있다.&lt;br>
선택은 애플리케이션의 요구사항, 실시간성, 양방향 통신 필요 여부, 구현 복잡성 등을 고려하여 결정해야 한다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>WebSocket</title><link>https://buenhyden.github.io/posts/networking-and-communications/protocol/websocket/</link><pubDate>Tue, 08 Oct 2024 04:24:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/protocol/websocket/</guid><description>
&lt;h2>WebSocket&lt;span class="hx-absolute -hx-mt-20" id="websocket">&lt;/span>
&lt;a href="#websocket" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>OSI 7계층에서 응용 계층(7계층)에 위치하며, TCP/IP 4계층에서는 응용 계층에 해당한다.&lt;/p>
&lt;p>WebSocket은 HTTP를 기반으로 한 통신 프로토콜이지만, 연결이 수립된 후에는 HTTP와는 독립적으로 동작한다.&lt;br>
HTTP가 단방향 통신만을 지원하는 것과 달리, WebSocket은 전이중(Full-duplex) 통신을 지원한다.&lt;br>
이는 전화 통화처럼 양쪽에서 동시에 데이터를 주고받을 수 있다는 의미이다.&lt;br>
즉, 클라이언트와 서버 간의 지속적인 연결을 통해 양방향, 실시간 통신을 가능하게 하는 컴퓨터 통신 프로토콜이다.&lt;/p>
&lt;p>
&lt;img src="../web-socket.png" alt="Web Socket" loading="lazy" /> _Source: &lt;a href="https://blog.stackademic.com/api-101-introduction-imp-of-api-paradigms-8d8e0e463f96" target="_blank" rel="noopener">https://blog.stackademic.com/api-101-introduction-imp-of-api-paradigms-8d8e0e463f96&lt;/a> _&lt;/p>
&lt;h3>주요 특징&lt;span class="hx-absolute -hx-mt-20" id="주요-특징">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>전이중 통신: 클라이언트와 서버가 동시에 데이터를 주고받을 수 있습니다.&lt;/li>
&lt;li>지속적 연결: 한 번 연결이 수립되면 계속 유지됩니다.&lt;/li>
&lt;li>실시간 데이터 전송: 서버에서 클라이언트로 요청 없이도 데이터를 전송할 수 있습니다.&lt;/li>
&lt;li>낮은 지연 시간: 연결이 유지되므로 데이터 전송 시 지연이 적습니다.&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;span class="hx-absolute -hx-mt-20" id="장점">&lt;/span>
&lt;a href="#%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>실시간 통신: 채팅, 게임, 실시간 협업 도구 등에 적합하다.&lt;/li>
&lt;li>효율성: HTTP에 비해 오버헤드가 적어 네트워크 리소스를 효율적으로 사용한다.&lt;/li>
&lt;li>양방향 통신: 서버에서 클라이언트로의 푸시 알림이 가능하다.&lt;/li>
&lt;/ol>
&lt;h3>단점&lt;span class="hx-absolute -hx-mt-20" id="단점">&lt;/span>
&lt;a href="#%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>복잡성: 연결 관리, 오류 처리 등 구현이 복잡할 수 있다.&lt;/li>
&lt;li>브라우저 지원: 일부 구형 브라우저에서는 지원되지 않을 수 있다.&lt;/li>
&lt;li>서버 부하: 많은 동시 연결을 유지해야 하므로 서버 리소스 사용이 증가할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>동작 방식&lt;span class="hx-absolute -hx-mt-20" id="동작-방식">&lt;/span>
&lt;a href="#%eb%8f%99%ec%9e%91-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>핸드셰이크:&lt;br>
웹소켓 연결은 HTTP를 통해 시작된다.&lt;br>
클라이언트가 &amp;ldquo;Upgrade: websocket&amp;rdquo; 헤더를 포함한 요청을 보내면, 서버는 이를 수락하여 웹소켓 연결로 전환한다.&lt;/li>
&lt;li>데이터 전송:&lt;br>
연결이 수립된 후, 클라이언트와 서버는 웹소켓 프로토콜을 사용하여 데이터를 주고받는다.&lt;br>
데이터는 프레임 단위로 전송된다.&lt;/li>
&lt;li>연결 종료:&lt;br>
클라이언트나 서버 중 어느 한 쪽이 연결을 종료할 수 있다.&lt;/li>
&lt;/ol>
&lt;h4>연결 수립 과정 (Handshake)&lt;span class="hx-absolute -hx-mt-20" id="연결-수립-과정-handshake">&lt;/span>
&lt;a href="#%ec%97%b0%ea%b2%b0-%ec%88%98%eb%a6%bd-%ea%b3%bc%ec%a0%95-handshake" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>연결 수립 과정(Handshake)에 대해서 조금더 자세히 알아보도록 하자.&lt;/p>
&lt;p>먼저 클라이언트는 특별한 HTTP 요청을 서버에 보낸다. 이를 &amp;ldquo;WebSocket Handshake Request&amp;quot;라고 한다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">GET&lt;/span> &lt;span class="nn">/chat&lt;/span> &lt;span class="kr">HTTP&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">1.1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Host&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">server.example.com&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Upgrade&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">websocket&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Connection&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">Upgrade&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Sec-WebSocket-Key&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">dGhlIHNhbXBsZSBub25jZQ==&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Origin&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">http://example.com&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Sec-WebSocket-Protocol&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">chat, superchat&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Sec-WebSocket-Version&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">13&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>여기서 중요한 헤더들의 의미를 살펴보면:&lt;/p>
&lt;ul>
&lt;li>Upgrade와 Connection 헤더는 HTTP 연결을 WebSocket 연결로 업그레이드하겠다는 의미이다.&lt;/li>
&lt;li>Sec-WebSocket-Key는 연결의 보안을 위한 임의의 키값.&lt;/li>
&lt;li>Sec-WebSocket-Protocol은 클라이언트가 지원하는 서브프로토콜 목록.&lt;/li>
&lt;/ul>
&lt;p>서버는 이 요청에 대해 다음과 같은 응답을 보낸다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">HTTP&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">1.1&lt;/span> &lt;span class="m">101&lt;/span> &lt;span class="ne">Switching Protocols&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Upgrade&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">websocket&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Connection&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">Upgrade&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Sec-WebSocket-Accept&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">s3pPLMBiTxaQ9kYGzzhZRbK+xOo=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Sec-WebSocket-Protocol&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">chat&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>연결이 수립된 후의 데이터 전송 방식도 주목할 만한 특징이 있다.&lt;br>
WebSocket은 데이터를 &amp;lsquo;프레임(Frame)&amp;lsquo;이라는 단위로 전송한다.&lt;br>
프레임의 구조는 다음과 같다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code> 0 1 2 3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
&amp;#43;-&amp;#43;-&amp;#43;-&amp;#43;-&amp;#43;-------&amp;#43;-&amp;#43;-------------&amp;#43;-------------------------------&amp;#43;
|F|R|R|R| opcode|M| Payload len | Extended payload length |
|I|S|S|S| (4) |A| (7) | (16/64) |
|N|V|V|V| |S| | (if payload len==126/127) |
| |1|2|3| |K| | |
&amp;#43;-&amp;#43;-&amp;#43;-&amp;#43;-&amp;#43;-------&amp;#43;-&amp;#43;-------------&amp;#43;-------------------------------&amp;#43;
| Extended payload length continued, if payload len == 127 |
&amp;#43;-------------------------------&amp;#43;-------------------------------&amp;#43;
| |Masking-key, if MASK set to 1 |
&amp;#43;-------------------------------&amp;#43;-------------------------------&amp;#43;
| Masking-key (continued) | Payload Data |
&amp;#43;-------------------------------- - - - - - - - - - - - - - - -&amp;#43;
: Payload Data continued ... :
&amp;#43; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - &amp;#43;
| Payload Data continued ... |
&amp;#43;---------------------------------------------------------------&amp;#43;&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>프레임의 각 필드가 하는 역할을 이해하는 것이 중요하다:&lt;/p>
&lt;ul>
&lt;li>FIN: 메시지의 마지막 프레임임을 나타낸다.&lt;/li>
&lt;li>RSV1-3: 확장을 위해 예약된 비트이다.&lt;/li>
&lt;li>Opcode: 프레임의 종류를 나타낸다(텍스트, 바이너리, 연결 종료 등).&lt;/li>
&lt;li>MASK: 페이로드가 마스킹되었는지를 나타낸다.&lt;/li>
&lt;li>Payload length: 페이로드의 길이를 나타낸다.&lt;/li>
&lt;/ul>
&lt;h3>WebSocket Protocol의 다양한 기능&lt;span class="hx-absolute -hx-mt-20" id="websocket-protocol의-다양한-기능">&lt;/span>
&lt;a href="#websocket-protocol%ec%9d%98-%eb%8b%a4%ec%96%91%ed%95%9c-%ea%b8%b0%eb%8a%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>Ping/Pong 프레임:&lt;br>
연결이 여전히 살아있는지 확인하기 위해 사용된다.&lt;br>
서버나 클라이언트는 Ping 프레임을 보낼 수 있으며, 받는 쪽은 반드시 Pong으로 응답해야 한다.&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// WebSocket에서 Ping/Pong 처리 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">socket&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onping&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Ping received&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Pong은 자동으로 전송됩니다
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="2">
&lt;li>
&lt;p>Close 프레임:&lt;br>
연결을 정상적으로 종료할 때 사용된다.&lt;br>
상태 코드와 종료 이유를 포함할 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>프래그먼테이션(Fragmentation):&lt;br>
대용량 메시지를 여러 프레임으로 나누어 전송할 수 있다.&lt;br>
이는 네트워크 효율성을 높이고 메모리 사용을 최적화한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>WebSocket Protocol의 보안&lt;span class="hx-absolute -hx-mt-20" id="websocket-protocol의-보안">&lt;/span>
&lt;a href="#websocket-protocol%ec%9d%98-%eb%b3%b4%ec%95%88" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>wss:// (WebSocket Secure):&lt;br>
TLS/SSL을 통한 암호화된 연결을 제공한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Origin 검사:&lt;br>
브라우저는 WebSocket 연결 시 Origin 헤더를 포함시켜, 서버가 신뢰할 수 있는 출처의 연결만을 수락할 수 있게 한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>마스킹:&lt;br>
클라이언트에서 서버로 전송되는 모든 프레임은 반드시 마스킹되어야 한다.&lt;br>
이는 캐시 포이즈닝과 같은 보안 공격을 방지한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>주의사항&lt;span class="hx-absolute -hx-mt-20" id="주의사항">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9d%98%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>연결 관리&lt;/p>
&lt;ul>
&lt;li>연결이 끊어졌을 때의 재연결 로직 구현&lt;/li>
&lt;li>주기적인 연결 상태 확인 (heartbeat)&lt;/li>
&lt;li>적절한 에러 처리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>보안&lt;/p>
&lt;ul>
&lt;li>wss:// (WebSocket Secure) 프로토콜 사용&lt;/li>
&lt;li>메시지 검증&lt;/li>
&lt;li>사용자 인증&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 최적화&lt;/p>
&lt;ul>
&lt;li>적절한 메시지 크기 관리&lt;/li>
&lt;li>연결 수 제한&lt;/li>
&lt;li>효율적인 데이터 구조 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>