<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Concurrency-Control</title><link>https://buenhyden.github.io/tags/concurrency-control/</link><description>Recent content in Concurrency-Control on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 25 Dec 2024 07:03:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/concurrency-control/index.xml" rel="self" type="application/rss+xml"/><item><title>Deadlock vs Livelock</title><link>https://buenhyden.github.io/til/2024/12/deadlock-vs-livelock/</link><pubDate>Wed, 25 Dec 2024 07:03:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/12/deadlock-vs-livelock/</guid><description>
&lt;h2>Deadlock Vs Livelock&lt;/h2>&lt;p>데드락(Deadlock)과 라이브락(Livelock)은 둘 다 동시성 프로그래밍에서 발생할 수 있는 문제 상황으로, 데드락과 라이브락은 모두 시스템의 진행을 방해하는 심각한 문제이다.&lt;/p>
&lt;p>데드락(Deadlock)은 두 개 이상의 프로세스나 스레드가 서로가 보유한 자원을 기다리며 무한정 대기하는 상태를 말하며, 상호 배제(Mutual Exclusion), 점유 대기(Hold and Wait), 비선점(No Preemption), 순환 대기(Circular Wait) 등의 조건이 충족되어야 한다. 예를 들어, 프로세스 A가 자원 X를 점유하고, 프로세스 B가 자원 Y를 점유한 상태에서, A는 Y를, B는 X를 요청하면 데드락이 발생한다&lt;/p>
&lt;p>라이브락(Livelock)은 프로세스들이 계속해서 상태를 변경하지만 실제로는 어떤 진전도 없는 상황을 말한다.&lt;br>
지속적인 상태 변경이 일어나지만, 진전이 없다. 예를 들어, 두 사람이 좁은 복도에서 마주쳤을 때, 서로 양보하려고 같은 방향으로 계속 이동하는 상황을 생각해볼 수 있다.&lt;/p>
&lt;h2>비교 분석 표&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>데드락 (Deadlock)&lt;/th>
&lt;th>라이브락 (Livelock)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>프로세스들이 서로의 자원을 기다리며 무한정 대기하는 상태&lt;/td>
&lt;td>프로세스들이 계속 상태를 변경하지만 진전이 없는 상태&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로세스 상태&lt;/td>
&lt;td>완전히 멈춰있음&lt;/td>
&lt;td>계속해서 상태 변경&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 점유&lt;/td>
&lt;td>자원을 점유한 채로 다른 자원을 기다림&lt;/td>
&lt;td>자원을 점유하지 않고 계속 요청하고 해제&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CPU 사용&lt;/td>
&lt;td>CPU 사용 없음&lt;/td>
&lt;td>CPU 계속 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>해결 가능성&lt;/td>
&lt;td>외부 개입 없이 해결 불가능&lt;/td>
&lt;td>시간이 지나면 자연스럽게 해결될 가능성 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>발생 원인&lt;/td>
&lt;td>자원 할당의 순환 의존성&lt;/td>
&lt;td>데드락을 피하려는 과정에서 발생 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로세스 진행&lt;/td>
&lt;td>완전히 멈춤&lt;/td>
&lt;td>진행은 하지만 실질적 진전 없음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>해결 방법&lt;/td>
&lt;td>예방, 회피, 탐지 및 복구&lt;/td>
&lt;td>무작위성 도입, 우선순위 부여, 타임아웃 설정&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실제 예시&lt;/td>
&lt;td>두 프로세스가 서로의 자원을 점유하고 대기&lt;/td>
&lt;td>두 사람이 복도에서 서로 양보하며 계속 이동&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>해결 방법&lt;/h3>&lt;h4>데드락 해결 방법&lt;/h4>&lt;ol>
&lt;li>&lt;strong>예방&lt;/strong>: 데드락의 네 가지 조건 중 하나를 제거한다.&lt;/li>
&lt;li>&lt;strong>회피&lt;/strong>: 자원 할당 상태를 지속적으로 검사하여 안전한 상태를 유지한다.&lt;/li>
&lt;li>&lt;strong>탐지 및 복구&lt;/strong>: 데드락을 탐지하고, 발생 시 프로세스를 강제 종료하거나 자원을 선점한다.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>데드락(Deadlock)의 네 가지 조건&lt;/p>
&lt;ol>
&lt;li>&lt;strong>상호 배제(Mutual Exclusion)&lt;/strong>: 자원은 한 번에 하나의 프로세스만 사용할 수 있다.&lt;/li>
&lt;li>&lt;strong>점유 대기(Hold and Wait)&lt;/strong>: 프로세스가 이미 자원을 보유한 상태에서 다른 자원을 요청한다.&lt;/li>
&lt;li>&lt;strong>비선점(No Preemption)&lt;/strong>: 다른 프로세스가 사용 중인 자원을 강제로 빼앗을 수 없다.&lt;/li>
&lt;li>&lt;strong>순환 대기(Circular Wait)&lt;/strong>: 프로세스들이 순환적으로 서로의 자원을 기다린다.&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h4>라이브락 해결 방법&lt;/h4>&lt;ol>
&lt;li>&lt;strong>무작위성 도입&lt;/strong>: 프로세스들이 동작을 결정할 때 약간의 무작위성을 도입한다.&lt;/li>
&lt;li>&lt;strong>우선순위 부여&lt;/strong>: 프로세스들에게 서로 다른 우선순위를 부여한다.&lt;/li>
&lt;li>&lt;strong>타임아웃 설정&lt;/strong>: 일정 시간 동안 진전이 없으면 작업을 재시도하거나 포기한다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>라이브락 (Livelock)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/livelock/</link><pubDate>Mon, 25 Nov 2024 09:17:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/livelock/</guid><description>
&lt;h2>라이브락 (Livelock)&lt;/h2>&lt;p>멀티스레딩 환경에서 발생할 수 있는 문제 상황으로, 프로세스나 스레드가 계속 실행 중이지만 실제로는 유용한 작업을 수행하지 못하는 상태&lt;/p>
&lt;h3>라이브락의 특징:&lt;/h3>&lt;ol>
&lt;li>진행 중 상태: 프로세스나 스레드가 &amp;lsquo;실행 중&amp;rsquo; 상태를 유지한다.&lt;/li>
&lt;li>무의미한 작업: 실제로는 어떠한 유용한 작업도 수행하지 못한다.&lt;/li>
&lt;li>반복적 상태 변경: 특정 조건을 만족시키기 위해 상태를 계속 변경하지만 원하는 결과를 달성하지 못한다.&lt;/li>
&lt;/ol>
&lt;h3>라이브락과 데드락의 차이:&lt;/h3>&lt;ul>
&lt;li>데드락: 프로세스들이 서로의 자원을 기다리며 완전히 멈춘 상태&lt;/li>
&lt;li>라이브락: 프로세스들이 계속 실행되지만 실제로는 진전이 없는 상태&lt;/li>
&lt;/ul>
&lt;h3>라이브락의 예시:&lt;/h3>&lt;ol>
&lt;li>복도에서 마주친 두 사람: 서로 지나가려고 같은 방향으로 계속 이동하지만 결국 지나가지 못하는 상황&lt;/li>
&lt;li>프로세스 간 자원 경쟁:
&lt;ul>
&lt;li>프로세스 A가 자원 Y를 보유하고 X를 필요로 함&lt;/li>
&lt;li>프로세스 B가 자원 X를 보유하고 Y를 필요로 함&lt;/li>
&lt;li>두 프로세스가 서로의 자원을 기다리며 계속 상태를 변경하지만 진전이 없음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Philosopher&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">left_fork&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">right_fork&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left_fork&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">left_fork&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right_fork&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">right_fork&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">try_eat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 계속해서 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left_fork&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">timeout&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 왼쪽 포크 잡기 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">이(가) 왼쪽 포크를 집었습니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right_fork&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">timeout&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 오른쪽 포크 잡기 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">이(가) 식사를 시작합니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 식사하는 시간&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">right_fork&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">left_fork&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">이(가) 포크를 내려놓고 다시 시도합니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 다른 철학자에게 기회를 주기 위한 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">이(가) 포크를 얻지 못해 다시 시도합니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 재시도 전 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 테스트 코드&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fork1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fork2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">philosopher1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Philosopher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;철학자1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fork1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fork2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">philosopher2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Philosopher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;철학자2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fork2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fork1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 두 철학자가 동시에 식사하려 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">philosopher1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">try_eat&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">philosopher2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">try_eat&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이 코드에서 두 철학자는 모두 활발히 행동하고 있지만(포크를 집었다 놨다 하면서), 실제로 식사는 하지 못하는 라이브락 상황이 발생할 수 있다.&lt;/p>
&lt;p>라이브락 해결 방안:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>타임아웃 도입: 일정 시간 후 재시도하도록 설정&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">TimeoutBasedResource&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">timeout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">timeout&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start_time&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start_time&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">timeout&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 시간 초과시 강제 해제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>무작위성 도입: 상태 변경에 무작위 지연을 추가하여 동시성 문제 해결&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">resource_allocation_with_randomness&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">retry_delay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uniform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 0-1초 사이의 무작위 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">retry_delay&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">try_allocate_resource&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>우선순위 조정: 프로세스나 스레드의 우선순위를 동적으로 조정&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PrioritizedProcess&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">priority&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">priority&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">attempt_action&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">resource&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">current_user_priority&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">allocate_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>의존성 최소화: 프로세스 간 의존성을 줄이는 설계 적용&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>라이브락 방지를 위한 모범 사례:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>재시도 메커니즘 개선:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">improved_retry_mechanism&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max_attempts&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">attempt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">attempt&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">max_attempts&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">perform_action&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">except&lt;/span> &lt;span class="n">ResourceBusyException&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">backoff_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="n">attempt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uniform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">backoff_time&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">attempt&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>리소스 할당 순서 정규화:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ResourceManager&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resources&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resource_order&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire_resources&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">needed_resources&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 리소스를 항상 정해진 순서대로 획득&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sorted_resources&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">sorted&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">needed_resources&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resource_order&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">resource&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">sorted_resources&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 실패시 이미 획득한 리소스 해제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release_resources&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sorted_resources&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;p>라이브락 예방:&lt;br>
3. 명확한 상태 변경 조건 정의&lt;br>
4. 시스템 설계 시 예상치 못한 상호작용 고려&lt;br>
5. 주기적인 시스템 모니터링 및 분석 수행&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Starvation</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/starvation/</link><pubDate>Mon, 25 Nov 2024 07:52:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/starvation/</guid><description>
&lt;h2>기아 상태 (Starvation)&lt;/h2>&lt;p>운영 체제 및 동시성 프로그래밍에서 중요한 문제로, 특정 프로세스가 필요한 자원을 지속적으로 얻지 못해 실행되지 못하는 상황.&lt;br>
자원 관리 문제로, 낮은 우선순위 프로세스가 높은 우선순위 프로세스에 의해 자원이 계속 점유되어 무기한 대기하는 상황으로 주로 우선순위 기반 스케줄링에서 발생하며, 시스템 성능과 공정성에 부정적인 영향을 미친다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Synchronization%20and%20Concurrency%20Control/Critical%20Section/what-is-starvation-in-operating-system.png"
alt="Starvation in Operating System"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.javatpoint.com/what-is-starvation-in-operating-system" target="_blank" rel="noopener">https://www.javatpoint.com/what-is-starvation-in-operating-system&lt;/a> _&lt;/p>
&lt;h3>발생 조건&lt;/h3>&lt;p>기아 상태가 발생하기 위한 주요 조건은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>우선순위 기반 스케줄링&lt;/strong>: 높은 우선순위 프로세스가 계속 실행되면서 낮은 우선순위 프로세스가 실행되지 못함.&lt;/li>
&lt;li>&lt;strong>자원 부족&lt;/strong>: 시스템 자원이 제한적일 때 특정 프로세스가 지속적으로 자원을 얻지 못함.&lt;/li>
&lt;li>&lt;strong>비공정한 스케줄링 알고리즘&lt;/strong>: 공정성을 고려하지 않는 알고리즘이 낮은 우선순위 프로세스를 무시함.&lt;/li>
&lt;li>&lt;strong>임계 구역 점유&lt;/strong>: 특정 프로세스가 임계 구역을 오래 점유하여 다른 프로세스의 접근을 차단.&lt;/li>
&lt;/ol>
&lt;h3>해결책 및 방지책&lt;/h3>&lt;p>기아 상태를 해결하거나 방지하기 위한 방법은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Aging(에이징) 기법&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>대기 시간이 길어질수록 프로세스의 우선순위를 점진적으로 증가시켜 실행 기회를 보장한다.&lt;/li>
&lt;li>예: 일정 시간마다 대기 중인 프로세스의 우선순위를 1씩 증가.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>라운드 로빈 스케줄링&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>모든 프로세스에 고정된 시간 슬라이스를 할당하여 공정하게 CPU 시간을 분배한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>공정 스케줄러(Fair Scheduler)&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>자원의 공정한 분배를 보장하는 알고리즘 사용.&lt;/li>
&lt;li>예: Completely Fair Scheduler(CFS).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>우선순위 부스트(Priority Boosting)&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>오랫동안 대기한 프로세스의 우선순위를 일시적으로 높여 실행 가능성을 증가.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>자원 관리 개선&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>세마포어, 뮤텍스 등 동기화 메커니즘을 사용하여 자원의 공정한 사용 보장.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>랜덤 선택 회피&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>랜덤으로 프로세스를 선택하지 않고 공정성을 고려한 알고리즘 사용.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>실제 시스템에서의 예방책&lt;/h3>&lt;ol>
&lt;li>&lt;strong>Aging 적용&lt;/strong>: 오래 대기한 프로세스의 우선순위를 자동으로 조정.&lt;/li>
&lt;li>&lt;strong>멀티레벨 피드백 큐(Multilevel Feedback Queue)&lt;/strong>: 대기 시간이 긴 프로세스를 더 높은 우선순위 큐로 이동.&lt;/li>
&lt;li>&lt;strong>자원 모니터링 도구 사용&lt;/strong>: 시스템 자원의 사용 현황을 실시간으로 추적하여 기아 상태를 사전에 탐지.&lt;/li>
&lt;li>&lt;strong>공정성 테스트&lt;/strong>: 다양한 워크로드 시나리오에서 스케줄링 알고리즘을 테스트하여 공정성을 검증.&lt;/li>
&lt;/ol>
&lt;h3>고려사항 및 주의사항&lt;/h3>&lt;ol>
&lt;li>&lt;strong>성능 저하&lt;/strong>: Aging이나 Priority Boosting은 성능에 영향을 미칠 수 있으므로 적절히 조율해야 한다.&lt;/li>
&lt;li>&lt;strong>데드락과 구분&lt;/strong>: 기아 상태와 데드락은 다른 문제로, 데드락은 모든 프로세스가 멈추는 반면 기아 상태는 일부만 영향을 받음.&lt;/li>
&lt;li>&lt;strong>우선순위 역전(Priority Inversion)&lt;/strong>: 낮은 우선순위 작업이 높은 우선순위 작업을 차단하지 않도록 주의해야 함.&lt;/li>
&lt;/ol>
&lt;h3>모범 사례&lt;/h3>&lt;ol>
&lt;li>Aging 기법을 기본적으로 적용하여 모든 프로세스에 실행 기회를 제공.&lt;/li>
&lt;li>라운드 로빈과 같은 공정한 스케줄링 정책 채택.&lt;/li>
&lt;li>시스템 로그와 모니터링 도구를 활용하여 기아 상태를 조기에 탐지.&lt;/li>
&lt;/ol>
&lt;h3>구현 예시&lt;/h3>&lt;p>기아 상태를 시뮬레이션하고 이를 해결하는 파이썬 예제&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">queue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">dataclasses&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">dataclass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Optional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">random&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@dataclass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Task&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">priority&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">creation_time&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">float&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">wait_time&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">float&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">update_wait_time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">creation_time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">should_boost_priority&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;우선순위 부스팅이 필요한지 확인&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait_time&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="c1"># 10초 이상 대기시 부스팅&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">FairScheduler&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high_priority_queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PriorityQueue&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_priority_queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">PriorityQueue&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">running&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">add_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Task&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;작업 추가&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">process_tasks&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;작업 처리&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">running&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">next_task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_get_next_task&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">next_task&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_execute_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">next_task&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">_get_next_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">Task&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;다음 처리할 작업 선택&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 모든 낮은 우선순위 작업 검사 및 부스팅&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">low_priority_tasks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">update_wait_time&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">should_boost_priority&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Boosting priority of task &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="c1"># 우선순위 부스팅&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">low_priority_tasks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 낮은 우선순위 작업 다시 큐에 넣기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">task_tuple&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">low_priority_tasks&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">put&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">task_tuple&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 높은 우선순위 큐에서 먼저 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">high_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 낮은 우선순위 큐에서 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">low_priority_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">_execute_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Task&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;작업 실행&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Executing task &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> (Priority: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">priority&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Wait time: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait_time&lt;/span>&lt;span class="si">:&lt;/span>&lt;span class="s2">f&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">s)&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 작업 실행 시뮬레이션&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uniform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.5&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">simulate_starvation&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;기아 상태 시뮬레이션&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scheduler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FairScheduler&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 스케줄러 실행 스레드&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scheduler_thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">process_tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scheduler_thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 높은 우선순위 작업 지속적 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">generate_high_priority_tasks&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">running&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">task_id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">priority&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">creation_time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task_id&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uniform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.3&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 낮은 우선순위 작업 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">generate_low_priority_tasks&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span> &lt;span class="c1"># 구분을 위한 시작 ID&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">running&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">task_id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">priority&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">creation_time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task_id&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uniform&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 작업 생성 스레드 시작&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">high_priority_generator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">generate_high_priority_tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">low_priority_generator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">generate_low_priority_tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">high_priority_generator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">low_priority_generator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 일정 시간 후 시뮬레이션 종료&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scheduler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">running&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 모든 스레드 종료 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scheduler_thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">high_priority_generator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">low_priority_generator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">simulate_starvation&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>실제 시스템에서의 해결 전략&lt;/h3>&lt;ol>
&lt;li>&lt;strong>Aging 통합&lt;/strong>: 운영 체제 수준에서 Aging 알고리즘을 기본 스케줄러에 통합.&lt;/li>
&lt;li>&lt;strong>동적 우선순위 조정&lt;/strong>: 워크로드와 대기 시간에 따라 실시간으로 우선순위를 조정.&lt;/li>
&lt;li>&lt;strong>자원 관리 정책 개선&lt;/strong>: 세마포어, 뮤텍스 등 동기화 메커니즘을 효율적으로 설계.&lt;/li>
&lt;li>&lt;strong>모니터링 및 알림 시스템 구축&lt;/strong>: 기아 상태 발생 가능성을 실시간으로 감지하고 관리자에게 알림.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3>참고 및 출처&lt;/h3></description></item><item><title>교착상태 (Deadlock)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/deadlock/</link><pubDate>Sat, 23 Nov 2024 23:24:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/deadlock/</guid><description>
&lt;h2>교착상태 (Deadlock)&lt;/h2>&lt;p>둘 이상의 프로세스가 서로가 가진 자원을 기다리며 무한정 대기하는 상황&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Synchronization%20and%20Concurrency%20Control/Critical%20Section/img2.jpg"
alt="Deadlock"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/deadlock-system-model/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/deadlock-system-model/&lt;/a> _&lt;/p>
&lt;p>교착상태를 시뮬레이션하는 예제:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Resource&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">process_name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">가 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 획득 시도&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">가 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 획득 성공&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">process_name&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">가 &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 반환&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">process_task&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">first_resource&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">second_resource&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 교착상태를 발생시키는 프로세스 작업을 시뮬레이션합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> 각 프로세스는 두 개의 자원을 순차적으로 획득하려 시도합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 첫 번째 자원 획득&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">first_resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">가 작업 중…&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 다른 프로세스가 두 번째 자원을 획득할 시간을 줌&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 두 번째 자원 획득 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">second_resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">가 모든 자원 획득 성공&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 작업 수행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 자원 반환&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">second_resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">first_resource&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">except&lt;/span> &lt;span class="ne">Exception&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">process_name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 오류 발생: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 두 개의 자원 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">resource_A&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Resource A&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">resource_B&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Resource&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Resource B&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 두 개의 프로세스 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Process 1은 A -&amp;gt; B 순서로 자원 획득 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Process 2는 B -&amp;gt; A 순서로 자원 획득 시도&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">process_task&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Process 1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">resource_A&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">resource_B&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">process_task&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">args&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Process 2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">resource_B&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">resource_A&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 프로세스 시작&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 프로세스 종료 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;교착상태 시뮬레이션 시작&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;시뮬레이션 종료&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Deadlock이 발생하기 위한 필요 조건&lt;/h3>&lt;p>Deadlock이 발생하기 위해서는 다음 네 가지 조건이 모두 충족되어야 한다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>상호 배제(Mutual Exclusion)&lt;br>
하나의 자원은 한 번에 하나의 프로세스만 사용할 수 있다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 한 번에 하나의 스레드만 획득 가능&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>점유와 대기(Hold and Wait)&lt;br>
자원을 가진 프로세스가 다른 자원을 기다리는 상태가 발생한다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 첫 번째 락을 보유한 상태에서&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 두 번째 락을 기다림&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>선점 불가(No Preemption)&lt;br>
다른 프로세스의 자원을 강제로 빼앗을 수 없다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>순환 대기(Circular Wait)&lt;br>
프로세스들이 순환적으로 서로의 자원을 기다린다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>교착상태 해결책 및 방지책&lt;/h3>&lt;p>교착상태를 해결하거나 방지하기 위한 여러 방법이 있다:&lt;/p>
&lt;h4>예방(Prevention)&lt;/h4>&lt;p>교착상태 발생 조건 중 하나 이상을 제거하여 교착상태를 방지한다:&lt;/p>
&lt;ul>
&lt;li>상호 배제 부정: 자원을 공유 가능하게 만든다.&lt;/li>
&lt;li>점유와 대기 부정: 프로세스가 실행되기 전 모든 필요한 자원을 할당받도록 한다.&lt;/li>
&lt;li>비선점 부정: 자원을 강제로 회수할 수 있게 한다.&lt;/li>
&lt;li>순환 대기 부정: 자원에 번호를 부여하고 오름차순으로만 요청하도록 한다.&lt;/li>
&lt;/ul>
&lt;h4>회피(Avoidance)&lt;/h4>&lt;p>시스템의 상태를 지속적으로 검사하여 안전한 상태를 유지한다.&lt;br>
대표적인 방법으로 은행원 알고리즘(Banker&amp;rsquo;s Algorithm)이 있다.&lt;/p>
&lt;h4>탐지 및 복구(Detection and Recovery)&lt;/h4>&lt;p>교착상태를 탐지하고, 발생 시 복구하는 방법이다:&lt;/p>
&lt;ul>
&lt;li>프로세스 종료: 교착상태에 있는 프로세스를 종료한다.&lt;/li>
&lt;li>자원 선점: 교착상태에 있는 프로세스로부터 자원을 강제로 회수한다다.&lt;/li>
&lt;/ul>
&lt;h3>실제 시스템에서의 교착상태 예방 전략&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시스템 설계 단계에서의 예방&lt;/p>
&lt;ul>
&lt;li>자원 할당 순서 정의&lt;/li>
&lt;li>자원 사용 시간 제한&lt;/li>
&lt;li>작업 우선순위 설정&lt;/li>
&lt;li>자원 할당 그래프 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>운영 단계에서의 모니터링&lt;/p>
&lt;ul>
&lt;li>자원 사용량 실시간 모니터링&lt;/li>
&lt;li>교착상태 감지 시스템 구축&lt;/li>
&lt;li>로그 분석 및 패턴 파악&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>복구 전략 수립&lt;/p>
&lt;ul>
&lt;li>체계적인 프로세스 종료 절차&lt;/li>
&lt;li>자원 회수 메커니즘&lt;/li>
&lt;li>백업 시스템 운영&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>실제 사례와 해결 방안&lt;/h3>&lt;ol>
&lt;li>데이터베이스 시스템의 교착상태:
&lt;ol>
&lt;li>트랜잭션 타임아웃 설정&lt;/li>
&lt;li>락 에스컬레이션 방지&lt;/li>
&lt;li>트랜잭션 격리 수준 적절히 설정&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>운영체제의 교착상태:
&lt;ol>
&lt;li>자원 할당 알고리즘 최적화&lt;/li>
&lt;li>프로세스 우선순위 동적 조정&lt;/li>
&lt;li>자원 사용 모니터링 강화&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3>고려사항 및 주의사항&lt;/h3>&lt;ol>
&lt;li>
&lt;p>성능과 안전성 균형&lt;/p>
&lt;ul>
&lt;li>과도한 교착상태 방지 메커니즘은 성능 저하 초래&lt;/li>
&lt;li>시스템 특성에 맞는 적절한 수준 설정 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>확장성 고려&lt;/p>
&lt;ul>
&lt;li>시스템 규모 증가에 따른 교착상태 위험 증가&lt;/li>
&lt;li>확장 가능한 모니터링 시스템 구축&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>테스트 및 검증&lt;/p>
&lt;ul>
&lt;li>다양한 시나리오에서의 교착상태 테스트&lt;/li>
&lt;li>정기적인 시스템 점검 및 모니터링&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>모범 사례&lt;/h3>&lt;ol>
&lt;li>
&lt;p>자원 할당 전략&lt;/p>
&lt;ul>
&lt;li>필요한 최소한의 자원만 할당&lt;/li>
&lt;li>자원 사용 시간 최소화&lt;/li>
&lt;li>자원 해제 즉시 수행&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>모니터링 및 로깅&lt;/p>
&lt;ul>
&lt;li>상세한 로그 기록 유지&lt;/li>
&lt;li>실시간 모니터링 시스템 구축&lt;/li>
&lt;li>주기적인 시스템 상태 점검&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>시스템 설계&lt;/p>
&lt;ul>
&lt;li>모듈화된 설계로 교착상태 영향 범위 최소화&lt;/li>
&lt;li>명확한 자원 할당 정책 수립&lt;/li>
&lt;li>효율적인 복구 메커니즘 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Race Condition</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/race-condition/</link><pubDate>Sat, 23 Nov 2024 23:11:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/race-condition/</guid><description>
&lt;h2>경쟁 상태 (Race Condition)&lt;/h2>&lt;p>여러 프로세스나 스레드가 공유 자원에 동시에 접근할 때, 접근의 타이밍이나 순서에 따라 결과가 달라질 수 있는 상황.&lt;br>
이는 프로그램의 실행 결과가 프로세스/스레드의 실행 순서에 따라 예측할 수 없게 달라지는 현상을 초래한다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Synchronization%20and%20Concurrency%20Control/Critical%20Section/race_conditions.jpg"
alt="Race Condition"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.rapitasystems.com/blog/race-condition-testing" target="_blank" rel="noopener">https://www.rapitasystems.com/blog/race-condition-testing&lt;/a> _&lt;/p>
&lt;h3>발생 조건&lt;/h3>&lt;p>경쟁 상태가 발생하기 위한 조건은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>두 개 이상의 포인터가 동시에 같은 데이터에 접근.&lt;/li>
&lt;li>최소한 하나의 포인터가 데이터를 쓰기 위해 사용됨.&lt;/li>
&lt;li>데이터 접근을 동기화하는 메커니즘이 없음.&lt;/li>
&lt;/ol>
&lt;h3>해결책 및 방지책&lt;/h3>&lt;ol>
&lt;li>&lt;strong>동기화 메커니즘 사용&lt;/strong>: 뮤텍스(mutex), 세마포어, 락(lock) 등을 사용하여 공유 자원에 대한 접근을 제어한다.&lt;/li>
&lt;li>&lt;strong>원자적 연산 사용&lt;/strong>: 분할할 수 없는 단일 연산으로 처리하여 중간 상태를 방지한다.&lt;/li>
&lt;li>&lt;strong>스레드 안전 프로그래밍&lt;/strong>: 모든 함수를 스레드 안전하게 설계한다.&lt;/li>
&lt;li>&lt;strong>락프리 알고리즘&lt;/strong>: 고급 기법으로, 특정 동시성 작업을 최적화하는 데 사용된다.&lt;/li>
&lt;li>&lt;strong>트랜잭션 격리 수준 조정&lt;/strong>: 데이터베이스에서는 직렬화 가능한 트랜잭션 격리 수준을 사용하여 경쟁 상태를 방지할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>실제 시스템에서의 예방책&lt;/h3>&lt;ol>
&lt;li>&lt;strong>정적 분석 도구 사용&lt;/strong>: 소스 코드나 컴파일된 바이너리를 분석하여 잠재적인 경쟁 상태를 탐지한다.&lt;/li>
&lt;li>&lt;strong>로그 분석 및 모니터링&lt;/strong>: 시스템 로그를 분석하여 경쟁 상태의 징후를 감지한다.&lt;/li>
&lt;li>&lt;strong>분산 추적 시스템&lt;/strong>: 분산 시스템에서 요청과 메시지의 흐름을 추적하여 타이밍 의존성을 식별한다.&lt;/li>
&lt;li>&lt;strong>일관성 검사 도구&lt;/strong>: 분산 노드 간의 데이터 일관성을 확인하여 경쟁 상태로 인한 이상을 탐지한다.&lt;/li>
&lt;/ol>
&lt;h3>고려사항 및 주의사항&lt;/h3>&lt;ol>
&lt;li>&lt;strong>비결정적 특성&lt;/strong>: 경쟁 상태로 인한 버그는 재현하기 어려우므로 철저한 테스트가 필요하다.&lt;/li>
&lt;li>&lt;strong>성능 영향&lt;/strong>: 동기화 메커니즘의 과도한 사용은 성능 저하를 초래할 수 있으므로 균형이 필요하다.&lt;/li>
&lt;li>&lt;strong>데드락 주의&lt;/strong>: 락을 사용할 때는 데드락 발생 가능성에 주의해야 한다.&lt;/li>
&lt;li>&lt;strong>확장성 고려&lt;/strong>: 분산 시스템에서는 경쟁 상태 관리가 시스템의 확장성에 영향을 미칠 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>모범 사례&lt;/h3>&lt;ol>
&lt;li>&lt;strong>최소한의 임계 영역&lt;/strong>: 락으로 보호되는 코드 영역을 최소화하여 성능 저하를 방지한다.&lt;/li>
&lt;li>&lt;strong>세분화된 락&lt;/strong>: 전역 락 대신 세분화된 락을 사용하여 병렬성을 높인다.&lt;/li>
&lt;li>&lt;strong>불변성 활용&lt;/strong>: 가능한 경우 불변 객체를 사용하여 동시성 문제를 원천적으로 방지한다.&lt;/li>
&lt;li>&lt;strong>스레드 안전한 라이브러리 사용&lt;/strong>: 검증된 스레드 안전 라이브러리를 활용한다.&lt;/li>
&lt;/ol>
&lt;h3>실제 시스템에서의 해결 전략&lt;/h3>&lt;ol>
&lt;li>&lt;strong>데이터베이스 트랜잭션&lt;/strong>: 데이터베이스 시스템에서는 ACID 속성을 갖는 트랜잭션을 사용하여 경쟁 상태를 관리한다.&lt;/li>
&lt;li>&lt;strong>분산 락&lt;/strong>: 분산 시스템에서는 Zookeeper나 etcd와 같은 도구를 사용하여 분산 락을 구현한다.&lt;/li>
&lt;li>&lt;strong>버전 관리&lt;/strong>: 낙관적 동시성 제어를 위해 데이터 버전을 관리하여 충돌을 감지하고 해결한다.&lt;/li>
&lt;li>&lt;strong>이벤트 소싱&lt;/strong>: 상태 변경을 이벤트로 기록하여 일관성을 유지하고 경쟁 상태를 해결한다.&lt;/li>
&lt;/ol>
&lt;h3>경쟁 상태를 시연하고 해결하는 예제&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 경쟁 상태가 발생하는 예제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">BankAccount&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1"># 공유 자원&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">deposit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 현재 잔액 읽기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 시간 지연을 통한 경쟁 상태 시뮬레이션&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 잔액 업데이트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">amount&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_balance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 경쟁 상태가 해결된 버전&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SafeBankAccount&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 상호 배제를 위한 락&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">deposit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 임계 영역 보호&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">amount&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_balance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 테스트 함수&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_race_condition&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 경쟁 상태가 있는 계좌&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">account&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BankAccount&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 여러 스레드가 동시에 입금&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">account&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">deposit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 모든 스레드 완료 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;예상 잔액: 1000, 실제 잔액: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">account&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_balance&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 안전한 계좌로 테스트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">safe_account&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SafeBankAccount&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 동일한 테스트 수행&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">safe_account&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">deposit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threads&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">threads&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;안전한 계좌 잔액: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">safe_account&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_balance&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test_race_condition&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>동시성 제어 (Concurrency Control)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/concurrency-control/</link><pubDate>Sat, 23 Nov 2024 02:47:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/concurrency-control/</guid><description>
&lt;h2>동시성 제어 (Concurrency Control)&lt;/h2>&lt;p>동시성 제어는 여러 프로세스나 스레드가 동시에 공유 자원에 접근할 때, 데이터의 일관성과 무결성을 보장하기 위한 제어 메커니즘.&lt;br>
다중 사용자 환경에서 필수적으로 지원해야 하는 기능으로, 병행제어라고도 한다.&lt;/p>
&lt;h3>동시성 제어의 중요성&lt;/h3>&lt;p>동시성 제어는 다음과 같은 문제를 방지하여 데이터베이스의 무결성을 유지한다:&lt;/p>
&lt;ul>
&lt;li>갱신 손실: 동시에 수행된 갱신 작업으로 인한 데이터 손실&lt;/li>
&lt;li>모순성: 일관성 없는 데이터 읽기&lt;/li>
&lt;li>연쇄 복귀: 하나의 트랜잭션 실패로 인한 다른 트랜잭션들의 복귀&lt;/li>
&lt;/ul>
&lt;h3>목적&lt;/h3>&lt;ol>
&lt;li>트랜잭션의 직렬성 보장&lt;/li>
&lt;li>데이터의 무결성 및 일관성 유지&lt;/li>
&lt;li>시스템 활용도 최대화 (공유도 최대, 응답 시간 최소, 처리량 최대화)&lt;/li>
&lt;/ol>
&lt;h3>주요 동시성 제어 기법&lt;/h3>&lt;h4>락킹(Locking) 기법&lt;/h4>&lt;p>락킹은 가장 기본적인 동시성 제어 방법으로, 데이터에 접근할 때 잠금을 설정하여 다른 프로세스의 접근을 제한한다.&lt;/p>
&lt;h5>종류&lt;/h5>&lt;p>공유 락(Shared Lock):&lt;/p>
&lt;ul>
&lt;li>읽기 작업을 위한 락&lt;/li>
&lt;li>여러 프로세스가 동시에 획득 가능&lt;/li>
&lt;li>데이터 읽기만 허용됨&lt;/li>
&lt;/ul>
&lt;p>배타적 락(Exclusive Lock):&lt;/p>
&lt;ul>
&lt;li>쓰기 작업을 위한 락&lt;/li>
&lt;li>한 번에 하나의 프로세스만 획득 가능&lt;/li>
&lt;li>데이터 읽기와 쓰기 모두 가능&lt;/li>
&lt;/ul>
&lt;h4>타임스탬프 기반 기법(Timestamp-based Protocol)&lt;/h4>&lt;p>각 트랜잭션에 고유한 타임스탬프를 부여하여 실행 순서를 결정하는 방식.&lt;/p>
&lt;h5>작동 원리&lt;/h5>&lt;ul>
&lt;li>트랜잭션 시작 시 타임스탬프 부여&lt;/li>
&lt;li>읽기/쓰기 타임스탬프 관리&lt;/li>
&lt;li>충돌 발생 시 타임스탬프 비교하여 처리&lt;/li>
&lt;/ul>
&lt;h5>장점&lt;/h5>&lt;ul>
&lt;li>교착상태 발생하지 않음&lt;/li>
&lt;li>우선순위 기반 처리 가능&lt;/li>
&lt;/ul>
&lt;h4>낙관적 병행 제어(Optimistic Concurrency Control)&lt;/h4>&lt;p>충돌이 적을 것이라 가정하고, 검증 단계에서 충돌을 확인하는 방식.&lt;/p>
&lt;h5>처리 단계&lt;/h5>&lt;ul>
&lt;li>읽기 단계: 데이터 읽기와 로컬 복사본 생성&lt;/li>
&lt;li>수행 단계: 로컬 복사본에서 작업 수행&lt;/li>
&lt;li>검증 단계: 충돌 여부 확인&lt;/li>
&lt;li>쓰기 단계: 검증 성공 시 결과 반영&lt;/li>
&lt;/ul>
&lt;h4>다중버전 병행 제어(Multiversion Concurrency Control, MVCC)&lt;/h4>&lt;p>데이터의 여러 버전을 유지하여 읽기 작업의 병행성을 향상시키는 기법.&lt;/p>
&lt;h5>특징&lt;/h5>&lt;ul>
&lt;li>각 쓰기 작업마다 새로운 버전 생성&lt;/li>
&lt;li>읽기 작업은 특정 시점의 버전을 참조&lt;/li>
&lt;li>트랜잭션의 일관성 보장&lt;/li>
&lt;/ul>
&lt;h5>실제 적용 예시&lt;/h5>&lt;p>PostgreSQL이나 Oracle 같은 데이터베이스 시스템에서 MVCC를 사용하여 읽기 작업의 성능을 향상시킨다.&lt;/p>
&lt;h3>동시성 제어의 구현 시 고려사항&lt;/h3>&lt;ol>
&lt;li>
&lt;p>성능과 확장성&lt;/p>
&lt;ul>
&lt;li>락의 세분성 조절&lt;/li>
&lt;li>데드락 방지 메커니즘&lt;/li>
&lt;li>캐시 일관성 유지&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>일관성 수준&lt;/p>
&lt;ul>
&lt;li>직렬성(Serializability)&lt;/li>
&lt;li>스냅샷 격리(Snapshot Isolation)&lt;/li>
&lt;li>읽기 일관성(Read Consistency)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>장애 복구&lt;/p>
&lt;ul>
&lt;li>롤백 메커니즘&lt;/li>
&lt;li>복구 로그 관리&lt;/li>
&lt;li>체크포인트 설정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>동시성 제어의 발전 방향&lt;/h3>&lt;ol>
&lt;li>
&lt;p>분산 시스템에서의 동시성 제어&lt;/p>
&lt;ul>
&lt;li>분산 락 관리&lt;/li>
&lt;li>합의(Consensus) 알고리즘&lt;/li>
&lt;li>최종 일관성(Eventual Consistency)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>새로운 하드웨어 지원&lt;/p>
&lt;ul>
&lt;li>하드웨어 트랜잭션 메모리&lt;/li>
&lt;li>원자적 명령어 활용&lt;/li>
&lt;li>멀티코어 최적화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>인메모리 데이터베이스&lt;/p>
&lt;ul>
&lt;li>락-프리 알고리즘&lt;/li>
&lt;li>비동기 복제&lt;/li>
&lt;li>실시간 동시성 제어&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>실제 구현 시 주의사항&lt;/h3>&lt;ol>
&lt;li>
&lt;p>데드락 예방&lt;/p>
&lt;ul>
&lt;li>타임아웃 설정&lt;/li>
&lt;li>자원 순서화&lt;/li>
&lt;li>데드락 감지 알고리즘 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 최적화&lt;/p>
&lt;ul>
&lt;li>락 경합(Lock Contention) 최소화&lt;/li>
&lt;li>트랜잭션 분할&lt;/li>
&lt;li>캐시 활용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>모니터링과 디버깅&lt;/p>
&lt;ul>
&lt;li>락 획득/해제 로깅&lt;/li>
&lt;li>성능 메트릭 수집&lt;/li>
&lt;li>병목 지점 분석&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Lock and Mutex</title><link>https://buenhyden.github.io/til/2024/11/lock-and-mutex/</link><pubDate>Sun, 17 Nov 2024 11:25:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/11/lock-and-mutex/</guid><description>
&lt;h2>Lock and Mutex&lt;/h2>&lt;p>Lock과 Mutex는 둘 다 여러 스레드가 공유 자원에 동시에 접근하는 것을 방지하는 동기화 도구이다. 한 스레드가 자원을 사용할 때 다른 스레드의 접근을 막는 것이다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Mutex&lt;/th>
&lt;th>Lock&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>기본 개념&lt;/strong>&lt;/td>
&lt;td>상호 배제를 위한 동기화 객체로, 소유권 개념이 있음&lt;/td>
&lt;td>일반적인 동기화 메커니즘으로, 단순한 잠금/해제 기능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>소유권&lt;/strong>&lt;/td>
&lt;td>소유권 개념이 있어 획득한 스레드만 해제 가능&lt;/td>
&lt;td>소유권 개념이 없어 다른 스레드도 해제 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>재진입성&lt;/strong>&lt;/td>
&lt;td>보통 재진입 가능 (같은 스레드가 여러 번 획득 가능)&lt;/td>
&lt;td>구현에 따라 재진입 가능할 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>용도&lt;/strong>&lt;/td>
&lt;td>스레드 간 엄격한 상호 배제가 필요한 경우&lt;/td>
&lt;td>간단한 동기화가 필요한 일반적인 상황&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>성능&lt;/strong>&lt;/td>
&lt;td>소유권 검사 등으로 인한 오버헤드 존재&lt;/td>
&lt;td>상대적으로 가벼운 오버헤드, 단 구현에 따라 다름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>에러 처리&lt;/strong>&lt;/td>
&lt;td>소유권 위반 시 예외 발생 가능&lt;/td>
&lt;td>단순한 실패/성공 여부만 반환&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>구현 복잡도&lt;/strong>&lt;/td>
&lt;td>상대적으로 복잡한 구현&lt;/td>
&lt;td>단순한 구현, 그러나 고급 기능 추가 시 복잡해질 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>적용 범위&lt;/strong>&lt;/td>
&lt;td>프로세스 내 스레드 간 동기화&lt;/td>
&lt;td>프로세스 내 또는 프로세스 간 동기화에 사용 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>우선순위 상속&lt;/strong>&lt;/td>
&lt;td>우선순위 상속 지원 가능&lt;/td>
&lt;td>일반적으로 지원하지 않음, 구현에 따라 다를 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>교착상태 처리&lt;/strong>&lt;/td>
&lt;td>소유권 추적으로 교착상태 감지 용이&lt;/td>
&lt;td>기본적인 교착상태 감지만 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>에러 검사&lt;/strong>&lt;/td>
&lt;td>상세한 에러 검사 및 보고 기능&lt;/td>
&lt;td>기본적인 에러 검사, 구현에 따라 확장 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 사용&lt;/strong>&lt;/td>
&lt;td>소유권 정보 저장으로 추가 메모리 필요&lt;/td>
&lt;td>최소한의 메모리 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>유연성&lt;/strong>&lt;/td>
&lt;td>엄격한 규칙으로 유연성 제한&lt;/td>
&lt;td>상대적으로 유연한 사용 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>디버깅&lt;/strong>&lt;/td>
&lt;td>소유권 정보로 디버깅 용이&lt;/td>
&lt;td>디버깅이 상대적으로 어려움, 구현에 따라 다를 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>사용 예시&lt;/strong>&lt;/td>
&lt;td>데이터베이스 트랜잭션, 파일 시스템 접근&lt;/td>
&lt;td>간단한 공유 자원 보호, 카운터&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>타임아웃 지원&lt;/strong>&lt;/td>
&lt;td>보통 타임아웃 기능 내장&lt;/td>
&lt;td>구현에 따라 타임아웃 지원 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>복구 기능&lt;/strong>&lt;/td>
&lt;td>비정상 종료 시 자동 복구 지원&lt;/td>
&lt;td>구현에 따라 자동 복구 기능 추가 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>중첩 사용&lt;/strong>&lt;/td>
&lt;td>재진입성으로 중첩 사용 가능&lt;/td>
&lt;td>구현에 따라 중첩 사용 가능, 주의 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>시스템 수준&lt;/strong>&lt;/td>
&lt;td>주로 커널 수준에서 구현&lt;/td>
&lt;td>사용자 수준 및 커널 수준 모두에서 구현 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>표준화&lt;/strong>&lt;/td>
&lt;td>POSIX 표준으로 잘 정의됨&lt;/td>
&lt;td>구현에 따라 동작이 다를 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>성능 특성&lt;/strong>&lt;/td>
&lt;td>경쟁 상황에서 성능 저하 가능&lt;/td>
&lt;td>스핀락 구현 시 짧은 대기 시간에 효율적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>공정성&lt;/strong>&lt;/td>
&lt;td>일반적으로 공정성 메커니즘 내장&lt;/td>
&lt;td>구현에 따라 공정성 보장 여부가 다름&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>실제 구현 시에는 고려할 사항&lt;/h3>&lt;ul>
&lt;li>동시성 요구사항 (얼마나 많은 스레드가 동시에 접근하는가)&lt;/li>
&lt;li>성능 요구사항 (응답 시간, 처리량 등)&lt;/li>
&lt;li>리소스 사용량 (메모리, CPU 사용률)&lt;/li>
&lt;li>오류 처리 및 복구 요구사항&lt;/li>
&lt;li>데드록 방지 필요성&lt;/li>
&lt;li>플랫폼 및 운영체제의 지원 여부&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>동기화 (Synchronization)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/synchronization/</link><pubDate>Thu, 07 Nov 2024 07:48:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/synchronization/</guid><description>
&lt;h2>동기화 (Synchronization)&lt;/h2>&lt;p>여러 프로세스나 스레드가 공유 자원에 접근할 때 데이터의 일관성과 무결성을 보장하기 위한 메커니즘.&lt;br>
동기화란 프로세스 또는 스레드들이 수행되는 시점을 조절하여 서로가 알고 있는 정보가 일치하도록 하는 것을 의미한다. 이는 여러 작업 간의 실행 순서와 타이밍을 제어하여 데이터의 일관성을 유지하고 경쟁 상태(Race Condition)를 방지하는 것을 목표로 한다.&lt;/p>
&lt;h3>동기화의 필요성&lt;/h3>&lt;p>동기화가 필요한 주요 이유는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>데이터 일관성 유지: 여러 프로세스나 스레드가 동시에 같은 데이터에 접근할 때 발생할 수 있는 불일치를 방지한다.&lt;/li>
&lt;li>경쟁 상태 방지: 둘 이상의 프로세스가 공유 자원에 동시에 접근하려 할 때 발생할 수 있는 예측 불가능한 결과를 방지한다.&lt;/li>
&lt;li>순서 보장: 특정 작업이 다른 작업보다 먼저 실행되어야 하는 경우, 동기화를 통해 실행 순서를 제어할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>동기화 메커니즘&lt;/h3>&lt;p>동기화를 구현하기 위한 주요 메커니즘은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>뮤텍스(Mutex): 상호 배제를 위한 잠금 메커니즘으로, 한 번에 하나의 스레드만 공유 자원에 접근할 수 있도록 한다.&lt;/li>
&lt;li>세마포어(Semaphore): 여러 프로세스나 스레드가 공유 자원에 접근할 수 있는 수를 제한하는 카운팅 메커니즘.&lt;/li>
&lt;li>모니터(Monitor): 공유 자원을 내부적으로 관리하고, 외부에서는 정해진 인터페이스를 통해서만 접근할 수 있도록 하는 고수준의 동기화 구조.&lt;/li>
&lt;li>조건 변수(Condition Variables): 특정 조건이 만족될 때까지 스레드를 대기시키고, 조건이 충족되면 대기 중인 스레드를 깨우는 메커니즘.&lt;/li>
&lt;/ol>
&lt;h3>동기화의 구현&lt;/h3>&lt;p>프로그래밍에서 동기화를 구현할 때는 다음과 같은 방법들이 사용된다:&lt;/p>
&lt;ol>
&lt;li>임계 영역(Critical Section) 설정: 공유 자원에 접근하는 코드 부분을 임계 영역으로 지정하고, 한 번에 하나의 프로세스만 진입할 수 있도록 한다.&lt;/li>
&lt;li>락(Lock) 사용: 공유 자원에 접근하기 전에 락을 획득하고, 작업이 끝나면 락을 해제하는 방식으로 동기화를 구현한다.&lt;/li>
&lt;li>원자적 연산(Atomic Operations) 사용: 분할할 수 없는 단일 연산으로 처리하여 중간 상태를 방지한다.&lt;/li>
&lt;/ol>
&lt;h3>동기화의 주의사항&lt;/h3>&lt;p>동기화를 구현할 때는 다음과 같은 점들을 주의해야 한다:&lt;/p>
&lt;ol>
&lt;li>데드락(Deadlock) 방지: 여러 프로세스가 서로의 자원을 기다리며 영원히 블록되는 상황을 피해야 한다.&lt;/li>
&lt;li>성능 고려: 과도한 동기화는 성능 저하를 초래할 수 있으므로, 필요한 부분에만 적절히 사용해야 한다.&lt;/li>
&lt;li>세밀한 락 사용: 전역 락 대신 세분화된 락을 사용하여 병렬성을 높인다.&lt;/li>
&lt;li>재진입성(Reentrancy) 고려: 동일한 스레드가 이미 획득한 락을 다시 획득할 수 있도록 재진입 가능한 락을 사용해야 할 수 있다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>