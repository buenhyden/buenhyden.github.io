<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Concurrency-Control on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/concurrency-control/</link>
    <description>Recent content in Concurrency-Control on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Mon, 04 Aug 2025 03:58:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/concurrency-control/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pessimistic vs. Optimistic Locking</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-and-parallelism/lock/pessimistic-vs-optimistic-locking/</link>
      <pubDate>Mon, 04 Aug 2025 03:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-and-parallelism/lock/pessimistic-vs-optimistic-locking/</guid>
      <description>Pessimistic과 Optimistic Locking은 데이터 무결성 보장을 위한 두 가지 대표 동시성 제어 전략이다. 전자는 충돌을 사전에 차단하고, 후자는 충돌 발생 시 검증한다. 충돌 빈도, 시스템 환경, 성능 요구에 따라 적절히 선택해야 한다.</description>
    </item>
    <item>
      <title>Lock</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-and-parallelism/lock/</link>
      <pubDate>Mon, 04 Aug 2025 03:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-and-parallelism/lock/</guid>
      <description>Lock은 멀티스레드 환경에서 공유 자원에 대한 동시 접근을 제어하여 상호 배제(Mutual Exclusion)를 보장하는 동기화 수단이다. 임계 구역 보호를 통해 원자성을 제공하며, 경쟁 조건(Race Condition)을 방지한다. Spin Lock, Mutex, Reentrant Lock 등 다양한 유형이 존재하며, 선택에 따라 성능과 안정성에 영향을 미친다.</description>
    </item>
    <item>
      <title>Deadlock</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-and-parallelism/concurrency-problems/deadlock/</link>
      <pubDate>Tue, 20 May 2025 14:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-and-parallelism/concurrency-problems/deadlock/</guid>
      <description>Deadlock(교착상태) 은 둘 이상의 프로세스나 스레드가 서로가 보유한 자원을 기다리며 무한정 대기하는 현상으로, 시스템 전체 성능과 안정성에 큰 영향을 미치는 주요 동시성 문제다. 상호 배제, 점유와 대기, 비선점, 순환 대기라는 네 가지 필요조건이 동시에 성립할 때 발생하며, 시스템 성능 저하와 응답 불가 상태를 초래한다.</description>
    </item>
    <item>
      <title>Critical Section</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-and-parallelism/synchronization-primitives/software-level/critical-section/</link>
      <pubDate>Tue, 20 May 2025 14:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-and-parallelism/synchronization-primitives/software-level/critical-section/</guid>
      <description>**Critical Section**은 여러 실행 흐름이 동시에 공유 자원에 접근하는 것을 방지하기 위해 **오직 하나만 진입**할 수 있도록 설계된 코드 영역입니다. **Mutual Exclusion**을 통해 **데이터 일관성**과 **Race Condition 방지**를 보장하며, **mutex, semaphore, monitor, atomic operation** 등의 동기화 기법으로 제어합니다.</description>
    </item>
    <item>
      <title>Mutual Exclusion</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-and-parallelism/classical-algorithms/mutual-exclusion/</link>
      <pubDate>Tue, 20 May 2025 14:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-and-parallelism/classical-algorithms/mutual-exclusion/</guid>
      <description>**상호 배제(Mutual Exclusion)**는 여러 스레드나 프로세스가 공유 자원에 동시에 접근하지 못하도록 제어하여 데이터 일관성과 시스템 안정성을 보장하는 동시성 제어 기법이다. **임계 구역(Critical Section)**에 한 번에 하나의 실행 단위만 진입하도록 제한하며, **경쟁 상태(Race Condition)**를 방지한다. 구현에는 락(Lock), 세마포어(Semaphore), 뮤텍스(Mutex), 모니터(Monitor) 등이 사용되며, 분산 환경과 실시간 시스템에서도 필수적으로 활용된다.</description>
    </item>
    <item>
      <title>Transaction Isolation</title>
      <link>https://buenhyden.github.io/posts/system-design/database-systems/transaction/transaction-isolation/</link>
      <pubDate>Mon, 12 May 2025 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/database-systems/transaction/transaction-isolation/</guid>
      <description>트랜잭션 격리(Transaction Isolation)는 ACID 속성 중 하나로, 동시에 실행되는 트랜잭션 간 간섭을 제어해 데이터 일관성을 보장한다. SQL 표준 격리 수준은 Read Uncommitted, Read Committed, Repeatable Read, Serializable로, 각 수준에 따라 Dirty/Non-Repeatable/Phantom Read 허용 여부와 성능이 달라진다.</description>
    </item>
    <item>
      <title>Transaction Isolation Levels</title>
      <link>https://buenhyden.github.io/posts/system-design/database-systems/transaction/transaction-isolation/transaction-isolation-levels/</link>
      <pubDate>Thu, 06 Feb 2025 04:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/database-systems/transaction/transaction-isolation/transaction-isolation-levels/</guid>
      <description>트랜잭션 격리 수준(Transaction Isolation Level)은 DBMS가 동시에 실행되는 트랜잭션 간 데이터 접근·갱신 방식을 제어해 Dirty Read, Non-repeatable Read, Phantom Read 등을 방지하는 메커니즘이다. SQL-92 표준의 4단계(Read Uncommitted~Serializable)와 Lock·MVCC 기반 구현을 통해 성능과 일관성 간 균형을 조정한다.</description>
    </item>
    <item>
      <title>Mutex</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-and-parallelism/synchronization-primitives/software-level/mutex/</link>
      <pubDate>Fri, 04 Oct 2024 11:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-and-parallelism/synchronization-primitives/software-level/mutex/</guid>
      <description>Mutex는 상호 배제(Mutual Exclusion)를 구현하는 동기화 도구로, 여러 스레드 또는 프로세스가 공유 자원에 동시에 접근하지 못하도록 제어한다. 임계 구역 보호를 통해 레이스 컨디션과 데이터 불일치를 방지하며, 락(lock)과 언락(unlock)을 통해 자원 접근을 순차적으로 보장한다. 스핀락, 블로킹, 재귀적 락 등 다양한 구현 기법과 우선순위 제어 정책이 존재한다.</description>
    </item>
    <item>
      <title>동시성 (Concurrency)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-and-parallelism/fundamental-concepts/concurrency/</link>
      <pubDate>Fri, 04 Oct 2024 06:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-and-parallelism/fundamental-concepts/concurrency/</guid>
      <description>동시성 (Concurrency)은 여러 작업이 동시에 실행되는 것처럼 보이지만, 실제로는 매우 빠르게 작업 간 전환을 하면서 처리하는 방식이다.</description>
    </item>
    <item>
      <title>동시성 제어 (Concurrency Control)</title>
      <link>https://buenhyden.github.io/posts/system-design/database-systems/concurrency-control/</link>
      <pubDate>Wed, 02 Oct 2024 02:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/database-systems/concurrency-control/</guid>
      <description>동시성 제어는 여러 프로세스나 스레드가 동시에 공유 자원에 접근할 때, 데이터의 일관성과 무결성을 보장하기 위한 제어 메커니즘</description>
    </item>
  </channel>
</rss>
