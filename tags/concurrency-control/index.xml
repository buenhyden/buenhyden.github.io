<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Concurrency-Control on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/concurrency-control/</link>
    <description>Recent content in Concurrency-Control on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.150.1</generator>
    <language>en</language>
    <lastBuildDate>Tue, 23 Sep 2025 03:56:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/concurrency-control/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lock Duration</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-duration/</link>
      <pubDate>Tue, 23 Sep 2025 03:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-duration/</guid>
      <description>락 지속시간은 트랜잭션이 특정 자원 락을 획득한 시점부터 해제·커밋으로 풀릴 때까지의 보유 기간이다. 격리수준, 2PL(Strict/Rigorous 여부), MVCC와 키-범위락, 락 에스컬레이션·타임아웃, 애플리케이션 로직이 이를 좌우한다. 지속시간은 동시성, 지연, 데드락 확률, 로그·복구 비용에 직접 영향을 준다.</description>
    </item>
    <item>
      <title>Intent Modes</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-modes/intent-modes/</link>
      <pubDate>Mon, 22 Sep 2025 08:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-modes/intent-modes/</guid>
      <description>의도 모드는 테이블–페이지–행 등 계층에서 하위 자원에 둘 S/X 잠금 계획을 상위에 신호해 충돌을 빠르게 판정하는 메커니즘이다. IS·IX·SIX로 탐색과 갱신이 뒤섞인 상황을 조율하고, 다중 그라뉼러리티·호환성 표·에스컬레이션과 결합해 동시성과 일관성을 높인다.</description>
    </item>
    <item>
      <title>Lock Compatibility Matrix</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-modes/lock-compatibility-matrix/</link>
      <pubDate>Mon, 22 Sep 2025 08:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-modes/lock-compatibility-matrix/</guid>
      <description>락 호환성 매트릭스는 DB 트랜잭션이 동일 자원에 대해 요청하는 잠금 모드의 동시 허용·차단 관계를 표로 정리한 것. S/X/U와 의도 잠금(IS/IX/SIX), 키-범위 잠금과 함께 사용되어 충돌 최소화, 팬텀 방지, 일관성과 성능의 균형 설계의 기준이 된다.</description>
    </item>
    <item>
      <title>Locking Protocols</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/locking-protocols/</link>
      <pubDate>Mon, 22 Sep 2025 04:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/locking-protocols/</guid>
      <description>락 프로토콜은 트랜잭션의 동시 접근을 제어해 일관성과 직렬성을 보장하는 규칙 집합이다. 대표적으로 Two-Phase Locking(공유·배타·업데이트·의도 락)과 범위 락이 있으며, MVCC·낙관적 기법과의 혼용으로 성능·무결성 간 트레이드오프를 관리한다.</description>
    </item>
    <item>
      <title>Lock Modes</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-modes/</link>
      <pubDate>Wed, 27 Aug 2025 06:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-modes/</guid>
      <description>락 모드는 자원 접근의 허용 범위를 규정해 일관성과 동시성을 관리한다. S/X/U와 Intent 계열은 계층적 락 조정에, gap/next-key/predicate 등 범위형 락은 팬텀을 방지한다. DBMS별 용어·정책 차이를 확인하고 트랜잭션 패턴에 맞춰 레벨·격리·인덱스를 조정하면 성능과 일관성 균형을 맞출 수 있다.</description>
    </item>
    <item>
      <title>MVCC(Multi-Version Concurrency Control, 다중 버전 동시성 제어)</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/optimistic-concurrency-control/versioning/mvcc/</link>
      <pubDate>Wed, 27 Aug 2025 06:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/optimistic-concurrency-control/versioning/mvcc/</guid>
      <description>MVCC는 트랜잭션마다 일관된 스냅샷을 제공하기 위해 데이터의 여러 버전을 유지하는 동시성 제어 방식이다. 읽기는 기존 버전을 읽어 비차단으로 처리되고, 쓰기는 새 버전을 생성해 커밋 시 가시성이 바뀐다. 높은 읽기 동시성과 낮은 락 경합을 제공하지만 버전 누적으로 인한 저장·GC 부담과 일부 격리 이상(issue)이 존재한다.</description>
    </item>
    <item>
      <title>Lock Granularity</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-granularity/</link>
      <pubDate>Tue, 12 Aug 2025 09:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-granularity/</guid>
      <description>잠금 세분성은 잠금을 적용하는 단위를 정의해 동시성 및 관리 오버헤드의 균형을 결정하는 핵심 설계 요소다. 세분화는 동시성을 높이나 메타데이터·추적 비용을 증가시키며, 의도잠금·계층적 잠금·에스컬레이션과 워크로드 기반 튜닝으로 실무적 트레이드오프를 관리한다.</description>
    </item>
    <item>
      <title>Transaction</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/</link>
      <pubDate>Sun, 10 Aug 2025 14:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/</guid>
      <description>**트랜잭션(Transaction)**은 데이터베이스에서 상태를 변화시키는 여러 작업을 하나의 논리적 단위로 묶어 처리하는 기술이다. ACID (Atomicity, Consistency, Isolation, Durability) 속성을 보장하여 시스템 오류나 동시성 문제에도 데이터의 무결성과 신뢰성을 유지한다. 트랜잭션의 **격리 수준(Isolation Level)**을 조절하여 데이터 일관성과 성능 사이의 균형을 맞추며, 분산 시스템에서는 2상 커밋(2-Phase Commit) 같은 프로토콜을 통해 여러 노드에 걸친 작업의 원자성을 보장한다. 이처럼 트랜잭션은 현대 소프트웨어의 안정적 데이터 관리에 필수적인 핵심 메커니즘이다.</description>
    </item>
    <item>
      <title>Lock</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/synchronization-primitives/mutexes-and-locks/lock/</link>
      <pubDate>Mon, 04 Aug 2025 03:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/synchronization-primitives/mutexes-and-locks/lock/</guid>
      <description>Lock은 멀티스레드 환경에서 공유 자원에 대한 동시 접근을 제어하여 상호 배제(Mutual Exclusion)를 보장하는 동기화 수단이다. 임계 구역 보호를 통해 원자성을 제공하며, 경쟁 조건(Race Condition)을 방지한다. Spin Lock, Mutex, Reentrant Lock 등 다양한 유형이 존재하며, 선택에 따라 성능과 안정성에 영향을 미친다.</description>
    </item>
    <item>
      <title>Deadlock</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/concurrency-problems/deadlock/</link>
      <pubDate>Tue, 20 May 2025 14:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/concurrency-problems/deadlock/</guid>
      <description>Deadlock(교착상태) 은 둘 이상의 프로세스나 스레드가 서로가 보유한 자원을 기다리며 무한정 대기하는 현상으로, 시스템 전체 성능과 안정성에 큰 영향을 미치는 주요 동시성 문제다. 상호 배제, 점유와 대기, 비선점, 순환 대기라는 네 가지 필요조건이 동시에 성립할 때 발생하며, 시스템 성능 저하와 응답 불가 상태를 초래한다.</description>
    </item>
    <item>
      <title>Critical Section</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/basic-concepts/critical-section/</link>
      <pubDate>Tue, 20 May 2025 14:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/basic-concepts/critical-section/</guid>
      <description>**Critical Section**은 여러 실행 흐름이 동시에 공유 자원에 접근하는 것을 방지하기 위해 **오직 하나만 진입**할 수 있도록 설계된 코드 영역입니다. **Mutual Exclusion**을 통해 **데이터 일관성**과 **Race Condition 방지**를 보장하며, **mutex, semaphore, monitor, atomic operation** 등의 동기화 기법으로 제어합니다.</description>
    </item>
    <item>
      <title>Mutual Exclusion</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/thread-programming/thread-synchronization/mutual-exclusion/</link>
      <pubDate>Tue, 20 May 2025 14:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/thread-programming/thread-synchronization/mutual-exclusion/</guid>
      <description>**상호 배제(Mutual Exclusion)**는 여러 스레드나 프로세스가 공유 자원에 동시에 접근하지 못하도록 제어하여 데이터 일관성과 시스템 안정성을 보장하는 동시성 제어 기법이다. **임계 구역(Critical Section)**에 한 번에 하나의 실행 단위만 진입하도록 제한하며, **경쟁 상태(Race Condition)**를 방지한다. 구현에는 락(Lock), 세마포어(Semaphore), 뮤텍스(Mutex), 모니터(Monitor) 등이 사용되며, 분산 환경과 실시간 시스템에서도 필수적으로 활용된다.</description>
    </item>
    <item>
      <title>Transaction Isolation</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/</link>
      <pubDate>Mon, 12 May 2025 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/</guid>
      <description>트랜잭션 격리(Transaction Isolation)는 ACID 속성 중 하나로, 동시에 실행되는 트랜잭션 간 간섭을 제어해 데이터 일관성을 보장한다. SQL 표준 격리 수준은 Read Uncommitted, Read Committed, Repeatable Read, Serializable로, 각 수준에 따라 Dirty/Non-Repeatable/Phantom Read 허용 여부와 성능이 달라진다.</description>
    </item>
    <item>
      <title>Transaction Isolation Levels</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/</link>
      <pubDate>Thu, 06 Feb 2025 04:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/</guid>
      <description>트랜잭션 격리 수준(Transaction Isolation Level)은 DBMS가 동시에 실행되는 트랜잭션 간 데이터 접근·갱신 방식을 제어해 Dirty Read, Non-repeatable Read, Phantom Read 등을 방지하는 메커니즘이다. SQL-92 표준의 4단계(Read Uncommitted~Serializable)와 Lock·MVCC 기반 구현을 통해 성능과 일관성 간 균형을 조정한다.</description>
    </item>
    <item>
      <title>Locking</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/</link>
      <pubDate>Thu, 24 Oct 2024 15:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/</guid>
      <description>락킹은 동시 트랜잭션이 같은 데이터를 안전하게 다루게 하는 메커니즘으로, 공유·배타·의도락 등 다양한 모드와 행·페이지·테이블 단위로 접근을 제어한다. 2PL 계열은 직렬성을 보장하지만 데드락과 대기 비용이 생기므로 MVCC나 낙관적 기법과 조합해 성능·일관성의 균형을 맞춘다. 분산 환경에서는 네트워크·타임 동기 문제를 추가로 고려해야 한다.</description>
    </item>
    <item>
      <title>Mutex</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/synchronization-primitives/mutexes-and-locks/mutex/</link>
      <pubDate>Fri, 04 Oct 2024 11:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/synchronization-primitives/mutexes-and-locks/mutex/</guid>
      <description>Mutex는 상호 배제(Mutual Exclusion)를 구현하는 동기화 도구로, 여러 스레드 또는 프로세스가 공유 자원에 동시에 접근하지 못하도록 제어한다. 임계 구역 보호를 통해 레이스 컨디션과 데이터 불일치를 방지하며, 락(lock)과 언락(unlock)을 통해 자원 접근을 순차적으로 보장한다. 스핀락, 블로킹, 재귀적 락 등 다양한 구현 기법과 우선순위 제어 정책이 존재한다.</description>
    </item>
    <item>
      <title>동시성 (Concurrency)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/basic-concepts/concurrency-vs-parallelism/concurrency/</link>
      <pubDate>Fri, 04 Oct 2024 06:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/basic-concepts/concurrency-vs-parallelism/concurrency/</guid>
      <description>동시성 (Concurrency)은 여러 작업이 동시에 실행되는 것처럼 보이지만, 실제로는 매우 빠르게 작업 간 전환을 하면서 처리하는 방식이다.</description>
    </item>
    <item>
      <title>Pessimistic Locking vs. Optimistic Concurrency Control(OCC)</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/</link>
      <pubDate>Wed, 02 Oct 2024 02:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/</guid>
      <description>Pessimistic Locking과 Optimistic Concurrency Control  데이터 무결성 보장을 위한 두 가지 대표 동시성 제어 전략이다. 전자는 충돌을 사전에 차단하고, 후자는 충돌 발생 시 검증한다. 충돌 빈도, 시스템 환경, 성능 요구에 따라 적절히 선택해야 한다.</description>
    </item>
  </channel>
</rss>
