<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Imperative-Programming on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/imperative-programming/</link>
    <description>Recent content in Imperative-Programming on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Wed, 19 Feb 2025 08:06:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/imperative-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Interface vs Abstract class</title>
      <link>https://buenhyden.github.io/posts/programming-and-development/programming-languages-and-theory/programming-paradigms/imperative-paradigms/object-oriented-programming/interface-vs-abstract-class/</link>
      <pubDate>Sun, 22 Sep 2024 05:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-and-development/programming-languages-and-theory/programming-paradigms/imperative-paradigms/object-oriented-programming/interface-vs-abstract-class/</guid>
      <description>인터페이스는 클래스가 &amp;#39;무엇을 해야 하는지&amp;#39;를 정의하는 계약(contract)과 같은 역할을 하며, 추상 클래스(Abstract Class)는 하나 이상의 추상 메서드를 포함하는 클래스이다.</description>
    </item>
    <item>
      <title>Primary Principles</title>
      <link>https://buenhyden.github.io/posts/programming-and-development/programming-languages-and-theory/programming-paradigms/imperative-paradigms/object-oriented-programming/primary-principles/</link>
      <pubDate>Wed, 19 Feb 2025 08:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-and-development/programming-languages-and-theory/programming-paradigms/imperative-paradigms/object-oriented-programming/primary-principles/</guid>
      <description>객체 지향 프로그래밍의 기본 원칙은 캡슐화, 상속, 다형성, 추상화의 네 가지 핵심 원칙으로 구성된다. 이러한 원칙들은 코드의 재사용성, 확장성, 유지보수성을 높이고 복잡한 시스템을 객체 단위로 분리하여 개발을 용이하게 한다. 이 원칙들은 현대 소프트웨어 개발의 근간이 되며, 다양한 프로그래밍 언어에서 구현되어 사용된다.</description>
    </item>
    <item>
      <title>명령형 프로그래밍(Imperative Programming) vs. 선언적 프로그래밍(Declarative Programming)</title>
      <link>https://buenhyden.github.io/posts/programming-and-development/programming-languages-and-theory/programming-paradigms/imperative-paradigms/imperative-programming-vs-declarative-programming/</link>
      <pubDate>Sun, 09 Feb 2025 12:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-and-development/programming-languages-and-theory/programming-paradigms/imperative-paradigms/imperative-programming-vs-declarative-programming/</guid>
      <description>명령형 프로그래밍은 세밀한 제어와 최적화가 필요한 영역에서 강점을 발휘하며, 선언적 프로그래밍은 높은 수준의 추상화와 간결함이 중요한 영역에서 유리하다.</description>
    </item>
    <item>
      <title>Access Modifiers</title>
      <link>https://buenhyden.github.io/posts/programming-and-development/programming-languages-and-theory/programming-paradigms/imperative-paradigms/object-oriented-programming/access-modifiers/</link>
      <pubDate>Mon, 23 Sep 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-and-development/programming-languages-and-theory/programming-paradigms/imperative-paradigms/object-oriented-programming/access-modifiers/</guid>
      <description>객체지향 프로그래밍(OOP)에서 접근 제어자(Access Modifiers)는 클래스, 메서드, 변수 등의 접근 범위를 제어하는 중요한 개념이다.</description>
    </item>
    <item>
      <title>객체 지향 프로그래밍 (Object-Oriented Programming)</title>
      <link>https://buenhyden.github.io/posts/programming-and-development/programming-languages-and-theory/programming-paradigms/imperative-paradigms/object-oriented-programming/</link>
      <pubDate>Sun, 22 Sep 2024 09:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-and-development/programming-languages-and-theory/programming-paradigms/imperative-paradigms/object-oriented-programming/</guid>
      <description>객체 지향 프로그래밍 (Object-Oriented Programming, OOP) 은 실세계의 사물을 객체로 모델링하여 프로그램을 설계하는 방법론이다. 추상화, 캡슐화, 상속, 다형성이라는 네 가지 핵심 특징을 통해 코드의 재사용성과 유지보수성을 향상시키며, 대규모 소프트웨어 개발에 적합한 프로그래밍 패러다임이다.</description>
    </item>
    <item>
      <title>명령형 프로그래밍(Imperative Programming)</title>
      <link>https://buenhyden.github.io/posts/programming-and-development/programming-languages-and-theory/programming-paradigms/imperative-paradigms/</link>
      <pubDate>Sun, 22 Sep 2024 08:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-and-development/programming-languages-and-theory/programming-paradigms/imperative-paradigms/</guid>
      <description>프로그램이 &amp;#39;어떻게&amp;#39; 작업을 수행해야 하는지를 명확하게 서술하는 프로그래밍 패러다임이다</description>
    </item>
    <item>
      <title>오버라이딩(Overriding) vs. 오버로딩(Overloading)</title>
      <link>https://buenhyden.github.io/posts/programming-and-development/programming-languages-and-theory/programming-paradigms/imperative-paradigms/object-oriented-programming/overriding-vs-overloading/</link>
      <pubDate>Sun, 22 Sep 2024 04:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-and-development/programming-languages-and-theory/programming-paradigms/imperative-paradigms/object-oriented-programming/overriding-vs-overloading/</guid>
      <description>오버라이딩(Overriding)과 오버로딩(Overloading)에 대해 알아보고 비교 분석해보자.</description>
    </item>
  </channel>
</rss>
