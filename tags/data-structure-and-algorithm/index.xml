<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Data-Structure-and-Algorithm on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/data-structure-and-algorithm/</link>
    <description>Recent content in Data-Structure-and-Algorithm on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Wed, 16 Oct 2024 12:03:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/data-structure-and-algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Concurrent Hash Map vs Hash Map vs Hash Table</title>
      <link>https://buenhyden.github.io/til/2024/10/11/concurrent-hash-map-vs-hash-map-vs-hash-table/</link>
      <pubDate>Fri, 11 Oct 2024 14:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/11/concurrent-hash-map-vs-hash-map-vs-hash-table/</guid>
      <description>&lt;h2 id=&#34;concurrent-hash-map-vs-hash-map-vs-hash-table&#34;&gt;Concurrent Hash Map Vs Hash Map Vs Hash Table&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;특성&lt;/th&gt;
          &lt;th&gt;Concurrent HashMap&lt;/th&gt;
          &lt;th&gt;HashMap&lt;/th&gt;
          &lt;th&gt;HashTable&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;동기화&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;세그먼트/버킷 단위의 부분 동기화 지원&lt;/td&gt;
          &lt;td&gt;동기화 지원하지 않음&lt;/td&gt;
          &lt;td&gt;메서드 단위의 전체 동기화 지원&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;동시성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;높은 동시성 지원 (여러 스레드가 동시에 다른 세그먼트에 접근 가능)&lt;/td&gt;
          &lt;td&gt;동시성 지원하지 않음 (단일 스레드 환경용)&lt;/td&gt;
          &lt;td&gt;낮은 동시성 (한 번에 하나의 스레드만 접근 가능)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;성능&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;동시 접근 시 높은 성능&lt;/td&gt;
          &lt;td&gt;단일 스레드에서 가장 높은 성능&lt;/td&gt;
          &lt;td&gt;동기화로 인한 성능 저하&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;null 허용&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;key와 value 모두 null 불가&lt;/td&gt;
          &lt;td&gt;key는 하나만 null 허용, value는 여러 개 null 허용&lt;/td&gt;
          &lt;td&gt;key와 value 모두 null 불가&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;초기 용량&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;기본 16, 세그먼트 수는 16&lt;/td&gt;
          &lt;td&gt;기본 16&lt;/td&gt;
          &lt;td&gt;기본 11&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;적재율&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;기본 0.75&lt;/td&gt;
          &lt;td&gt;기본 0.75&lt;/td&gt;
          &lt;td&gt;기본 0.75&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;이터레이션&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;fail-safe 이터레이터 제공&lt;/td&gt;
          &lt;td&gt;fail-fast 이터레이터 제공&lt;/td&gt;
          &lt;td&gt;fail-fast 이터레이터 제공&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;생성 시기&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Java 5&lt;/td&gt;
          &lt;td&gt;Java 1.2&lt;/td&gt;
          &lt;td&gt;Java 1.0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;메모리 사용&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;세그먼트로 인한 추가 메모리 필요&lt;/td&gt;
          &lt;td&gt;가장 적은 메모리 사용&lt;/td&gt;
          &lt;td&gt;동기화로 인한 추가 메모리 필요&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;용도&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;멀티스레드 환경의 동시성이 필요한 경우&lt;/td&gt;
          &lt;td&gt;단일 스레드 환경의 일반적인 경우&lt;/td&gt;
          &lt;td&gt;레거시 코드 호환성이 필요한 경우&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;확장성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;동적 확장 가능&lt;/td&gt;
          &lt;td&gt;동적 확장 가능&lt;/td&gt;
          &lt;td&gt;동적 확장 가능&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;순서 보장&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;삽입 순서 보장하지 않음&lt;/td&gt;
          &lt;td&gt;삽입 순서 보장하지 않음&lt;/td&gt;
          &lt;td&gt;삽입 순서 보장하지 않음&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;동기화 비용&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;부분적 동기화로 중간 수준의 비용&lt;/td&gt;
          &lt;td&gt;동기화 비용 없음&lt;/td&gt;
          &lt;td&gt;전체 동기화로 높은 비용&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;스레드 안전성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;스레드 안전&lt;/td&gt;
          &lt;td&gt;스레드 안전하지 않음&lt;/td&gt;
          &lt;td&gt;스레드 안전&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;키 충돌 처리&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;체이닝 방식&lt;/td&gt;
          &lt;td&gt;체이닝 방식&lt;/td&gt;
          &lt;td&gt;체이닝 방식&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;참고로 몇 가지 중요한 추가 설명을 하자면:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Concurrent Data Structure</title>
      <link>https://buenhyden.github.io/til/2024/10/11/concurrent-data-structure/</link>
      <pubDate>Fri, 11 Oct 2024 12:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/11/concurrent-data-structure/</guid>
      <description>Concurrent Data Structure는 여러 스레드가 동시에 안전하게 접근하고 조작할 수 있도록 설계된 데이터 구조로, 전통적인 데이터 구조와 달리, 동시성을 고려하여 데이터의 일관성과 무결성을 보장하면서도 높은 성능을 제공하는 것이 특징이다.</description>
    </item>
    <item>
      <title>Linear Data Structure vs Non-Linear Data Structure</title>
      <link>https://buenhyden.github.io/til/2024/10/11/linear-data-structure-vs-non-linear-data-structure/</link>
      <pubDate>Fri, 11 Oct 2024 11:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/11/linear-data-structure-vs-non-linear-data-structure/</guid>
      <description>Linear Data Structure Vs Non-Linear Data Structure</description>
    </item>
    <item>
      <title>Primitive data structure vs Non-Primitive data structure</title>
      <link>https://buenhyden.github.io/til/2024/10/11/primitive-data-structure-vs-non-primitive-data-structure/</link>
      <pubDate>Fri, 11 Oct 2024 08:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/11/primitive-data-structure-vs-non-primitive-data-structure/</guid>
      <description>Primitive data structure는 프로그래밍 언어에 내장된 가장 단순하고 기본적인 데이터 타입이며, Non-primitive data structure(비원시 자료구조)는 원시 자료형을 기반으로 만들어진 더 복잡하고 고급화된 자료구조를 의미한다.</description>
    </item>
    <item>
      <title>Suffix Array vs Suffix Tree vs Trie</title>
      <link>https://buenhyden.github.io/til/2024/10/11/suffix-array-vs-suffix-tree-vs-trie/</link>
      <pubDate>Fri, 11 Oct 2024 15:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/11/suffix-array-vs-suffix-tree-vs-trie/</guid>
      <description>Suffix Array, Suffix Tree, 그리고 Trie는 모두 문자열 처리와 패턴 매칭을 위한 데이터 구조로, 각각 고유한 특성과 용도를 가지고 있다.</description>
    </item>
    <item>
      <title>Memoization vs Tabulation</title>
      <link>https://buenhyden.github.io/til/2024/10/11/memoization-vs-tabulation/</link>
      <pubDate>Fri, 11 Oct 2024 11:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/11/memoization-vs-tabulation/</guid>
      <description>Memoization과 Tabulation은 동적 프로그래밍(Dynamic Programming)에서 사용되는 두 가지 주요 최적화 기법</description>
    </item>
    <item>
      <title>환원 가능성 (Reducibility)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/reducibility/</link>
      <pubDate>Wed, 16 Oct 2024 12:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/reducibility/</guid>
      <description>환원 가능성 (Reducibility)이란 한 문제를 다른 문제로 변환하는 과정을 말한다.</description>
    </item>
    <item>
      <title>튜링 기계 (Turing Machine)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/turing-machine/</link>
      <pubDate>Wed, 16 Oct 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/turing-machine/</guid>
      <description>튜링 기계는 1936년 앨런 튜링이 제안한 추상적인 계산 모델로, 알고리즘의 개념을 수학적으로 정형화한 것으로, 현대 컴퓨터의 이론적 기초가 되었다.</description>
    </item>
    <item>
      <title>복잡도 클래스(Complexity Classes)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/complexity-classes/</link>
      <pubDate>Wed, 16 Oct 2024 09:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/complexity-classes/</guid>
      <description>계산 복잡도 이론에서 비슷한 복잡도를 가진 문제들의 집합을 나타낸다.</description>
    </item>
    <item>
      <title>비결정성 (Non-determinism)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/non-determinism/</link>
      <pubDate>Wed, 16 Oct 2024 09:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/non-determinism/</guid>
      <description>알고리즘이나 시스템에서 동일한 입력에 대해 매번 다른 과정을 거쳐 다른 결과를 도출할 수 있는 특성</description>
    </item>
    <item>
      <title>Big O 표기법 (Big O notation)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/big-o-notation/</link>
      <pubDate>Wed, 16 Oct 2024 01:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/big-o-notation/</guid>
      <description>알고리즘의 성능과 효율성을 수학적으로 표현하는 방법으로, 주로 알고리즘이 처리해야 할 데이터의 크기(n)가 늘어날 때, 실행 시간이나 메모리 사용량이 어떻게 증가하는지를 나타낸다.</description>
    </item>
    <item>
      <title>보간 검색 (Interpolation Search)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/searching-algorithms/interpolation-search/</link>
      <pubDate>Tue, 15 Oct 2024 12:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/searching-algorithms/interpolation-search/</guid>
      <description>&lt;h2 id=&#34;보간-검색-interpolation-search&#34;&gt;보간 검색 (Interpolation Search)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>버블 정렬 (Bubble Sort)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/sorting-algorithms/bubble-sort/</link>
      <pubDate>Tue, 15 Oct 2024 08:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/sorting-algorithms/bubble-sort/</guid>
      <description>&lt;h2 id=&#34;버블-정렬-bubble-sort&#34;&gt;버블 정렬 (Bubble Sort)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>병합 정렬 (Merge Sort)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/sorting-algorithms/merge-sort/</link>
      <pubDate>Tue, 15 Oct 2024 08:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/sorting-algorithms/merge-sort/</guid>
      <description>&lt;h2 id=&#34;병합-정렬-merge-sort&#34;&gt;병합 정렬 (Merge Sort)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>삽입 정렬 (Insertion Sort)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/sorting-algorithms/insertion-sort/</link>
      <pubDate>Tue, 15 Oct 2024 08:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/sorting-algorithms/insertion-sort/</guid>
      <description>&lt;h2 id=&#34;삽입-정렬-insertion-sort&#34;&gt;삽입 정렬 (Insertion Sort)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>선택 정렬 (Selection Sort)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/sorting-algorithms/selection-sort/</link>
      <pubDate>Tue, 15 Oct 2024 08:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/sorting-algorithms/selection-sort/</guid>
      <description>&lt;h2 id=&#34;선택-정렬-selection-sort&#34;&gt;선택 정렬 (Selection Sort)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>퀵 정렬 (Quick Sort)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/sorting-algorithms/quick-sort/</link>
      <pubDate>Tue, 15 Oct 2024 08:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/sorting-algorithms/quick-sort/</guid>
      <description>&lt;h2 id=&#34;퀵-정렬-quick-sort&#34;&gt;퀵 정렬 (Quick Sort)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>힙 정렬 (Heap Sort)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/sorting-algorithms/heap-sort/</link>
      <pubDate>Tue, 15 Oct 2024 08:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/sorting-algorithms/heap-sort/</guid>
      <description>&lt;h2 id=&#34;힙-정렬-heap-sort&#34;&gt;힙 정렬 (Heap Sort)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>깊이 우선 탐색 (Depth-First Search)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/searching-algorithms/depth-first-search/</link>
      <pubDate>Tue, 15 Oct 2024 05:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/searching-algorithms/depth-first-search/</guid>
      <description>그래프나 트리 구조에서 하나의 경로를 끝까지 탐색한 후 다음 경로를 탐색하는 알고리즘.</description>
    </item>
    <item>
      <title>너비 우선 탐색 (Breadth-First Search)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/searching-algorithms/breadth-first-search/</link>
      <pubDate>Tue, 15 Oct 2024 05:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/searching-algorithms/breadth-first-search/</guid>
      <description>BFS는 그래프나 트리 구조에서 가까운 노드부터 탐색하는 알고리즘</description>
    </item>
    <item>
      <title>이진 검색 (Binary Search)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/searching-algorithms/binary-search/</link>
      <pubDate>Tue, 15 Oct 2024 05:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/searching-algorithms/binary-search/</guid>
      <description>리스트의 중간 값을 선택하고, 찾고자 하는 값과 비교하여 탐색 범위를 반으로 줄여가며 검색을 수행한다</description>
    </item>
    <item>
      <title>해시 검색 (Hash Search)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/searching-algorithms/hash-search/</link>
      <pubDate>Tue, 15 Oct 2024 05:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/searching-algorithms/hash-search/</guid>
      <description>해시 검색은 키(key)를 해시 함수(hash function)에 통과시켜 얻은 해시 값(hash value)을 인덱스로 사용하여 데이터에 직접 접근하는 방식.</description>
    </item>
    <item>
      <title>순차 검색 (Sequential Search)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/searching-algorithms/sequential-search/</link>
      <pubDate>Tue, 15 Oct 2024 05:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/searching-algorithms/sequential-search/</guid>
      <description>순차 검색은 데이터 집합을 처음부터 끝까지 차례대로 하나씩 검색하는 방법으로 선형 검색(Linear Search)으로도 불리며, 리스트에서 순차적으로 탐색하면서 원하는 값을 찾아내는 알고리즘.</description>
    </item>
    <item>
      <title>메모이제이션 (Memoization)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/dynamic-programming/memoization/</link>
      <pubDate>Sun, 13 Oct 2024 11:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/dynamic-programming/memoization/</guid>
      <description>메모이제이션(Memoization)은 컴퓨터 프로그래밍에서 사용되는 최적화 기법으로, 함수의 호출 결과를 저장해두고 재사용함으로써 프로그램의 실행 속도를 향상시키는 방법이다.</description>
    </item>
    <item>
      <title>테이블레이션(Tabulation)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/dynamic-programming/tabulation/</link>
      <pubDate>Sun, 13 Oct 2024 11:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/dynamic-programming/tabulation/</guid>
      <description>Tabulation은 프로그래밍에서 동적 프로그래밍(Dynamic Programming)의 한 기법으로, 복잡한 문제를 해결하기 위해 사용되는 방법이다.</description>
    </item>
    <item>
      <title>브루트 포스 (Brute Force)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/brute-force/</link>
      <pubDate>Sun, 13 Oct 2024 07:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/brute-force/</guid>
      <description>브루트 포스는 &amp;#34;무식한 힘&amp;#34;이라는 뜻으로, 가능한 모든 경우의 수를 전부 탐색하여 문제를 해결하는 방법이다.</description>
    </item>
    <item>
      <title>Approaches to algorithm design</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/approaches-to-algorithm-design/</link>
      <pubDate>Sun, 13 Oct 2024 07:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/approaches-to-algorithm-design/</guid>
      <description>알고리즘 설계를 위한 접근 방법 (Approaches to Algorithm Design)은 문제 해결을 위한 전략적인 사고 과정을 의미한다. 문제를 이해하고 해결책을 도출하는 과정에 초점을 맞추며 다양한 기법들을 조합하여 사용이 가능하다.</description>
    </item>
    <item>
      <title>랜덤화 알고리즘 (Randomized Algorithm)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/randomized-algorithm/</link>
      <pubDate>Sun, 13 Oct 2024 05:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/randomized-algorithm/</guid>
      <description>랜덤화 알고리즘(Randomized Algorithm)은 문제 해결 과정에서 무작위성을 활용하는 알고리즘 설계 기법이다. 난수 생성기를 사용하여 실행 과정에서 무작위적인 선택을 하는 알고리즘이다.</description>
    </item>
    <item>
      <title>근사 알고리즘 (Approximation algorithm)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/approximation-algorithm/</link>
      <pubDate>Sun, 13 Oct 2024 05:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/approximation-algorithm/</guid>
      <description>근사 알고리즘(Approximation algorithm)은 최적해(가장 좋은 해답)를 찾는 대신, 최적해에 &amp;#39;충분히 가까운&amp;#39; 해답을 찾는 알고리즘이다.</description>
    </item>
    <item>
      <title>백트래킹 (Backtracking)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/backtracking/</link>
      <pubDate>Sun, 13 Oct 2024 05:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/backtracking/</guid>
      <description>백트래킹은 가능한 모든 방법을 탐색하면서 문제를 해결하는 알고리즘으로, 현재의 선택이 잘못되었다고 판단되면 이전 단계로 돌아가서 다른 선택을 시도한다.</description>
    </item>
    <item>
      <title>분기 한정법 (Branch and Bound)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/branch-and-bound/</link>
      <pubDate>Sun, 13 Oct 2024 05:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/branch-and-bound/</guid>
      <description>분기 한정법은 복잡한 최적화 문제를 해결하기 위해 문제를 더 작은 하위 문제로 나누고(분기), 각 하위 문제의 해의 범위를 추정(한정)하여 최적해를 찾는 방법이다.</description>
    </item>
    <item>
      <title>탐욕 알고리즘 (Greedy Algorithm)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/greedy-algorithm/</link>
      <pubDate>Sun, 13 Oct 2024 05:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/greedy-algorithm/</guid>
      <description>문제를 해결하는 과정에서 매 순간 현재 상황에서 가장 좋아 보이는 선택을 하는 방법이다. 즉, &amp;#39;탐욕적&amp;#39;으로 각 단계에서 최적이라고 생각되는 해를 선택하여 최종적인 해답에 도달하는 알고리즘이다.</description>
    </item>
    <item>
      <title>분할 정복 (Divide and Conquer)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/divide-and-conquer/</link>
      <pubDate>Sun, 13 Oct 2024 05:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/divide-and-conquer/</guid>
      <description>분할 정복(Divide and Conquer)은 복잡한 문제를 더 작고 관리하기 쉬운 하위 문제로 나누어 해결하는 알고리즘 설계 기법이다.</description>
    </item>
    <item>
      <title>Octree</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/octree/</link>
      <pubDate>Sat, 12 Oct 2024 12:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/octree/</guid>
      <description>Octree는 3차원 공간을 재귀적으로 분할하여 표현하는 트리 기반의 데이터 구조로, 3차원 공간을 8개의 동일한 크기의 정육면체(옥탄트)로 재귀적으로 분할하는 트리 구조이다.</description>
    </item>
    <item>
      <title>Ball tree</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/ball-tree/</link>
      <pubDate>Sat, 12 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/ball-tree/</guid>
      <description>&lt;h2 id=&#34;spatial-data-partitioning&#34;&gt;Spatial Data partitioning&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>BK-tree</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/bk-tree/</link>
      <pubDate>Sat, 12 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/bk-tree/</guid>
      <description>&lt;h2 id=&#34;spatial-data-partitioning&#34;&gt;Spatial Data partitioning&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>BSP Tree</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/bsp-tree/</link>
      <pubDate>Sat, 12 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/bsp-tree/</guid>
      <description>BSP Tree는 공간을 재귀적으로 분할하여 표현하는 트리 구조의 데이터 구조로, 유클리드 공간을 초평면(hyperplane)을 기준으로 재귀적으로 분할하여 볼록 집합으로 나누는 기법을 트리 구조로 표현한 것</description>
    </item>
    <item>
      <title>K-d Tree</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/k-d-tree/</link>
      <pubDate>Sat, 12 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/k-d-tree/</guid>
      <description>K-d Tree는 k차원 공간에서 점들을 효율적으로 저장하고 검색하기 위한 이진 트리 기반의 공간 분할 데이터 구조로, K-d Tree는 k차원 공간을 재귀적으로 분할하여 표현하는 이진 트리이다.</description>
    </item>
    <item>
      <title>Quad Tree</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/quad-tree/</link>
      <pubDate>Sat, 12 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/quad-tree/</guid>
      <description>Quad Tree는 2차원 공간을 재귀적으로 4개의 영역으로 분할하여 표현하는 트리 기반의 데이터 구조로, 각 노드가 정확히 4개의 자식 노드를 갖는 트리 구조이다.</description>
    </item>
    <item>
      <title>R-tree</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/r-tree/</link>
      <pubDate>Sat, 12 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/r-tree/</guid>
      <description>R-Tree는 다차원 공간 데이터를 효율적으로 저장하고 검색하기 위해 설계된 트리 기반의 데이터 구조로, 공간 인덱스 알고리즘이다.</description>
    </item>
    <item>
      <title>Radix tree</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/string/radix-tree/</link>
      <pubDate>Sat, 12 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/string/radix-tree/</guid>
      <description>&lt;h2 id=&#34;radix-tree&#34;&gt;Radix tree&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Rope</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/string/rope/</link>
      <pubDate>Sat, 12 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/string/rope/</guid>
      <description>Rope는 대규모 문자열을 효율적으로 저장하고 조작하기 위해 설계된 트리 기반의 데이터 구조</description>
    </item>
    <item>
      <title>Suffix Tree</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/string/suffix-tree/</link>
      <pubDate>Sat, 12 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/string/suffix-tree/</guid>
      <description>Suffix Tree는 문자열의 모든 접미사를 효율적으로 저장하고 검색하는 특수한 트리 구조로, 문자열 처리와 패턴 매칭을 위해 사용되는 고급 데이터 구조이다.</description>
    </item>
    <item>
      <title>Ternary search tree</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/string/ternary-search-tree/</link>
      <pubDate>Sat, 12 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/string/ternary-search-tree/</guid>
      <description>&lt;h2 id=&#34;ternary-search-tree&#34;&gt;Ternary search tree&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>vantage-point tree</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/vantage-point-tree/</link>
      <pubDate>Sat, 12 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/vantage-point-tree/</guid>
      <description>&lt;h2 id=&#34;vantage-point-tree&#34;&gt;vantage-point tree&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>X-tree</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/x-tree/</link>
      <pubDate>Sat, 12 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/spatial-data-partitioning/x-tree/</guid>
      <description>&lt;h2 id=&#34;x-tree&#34;&gt;X-tree&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>트라이 (Trie)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/string/trie/</link>
      <pubDate>Sat, 12 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/string/trie/</guid>
      <description>문자열을 효율적으로 저장하고 검색할 수 있는 트리 기반의 자료구조</description>
    </item>
    <item>
      <title>Fenwick Tree</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/range-query/fenwick-tree/</link>
      <pubDate>Fri, 11 Oct 2024 12:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/range-query/fenwick-tree/</guid>
      <description>Fenwick Tree는 구간 합을 효율적으로 계산하고 업데이트하기 위해 설계된 특수한 트리 구조로, 데이터베이스, 알고리즘 문제 해결, 그리고 다양한 응용 프로그램에서 사용된다.</description>
    </item>
    <item>
      <title>Segment Tree</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/range-query/segment-tree/</link>
      <pubDate>Fri, 11 Oct 2024 12:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/range-query/segment-tree/</guid>
      <description>세그먼트 트리는 배열의 특정 구간에 대한 정보를 빠르게 구할 수 있도록 설계된 이진 트리 기반의 자료구조</description>
    </item>
    <item>
      <title>Merkle Tree</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/hash/merkle-tree/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/hash/merkle-tree/</guid>
      <description>&lt;h2 id=&#34;merkle-tree&#34;&gt;Merkle Tree&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>디스조인트 셋 (Disjoint-Set)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/set/disjoint-set/</link>
      <pubDate>Fri, 11 Oct 2024 07:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/set/disjoint-set/</guid>
      <description>디스조인트 셋은 서로 겹치지 않는(disjoint) 부분 집합들로 나누어진 요소들의 집합을 표현하고 조작하는 데이터 구조이다.</description>
    </item>
    <item>
      <title>binary heap</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/heap/binary-heap/</link>
      <pubDate>Thu, 10 Oct 2024 16:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/heap/binary-heap/</guid>
      <description>&lt;h2 id=&#34;binary-heap&#34;&gt;binary heap&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>binomial heap</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/heap/binomial-heap/</link>
      <pubDate>Thu, 10 Oct 2024 16:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/heap/binomial-heap/</guid>
      <description>&lt;h2 id=&#34;binomial-heap&#34;&gt;binomial heap&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Brodal queue</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/heap/brodal-queue/</link>
      <pubDate>Thu, 10 Oct 2024 16:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/heap/brodal-queue/</guid>
      <description>&lt;h2 id=&#34;brodal-queue&#34;&gt;Brodal queue&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>d-ary heap</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/heap/d-ary-heap/</link>
      <pubDate>Thu, 10 Oct 2024 16:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/heap/d-ary-heap/</guid>
      <description>&lt;h2 id=&#34;d-ary-heap&#34;&gt;d-ary heap&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Pairing heap</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/heap/pairing-heap/</link>
      <pubDate>Thu, 10 Oct 2024 16:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/heap/pairing-heap/</guid>
      <description>&lt;h2 id=&#34;pairing-heap&#34;&gt;Pairing heap&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Skew heap</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/heap/skew-heap/</link>
      <pubDate>Thu, 10 Oct 2024 16:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/heap/skew-heap/</guid>
      <description>&lt;h2 id=&#34;skew-heap&#34;&gt;Skew heap&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Weak heap</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/heap/weak-heap/</link>
      <pubDate>Thu, 10 Oct 2024 16:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/heap/weak-heap/</guid>
      <description>&lt;h2 id=&#34;weak-heap&#34;&gt;Weak heap&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Splay Tree</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/balanced/splay-tree/</link>
      <pubDate>Thu, 10 Oct 2024 12:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/balanced/splay-tree/</guid>
      <description>Splay Tree는 자체 균형 이진 검색 트리의 일종으로, 최근에 접근한 노드를 루트로 이동시키는 &amp;#34;splay&amp;#34; 연산을 통해 자가 조정되는 특징을 가진다.</description>
    </item>
    <item>
      <title>AVL 트리 (AVL tree)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/balanced/avl-tree/</link>
      <pubDate>Thu, 10 Oct 2024 12:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/balanced/avl-tree/</guid>
      <description>AVL 트리는 Adelson-Velsky와 Landis가 1962년에 발명한 자체 균형 이진 검색 트리이다.  각 노드에서 왼쪽과 오른쪽 서브트리의 높이 차이가 최대 1인 균형 잡힌 트리 구조를 유지한다.</description>
    </item>
    <item>
      <title>레드-블랙 트리 (red-black tree)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/balanced/red-black-tree/</link>
      <pubDate>Thu, 10 Oct 2024 12:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/balanced/red-black-tree/</guid>
      <description>Red-black tree는 각 노드에 추가적인 색상 속성(빨간색 또는 검은색)을 가진 자체 균형 이진 검색 트리로, 트리의 균형을 유지하여 효율적인 검색, 삽입, 삭제 연산을 보장한다.</description>
    </item>
    <item>
      <title>이진 검색 트리 (Binary Search Tree)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/basic/binary-search-tree/</link>
      <pubDate>Thu, 10 Oct 2024 12:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/basic/binary-search-tree/</guid>
      <description>BST는 계층적 데이터를 정렬된 방식으로 저장하고 조직하는 데 사용되는 특수한 이진 트리 구조이다.</description>
    </item>
    <item>
      <title>이진 트리 (Binary Tree)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/basic/binary-tree/</link>
      <pubDate>Thu, 10 Oct 2024 07:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/basic/binary-tree/</guid>
      <description>이진 트리는 각 노드가 최대 두 개의 자식 노드를 가질 수 있는 트리 데이터 구조로, 계층적 데이터를 정렬된 방식으로 저장하고 조직하는 데 사용된다.</description>
    </item>
    <item>
      <title>B 트리 (B-tree)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/balanced/b-tree/</link>
      <pubDate>Thu, 10 Oct 2024 05:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree/balanced/b-tree/</guid>
      <description>균형 잡힌 트리 구조로, 대용량 데이터를 효율적으로 관리하는 데 사용되는 자료구조</description>
    </item>
    <item>
      <title>Hash Map</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/hash-map/</link>
      <pubDate>Wed, 09 Oct 2024 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/hash-map/</guid>
      <description>HashMap은 해시 함수를 사용하여 키를 배열의 인덱스로 변환하고, 해당 인덱스에 값을 저장하는 데이터 구조이다.</description>
    </item>
    <item>
      <title>Concurrent Hash Map</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/concurrent-hash-map/</link>
      <pubDate>Wed, 09 Oct 2024 13:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/concurrent-hash-map/</guid>
      <description>여러 스레드가 동시에 데이터를 안전하게 접근하고 수정할 수 있도록 설계된 스레드 안전(thread-safe)한 해시 맵 구현체</description>
    </item>
    <item>
      <title>Count-Min Sketch</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/count-min-sketch/</link>
      <pubDate>Wed, 09 Oct 2024 13:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/count-min-sketch/</guid>
      <description>&lt;h2 id=&#34;count-min-sketch&#34;&gt;Count-Min Sketch&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Cuckoo Filter</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/cuckoo-filter/</link>
      <pubDate>Wed, 09 Oct 2024 13:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/cuckoo-filter/</guid>
      <description>&lt;h2 id=&#34;cuckoo-filter&#34;&gt;Cuckoo Filter&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>HyperLogLog</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/hyperloglog/</link>
      <pubDate>Wed, 09 Oct 2024 13:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/hyperloglog/</guid>
      <description>&lt;h2 id=&#34;hyperloglog&#34;&gt;HyperLogLog&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>MinHash</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/minhash/</link>
      <pubDate>Wed, 09 Oct 2024 13:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/minhash/</guid>
      <description>&lt;h2 id=&#34;minhash&#34;&gt;MinHash&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Cuckoo Hash Table</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/cuckoo-hash-table/</link>
      <pubDate>Wed, 09 Oct 2024 12:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/cuckoo-hash-table/</guid>
      <description>Cuckoo Hash Table은 해시 충돌 문제를 해결하기 위해 개발된 해시 테이블의 한 종류로, 두 개 이상의 해시 함수를 사용하여 각 키에 대해 여러 개의 가능한 위치를 제공한다.</description>
    </item>
    <item>
      <title>Bloom filter</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/bloom-filter/</link>
      <pubDate>Wed, 09 Oct 2024 12:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/bloom-filter/</guid>
      <description>&lt;h2 id=&#34;블룸-필터-bloom-filter&#34;&gt;블룸 필터 (Bloom filter)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Hopscotch Hash Table</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/hopscotch-hash-table/</link>
      <pubDate>Wed, 09 Oct 2024 08:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/hopscotch-hash-table/</guid>
      <description>&lt;h2 id=&#34;hopscotch-hash-table&#34;&gt;Hopscotch Hash Table&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Hash Chain</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/hash-chain/</link>
      <pubDate>Wed, 09 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/hash-chain/</guid>
      <description>&lt;h2 id=&#34;hash-chain&#34;&gt;Hash Chain&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Hash Set</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/hash-set/</link>
      <pubDate>Wed, 09 Oct 2024 07:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/hash-set/</guid>
      <description>&lt;h2 id=&#34;hash-set&#34;&gt;Hash Set&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>해시 테이블(Hash Table)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/hash-table/</link>
      <pubDate>Wed, 09 Oct 2024 05:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based/hash-table/</guid>
      <description>키-값 쌍을 저장하는 데이터 구조로, 해시 함수를 사용하여 키를 인덱스로 변환</description>
    </item>
    <item>
      <title>Lock-free Stack</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/stack/lock-free-stack/</link>
      <pubDate>Tue, 08 Oct 2024 13:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/stack/lock-free-stack/</guid>
      <description>Lock-free Stack은 락(lock)을 사용하지 않고 동시성을 제공하는 LIFO(Last-In-First-Out) 자료구조.</description>
    </item>
    <item>
      <title>Directed Acyclic Graph</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/graph/directed-acyclic-graph/</link>
      <pubDate>Tue, 08 Oct 2024 10:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/graph/directed-acyclic-graph/</guid>
      <description>&lt;h2 id=&#34;directed-acyclic-graph&#34;&gt;Directed Acyclic Graph&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Directed Graphs</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/graph/directed-graphs/</link>
      <pubDate>Tue, 08 Oct 2024 07:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/graph/directed-graphs/</guid>
      <description>&lt;h2 id=&#34;directed-graphs&#34;&gt;Directed Graphs&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Undirected Graphs</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/graph/undirected-graphs/</link>
      <pubDate>Tue, 08 Oct 2024 07:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/graph/undirected-graphs/</guid>
      <description>&lt;h2 id=&#34;undirected-graphs&#34;&gt;Undirected Graphs&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Weighted Graphs</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/graph/weighted-graphs/</link>
      <pubDate>Tue, 08 Oct 2024 07:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/graph/weighted-graphs/</guid>
      <description>&lt;h2 id=&#34;weighted-graphs&#34;&gt;Weighted Graphs&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Array-based Stack</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/stack/array-based-stack/</link>
      <pubDate>Tue, 08 Oct 2024 07:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/stack/array-based-stack/</guid>
      <description>&lt;h2 id=&#34;array-based-stack&#34;&gt;Array-based Stack&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Dynamic Size Stack</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/stack/dynamic-size-stack/</link>
      <pubDate>Tue, 08 Oct 2024 07:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/stack/dynamic-size-stack/</guid>
      <description>&lt;h2 id=&#34;dynamic-size-stack&#34;&gt;Dynamic Size Stack&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Fixed Size Stack</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/stack/fixed-size-stack/</link>
      <pubDate>Tue, 08 Oct 2024 07:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/stack/fixed-size-stack/</guid>
      <description>&lt;h2 id=&#34;fixed-size-stack&#34;&gt;Fixed Size Stack&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Linked List-based Stack</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/stack/linked-list-based-stack/</link>
      <pubDate>Tue, 08 Oct 2024 07:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/stack/linked-list-based-stack/</guid>
      <description>&lt;h2 id=&#34;linked-list-based-stack&#34;&gt;Linked List-based Stack&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Concurrent Skip List</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/concurrent-skip-list/</link>
      <pubDate>Mon, 07 Oct 2024 13:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/concurrent-skip-list/</guid>
      <description>Concurrent Skip List는 Skip List 자료구조를 기반으로 하여 멀티스레드 환경에서 동시에 삽입, 삭제, 검색 작업을 수행할 수 있도록 구현된 동시성 자료구조이다.</description>
    </item>
    <item>
      <title>Read-Copy-Update List</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/read-copy-update-list/</link>
      <pubDate>Mon, 07 Oct 2024 13:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/read-copy-update-list/</guid>
      <description>RCU List는 Read-Copy-Update 메커니즘을 사용하여 구현된 동시성 연결 리스트로 읽기 작업에 대해 락을 사용하지 않으면서도 동시에 업데이트를 수행할 수 있게 해준다.</description>
    </item>
    <item>
      <title>Lock-free Queue</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/lock-free-queue/</link>
      <pubDate>Mon, 07 Oct 2024 13:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/lock-free-queue/</guid>
      <description>Lock-free Queue는 락(lock)을 사용하지 않고 동시성을 제공하는 FIFO(First-In-First-Out) 자료구조이다.</description>
    </item>
    <item>
      <title>Circular Linked List</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/circular-linked-list/</link>
      <pubDate>Mon, 07 Oct 2024 12:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/circular-linked-list/</guid>
      <description>Circular Linked List(원형 연결 리스트)는 마지막 노드가 첫 번째 노드를 가리키는 연결 리스트의 변형이다.</description>
    </item>
    <item>
      <title>Circular Queue</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/circular-queue/</link>
      <pubDate>Mon, 07 Oct 2024 12:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/circular-queue/</guid>
      <description>Circular Queue는 마지막 요소가 첫 번째 요소와 연결되어 원형 구조를 형성하는 큐 데이터 구조이다.</description>
    </item>
    <item>
      <title>Doubly Linked List</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/doubly-linked-list/</link>
      <pubDate>Mon, 07 Oct 2024 12:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/doubly-linked-list/</guid>
      <description>Doubly Linked List는 노드들이 양방향으로 연결된 선형 데이터 구조로, 각 노드가 데이터와 이전 노드, 다음 노드를 가리키는 포인터를 포함하고 있다.</description>
    </item>
    <item>
      <title>Skip List</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/skip-list/</link>
      <pubDate>Mon, 07 Oct 2024 12:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/skip-list/</guid>
      <description>Skip List는 정렬된 연결 리스트를 기반으로 하여 빠른 검색, 삽입, 삭제 연산을 지원하는 확률적 데이터 구조이다</description>
    </item>
    <item>
      <title>Deque</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/deque/</link>
      <pubDate>Mon, 07 Oct 2024 12:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/deque/</guid>
      <description>Deque는 양쪽 끝에서 삽입과 삭제가 가능한 선형 데이터 구조로, 큐와 스택의 특성을 모두 가지고 있다.</description>
    </item>
    <item>
      <title>Linear Queue</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/linear-queue/</link>
      <pubDate>Mon, 07 Oct 2024 07:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/linear-queue/</guid>
      <description>&lt;h2 id=&#34;linear-queue&#34;&gt;Linear Queue&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Blocking Queue</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/blocking-queue/</link>
      <pubDate>Mon, 07 Oct 2024 07:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/blocking-queue/</guid>
      <description>&lt;h2 id=&#34;blocking-queue&#34;&gt;Blocking Queue&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Concurrent Queue</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/concurrent-queue/</link>
      <pubDate>Mon, 07 Oct 2024 07:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/concurrent-queue/</guid>
      <description>&lt;h2 id=&#34;concurrent-queue&#34;&gt;Concurrent Queue&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Priority Queue</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/priority-queue/</link>
      <pubDate>Mon, 07 Oct 2024 07:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/priority-queue/</guid>
      <description>&lt;h2 id=&#34;priority-queue&#34;&gt;Priority Queue&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Circular Doubly Linked List</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/circular-doubly-linked-list/</link>
      <pubDate>Mon, 07 Oct 2024 07:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/circular-doubly-linked-list/</guid>
      <description>&lt;h2 id=&#34;circular-doubly-linked-list&#34;&gt;Circular Doubly Linked List&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Simple Queue</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/simple-queue/</link>
      <pubDate>Mon, 07 Oct 2024 07:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/simple-queue/</guid>
      <description>&lt;h2 id=&#34;simple-queue&#34;&gt;Simple Queue&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Singly Linked List</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/singly-linked-list/</link>
      <pubDate>Mon, 07 Oct 2024 07:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/singly-linked-list/</guid>
      <description>&lt;h2 id=&#34;singly-linked-list&#34;&gt;Singly Linked List&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Suffix Array</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array/suffix-array/</link>
      <pubDate>Sun, 06 Oct 2024 13:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array/suffix-array/</guid>
      <description>Suffix Array는 문자열의 모든 접미사를 효율적으로 저장하고 관리하는 특수한 배열 구조로, 문자열 처리와 패턴 매칭을 위해 사용되는 고급 데이터 구조이다.</description>
    </item>
    <item>
      <title>논리값 (Boolean)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/primitive/boolean/</link>
      <pubDate>Sun, 06 Oct 2024 07:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/primitive/boolean/</guid>
      <description>Boolean은 컴퓨터 과학에서 가장 기본적인 데이터 타입 중 하나로, 단 두 가지 값만을 가질 수 있는 논리 데이터 타입이다.</description>
    </item>
    <item>
      <title>Integer</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/primitive/integer/</link>
      <pubDate>Sun, 06 Oct 2024 07:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/primitive/integer/</guid>
      <description>정수(Integer)는 소수점이 없는 양수, 음수, 0을 표현하는 데이터 타입으로, 컴퓨터에서는 이진수로 표현되며, 일정 범위의 정수를 표현할 수 있다.</description>
    </item>
    <item>
      <title>문자 (Character)과 문자열 (String)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/primitive/character-and-string/</link>
      <pubDate>Sun, 06 Oct 2024 07:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/primitive/character-and-string/</guid>
      <description>문자 (Character)는 단일 문자를 표현하는 데이터 타입이고,문자열 (String)은 문자들의 배열 또는 시퀀스</description>
    </item>
    <item>
      <title>부동 소수점 (Float)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/primitive/float/</link>
      <pubDate>Sun, 06 Oct 2024 07:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/primitive/float/</guid>
      <description>부동 소수점은 실수를 (부호) × (가수) × (밑수)^(지수) 형태로 표현하는 방식이다.</description>
    </item>
    <item>
      <title>Fixed Size Array</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array/fixed-size-array/</link>
      <pubDate>Sun, 06 Oct 2024 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array/fixed-size-array/</guid>
      <description>&lt;h2 id=&#34;fixed-size-array&#34;&gt;Fixed Size Array&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Multi-dimensional Array</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array/multi-dimensional-array/</link>
      <pubDate>Sun, 06 Oct 2024 07:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array/multi-dimensional-array/</guid>
      <description>&lt;h2 id=&#34;multi-dimensional-array&#34;&gt;Multi-dimensional Array&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>One-dimensional Array</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array/one-dimensional-array/</link>
      <pubDate>Sun, 06 Oct 2024 07:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array/one-dimensional-array/</guid>
      <description>&lt;h2 id=&#34;one-dimensional-array&#34;&gt;One-dimensional Array&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>동적 배열 (Dynamic Array)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array/dynamic-array/</link>
      <pubDate>Sun, 06 Oct 2024 07:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array/dynamic-array/</guid>
      <description>동적 배열은 크기가 가변적인 배열 형태의 데이터 구조이다.</description>
    </item>
  </channel>
</rss>
