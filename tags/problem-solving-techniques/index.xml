<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Problem-Solving-Techniques on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/problem-solving-techniques/</link>
    <description>Recent content in Problem-Solving-Techniques on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.149.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 24 Jan 2025 07:17:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/problem-solving-techniques/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>State Representation</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/branch-and-bound/state-representation/</link>
      <pubDate>Tue, 21 Jan 2025 14:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/branch-and-bound/state-representation/</guid>
      <description>상태 표현은 문제 해결 과정에서 현재까지의 결정과 남은 선택지를 효과적으로 나타내는 방법이다.</description>
    </item>
    <item>
      <title>가지치기(Pruning)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/back-tracking/backtracking-implementation/pruning/</link>
      <pubDate>Sun, 29 Dec 2024 14:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/back-tracking/backtracking-implementation/pruning/</guid>
      <description>가지치기는 백트래킹 과정에서 더 이상 유망하지 않은(promising하지 않은) 경로를 조기에 차단하는 기법이다.</description>
    </item>
    <item>
      <title>Algorithmic Thinking</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/</link>
      <pubDate>Fri, 27 Dec 2024 07:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/</guid>
      <description>알고리즘적 사고란 문제를 일련의 명확하고 실행 가능한 단계들로 분해하여 해결하는 사고 과정.</description>
    </item>
    <item>
      <title>꼬리 재귀(Tail Recursion)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/implementation-strategies/iteration-vs-recursion/recursion/types/tail-recursion/</link>
      <pubDate>Mon, 09 Dec 2024 09:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/implementation-strategies/iteration-vs-recursion/recursion/types/tail-recursion/</guid>
      <description>Tail Recursion는 재귀 함수의 마지막 연산이 재귀 호출 자체인 특별한 형태의 재귀이다.</description>
    </item>
    <item>
      <title>Branching Strategies</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/branch-and-bound/branching-strategies/</link>
      <pubDate>Tue, 21 Jan 2025 14:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/branch-and-bound/branching-strategies/</guid>
      <description>분기 전략은 현재 부분 문제를 더 작은 하위 문제로 분할하는 방식을 정의한다. 이 과정에서 해결책 공간은 상호 배타적인 부분 공간으로 나뉘며, 이들을 모두 합치면 원래의 해결책 공간을 완전히 포함한다.</description>
    </item>
    <item>
      <title>Branch and Bound vs. Backtracking</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/branch-and-bound/branch-and-bound-vs-backtracking/</link>
      <pubDate>Fri, 10 Jan 2025 04:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/branch-and-bound/branch-and-bound-vs-backtracking/</guid>
      <description>백트래킹(Backtracking)과 분기한정법(Branch and Bound)은 조합 최적화 문제를 해결하기 위한 두 가지 중요한 알고리즘 설계 패러다임이다.  두 기법 모두 모든 가능한 해결책을 체계적으로 탐색하지만, 그 접근 방식과 최적화 전략에는 중요한 차이가 있다.</description>
    </item>
    <item>
      <title>상태 공간 트리(State Space Tree)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/back-tracking/backtracking-implementation/state-space/</link>
      <pubDate>Sun, 29 Dec 2024 13:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/back-tracking/backtracking-implementation/state-space/</guid>
      <description>상태 공간 트리는 문제 해결 과정에서 가능한 모든 상태(state)와 그 상태들 간의 전이(transition)를 트리 형태로 표현한 자료구조이다.</description>
    </item>
    <item>
      <title>비꼬리 재귀(Non-tail Recursion)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/implementation-strategies/iteration-vs-recursion/recursion/types/non-tail-recursion/</link>
      <pubDate>Mon, 09 Dec 2024 09:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/implementation-strategies/iteration-vs-recursion/recursion/types/non-tail-recursion/</guid>
      <description>Non-tail Recursion는 재귀 호출이 함수의 마지막 연산이 아닌 형태의 재귀를 의미한다</description>
    </item>
    <item>
      <title>Recursion vs. Iteration</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/implementation-strategies/iteration-vs-recursion/</link>
      <pubDate>Sun, 06 Oct 2024 11:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/implementation-strategies/iteration-vs-recursion/</guid>
      <description>Iteration과 Recursion은 프로그래밍에서 반복적인 작업을 수행하는 두 가지 주요 방식이다.</description>
    </item>
    <item>
      <title>한계 함수(Bounding Functions)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/branch-and-bound/bounding-functions/</link>
      <pubDate>Fri, 03 Jan 2025 11:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/branch-and-bound/bounding-functions/</guid>
      <description>한계 함수는 분기한정법의 효율성을 결정짓는 중요한 요소로, 불필요한 탐색을 줄이고 최적해를 빠르게 찾는 데 결정적인 역할을 한다.</description>
    </item>
    <item>
      <title>Back Tracking vs. Brute Force</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/back-tracking/back-tracking-vs-brute-force/</link>
      <pubDate>Sun, 29 Dec 2024 14:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/back-tracking/back-tracking-vs-brute-force/</guid>
      <description>브루트 포스는 구현이 단순하고 모든 가능성을 확인하지만, 문제 크기가 커질수록 비효율적이다. 반면, 백트래킹은 유망성 테스트와 가지치기를 통해 불필요한 탐색을 줄여 효율성을 높이지만, 구현이 더 복잡하다.</description>
    </item>
    <item>
      <title>tail Recursion vs. Non-tail Recursion</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/implementation-strategies/iteration-vs-recursion/recursion/types/tail-recursion-vs-non-tail-recursion/</link>
      <pubDate>Mon, 09 Dec 2024 00:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/implementation-strategies/iteration-vs-recursion/recursion/types/tail-recursion-vs-non-tail-recursion/</guid>
      <description>재귀 호출이 함수의 마지막 연산으로 수행되는지 여부에 따라 Tail Recursion(꼬리 재귀)과 Non-Tail Recursion(비꼬리 재귀)으로 구분된다.</description>
    </item>
    <item>
      <title>Recursion</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/implementation-strategies/iteration-vs-recursion/recursion/</link>
      <pubDate>Mon, 14 Oct 2024 13:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/implementation-strategies/iteration-vs-recursion/recursion/</guid>
      <description>재귀(Recursion)는 컴퓨터 프로그래밍에서 함수가 자기 자신을 호출하여 문제를 해결하는 방식으로, 큰 문제를 동일한 형태의 작은 문제로 나누어 해결하는 방법이다.</description>
    </item>
    <item>
      <title>Back Tracking vs. Traversal</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/back-tracking/back-tracking-vs-traversal/</link>
      <pubDate>Mon, 09 Dec 2024 14:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/back-tracking/back-tracking-vs-traversal/</guid>
      <description>백트래킹과 트래버설은 유사한 점이 있지만, 목적, 동작 방식, 응용 분야에서 중요한 차이점을 가지고 있다.</description>
    </item>
    <item>
      <title>브루트 포스 (Brute Force)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/overview/brute-force/</link>
      <pubDate>Sun, 13 Oct 2024 07:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/overview/brute-force/</guid>
      <description>브루트 포스는 &amp;#34;무식한 힘&amp;#34;이라는 뜻으로, 가능한 모든 경우의 수를 전부 탐색하여 문제를 해결하는 방법이다.</description>
    </item>
    <item>
      <title>Back Tracking vs. Depth-First Search</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/back-tracking/back-tracking-vs-depth-first-search/</link>
      <pubDate>Sun, 29 Dec 2024 13:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/back-tracking/back-tracking-vs-depth-first-search/</guid>
      <description>DFS는 그래프의 모든 노드를 방문하는 데 중점을 두는 반면, 백트래킹은 제약 조건을 만족하는 해결책을 효율적으로 찾는 데 초점을 맞춘다.</description>
    </item>
    <item>
      <title>백트래킹 (Backtracking)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/back-tracking/</link>
      <pubDate>Sun, 13 Oct 2024 05:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/back-tracking/</guid>
      <description>백트래킹은 가능한 모든 방법을 탐색하면서 문제를 해결하는 알고리즘으로, 현재의 선택이 잘못되었다고 판단되면 이전 단계로 돌아가서 다른 선택을 시도한다.</description>
    </item>
    <item>
      <title>Problem Solving Techniques</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/overview/problem-solving-techniques/</link>
      <pubDate>Sun, 13 Oct 2024 05:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/overview/problem-solving-techniques/</guid>
      <description>주어진 문제를 효과적으로 분석하고 해결하기 위한 알고리즘 및 자료 구조를 적용하는 방법론</description>
    </item>
    <item>
      <title>분기 한정법 (Branch and Bound)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/branch-and-bound/</link>
      <pubDate>Sun, 13 Oct 2024 05:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/advanced-problem-solving/branch-and-bound/</guid>
      <description>분기 한정법은 복잡한 최적화 문제를 해결하기 위해 문제를 더 작은 하위 문제로 나누고(분기), 각 하위 문제의 해의 범위를 추정(한정)하여 최적해를 찾는 방법이다.</description>
    </item>
    <item>
      <title>분할 정복 (Divide and Conquer)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/recursion--divide-and-conquer/divide-and-conquer/</link>
      <pubDate>Sun, 13 Oct 2024 05:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/recursion--divide-and-conquer/divide-and-conquer/</guid>
      <description>분할 정복(Divide and Conquer)은 복잡한 문제를 더 작고 관리하기 쉬운 하위 문제로 나누어 해결하는 알고리즘 설계 기법이다.</description>
    </item>
    <item>
      <title>동적 계획법 (Dynamic Programming)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/dynamic-programming/</link>
      <pubDate>Sun, 13 Oct 2024 05:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/dynamic-programming/</guid>
      <description>동적 계획법(Dynamic Programming, DP)은 복잡한 문제를 더 작고 간단한 하위 문제로 나누어 해결하는 알고리즘 설계 기법으로, 큰 문제를 작은 하위 문제로 나누고 각 하위 문제의 해결책을 저장해 두었다가 재사용하는 방식으로 전체 문제를 해결하는 방법이다.</description>
    </item>
    <item>
      <title>탐욕 알고리즘 (Greedy Algorithm)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/greedy-algorithms/</link>
      <pubDate>Sun, 13 Oct 2024 05:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/greedy-algorithms/</guid>
      <description>문제를 해결하는 과정에서 매 순간 현재 상황에서 가장 좋아 보이는 선택을 하는 방법이다. 즉, &amp;#39;탐욕적&amp;#39;으로 각 단계에서 최적이라고 생각되는 해를 선택하여 최종적인 해답에 도달하는 알고리즘이다.</description>
    </item>
    <item>
      <title>랜덤화 알고리즘 (Randomized Algorithm)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/randomized-algorithms/</link>
      <pubDate>Sun, 13 Oct 2024 05:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/specialized-techniques/randomized-algorithms/</guid>
      <description>랜덤화 알고리즘(Randomized Algorithm)은 문제 해결 과정에서 무작위성을 활용하는 알고리즘 설계 기법이다. 난수 생성기를 사용하여 실행 과정에서 무작위적인 선택을 하는 알고리즘이다.</description>
    </item>
    <item>
      <title>슬라이딩 윈도우 기법 (Sliding Window Technique)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/linear-structures--algorithms/arrays--lists/array--list-algorithms/sliding-window/</link>
      <pubDate>Fri, 24 Jan 2025 00:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/linear-structures--algorithms/arrays--lists/array--list-algorithms/sliding-window/</guid>
      <description>슬라이딩 윈도우 기법은 배열이나 문자열의 연속적인 부분집합(부분 배열 또는 부분 문자열)을 고정 크기 또는 가변 크기의 윈도우로 표현하고, 이 윈도우를 왼쪽에서 오른쪽으로 &amp;#34;슬라이딩&amp;#34;하면서 문제를 해결한다.</description>
    </item>
    <item>
      <title>Divide and Conquer vs. Brute Force</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/recursion--divide-and-conquer/divide-and-conquer/divide-and-conquer-vs-brute-force/</link>
      <pubDate>Fri, 24 Jan 2025 07:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/recursion--divide-and-conquer/divide-and-conquer/divide-and-conquer-vs-brute-force/</guid>
      <description>Divide and Conquer vs. Brute Force 비교 분석</description>
    </item>
    <item>
      <title>Divide and Conquer vs. Branch and Bound</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/recursion--divide-and-conquer/divide-and-conquer/divide-and-conquer-vs-branch-and-bound/</link>
      <pubDate>Fri, 24 Jan 2025 02:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/recursion--divide-and-conquer/divide-and-conquer/divide-and-conquer-vs-branch-and-bound/</guid>
      <description>분할 정복은 문제를 작은 하위 문제로 나누어 해결하는 일반적인 방법인 반면, 분기 한정은 최적화 문제에서 효율적으로 최적해를 찾기 위한 전문화된 방법이다.</description>
    </item>
    <item>
      <title>최적 부분 구조(Optimal Substructure)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/dynamic-programming/dp-principles/optimal-substructure/</link>
      <pubDate>Wed, 22 Jan 2025 14:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/dynamic-programming/dp-principles/optimal-substructure/</guid>
      <description>최적 부분 구조는 한 문제의 최적해가 그 문제의 하위 문제들의 최적해를 포함하고 있는 특성을 말한다.</description>
    </item>
    <item>
      <title>중복되는 하위 문제(Overlapping Subproblems)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/dynamic-programming/dp-principles/overlapping-subproblems/</link>
      <pubDate>Tue, 21 Jan 2025 14:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/dynamic-programming/dp-principles/overlapping-subproblems/</guid>
      <description>중복되는 하위 문제는 동일한 하위 문제가 알고리즘 실행 과정에서 여러 번 반복해서 나타나는 특성을 말한다.</description>
    </item>
    <item>
      <title>Bottom-up Approach</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/dynamic-programming/dp-implementation/bottom-up-approach/</link>
      <pubDate>Thu, 09 Jan 2025 04:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/dynamic-programming/dp-implementation/bottom-up-approach/</guid>
      <description>가장 작은 하위 문제부터 시작하여 점진적으로 더 큰 문제를 해결해 나가는 방식이다.  모든 하위 문제의 결과를 테이블(일반적으로 배열)에 저장하고, 이미 계산된 결과를 활용하여 상위 문제를 해결한다.</description>
    </item>
    <item>
      <title>Greedy Algorithm vs. Divide and Conquer</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/comparison-guides/algorithm-comparisons/paradigm-comparison/greedy-vs-divide-and-conquer/</link>
      <pubDate>Sat, 28 Dec 2024 10:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/comparison-guides/algorithm-comparisons/paradigm-comparison/greedy-vs-divide-and-conquer/</guid>
      <description>분할 정복은 문제를 더 작은 하위 문제로 나누어 해결하는 체계적인 접근 방식인 반면, 탐욕 알고리즘은 각 단계에서 지역적 최적 선택을 통해 문제를 해결하는 직관적인 접근 방식이다.</description>
    </item>
    <item>
      <title>Dynamic Programming vs. Divide and Conquer</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/comparison-guides/algorithm-comparisons/paradigm-comparison/divide-and-conquer-vs-dp/</link>
      <pubDate>Mon, 09 Dec 2024 05:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/comparison-guides/algorithm-comparisons/paradigm-comparison/divide-and-conquer-vs-dp/</guid>
      <description>Divide and Conquer&amp;#34;와 &amp;#34;Dynamic Programming&amp;#34;은 모두 복잡한 문제를 더 작은 부분으로 나누어 해결하는 전략이지만, 접근 방식과 적용 상황에서 중요한 차이가 있다.</description>
    </item>
    <item>
      <title>Collision resolutions</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/hash-based-structures/hash-table-fundamentals/collision-resolution/</link>
      <pubDate>Sun, 08 Dec 2024 13:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/hash-based-structures/hash-table-fundamentals/collision-resolution/</guid>
      <description>해시 테이블(Hash Table)은 키(Key)를 해시 함수(Hash Function)에 적용하여 특정 인덱스(Index)에 데이터를 저장하는 자료구조이다.  그러나 서로 다른 키가 같은 해시 인덱스로 매핑되는 경우가 발생할 수 있으며, 이를 충돌(Collision) 이라고 한다.</description>
    </item>
    <item>
      <title>해시 함수 (Hash Function)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/hash-based-structures/hash-table-fundamentals/hash-functions/</link>
      <pubDate>Sat, 09 Nov 2024 21:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/hash-based-structures/hash-table-fundamentals/hash-functions/</guid>
      <description>임의의 길이의 데이터를 고정된 길이의 데이터로 매핑하는 함수</description>
    </item>
    <item>
      <title>메모이제이션 (Memoization)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/dynamic-programming/dp-principles/memoization-vs-tabulation/memoization/</link>
      <pubDate>Sun, 13 Oct 2024 11:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/dynamic-programming/dp-principles/memoization-vs-tabulation/memoization/</guid>
      <description>메모이제이션(Memoization)은 컴퓨터 프로그래밍에서 사용되는 최적화 기법으로, 함수의 호출 결과를 저장해두고 재사용함으로써 프로그램의 실행 속도를 향상시키는 방법이다.</description>
    </item>
    <item>
      <title>테이블레이션(Tabulation)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/dynamic-programming/dp-principles/memoization-vs-tabulation/tabulation/</link>
      <pubDate>Sun, 13 Oct 2024 11:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/basic-algorithmic-paradigms/dynamic-programming/dp-principles/memoization-vs-tabulation/tabulation/</guid>
      <description>Tabulation은 프로그래밍에서 동적 프로그래밍(Dynamic Programming)의 한 기법으로, 복잡한 문제를 해결하기 위해 사용되는 방법이다.</description>
    </item>
  </channel>
</rss>
