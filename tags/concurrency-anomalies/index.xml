<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Concurrency-Anomalies on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/concurrency-anomalies/</link>
    <description>Recent content in Concurrency-Anomalies on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.151.2</generator>
    <language>en</language>
    <lastBuildDate>Fri, 12 Sep 2025 03:49:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/concurrency-anomalies/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lost Update</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/concurrency-anomalies/lost-update/</link>
      <pubDate>Fri, 12 Sep 2025 03:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/concurrency-anomalies/lost-update/</guid>
      <description>로스트 업데이트는 여러 트랜잭션이 동일 데이터를 동시 수정할 때 읽기→수정→쓰기 과정의 비원자성으로 인해 한 트랜잭션의 변경이 다른 트랜잭션에 의해 덮어써지는 현상이다. 원자적 SQL, 잠금(선점적), 낙관적 버저닝, 직렬화 등으로 예방한다.</description>
    </item>
    <item>
      <title>Phantom Read</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/concurrency-anomalies/phantom-read/</link>
      <pubDate>Fri, 12 Sep 2025 03:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/concurrency-anomalies/phantom-read/</guid>
      <description>팬텀 리드는 한 트랜잭션이 동일 조건으로 반복 조회할 때 다른 트랜잭션의 삽입·삭제로 결과가 달라지는 동시성 이상이다. SQL 표준의 SERIALIZABLE이 팬텀을 방지하며, 구현체는 키-범위 잠금, 프레디케이트 잠금 또는 스냅샷 기반 직렬화(SSI)로 대응한다.</description>
    </item>
    <item>
      <title>Write Skew</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/concurrency-anomalies/write-skew/</link>
      <pubDate>Fri, 12 Sep 2025 03:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/concurrency-anomalies/write-skew/</guid>
      <description>Write Skew는 스냅샷 격리에서 서로 다른 행을 동시에 수정해 전체 불변식(예: 최소 인원 유지)을 깨뜨리는 동시성 이상이다. 직접적인 쓰기-쓰기 충돌이 없어 SI에서 감지되지 않으며, 해결책으로는 Serializable/SSI, 읽은 집합 잠금(SELECT FOR UPDATE), 데이터베이스 제약 또는 커밋 전 재검증이 있다.</description>
    </item>
    <item>
      <title>Dirty Read</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/concurrency-anomalies/dirty-read/</link>
      <pubDate>Fri, 12 Sep 2025 03:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/concurrency-anomalies/dirty-read/</guid>
      <description>Dirty Read는 한 트랜잭션이 아직 커밋되지 않은 다른 트랜잭션의 변경을 읽는 현상으로, 롤백 시 잘못된 값을 근거로 후속 연산이 발생해 무결성·재현성·감사 가능성을 해친다. 대다수 실무 환경에서는 기본 금지하고, 허용 시에는 읽기 복제본·스냅샷 사용 또는 엄격한 가드레일을 병행해야 한다.</description>
    </item>
  </channel>
</rss>
