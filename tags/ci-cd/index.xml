<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CI-CD on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/ci-cd/</link>
    <description>Recent content in CI-CD on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.2</generator>
    <language>en</language>
    <lastBuildDate>Thu, 08 May 2025 00:51:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/ci-cd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CI/CD Automation</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/ci-cd-automation/</link>
      <pubDate>Wed, 02 Oct 2024 08:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/ci-cd-automation/</guid>
      <description>CI/CD Automation 은 소프트웨어 개발 라이프사이클 전반의 빌드, 테스트, 배포 과정을 자동화해 개발 효율성과 품질을 향상시키는 DevOps 핵심 전략이다. 지속적 통합 (CI) 은 개발자들이 코드를 주기적으로 통합하고 검증하는 과정을, 지속적 배포 (CD) 는 검증된 코드를 자동으로 프로덕션 환경에 배포하는 과정을 자동화한다. 이 자동화 시스템은 개발 주기를 단축하고, 코드 품질을 향상시키며, 배포 위험을 줄인다. 효과적인 CI/CD 파이프라인은 빌드 자동화, 포괄적인 테스트, 무중단 배포 전략, 롤백 메커니즘을 갖추고 있다.</description>
    </item>
    <item>
      <title>CI/CD</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/</link>
      <pubDate>Mon, 23 Sep 2024 18:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/</guid>
      <description>CI/CD(지속적 통합/지속적 배포) 는 소프트웨어 개발과 배포 프로세스를 자동화하는 현대적인 방법론으로, 개발자가 코드 변경사항을 자주 통합하고 테스트하여 빠르고 안정적인 소프트웨어 배포를 가능하게 한다. 지속적 통합 (CI) 은 코드를 중앙 저장소에 자주 병합하고 자동 테스트하는 과정이며, 지속적 배포 (CD) 는 검증된 코드를 자동으로 프로덕션 환경에 배포하는 프로세스이다. CI/CD 는 버전 관리 시스템, CI/CD 서버, 빌드 도구, 테스트 프레임워크 등의 구성 요소로 이루어지며, 빠른 피드백 루프, 배포 주기 단축, 버그 감소 등의 장점을 제공한다.</description>
    </item>
    <item>
      <title>Deployment Strategies</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/deployment-strategies/</link>
      <pubDate>Mon, 23 Sep 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/deployment-strategies/</guid>
      <description>배포 전략(Deployment Strategies)은 소프트웨어를 안전하고 효율적으로 업데이트하거나 새로운 버전을 릴리스하는 방법을 말한다.</description>
    </item>
    <item>
      <title>History and Evolution of CI/CD</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/ci-cd-fundamentals/history-and-evolution-of-ci-cd/</link>
      <pubDate>Thu, 08 May 2025 00:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/ci-cd-fundamentals/history-and-evolution-of-ci-cd/</guid>
      <description>1990 년대 후반 익스트림 프로그래밍 (XP) 에서 처음 등장한 지속적 통합 개념은 워터폴 모델의 한계를 극복하기 위해 발전했으며, 2000 년대 중반 젠킨스 (이전의 허드슨) 의 등장으로 대중화되었다. 이후 클라우드 컴퓨팅, 컨테이너 기술의 발전과 함께 GitLab CI, CircleCI, GitHub Actions 등 다양한 CI/CD 도구가 등장했다. CI/CD 는 코드 통합 문제 조기 발견, 출시 주기 단축, 품질 향상 등 다양한 이점을 제공하며, 현재는 AI/ML 통합, GitOps, DevSecOps 등의 최신 트렌드와 함께 계속 진화하고 있다.</description>
    </item>
    <item>
      <title>Gitlab CI</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/ci-cd-tools-and-platforms/gitlab-ci/</link>
      <pubDate>Wed, 02 Oct 2024 03:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/ci-cd-tools-and-platforms/gitlab-ci/</guid>
      <description>Gitlab에서 각각 제공하는 CI/CD(Continuous Integration and Continuous Deployment) 도구</description>
    </item>
    <item>
      <title>Shadow Deployment</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/deployment-strategies/shadow-deployment/</link>
      <pubDate>Mon, 23 Sep 2024 12:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/deployment-strategies/shadow-deployment/</guid>
      <description>Shadow Deployment는 새로운 버전의 애플리케이션을 프로덕션 환경에 배포하고 실제 트래픽을 복제하여 새 버전으로 전송하지만, 그 결과는 사용자에게 반환하지 않는 방식이다.</description>
    </item>
    <item>
      <title>Feature Flags</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/deployment-strategies/feature-flags/</link>
      <pubDate>Mon, 23 Sep 2024 12:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/deployment-strategies/feature-flags/</guid>
      <description>Feature flags는 조건문을 사용하여 코드의 특정 부분을 동적으로 제어하는 소프트웨어 개발 기법</description>
    </item>
    <item>
      <title>A/B Testing</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/deployment-strategies/a-b-testing/</link>
      <pubDate>Mon, 23 Sep 2024 02:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/deployment-strategies/a-b-testing/</guid>
      <description>A/B Testing은 소프트웨어 배포 전략 중 하나로, 두 가지 이상의 버전을 사용자에게 제공하여 어떤 버전이 더 효과적인지 비교하는 방법이다.</description>
    </item>
    <item>
      <title>Blue-Green Deployment</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/deployment-strategies/blue-green-deployment/</link>
      <pubDate>Mon, 23 Sep 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/deployment-strategies/blue-green-deployment/</guid>
      <description>Blue-Green Deployment Pattern은 무중단 배포 전략 중 하나로, 애플리케이션의 새 버전을 안전하고 효율적으로 배포하는 방법이다.</description>
    </item>
    <item>
      <title>Canary Deployment</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/deployment-strategies/canary-deployment/</link>
      <pubDate>Mon, 23 Sep 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/deployment-strategies/canary-deployment/</guid>
      <description>카나리 배포(Canary Deployment) 패턴은 새로운 버전의 애플리케이션을 점진적으로 배포하는 전략이다.</description>
    </item>
    <item>
      <title>Rolling Deployment</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/deployment-strategies/rolling-deployment/</link>
      <pubDate>Mon, 23 Sep 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/deployment-strategies/rolling-deployment/</guid>
      <description>Rolling Deployment는 애플리케이션의 새 버전을 점진적으로 배포하는 무중단 배포 전략이다.</description>
    </item>
  </channel>
</rss>
