<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DevOps-and-Infrastructure on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/devops-and-infrastructure/</link>
    <description>Recent content in DevOps-and-Infrastructure on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.1</generator>
    <language>en</language>
    <lastBuildDate>Mon, 05 May 2025 10:10:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/devops-and-infrastructure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Version Control System Theory</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/vcs-theory/</link>
      <pubDate>Thu, 01 May 2025 09:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/vcs-theory/</guid>
      <description></description>
    </item>
    <item>
      <title>Git Flow</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/branch-strategies/git-flow/</link>
      <pubDate>Sun, 29 Sep 2024 13:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/branch-strategies/git-flow/</guid>
      <description>Git Flow는 Vincent Driessen이 2010년에 제안한 구조화된 브랜치 관리 전략으로, Master, Develop, Feature, Release, Hotfix 등 5가지 브랜치를 활용하여 대규모 협업 환경에서 체계적인 릴리스 관리가 필요할 때 효과적이다. 명확한 워크플로우와 안정적인 릴리즈 관리가 장점이지만, 복잡성과 CI/CD 통합의 어려움으로 인해 2025년 현재 트렁크 기반 개발이나 GitHub Flow로 대체되는 추세이다. GitOps와 AI 기반 자동화 도구의 등장으로 브랜치 관리 패러다임이 급격히 변화하고 있다.</description>
    </item>
    <item>
      <title>Version Control Systems</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/</link>
      <pubDate>Sat, 28 Sep 2024 15:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/</guid>
      <description>버전 관리 시스템은 소프트웨어 코드의 변경사항을 추적하고 관리하는 필수적인 도구로, 개발 과정에서 발생하는 변경 이력을 체계적으로 저장하고 여러 개발자 간의 효율적인 협업을 지원한다. 중앙 집중식과 분산식으로 크게 나뉘며, 현대 소프트웨어 개발에서는 Git과 같은 분산형 버전 관리 시스템이 주류를 이루고 있다. 이는 브랜칭과 머징, 변경 이력 추적, 롤백 기능을 통해 코드 품질을 유지하고 개발 워크플로우를 효율화하며, DevOps 환경에서 CI/CD 파이프라인과 긴밀하게 통합되어 현대 소프트웨어 개발의 핵심 인프라 역할을 담당한다.</description>
    </item>
    <item>
      <title>Git</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/vcs-theory/git-overview/</link>
      <pubDate>Sat, 28 Sep 2024 07:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/vcs-theory/git-overview/</guid>
      <description>Git은 Linus Torvalds가 2005년에 개발한 분산형 버전 관리 시스템으로, 소프트웨어 개발에서 코드 변경 사항을 추적하고 여러 개발자의 효율적인 협업을 지원합니다. 스냅샷 기반 저장 방식, SHA-1 해시를 활용한 콘텐츠 주소 지정, 블롭·트리·커밋·태그로 구성된 객체 모델, 작업 디렉토리·스테이징 영역·저장소의 세 단계 워크플로우가 핵심 특징입니다. Git의 강력한 브랜칭과 병합 기능은 비선형적 개발을 가능하게 하며, GitFlow, GitHub Flow 등 다양한 워크플로우 전략이 실무에 적용됩니다. 2025년 현재 AI 기반 코드 리뷰, GitOps 확산, 실시간 협업 도구 강화 등의 동향이 나타나고 있으며, Git은 단순한 버전 관리 도구를 넘어 개발, 테스트, 배포를 아우르는 DevOps의 핵심 요소로 자리잡고 있습니다.</description>
    </item>
    <item>
      <title>Git Basic Commands</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/git-basic-commands/</link>
      <pubDate>Sat, 28 Sep 2024 03:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/git-basic-commands/</guid>
      <description>Git Basic Commands는 버전 관리 시스템 Git의 핵심 명령어들로, init, clone, add, commit, push, pull 등을 포함한다. 이 명령어들은 로컬 저장소 생성부터 원격 저장소와의 동기화까지 모든 기본적인 버전 관리 작업을 가능하게 한다. .gitignore 파일 설정과 Atomic Commit 전략을 통해 효율적인 코드 관리가 가능하다. `add`-`commit`-`push` 기본 흐름을 이해하고, Atomic Commit 원칙을 준수하면 협업 효율성을 극대화할 수 있다. 2025년 현재 AI 통합, 보안 강화, 클라우드 통합 등의 트렌드가 Git 명령어 사용 경험을 향상시키고 있다. 실무에서는 명확한 커밋 메시지 작성, 적절한 브랜치 전략 사용, 정기적인 동기화가 중요하다.</description>
    </item>
    <item>
      <title>Git Workflow</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/</link>
      <pubDate>Thu, 01 May 2025 09:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/</guid>
      <description></description>
    </item>
    <item>
      <title>GitHub Flow</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/branch-strategies/github-flow/</link>
      <pubDate>Sun, 29 Sep 2024 13:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/branch-strategies/github-flow/</guid>
      <description>GitHub Flow는 단순한 브랜치 구조와 풀 리퀘스트 기반 협업으로 CI/CD 환경에 적합하다. 2025년 현재 AI 기반 자동화와 트렁크 기반 개발의 확산으로 더욱 간소화되는 추세이며, 소규모 팀의 신속한 배포 요구에 효과적이다. 다만 복잡한 릴리스 관리에는 Git Flow 등의 대안을 고려해야 한다.</description>
    </item>
    <item>
      <title>Git Internals</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/vcs-theory/git-internals/</link>
      <pubDate>Sun, 29 Sep 2024 09:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/vcs-theory/git-internals/</guid>
      <description>Git Internals는 Git 버전 관리 시스템의 내부 작동 원리와 구조를 설명하는 주제로, 콘텐츠 주소 지정 저장소를 기반으로 한 Git의 객체 모델(Blob, Tree, Commit, Tag)과 SHA-1 해시를 통한 데이터 무결성 보장 메커니즘을 다룬다. 스테이징 영역(인덱스), HEAD, 참조 시스템, 팩 파일 압축, 가비지 컬렉션 등 Git의 핵심 구성 요소들이 어떻게 작동하여 효율적인 버전 관리를 가능하게 하는지 설명한다. Git의 내부 구조를 이해함으로써 개발자는 복잡한 Git 문제를 해결하고, 고급 기능을 효과적으로 활용하며, 맞춤형 워크플로우를 구축할 수 있다. 최근에는 SHA-256으로의 전환, 대규모 저장소를 위한 부분 클론 기능 개선, GitOps와 같은 새로운 방법론, AI 통합 등이 Git의 주요 발전 방향으로 주목받고 있다.</description>
    </item>
    <item>
      <title>Branch strategies</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/branch-strategies/</link>
      <pubDate>Sat, 28 Sep 2024 10:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/branch-strategies/</guid>
      <description>브랜치 전략은 소프트웨어 개발 팀이 Git을 사용하여 코드를 효과적으로 관리하고 협업하기 위한 체계적인 방법론이다. Git Flow, GitHub Flow, GitLab Flow, Trunk-Based Development 등 다양한 전략이 존재하며, 각 전략은 팀 규모, 배포 빈도, 프로젝트 복잡도에 따라 선택할 수 있다. 최근에는 CI/CD와의 통합을 고려한 단순하고 빈번한 통합을 지향하는 추세이다. 효과적인 브랜치 전략 적용을 위해서는 자동화된 테스트, 코드 리뷰 프로세스, 기능 플래그 활용 등이 필수적이며, 팀의 특성과 프로젝트 요구사항에 맞는 최적의 전략 선택이 중요하다.</description>
    </item>
    <item>
      <title>Infrastructure</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/platform-infrastructure/</link>
      <pubDate>Sun, 10 Nov 2024 01:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/platform-infrastructure/</guid>
      <description>Infrastructure(인프라스트럭처)는 조직의 IT 환경을 지원하고 운영하는 데 필요한 기본적인 구성 요소들의 집합이다. 이는 하드웨어, 소프트웨어, 네트워크 리소스 및 서비스를 포함한다.</description>
    </item>
    <item>
      <title>GitLab Flow</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/branch-strategies/gitlab-flow/</link>
      <pubDate>Sun, 29 Sep 2024 13:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/branch-strategies/gitlab-flow/</guid>
      <description>GitLab Flow(깃랩 플로우)는 Git Flow(깃 플로우)의 복잡성과 GitHub Flow(깃허브 플로우)의 단순성 사이에서 균형을 찾은 브랜치 전략입니다.운영, 스테이징, 개발 등 환경별 브랜치와 기능 개발 중심의 브랜치, 그리고 이슈 트래킹 시스템과의 연동을 통해 개발 프로세스를 단순화하고 투명하게 만듭니다.또한, CI/CD(지속적 통합/지속적 배포) 파이프라인과의 통합으로 개발 효율성과 코드 품질을 높일 수 있습니다.복잡한 릴리스 관리가 필요한 대규모 프로젝트뿐 아니라, 신속한 배포가 중요한 프로젝트에도 유연하게 적용할 수 있는 워크플로우입니다.</description>
    </item>
    <item>
      <title>CI/CD</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/</link>
      <pubDate>Sat, 28 Sep 2024 18:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/</guid>
      <description>기능적인 소프트웨어 제공 시 문제 발생 위험을 줄이고자 코드를 `지속적으로`테스트하고 `배포하는 전술`</description>
    </item>
    <item>
      <title>Branching and Merging</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/branching-and-merging/</link>
      <pubDate>Sat, 28 Sep 2024 09:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/branching-and-merging/</guid>
      <description>Branching과 Merging은 Git 기반 협업에서 필수적인 기술로, 병렬 개발과 코드 통합을 지원한다. Git을 중심으로 한 다양한 브랜치 전략(GitFlow, GitHub Flow 등)이 사용되며, merge와 rebase 같은 병합 방식을 상황에 맞게 선택할 수 있다.  전략적으로 브랜치를 관리하고 적절한 머지 방식을 선택함으로써 충돌을 줄이고 배포를 안정화할 수 있다. AI 기반 충돌 해결, 실시간 협업, GitOps 통합 등이 주목받고 있으며, 향후 완전 자동화된 브랜칭 시스템과 컨텍스트 인식 병합 기술이 발전할 것으로 전망된다.</description>
    </item>
    <item>
      <title>사이트 신뢰성 엔지니어링 (Site Reliability Engineering, SRE)</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/site-reliability-engineering/</link>
      <pubDate>Sat, 28 Sep 2024 09:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/site-reliability-engineering/</guid>
      <description>IT 운영에 대한 소프트웨어 엔지니어링 접근 방식</description>
    </item>
    <item>
      <title>SVN Mercurial Overview</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/vcs-theory/svn-mercurial-overview/</link>
      <pubDate>Sat, 28 Sep 2024 04:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/vcs-theory/svn-mercurial-overview/</guid>
      <description>SVN과 Mercurial은 각각 중앙 집중식과 분산형 접근 방식을 취하는 중요한 버전 관리 시스템이다. SVN은 중앙 서버에 모든 이력을 저장하고 순차적 정수 리비전 번호를 사용하며, 세밀한 접근 제어와 대용량 바이너리 파일 처리에 강점이 있다. Mercurial은 모든 개발자가 저장소의 전체 복사본을 가지며, SHA-1 해시 기반 식별자와 체인지셋을 통해 변경 사항을 관리하고, 확장 시스템으로 기능을 추가할 수 있다. 2025년 현재 Git이 시장의 90% 이상을 차지하는 가운데, SVN은 제조업과 게임 개발 등 대용량 파일 처리가 중요한 분야에서, Mercurial은 Mozilla 등 소수의 프로젝트에서 사용되고 있으며, 하이브리드 접근법과 AI 통합이 새로운 동향으로 떠오르고 있다.</description>
    </item>
    <item>
      <title>Trunk-based Development</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/branch-strategies/trunk-based-development/</link>
      <pubDate>Sun, 29 Sep 2024 13:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/branch-strategies/trunk-based-development/</guid>
      <description>Trunk-based Development는 모든 개발자가 단일 메인 브랜치에 작고 빈번한 변경사항을 통합하는 현대적인 개발 방법론으로, 지속적 통합과 배포의 핵심 전제조건이다. 짧은 수명의 브랜치와 강력한 자동화 테스트, 피처 플래그를 활용하여 병합 충돌을 최소화하고 배포 속도를 극대화하며, 대규모 조직에서도 성공적으로 적용되고 있다. 높은 팀 규율과 강력한 테스트 인프라가 필요하지만, 현대 DevOps 환경에서 가장 효율적인 브랜치 전략으로 인정받고 있습니다.</description>
    </item>
    <item>
      <title>Git Submodule</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/git-submodule/</link>
      <pubDate>Sat, 28 Sep 2024 07:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/git-submodule/</guid>
      <description>Git Submodule 은 외부 Git 저장소를 현재 프로젝트에 하위 모듈로 포함시켜 관리하는 방식이다. 현대 소프트웨어 개발에서 필수적인 모듈화 도구로 진화했다. 이를 통해 개발자는 코드 재사용, 외부 의존성 관리, 모듈식 개발을 효과적으로 구현할 수 있다. 서브모듈은 부모 저장소에서 자식 저장소의 특정 커밋을 참조하는 방식으로 작동하며, 이를 통해 의존성 버전을 고정하여 안정성을 확보할 수 있다. 코드 재사용, 독립적 이력 관리, 모듈식 구조 등의 장점이 있지만, 복잡한 워크플로우와 추가 학습이 필요하다는 단점도 있다. 최근에는 서브모듈과 모노레포의 장점을 결합한 하이브리드 접근법과 성능 최적화 기술이 발전하고 있으며, 향후 AI 기반의 자동화와 클라우드 환경 최적화가 더욱 진전될 것으로 전망된다.</description>
    </item>
    <item>
      <title>Git Subtree</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/git-subtree/</link>
      <pubDate>Mon, 05 May 2025 10:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/git-subtree/</guid>
      <description>Git Subtree 는 여러 독립적인 저장소의 코드를 하나의 저장소에서 통합 관리할 수 있게 해주는 Git 의 고급 기능이다. 상위 저장소에 하위 저장소의 파일을 직접 추가하고 트래킹하는 방식으로 작동하며, 서브모듈과 달리 별도의 메타데이터 파일 없이 일반적인 Git 워크플로우로 관리할 수 있다. 주요 장점으로는 코드 공유 용이성, 직접 수정 가능성, 양방향 동기화 등이 있으며, 단점으로는 명령어 복잡성, 저장소 크기 증가, 접근 제어 제한 등이 있다. 2025 년 현재, Git Subtree 는 모노레포와 결합하여 개발은 단일 저장소에서, 배포는 개별 저장소로 하는 하이브리드 접근법이 인기를 얻고 있으며, CI/CD 파이프라인 통합과 자동화 도구를 통해 복잡한 워크플로우를 단순화하는 추세이다.</description>
    </item>
    <item>
      <title>VCS comparison</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/vcs-theory/vcs-comparison/</link>
      <pubDate>Sat, 28 Sep 2024 04:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/vcs-theory/vcs-comparison/</guid>
      <description>RCS는 단일 파일 관리에 특화된 로컬 도구이며, CVS와 SVN은 중앙 집중식 협업을 지원합니다. Git과 Mercurial은 분산형 아키텍처로 현대 개발 워크플로우에 적합하며, Git은 생태계 면에서 압도적입니다. . 각 시스템은 고유한 아키텍처, 저장 방식, 장단점을 갖고 있어 프로젝트 특성과 요구사항에 따라 적절한 도구를 선택해야 하며, 최근에는 AI 통합, 모노레포 관리, GitOps 등의 새로운 동향이 등장하고 있습니다.</description>
    </item>
    <item>
      <title>Git Submodule vs. Subtree</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/git-submodule-vs-subtree/</link>
      <pubDate>Mon, 05 May 2025 10:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/git-submodule-vs-subtree/</guid>
      <description>깃 서브모듈 (Git Submodule) 과 서브트리 (Git Subtree) 는 외부 코드를 프로젝트에 통합하는 두 가지 접근 방식으로, 각각 고유한 장단점을 가진다. 서브모듈은 외부 저장소에 대한 참조만 저장하여 명확한 버전 관리와 코드 분리를 제공하지만, 복잡한 설정과 팀원 교육이 필요하다. 반면 서브트리는 외부 코드를 직접 통합하여 사용 편의성과 즉각적인 코드 접근성을 제공하지만, 저장소 크기 증가와 히스토리 복잡성이라는 단점이 있다. 프로젝트의 요구사항, 팀 구성, 개발 워크플로우에 따라 적합한 방식을 선택해야 하며, 최신 트렌드는 두 접근 방식 모두 자동화와 사용성 개선에 초점을 맞추고 있다.</description>
    </item>
    <item>
      <title>Conflict Resolution</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/conflict-resolution/</link>
      <pubDate>Sat, 28 Sep 2024 09:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/git-workflow/conflict-resolution/</guid>
      <description>Git 충돌 해결은 협업 중 충돌된 코드를 병합하는 과정으로, 효율적인 협업과 안정적인 소스 관리를 위해 필수적이다. 충돌은 Git 이 자동으로 변경사항을 병합할 수 없을 때 발생하며, 개발자의 수동 개입이 필요하다. 효과적인 충돌 해결을 위해서는 충돌 마커 이해, 다양한 병합 전략 활용, 외부 도구 사용, 그리고 체계적인 해결 프로세스가 필요하다. `--ours` 와 `--theirs` 같은 옵션은 충돌 자동 해결에 유용하며, 리베이스와 서브모듈 충돌은 특별한 접근 방식이 요구된다. 2025년 현재, AI 기반 충돌 해결 도구의 등장과 자동화 기술의 발전이 두드러지며, 앞으로는 AI 가 더욱 정교하게 충돌을 자동으로 해결할 것으로 전망된다. 충돌 예방을 위한 작은 커밋, 정기적 동기화, 팀 내 원활한 커뮤니케이션도 효과적인 충돌 관리의 핵심 요소이다.</description>
    </item>
    <item>
      <title>Advanced Topics</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/advanced-topics/</link>
      <pubDate>Fri, 02 May 2025 08:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/advanced-topics/</guid>
      <description>&lt;h2 id=&#34;advanced-topics&#34;&gt;Advanced Topics&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;용어-정리&#34;&gt;용어 정리&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;용어&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Gitlab CI</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/ci-cd-automation/gitlab-ci/</link>
      <pubDate>Sat, 28 Sep 2024 03:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/version-control-systems/ci-cd-automation/gitlab-ci/</guid>
      <description>Gitlab에서 각각 제공하는 CI/CD(Continuous Integration and Continuous Deployment) 도구</description>
    </item>
    <item>
      <title>Observability</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/observability/</link>
      <pubDate>Sat, 28 Sep 2024 02:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/observability/</guid>
      <description>현대 소프트웨어 개발과 운영에서 필수적인 개념으로, 시스템의 외부 출력(메트릭, 로그, 트레이스 등)을 통해 내부 상태를 이해하고 모니터링하는 능력을 의미한다.</description>
    </item>
    <item>
      <title>Infrastructure as Code (IaC)</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/infrastructure-as-code/</link>
      <pubDate>Sat, 28 Sep 2024 00:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/infrastructure-as-code/</guid>
      <description>전통적인 수동 인프라 구성 방식에서 벗어나 프로그래밍 언어를 사용하여 IT 인프라를 자동화하고 관리하는 접근법</description>
    </item>
    <item>
      <title>Platform Engineering</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/platform-engineering/</link>
      <pubDate>Thu, 19 Sep 2024 16:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/platform-engineering/</guid>
      <description>플랫폼 엔지니어링(Platform Engineering)은 개발자 경험과 생산성, 비즈니스 가치를 높이기 위해 내부 개발자 플랫폼(IDP, Internal Developer Platform)과 셀프서비스 환경을 설계·구축·운영하는 소프트웨어 엔지니어링 분야입니다. 주요 구성 요소로는 재사용 가능한 컴포넌트, 개발자 도구(CI/CD, IDE 등), 자동화된 인프라 관리, 보안 및 규정 준수, 관측성(모니터링·로깅), 개발자 포털, 문서화, 측정 및 피드백 체계 등이 있습니다. 플랫폼 엔지니어링은 DevOps와 SRE의 원칙을 바탕으로, 표준화된 도구와 자동화된 워크플로우를 통해 개발팀이 빠르고 안전하게 소프트웨어를 개발·배포할 수 있도록 지원합니다</description>
    </item>
  </channel>
</rss>
