<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Context-Switching</title><link>https://buenhyden.github.io/tags/context-switching/</link><description>Recent content in Context-Switching on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 15 Jan 2025 01:00:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/context-switching/index.xml" rel="self" type="application/rss+xml"/><item><title>Context Switching</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/context-switching/</link><pubDate>Wed, 15 Jan 2025 01:00:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/context-switching/</guid><description>
&lt;h2>Context Switching&lt;span class="hx-absolute -hx-mt-20" id="context-switching">&lt;/span>
&lt;a href="#context-switching" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Context Switching은 운영 체제에서 매우 중요한 개념으로, 여러 프로세스나 스레드가 단일 CPU 자원을 공유하여 효율적으로 실행될 수 있게 하는 메커니즘이다.&lt;/p>
&lt;p>Context Switching은 CPU가 현재 실행 중인 프로세스나 스레드의 상태를 저장하고, 다른 프로세스나 스레드의 상태를 불러와 실행을 재개하는 과정을 말한다.&lt;br>
이를 통해 여러 작업이 동시에 실행되는 것처럼 보이게 된다.&lt;/p>
&lt;p>
&lt;img src="../swapping1.png" alt="Context Switching" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/context-switch-in-operating-system/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/context-switch-in-operating-system/&lt;/a> _&lt;/p>
&lt;h3>Context Switching의 필요성&lt;span class="hx-absolute -hx-mt-20" id="context-switching의-필요성">&lt;/span>
&lt;a href="#context-switching%ec%9d%98-%ed%95%84%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>멀티태스킹: 여러 프로세스가 동시에 실행되는 것처럼 보이게 하여 시스템 효율성을 높인다.&lt;/li>
&lt;li>인터럽트 처리: 하드웨어 인터럽트나 시스템 호출 등에 신속하게 대응할 수 있다.&lt;/li>
&lt;li>자원 공유: 단일 CPU로 여러 프로세스를 실행할 수 있게 한다.&lt;/li>
&lt;/ol>
&lt;h3>Context Switching의 과정&lt;span class="hx-absolute -hx-mt-20" id="context-switching의-과정">&lt;/span>
&lt;a href="#context-switching%ec%9d%98-%ea%b3%bc%ec%a0%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>현재 실행 중인 프로세스의 상태 저장: CPU 레지스터, 프로그램 카운터 등의 정보를 PCB(Process Control Block)에 저장한다.&lt;/li>
&lt;li>새로운 프로세스 선택: 스케줄러가 다음에 실행할 프로세스를 선택한다.&lt;/li>
&lt;li>새 프로세스의 상태 복원: 선택된 프로세스의 PCB에서 상태 정보를 불러와 CPU 레지스터에 복원한다.&lt;/li>
&lt;li>실행 재개: 새 프로세스의 실행을 시작한다.&lt;/li>
&lt;/ol>
&lt;h3>Context Switching의 트리거&lt;span class="hx-absolute -hx-mt-20" id="context-switching의-트리거">&lt;/span>
&lt;a href="#context-switching%ec%9d%98-%ed%8a%b8%eb%a6%ac%ea%b1%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>인터럽트: 하드웨어나 소프트웨어에서 발생하는 인터럽트.&lt;/li>
&lt;li>시간 할당 종료: 프로세스에 할당된 CPU 시간이 끝났을 때.&lt;/li>
&lt;li>I/O 요청: 프로세스가 I/O 작업을 요청하여 대기 상태로 전환될 때.&lt;/li>
&lt;li>우선순위: 더 높은 우선순위의 프로세스가 실행 준비될 때.&lt;/li>
&lt;/ol>
&lt;h3>Context Switching의 구현 방식&lt;span class="hx-absolute -hx-mt-20" id="context-switching의-구현-방식">&lt;/span>
&lt;a href="#context-switching%ec%9d%98-%ea%b5%ac%ed%98%84-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>하드웨어 스위칭: 프로세서 코어에 내장된 태스크 상태 세그먼트(TSS)를 사용한다.&lt;/li>
&lt;li>소프트웨어 스위칭: 운영 체제의 커널 루틴과 데이터 구조를 사용하여 구현한다. 더 빠르고 일관성 있는 방식이다.&lt;/li>
&lt;/ol>
&lt;h3>Context Switching의 장단점&lt;span class="hx-absolute -hx-mt-20" id="context-switching의-장단점">&lt;/span>
&lt;a href="#context-switching%ec%9d%98-%ec%9e%a5%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>장점:&lt;/p>
&lt;ul>
&lt;li>멀티태스킹 지원: 여러 프로세스를 동시에 실행하는 것처럼 보이게 한다.&lt;/li>
&lt;li>자원 활용 최적화: CPU 사용을 최적화하여 시스템 효율성을 높인다.&lt;/li>
&lt;/ul>
&lt;p>단점:&lt;/p>
&lt;ul>
&lt;li>오버헤드: Context Switching 자체가 CPU 시간을 소모한다.&lt;/li>
&lt;li>캐시 미스: 프로세스 전환 시 캐시 데이터가 무효화될 수 있다.&lt;/li>
&lt;li>지연 시간: 빈번한 Context Switching은 전체적인 시스템 성능을 저하시킬 수 있다.&lt;/li>
&lt;/ul>
&lt;h3>Context Switching 최적화&lt;span class="hx-absolute -hx-mt-20" id="context-switching-최적화">&lt;/span>
&lt;a href="#context-switching-%ec%b5%9c%ec%a0%81%ed%99%94" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>프로세스 우선순위 조정: 중요한 프로세스에 더 높은 우선순위 부여.&lt;/li>
&lt;li>스레드 사용: 프로세스 내 스레드 사용으로 Context Switching 비용 감소.&lt;/li>
&lt;li>인터럽트 처리 최적화: 효율적인 인터럽트 처리로 불필요한 Context Switching 감소.&lt;/li>
&lt;li>캐시 최적화: 캐시 친화적인 데이터 구조와 알고리즘 사용.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>