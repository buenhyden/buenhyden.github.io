<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/python/</link>
    <description>Recent content in Python on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.149.1</generator>
    <language>en</language>
    <lastBuildDate>Sat, 08 Feb 2025 02:39:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic Syntax</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/syntax-basics/</link>
      <pubDate>Fri, 20 Dec 2024 12:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/syntax-basics/</guid>
      <description>Python의 기본 구문법</description>
    </item>
    <item>
      <title>Python vs Javascript vs Typescript vs Java</title>
      <link>https://buenhyden.github.io/posts/programming-languages/overview/python-vs-javascript-vs-typescript-vs-java/</link>
      <pubDate>Sun, 19 Jan 2025 00:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/overview/python-vs-javascript-vs-typescript-vs-java/</guid>
      <description>프로그래밍 언어마다 각기 다른 설계 철학과 실행 방식, 개발 생태계 및 목적이 존재한다.</description>
    </item>
    <item>
      <title>Python Web Framework</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/</link>
      <pubDate>Fri, 29 Nov 2024 04:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/</guid>
      <description>동적 웹사이트, 웹 서비스 및 웹 애플리케이션의 개발을 지원하기 위해 만들어진 소프트웨어 프레임워크</description>
    </item>
    <item>
      <title>Python</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/</link>
      <pubDate>Sun, 27 Oct 2024 01:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/</guid>
      <description>다양한 특징을 가진 강력하고 유연한 프로그래밍 언어</description>
    </item>
    <item>
      <title>Poetry vs uv vs Rye</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry-vs-uv-vs-rye/</link>
      <pubDate>Wed, 27 Nov 2024 06:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry-vs-uv-vs-rye/</guid>
      <description>파이썬 프로젝트 관리와 패키지 설치를 위한 도구들</description>
    </item>
    <item>
      <title>setup.cfg vs pyproject.toml</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/configuration/setup.cfg-vs-pyproject.toml/</link>
      <pubDate>Wed, 27 Nov 2024 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/configuration/setup.cfg-vs-pyproject.toml/</guid>
      <description>Python 프로젝트의 구성과 메타데이터를 정의하는 파일 형식이다.</description>
    </item>
    <item>
      <title>prefetch_related</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/django/orm/queryset/optimization/prefetch_related/</link>
      <pubDate>Sat, 08 Feb 2025 02:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/django/orm/queryset/optimization/prefetch_related/</guid>
      <description>`prefetch_related`는 Django ORM에서 관련 객체들을 미리 가져오기 위해 사용하는 메서드로, 주로 &amp;#34;many-to-many&amp;#34; 또는 &amp;#34;one-to-many&amp;#34; 관계에서 발생하는 N&#43;1 쿼리 문제를 해결하기 위해 설계되었다.</description>
    </item>
    <item>
      <title>select_related</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/django/orm/queryset/optimization/select_related/</link>
      <pubDate>Sat, 08 Feb 2025 02:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/django/orm/queryset/optimization/select_related/</guid>
      <description>SQL의 JOIN 연산을 활용하여 외래 키(Foreign Key) 관계가 있는 객체를 단일 쿼리로 함께 가져오는 메서드</description>
    </item>
    <item>
      <title>ORM</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/django/orm/</link>
      <pubDate>Fri, 07 Feb 2025 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/django/orm/</guid>
      <description>Django ORM은 Python 클래스(모델)를 데이터베이스 테이블에 매핑하고, 모델 인스턴스를 테이블의 행으로 매핑한다. 이를 통해 개발자는 SQL 쿼리를 직접 작성하지 않고도 데이터베이스 작업을 수행할 수 있게 된다.</description>
    </item>
    <item>
      <title>asyncio</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/concurrency/asyncio/</link>
      <pubDate>Sun, 19 Jan 2025 06:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/concurrency/asyncio/</guid>
      <description>Python의 `asyncio`는 비동기 I/O 프로그래밍을 지원하는 표준 라이브러리로, `async/await` 구문을 활용해 동시성 코드를 작성할 수 있게 해 준다. 특히 I/O 바운드 작업(네트워크 통신, 파일 입출력 등)에서 성능을 극대화할 수 있다.</description>
    </item>
    <item>
      <title>Greenlet and Gevent</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/concurrency/greenlet-and-gevent/</link>
      <pubDate>Sun, 19 Jan 2025 05:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/concurrency/greenlet-and-gevent/</guid>
      <description>Greenlet과 Gevent는 Python에서 동시성 프로그래밍을 위한 라이브러리이다.</description>
    </item>
    <item>
      <title>Modin</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/modin/</link>
      <pubDate>Fri, 17 Jan 2025 07:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/modin/</guid>
      <description>pandas를 대체할 수 있는 고성능 데이터프레임 라이브러리</description>
    </item>
    <item>
      <title>Dask</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/dask/</link>
      <pubDate>Fri, 17 Jan 2025 07:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/dask/</guid>
      <description>파이썬을 위한 유연한 병렬 컴퓨팅 라이브러리</description>
    </item>
    <item>
      <title>Polars</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/polars/</link>
      <pubDate>Fri, 17 Jan 2025 07:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/polars/</guid>
      <description>고성능 데이터 처리를 위해 설계된 파이썬 DataFrame 라이브러리</description>
    </item>
    <item>
      <title>Numpy</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/numpy/</link>
      <pubDate>Fri, 17 Jan 2025 07:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/numpy/</guid>
      <description>파이썬에서 과학 계산을 위한 핵심 라이브러리.</description>
    </item>
    <item>
      <title>pandas</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/pandas/</link>
      <pubDate>Fri, 17 Jan 2025 05:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/data-analysis/pandas/</guid>
      <description>데이터를 다루기 위한 강력한 도구로, 엑셀의 스프레드시트와 비슷한 형태로 데이터를 처리할 수 있게 해준다.</description>
    </item>
    <item>
      <title>Type Casting</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/data-types-and-structures/data-types/type-casting/</link>
      <pubDate>Tue, 24 Dec 2024 13:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/data-types-and-structures/data-types/type-casting/</guid>
      <description>파이썬에서는 다양한 내장 함수를 사용하여 데이터 타입을 변환할 수 있다.</description>
    </item>
    <item>
      <title>Data Types</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/data-types-and-structures/data-types/</link>
      <pubDate>Tue, 24 Dec 2024 11:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/data-types-and-structures/data-types/</guid>
      <description>Python은 동적 타입 언어로, 변수를 선언할 때 명시적으로 타입을 지정할 필요가 없다.  하지만 각 데이터 타입을 이해하는 것은 효율적인 코딩과 디버깅에 필수적이다.</description>
    </item>
    <item>
      <title>SQLAlchemy</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/orms/sqlalchemy/</link>
      <pubDate>Sat, 30 Nov 2024 09:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/orms/sqlalchemy/</guid>
      <description>파이썬에서 사용되는 강력하고 유연한 SQL 툴킷 및 객체 관계 매핑(ORM) 라이브러리</description>
    </item>
    <item>
      <title>daphne</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/web-application-server/asgi-server/daphne/</link>
      <pubDate>Sat, 30 Nov 2024 08:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/web-application-server/asgi-server/daphne/</guid>
      <description>Daphne는 Django Channels를 위해 개발된 HTTP, HTTP2 및 WebSocket 프로토콜 서버이다.</description>
    </item>
    <item>
      <title>uvicorn</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/web-application-server/asgi-server/uvicorn/</link>
      <pubDate>Sat, 30 Nov 2024 08:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/web-application-server/asgi-server/uvicorn/</guid>
      <description>Uvicorn은 Python용 ASGI(Asynchronous Server Gateway Interface) 웹 서버 구현체이다.</description>
    </item>
    <item>
      <title>Celery</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/task-queue/celery/</link>
      <pubDate>Sat, 30 Nov 2024 07:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/task-queue/celery/</guid>
      <description>Celery는 파이썬으로 작성된 분산 작업 큐 시스템이다.  주로 웹 애플리케이션에서 비동기 작업 처리와 작업 스케줄링을 위해 사용된다.</description>
    </item>
    <item>
      <title>gunicorn</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/web-application-server/wsgi-server/gunicorn/</link>
      <pubDate>Sat, 30 Nov 2024 03:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/web-application-server/wsgi-server/gunicorn/</guid>
      <description>Gunicorn(Green Unicorn)은 Python WSGI(Web Server Gateway Interface) HTTP 서버로, 파이썬 웹 애플리케이션을 위한 강력하고 효율적인 서버 솔루션이다.</description>
    </item>
    <item>
      <title>UWSGI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/web-application-server/wsgi-server/uwsgi/</link>
      <pubDate>Sat, 30 Nov 2024 03:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/web-application-server/wsgi-server/uwsgi/</guid>
      <description>파이썬 웹 애플리케이션을 위한 강력하고 유연한 애플리케이션 서버</description>
    </item>
    <item>
      <title>pydantic</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/validation/pydantic/</link>
      <pubDate>Sat, 30 Nov 2024 03:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/libraries/validation/pydantic/</guid>
      <description>데이터 검증과 설정 관리를 위한 라이브러리</description>
    </item>
    <item>
      <title>Pytest</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/testing/pytest/</link>
      <pubDate>Fri, 29 Nov 2024 23:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/testing/pytest/</guid>
      <description>파이썬을 위한 강력하고 유연한 테스트 프레임워크</description>
    </item>
    <item>
      <title>Unittest</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/testing/unittest/</link>
      <pubDate>Fri, 29 Nov 2024 23:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/testing/unittest/</guid>
      <description>파이썬의 표준 라이브러리에 포함된 단위 테스트 프레임워크</description>
    </item>
    <item>
      <title>Python Testing</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/testing/</link>
      <pubDate>Fri, 29 Nov 2024 14:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/testing/</guid>
      <description>Python에서 활용할 수 있는 다양한 테스팅 도구</description>
    </item>
    <item>
      <title>Starlette</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/starlette/</link>
      <pubDate>Fri, 29 Nov 2024 03:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/starlette/</guid>
      <description>고성능 비동기 웹 애플리케이션을 구축하기 위한 경량 ASGI 프레임워크</description>
    </item>
    <item>
      <title>Django</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/django/</link>
      <pubDate>Fri, 29 Nov 2024 02:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/django/</guid>
      <description>웹 개발에 필요한 모든 요소를 포함하는 풀 스택 프레임워크</description>
    </item>
    <item>
      <title>Flask</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/flask/</link>
      <pubDate>Fri, 29 Nov 2024 02:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/flask/</guid>
      <description>&amp;#34;마이크로 프레임워크&amp;#34;라고 불리는 Flask는 핵심 기능만을 가볍게 유지하면서도 필요에 따라 확장할 수 있는 유연한 구조를 제공한다.</description>
    </item>
    <item>
      <title>FastAPI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/fastapi/</link>
      <pubDate>Fri, 29 Nov 2024 02:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/web-frameworks/fastapi/</guid>
      <description>Python 3.6&#43; 의 타입 힌트를 기반으로 하며, 비동기 프로그래밍을 지원하는 고성능 웹 프레임워크</description>
    </item>
    <item>
      <title>Python Linter와 Formatter</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/</link>
      <pubDate>Thu, 28 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/</guid>
      <description>Python에서 활용할 수 있는 소스 코드에서 문법 오류나 스타일 문제, 잠재적인 버그를 자동으로 검사해주는 도구</description>
    </item>
    <item>
      <title>ruff</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/ruff/</link>
      <pubDate>Thu, 28 Nov 2024 08:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/ruff/</guid>
      <description>Python 코드 품질을 개선하기 위한 린터</description>
    </item>
    <item>
      <title>ASGI vs CGI vs WSGI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/gateway-interface/</link>
      <pubDate>Thu, 28 Nov 2024 03:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/gateway-interface/</guid>
      <description>웹 서버와 애플리케이션 간의 통신 방식을 정의하는 인터페이스 규격</description>
    </item>
    <item>
      <title>autopep8</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/autopep8/</link>
      <pubDate>Thu, 28 Nov 2024 03:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/autopep8/</guid>
      <description>Python 코드를 PEP 8 스타일 가이드라인에 맞게 자동으로 포맷팅해주는 도구</description>
    </item>
    <item>
      <title>Black</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/black/</link>
      <pubDate>Thu, 28 Nov 2024 03:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/black/</guid>
      <description>파이썬을 위한 강력하고 엄격한 코드 포매터</description>
    </item>
    <item>
      <title>Flake8</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/flake8/</link>
      <pubDate>Thu, 28 Nov 2024 03:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/flake8/</guid>
      <description>파이썬 코드를 위한 강력한 린팅(linting) 도구</description>
    </item>
    <item>
      <title>YAPF(Yet Another Python Formatter)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/yapf/</link>
      <pubDate>Thu, 28 Nov 2024 03:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/yapf/</guid>
      <description>Google에서 개발한 파이썬 코드 포매터.</description>
    </item>
    <item>
      <title>Pylint</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/pylint/</link>
      <pubDate>Thu, 28 Nov 2024 03:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/testing-and-quality/linter-and-formatter/pylint/</guid>
      <description>파이썬 코드의 품질을 검사하고 개선하는데 도움을 주는 강력한 정적 코드 분석 도구</description>
    </item>
    <item>
      <title>CGI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/gateway-interface/cgi/</link>
      <pubDate>Thu, 28 Nov 2024 03:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/gateway-interface/cgi/</guid>
      <description>웹 서버와 외부 프로그램 간의 통신을 위한 표준 인터페이스</description>
    </item>
    <item>
      <title>WSGI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/gateway-interface/wsgi/</link>
      <pubDate>Thu, 28 Nov 2024 03:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/gateway-interface/wsgi/</guid>
      <description>파이썬 웹 애플리케이션과 웹 서버 간의 표준 인터페이스를 정의하는 규약</description>
    </item>
    <item>
      <title>setup.cfg</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/configuration/setup.cfg/</link>
      <pubDate>Wed, 27 Nov 2024 14:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/configuration/setup.cfg/</guid>
      <description>파이썬 프로젝트의 설정을 관리하는 구성 파일</description>
    </item>
    <item>
      <title>Poetry</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/</link>
      <pubDate>Wed, 27 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/</guid>
      <description>Python 프로젝트의 의존성 관리와 패키징을 위한 도구</description>
    </item>
    <item>
      <title>Poetry Configuration</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/poetry-configuration/</link>
      <pubDate>Wed, 27 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/poetry-configuration/</guid>
      <description>`config` 명령어나 `config.toml` 파일을 통해 설정할 수 있다.</description>
    </item>
    <item>
      <title>Poetry Libraries</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/poetry-libraries/</link>
      <pubDate>Wed, 27 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/poetry-libraries/</guid>
      <description>Poetry는 파이썬 라이브러리를 효율적으로 관리하고 배포할 수 있도록 지원하는 도구로 라이브러리를 설치 가능하게 만들기 위해 다음과 같은 절차를 따를 수 있다.</description>
    </item>
    <item>
      <title>Poetry Managing dependencies</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/poetry-managing-dependencies/</link>
      <pubDate>Wed, 27 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/poetry-managing-dependencies/</guid>
      <description>Poetry는 의존성을 효율적으로 관리하기 위해 다양한 기능을 제공한다.</description>
    </item>
    <item>
      <title>Poetry Usage</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/poetry-usage/</link>
      <pubDate>Wed, 27 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/poetry/poetry-usage/</guid>
      <description>Python 프로젝트의 의존성 관리와 패키징을 위한 도구</description>
    </item>
    <item>
      <title>The pyproject.toml file</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/configuration/the-pyproject.toml-file/</link>
      <pubDate>Wed, 27 Nov 2024 06:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/configuration/the-pyproject.toml-file/</guid>
      <description>Python 프로젝트의 구성 정보와 빌드 시스템 요구 사항을 정의하는 표준화된 구성 파일</description>
    </item>
    <item>
      <title>Rye</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/rye/</link>
      <pubDate>Wed, 27 Nov 2024 04:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/rye/</guid>
      <description>Rye는 파이썬 프로젝트와 패키지 관리를 위한 통합 솔루션으로, 2022년 11월에 Pynecone이라는 이름으로 처음 공개되었으나, 2023년 6월에 Rye로 이름이 변경되었다.</description>
    </item>
    <item>
      <title>uv</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/uv/</link>
      <pubDate>Wed, 27 Nov 2024 04:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/ecosystem--practice/package-management/uv/</guid>
      <description>Rust로 작성된 UV는 기존의 pip, pip-tools, virtualenv 등을 대체할 수 있는 초고속 파이썬 패키지 설치 및 의존성 해결 도구이다.</description>
    </item>
    <item>
      <title>PEP</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/</guid>
      <description>Python Enhancement Proposal의 약자로 파이썬 커뮤니티에 새로운 기능을 알리거나 설명하는 설계 문서.</description>
    </item>
    <item>
      <title>PEP 20–The Zen of Python</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-20-the-zen-of-python/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-20-the-zen-of-python/</guid>
      <description>파이썬의 철학과 디자인 원칙을 담고 있는 19개의 지침.</description>
    </item>
    <item>
      <title>PEP 257–Docstring Conventions</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-257docstring-conventions/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-257docstring-conventions/</guid>
      <description>Python 코드의 docstring 작성에 대한 규칙과 관례를 정의한 문서</description>
    </item>
    <item>
      <title>PEP 3000–Python 3000</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-3000python-3000/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-3000python-3000/</guid>
      <description>Python 3000 (Python 3.0 또는 Py3k로도 알려짐) 개발에 대한 가이드라인을 제시하는 문서</description>
    </item>
    <item>
      <title>PEP 3333–Python Web Server Gateway Interface V1.0.1</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-3333python-web-server-gateway-interface-v1/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-3333python-web-server-gateway-interface-v1/</guid>
      <description>Python Web Server Gateway Interface (WSGI) 버전 1.0.1을 정의하는 문서</description>
    </item>
    <item>
      <title>PEP 484–Type Hints</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-484type-hints/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-484type-hints/</guid>
      <description>Python에 타입 힌트(Type Hints)를 도입하여 함수의 인자와 반환값에 대한 타입을 명시할 수 있도록 하는 표준을 정의</description>
    </item>
    <item>
      <title>PEP 492–Coroutines with Async and Await Syntax</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-492coroutines-with-async-and-await-syntax/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-492coroutines-with-async-and-await-syntax/</guid>
      <description>Python에 비동기 프로그래밍을 위한 async와 await 구문을 도입하여 코루틴(coroutine)을 명시적으로 정의하고 사용하는 방법을 제안</description>
    </item>
    <item>
      <title>PEP 8-Style Guide for Python Code</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-8-style-guide-for-python-code/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/pep/pep-8-style-guide-for-python-code/</guid>
      <description>Python 코드의 스타일 가이드로, 가독성과 일관성을 높이기 위한 다양한 규칙과 권장사항을 제시</description>
    </item>
    <item>
      <title>Python-Special Methods</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/special-methods/</link>
      <pubDate>Mon, 25 Nov 2024 23:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/special-methods/</guid>
      <description>클래스에 특별한 기능을 부여하는 특수한 메소드</description>
    </item>
    <item>
      <title>Python - Iterators</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/iterators/</link>
      <pubDate>Mon, 25 Nov 2024 17:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/iterators/</guid>
      <description>데이터 컬렉션의 요소들을 순차적으로 접근할 수 있게 해주는 객체</description>
    </item>
    <item>
      <title>Structural Pattern Matching</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/control-flow/conditionals/structural-pattern-matching/</link>
      <pubDate>Mon, 25 Nov 2024 14:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/control-flow/conditionals/structural-pattern-matching/</guid>
      <description>Python 3.10부터 도입된 **구조적 패턴 매칭(Structural Pattern Matching)** 은 데이터의 구조와 값을 기반으로 코드의 흐름을 제어한다.</description>
    </item>
    <item>
      <title>Classes</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/</link>
      <pubDate>Mon, 25 Nov 2024 12:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/</guid>
      <description>Python의 클래스(class)는 객체 지향 프로그래밍의 핵심 개념으로, 데이터와 그 데이터를 조작하는 메서드를 하나의 단위로 묶는 틀이다.</description>
    </item>
    <item>
      <title>name mangling</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/name-mangling/</link>
      <pubDate>Mon, 25 Nov 2024 09:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/name-mangling/</guid>
      <description>파이썬에서 &amp;#34;name mangling&amp;#34;은 클래스 내부의 속성이나 메서드의 이름을 변경하는 기능이다.  이 기능은 주로 정보 은닉과 캡슐화를 위해 사용된다.</description>
    </item>
    <item>
      <title>Python Super</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/super/</link>
      <pubDate>Mon, 25 Nov 2024 02:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/super/</guid>
      <description>super()는 상속 관계에서 부모 클래스의 메서드를 호출하는 데 사용되는 중요한 도구.</description>
    </item>
    <item>
      <title>Method Resolution Order (MRO)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/method-resolution-order/</link>
      <pubDate>Mon, 25 Nov 2024 01:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/core-features/object-oriented-programming/classes/method-resolution-order/</guid>
      <description>파이썬에서 클래스의 상속 관계에서 메서드를 찾는 순서를 정의하는 규칙</description>
    </item>
    <item>
      <title>Conditionals</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/control-flow/conditionals/</link>
      <pubDate>Sun, 24 Nov 2024 12:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/control-flow/conditionals/</guid>
      <description>Python의 조건문(Conditional Statements)은 프로그램의 흐름을 제어하는 데 사용된다.</description>
    </item>
    <item>
      <title>classmethod and staticmethod</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/core-features/decorators-and-context-managers/decorators/classmethod-and-staticmethod/</link>
      <pubDate>Sun, 24 Nov 2024 12:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/core-features/decorators-and-context-managers/decorators/classmethod-and-staticmethod/</guid>
      <description>Python의 클래스에서 사용되는 두 가지 다른 종류의 메서드 데코레이터</description>
    </item>
    <item>
      <title>Python Keywords</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/syntax-basics/keywords/</link>
      <pubDate>Sun, 24 Nov 2024 10:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/syntax-basics/keywords/</guid>
      <description>파이썬에서 이미 예약되어있는 문자열</description>
    </item>
    <item>
      <title>Generator and Iterator</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/control-flow/generator-and-iterator/</link>
      <pubDate>Sun, 24 Nov 2024 10:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/control-flow/generator-and-iterator/</guid>
      <description>이터레이터는 값을 차례대로 반환하는 객체로, `__iter__()`와 `__next__()` 메서드를 구현한다.  제너레이터는 `yield` 키워드를 사용하여 값을 하나씩 반환하는 함수로, 이터레이터를 생성한다.</description>
    </item>
    <item>
      <title>Python - Generators</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/functions-and-modules/functions/generators/</link>
      <pubDate>Sun, 24 Nov 2024 08:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/functions-and-modules/functions/generators/</guid>
      <description>반복 가능한 객체를 생성하는 강력한 도구</description>
    </item>
    <item>
      <title>내장 데코레이터 (Built-in Decorator)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/core-features/decorators-and-context-managers/decorators/built-in-decorators/</link>
      <pubDate>Sun, 24 Nov 2024 07:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/core-features/decorators-and-context-managers/decorators/built-in-decorators/</guid>
      <description>파이썬에는 다양한 내장 데코레이터가 있으며, 이들은 코드를 최적화하고 기능을 확장하는 데 중요한 역할을 한다.</description>
    </item>
    <item>
      <title>Docstring</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/syntax-basics/comments/docstring/</link>
      <pubDate>Sun, 24 Nov 2024 03:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/syntax-basics/comments/docstring/</guid>
      <description>python에서 함수, 클래스, 모듈에 대한 문서화를 위해 사용되는 문자열</description>
    </item>
    <item>
      <title>연산자(Operators)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/getting-started/syntax-basics/operations/</link>
      <pubDate>Sun, 24 Nov 2024 00:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/getting-started/syntax-basics/operations/</guid>
      <description>연산자는 프로그래밍의 기본적인 구성 요소로, 데이터를 조작하고 계산하는 데 사용된다.</description>
    </item>
  </channel>
</rss>
