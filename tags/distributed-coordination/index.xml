<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Distributed-Coordination on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/tags/distributed-coordination/</link>
    <description>Recent content in Distributed-Coordination on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.149.0</generator>
    <language>en</language>
    <lastBuildDate>Sun, 13 Jul 2025 04:17:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/tags/distributed-coordination/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Distributed Locking</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/distribution-fundamentals/coordination/distributed-locking/</link>
      <pubDate>Sun, 13 Jul 2025 04:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/distribution-fundamentals/coordination/distributed-locking/</guid>
      <description>분산 락킹(Distributed Locking)은 분산 시스템에서 여러 노드가 공유 자원에 동시에 접근하지 못하도록 상호 배제를 보장하는 메커니즘입니다. 데이터 일관성과 무결성을 확보하며, Redlock, ZooKeeper, Etcd 등 다양한 방식으로 구현되고, 리더 선출, 중복 실행 방지, 트랜잭션 제어 등 실무에서 활용됩니다.</description>
    </item>
    <item>
      <title>Distributed Coordination</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/distribution-fundamentals/coordination/</link>
      <pubDate>Mon, 07 Jul 2025 14:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/distribution-fundamentals/coordination/</guid>
      <description>Distributed Coordination 은 다중 노드 환경에서 **합의 (consensus)**, **리더 선출 (leader election)**, **락 (locking)**, **상태 동기화 (state synchronization)** 등을 통해 **일관성과 안정성**을 보장하는 필수 메커니즘으로, Paxos·Raft·2PC 같은 프로토콜을 기반으로 구성된다.</description>
    </item>
  </channel>
</rss>
