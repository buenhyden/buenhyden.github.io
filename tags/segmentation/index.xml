<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Segmentation</title><link>https://buenhyden.github.io/tags/segmentation/</link><description>Recent content in Segmentation on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 16 Jan 2025 08:24:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/tags/segmentation/index.xml" rel="self" type="application/rss+xml"/><item><title>OSI 7 Layers - 4. Transport Layer</title><link>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/osi-7-layers-4-transport-layer/</link><pubDate>Wed, 25 Sep 2024 07:17:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/networking-and-communications/osi-7-layers/osi-7-layers-4-transport-layer/</guid><description>
&lt;h2>Transport Layer(전송 계층)&lt;/h2>&lt;p>전송 계층은 OSI 모델의 4번째 계층으로, 종단 간(end-to-end) 통신을 담당한다.&lt;br>
이 계층은 상위 계층에서 받은 데이터를 세그먼트로 분할하고, 목적지에서 다시 조립하여 신뢰성 있는 데이터 전송을 보장한다.&lt;/p>
&lt;p>전송 계층은 네트워크 통신의 신뢰성과 효율성을 보장하는 중요한 역할을 수행하며, 상위 계층의 애플리케이션에 투명한 데이터 전송 서비스를 제공한다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Networking%20and%20Communications/OSI%207%20Layers/osi_model_transport_layer_4.png"
alt="Transport Layer"
title="Transport Layer"
loading="lazy" />
&lt;/figure> _Source: &lt;a href="https://www.cloudflare.com/ko-kr/learning/ddos/glossary/open-systems-interconnection-model-osi/" target="_blank" rel="noopener">https://www.cloudflare.com/ko-kr/learning/ddos/glossary/open-systems-interconnection-model-osi/&lt;/a> _&lt;/p>
&lt;h3>역할과 기능&lt;/h3>&lt;ol>
&lt;li>세그멘테이션과 재조립: 데이터를 세그먼트로 분할하고 목적지에서 재조립한다.&lt;/li>
&lt;li>연결 제어: 연결 지향적(TCP) 또는 비연결형(UDP) 서비스를 제공한다.&lt;/li>
&lt;li>흐름 제어: 송신자와 수신자 간의 데이터 전송 속도를 조절한다.&lt;/li>
&lt;li>오류 제어: 데이터 전송 중 발생한 오류를 감지하고 수정한다.&lt;/li>
&lt;li>다중화와 역다중화: 여러 애플리케이션의 데이터를 하나의 연결로 전송하고 수신 시 분리한다.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>세그멘테이션 (Segmentation)&lt;/p>
&lt;ul>
&lt;li>상위 계층에서 받은 큰 데이터를 더 작은 단위인 세그먼트로 나누는 과정이다.&lt;/li>
&lt;li>효율적인 오류 처리: 세그먼트 단위로 오류를 처리할 수 있어, 문제가 발생했을 때 해당 세그먼트만 재전송하면 된다.&lt;/li>
&lt;li>네트워크 자원의 효율적 사용: 작은 단위로 나누어 전송함으로써 네트워크 대역폭을 효율적으로 사용할 수 있다.&lt;/li>
&lt;li>다중화(Multiplexing) 가능: 여러 애플리케이션의 데이터를 동시에 전송할 수 있다.&lt;/li>
&lt;li>작동 방식
&lt;ol>
&lt;li>데이터 분할 애플리케이션 계층에서 받은 데이터를 적절한 크기의 세그먼트로 나눈다.&lt;br>
TCP의 경우, Maximum Segment Size(MSS)를 기준으로 데이터를 나눈다.&lt;br>
MSS는 일반적으로 MTU에서 IP와 TCP 헤더 크기를 뺀 값이다.&lt;/li>
&lt;li>순서 번호 할당 각 세그먼트에는 순서 번호(Sequence Number)가 부여된다.&lt;br>
이는 수신측에서 데이터를 올바른 순서로 재조립할 수 있게 해준다.&lt;/li>
&lt;li>헤더 추가 각 세그먼트에는 TCP 또는 UDP 헤더가 추가된다.&lt;br>
TCP 헤더의 경우 다음과 같은 중요한 정보를 포함한다:
&lt;ul>
&lt;li>출발지/목적지 포트 번호&lt;/li>
&lt;li>순서 번호(Sequence Number)&lt;/li>
&lt;li>확인 응답 번호(Acknowledgment Number)&lt;/li>
&lt;li>윈도우 크기&lt;/li>
&lt;li>체크섬&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>세그멘테이션 관련 고려사항
&lt;ol>
&lt;li>세그먼트 크기 선택
&lt;ul>
&lt;li>너무 크면: 재전송 시 비효율적&lt;/li>
&lt;li>너무 작으면: 헤더 오버헤드 증가&lt;/li>
&lt;li>최적의 크기 선택이 중요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>버퍼 관리: 수신측에서 세그먼트를 저장하고 재조립할 수 있는 충분한 버퍼 공간이 필요하다.&lt;/li>
&lt;li>타이밍 관리: 재전송 타이머, 확인 응답 대기 시간 등을 적절히 관리해야 한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>TCP와 UDP의 세그멘테이션 차이
&lt;ul>
&lt;li>TCP와 UDP는 세그멘테이션을 다르게 처리한다.&lt;/li>
&lt;li>TCP의 세그멘테이션:
&lt;ul>
&lt;li>신뢰성 있는 전송을 보장&lt;/li>
&lt;li>순서 보장&lt;/li>
&lt;li>흐름 제어와 혼잡 제어 제공&lt;/li>
&lt;li>세그먼트 손실 시 재전송&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>UDP의 세그멘테이션:
&lt;ul>
&lt;li>단순히 데이터그램으로 나누기만 함&lt;/li>
&lt;li>순서 보장 없음&lt;/li>
&lt;li>신뢰성 보장 없음&lt;/li>
&lt;li>더 빠른 전송 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3>특징&lt;/h3>&lt;ul>
&lt;li>종단 간 통신을 제공한다.&lt;/li>
&lt;li>신뢰성 있는 데이터 전송을 보장한다.&lt;/li>
&lt;li>포트 번호를 사용하여 애플리케이션을 식별한다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>port (포트)&lt;br>
네트워크에서 서로 다른 프로세스들이 통신할 수 있도록 구분해주는 논리적인 접속 위치.&lt;br>
각 포트는 16 비트 숫자로 표현되며, 범위는 0~65535&lt;br>
역할&lt;/p>
&lt;ul>
&lt;li>데이터 트래픽 분류: 포트는 컴퓨터가 받는 네트워크 트래픽을 종류별로 구분하는 데 도움을 준다.&lt;/li>
&lt;li>서비스 식별: 각 포트는 특정 서비스나 애플리케이션과 연결되어 있어, 데이터가 어떤 서비스로 전달되어야 하는 식별&lt;/li>
&lt;li>다중화 (Multiplexing): 하나의 네트워크 연결을 통해 여러 서비스나 애플리케이션이 동시에 통신할 수 있게 됨.&lt;br>
기능&lt;/li>
&lt;li>통신 엔드포인트 제공: 네트워크 상의 특정 서비스나 프로세스와의 통신을 위한 엔드포인트&lt;/li>
&lt;li>데이터 라우팅: 들어오는 데이터를 올바른 애플리케이션이나 서비스로 전달&lt;/li>
&lt;li>프로토콜 구분: 각 포트는 특정 네트워크 프로토콜 (예: HTTP(80), HTTPS(443), FTP(21), SMTP(25)) 과 연관되어 있어 프로토콜 별 통신을 가능하게 함.&lt;/li>
&lt;li>동시 연결 관리: 하나의 IP 주소에서 여러 개의 네트워크 연결을 동시에 관리할 수 있게 한다.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3>데이터 단위와 구조&lt;/h3>&lt;p>데이터 단위: 세그먼트(TCP) 또는 데이터그램(UDP)&lt;br>
기본 구조: 헤더 + 데이터&lt;br>
헤더 필드:&lt;/p>
&lt;ul>
&lt;li>출발지 포트 번호&lt;/li>
&lt;li>목적지 포트 번호&lt;/li>
&lt;li>시퀀스 번호 (TCP)&lt;/li>
&lt;li>확인 응답 번호 (TCP)&lt;/li>
&lt;li>체크섬&lt;/li>
&lt;/ul>
&lt;h3>작동 방식&lt;/h3>&lt;ol>
&lt;li>애플리케이션 계층에서 데이터를 받는다.&lt;/li>
&lt;li>데이터를 세그먼트로 분할한다.&lt;/li>
&lt;li>각 세그먼트에 헤더를 추가한다.&lt;/li>
&lt;li>네트워크 계층으로 세그먼트를 전달한다.&lt;/li>
&lt;li>수신 측에서는 세그먼트를 재조립하여 애플리케이션 계층으로 전달한다.&lt;/li>
&lt;/ol>
&lt;h3>주요 프로토콜&lt;/h3>&lt;ol>
&lt;li>TCP (Transmission Control Protocol):
&lt;ul>
&lt;li>연결 지향적이고 신뢰성 있는 데이터 전송을 제공한다.&lt;/li>
&lt;li>데이터의 순서를 보장하고 손실된 데이터를 재전송한다.&lt;/li>
&lt;li>흐름 제어와 혼잡 제어 제공&lt;/li>
&lt;li>3-way handshake: TCP 연결을 설정하는 과정.
&lt;ol>
&lt;li>SYN: 연결 요청&lt;/li>
&lt;li>SYN-ACK: 요청 승인&lt;/li>
&lt;li>ACK: 연결 설정 완료&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>4-way Handshake: 클라이언트와 서버 간의 연결을 종료하는 과정.
&lt;ol>
&lt;li>FIN (클라이언트 → 서버): 클라이언트가 연결 종료를 요청.&lt;/li>
&lt;li>ACK (서버 → 클라이언트): 서버가 FIN을 받았음을 확인. 클라이언트→서버 방향의 연결이 닫힌다.&lt;/li>
&lt;li>FIN (서버 → 클라이언트): 서버가 모든 데이터 전송을 완료하고 연결 종료를 요청한다.&lt;/li>
&lt;li>ACK (클라이언트 → 서버): 클라이언트가 서버의 FIN을 확인한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>UDP (User Datagram Protocol):
&lt;ul>
&lt;li>비연결형이고 신뢰성이 낮지만 빠른 전송을 제공한다.&lt;/li>
&lt;li>순서나 신뢰성 보장 없음&lt;/li>
&lt;li>실시간 애플리케이션에 적합하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>주의 사항&lt;/h3>&lt;ul>
&lt;li>네트워크 혼잡을 방지하기 위한 적절한 흐름 제어가 필요하다.&lt;/li>
&lt;li>TCP와 UDP의 특성을 이해하고 적절히 선택해야 한다.&lt;/li>
&lt;li>포트 번호 충돌을 피해야 한다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Paging vs Segmentation</title><link>https://buenhyden.github.io/til/2024/12/paging-vs-segmentation/</link><pubDate>Thu, 16 Jan 2025 08:24:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/12/paging-vs-segmentation/</guid><description>
&lt;h2>Paging Vs Segmentation&lt;/h2>&lt;p>Paging과 Segmentation은 운영체제의 메모리 관리 기법이다.&lt;/p>
&lt;p>Paging:&lt;/p>
&lt;ul>
&lt;li>프로세스의 주소 공간을 고정 크기의 페이지로 나누어 관리한다.&lt;/li>
&lt;li>물리적 메모리를 같은 크기의 프레임으로 나눈다.&lt;/li>
&lt;li>외부 단편화 문제를 해결하고 메모리 할당을 단순화한다.&lt;/li>
&lt;/ul>
&lt;p>Segmentation:&lt;/p>
&lt;ul>
&lt;li>프로세스를 논리적 단위인 세그먼트로 나누어 관리한다.&lt;/li>
&lt;li>각 세그먼트의 크기는 가변적이다.&lt;/li>
&lt;li>프로그램의 논리적 구조를 반영하여 메모리를 관리한다.&lt;/li>
&lt;/ul>
&lt;h3>Paging과 Segmentation 비교&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Paging&lt;/th>
&lt;th>Segmentation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>분할 단위&lt;/td>
&lt;td>고정 크기 페이지&lt;/td>
&lt;td>가변 크기 세그먼트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주소 변환&lt;/td>
&lt;td>페이지 테이블 사용&lt;/td>
&lt;td>세그먼트 테이블 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>외부 단편화&lt;/td>
&lt;td>없음&lt;/td>
&lt;td>발생 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>내부 단편화&lt;/td>
&lt;td>발생 가능&lt;/td>
&lt;td>거의 없음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 활용&lt;/td>
&lt;td>효율적&lt;/td>
&lt;td>유연함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡도&lt;/td>
&lt;td>상대적으로 간단&lt;/td>
&lt;td>복잡함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>공유와 보호&lt;/td>
&lt;td>페이지 단위&lt;/td>
&lt;td>세그먼트 단위&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용자 관점&lt;/td>
&lt;td>투명함&lt;/td>
&lt;td>프로그램 구조 반영&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>할당/해제 속도&lt;/td>
&lt;td>빠름&lt;/td>
&lt;td>상대적으로 느림&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테이블 크기&lt;/td>
&lt;td>큼&lt;/td>
&lt;td>작음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>세그먼테이션 (Segmentation)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/segmentation/</link><pubDate>Fri, 20 Dec 2024 13:37:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/segmentation/</guid><description>
&lt;h2>세그먼테이션 (Segmentation)&lt;/h2>&lt;p>세그먼테이션(Segmentation)은 운영체제의 메모리 관리 기법 중 하나로, 프로세스를 논리적 단위인 세그먼트로 나누어 관리하는 방식이다.&lt;/p>
&lt;p>세그먼테이션의 기본 개념을 이해하기 위해, 먼저 프로그램의 구조를 생각해보자.&lt;br>
일반적인 프로그램은 코드 영역, 데이터 영역, 스택 영역 등 서로 다른 목적을 가진 영역들로 구성된다.&lt;br>
세그먼테이션은 이러한 논리적 단위들을 각각의 세그먼트로 관리한다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Memory%20Mgmt/Memory%20Mgmt%20Techniques/ezgifcom-gif-maker-%2816%29.webp"
alt="Sengmenation"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/segmentation-in-operating-system/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/segmentation-in-operating-system/&lt;/a> _&lt;/p>
&lt;h3>세그먼테이션의 주요 구성 요소와 작동 방식&lt;/h3>&lt;ol>
&lt;li>
&lt;p>세그먼트 테이블(Segment Table):&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">SegmentTableEntry&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">base&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 세그먼트의 시작 주소
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">limit&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 세그먼트의 크기
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">present&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 메모리 존재 여부
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 읽기 권한
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">write&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 쓰기 권한
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">execute&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 실행 권한
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="n">protection&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>주소 변환 과정:&lt;br>
논리적 주소는 다음과 같이 구성된다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>논리적 주소 = &amp;lt;세그먼트 번호, 오프셋&amp;gt;
물리적 주소 = 세그먼트 기준 주소 &amp;#43; 오프셋&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>예를 들어, 주소 변환을 수행하는 코드를 다음과 같이 구현할 수 있습니다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">address_translation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">segment_number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 세그먼트 테이블 엔트리 조회&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">segment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">segment_table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">segment_number&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 범위 체크&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">segment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">limit&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="n">SegmentationFault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Offset exceeds segment limit&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 접근 권한 체크&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">segment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">protection&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="n">ProtectionFault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;No read permission&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 물리적 주소 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">physical_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">segment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">base&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">physical_address&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>주요 특징&lt;/h3>&lt;ol>
&lt;li>
&lt;p>가변 크기 분할:&lt;/p>
&lt;ul>
&lt;li>프로세스를 다양한 크기의 세그먼트로 나눈다.&lt;/li>
&lt;li>세그먼트 크기는 프로그램의 논리적 단위(예: 함수, 데이터 테이블)에 따라 결정된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>세그먼트 테이블:&lt;/p>
&lt;ul>
&lt;li>각 세그먼트의 정보를 저장하는 테이블을 사용한다.&lt;/li>
&lt;li>주요 정보: 세그먼트의 기본 주소(base address)와 한계(limit)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>주소 변환:&lt;/p>
&lt;ul>
&lt;li>논리 주소는 세그먼트 번호와 오프셋으로 구성된다.&lt;/li>
&lt;li>세그먼트 테이블을 참조하여 물리 주소로 변환한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>메모리 보호:&lt;/p>
&lt;ul>
&lt;li>세그먼트 단위로 접근 권한을 설정할 수 있어 보안성이 향상된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>공유와 보호:&lt;/p>
&lt;ul>
&lt;li>세그먼트 단위로 프로세스 간 메모리 공유가 가능하다.&lt;/li>
&lt;li>코드 세그먼트 등을 여러 프로세스가 공유할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;/h3>&lt;ol>
&lt;li>사용자 관점에 가까운 메모리 관리&lt;/li>
&lt;li>내부 단편화 감소&lt;/li>
&lt;li>동적 크기 조정 가능&lt;/li>
&lt;li>효율적인 메모리 공유&lt;/li>
&lt;/ol>
&lt;h3>단점&lt;/h3>&lt;ol>
&lt;li>외부 단편화 발생 가능&lt;/li>
&lt;li>세그먼트 테이블 관리 오버헤드&lt;/li>
&lt;li>복잡한 메모리 할당 및 해제 과정&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>