<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hyunyoun&#39;s 개발 블로그 on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/</link>
    <description>Recent content in Hyunyoun&#39;s 개발 블로그 on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 06 Mar 2025 02:16:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode 42. Trapping Rain Water</title>
      <link>https://buenhyden.github.io/coding-test/2025/03/leetcode-42.-trapping-rain-water/</link>
      <pubDate>Sat, 01 Mar 2025 09:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/03/leetcode-42.-trapping-rain-water/</guid>
      <description>높이가 다른 블록들 사이에 고일 수 있는 빗물의 양을 계산하는 문제</description>
    </item>
    <item>
      <title>LeetCode 43. Multiply Strings</title>
      <link>https://buenhyden.github.io/coding-test/2025/03/leetcode-43.-multiply-strings/</link>
      <pubDate>Sat, 01 Mar 2025 09:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/03/leetcode-43.-multiply-strings/</guid>
      <description>두 개의 문자열로 표현된 숫자를 곱하는 문제</description>
    </item>
    <item>
      <title>LeetCode 509. Fibonacci Number</title>
      <link>https://buenhyden.github.io/coding-test/2025/03/leetcode-509.-fibonacci-number/</link>
      <pubDate>Sat, 01 Mar 2025 09:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/03/leetcode-509.-fibonacci-number/</guid>
      <description>피보나치 수열의 n번째 값을 구하는 문제</description>
    </item>
    <item>
      <title>인접 행렬(Adjacency Matrix)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/graph/representation/adjacency-matrix/</link>
      <pubDate>Sat, 07 Dec 2024 03:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/graph/representation/adjacency-matrix/</guid>
      <description>수학적 행렬을 사용하여 그래프의 정점들 간의 연결 관계를 나타낸다.  행렬의 각 원소는 두 정점 사이의 간선 존재 여부나 가중치를 표시한다.</description>
    </item>
    <item>
      <title>Preorder Traversal</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/preorder-traversal/</link>
      <pubDate>Fri, 06 Dec 2024 09:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/preorder-traversal/</guid>
      <description>전위 순회는 트리를 탐색하는 깊이 우선 탐색(Depth-First Search, DFS)의 한 형태로, 재귀적으로 수행되며, 루트 노드부터 시작하여 왼쪽 가지를 따라 깊이 내려간 후 오른쪽 가지로 이동한다. 전위 순회의 이름에서 &amp;#34;전위(Pre)&amp;#34;는 부모 노드를 자식 노드보다 먼저(before) 방문한다는 의미를 담고 있다.</description>
    </item>
    <item>
      <title>Control Structures</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/control-structures/</link>
      <pubDate>Thu, 05 Dec 2024 03:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/control-structures/</guid>
      <description>Control Structures는 프로그램 내에서 실행 흐름을 제어하는 기본적이고 필수적인 구성 요소이다.  이 구조들은 코드의 순차적 실행, 조건에 따른 분기 처리, 그리고 반복문 실행을 통해 프로그램이 동적으로 동작할 수 있도록 돕는다.</description>
    </item>
    <item>
      <title>ECMAScript</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/ecmascript/</link>
      <pubDate>Wed, 04 Dec 2024 17:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/ecmascript/</guid>
      <description>ECMAScript는 자바스크립트의 표준 규격으로, **Ecma International**이 ECMA-262 기술 규격을 통해 정의한 스크립트 프로그래밍 언어이다.</description>
    </item>
    <item>
      <title>Semantic Web</title>
      <link>https://buenhyden.github.io/til/2024/12/04/semantic-web/</link>
      <pubDate>Wed, 04 Dec 2024 12:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/12/04/semantic-web/</guid>
      <description>시맨틱 웹(Semantic Web)은 웹 데이터에 의미를 부여해 기계가 이해하고 처리할 수 있도록 하는 차세대 웹 기술이다.</description>
    </item>
    <item>
      <title>Blockchain</title>
      <link>https://buenhyden.github.io/til/2024/12/04/blockchain/</link>
      <pubDate>Wed, 04 Dec 2024 12:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/12/04/blockchain/</guid>
      <description>블록체인(Blockchain)은 **분산 원장 기술(DLT)** 의 일종으로, 데이터 저장·검증·공유 방식을 혁신한 디지털 혁신 기술이다.</description>
    </item>
    <item>
      <title>Web</title>
      <link>https://buenhyden.github.io/til/2024/12/04/web/</link>
      <pubDate>Wed, 04 Dec 2024 12:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/12/04/web/</guid>
      <description>Web(월드 와이드 웹)은 인터넷을 통해 접근할 수 있는 정보의 거대한 네트워크이다.</description>
    </item>
    <item>
      <title>Infrastructure</title>
      <link>https://buenhyden.github.io/posts/devops/infrastructure/</link>
      <pubDate>Sun, 10 Nov 2024 01:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/infrastructure/</guid>
      <description>Infrastructure(인프라스트럭처)는 조직의 IT 환경을 지원하고 운영하는 데 필요한 기본적인 구성 요소들의 집합이다. 이는 하드웨어, 소프트웨어, 네트워크 리소스 및 서비스를 포함한다.</description>
    </item>
    <item>
      <title>TCPIP 4 Layers vs. OSI 7 Layers</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-vs-osi-7-layers/</link>
      <pubDate>Sat, 19 Oct 2024 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-vs-osi-7-layers/</guid>
      <description>OSI 7계층은 네트워크 통신의 표준 참조 모델이며, TCP/IP 4계층은 이를 바탕으로 구현된 실제 인터넷 통신의 기반이 된다.</description>
    </item>
    <item>
      <title>TCP/IP 4 Layers - 1. Network Access Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-1-network-access-layer/</link>
      <pubDate>Thu, 17 Oct 2024 05:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-1-network-access-layer/</guid>
      <description>데이터를 전송 매체에 맞게 포맷팅하고 물리적 하드웨어 주소를 기반으로 데이터를 주소 지정한다</description>
    </item>
    <item>
      <title>OSI 7 Layers - 1. Phygical Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-1-phygical-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-1-phygical-layer/</guid>
      <description>OSI 7계층의 가장 첫 번째 계층으로, 실제 데이터가 전기 신호나 빛으로 변환되어 전송되는 곳</description>
    </item>
    <item>
      <title>버블 정렬 (Bubble Sort)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/sorting/bubble-sort/</link>
      <pubDate>Tue, 15 Oct 2024 08:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/sorting/bubble-sort/</guid>
      <description>버블 정렬(Bubble Sort)은 인접한 요소를 반복적으로 비교하고 교환하여 정렬하는 간단한 알고리즘이다.</description>
    </item>
    <item>
      <title>Native Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/types/native-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 15:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/types/native-compiler/</guid>
      <description>Native Compiler는 소스 코드를 현재 컴파일러가 실행되고 있는 시스템의 운영체제와 하드웨어 아키텍처에 최적화된 기계어로 변환하는 컴파일러</description>
    </item>
    <item>
      <title>논리값 (Boolean)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/primitive/boolean/</link>
      <pubDate>Mon, 07 Oct 2024 07:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/primitive/boolean/</guid>
      <description>Boolean은 컴퓨터 과학에서 가장 기본적인 데이터 타입 중 하나로, 단 두 가지 값만을 가질 수 있는 논리 데이터 타입이다.</description>
    </item>
    <item>
      <title>Concurrency vs Parallelism</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/concurrency-vs-parallelism/</link>
      <pubDate>Sat, 05 Oct 2024 02:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/concurrency-vs-parallelism/</guid>
      <description>동시성과 병렬성은 모두 여러 작업을 효율적으로 처리하기 위한 방법이지만, 그 접근 방식과 목적이 다르다.  동시성은 작업 관리와 응답성 향상에 중점을 두고, 병렬성은 전체적인 처리 속도 향상에 초점을 맞춘다.</description>
    </item>
    <item>
      <title>클린 코드 (Clean Code)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/clean-code/</link>
      <pubDate>Thu, 19 Sep 2024 05:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/clean-code/</guid>
      <description>프로그램의 동작을 보장하면서도 가독성이 뛰어나고 유지보수가 쉬운 코드</description>
    </item>
    <item>
      <title>LeetCode 14. Longest Common Prefix</title>
      <link>https://buenhyden.github.io/coding-test/2025/03/leetcode-14.-longest-common-prefix/</link>
      <pubDate>Sun, 02 Mar 2025 03:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/03/leetcode-14.-longest-common-prefix/</guid>
      <description>여러 문자열이 주어졌을 때, 가장 긴 공통 접두사를 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 232. Implement Queue using Stacks</title>
      <link>https://buenhyden.github.io/coding-test/2025/03/leetcode-232.-implement-queue-using-stacks/</link>
      <pubDate>Sun, 02 Mar 2025 03:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/03/leetcode-232.-implement-queue-using-stacks/</guid>
      <description>두 개의 스택을 사용하여 큐의 enqueue, dequeue 연산을 구현하는 문제</description>
    </item>
    <item>
      <title>LeetCode 301. Remove Invalid Parentheses</title>
      <link>https://buenhyden.github.io/coding-test/2025/03/leetcode-301.-remove-invalid-parentheses/</link>
      <pubDate>Sun, 02 Mar 2025 03:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/03/leetcode-301.-remove-invalid-parentheses/</guid>
      <description>주어진 괄호 문자열에서 올바른 괄호 표현식을 만들기 위해 최소한의 괄호를 제거하는 문제</description>
    </item>
    <item>
      <title>Javascript vs. Python</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/javascript-vs-python/</link>
      <pubDate>Sun, 22 Dec 2024 04:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/javascript-vs-python/</guid>
      <description>&lt;h2 id=&#34;javascript-vs-python&#34;&gt;Javascript vs. Python&lt;/h2&gt;
&lt;p&gt;JavaScript와 Python은 현대 프로그래밍 세계에서 가장 인기 있는 두 언어이다.&lt;br&gt;
두 언어 모두 높은 수준의 프로그래밍 언어이지만, 설계 철학, 사용 사례, 문법 등에서 중요한 차이점이 있다.&lt;/p&gt;
&lt;p&gt;JavaScript와 Python은 각각 고유한 강점과 약점을 가진 강력한 프로그래밍 언어이다.&lt;br&gt;
JavaScript는 웹 개발에서 독보적인 위치를 차지하고 있으며, 비동기 프로그래밍 모델과 빠른 실행 속도가 특징이다. Python은 가독성이 뛰어나고 데이터 과학, 기계 학습, 자동화 분야에서 뛰어난 라이브러리 지원을 제공한다.&lt;/p&gt;
&lt;h3 id=&#34;역사와-배경&#34;&gt;역사와 배경&lt;/h3&gt;
&lt;h4 id=&#34;javascript&#34;&gt;JavaScript&lt;/h4&gt;
&lt;p&gt;JavaScript는 1995년 Netscape의 Brendan Eich에 의해 웹 브라우저용 스크립팅 언어로 개발되었다.&lt;br&gt;
처음에는 &amp;lsquo;Mocha&amp;rsquo;라고 불렸으며, 나중에 &amp;lsquo;LiveScript&amp;rsquo;로 이름이 바뀌었고, 마지막으로 마케팅 목적으로 &amp;lsquo;JavaScript&amp;rsquo;라는 이름이 되었다 (Java와의 관련성은 거의 없다).&lt;br&gt;
JavaScript는 웹 페이지에 상호작용성을 추가하기 위해 만들어졌으며, 시간이 지남에 따라 Node.js와 같은 플랫폼 덕분에 서버 측 개발로 확장되었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>인접 리스트 (Adjacency List)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/graph/representation/adjacency-list/</link>
      <pubDate>Sat, 07 Dec 2024 03:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/graph/representation/adjacency-list/</guid>
      <description>인접 리스트는 그래프 표현 방법 중 하나로, 각 정점(vertex)에 연결된 인접 정점들을 리스트 형태로 저장하는 방식이다.</description>
    </item>
    <item>
      <title>Inorder Traversal</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/inorder-traversal/</link>
      <pubDate>Fri, 06 Dec 2024 09:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/inorder-traversal/</guid>
      <description>왼쪽 서브트리를 먼저 방문한 후 현재 노드를 방문하고 마지막으로 오른쪽 서브트리를 방문하는 이 방법은 정렬된 데이터가 필요한 다양한 문제에 활용된다.</description>
    </item>
    <item>
      <title>Low-Level Virtual Machine</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/low-level-virtual-machine/</link>
      <pubDate>Thu, 05 Dec 2024 03:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/low-level-virtual-machine/</guid>
      <description>LLVM은 소스 코드를 최적화하고 대상 플랫폼에 맞는 기계어로 변환하는 모듈식 컴파일러 프레임워크</description>
    </item>
    <item>
      <title>Functions</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/functions/</link>
      <pubDate>Thu, 05 Dec 2024 01:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/functions/</guid>
      <description>함수는 프로그래밍의 핵심 구성 요소로, 특정 작업을 수행하는 독립적이고 재사용 가능한 코드 블록이다.</description>
    </item>
    <item>
      <title>분산 원장 기술(Distributed Ledger Technology, DLT)</title>
      <link>https://buenhyden.github.io/til/2024/12/04/distributed-ledger-technology/</link>
      <pubDate>Wed, 04 Dec 2024 07:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/12/04/distributed-ledger-technology/</guid>
      <description>분산 원장 기술(Distributed Ledger Technology, DLT)은 중앙 관리자 없이 네트워크 참여자들이 공동으로 데이터를 기록·검증·관리하는 디지털 시스템이다.</description>
    </item>
    <item>
      <title>Data Pipeline Pattern</title>
      <link>https://buenhyden.github.io/til/2024/11/19/data-pipeline-pattern/</link>
      <pubDate>Tue, 19 Nov 2024 03:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/11/19/data-pipeline-pattern/</guid>
      <description>데이터 파이프라인 패턴은 데이터를 원천에서 목적지로 이동시키는 과정을 자동화하고 최적화하는 아키텍처 패턴이다.</description>
    </item>
    <item>
      <title>TCP/IP 4계층 - 2. Internet Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-2-internet-layer/</link>
      <pubDate>Thu, 17 Oct 2024 05:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-2-internet-layer/</guid>
      <description>인터넷 계층은 TCP/IP 프로토콜 스택에서 네트워크 간의 통신을 담당하는 핵심 계층으로, 네트워크 간 데이터 전송을 담당하며, 데이터 패킷이 출발지에서 목적지까지 효율적으로 전달되도록 라우팅과 주소 지정(Addressing)을 수행한다.</description>
    </item>
    <item>
      <title>OSI 7 Layers - 2. DataLink Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-2-datalink-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-2-datalink-layer/</guid>
      <description>OSI 7계층에서 두 번째 계층으로, 직접 연결된 두 장치 간의 안전한 데이터 전송을 담당</description>
    </item>
    <item>
      <title>선택 정렬 (Selection Sort)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/sorting/selection-sort/</link>
      <pubDate>Tue, 15 Oct 2024 08:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/sorting/selection-sort/</guid>
      <description>선택 정렬(Selection Sort)은 간단한 비교 기반 정렬 알고리즘으로, 작은 데이터 세트에서 효율적이며 메모리 사용이 최소화되는 특징을 갖는다.  전체 배열을 정렬된 부분과 정렬되지 않은 부분으로 나누고, 매번 정렬되지 않은 부분에서 최솟값을 선택해 정렬된 부분의 끝에 배치하는 방식으로 동작한다.</description>
    </item>
    <item>
      <title>Cross Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/types/cross-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 15:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/types/cross-compiler/</guid>
      <description>크로스 컴파일러는 현재 코드를 실행하는 환경(호스트)와는 다른 플랫폼(대상)에서 실행될 수 있는 실행 파일이나 바이너리를 생성하는 컴파일러</description>
    </item>
    <item>
      <title>문자 (Character)과 문자열 (String)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/primitive/character-and-string/</link>
      <pubDate>Mon, 07 Oct 2024 07:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/primitive/character-and-string/</guid>
      <description>문자 (Character)는 단일 문자를 표현하는 데이터 타입이고,문자열 (String)은 문자들의 배열 또는 시퀀스</description>
    </item>
    <item>
      <title>Syncronization Algorithms</title>
      <link>https://buenhyden.github.io/posts/computer-science/syncronization-algorithms/</link>
      <pubDate>Sat, 05 Oct 2024 08:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/syncronization-algorithms/</guid>
      <description>동기화 알고리즘은 병행 시스템에서 상호 배제(Mutual Exclusion)를 보장하기 위한 핵심 메커니즘이다.</description>
    </item>
    <item>
      <title>MVC pattern vs MVVC pattern vs MVP pattern</title>
      <link>https://buenhyden.github.io/til/2024/09/27/mvc-pattern-vs-mvvc-pattern-vs-mvp-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 01:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/27/mvc-pattern-vs-mvvc-pattern-vs-mvp-pattern/</guid>
      <description>MVC, MVP, MVVM 아키텍처 패턴은 모두 **관심사 분리(SoC)** 원칙에 기반하며, 각기 다른 방식으로 UI 로직과 비즈니스 로직을 분리한다.</description>
    </item>
    <item>
      <title>1. 계획 (Planning)</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/1-planning/</link>
      <pubDate>Fri, 20 Sep 2024 00:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/1-planning/</guid>
      <description>프로젝트의 방향성과 범위를 설정하고, 자원과 일정을 계획하며, 위험 요소를 식별하고 관리 전략을 수립한다.</description>
    </item>
    <item>
      <title>LeetCode 329. Longest Increasing Path in a Matrix</title>
      <link>https://buenhyden.github.io/coding-test/2025/03/leetcode-329.-longest-increasing-path-in-a-matrix/</link>
      <pubDate>Mon, 03 Mar 2025 03:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/03/leetcode-329.-longest-increasing-path-in-a-matrix/</guid>
      <description>2D 행렬에서 숫자가 증가하는 경로 중 가장 긴 경로의 길이를 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 819. Most Common Word</title>
      <link>https://buenhyden.github.io/coding-test/2025/03/leetcode-819.-most-common-word/</link>
      <pubDate>Mon, 03 Mar 2025 03:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/03/leetcode-819.-most-common-word/</guid>
      <description>주어진 문장에서 가장 많이 등장하는 단어를 찾는 문제</description>
    </item>
    <item>
      <title>Adjacency Matrix vs Adjacency List</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/graph/representation/adjacency-matrix-vs-adjacency-list/</link>
      <pubDate>Sat, 07 Dec 2024 15:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/graph/representation/adjacency-matrix-vs-adjacency-list/</guid>
      <description>간선이 적은 희소 그래프의 경우 인접 리스트가 메모리와 성능 면에서 우수하며 간선이 많은 밀집 그래프나 정점 간 연결 여부를 빠르게 확인해야 하는 경우에는 인접 행렬이 적합하다.</description>
    </item>
    <item>
      <title>Postorder Traversal</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/postorder-traversal/</link>
      <pubDate>Fri, 06 Dec 2024 09:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/postorder-traversal/</guid>
      <description>후위 순회는 자식 노드를 먼저 방문한 후 부모 노드를 방문하는 트리 순회 방법으로, 상향식 처리가 필요한 다양한 문제 해결에 적합하다.</description>
    </item>
    <item>
      <title>LLVM vs 기존 컴파일러 비교</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/llvm-vs-%EA%B8%B0%EC%A1%B4-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC-%EB%B9%84%EA%B5%90/</link>
      <pubDate>Thu, 05 Dec 2024 07:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/llvm-vs-%EA%B8%B0%EC%A1%B4-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC-%EB%B9%84%EA%B5%90/</guid>
      <description>LLVM은 현대 컴파일러 인프라스트럭처의 중요한 혁신으로, 모듈화된 설계, 강력한 최적화 기능, 다양한 언어와 타겟 지원을 통해 소프트웨어 개발 환경을 크게 발전시켰다.  전통적인 컴파일러와 비교할 때, LLVM은 재사용성, 확장성, 개발자 친화적 도구 측면에서 큰 강점을 가지고 있다.</description>
    </item>
    <item>
      <title>Service Worker</title>
      <link>https://buenhyden.github.io/posts/frontend/web-browser/service-worker/</link>
      <pubDate>Tue, 03 Dec 2024 05:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/frontend/web-browser/service-worker/</guid>
      <description>Service Worker는 웹 애플리케이션의 성능과 사용자 경험을 혁신적으로 개선하는 백그라운드 스크립트 기술이다.</description>
    </item>
    <item>
      <title>CSR vs SSR</title>
      <link>https://buenhyden.github.io/posts/frontend/csr-vs-ssr/</link>
      <pubDate>Mon, 02 Dec 2024 12:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/frontend/csr-vs-ssr/</guid>
      <description>Client Side Rendering (CSR)은 브라우저에서 JavaScript를 실행하여 콘텐츠를 렌더링하며, Server Side Rendering (SSR)은 서버에서 HTML을 생성하여 클라이언트에 전달한다.</description>
    </item>
    <item>
      <title>라이브러리 (Library)와 프레임워크 (Framework)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/library-and-framework/</link>
      <pubDate>Wed, 20 Nov 2024 06:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/library-and-framework/</guid>
      <description>라이브러리(Library)는 특정 기능을 수행하는 코드의 모음이고, 프레임워크(Framework)는 애플리케이션 개발의 기본 구조를 제공한다.</description>
    </item>
    <item>
      <title>TCP/IP 4계층 - 3. Transport Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-3-transport-layer/</link>
      <pubDate>Thu, 17 Oct 2024 05:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-3-transport-layer/</guid>
      <description>전송 계층은 서로 다른 호스트에서 동작하는 애플리케이션 프로세스 간의 논리적 통신을 제공한다.</description>
    </item>
    <item>
      <title>삽입 정렬 (Insertion Sort)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/sorting/insertion-sort/</link>
      <pubDate>Tue, 15 Oct 2024 08:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/sorting/insertion-sort/</guid>
      <description>삽입 정렬(Insertion Sort)은 배열을 정렬된 부분과 정렬되지 않은 부분으로 나누어, 정렬되지 않은 부분의 요소를 하나씩 가져와 정렬된 부분의 적절한 위치에 삽입하는 방식으로 동작하는 정렬 알고리즘이다.</description>
    </item>
    <item>
      <title>Ahead-of-Time Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/types/ahead-of-time-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 18:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/types/ahead-of-time-compiler/</guid>
      <description>**Ahead-of-Time(AOT) 컴파일러**는 프로그램 실행 전에 소스 코드나 중간 언어(예: 바이트코드)를 **네이티브 머신 코드로 미리 변환**하는 기술</description>
    </item>
    <item>
      <title>Callback Hell</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/callback-hell/</link>
      <pubDate>Wed, 09 Oct 2024 05:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/callback-hell/</guid>
      <description>콜백 지옥(Callback Hell)은 JavaScript 등의 비동기 프로그래밍 환경에서 중첩된 콜백 함수가 과도하게 사용되어 코드의 가독성과 유지보수성을 크게 저하시키는 현상을 의미한다.</description>
    </item>
    <item>
      <title>정수(Integer)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/primitive/integer/</link>
      <pubDate>Mon, 07 Oct 2024 07:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/primitive/integer/</guid>
      <description>정수(Integer)는 소수점이 없는 양수, 음수, 0을 표현하는 데이터 타입으로, 컴퓨터에서는 이진수로 표현되며, 일정 범위의 정수를 표현할 수 있다.</description>
    </item>
    <item>
      <title>Programming Language Control Structures</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/programming-language-control-structures/</link>
      <pubDate>Sun, 06 Oct 2024 11:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/programming-language-control-structures/</guid>
      <description>프로그래밍에서 코드의 실행 흐름을 제어하는 핵심적인 구문이다.</description>
    </item>
    <item>
      <title>사이트 신뢰성 엔지니어링 (Site Reliability Engineering, SRE)</title>
      <link>https://buenhyden.github.io/posts/devops/sre/</link>
      <pubDate>Sat, 28 Sep 2024 09:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/sre/</guid>
      <description>IT 운영에 대한 소프트웨어 엔지니어링 접근 방식</description>
    </item>
    <item>
      <title>2. 요구사항 수집 및 분석 (Requirements Gathering and Analysis)</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/2-requirements-gathering-and-analysis/</link>
      <pubDate>Fri, 20 Sep 2024 00:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/2-requirements-gathering-and-analysis/</guid>
      <description>이해관계자의 요구사항을 수집하고 분석하여 시스템 요구사항을 정의하는 단계</description>
    </item>
    <item>
      <title>LeetCode 76. Minimum Window Substring</title>
      <link>https://buenhyden.github.io/coding-test/2025/03/leetcode-76.-minimum-window-substring/</link>
      <pubDate>Tue, 04 Mar 2025 00:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/03/leetcode-76.-minimum-window-substring/</guid>
      <description>문자열 s에서 문자열 t의 모든 문자를 포함하는 가장 작은 부분 문자열을 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 21. Merge Two Sorted Lists</title>
      <link>https://buenhyden.github.io/coding-test/2025/03/leetcode-21.-merge-two-sorted-lists/</link>
      <pubDate>Tue, 04 Mar 2025 00:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/03/leetcode-21.-merge-two-sorted-lists/</guid>
      <description>두 개의 정렬된 연결 리스트를 하나의 정렬된 리스트로 병합하는 문제</description>
    </item>
    <item>
      <title>LeetCode 287. Find the Duplicate Number</title>
      <link>https://buenhyden.github.io/coding-test/2025/03/leetcode-287.-find-the-duplicate-number/</link>
      <pubDate>Tue, 04 Mar 2025 00:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/03/leetcode-287.-find-the-duplicate-number/</guid>
      <description>길이가 𝑛&#43;1인 배열에서 1부터 𝑛까지의 숫자가 하나씩 포함되며, 단 하나의 숫자가 중복</description>
    </item>
    <item>
      <title>Edge List</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/graph/representation/edge-list/</link>
      <pubDate>Sat, 07 Dec 2024 14:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/graph/representation/edge-list/</guid>
      <description>&lt;h2 id=&#34;edge-list&#34;&gt;Edge List&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Level Order Traversal</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/level-order-traversal/</link>
      <pubDate>Fri, 06 Dec 2024 09:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/level-order-traversal/</guid>
      <description>레벨 순서 순회(Level Order Traversal)는 트리의 각 레벨을 위에서 아래로, 각 레벨 내에서는 왼쪽에서 오른쪽으로 노드를 방문하는 방식이다.</description>
    </item>
    <item>
      <title>Compiler vs Interpreter vs Assembler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler-vs-interpreter-vs-assembler/</link>
      <pubDate>Thu, 05 Dec 2024 03:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler-vs-interpreter-vs-assembler/</guid>
      <description>컴파일러, 인터프리터, 어셈블러는 소스 코드를 기계가 이해할 수 있는 형태로 변환하는 서로 다른 언어 처리 도구이다.</description>
    </item>
    <item>
      <title>의사코드(Pseudocode)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/pseudo-code/</link>
      <pubDate>Thu, 05 Dec 2024 01:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/pseudo-code/</guid>
      <description>의사코드(Pseudocode)는 알고리즘을 설명하기 위한 비공식적이고 고수준의 표현 방식으로, 특정 프로그래밍 언어의 문법에 얽매이지 않고 간단한 텍스트 형태로 작성된다.</description>
    </item>
    <item>
      <title>MSA 패턴 유형별 비교</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/msa-%ED%8C%A8%ED%84%B4-%EC%9C%A0%ED%98%95%EB%B3%84-%EB%B9%84%EA%B5%90/</link>
      <pubDate>Tue, 19 Nov 2024 02:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/msa-%ED%8C%A8%ED%84%B4-%EC%9C%A0%ED%98%95%EB%B3%84-%EB%B9%84%EA%B5%90/</guid>
      <description>MSA의 주요 패턴 유형들을 체계적으로 정리한 것.</description>
    </item>
    <item>
      <title>TCP/IP 4계층 - 4. Application Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-4-application-layer/</link>
      <pubDate>Thu, 17 Oct 2024 05:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/tcp-ip-4layers/tcpip-4-layers-4-application-layer/</guid>
      <description>TCP/IP 프로토콜 스택에서 가장 상위 계층으로, 사용자와 가장 가까운 계층으로 이메일, 웹 서핑, 파일 전송 등의 서비스를 위한 프로토콜들이 모여 있는 계층이다.</description>
    </item>
    <item>
      <title>OSI 7 Layers - 4. Transport Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-4-transport-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-4-transport-layer/</guid>
      <description>4번째 계층으로, 데이터 전송의 신뢰성과 효율성을 담당하는 중요한 역할을 한다</description>
    </item>
    <item>
      <title>병합 정렬 (Merge Sort)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/sorting/merge-sort/</link>
      <pubDate>Tue, 15 Oct 2024 08:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/sorting/merge-sort/</guid>
      <description>병합 정렬(Merge Sort)은 분할 정복(divide and conquer) 방식을 사용하는 비교 기반 정렬 알고리즘이다.</description>
    </item>
    <item>
      <title>Just-In-Time (JIT) Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/types/just-in-time-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 17:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/types/just-in-time-compiler/</guid>
      <description>**JIT(Just-In-Time) 컴파일**은 프로그램 실행 시점에 코드를 기계어로 변환하는 기술로, **인터프리터의 유연성**과 **컴파일러의 성능**을 결합한 혁신적인 방식</description>
    </item>
    <item>
      <title>Native Compiler vs Cross Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/native-compiler-vs-cross-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 03:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/native-compiler-vs-cross-compiler/</guid>
      <description>Native Compiler와 Cross Compiler는 모두 프로그래밍 언어로 작성된 소스 코드를 기계어 또는 실행 가능한 바이너리로 변환하는 컴파일 도구이지만, 그들이 생성하는 산출물이 실행되는 대상이 서로 다르다는 점에서 구분된다.</description>
    </item>
    <item>
      <title>부동 소수점 (Float)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/primitive/float/</link>
      <pubDate>Mon, 07 Oct 2024 07:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/primitive/float/</guid>
      <description>부동 소수점은 실수를 (부호) × (가수) × (밑수)^(지수) 형태로 표현하는 방식이다.</description>
    </item>
    <item>
      <title>3. 설계 (Design)</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/3-design/</link>
      <pubDate>Fri, 20 Sep 2024 00:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/3-design/</guid>
      <description>요구사항을 바탕으로 시스템의 구조와 세부 사항을 설계하는 단계</description>
    </item>
    <item>
      <title>LeetCode 1027. Longest Arithmetic Subsequence</title>
      <link>https://buenhyden.github.io/coding-test/2025/03/leetcode-1027.-longest-arithmetic-subsequence/</link>
      <pubDate>Wed, 05 Mar 2025 09:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/03/leetcode-1027.-longest-arithmetic-subsequence/</guid>
      <description>주어진 배열에서 등차수열을 이루는 가장 긴 부분 수열의 길이를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 84. Largest Rectangle in Histogram</title>
      <link>https://buenhyden.github.io/coding-test/2025/03/leetcode-84.-largest-rectangle-in-histogram/</link>
      <pubDate>Wed, 05 Mar 2025 09:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/03/leetcode-84.-largest-rectangle-in-histogram/</guid>
      <description>히스토그램이 주어졌을 때, 만들 수 있는 가장 큰 직사각형의 넓이를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 191. Number of 1 Bits</title>
      <link>https://buenhyden.github.io/coding-test/2025/03/leetcode-191.-number-of-1-bits/</link>
      <pubDate>Wed, 05 Mar 2025 09:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/03/leetcode-191.-number-of-1-bits/</guid>
      <description>주어진 정수를 2진수로 변환했을 때, 1의 개수를 세는 문제</description>
    </item>
    <item>
      <title>Traversal 방법 비교</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/traversal-%EB%B0%A9%EB%B2%95-%EB%B9%84%EA%B5%90/</link>
      <pubDate>Fri, 06 Dec 2024 11:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/traversal-%EB%B0%A9%EB%B2%95-%EB%B9%84%EA%B5%90/</guid>
      <description>트리 순회(Tree Traversal)는 트리의 노드를 방문하는 방법으로, 트리 구조에서 데이터를 검색하고 처리하는 기본 개념이다.</description>
    </item>
    <item>
      <title>Runtime</title>
      <link>https://buenhyden.github.io/posts/computer-science/fundamentals/runtime/</link>
      <pubDate>Thu, 05 Dec 2024 04:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/fundamentals/runtime/</guid>
      <description>컴퓨터 과학에서 **런타임(runtime)** 은 프로그램이 실제로 실행되는 기간과 그 실행 환경 전체를 의미한다.</description>
    </item>
    <item>
      <title>OSI 7 Layers - 5. Session Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-5-session-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-5-session-layer/</guid>
      <description>세션 계층은 OSI 모델의 5번째 계층으로, 통신 세션을 구성하는 계층으로 응용 프로그램 간의 대화를 유지하기 위한 구조를 제공하고, 프로세스들의 논리적인 연결을 담당한다.</description>
    </item>
    <item>
      <title>퀵 정렬 (Quick Sort)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/sorting/quick-sort/</link>
      <pubDate>Tue, 15 Oct 2024 08:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/sorting/quick-sort/</guid>
      <description>퀵 정렬(Quick Sort)은 분할 정복(divide and conquer) 전략을 사용하는 고성능 정렬 알고리즘이다.</description>
    </item>
    <item>
      <title>JIT Compiler vs AOT Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/jit-compiler-vs-aot-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 18:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/compiler/jit-compiler-vs-aot-compiler/</guid>
      <description>JIT 컴파일러와 AOT 컴파일러는 모두 소스 코드 또는 중간 표현(바이트코드)을 기계어 코드로 변환한다는 공통점을 가지지만, 언제 그리고 어떻게 컴파일하는지에 큰 차이가 있다</description>
    </item>
    <item>
      <title>AOT Vs JIT Vs Interpreter</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/aot-vs-jit-vs-interpreter/</link>
      <pubDate>Mon, 14 Oct 2024 00:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-processor/aot-vs-jit-vs-interpreter/</guid>
      <description>AOT, JIT, 그리고 인터프리터는 모두 소스 코드를 실행 가능한 형태로 변환하는 언어 처리 방식이지만, 언제 어떻게 변환이 이루어지는지에 따라 큰 차이가 있다.</description>
    </item>
    <item>
      <title>4. 구현 (Implementation)</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/4-implementation/</link>
      <pubDate>Fri, 20 Sep 2024 00:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/4-implementation/</guid>
      <description>설계를 바탕으로 실제 코드를 작성하는 단계</description>
    </item>
    <item>
      <title>LeetCode 120. Triangle</title>
      <link>https://buenhyden.github.io/coding-test/2025/03/leetcode-120.-triangle/</link>
      <pubDate>Thu, 06 Mar 2025 00:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/03/leetcode-120.-triangle/</guid>
      <description>삼각형 형태의 배열에서 꼭대기부터 바닥까지 이동하며 최소 합을 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 1837. Sum of Digits in Base K</title>
      <link>https://buenhyden.github.io/coding-test/2025/03/leetcode-1837.-sum-of-digits-in-base-k/</link>
      <pubDate>Thu, 06 Mar 2025 00:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/03/leetcode-1837.-sum-of-digits-in-base-k/</guid>
      <description>숫자를 주어진 K진법으로 변환한 후, 각 자리 숫자의 합을 구하는 문제</description>
    </item>
    <item>
      <title>Morris Traversal</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/morris-traversal/</link>
      <pubDate>Sun, 08 Dec 2024 13:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/morris-traversal/</guid>
      <description>&lt;h2 id=&#34;morris-traversal&#34;&gt;Morris Traversal&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>OSI 7 Layers - 6. Presentation Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-6-presentation-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-6-presentation-layer/</guid>
      <description>OSI 7계층 모델에서 6번째 계층으로, 데이터의 표현과 암호화를 담당하는 중요한 역할을 한다.</description>
    </item>
    <item>
      <title>힙 정렬 (Heap Sort)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/sorting/heap-sort/</link>
      <pubDate>Tue, 15 Oct 2024 08:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/sorting/heap-sort/</guid>
      <description>힙 정렬(Heap Sort)은 이진 힙(binary heap) 자료 구조를 활용한 비교 기반 정렬 알고리즘이다.</description>
    </item>
    <item>
      <title>Concurrent Hash Map vs Hash Map vs Hash Table</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/concurrent-data-structures/concurrent-hash-map-vs-hash-map-vs-hash-table/</link>
      <pubDate>Sat, 12 Oct 2024 14:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/concurrent-data-structures/concurrent-hash-map-vs-hash-map-vs-hash-table/</guid>
      <description>&lt;h2 id=&#34;concurrent-hash-map-vs-hash-map-vs-hash-table&#34;&gt;Concurrent Hash Map Vs Hash Map Vs Hash Table&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;특성&lt;/th&gt;
          &lt;th&gt;Concurrent HashMap&lt;/th&gt;
          &lt;th&gt;HashMap&lt;/th&gt;
          &lt;th&gt;HashTable&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;동기화&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;세그먼트/버킷 단위의 부분 동기화 지원&lt;/td&gt;
          &lt;td&gt;동기화 지원하지 않음&lt;/td&gt;
          &lt;td&gt;메서드 단위의 전체 동기화 지원&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;동시성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;높은 동시성 지원 (여러 스레드가 동시에 다른 세그먼트에 접근 가능)&lt;/td&gt;
          &lt;td&gt;동시성 지원하지 않음 (단일 스레드 환경용)&lt;/td&gt;
          &lt;td&gt;낮은 동시성 (한 번에 하나의 스레드만 접근 가능)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;성능&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;동시 접근 시 높은 성능&lt;/td&gt;
          &lt;td&gt;단일 스레드에서 가장 높은 성능&lt;/td&gt;
          &lt;td&gt;동기화로 인한 성능 저하&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;null 허용&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;key와 value 모두 null 불가&lt;/td&gt;
          &lt;td&gt;key는 하나만 null 허용, value는 여러 개 null 허용&lt;/td&gt;
          &lt;td&gt;key와 value 모두 null 불가&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;초기 용량&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;기본 16, 세그먼트 수는 16&lt;/td&gt;
          &lt;td&gt;기본 16&lt;/td&gt;
          &lt;td&gt;기본 11&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;적재율&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;기본 0.75&lt;/td&gt;
          &lt;td&gt;기본 0.75&lt;/td&gt;
          &lt;td&gt;기본 0.75&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;이터레이션&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;fail-safe 이터레이터 제공&lt;/td&gt;
          &lt;td&gt;fail-fast 이터레이터 제공&lt;/td&gt;
          &lt;td&gt;fail-fast 이터레이터 제공&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;생성 시기&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Java 5&lt;/td&gt;
          &lt;td&gt;Java 1.2&lt;/td&gt;
          &lt;td&gt;Java 1.0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;메모리 사용&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;세그먼트로 인한 추가 메모리 필요&lt;/td&gt;
          &lt;td&gt;가장 적은 메모리 사용&lt;/td&gt;
          &lt;td&gt;동기화로 인한 추가 메모리 필요&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;용도&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;멀티스레드 환경의 동시성이 필요한 경우&lt;/td&gt;
          &lt;td&gt;단일 스레드 환경의 일반적인 경우&lt;/td&gt;
          &lt;td&gt;레거시 코드 호환성이 필요한 경우&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;확장성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;동적 확장 가능&lt;/td&gt;
          &lt;td&gt;동적 확장 가능&lt;/td&gt;
          &lt;td&gt;동적 확장 가능&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;순서 보장&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;삽입 순서 보장하지 않음&lt;/td&gt;
          &lt;td&gt;삽입 순서 보장하지 않음&lt;/td&gt;
          &lt;td&gt;삽입 순서 보장하지 않음&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;동기화 비용&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;부분적 동기화로 중간 수준의 비용&lt;/td&gt;
          &lt;td&gt;동기화 비용 없음&lt;/td&gt;
          &lt;td&gt;전체 동기화로 높은 비용&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;스레드 안전성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;스레드 안전&lt;/td&gt;
          &lt;td&gt;스레드 안전하지 않음&lt;/td&gt;
          &lt;td&gt;스레드 안전&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;키 충돌 처리&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;체이닝 방식&lt;/td&gt;
          &lt;td&gt;체이닝 방식&lt;/td&gt;
          &lt;td&gt;체이닝 방식&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;참고로 몇 가지 중요한 추가 설명을 하자면:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linear Data Structure vs Non-Linear Data Structure</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/linear-data-structure-vs-non-linear-data-structure/</link>
      <pubDate>Sat, 12 Oct 2024 11:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/linear-data-structure-vs-non-linear-data-structure/</guid>
      <description>Linear Data Structure Vs Non-Linear Data Structure</description>
    </item>
    <item>
      <title>Primitive data structure vs Non-Primitive data structure</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/primitive-data-structure-vs-non-primitive-data-structure/</link>
      <pubDate>Sat, 12 Oct 2024 08:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/primitive-data-structure-vs-non-primitive-data-structure/</guid>
      <description>Primitive data structure는 프로그래밍 언어에 내장된 가장 단순하고 기본적인 데이터 타입이며, Non-primitive data structure(비원시 자료구조)는 원시 자료형을 기반으로 만들어진 더 복잡하고 고급화된 자료구조를 의미한다.</description>
    </item>
    <item>
      <title>5. 테스트 (Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/5-testing/</link>
      <pubDate>Fri, 20 Sep 2024 00:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/5-testing/</guid>
      <description>개발된 소프트웨어의 품질을 검증하고 결함을 식별하는 단계</description>
    </item>
    <item>
      <title>OSI 7 Layers - 7. Application Layer</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-7-application-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/osi-7-layers-7-application-layer/</guid>
      <description>OSI 7계층 모델에서 최상위 계층으로, 사용자와 네트워크 간의 직접적인 상호작용을 담당한다</description>
    </item>
    <item>
      <title>6. 배포 (Deployment)</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/6-deployment/</link>
      <pubDate>Fri, 20 Sep 2024 00:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/6-deployment/</guid>
      <description>완성된 소프트웨어를 실제 운영 환경에 설치하고 사용자에게 제공하는 단계</description>
    </item>
    <item>
      <title>Websocket vs WebRTC</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/websocket-vs-webrtc/</link>
      <pubDate>Sat, 19 Oct 2024 05:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/websocket-vs-webrtc/</guid>
      <description>WebSocket과 WebRTC는 실시간 웹 통신을 위한 중요한 기술</description>
    </item>
    <item>
      <title>Suffix Array vs Suffix Tree vs Trie</title>
      <link>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/data-structures/suffix-array-vs-suffix-tree-vs-trie/</link>
      <pubDate>Sat, 12 Oct 2024 15:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/data-structures/suffix-array-vs-suffix-tree-vs-trie/</guid>
      <description>Suffix Array, Suffix Tree, 그리고 Trie는 모두 문자열 처리와 패턴 매칭을 위한 데이터 구조로, 각각 고유한 특성과 용도를 가지고 있다.</description>
    </item>
    <item>
      <title>Segment Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/advanced/segment-tree/</link>
      <pubDate>Fri, 11 Oct 2024 12:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/advanced/segment-tree/</guid>
      <description>세그먼트 트리는 배열의 특정 구간에 대한 정보를 빠르게 구할 수 있도록 설계된 이진 트리 기반의 자료구조</description>
    </item>
    <item>
      <title>7. 유지보수 (Maintenance)</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/7-maintenance/</link>
      <pubDate>Fri, 20 Sep 2024 00:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/7-maintenance/</guid>
      <description>배포된 소프트웨어를 지속적으로 관리하고 개선하는 단계</description>
    </item>
    <item>
      <title>Json (JavaScript Object Notation)</title>
      <link>https://buenhyden.github.io/posts/data/format/json/</link>
      <pubDate>Sat, 26 Oct 2024 11:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data/format/json/</guid>
      <description>Javascript 객체 문법으로 구조화된 데이터를 표현하기 위한 문자 기반의 표준 포맷.</description>
    </item>
    <item>
      <title>TOML (Tom&#39;s Obvious Minimal Language)</title>
      <link>https://buenhyden.github.io/posts/data/format/toml/</link>
      <pubDate>Sat, 26 Oct 2024 11:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data/format/toml/</guid>
      <description>서로 다른 시스템이나 프로그램 간에 데이터를 주고받을 때 사용하는 표준화된 형식</description>
    </item>
    <item>
      <title>YAML (YAML Ain&#39;t Markup Language)</title>
      <link>https://buenhyden.github.io/posts/data/format/yaml/</link>
      <pubDate>Sat, 26 Oct 2024 11:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data/format/yaml/</guid>
      <description>서로 다른 시스템이나 프로그램 간에 데이터를 주고받을 때 사용하는 표준화된 형식</description>
    </item>
    <item>
      <title>데이터 교환 형식</title>
      <link>https://buenhyden.github.io/posts/data/format/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%90%ED%99%98-%ED%98%95%EC%8B%9D/</link>
      <pubDate>Sat, 26 Oct 2024 11:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data/format/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%90%ED%99%98-%ED%98%95%EC%8B%9D/</guid>
      <description>서로 다른 시스템이나 프로그램 간에 데이터를 주고받을 때 사용하는 표준화된 형식</description>
    </item>
    <item>
      <title>Encoding and Decoding</title>
      <link>https://buenhyden.github.io/posts/data/encoding-and-decoding/</link>
      <pubDate>Sat, 26 Oct 2024 07:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data/encoding-and-decoding/</guid>
      <description>인코딩(Encoding)은 데이터를 특정 형식으로 변환하는 과정이고, 디코딩(Decoding)은 인코딩의 반대 과정으로, 변환된 데이터를 원래의 형식으로 되돌리는 과정</description>
    </item>
    <item>
      <title>Blocking vs Non-Blocking</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/blocking-vs-non-blocking/</link>
      <pubDate>Sun, 06 Oct 2024 12:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/blocking-vs-non-blocking/</guid>
      <description>프로그래밍에서 작업 처리 방식에 따라 프로그램의 실행 흐름이 어떻게 영향을 받는지를 설명하는 개념.</description>
    </item>
    <item>
      <title>Memoization vs Tabulation</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/dynamic-programming/memoization-vs-tabulation/</link>
      <pubDate>Sun, 13 Oct 2024 11:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/dynamic-programming/memoization-vs-tabulation/</guid>
      <description>Memoization과 Tabulation은 동적 프로그래밍(Dynamic Programming)에서 사용되는 두 가지 주요 최적화 기법</description>
    </item>
    <item>
      <title>Iteration vs Recursion</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/iteration-vs-recursion/</link>
      <pubDate>Sun, 06 Oct 2024 11:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/iteration-vs-recursion/</guid>
      <description>Iteration과 Recursion은 프로그래밍에서 반복적인 작업을 수행하는 두 가지 주요 방식이다.</description>
    </item>
    <item>
      <title>Interface vs Abstract class</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/interface-vs-abstract-class/</link>
      <pubDate>Sun, 22 Sep 2024 05:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/interface-vs-abstract-class/</guid>
      <description>인터페이스는 클래스가 &amp;#39;무엇을 해야 하는지&amp;#39;를 정의하는 계약(contract)과 같은 역할을 하며, 추상 클래스(Abstract Class)는 하나 이상의 추상 메서드를 포함하는 클래스이다.</description>
    </item>
    <item>
      <title>LeetCode 1248. Count Number of Nice Subarrays</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-1248.-count-number-of-nice-subarrays/</link>
      <pubDate>Fri, 14 Feb 2025 05:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-1248.-count-number-of-nice-subarrays/</guid>
      <description>배열에서 홀수 개수가 정확히 K개인 부분 배열의 개수를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 1654. Minimum Jumps to Reach Home</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-1654.-minimum-jumps-to-reach-home/</link>
      <pubDate>Fri, 14 Feb 2025 05:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-1654.-minimum-jumps-to-reach-home/</guid>
      <description>특정 위치에서 점프하여 목표 지점에 도달하는 최소 점프 횟수를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 3. Longest Substring Without Repeating Characters</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-3.-longest-substring-without-repeating-characters/</link>
      <pubDate>Fri, 14 Feb 2025 05:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-3.-longest-substring-without-repeating-characters/</guid>
      <description>문자열에서 중복 문자가 없는 가장 긴 부분 문자열의 길이를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 242. Valid Anagram</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-242.-valid-anagram/</link>
      <pubDate>Fri, 14 Feb 2025 05:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-242.-valid-anagram/</guid>
      <description>두 단어가 애너그램(서로 다른 순서로 구성된 동일한 문자 집합)인지 확인하는 문제</description>
    </item>
    <item>
      <title>LeetCode 754. Reach a Number</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-754.-reach-a-number/</link>
      <pubDate>Fri, 14 Feb 2025 05:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-754.-reach-a-number/</guid>
      <description>1씩 증가하는 숫자를 더하거나 빼서 목표 숫자를 만드는 최소 횟수를 구하는 문제</description>
    </item>
    <item>
      <title>Baekjoon 1753. 최단경로</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/baekjoon-1753.-%EC%B5%9C%EB%8B%A8%EA%B2%BD%EB%A1%9C/</link>
      <pubDate>Thu, 13 Feb 2025 05:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/baekjoon-1753.-%EC%B5%9C%EB%8B%A8%EA%B2%BD%EB%A1%9C/</guid>
      <description>여러 도로가 연결된 네트워크에서 특정 출발점에서 다른 모든 지점까지의 최단 거리를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 153. Find Minimum in Rotated Sorted Array</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-153.-find-minimum-in-rotated-sorted-array/</link>
      <pubDate>Thu, 13 Feb 2025 05:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-153.-find-minimum-in-rotated-sorted-array/</guid>
      <description>정렬된 배열이 회전되었을 때, 최솟값을 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 52. N-Queens II</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-52.-n-queens-ii/</link>
      <pubDate>Thu, 13 Feb 2025 05:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-52.-n-queens-ii/</guid>
      <description>N×N 체스판에 𝑁개의 퀸을 배치하는 문제</description>
    </item>
    <item>
      <title>LeetCode 349. Intersection of Two Arrays</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-349.-intersection-of-two-arrays/</link>
      <pubDate>Thu, 13 Feb 2025 05:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-349.-intersection-of-two-arrays/</guid>
      <description>두 배열에서 공통으로 등장하는 원소를 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 1135. Connecting Cities With Minimum Cost</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-1135.-connecting-cities-with-minimum-cost/</link>
      <pubDate>Wed, 12 Feb 2025 05:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-1135.-connecting-cities-with-minimum-cost/</guid>
      <description>모든 노드를 연결하는 최소 비용을 찾는 문제</description>
    </item>
    <item>
      <title>Baekjoon 1934. 최소공배수</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/baekjoon-1934.-%EC%B5%9C%EC%86%8C%EA%B3%B5%EB%B0%B0%EC%88%98/</link>
      <pubDate>Wed, 12 Feb 2025 05:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/baekjoon-1934.-%EC%B5%9C%EC%86%8C%EA%B3%B5%EB%B0%B0%EC%88%98/</guid>
      <description>두 수의 최소 공배수를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 151. Reverse Words in a String</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-151.-reverse-words-in-a-string/</link>
      <pubDate>Wed, 12 Feb 2025 05:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-151.-reverse-words-in-a-string/</guid>
      <description>문자열 내 단어의 순서를 뒤집는 문제</description>
    </item>
    <item>
      <title>LeetCode 121. Best Time to Buy and Sell Stock</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-121.-best-time-to-buy-and-sell-stock/</link>
      <pubDate>Tue, 11 Feb 2025 05:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-121.-best-time-to-buy-and-sell-stock/</guid>
      <description>하루에 한 번만 주식을 사고팔 때 최대 이익을 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 51. N-Queens</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-51.-n-queens/</link>
      <pubDate>Tue, 11 Feb 2025 05:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-51.-n-queens/</guid>
      <description>N×N 체스판에 서로 공격하지 않도록 𝑁개의 퀸을 배치하는 문제</description>
    </item>
    <item>
      <title>LeetCode 64. Minimum Path Sum</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-64.-minimum-path-sum/</link>
      <pubDate>Tue, 11 Feb 2025 05:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-64.-minimum-path-sum/</guid>
      <description>2D 격자에서 좌측 상단에서 우측 하단으로 가는 최소 비용 경로를 찾는 문제</description>
    </item>
    <item>
      <title>Baekjoon 1463. 1로 만들기</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/baekjoon-1463.-1%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
      <pubDate>Tue, 11 Feb 2025 05:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/baekjoon-1463.-1%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
      <description>숫자 𝑛을 1로 만들기 위한 최소 연산 횟수를 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 387. First Unique Character in a String</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-387.-first-unique-character-in-a-string/</link>
      <pubDate>Tue, 11 Feb 2025 05:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-387.-first-unique-character-in-a-string/</guid>
      <description>문자열에서 처음으로 등장하는 유일한 문자의 인덱스를 찾는 문제</description>
    </item>
    <item>
      <title>Baekjoon 11375. 열혈강호</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/baekjoon-11375.-%EC%97%B4%ED%98%88%EA%B0%95%ED%98%B8/</link>
      <pubDate>Mon, 10 Feb 2025 05:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/baekjoon-11375.-%EC%97%B4%ED%98%88%EA%B0%95%ED%98%B8/</guid>
      <description>이분 그래프에서 최대 매칭을 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 494. Target Sum</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-494.-target-sum/</link>
      <pubDate>Mon, 10 Feb 2025 05:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-494.-target-sum/</guid>
      <description>주어진 숫자 배열에서 특정 목표 합을 만들기 위한 방법의 수를 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 673. Number of Longest Increasing Subsequence</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-673.-number-of-longest-increasing-subsequence/</link>
      <pubDate>Mon, 10 Feb 2025 05:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-673.-number-of-longest-increasing-subsequence/</guid>
      <description>가장 긴 증가하는 부분 수열(LIS)의 개수를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 128. Longest Consecutive Sequence</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-128.-longest-consecutive-sequence/</link>
      <pubDate>Mon, 10 Feb 2025 05:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-128.-longest-consecutive-sequence/</guid>
      <description>주어진 배열에서 연속된 숫자로 이루어진 가장 긴 부분 수열을 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 344. Reverse String</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-344.-reverse-string/</link>
      <pubDate>Mon, 10 Feb 2025 05:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-344.-reverse-string/</guid>
      <description>문자열을 뒤집는 문제</description>
    </item>
    <item>
      <title>Baekjoon 1854. K번째 최단경로 찾기</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/baekjoon-1854.-k%EB%B2%88%EC%A7%B8-%EC%B5%9C%EB%8B%A8%EA%B2%BD%EB%A1%9C-%EC%B0%BE%EA%B8%B0/</link>
      <pubDate>Sun, 09 Feb 2025 05:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/baekjoon-1854.-k%EB%B2%88%EC%A7%B8-%EC%B5%9C%EB%8B%A8%EA%B2%BD%EB%A1%9C-%EC%B0%BE%EA%B8%B0/</guid>
      <description>한 노드에서 다른 노드까지의 K번째로 짧은 경로를 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 200. Number of Islands</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-200.-number-of-islands/</link>
      <pubDate>Sun, 09 Feb 2025 05:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-200.-number-of-islands/</guid>
      <description> 0과 1로 이루어진 2D 그리드에서 연결된 1(육지)의 개수를 세는 문제</description>
    </item>
    <item>
      <title>LeetCode 253. Meeting Rooms II</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-253.-meeting-rooms-ii/</link>
      <pubDate>Sun, 09 Feb 2025 05:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-253.-meeting-rooms-ii/</guid>
      <description>여러 개의 회의 일정이 주어졌을 때, 동시에 사용해야 하는 최소 회의실 개수를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 697. Degree of an Array</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-697.-degree-of-an-array/</link>
      <pubDate>Sun, 09 Feb 2025 05:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-697.-degree-of-an-array/</guid>
      <description>주어진 배열에서 가장 많이 등장한 숫자를 찾는 문제</description>
    </item>
    <item>
      <title>Baekjoon 1915. 가장 큰 정사각형</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/baekjoon-1915.-%EA%B0%80%EC%9E%A5-%ED%81%B0-%EC%A0%95%EC%82%AC%EA%B0%81%ED%98%95/</link>
      <pubDate>Sat, 08 Feb 2025 05:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/baekjoon-1915.-%EA%B0%80%EC%9E%A5-%ED%81%B0-%EC%A0%95%EC%82%AC%EA%B0%81%ED%98%95/</guid>
      <description>0과 1로 이루어진 행렬에서 가장 큰 정사각형의 한 변의 길이를 구하는 문제</description>
    </item>
    <item>
      <title>Baekjoon 10162. 가짜 동전 찾기</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/baekjoon-10162.-%EA%B0%80%EC%A7%9C-%EB%8F%99%EC%A0%84-%EC%B0%BE%EA%B8%B0/</link>
      <pubDate>Sat, 08 Feb 2025 05:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/baekjoon-10162.-%EA%B0%80%EC%A7%9C-%EB%8F%99%EC%A0%84-%EC%B0%BE%EA%B8%B0/</guid>
      <description>여러 개의 동전 중 무게가 다른 가짜 동전을 저울을 최소한으로 사용하여 찾아야 합니다</description>
    </item>
    <item>
      <title>Baekjoon 2747. 피보나치 수</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/baekjoon-2747.-%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98/</link>
      <pubDate>Sat, 08 Feb 2025 05:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/baekjoon-2747.-%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98/</guid>
      <description>피보나치 수열의 n번째 값을 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 152. Maximum Product Subarray</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-152.-maximum-product-subarray/</link>
      <pubDate>Sat, 08 Feb 2025 05:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-152.-maximum-product-subarray/</guid>
      <description>연속된 부분 배열에서 최대 곱을 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 1727. Largest Submatrix With Rearrangements</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-1727.-largest-submatrix-with-rearrangements/</link>
      <pubDate>Fri, 07 Feb 2025 05:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-1727.-largest-submatrix-with-rearrangements/</guid>
      <description>0과 1로 이루어진 행렬에서 각 열을 정렬했을 때 만들 수 있는 가장 큰 정사각형 부분 행렬의 면적을 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 5. Longest Palindromic Substring</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-5.-longest-palindromic-substring/</link>
      <pubDate>Fri, 07 Feb 2025 05:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-5.-longest-palindromic-substring/</guid>
      <description>주어진 문자열에서 가장 긴 팰린드롬 부분 문자열을 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 678. Valid Parenthesis String</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-678.-valid-parenthesis-string/</link>
      <pubDate>Fri, 07 Feb 2025 05:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-678.-valid-parenthesis-string/</guid>
      <description>‘\*\*’ 문자가 여는 괄호, 닫는 괄호, 빈 문자열 중 하나로 사용될 수 있을 때, 주어진 문자열이 유효한 괄호 문자열인지 확인하는 문제</description>
    </item>
    <item>
      <title>LeetCode 790. Domino and Tromino Tiling</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-790.-domino-and-tromino-tiling/</link>
      <pubDate>Fri, 07 Feb 2025 05:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-790.-domino-and-tromino-tiling/</guid>
      <description>2×N 크기의 보드를 2×1 도미노와 ‘ㄱ’ 모양의 트로미노로 채우는 방법의 수를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 1. Two Sum</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-1.-two-sum/</link>
      <pubDate>Fri, 07 Feb 2025 05:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-1.-two-sum/</guid>
      <description>배열에서 두 수의 합이 특정 값이 되는 두 인덱스를 찾는 문제</description>
    </item>
    <item>
      <title>Baekjoon 2206. 벽 부수고 이동하기</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/baekjoon-2206.-%EB%B2%BD-%EB%B6%80%EC%88%98%EA%B3%A0-%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0/</link>
      <pubDate>Thu, 06 Feb 2025 05:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/baekjoon-2206.-%EB%B2%BD-%EB%B6%80%EC%88%98%EA%B3%A0-%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0/</guid>
      <description>0과 1로 이루어진 격자에서 1(벽)을 최대 한 번 부수고 최단 경로를 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 72. Edit Distance</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-72.-edit-distance/</link>
      <pubDate>Thu, 06 Feb 2025 05:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-72.-edit-distance/</guid>
      <description>두 문자열을 같게 만들기 위해 필요한 최소 편집(삽입, 삭제, 변경) 횟수를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 718. Maximum Length of Repeated Subarray</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-718.-maximum-length-of-repeated-subarray/</link>
      <pubDate>Thu, 06 Feb 2025 05:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-718.-maximum-length-of-repeated-subarray/</guid>
      <description>두 개의 문자열에서 가장 긴 공통 부분 문자열을 찾는 문제</description>
    </item>
    <item>
      <title>Baekjoon 2577. 숫자의 개수</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/baekjoon-2577.-%EC%88%AB%EC%9E%90%EC%9D%98-%EA%B0%9C%EC%88%98/</link>
      <pubDate>Thu, 06 Feb 2025 05:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/baekjoon-2577.-%EC%88%AB%EC%9E%90%EC%9D%98-%EA%B0%9C%EC%88%98/</guid>
      <description>주어진 숫자의 각 자리 수가 몇 번 등장하는지 세는 문제</description>
    </item>
    <item>
      <title>Baekjoon 1967. 트리의 지름</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/baekjoon-1967.-%ED%8A%B8%EB%A6%AC%EC%9D%98-%EC%A7%80%EB%A6%84/</link>
      <pubDate>Wed, 05 Feb 2025 05:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/baekjoon-1967.-%ED%8A%B8%EB%A6%AC%EC%9D%98-%EC%A7%80%EB%A6%84/</guid>
      <description>트리의 가장 긴 경로(직경)를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 279. Perfect Squares</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-279.-perfect-squares/</link>
      <pubDate>Wed, 05 Feb 2025 05:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-279.-perfect-squares/</guid>
      <description>주어진 숫자를 완전제곱수들의 합으로 나타낼 때 최소 개수를 구하는 문제입</description>
    </item>
    <item>
      <title>LeetCode 20. Valid Parentheses</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-20.-valid-parentheses/</link>
      <pubDate>Wed, 05 Feb 2025 05:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-20.-valid-parentheses/</guid>
      <description>괄호가 올바르게 짝을 이루고 있는지 확인하는 문제</description>
    </item>
    <item>
      <title>LeetCode 378. Kth Smallest Element in a Sorted Matrix</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-378.-kth-smallest-element-in-a-sorted-matrix/</link>
      <pubDate>Wed, 05 Feb 2025 05:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-378.-kth-smallest-element-in-a-sorted-matrix/</guid>
      <description>행과 열이 정렬된 행렬에서 k번째로 작은 수를 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 48. Rotate Image</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-48.-rotate-image/</link>
      <pubDate>Wed, 05 Feb 2025 05:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-48.-rotate-image/</guid>
      <description>주어진 𝑁×𝑁 행렬을 시계방향으로 90도 회전시키는 문제</description>
    </item>
    <item>
      <title>LeetCode 221. Maximal Square</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-221.-maximal-square/</link>
      <pubDate>Tue, 04 Feb 2025 05:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-221.-maximal-square/</guid>
      <description>2D DP 배열을 활용하여 각 칸에서 만들 수 있는 최대 정사각형의 한 변의 길이를 저장하는 방식</description>
    </item>
    <item>
      <title>LeetCode 300. Longest Increasing Subsequence</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-300.-longest-increasing-subsequence/</link>
      <pubDate>Tue, 04 Feb 2025 05:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-300.-longest-increasing-subsequence/</guid>
      <description>가장 긴 증가하는 부분 수열</description>
    </item>
    <item>
      <title>Baekjoon 14225. 부분수열의 합</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/baekjoon-14225.-%EB%B6%80%EB%B6%84%EC%88%98%EC%97%B4%EC%9D%98-%ED%95%A9/</link>
      <pubDate>Tue, 04 Feb 2025 05:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/baekjoon-14225.-%EB%B6%80%EB%B6%84%EC%88%98%EC%97%B4%EC%9D%98-%ED%95%A9/</guid>
      <description>주어진 배열에서 연속되지 않은 요소들의 부분 수열 중에서 특정 합을 만족하는 부분 수열이 있는지 확인하는 문제</description>
    </item>
    <item>
      <title>LeetCode 88. Merge Sorted Array</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-88.-merge-sorted-array/</link>
      <pubDate>Tue, 04 Feb 2025 05:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-88.-merge-sorted-array/</guid>
      <description>정렬된 두 배열이 주어질 때, 이를 하나의 정렬된 배열로 병합하는 문제</description>
    </item>
    <item>
      <title>Process vs Thread vs Coroutine</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/process-vs-thread-vs-coroutine/</link>
      <pubDate>Sun, 06 Oct 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/process-vs-thread-vs-coroutine/</guid>
      <description>Process란 실행 중인 프로그램의 인스턴스를 이야기하며, Thread란 프로세스 내에서 실행되는 더 작은 실행 단위를 말한다.</description>
    </item>
    <item>
      <title>Multithreading Vs Multiprocessing vs Multitasking</title>
      <link>https://buenhyden.github.io/posts/computer-science/multithreading-vs-multiprocessing-vs-multitasking/</link>
      <pubDate>Sat, 05 Oct 2024 14:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/multithreading-vs-multiprocessing-vs-multitasking/</guid>
      <description>Multithreading, Multiprocessing, Multitasking은 컴퓨터 시스템에서 동시성과 병렬성을 구현하는 세 가지 주요 개념이다.</description>
    </item>
    <item>
      <title>Baekjoon 14442. 벽 부수고 이동하기 2</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/baekjoon-14442.-%EB%B2%BD-%EB%B6%80%EC%88%98%EA%B3%A0-%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0-2/</link>
      <pubDate>Sat, 15 Feb 2025 01:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/baekjoon-14442.-%EB%B2%BD-%EB%B6%80%EC%88%98%EA%B3%A0-%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0-2/</guid>
      <description>0과 1로 이루어진 격자에서 최대 2개의 벽을 부술 수 있을 때, 최단 경로를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 991. Broken Calculator</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-991.-broken-calculator/</link>
      <pubDate>Sat, 15 Feb 2025 01:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-991.-broken-calculator/</guid>
      <description>주어진 숫자를 특정 연산(&#43;, -, *, /)을 이용해 목표 숫자로 변환하는 최소 연산 횟수를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 236. Lowest Common Ancestor of a Binary Tree</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-236.-lowest-common-ancestor-of-a-binary-tree/</link>
      <pubDate>Sat, 15 Feb 2025 01:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-236.-lowest-common-ancestor-of-a-binary-tree/</guid>
      <description>주어진 이진 트리에서 두 노드의 최소 공통 조상을 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 438. Find All Anagrams in a String</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-438.-find-all-anagrams-in-a-string/</link>
      <pubDate>Sat, 15 Feb 2025 01:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-438.-find-all-anagrams-in-a-string/</guid>
      <description>문자열 내에서 특정 패턴의 아나그램이 시작되는 모든 인덱스를 찾는 문제</description>
    </item>
    <item>
      <title>Baekjoon 1936. 가위 바위 보</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/baekjoon-1936.-%EA%B0%80%EC%9C%84-%EB%B0%94%EC%9C%84-%EB%B3%B4/</link>
      <pubDate>Sat, 15 Feb 2025 01:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/baekjoon-1936.-%EA%B0%80%EC%9C%84-%EB%B0%94%EC%9C%84-%EB%B3%B4/</guid>
      <description>두 사람이 가위, 바위, 보 중 하나를 선택했을 때 승자를 판별하는 문제</description>
    </item>
    <item>
      <title>Poetry vs uv vs Rye</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/poetry-vs-uv-vs-rye/</link>
      <pubDate>Wed, 27 Nov 2024 06:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/poetry-vs-uv-vs-rye/</guid>
      <description>파이썬 프로젝트 관리와 패키지 설치를 위한 도구들</description>
    </item>
    <item>
      <title>Linux Basic Command</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/types/linux/linux-basic-command/</link>
      <pubDate>Tue, 01 Oct 2024 15:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/types/linux/linux-basic-command/</guid>
      <description>Linux에서 자주 사용하는 명령어 모음</description>
    </item>
    <item>
      <title>Linux Permission</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/types/linux/linux-permission/</link>
      <pubDate>Tue, 01 Oct 2024 15:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/types/linux/linux-permission/</guid>
      <description>Linux 권한 설정</description>
    </item>
    <item>
      <title>LeetCode 1335. Minimum Difficulty of a Job Schedule</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-1335.-minimum-difficulty-of-a-job-schedule/</link>
      <pubDate>Sun, 16 Feb 2025 03:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-1335.-minimum-difficulty-of-a-job-schedule/</guid>
      <description>주어진 작업들을 D일 동안 나누어 수행할 때, 최소 난이도의 합을 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 53. Maximum Subarray</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-53.-maximum-subarray/</link>
      <pubDate>Sun, 16 Feb 2025 03:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-53.-maximum-subarray/</guid>
      <description>연속된 부분 배열 중 합이 가장 큰 값을 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 125. Valid Palindrome</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-125.-valid-palindrome/</link>
      <pubDate>Sun, 16 Feb 2025 03:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-125.-valid-palindrome/</guid>
      <description>대소문자를 무시하고 알파벳과 숫자만 고려하여 팰린드롬 여부를 판단하는 문제</description>
    </item>
    <item>
      <title>LeetCode 240. Search a 2D Matrix II</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-240.-search-a-2d-matrix-ii/</link>
      <pubDate>Sun, 16 Feb 2025 03:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-240.-search-a-2d-matrix-ii/</guid>
      <description>행과 열이 정렬된 2D 행렬에서 특정 숫자를 찾는 문제</description>
    </item>
    <item>
      <title>Event-Driven Architecture vs Event Sourcing Pattern vs Publisher-Subscriber Pattern vs Producer-Consumer Pattern</title>
      <link>https://buenhyden.github.io/til/2024/11/19/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</link>
      <pubDate>Tue, 19 Nov 2024 03:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/11/19/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</guid>
      <description>EDA는 이벤트 중심의 시스템 설계를 위한 상위 수준의 아키텍처 스타일이며, Publisher-Subscriber Pattern과 Producer-Consumer Pattern은 EDA를 구현하는 데 사용되는 구체적인 통신 모델이다. 그리고 Event Sourcing Pattern은 EDA의 한 구현 방식으로 볼 수 있으며, 이벤트를 저장하고 관리하는 방법을 제공한다.</description>
    </item>
    <item>
      <title>Scenario Testing vs Use Case Testing</title>
      <link>https://buenhyden.github.io/posts/qa/manual-testing/test-cases-and-scenarios/scenario-testing-vs-use-case-testing/</link>
      <pubDate>Tue, 05 Nov 2024 17:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/manual-testing/test-cases-and-scenarios/scenario-testing-vs-use-case-testing/</guid>
      <description>Scenario Testing과 Use Case Testing은 소프트웨어 테스팅 기법으로, 사용자 관점에서 시스템의 기능과 동작을 검증하는 데 사용된다.</description>
    </item>
    <item>
      <title>Nginx vs Apache HTTP Server vs Caddy</title>
      <link>https://buenhyden.github.io/posts/backend/web-servers/nginx-vs-apache-tomcat-vs-caddy/</link>
      <pubDate>Tue, 22 Oct 2024 11:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/web-servers/nginx-vs-apache-tomcat-vs-caddy/</guid>
      <description>Nginx, Apache HTTP Server, 그리고 Caddy는 모두 웹 서버 소프트웨어이다.</description>
    </item>
    <item>
      <title>Kafka vs RabbitMQ</title>
      <link>https://buenhyden.github.io/posts/backend/event-broker-and-message-broker/kafka-vs-rabbitmq/</link>
      <pubDate>Tue, 22 Oct 2024 11:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/event-broker-and-message-broker/kafka-vs-rabbitmq/</guid>
      <description>Kafka와 RabbitMQ는 모두 메시지 브로커 시스템으로, 분산 시스템에서 데이터를 효율적으로 전송하고 처리하는 역할을 한다.</description>
    </item>
    <item>
      <title>Paging vs Segmentation</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/components/memory-mgmt/memory-mgmt-techniques/paging-vs-segmentation/</link>
      <pubDate>Sat, 05 Oct 2024 08:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/components/memory-mgmt/memory-mgmt-techniques/paging-vs-segmentation/</guid>
      <description>Paging과 Segmentation은 운영체제의 메모리 관리 기법이다.</description>
    </item>
    <item>
      <title>LeetCode 323. Number of Connected Components in an Undirected Graph</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-323.-number-of-connected-components-in-an-undirected-graph/</link>
      <pubDate>Mon, 17 Feb 2025 01:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-323.-number-of-connected-components-in-an-undirected-graph/</guid>
      <description>주어진 무방향 그래프에서 연결된 컴포넌트의 개수를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 787. Cheapest Flights Within K Stops</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-787.-cheapest-flights-within-k-stops/</link>
      <pubDate>Mon, 17 Feb 2025 01:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-787.-cheapest-flights-within-k-stops/</guid>
      <description>특정 정점에서 다른 정점까지, 최대 𝐾K개의 경유지 내에서 최소 비용으로 이동하는 경로를 찾는 문제</description>
    </item>
    <item>
      <title>Baekjoon 10872. 팩토리얼</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/baekjoon-10872.-%ED%8C%A9%ED%86%A0%EB%A6%AC%EC%96%BC/</link>
      <pubDate>Mon, 17 Feb 2025 01:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/baekjoon-10872.-%ED%8C%A9%ED%86%A0%EB%A6%AC%EC%96%BC/</guid>
      <description>숫자 𝑛이 주어졌을 때, 𝑛! (팩토리얼)을 계산하는 문제</description>
    </item>
    <item>
      <title>LeetCode 260. Single Number III</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-260.-single-number-iii/</link>
      <pubDate>Mon, 17 Feb 2025 01:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-260.-single-number-iii/</guid>
      <description>모든 숫자가 두 번씩 등장하는 배열에서 단 한 번만 등장하는 두 개의 숫자를 찾는 문제</description>
    </item>
    <item>
      <title>Callback vs Promise vs Async/Await</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback-vs-promise-vs-async-await/</link>
      <pubDate>Sat, 23 Nov 2024 09:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback-vs-promise-vs-async-await/</guid>
      <description>JavaScript의 비동기 처리 방식</description>
    </item>
    <item>
      <title>Streaming vs Polling</title>
      <link>https://buenhyden.github.io/til/2024/10/20/streaming-vs-polling/</link>
      <pubDate>Sun, 20 Oct 2024 08:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/20/streaming-vs-polling/</guid>
      <description>Streaming과 polling은 실시간 데이터 전송을 위해 사용되는 두 가지 주요 기술</description>
    </item>
    <item>
      <title>동기(Synchronous)와 비동기(Asynchronous) 그리고 Blocking와 Non-Blocking</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/synchronous-and-asynchronous-and-blocking-and-non-blocking/</link>
      <pubDate>Sun, 06 Oct 2024 12:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/synchronous-and-asynchronous-and-blocking-and-non-blocking/</guid>
      <description>동기(Synchronous)와 비동기(Asynchronous) 그리고 Blocking와 Non-Blocking</description>
    </item>
    <item>
      <title>Lock and Mutex</title>
      <link>https://buenhyden.github.io/posts/computer-science/lock-and-mutex/</link>
      <pubDate>Sat, 05 Oct 2024 11:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/lock-and-mutex/</guid>
      <description>Lock과 Mutex는 둘 다 여러 스레드가 공유 자원에 동시에 접근하는 것을 방지하는 동기화 도구이다. 한 스레드가 자원을 사용할 때 다른 스레드의 접근을 막는 것이다.</description>
    </item>
    <item>
      <title>LeetCode 1650. Lowest Common Ancestor of a Binary Tree III</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-1650.-lowest-common-ancestor-of-a-binary-tree-iii/</link>
      <pubDate>Tue, 18 Feb 2025 04:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-1650.-lowest-common-ancestor-of-a-binary-tree-iii/</guid>
      <description>부모 포인터를 활용하여 두 노드 간 최소 공통 조상을 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 1312. Minimum Insertion Steps to Make a String Palindrome</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-1312.-minimum-insertion-steps-to-make-a-string-palindrome/</link>
      <pubDate>Tue, 18 Feb 2025 04:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-1312.-minimum-insertion-steps-to-make-a-string-palindrome/</guid>
      <description>문자열을 팰린드롬으로 만들기 위해 삽입해야 하는 최소 문자 개수를 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 15. 3Sum</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-15.-3sum/</link>
      <pubDate>Tue, 18 Feb 2025 04:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-15.-3sum/</guid>
      <description>연속된 부분 배열에서 최대 곱을 찾는 문제</description>
    </item>
    <item>
      <title>Redis와 Valkey</title>
      <link>https://buenhyden.github.io/posts/databases/nosql/key-value/redis%EC%99%80-valkey/</link>
      <pubDate>Tue, 22 Oct 2024 01:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/databases/nosql/key-value/redis%EC%99%80-valkey/</guid>
      <description>Redis와 Valkey 모두 인메모리 데이터베이스로, 빠른 읽기/쓰기 성능을 제공하나, Redis의 라이선스 정책 변경으로 인해 Valkey가 fork되어 새로운 프로젝트가 되었다.</description>
    </item>
    <item>
      <title>마이그레이션 (Migration)</title>
      <link>https://buenhyden.github.io/posts/backend/scalability/migration/</link>
      <pubDate>Thu, 19 Sep 2024 15:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/scalability/migration/</guid>
      <description>IT 분야에서 데이터, 시스템, 애플리케이션 등을 한 환경에서 다른 환경으로 이동하는 과정</description>
    </item>
    <item>
      <title>클라우드 서비스 보안인증(CSAP, Cloud Security Assurance Program)</title>
      <link>https://buenhyden.github.io/til/2024/09/19/cloud-security-assurance-program/</link>
      <pubDate>Thu, 19 Sep 2024 11:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/19/cloud-security-assurance-program/</guid>
      <description>클라우드 서비스 보안인증(CSAP, Cloud Security Assurance Program)은 한국인터넷진흥원(KISA)에서 주관하는 클라우드 서비스의 보안성을 평가하고 인증하는 제도.</description>
    </item>
    <item>
      <title>LeetCode 31. Next Permutation</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-31.-next-permutation/</link>
      <pubDate>Thu, 20 Feb 2025 07:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-31.-next-permutation/</guid>
      <description>사전순으로 다음에 오는 순열을 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 453. Minimum Moves to Equal Array Elements</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-453.-minimum-moves-to-equal-array-elements/</link>
      <pubDate>Thu, 20 Feb 2025 07:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-453.-minimum-moves-to-equal-array-elements/</guid>
      <description>모든 원소를 동일하게 만들기 위한 최소 이동 횟수를 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 797. All Paths From Source to Target</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-797.-all-paths-from-source-to-target/</link>
      <pubDate>Thu, 20 Feb 2025 07:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-797.-all-paths-from-source-to-target/</guid>
      <description>방향 그래프에서 시작점에서 끝점까지 가는 모든 경로를 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 134. Gas Station</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-134.-gas-station/</link>
      <pubDate>Wed, 19 Feb 2025 07:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-134.-gas-station/</guid>
      <description>원형 배열 형태로 주유소를 순회하며 특정 지점에서 출발할 때 전체 순환이 가능한지 확인하는 문제</description>
    </item>
    <item>
      <title>LeetCode 273. Integer to English Words</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-273.-integer-to-english-words/</link>
      <pubDate>Wed, 19 Feb 2025 07:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-273.-integer-to-english-words/</guid>
      <description>주어진 정수를 영어 단어로 변환하는 문제</description>
    </item>
    <item>
      <title>LeetCode 238. Product of Array Except Self</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-238.-product-of-array-except-self/</link>
      <pubDate>Wed, 19 Feb 2025 07:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-238.-product-of-array-except-self/</guid>
      <description>자기 자신을 제외한 모든 원소의 곱을 계산하는 문제</description>
    </item>
    <item>
      <title>E-Commerce Service</title>
      <link>https://buenhyden.github.io/til/2024/12/03/e-commerce-service/</link>
      <pubDate>Tue, 03 Dec 2024 12:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/12/03/e-commerce-service/</guid>
      <description>물품 구매 서비스를 구현하기 위해 필요한 사항들을 정리한다.</description>
    </item>
    <item>
      <title>선사용 IT 솔루션</title>
      <link>https://buenhyden.github.io/til/2024/12/03/%EC%84%A0%EC%82%AC%EC%9A%A9-it-%EC%86%94%EB%A3%A8%EC%85%98/</link>
      <pubDate>Tue, 03 Dec 2024 01:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/12/03/%EC%84%A0%EC%82%AC%EC%9A%A9-it-%EC%86%94%EB%A3%A8%EC%85%98/</guid>
      <description>해운업계의 디지털 전환 사례와 최신 기술 트렌드를 기반으로 정리</description>
    </item>
    <item>
      <title>RESTful API vs GraphQL API vs Webhook vs Server-sent Events vs Websocket vs WebRTC</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/restful-api-vs-graphql-api-vs-webhook-vs-server-sent-events-vs-websocket-vs-webrtc/</link>
      <pubDate>Sat, 19 Oct 2024 06:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/restful-api-vs-graphql-api-vs-webhook-vs-server-sent-events-vs-websocket-vs-webrtc/</guid>
      <description>API의 여러 유형인 RESTful API, GraphQL API, Webhook, Server-sent Events, WebSocket, WebRTC에 대해 정리하고 비교 분석</description>
    </item>
    <item>
      <title>Webhook vs Server-Sent Events</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/webhook-vs-server-sent-events/</link>
      <pubDate>Sat, 19 Oct 2024 06:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/webhook-vs-server-sent-events/</guid>
      <description>Webhook과 Server-Sent Events(SSE)는 실시간 데이터 전송을 위한 웹 기술이다.</description>
    </item>
    <item>
      <title>LeetCode 123. Best Time to Buy and Sell Stock III</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-123.-best-time-to-buy-and-sell-stock-iii/</link>
      <pubDate>Fri, 21 Feb 2025 01:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-123.-best-time-to-buy-and-sell-stock-iii/</guid>
      <description>주어진 주식 가격 배열에서 최대 두 번의 거래를 통해 얻을 수 있는 최대 이익을 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 560. Subarray Sum Equals K</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-560.-subarray-sum-equals-k/</link>
      <pubDate>Fri, 21 Feb 2025 01:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-560.-subarray-sum-equals-k/</guid>
      <description>연속된 부분 배열의 합이 𝐾가 되는 개수를 찾는 문제</description>
    </item>
    <item>
      <title>물류 운송 관리 시스템 (Transportation Management System, TMS)</title>
      <link>https://buenhyden.github.io/til/2024/12/03/transportation-management-system/</link>
      <pubDate>Tue, 03 Dec 2024 06:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/12/03/transportation-management-system/</guid>
      <description>물류 운송 관리 시스템으로, 기업의 물류 운송 프로세스를 효율적으로 관리하고 최적화하기 위한 솔루션</description>
    </item>
    <item>
      <title>Enterprise Resource Planning</title>
      <link>https://buenhyden.github.io/til/2024/12/03/enterprise-resource-planning/</link>
      <pubDate>Tue, 03 Dec 2024 00:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/12/03/enterprise-resource-planning/</guid>
      <description>ERP(Enterprise Resource Planning)는 기업의 모든 자원을 통합적으로 관리하고 운영하기 위한 시스템</description>
    </item>
    <item>
      <title>Warehouse Management System</title>
      <link>https://buenhyden.github.io/til/2024/12/03/warehouse-management-system/</link>
      <pubDate>Tue, 03 Dec 2024 00:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/12/03/warehouse-management-system/</guid>
      <description>WMS(Warehouse Management System)는 창고 관리 시스템으로, 창고 내의 물류 프로세스를 최적화하고 효율적으로 관리하기 위한 소프트웨어 애플리케이션을 말한다</description>
    </item>
    <item>
      <title>setup.cfg vs pyproject.toml</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/configuration/setup.cfg-vs-pyproject.toml/</link>
      <pubDate>Wed, 27 Nov 2024 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/configuration/setup.cfg-vs-pyproject.toml/</guid>
      <description>Python 프로젝트의 구성과 메타데이터를 정의하는 파일 형식이다.</description>
    </item>
    <item>
      <title>Cloud vs. On-Premise</title>
      <link>https://buenhyden.github.io/posts/devops/cloud/cloud-vs-on-premise/</link>
      <pubDate>Sun, 10 Nov 2024 10:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/cloud/cloud-vs-on-premise/</guid>
      <description>Cloud와 On-Premise는 기업의 IT 인프라를 구축하고 관리하는 두 가지 주요 방식을 설명하는 개념이다.</description>
    </item>
    <item>
      <title>LeetCode 1136. Parallel Courses</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-1136.-parallel-courses/</link>
      <pubDate>Sat, 22 Feb 2025 01:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-1136.-parallel-courses/</guid>
      <description>여러 개의 작업과 선행 조건이 주어졌을 때, 모든 작업을 완료하는 데 걸리는 최소 시간을 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 132. Palindrome Partitioning II</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-132.-palindrome-partitioning-ii/</link>
      <pubDate>Sat, 22 Feb 2025 01:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-132.-palindrome-partitioning-ii/</guid>
      <description>문자열을 팰린드롬 부분 문자열로 분할할 때, 필요한 최소 분할 횟수를 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 1119. Remove Vowels from a String</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-1119.-remove-vowels-from-a-string/</link>
      <pubDate>Sat, 22 Feb 2025 01:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-1119.-remove-vowels-from-a-string/</guid>
      <description>주어진 문자열에서 모든 모음(a, e, i, o, u)을 제거하는 문제</description>
    </item>
    <item>
      <title>LeetCode 516. Longest Palindromic Subsequence</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-516.-longest-palindromic-subsequence/</link>
      <pubDate>Sat, 22 Feb 2025 01:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-516.-longest-palindromic-subsequence/</guid>
      <description>주어진 문자열에서 가장 긴 팰린드롬 부분 수열의 길이를 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 55. Jump Game</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-55.-jump-game/</link>
      <pubDate>Sat, 22 Feb 2025 01:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-55.-jump-game/</guid>
      <description>배열의 각 위치에서 점프할 수 있는 최대 범위가 주어질 때, 마지막 인덱스에 도달할 수 있는지 판단하는 문제</description>
    </item>
    <item>
      <title>Shared Database vs Shared Database Per Service</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/shared-database-vs-shared-database-per-service/</link>
      <pubDate>Tue, 12 Nov 2024 08:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/shared-database-vs-shared-database-per-service/</guid>
      <description>MSA(Microservices Architecture)에서 **Shared Database**와 **Shared Database Per Service** 패턴은 데이터 관리 전략의 일환으로 활용되며, 각각의 특징과 적용 시나리오가 뚜렷하게 구분된다.</description>
    </item>
    <item>
      <title>CCE vs CVE vs CWE</title>
      <link>https://buenhyden.github.io/posts/security/security-vulnerability/cce-vs-cve-vs-cwe/</link>
      <pubDate>Thu, 07 Nov 2024 07:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-vulnerability/cce-vs-cve-vs-cwe/</guid>
      <description>CCE, CVE, CWE는 모두 컴퓨터 시스템과 소프트웨어의 보안 취약점을 식별하고 분류하기 위한 표준화된 체계이다.</description>
    </item>
    <item>
      <title>ETL vs ELT</title>
      <link>https://buenhyden.github.io/posts/data/data-engineering/etl-vs-elt/</link>
      <pubDate>Sat, 26 Oct 2024 07:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data/data-engineering/etl-vs-elt/</guid>
      <description>데이터 통합 및 처리를 위한 두 가지 주요 접근 방식</description>
    </item>
    <item>
      <title>Data Lake vs Data Warehouse  vs Data Lakehouse</title>
      <link>https://buenhyden.github.io/posts/data/data-engineering/data-lake-vs-data-warehouse--vs-data-lakehouse/</link>
      <pubDate>Sat, 26 Oct 2024 05:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data/data-engineering/data-lake-vs-data-warehouse--vs-data-lakehouse/</guid>
      <description>데이터 레이크(Data Lake)와 데이터 웨어하우스(Data Warehouse)는 기업의 데이터 관리 및 분석을 위한 중요한 저장소 시스템이다.</description>
    </item>
    <item>
      <title>Baekjoon 1197. 최소 스패닝 트리</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/baekjoon-1197.-%EC%B5%9C%EC%86%8C-%EC%8A%A4%ED%8C%A8%EB%8B%9D-%ED%8A%B8%EB%A6%AC/</link>
      <pubDate>Sun, 23 Feb 2025 14:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/baekjoon-1197.-%EC%B5%9C%EC%86%8C-%EC%8A%A4%ED%8C%A8%EB%8B%9D-%ED%8A%B8%EB%A6%AC/</guid>
      <description>주어진 그래프에서 모든 노드를 연결하는 최소 비용을 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 104. Maximum Depth of Binary Tree</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-104.-maximum-depth-of-binary-tree/</link>
      <pubDate>Sun, 23 Feb 2025 14:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-104.-maximum-depth-of-binary-tree/</guid>
      <description>이진 트리의 최대 깊이를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 189. Rotate Array</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-189.-rotate-array/</link>
      <pubDate>Sun, 23 Feb 2025 14:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-189.-rotate-array/</guid>
      <description>주어진 배열을 오른쪽으로 K칸 회전시키는 문제</description>
    </item>
    <item>
      <title>Software Architecture pattern vs Software Design Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/software-architecture-pattern-vs-software-design-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 08:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/software-architecture-pattern-vs-software-design-pattern/</guid>
      <description>Software Architecture Pattern과 Software Design Pattern은 소프트웨어 개발에서 반복적으로 발생하는 문제들에 대한 검증된 해결책을 제공하는 개념이다. 이 두 패턴은 서로 다른 수준의 추상화와 범위를 다루고 있다.</description>
    </item>
    <item>
      <title>LeetCode 593. Valid Square</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-593.-valid-square/</link>
      <pubDate>Mon, 24 Feb 2025 05:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-593.-valid-square/</guid>
      <description>네 개의 점이 주어졌을 때, 이를 이용해 정사각형을 만들 수 있는지 판별하는 문제</description>
    </item>
    <item>
      <title>LeetCode 719. Find K-th Smallest Pair Distance</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-719.-find-k-th-smallest-pair-distance/</link>
      <pubDate>Mon, 24 Feb 2025 05:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-719.-find-k-th-smallest-pair-distance/</guid>
      <description>정렬된 배열에서 두 수의 차이(거리)를 계산하여 K번째로 작은 거리를 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 371. Sum of Two Integers</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-371.-sum-of-two-integers/</link>
      <pubDate>Mon, 24 Feb 2025 05:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-371.-sum-of-two-integers/</guid>
      <description>덧셈 연산자를 사용하지 않고 두 정수를 더하는 문제</description>
    </item>
    <item>
      <title>WCS(Warehouse Control System)</title>
      <link>https://buenhyden.github.io/til/2024/12/03/warehouse-control-system/</link>
      <pubDate>Tue, 03 Dec 2024 06:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/12/03/warehouse-control-system/</guid>
      <description>WCS(Warehouse Control System)는 물류 창고의 자동화 설비를 실시간으로 제어하고 관리하는 시스템</description>
    </item>
    <item>
      <title>Connection Pool</title>
      <link>https://buenhyden.github.io/posts/databases/connection-pool/</link>
      <pubDate>Fri, 25 Oct 2024 06:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/databases/connection-pool/</guid>
      <description>Connection pool은 데이터베이스 연결을 재사용 가능한 형태로 캐시하는 메커니즘이다.  이는 애플리케이션이 데이터베이스에 연결할 때마다 새로운 연결을 생성하는 대신, 미리 생성된 연결을 사용할 수 있게 해준다.</description>
    </item>
    <item>
      <title>LeetCode 215. Kth Largest Element in an Array</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-215.-kth-largest-element-in-an-array/</link>
      <pubDate>Tue, 25 Feb 2025 12:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-215.-kth-largest-element-in-an-array/</guid>
      <description>배열에서 K번째로 큰 요소를 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 1310. XOR Queries of a Subarray</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-1310.-xor-queries-of-a-subarray/</link>
      <pubDate>Tue, 25 Feb 2025 12:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-1310.-xor-queries-of-a-subarray/</guid>
      <description>배열의 특정 구간에 대한 XOR 값을 빠르게 계산하는 문제</description>
    </item>
    <item>
      <title>LeetCode 26. Remove Duplicates from Sorted Array</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-26.-remove-duplicates-from-sorted-array/</link>
      <pubDate>Tue, 25 Feb 2025 12:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-26.-remove-duplicates-from-sorted-array/</guid>
      <description>정렬된 배열에서 중복된 요소를 제거하고, 유니크한 요소들을 앞쪽으로 배치하는 문제</description>
    </item>
    <item>
      <title>Decompose by Business Capability vs Decompose by Subdomain</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-business-capability-vs-decompose-by-subdomain/</link>
      <pubDate>Wed, 13 Nov 2024 01:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-business-capability-vs-decompose-by-subdomain/</guid>
      <description>Decompose by Business Capability는 조직의 기능적 관점에서 시스템을 구조화할 때 적합하며, 비즈니스와 기술의 연계를 중시하는 경우에 유용하다.  Decompose by Subdomain은 도메인의 문제를 세분화하고 기술적 복잡성을 다루기 위해 설계된 방식으로, 도메인 주도 설계 원칙을 사용하는 프로젝트에 더 적합하다.</description>
    </item>
    <item>
      <title>ER(Entity-Relationship) 모델링</title>
      <link>https://buenhyden.github.io/posts/databases/entity-relationship-modeling/</link>
      <pubDate>Fri, 25 Oct 2024 02:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/databases/entity-relationship-modeling/</guid>
      <description>실제 세계의 데이터를 개체(Entity), 관계(Relationship), 속성(Attribute)으로 표현하여 데이터베이스를 설계하는 방법</description>
    </item>
    <item>
      <title>Deadlock vs Livelock</title>
      <link>https://buenhyden.github.io/posts/computer-science/deadlock-vs-livelock/</link>
      <pubDate>Sat, 05 Oct 2024 07:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/deadlock-vs-livelock/</guid>
      <description>데드락(Deadlock)과 라이브락(Livelock)은 둘 다 동시성 프로그래밍에서 발생할 수 있는 문제 상황으로, 데드락과 라이브락은 모두 시스템의 진행을 방해하는 심각한 문제이다</description>
    </item>
    <item>
      <title>Mediator Pattern vs Observer Pattern</title>
      <link>https://buenhyden.github.io/til/2024/09/24/mediator-pattern-vs-observer-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/24/mediator-pattern-vs-observer-pattern/</guid>
      <description>Mediator 패턴과 Observer 패턴은 객체 간 통신을 관리하는 디자인 패턴이지만, 그 접근 방식과 용도에 차이가 있다.</description>
    </item>
    <item>
      <title>LeetCode 1779. Find Nearest Point That Has the Same X or Y Coordinate</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-1779.-find-nearest-point-that-has-the-same-x-or-y-coordinate/</link>
      <pubDate>Wed, 26 Feb 2025 01:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-1779.-find-nearest-point-that-has-the-same-x-or-y-coordinate/</guid>
      <description>주어진 점에서 x 또는 y 좌표가 같은 점 중에서 가장 가까운 점을 찾는 문제</description>
    </item>
    <item>
      <title>LeetCode 45. Jump Game II</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-45.-jump-game-ii/</link>
      <pubDate>Wed, 26 Feb 2025 01:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-45.-jump-game-ii/</guid>
      <description>각 인덱스에서 점프할 수 있는 최대 거리가 주어질 때, 첫 번째 인덱스에서 마지막 인덱스로 이동하는 최소 점프 횟수를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 1491. Average Salary Excluding the Minimum and Maximum Salary</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-1491.-average-salary-excluding-the-minimum-and-maximum-salary/</link>
      <pubDate>Wed, 26 Feb 2025 01:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-1491.-average-salary-excluding-the-minimum-and-maximum-salary/</guid>
      <description>주어진 정수 배열의 평균값을 계산하는 문제</description>
    </item>
    <item>
      <title>LeetCode 1658. Minimum Operations to Reduce X to Zero</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-1658.-minimum-operations-to-reduce-x-to-zero/</link>
      <pubDate>Thu, 27 Feb 2025 06:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-1658.-minimum-operations-to-reduce-x-to-zero/</guid>
      <description>배열의 양쪽 끝에서 요소를 선택해 합이 X가 되도록 만들 때, 필요한 최소 선택 횟수를 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 373. Find K Pairs with Smallest Sums</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-373.-find-k-pairs-with-smallest-sums/</link>
      <pubDate>Thu, 27 Feb 2025 06:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-373.-find-k-pairs-with-smallest-sums/</guid>
      <description>두 개의 정렬된 배열에서 원소를 선택해 K개의 최소 합을 구하는 문제</description>
    </item>
    <item>
      <title>LeetCode 1480. Running Sum of 1d Array</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-1480.-running-sum-of-1d-array/</link>
      <pubDate>Thu, 27 Feb 2025 06:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-1480.-running-sum-of-1d-array/</guid>
      <description>주어진 숫자 배열의 총합을 계산하는 문제</description>
    </item>
    <item>
      <title>System Test vs End-to-End Test</title>
      <link>https://buenhyden.github.io/posts/qa/system-test-vs-end-to-end-test/</link>
      <pubDate>Tue, 05 Nov 2024 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/system-test-vs-end-to-end-test/</guid>
      <description>System Testing과 End-to-End Testing은 소프트웨어 테스팅 과정에서 사용되는 두 가지 중요한 테스트 방법이다. 이 두 방법은 소프트웨어의 품질을 보장하기 위해 사용되지만, 그 범위와 목적에 차이가 있다.</description>
    </item>
    <item>
      <title>Elasticsearch and Opensearch</title>
      <link>https://buenhyden.github.io/posts/backend/search-engines/elasticsearch-and-opensearch/</link>
      <pubDate>Tue, 22 Oct 2024 06:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/search-engines/elasticsearch-and-opensearch/</guid>
      <description>Elasticsearch는 Apache Lucene 기반의 오픈소스 검색엔진이며, Opensearch는 Elasticsearch의 포크 버전</description>
    </item>
    <item>
      <title>LeetCode 871. Minimum Number of Refueling Stops</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-871.-minimum-number-of-refueling-stops/</link>
      <pubDate>Fri, 28 Feb 2025 00:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-871.-minimum-number-of-refueling-stops/</guid>
      <description>주어진 연료 충전소에서 최소한의 충전으로 목적지까지 도달하는 문제</description>
    </item>
    <item>
      <title>LeetCode 443. String Compression</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-443.-string-compression/</link>
      <pubDate>Fri, 28 Feb 2025 00:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-443.-string-compression/</guid>
      <description>주어진 문자열을 같은 문자가 연속될 경우 압축하는 문제</description>
    </item>
    <item>
      <title>LeetCode 9. Palindrome Number</title>
      <link>https://buenhyden.github.io/coding-test/2025/02/leetcode-9.-palindrome-number/</link>
      <pubDate>Fri, 28 Feb 2025 00:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/coding-test/2025/02/leetcode-9.-palindrome-number/</guid>
      <description>주어진 숫자가 좌우 대칭(팰린드롬)인지 확인하는 문제</description>
    </item>
    <item>
      <title>동적테스트(Dynamic Test) vs 정적테스트(Static Test)</title>
      <link>https://buenhyden.github.io/posts/qa/dynamic-test-vs-static-test/</link>
      <pubDate>Tue, 05 Nov 2024 02:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/dynamic-test-vs-static-test/</guid>
      <description>소프트웨어 테스팅은 프로그램의 품질을 확인하고 오류를 찾아내는 과정.</description>
    </item>
    <item>
      <title>Behavioral Design Patterns vs Creational Design Patterns vs Structural Design Patterns</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns-vs-creational-design-patterns-vs-structural-design-patterns/</link>
      <pubDate>Wed, 25 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns-vs-creational-design-patterns-vs-structural-design-patterns/</guid>
      <description>소프트웨어 설계에서 자주 발생하는 문제들을 해결하기 위한 일반화된 솔루션을 제공하는 디자인 패턴의 세 가지 주요 카테고리</description>
    </item>
    <item>
      <title>NodeJS vs. Javascript</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/nodejs-javascript/</link>
      <pubDate>Sat, 23 Nov 2024 09:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/nodejs-javascript/</guid>
      <description>JavaScript는 웹 페이지에 동적인 기능을 추가하기 위해 만들어진 프로그래밍 언어이며, Node.js는 JavaScript를 서버 측에서 실행할 수 있게 해주는 런타임 환경이다.</description>
    </item>
    <item>
      <title>import vs require</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/modules/import-vs-require/</link>
      <pubDate>Sat, 23 Nov 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/modules/import-vs-require/</guid>
      <description>`require`는 Node.js에서 사용되는 CommonJS 모듈 시스템의 키워드로, 동기적으로 모듈을 로드하며 프로그램의 어느 지점에서나 호출할 수 있다. 반면에 `import`는 ES6에서 도입된 모듈 시스템의 키워드로, 코드 실행 전에 모듈을 미리 로드하며 파일의 시작 부분에서만 사용할 수 있다.</description>
    </item>
    <item>
      <title>Web Application Server (WAS) and Web Server</title>
      <link>https://buenhyden.github.io/posts/backend/web-application-server/web-application-server-and-web-server/</link>
      <pubDate>Tue, 22 Oct 2024 07:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/web-application-server/web-application-server-and-web-server/</guid>
      <description>Web Application Server와 Web Server 비교 분석한다.</description>
    </item>
    <item>
      <title>Message Queue vs Message Broker vs Event Broker</title>
      <link>https://buenhyden.github.io/posts/backend/event-broker-and-message-broker/message-queue-vs-message-broker-vs-event-broker/</link>
      <pubDate>Tue, 22 Oct 2024 07:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/event-broker-and-message-broker/message-queue-vs-message-broker-vs-event-broker/</guid>
      <description>Message Queue의 Event Broker와 Message Broker를 비교한다.</description>
    </item>
    <item>
      <title>Cache Strategy vs Cache Policy</title>
      <link>https://buenhyden.github.io/posts/system-design/caching/cache-strategy-vs-cache-policy/</link>
      <pubDate>Mon, 30 Sep 2024 15:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/caching/cache-strategy-vs-cache-policy/</guid>
      <description>캐시 전략(Cache Strategy)과 캐시 정책(Cache Policy)은 컴퓨터 아키텍처에서 캐시 메모리의 효율적 운영을 위한 핵심 개념이다.</description>
    </item>
    <item>
      <title>Von Neumann Architecture vs Harvard Architecture</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/von-neumann-architecture-vs-harvard-architecture/</link>
      <pubDate>Sun, 29 Sep 2024 05:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/von-neumann-architecture-vs-harvard-architecture/</guid>
      <description>하버드 아키텍처(Harvard Architecture)와 폰 노이만 아키텍처(von Neumann Architecture)는 컴퓨터 시스템의 메모리 구조를 정의하는 두 가지 대표적인 설계 방식이다.</description>
    </item>
    <item>
      <title>QA vs QC vs Testing</title>
      <link>https://buenhyden.github.io/posts/qa/quality-assurance-vs-quality-control-vs-testing/</link>
      <pubDate>Tue, 05 Nov 2024 07:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/quality-assurance-vs-quality-control-vs-testing/</guid>
      <description>Quality Assurance (QA)는 제품이나 서비스의 품질을 보장하기 위한 계획적이고 체계적인 활동들의 집합이며, Quality Control (QC)는 개발된 제품이나 서비스가 정해진 품질 기준을 충족하는지 확인하는 활동이고, Testing은 소프트웨어가 예상대로 작동하는지 확인하는 구체적인 실행 활동이다.</description>
    </item>
    <item>
      <title>QUIC</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/quic/</link>
      <pubDate>Thu, 06 Mar 2025 02:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/quic/</guid>
      <description>&lt;h2 id=&#34;quic&#34;&gt;QUIC&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>BGP</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/routing-protocols/bgp/</link>
      <pubDate>Thu, 06 Mar 2025 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/routing-protocols/bgp/</guid>
      <description>&lt;h2 id=&#34;bgp&#34;&gt;BGP&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>FTP</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/file-transfer-protocols/ftp/</link>
      <pubDate>Thu, 06 Mar 2025 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/file-transfer-protocols/ftp/</guid>
      <description>&lt;h2 id=&#34;ftp&#34;&gt;FTP&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>OSPF</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/routing-protocols/ospf/</link>
      <pubDate>Thu, 06 Mar 2025 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/routing-protocols/ospf/</guid>
      <description>&lt;h2 id=&#34;ospf&#34;&gt;OSPF&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>RIP</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/routing-protocols/rip/</link>
      <pubDate>Thu, 06 Mar 2025 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/routing-protocols/rip/</guid>
      <description>&lt;h2 id=&#34;rip&#34;&gt;RIP&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>SFTP</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/file-transfer-protocols/sftp/</link>
      <pubDate>Thu, 06 Mar 2025 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/file-transfer-protocols/sftp/</guid>
      <description>&lt;h2 id=&#34;sftp&#34;&gt;SFTP&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>RDP</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/remote-access-protocols/rdp/</link>
      <pubDate>Thu, 06 Mar 2025 02:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/remote-access-protocols/rdp/</guid>
      <description>&lt;h2 id=&#34;rdp&#34;&gt;RDP&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>SMB</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/file-transfer-protocols/smb/</link>
      <pubDate>Thu, 06 Mar 2025 02:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/file-transfer-protocols/smb/</guid>
      <description>&lt;h2 id=&#34;smb&#34;&gt;SMB&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Telnet</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/remote-access-protocols/telnet/</link>
      <pubDate>Thu, 06 Mar 2025 02:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/remote-access-protocols/telnet/</guid>
      <description>&lt;h2 id=&#34;telnet&#34;&gt;Telnet&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Javascript Engines</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/javascript-engines/</link>
      <pubDate>Wed, 05 Mar 2025 09:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/javascript-engines/</guid>
      <description>&lt;h2 id=&#34;javascript-engines&#34;&gt;Javascript Engines&lt;/h2&gt;
&lt;p&gt;JavaScript 엔진은 JavaScript 코드를 이해하고 실행하는 프로그램이다.&lt;br&gt;
웹 브라우저나 Node.js와 같은 환경에서 JavaScript 코드를 해석하고 실행하는 핵심 요소이다.&lt;br&gt;
JavaScript는 원래 인터프리터 언어로 설계되었지만, 현대의 JavaScript 엔진들은 성능 향상을 위해 다양한 최적화 기술을 사용한다.&lt;/p&gt;
&lt;p&gt;JavaScript 엔진의 주요 역할:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript 코드를 읽고 구문 분석(파싱)&lt;/li&gt;
&lt;li&gt;코드를 기계어 또는 중간 표현으로 변환&lt;/li&gt;
&lt;li&gt;코드 실행&lt;/li&gt;
&lt;li&gt;메모리 관리 (가비지 컬렉션 포함)&lt;/li&gt;
&lt;li&gt;최적화 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JavaScript 엔진은 현대 웹의 핵심 구성 요소로, 웹 브라우저와 서버 측 애플리케이션 모두에서 JavaScript 코드를 실행하는 데 필수적이다. Google의 V8, Mozilla의 SpiderMonkey, Apple의 JavaScriptCore와 같은 주요 엔진들은 계속해서 발전하며, 성능을 향상시키고 새로운 언어 기능을 지원하고 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Async and Await</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/promises/async-and-await/</link>
      <pubDate>Tue, 04 Mar 2025 09:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/promises/async-and-await/</guid>
      <description>&lt;h2 id=&#34;async-and-await&#34;&gt;Async and Await&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Fiber</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/threads/fiber/</link>
      <pubDate>Wed, 12 Feb 2025 04:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/threads/fiber/</guid>
      <description>Fiber는 경량 스레드(Lightweight Thread)로 알려져 있으며, 운영 체제의 커널 수준이 아닌 사용자 공간에서 관리되는 실행 단위를 의미한다.</description>
    </item>
    <item>
      <title>Currying vs. Partial Application</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/currying-vs-partial-application/</link>
      <pubDate>Thu, 26 Dec 2024 10:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/currying-vs-partial-application/</guid>
      <description>&lt;h2 id=&#34;currying-vs-partial-application&#34;&gt;Currying vs. Partial Application&lt;/h2&gt;
&lt;p&gt;자바스크립트의 함수형 프로그래밍에서 가장 중요한 개념 중 두 가지는 커링(Currying)과 부분 적용(Partial Application)이다. 이 두 기법은 콜백 함수를 다루는 강력한 패턴으로, 코드의 재사용성과 모듈성을 크게 향상시킨다.&lt;/p&gt;
&lt;p&gt;커링과 부분 적용은 자바스크립트의 콜백 함수를 더 효과적으로 다루기 위한 강력한 기법이다.&lt;br&gt;
두 패턴 모두 함수의 재사용성을 높이고 코드를 더 모듈화하는 데 도움이 된다.&lt;/p&gt;
&lt;p&gt;두 기법의 핵심 차이는 인자 처리 방식과 최종 함수의 구조에 있다.&lt;br&gt;
커링은 항상 단일 인자 함수의 체인을 만들고, 부분 적용은 일부 인자를 고정한 새로운 함수를 만든다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Partial Application</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/partial-application/</link>
      <pubDate>Thu, 26 Dec 2024 09:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/partial-application/</guid>
      <description>부분 적용이란 여러 개의 인자를 받는 함수에 일부 인자를 미리 제공하여, 나머지 인자만 받는 새로운 함수를 생성하는 기법이다.</description>
    </item>
    <item>
      <title>Event Emitter</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/fundamentals/async-programming/event-loop/event-emitter/</link>
      <pubDate>Thu, 26 Dec 2024 08:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/fundamentals/async-programming/event-loop/event-emitter/</guid>
      <description>&lt;h2 id=&#34;event-emitter&#34;&gt;Event Emitter&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Memoization</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/memoization/</link>
      <pubDate>Thu, 26 Dec 2024 07:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/memoization/</guid>
      <description>&lt;h2 id=&#34;memoization&#34;&gt;Memoization&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Debouncing</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/debouncing/</link>
      <pubDate>Thu, 26 Dec 2024 07:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/debouncing/</guid>
      <description>&lt;h2 id=&#34;debouncing&#34;&gt;Debouncing&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Throttling</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/throttling/</link>
      <pubDate>Thu, 26 Dec 2024 07:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/throttling/</guid>
      <description>&lt;h2 id=&#34;throttling&#34;&gt;Throttling&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Currying</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/currying/</link>
      <pubDate>Thu, 26 Dec 2024 07:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/currying/</guid>
      <description>&lt;h2 id=&#34;currying&#34;&gt;Currying&lt;/h2&gt;
&lt;p&gt;커링(Currying)은 함수형 프로그래밍에서 유래한 중요한 개념으로, 여러 개의 인자를 받는 함수를 단일 인자를 받는 일련의 함수들로 변환하는 기법이다.&lt;br&gt;
이 기법은 수학자이자 논리학자인 하스켈 커리(Haskell Curry)의 이름을 따서 명명되었다.&lt;br&gt;
커링은 자바스크립트의 함수형 프로그래밍 패러다임에서 특히 유용하며, 함수 합성과 부분 적용을 가능하게 하는 강력한 도구이다.&lt;/p&gt;
&lt;p&gt;커링은 자바스크립트에서 함수형 프로그래밍을 구현하는 데 중요한 기법 중 하나이다.&lt;br&gt;
이 기법은 코드의 재사용성과 모듈성을 높이고, 함수 조합을 용이하게 하며, 복잡한 로직을 더 작고 관리하기 쉬운 단위로 분해하는 데 도움이 된다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tree Shaking</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/build-tools/module-bundlers/tree-shaking/</link>
      <pubDate>Thu, 26 Dec 2024 07:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/build-tools/module-bundlers/tree-shaking/</guid>
      <description>트리 쉐이킹(Tree Shaking)은 사용되지 않는 코드를 최종 번들에서 제거하는 프로세스</description>
    </item>
    <item>
      <title>Temporal Dead Zone</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/temporal-dead-zone/</link>
      <pubDate>Wed, 25 Dec 2024 15:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/temporal-dead-zone/</guid>
      <description>일시적 사각지대(Temporal Dead Zone, TDZ)는 JavaScript에서 변수가 선언되었지만 아직 초기화되지 않은 상태로 존재하는 코드 영역을 의미한다.</description>
    </item>
    <item>
      <title>Block</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/scopes/block/</link>
      <pubDate>Wed, 25 Dec 2024 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/scopes/block/</guid>
      <description>JavaScript에서 블록 스코프(Block Scope) 는 중괄호(`{}`)로 감싸진 코드 블록 내에서 선언된 변수나 함수가 해당 블록 내부에서만 유효한 범위를 의미한다</description>
    </item>
    <item>
      <title>Function</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/scopes/function/</link>
      <pubDate>Wed, 25 Dec 2024 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/scopes/function/</guid>
      <description>함수 스코프란 함수 내부에 선언된 변수와 함수가 해당 함수 내부에서만 접근 가능하다는 JavaScript의 특성을 의미한다.</description>
    </item>
    <item>
      <title>Global</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/scopes/global/</link>
      <pubDate>Wed, 25 Dec 2024 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/scopes/global/</guid>
      <description>자바스크립트에서 글로벌 스코프는 코드 전체에서 접근할 수 있는 가장 넓은 범위를 의미하며, 여기서 선언된 변수나 함수는 프로그램 전반에서 사용이 가능하다.</description>
    </item>
    <item>
      <title>Hoisting</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/hoisting/</link>
      <pubDate>Wed, 25 Dec 2024 14:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/hoisting/</guid>
      <description>JavaScript 엔진이 코드를 실행하기 전에 변수, 함수, 클래스 또는 임포트의 선언부를 스코프의 최상단으로 끌어올리는 것처럼 동작하는 JavaScript의 메커니즘으로, 이름 그대로 &amp;#39;끌어올린다(hoist)&amp;#39;는 의미를 가진다.</description>
    </item>
    <item>
      <title>Variable Declarations</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/variable-declarations/</link>
      <pubDate>Wed, 25 Dec 2024 14:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/variable-declarations/</guid>
      <description>프로그램에서 데이터를 저장하고 참조하는 데 사용되는 중요한 개념이다. 변수 선언 방식에 따라 변수의 **유효 범위(Scope)**와 **재할당 가능 여부** 등이 결정된다.</description>
    </item>
    <item>
      <title>변수 명명 규칙(Variable Naming Rules)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/naming-rules/</link>
      <pubDate>Wed, 25 Dec 2024 14:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/variables/naming-rules/</guid>
      <description>JavaScript의 변수 명명 규칙(Variable Naming Rules)</description>
    </item>
    <item>
      <title>Built-in objects</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/object/built-in-objects/</link>
      <pubDate>Wed, 25 Dec 2024 01:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/object/built-in-objects/</guid>
      <description>&lt;h2 id=&#34;built-in-objects&#34;&gt;Built-in objects&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Prototypal Inheritance</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/object/prototypal-inheritance/</link>
      <pubDate>Wed, 25 Dec 2024 01:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/object/prototypal-inheritance/</guid>
      <description>&lt;h2 id=&#34;prototypal-inheritance&#34;&gt;Prototypal Inheritance&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Prototypes</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/object/prototypes/</link>
      <pubDate>Wed, 25 Dec 2024 01:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/data-types/object/prototypes/</guid>
      <description>&lt;h2 id=&#34;prototypes&#34;&gt;Prototypes&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Type Casting</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/data-types/type-casting/</link>
      <pubDate>Tue, 24 Dec 2024 13:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/data-types/type-casting/</guid>
      <description>파이썬에서는 다양한 내장 함수를 사용하여 데이터 타입을 변환할 수 있다.</description>
    </item>
    <item>
      <title>ExpressJS vs. NestJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-nestjs/</link>
      <pubDate>Tue, 24 Dec 2024 10:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-nestjs/</guid>
      <description>&lt;h2 id=&#34;expressjs-vs-nestjs&#34;&gt;ExpressJS vs. NestJS&lt;/h2&gt;
&lt;p&gt;ExpressJS와 NestJS의 주요 특징들을 상세히 비교 분석하여 표로 정리해드리겠습니다.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;비교 기준&lt;/th&gt;
          &lt;th&gt;ExpressJS&lt;/th&gt;
          &lt;th&gt;NestJS&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;프레임워크 특성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;미니멀리스트, 유연한 Node.js 웹 프레임워크&lt;/td&gt;
          &lt;td&gt;TypeScript 기반의 구조화된 풀스택 프레임워크&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;아키텍처 스타일&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;자유로운 구조 (개발자가 직접 설계)&lt;/td&gt;
          &lt;td&gt;Angular 스타일의 모듈식 아키텍처 (강제됨)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;언어 지원&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;JavaScript 중심 (TypeScript도 사용 가능)&lt;/td&gt;
          &lt;td&gt;TypeScript 중심 (JavaScript도 사용 가능)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;학습 곡선&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;낮음 (시작하기 쉬움)&lt;/td&gt;
          &lt;td&gt;높음 (많은 개념과 패턴 학습 필요)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;기본 구조&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;최소한의 구조만 제공&lt;/td&gt;
          &lt;td&gt;모듈, 컨트롤러, 서비스 등 세분화된 구조&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;라우팅 예시&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;javascript app.get(&#39;/users&#39;, (req, res) =&amp;gt; { res.send(&#39;Users list&#39;); });&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;typescript @Controller(&#39;users&#39;) export class UsersController { @Get() findAll(): string { return &#39;Users list&#39;; } }&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;의존성 주입&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;없음 (수동으로 구현 필요)&lt;/td&gt;
          &lt;td&gt;내장된 강력한 DI 시스템 제공&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;데코레이터 지원&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;지원하지 않음&lt;/td&gt;
          &lt;td&gt;광범위한 데코레이터 지원&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;미들웨어 처리&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;직관적이고 단순한 미들웨어 체인&lt;/td&gt;
          &lt;td&gt;복잡하지만 강력한 미들웨어 시스템&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;테스트 용이성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;별도 테스트 도구 설정 필요&lt;/td&gt;
          &lt;td&gt;내장된 테스트 도구 제공&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;확장성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;수동 구성 필요&lt;/td&gt;
          &lt;td&gt;모듈 시스템을 통한 쉬운 확장&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;성능&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;매우 가벼움 (적은 오버헤드)&lt;/td&gt;
          &lt;td&gt;약간의 오버헤드 존재&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;실시간 처리&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;WebSocket 수동 구현 필요&lt;/td&gt;
          &lt;td&gt;WebSocket 데코레이터 제공&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;유효성 검사&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;외부 라이브러리 필요&lt;/td&gt;
          &lt;td&gt;내장 파이프를 통한 유효성 검사&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;문서화&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Swagger 등 수동 설정 필요&lt;/td&gt;
          &lt;td&gt;자동 API 문서 생성 지원&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;적합한 프로젝트&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;- 작은 규모의 프로젝트&lt;br&gt;- 빠른 프로토타이핑&lt;br&gt;- 마이크로서비스&lt;/td&gt;
          &lt;td&gt;- 대규모 엔터프라이즈 애플리케이션&lt;br&gt;- 복잡한 비즈니스 로직&lt;br&gt;- 팀 프로젝트&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;개발 생산성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;초기에는 빠르나 규모가 커지면 관리 어려움&lt;/td&gt;
          &lt;td&gt;초기 설정에 시간이 걸리나 장기적으로 생산성 높음&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;커뮤니티/생태계&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;매우 큰 커뮤니티, 풍부한 미들웨어&lt;/td&gt;
          &lt;td&gt;성장하는 커뮤니티, 내장 기능 많음&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;에러 처리&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;수동 구현 필요&lt;/td&gt;
          &lt;td&gt;내장된 예외 필터 시스템&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;데이터베이스 통합&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;ORM 선택 자유&lt;/td&gt;
          &lt;td&gt;TypeORM/Sequelize 등과 쉬운 통합&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;보안 기능&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;외부 미들웨어 필요&lt;/td&gt;
          &lt;td&gt;내장된 보안 기능 제공&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;모니터링/로깅&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;외부 도구 통합 필요&lt;/td&gt;
          &lt;td&gt;내장된 로깅 시스템 제공&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;선택 가이드:&lt;/p&gt;</description>
    </item>
    <item>
      <title>ExpressJS vs. FastAPI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-fastapi/</link>
      <pubDate>Tue, 24 Dec 2024 10:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-fastapi/</guid>
      <description>&lt;h2 id=&#34;expressjs-vs-fastapi&#34;&gt;ExpressJS vs. FastAPI&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>ExpressJS vs. Flask</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-flask/</link>
      <pubDate>Tue, 24 Dec 2024 10:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-flask/</guid>
      <description>&lt;h2 id=&#34;expressjs-vs-flask&#34;&gt;ExpressJS vs. Flask&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>ExpressJS vs. Django</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-django/</link>
      <pubDate>Tue, 24 Dec 2024 03:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/expressjs/expressjs-vs-django/</guid>
      <description>&lt;h2 id=&#34;expressjs-vs-django&#34;&gt;ExpressJS vs. Django&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>NodeJS vs. FastAPI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/nodejs-vs-fastapi/</link>
      <pubDate>Sun, 22 Dec 2024 10:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/nodejs-vs-fastapi/</guid>
      <description>&lt;h2 id=&#34;nodejs-vs-fastapi&#34;&gt;NodeJS vs. FastAPI&lt;/h2&gt;
&lt;p&gt;현대 웹 개발에서 백엔드 기술 선택은 프로젝트의 성공에 중요한 요소이다.&lt;br&gt;
Node.js와 FastAPI는 각각 JavaScript와 Python 생태계에서 인기 있는 백엔드 기술로, 서로 다른 접근 방식과 강점을 가지고 있다.&lt;/p&gt;
&lt;p&gt;Node.js는 오랜 기간 동안 검증된 기술로, 방대한 생태계와 JavaScript를 백엔드에서도 사용할 수 있는 일관성을 제공한다. 실시간 애플리케이션과 I/O 집약적 작업에 특히 뛰어나다.&lt;/p&gt;
&lt;p&gt;FastAPI는 비교적 새로운 프레임워크이지만, 현대적인 Python 기능을 최대한 활용하여 빠른 개발 속도, 뛰어난 개발자 경험, 자동 문서화와 데이터 검증을 제공한다. Python의 데이터 과학 생태계와 통합이 필요한 프로젝트에 특히 적합하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NodeJS vs. Flask</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/nodejs-vs-flask/</link>
      <pubDate>Sun, 22 Dec 2024 10:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/nodejs-vs-flask/</guid>
      <description>&lt;h2 id=&#34;nodejs-vs-flask&#34;&gt;NodeJS vs. Flask&lt;/h2&gt;
&lt;p&gt;Node.js와 Flask는 현대 웹 애플리케이션 개발에 널리 사용되는 두 가지 인기 있는 백엔드 기술이다.&lt;br&gt;
이 두 기술은 각각 다른 언어(JavaScript vs Python), 다른 철학, 그리고 서로 다른 접근 방식을 가지고 있다.&lt;/p&gt;
&lt;p&gt;Node.js와 Flask는 각각 고유한 강점과 약점을 가진 강력한 백엔드 기술이다.&lt;br&gt;
선택은 프로젝트의 요구사항, 팀의 전문성, 그리고 장기적인 목표에 따라 달라진다.&lt;/p&gt;
&lt;p&gt;Node.js는 실시간 기능, 높은 동시성, 그리고 JavaScript의 일관성을 활용하려는 프로젝트에 적합하다.&lt;br&gt;
특히 I/O 집약적인 애플리케이션과 실시간 웹 애플리케이션에서 강점을 보인다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ES Modules Vs CommonJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/modules/es-modules-vs-commonjs/</link>
      <pubDate>Sun, 22 Dec 2024 04:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/modules/es-modules-vs-commonjs/</guid>
      <description>ES Modules(ESM)과 CommonJS(CJS)는 JavaScript에서 사용되는 두 가지 주요 모듈 시스템이다.</description>
    </item>
    <item>
      <title>NodeJS vs. Django</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/nodejs-vs-django/</link>
      <pubDate>Sun, 22 Dec 2024 03:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/nodejs-vs-django/</guid>
      <description>&lt;h2 id=&#34;nodejs-vs-django&#34;&gt;NodeJS vs. Django&lt;/h2&gt;
&lt;p&gt;웹 개발에서 백엔드 프레임워크를 선택하는 것은 프로젝트의 성공에 중요한 요소이다. Node.js와 Django는 각각 다른 철학, 접근 방식, 그리고 강점을 가진 인기 있는 두 가지 백엔드 기술이다.&lt;/p&gt;
&lt;p&gt;Node.js와 Django는 각각 고유한 강점과 약점을 가진 강력한 백엔드 기술이다.&lt;br&gt;
선택은 프로젝트의 요구사항, 팀의 전문성, 그리고 장기적인 목표에 따라 달라진다.&lt;/p&gt;
&lt;p&gt;Node.js는 실시간 기능, 높은 동시성, 그리고 JavaScript의 일관성을 활용하려는 프로젝트에 적합하다.&lt;br&gt;
빠른 프로토타이핑, 견고한 데이터 모델링, 내장된 관리 기능이 필요한 프로젝트에는 Django가 더 적합할 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Django vs. Flask</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/web-framework/django/django-vs-flask/</link>
      <pubDate>Sun, 22 Dec 2024 03:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/web-framework/django/django-vs-flask/</guid>
      <description>&lt;h2 id=&#34;django-vs-flask&#34;&gt;Django vs. Flask&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>FastAPI vs. Django</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/web-framework/fastapi/fastapi-vs-django/</link>
      <pubDate>Sun, 22 Dec 2024 03:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/web-framework/fastapi/fastapi-vs-django/</guid>
      <description>&lt;h2 id=&#34;fastapi-vs-django&#34;&gt;FastAPI vs. Django&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>BunJS vs. NodeJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/bunjs/bunjs-vs-nodejs/</link>
      <pubDate>Sun, 22 Dec 2024 03:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/bunjs/bunjs-vs-nodejs/</guid>
      <description>서버 사이드 JavaScript 런타임인 BunJS와 NodeJS의 비교</description>
    </item>
    <item>
      <title>Boundaries</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-principles/boundaries/boundaries/</link>
      <pubDate>Sat, 21 Dec 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-principles/boundaries/boundaries/</guid>
      <description>&lt;h2 id=&#34;boundaries&#34;&gt;Boundaries&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Component Principles</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-principles/component-principles/component-principles/</link>
      <pubDate>Sat, 21 Dec 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-principles/component-principles/component-principles/</guid>
      <description>&lt;h2 id=&#34;component-principles&#34;&gt;Component Principles&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Coupling and Cohesion</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-principles/coupling-and-cohesion/coupling-and-cohesion/</link>
      <pubDate>Sat, 21 Dec 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-principles/coupling-and-cohesion/coupling-and-cohesion/</guid>
      <description>&lt;h2 id=&#34;coupling-and-cohesion&#34;&gt;Coupling and Cohesion&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Policy vs Detail</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-principles/policy-vs-detail/policy-vs-detail/</link>
      <pubDate>Sat, 21 Dec 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-principles/policy-vs-detail/policy-vs-detail/</guid>
      <description>&lt;h2 id=&#34;policy-vs-detail&#34;&gt;Policy vs Detail&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Publish Subscribe</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/messaging/publish-subscribe/publish-subscribe/</link>
      <pubDate>Sat, 21 Dec 2024 04:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/messaging/publish-subscribe/publish-subscribe/</guid>
      <description>&lt;h2 id=&#34;publish-subscribe&#34;&gt;Publish Subscribe&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Incremental Collection</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/algorithms/incremental-collection/</link>
      <pubDate>Fri, 20 Dec 2024 06:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/algorithms/incremental-collection/</guid>
      <description>&lt;h2 id=&#34;incremental-collection&#34;&gt;Incremental Collection&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Mark-Sweep</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/algorithms/mark-sweep/</link>
      <pubDate>Fri, 20 Dec 2024 06:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/algorithms/mark-sweep/</guid>
      <description>&lt;h2 id=&#34;mark-sweep&#34;&gt;Mark-Sweep&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Generational Collection</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/algorithms/generational-collection/</link>
      <pubDate>Fri, 20 Dec 2024 02:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/algorithms/generational-collection/</guid>
      <description>&lt;h2 id=&#34;generational-collection&#34;&gt;Generational Collection&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Reference Counting</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/algorithms/reference-counting/</link>
      <pubDate>Fri, 20 Dec 2024 02:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/algorithms/reference-counting/</guid>
      <description>&lt;h2 id=&#34;reference-counting&#34;&gt;Reference Counting&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Binary Tree vs Binary Search Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-tree-vs-binary-search-tree/</link>
      <pubDate>Thu, 19 Dec 2024 15:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-tree-vs-binary-search-tree/</guid>
      <description>&lt;h2 id=&#34;binary-tree-vs-binary-search-tree&#34;&gt;Binary Tree vs Binary Search Tree&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Treemap</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/treemap/</link>
      <pubDate>Thu, 19 Dec 2024 15:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/treemap/</guid>
      <description>&lt;h2 id=&#34;treemap&#34;&gt;Treemap&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Treeset</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/treeset/</link>
      <pubDate>Thu, 19 Dec 2024 15:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/treeset/</guid>
      <description>&lt;h2 id=&#34;treeset&#34;&gt;Treeset&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Binary Tree vs Heap</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-tree-vs-heap/</link>
      <pubDate>Thu, 19 Dec 2024 13:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-tree-vs-heap/</guid>
      <description>&lt;h2 id=&#34;binary-tree-vs-heap&#34;&gt;Binary Tree vs Heap&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Cartesian Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/cartesian-tree/</link>
      <pubDate>Thu, 19 Dec 2024 03:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/cartesian-tree/</guid>
      <description>&lt;h2 id=&#34;cartesian-tree&#34;&gt;Cartesian Tree&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>URL, Query &amp; Path Parameters</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/url-and-parameters/</link>
      <pubDate>Wed, 18 Dec 2024 16:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/url-and-parameters/</guid>
      <description>&lt;h2 id=&#34;url-query--path-parameters&#34;&gt;URL, Query &amp;amp; Path Parameters&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Content Negotiation</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/content-negotiation/</link>
      <pubDate>Wed, 18 Dec 2024 16:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/content-negotiation/</guid>
      <description>&lt;h2 id=&#34;content-negotiation&#34;&gt;Content Negotiation&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Eager Loading</title>
      <link>https://buenhyden.github.io/posts/frontend/eager-loading/</link>
      <pubDate>Wed, 18 Dec 2024 10:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/frontend/eager-loading/</guid>
      <description>&lt;h2 id=&#34;eager-loading&#34;&gt;Eager Loading&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Lazy Loading</title>
      <link>https://buenhyden.github.io/posts/frontend/lazy-loading/</link>
      <pubDate>Wed, 18 Dec 2024 10:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/frontend/lazy-loading/</guid>
      <description>&lt;h2 id=&#34;lazy-loading&#34;&gt;Lazy Loading&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Lazy Initialization</title>
      <link>https://buenhyden.github.io/posts/computer-science/fundamentals/lazy-initialization/</link>
      <pubDate>Wed, 18 Dec 2024 10:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/fundamentals/lazy-initialization/</guid>
      <description>&lt;h2 id=&#34;lazy-initialization&#34;&gt;Lazy Initialization&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>CIS</title>
      <link>https://buenhyden.github.io/posts/qa/standards-and-policies/cis/</link>
      <pubDate>Tue, 17 Dec 2024 03:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/standards-and-policies/cis/</guid>
      <description>&lt;h2 id=&#34;cis&#34;&gt;CIS&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>CSF</title>
      <link>https://buenhyden.github.io/posts/qa/standards-and-policies/csf/</link>
      <pubDate>Tue, 17 Dec 2024 03:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/standards-and-policies/csf/</guid>
      <description>&lt;h2 id=&#34;csf&#34;&gt;CSF&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>ISO</title>
      <link>https://buenhyden.github.io/posts/qa/standards-and-policies/iso/</link>
      <pubDate>Tue, 17 Dec 2024 03:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/standards-and-policies/iso/</guid>
      <description>&lt;h2 id=&#34;iso&#34;&gt;ISO&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>NIST</title>
      <link>https://buenhyden.github.io/posts/qa/standards-and-policies/nist/</link>
      <pubDate>Tue, 17 Dec 2024 03:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/standards-and-policies/nist/</guid>
      <description>&lt;h2 id=&#34;nist&#34;&gt;NIST&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>RMF</title>
      <link>https://buenhyden.github.io/posts/qa/standards-and-policies/rmf/</link>
      <pubDate>Tue, 17 Dec 2024 03:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/standards-and-policies/rmf/</guid>
      <description>&lt;h2 id=&#34;rmf&#34;&gt;RMF&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>CSRF</title>
      <link>https://buenhyden.github.io/posts/security/security-attacks/common-attacks/csrf/</link>
      <pubDate>Tue, 17 Dec 2024 03:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-attacks/common-attacks/csrf/</guid>
      <description>&lt;h2 id=&#34;csrf&#34;&gt;CSRF&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>DoS vs DDoS</title>
      <link>https://buenhyden.github.io/posts/security/security-attacks/common-attacks/dos-vs-ddos/</link>
      <pubDate>Tue, 17 Dec 2024 03:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-attacks/common-attacks/dos-vs-ddos/</guid>
      <description>&lt;h2 id=&#34;dos-vs-ddos&#34;&gt;DoS vs DDoS&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>MITM</title>
      <link>https://buenhyden.github.io/posts/security/security-attacks/common-attacks/mitm/</link>
      <pubDate>Tue, 17 Dec 2024 03:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-attacks/common-attacks/mitm/</guid>
      <description>&lt;h2 id=&#34;mitm&#34;&gt;MITM&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Spoofing</title>
      <link>https://buenhyden.github.io/posts/security/security-attacks/common-attacks/spoofing/</link>
      <pubDate>Tue, 17 Dec 2024 03:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-attacks/common-attacks/spoofing/</guid>
      <description>&lt;h2 id=&#34;spoofing&#34;&gt;Spoofing&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>SQL Injection</title>
      <link>https://buenhyden.github.io/posts/security/security-attacks/common-attacks/sql-injection/</link>
      <pubDate>Tue, 17 Dec 2024 03:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-attacks/common-attacks/sql-injection/</guid>
      <description>&lt;h2 id=&#34;sql-injection&#34;&gt;SQL Injection&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>XSS</title>
      <link>https://buenhyden.github.io/posts/security/security-attacks/common-attacks/xss/</link>
      <pubDate>Tue, 17 Dec 2024 03:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-attacks/common-attacks/xss/</guid>
      <description>&lt;h2 id=&#34;xss&#34;&gt;XSS&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Object-Relational Mapping</title>
      <link>https://buenhyden.github.io/posts/databases/more-about-databases/object-relational-mapping/</link>
      <pubDate>Mon, 16 Dec 2024 12:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/databases/more-about-databases/object-relational-mapping/</guid>
      <description>객체 지향 프로그래밍 언어와 관계형 데이터베이스 사이의 불일치를 해결하기 위한 기술</description>
    </item>
    <item>
      <title>RFC 9457</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/error-handling/rfc-9457/</link>
      <pubDate>Sun, 15 Dec 2024 14:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/error-handling/rfc-9457/</guid>
      <description>&lt;h2 id=&#34;rfc-9457&#34;&gt;RFC 9457&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>RFC 7807</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/error-handling/rfc-7807/</link>
      <pubDate>Sun, 15 Dec 2024 14:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/error-handling/rfc-7807/</guid>
      <description>&lt;h2 id=&#34;rfc-7807&#34;&gt;RFC 7807&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>UDP vs. TCP</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/udp/udp-vs-tcp/</link>
      <pubDate>Sun, 15 Dec 2024 03:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/udp/udp-vs-tcp/</guid>
      <description>&lt;h2 id=&#34;udp-vs-tcp&#34;&gt;UDP vs. TCP&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>CoAP</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/messaging-protocol/coap/</link>
      <pubDate>Sun, 15 Dec 2024 03:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/messaging-protocol/coap/</guid>
      <description>&lt;h2 id=&#34;coap-constrained-application-protocol&#34;&gt;CoAP (Constrained Application Protocol)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>SOAP</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/messaging-protocol/soap/</link>
      <pubDate>Sun, 15 Dec 2024 03:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/messaging-protocol/soap/</guid>
      <description>&lt;h2 id=&#34;soap-simple-object-access-protocol&#34;&gt;SOAP (Simple Object Access Protocol)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>STOMP</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/messaging-protocol/stomp/</link>
      <pubDate>Sun, 15 Dec 2024 03:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/messaging-protocol/stomp/</guid>
      <description>&lt;h2 id=&#34;stomp-simple-text-oriented-messaging-protocol&#34;&gt;STOMP (Simple Text Oriented Messaging Protocol)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>XMPP</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/messaging-protocol/xmpp/</link>
      <pubDate>Sun, 15 Dec 2024 03:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/messaging-protocol/xmpp/</guid>
      <description>&lt;h2 id=&#34;xmpp-extensible-messaging-and-presence-protocol&#34;&gt;XMPP (Extensible Messaging and Presence Protocol)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Guest OS</title>
      <link>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/virtualization/guest-os/</link>
      <pubDate>Sun, 15 Dec 2024 03:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/virtualization/guest-os/</guid>
      <description>&lt;h2 id=&#34;guest-os&#34;&gt;Guest OS&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Hypervisor</title>
      <link>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/virtualization/hypervisor/</link>
      <pubDate>Sun, 15 Dec 2024 03:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/virtualization/hypervisor/</guid>
      <description>&lt;h2 id=&#34;hypervisor&#34;&gt;Hypervisor&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>esxi</title>
      <link>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/virtualization/tools/esxi/</link>
      <pubDate>Sun, 15 Dec 2024 03:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/virtualization/tools/esxi/</guid>
      <description>&lt;h2 id=&#34;esxi&#34;&gt;esxi&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Host OS</title>
      <link>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/virtualization/host-os/</link>
      <pubDate>Sun, 15 Dec 2024 03:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/virtualization/host-os/</guid>
      <description>&lt;h2 id=&#34;host-os&#34;&gt;Host OS&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>proxmox</title>
      <link>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/virtualization/tools/proxmox/</link>
      <pubDate>Sun, 15 Dec 2024 03:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/virtualization/tools/proxmox/</guid>
      <description>&lt;h2 id=&#34;proxmox&#34;&gt;proxmox&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>VM</title>
      <link>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/virtualization/vm/</link>
      <pubDate>Sun, 15 Dec 2024 03:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/virtualization/vm/</guid>
      <description>&lt;h2 id=&#34;vm&#34;&gt;VM&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>2-3 trees</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/2-3-trees/</link>
      <pubDate>Sat, 14 Dec 2024 16:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/2-3-trees/</guid>
      <description>&lt;h2 id=&#34;2-3-trees&#34;&gt;2-3 trees&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>ISAM</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/isam/</link>
      <pubDate>Sat, 14 Dec 2024 16:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/isam/</guid>
      <description>&lt;h2 id=&#34;isam&#34;&gt;ISAM&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>https</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/https/</link>
      <pubDate>Sat, 14 Dec 2024 03:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/https/</guid>
      <description>&lt;h2 id=&#34;https&#34;&gt;https&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>DMARC</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/email-protocols/dmarc/</link>
      <pubDate>Sat, 14 Dec 2024 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/email-protocols/dmarc/</guid>
      <description>&lt;h2 id=&#34;dmarc&#34;&gt;DMARC&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Domain Keys</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/email-protocols/domain-keys/</link>
      <pubDate>Sat, 14 Dec 2024 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/email-protocols/domain-keys/</guid>
      <description>&lt;h2 id=&#34;domain-keys&#34;&gt;Domain Keys&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>IMAP</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/email-protocols/imap/</link>
      <pubDate>Sat, 14 Dec 2024 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/email-protocols/imap/</guid>
      <description>&lt;h2 id=&#34;imap&#34;&gt;IMAP&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Pop3s</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/email-protocols/pop3s/</link>
      <pubDate>Sat, 14 Dec 2024 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/email-protocols/pop3s/</guid>
      <description>&lt;h2 id=&#34;pop3s&#34;&gt;Pop3s&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>SMTP</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/email-protocols/smtp/</link>
      <pubDate>Sat, 14 Dec 2024 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/email-protocols/smtp/</guid>
      <description>&lt;h2 id=&#34;smtp&#34;&gt;SMTP&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>SPF</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/email-protocols/spf/</link>
      <pubDate>Sat, 14 Dec 2024 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/email-protocols/spf/</guid>
      <description>&lt;h2 id=&#34;spf&#34;&gt;SPF&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>White Listing vs Grey Listing</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/email-protocols/white-listing-vs-grey-listing/</link>
      <pubDate>Sat, 14 Dec 2024 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/email-protocols/white-listing-vs-grey-listing/</guid>
      <description>&lt;h2 id=&#34;white-listing-vs-grey-listing&#34;&gt;White Listing vs Grey Listing&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Boyer Moore Algorithm</title>
      <link>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/substring-search/boyer-moore-algorithm/</link>
      <pubDate>Fri, 13 Dec 2024 03:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/substring-search/boyer-moore-algorithm/</guid>
      <description>&lt;h2 id=&#34;boyer-moore-algorithm&#34;&gt;Boyer Moore Algorithm&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Brute Force Search</title>
      <link>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/substring-search/brute-force-search/</link>
      <pubDate>Fri, 13 Dec 2024 03:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/substring-search/brute-force-search/</guid>
      <description>&lt;h2 id=&#34;brute-force-search&#34;&gt;Brute Force Search&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Knuth Morris Pratt</title>
      <link>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/substring-search/knuth-morris-pratt/</link>
      <pubDate>Fri, 13 Dec 2024 03:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/substring-search/knuth-morris-pratt/</guid>
      <description>&lt;h2 id=&#34;knuth-morris-pratt&#34;&gt;Knuth Morris Pratt&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Rabin-Karp’s algorithm</title>
      <link>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/substring-search/rabin-karps-algorithm/</link>
      <pubDate>Fri, 13 Dec 2024 03:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/substring-search/rabin-karps-algorithm/</guid>
      <description>&lt;h2 id=&#34;rabin-karps-algorithm&#34;&gt;Rabin-Karp’s algorithm&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Exponential Time</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/exponential-time/</link>
      <pubDate>Thu, 12 Dec 2024 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/exponential-time/</guid>
      <description>&lt;h2 id=&#34;exponential-time&#34;&gt;Exponential Time&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Logarithmic Space</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/logarithmic-space/</link>
      <pubDate>Thu, 12 Dec 2024 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/logarithmic-space/</guid>
      <description>&lt;h2 id=&#34;logarithmic-space&#34;&gt;Logarithmic Space&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>NP-Hard</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/np-hard/</link>
      <pubDate>Thu, 12 Dec 2024 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/np-hard/</guid>
      <description>&lt;h2 id=&#34;np-hard&#34;&gt;NP-Hard&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Polynomial Space</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/polynomial-space/</link>
      <pubDate>Thu, 12 Dec 2024 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/polynomial-space/</guid>
      <description>&lt;h2 id=&#34;polynomial-space&#34;&gt;Polynomial Space&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Nondeterministic Polynomial Time</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/nondeterministic-polynomial-time/</link>
      <pubDate>Thu, 12 Dec 2024 14:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/nondeterministic-polynomial-time/</guid>
      <description>&lt;h2 id=&#34;nondeterministic-polynomial-time&#34;&gt;Nondeterministic Polynomial Time&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Polynomial Time</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/polynomial-time/</link>
      <pubDate>Thu, 12 Dec 2024 14:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/polynomial-time/</guid>
      <description>&lt;h2 id=&#34;polynomial-time&#34;&gt;Polynomial Time&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Knapsack Problem</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/np-complete/knapsack-problem/</link>
      <pubDate>Thu, 12 Dec 2024 05:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/np-complete/knapsack-problem/</guid>
      <description>&lt;h2 id=&#34;knapsack-problem&#34;&gt;Knapsack Problem&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Longest Path Problem</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/np-complete/longest-path-problem/</link>
      <pubDate>Thu, 12 Dec 2024 05:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/np-complete/longest-path-problem/</guid>
      <description>&lt;h2 id=&#34;longest-path-problem&#34;&gt;Longest Path Problem&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Travelling Salesman Problem</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/np-complete/travelling-salesman-problem/</link>
      <pubDate>Thu, 12 Dec 2024 05:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/np-complete/travelling-salesman-problem/</guid>
      <description>&lt;h2 id=&#34;travelling-salesman-problem&#34;&gt;Travelling Salesman Problem&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Rabin-Karp’s algorithm</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/rabin-karps-algorithm/</link>
      <pubDate>Wed, 11 Dec 2024 04:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/rabin-karps-algorithm/</guid>
      <description>&lt;h2 id=&#34;rabin-karps-algorithm&#34;&gt;Rabin-Karp’s algorithm&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Finding Hamiltonian Paths</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/finding-hamiltonian-paths/</link>
      <pubDate>Wed, 11 Dec 2024 04:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/finding-hamiltonian-paths/</guid>
      <description>&lt;h2 id=&#34;finding-hamiltonian-paths&#34;&gt;Finding Hamiltonian Paths&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Huffman Coding</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/huffman-coding/</link>
      <pubDate>Wed, 11 Dec 2024 04:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/huffman-coding/</guid>
      <description>&lt;h2 id=&#34;huffman-coding&#34;&gt;Huffman Coding&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Knight’s Tour Problem</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/knights-tour-problem/</link>
      <pubDate>Wed, 11 Dec 2024 04:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/knights-tour-problem/</guid>
      <description>&lt;h2 id=&#34;knights-tour-problem&#34;&gt;Knight’s Tour Problem&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Maze Solving Problem</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/maze-solving-problem/</link>
      <pubDate>Wed, 11 Dec 2024 04:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/maze-solving-problem/</guid>
      <description>&lt;h2 id=&#34;maze-solving-problem&#34;&gt;Maze Solving Problem&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Solving n Queen Problem</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/solving-n-queen-problem/</link>
      <pubDate>Wed, 11 Dec 2024 04:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/solving-n-queen-problem/</guid>
      <description>&lt;h2 id=&#34;solving-n-queen-problem&#34;&gt;Solving n Queen Problem&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Ford Fulkerson Algorithm</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/ford-fulkerson-algorithm/</link>
      <pubDate>Wed, 11 Dec 2024 04:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/ford-fulkerson-algorithm/</guid>
      <description>&lt;h2 id=&#34;ford-fulkerson-algorithm&#34;&gt;Ford Fulkerson Algorithm&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Floyd-Warshall Algorithm</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/shortest-path/floyd-warshall-algorithm/</link>
      <pubDate>Tue, 10 Dec 2024 13:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/shortest-path/floyd-warshall-algorithm/</guid>
      <description>&lt;h2 id=&#34;floyd-warshall-algorithm&#34;&gt;Floyd-Warshall Algorithm&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>A* Algorithm</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/shortest-path/a-algorithm/</link>
      <pubDate>Tue, 10 Dec 2024 04:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/shortest-path/a-algorithm/</guid>
      <description>&lt;h2 id=&#34;a-algorithm&#34;&gt;A* Algorithm&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Bellman Ford algorithm</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/shortest-path/bellman-ford-algorithm/</link>
      <pubDate>Tue, 10 Dec 2024 04:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/shortest-path/bellman-ford-algorithm/</guid>
      <description>&lt;h2 id=&#34;bellman-ford-algorithm&#34;&gt;Bellman Ford algorithm&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Kruskal’s Algorithm</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/minimum-spanning-tree/kruskals-algorithm/</link>
      <pubDate>Tue, 10 Dec 2024 04:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/minimum-spanning-tree/kruskals-algorithm/</guid>
      <description>&lt;h2 id=&#34;kruskals-algorithm&#34;&gt;Kruskal’s Algorithm&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Prim’s Algorithm</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/minimum-spanning-tree/prims-algorithm/</link>
      <pubDate>Tue, 10 Dec 2024 04:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/minimum-spanning-tree/prims-algorithm/</guid>
      <description>&lt;h2 id=&#34;prims-algorithm&#34;&gt;Prim’s Algorithm&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Dijkstra’s Algorithm</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/shortest-path/dijkstras-algorithm/</link>
      <pubDate>Tue, 10 Dec 2024 04:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/shortest-path/dijkstras-algorithm/</guid>
      <description>&lt;h2 id=&#34;dijkstras-algorithm&#34;&gt;Dijkstra’s Algorithm&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Searching Algorithm 비교</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/searching/searching-algorithm-%EB%B9%84%EA%B5%90/</link>
      <pubDate>Mon, 09 Dec 2024 16:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/searching/searching-algorithm-%EB%B9%84%EA%B5%90/</guid>
      <description>&lt;h2 id=&#34;searching-algorithm-비교&#34;&gt;Searching Algorithm 비교&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Back Tracking vs. Traversal</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/back-tracking/back-tracking-vs-traversal/</link>
      <pubDate>Mon, 09 Dec 2024 14:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/back-tracking/back-tracking-vs-traversal/</guid>
      <description>백트래킹과 트래버설은 유사한 점이 있지만, 목적, 동작 방식, 응용 분야에서 중요한 차이점을 가지고 있다.</description>
    </item>
    <item>
      <title>Heap vs. Arranged Array</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/heap/heap-vs-arranged-array/</link>
      <pubDate>Mon, 09 Dec 2024 13:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/heap/heap-vs-arranged-array/</guid>
      <description>&lt;h2 id=&#34;heap-vs-arranged-array&#34;&gt;Heap vs. Arranged Array&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Heap vs. Binary Search Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/heap/heap-vs-binary-search-tree/</link>
      <pubDate>Mon, 09 Dec 2024 13:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/heap/heap-vs-binary-search-tree/</guid>
      <description>&lt;h2 id=&#34;heap-vs-binary-search-tree&#34;&gt;Heap vs. Binary Search Tree&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Heap vs. Queue</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/heap/heap-vs-queue/</link>
      <pubDate>Mon, 09 Dec 2024 13:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/heap/heap-vs-queue/</guid>
      <description>&lt;h2 id=&#34;heap-vs-queue&#34;&gt;Heap vs. Queue&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Greedy Algorithm vs. Approximation algorithm</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/greedy-algorithm/greedy-algorithm-vs-approximation-algorithm/</link>
      <pubDate>Mon, 09 Dec 2024 10:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/greedy-algorithm/greedy-algorithm-vs-approximation-algorithm/</guid>
      <description>&lt;h2 id=&#34;greedy-algorithm-vs-approximation-algorithm&#34;&gt;Greedy Algorithm vs. Approximation algorithm&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Back tracking vs. Branch and Bound</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/back-tracking/back-tracking-vs-branch-and-bound/</link>
      <pubDate>Mon, 09 Dec 2024 10:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/back-tracking/back-tracking-vs-branch-and-bound/</guid>
      <description>백트래킹(Backtracking)과 분기한정법(Branch and Bound)은 조합 최적화 문제를 해결하기 위한 두 가지 중요한 알고리즘 설계 패러다임이다.  두 기법 모두 모든 가능한 해결책을 체계적으로 탐색하지만, 그 접근 방식과 최적화 전략에는 중요한 차이가 있다.</description>
    </item>
    <item>
      <title>꼬리 재귀(Tail Recursion)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/recursion/tail-recursion/</link>
      <pubDate>Mon, 09 Dec 2024 09:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/recursion/tail-recursion/</guid>
      <description>Tail Recursion는 재귀 함수의 마지막 연산이 재귀 호출 자체인 특별한 형태의 재귀이다.</description>
    </item>
    <item>
      <title>비꼬리 재귀(Non-tail Recursion)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/recursion/non-tail-recursion/</link>
      <pubDate>Mon, 09 Dec 2024 09:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/recursion/non-tail-recursion/</guid>
      <description>Non-tail Recursion는 재귀 호출이 함수의 마지막 연산이 아닌 형태의 재귀를 의미한다</description>
    </item>
    <item>
      <title>Dynamic Programming vs. Divide and Conquer</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/dynamic-programming/dynamic-programming-vs-divide-and-conquer/</link>
      <pubDate>Mon, 09 Dec 2024 05:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/dynamic-programming/dynamic-programming-vs-divide-and-conquer/</guid>
      <description>&lt;h2 id=&#34;dynamic-programming-vs-divide-and-conquer&#34;&gt;Dynamic Programming vs. Divide and Conquer&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>tail Recursion vs. Non-tail Recursion</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/recursion/tail-recursion-vs-non-tail-recursion/</link>
      <pubDate>Mon, 09 Dec 2024 00:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/recursion/tail-recursion-vs-non-tail-recursion/</guid>
      <description>재귀 호출이 함수의 마지막 연산으로 수행되는지 여부에 따라 Tail Recursion(꼬리 재귀)과 Non-Tail Recursion(비꼬리 재귀)으로 구분된다.</description>
    </item>
    <item>
      <title>Binary Search Tree vs. Array</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-search-tree/binary-search-tree-vs-array/</link>
      <pubDate>Sun, 08 Dec 2024 13:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-search-tree/binary-search-tree-vs-array/</guid>
      <description>&lt;h2 id=&#34;binary-search-tree-vs-array&#34;&gt;Binary Search Tree vs. Array&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Binary Search Tree vs. Hash Table</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-search-tree/binary-search-tree-vs-hash-table/</link>
      <pubDate>Sun, 08 Dec 2024 13:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-search-tree/binary-search-tree-vs-hash-table/</guid>
      <description>&lt;h2 id=&#34;binary-search-tree-vs-hash-table&#34;&gt;Binary Search Tree vs. Hash Table&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Binary Search Tree vs. Linked List</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-search-tree/binary-search-tree-vs-linked-list/</link>
      <pubDate>Sun, 08 Dec 2024 13:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-search-tree/binary-search-tree-vs-linked-list/</guid>
      <description>&lt;h2 id=&#34;binary-search-tree-vs-linked-list&#34;&gt;Binary Search Tree vs. Linked List&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Balance Factor</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-search-tree/balance-factor/</link>
      <pubDate>Sun, 08 Dec 2024 13:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-search-tree/balance-factor/</guid>
      <description>&lt;h2 id=&#34;balance-factor&#34;&gt;Balance Factor&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Stack vs. Array</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/stack/stack-vs-array/</link>
      <pubDate>Sun, 08 Dec 2024 13:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/stack/stack-vs-array/</guid>
      <description>&lt;h2 id=&#34;stack-vs-array&#34;&gt;Stack vs. Array&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Stack vs. Linked List</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/stack/stack-vs-linked-list/</link>
      <pubDate>Sun, 08 Dec 2024 13:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/stack/stack-vs-linked-list/</guid>
      <description>&lt;h2 id=&#34;stack-vs-linked-list&#34;&gt;Stack vs. Linked List&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Collision resolutions</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/hash-tables/collision-resolutions/</link>
      <pubDate>Sun, 08 Dec 2024 13:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/hash-tables/collision-resolutions/</guid>
      <description>해시 테이블(Hash Table)은 키(Key)를 해시 함수(Hash Function)에 적용하여 특정 인덱스(Index)에 데이터를 저장하는 자료구조이다.  그러나 서로 다른 키가 같은 해시 인덱스로 매핑되는 경우가 발생할 수 있으며, 이를 충돌(Collision) 이라고 한다.</description>
    </item>
    <item>
      <title>Load Factor</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/hash-tables/load-factor/</link>
      <pubDate>Sun, 08 Dec 2024 13:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/hash-tables/load-factor/</guid>
      <description>&lt;h2 id=&#34;load-factor&#34;&gt;Load Factor&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Stack vs Queue</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/stack/stack-vs-queue/</link>
      <pubDate>Sun, 08 Dec 2024 08:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/stack/stack-vs-queue/</guid>
      <description>스택(Stack)과 큐(Queue)는 컴퓨터 과학에서 널리 사용되는 선형 자료구조로, 데이터의 저장 및 처리 방식에서 차이가 있다.</description>
    </item>
    <item>
      <title>Dynamic Array vs. Hash Table</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/array/dynamic-array/dynamic-array-vs-hash-table/</link>
      <pubDate>Sat, 07 Dec 2024 10:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/array/dynamic-array/dynamic-array-vs-hash-table/</guid>
      <description>&lt;h2 id=&#34;dynamic-array-vs-hash-table&#34;&gt;Dynamic Array vs. Hash Table&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Dynamic Array vs. Linked List</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/array/dynamic-array/dynamic-array-vs-linked-list/</link>
      <pubDate>Sat, 07 Dec 2024 10:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/array/dynamic-array/dynamic-array-vs-linked-list/</guid>
      <description>&lt;h2 id=&#34;dynamic-array-vs-linked-list&#34;&gt;Dynamic Array vs. Linked List&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>B Tree vs. AVL Tree vs. Red-Black Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/b-tree/b-tree-vs-avl-tree-vs-red-black-tree/</link>
      <pubDate>Sat, 07 Dec 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/b-tree/b-tree-vs-avl-tree-vs-red-black-tree/</guid>
      <description>&lt;h2 id=&#34;b-tree-vs-avl-tree-vs-red-black-tree&#34;&gt;B Tree vs. AVL Tree vs. Red-Black Tree&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>B Tree vs. Hash Table</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/b-tree/b-tree-vs-hash-table/</link>
      <pubDate>Sat, 07 Dec 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/b-tree/b-tree-vs-hash-table/</guid>
      <description>&lt;h2 id=&#34;b-tree-vs-hash-table&#34;&gt;B Tree vs. Hash Table&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>B Tree vs. Binary Search Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/b-tree/b-tree-vs-binary-search-tree/</link>
      <pubDate>Sat, 07 Dec 2024 04:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/b-tree/b-tree-vs-binary-search-tree/</guid>
      <description>&lt;h2 id=&#34;b-tree-vs-binary-search-tree&#34;&gt;B Tree vs. Binary Search Tree&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Spanning Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/graph/types/spanning-tree/</link>
      <pubDate>Sat, 07 Dec 2024 03:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/graph/types/spanning-tree/</guid>
      <description>스패닝 트리(Spanning Tree) 는 무방향 그래프(Undirected Graph)의 모든 정점을 포함하면서, 사이클 없이 연결된 부분 그래프이다.</description>
    </item>
    <item>
      <title>무방향 그래프(Undirected Graph)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/graph/types/undirected-graph/</link>
      <pubDate>Sat, 07 Dec 2024 03:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/graph/types/undirected-graph/</guid>
      <description>무방향 그래프(Undirected Graph) 는 각 간선(Edge)에 방향성이 없는 그래프이다.</description>
    </item>
    <item>
      <title>방향 그래프(Directed Graph)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/graph/types/directed-graph/</link>
      <pubDate>Sat, 07 Dec 2024 03:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/graph/types/directed-graph/</guid>
      <description>방향 그래프(Directed Graph, Digraph) 는 각 간선(Edge)에 방향성이 부여된 그래프이다.</description>
    </item>
    <item>
      <title>Asymptotic Notation</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithmic-complexity/asymptotic-notation/</link>
      <pubDate>Fri, 06 Dec 2024 10:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithmic-complexity/asymptotic-notation/</guid>
      <description>점근적 표기법은 알고리즘의 효율성을 수학적으로 표현하는 방법으로, 입력 크기가 무한히 커질 때 알고리즘의 성능이 어떻게 변화하는지를 나타낸다.</description>
    </item>
    <item>
      <title>Python vs Javascript vs Typescript vs Java</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python-vs-javascript-vs-typescript-vs-java/</link>
      <pubDate>Fri, 06 Dec 2024 00:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python-vs-javascript-vs-typescript-vs-java/</guid>
      <description>프로그래밍 언어마다 각기 다른 설계 철학과 실행 방식, 개발 생태계 및 목적이 존재한다.</description>
    </item>
    <item>
      <title>Typescript vs. Javascript</title>
      <link>https://buenhyden.github.io/posts/programming-languages/typescript/typescript-vs-javascript/</link>
      <pubDate>Fri, 06 Dec 2024 00:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/typescript/typescript-vs-javascript/</guid>
      <description>JavaScript와 TypeScript는 둘 다 웹 및 기타 환경에서 널리 사용되는 프로그래밍 언어이지만, 설계와 사용 목적에 있어 몇 가지 중요한 차이가 있다.</description>
    </item>
    <item>
      <title>asyncio</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/concurrency/asynchrony/asyncio/</link>
      <pubDate>Thu, 05 Dec 2024 06:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/concurrency/asynchrony/asyncio/</guid>
      <description>Python의 `asyncio`는 비동기 I/O 프로그래밍을 지원하는 표준 라이브러리로, `async/await` 구문을 활용해 동시성 코드를 작성할 수 있게 해 준다. 특히 I/O 바운드 작업(네트워크 통신, 파일 입출력 등)에서 성능을 극대화할 수 있다.</description>
    </item>
    <item>
      <title>Greenlet and Gevent</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/library/concurrency-and-parallel-processing/greenlet-and-gevent/</link>
      <pubDate>Thu, 05 Dec 2024 05:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/library/concurrency-and-parallel-processing/greenlet-and-gevent/</guid>
      <description>Greenlet과 Gevent는 Python에서 동시성 프로그래밍을 위한 라이브러리이다.</description>
    </item>
    <item>
      <title>SEO(Search Engine Optimization)</title>
      <link>https://buenhyden.github.io/posts/frontend/html/seo/</link>
      <pubDate>Mon, 02 Dec 2024 12:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/frontend/html/seo/</guid>
      <description>검색 엔진 최적화를 의미하며, 웹사이트나 콘텐츠를 검색 엔진의 검색 결과에서 상위에 노출시키기 위한 전략과 기술</description>
    </item>
    <item>
      <title>DOM</title>
      <link>https://buenhyden.github.io/posts/frontend/html/dom/</link>
      <pubDate>Mon, 02 Dec 2024 06:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/frontend/html/dom/</guid>
      <description>HTML이나 XML 문서의 구조를 표현하는 프로그래밍 인터페이스.</description>
    </item>
    <item>
      <title>CSR</title>
      <link>https://buenhyden.github.io/posts/frontend/fundamentals/csr/</link>
      <pubDate>Mon, 02 Dec 2024 03:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/frontend/fundamentals/csr/</guid>
      <description>웹 애플리케이션에서 클라이언트 측, 즉 사용자의 웹 브라우저에서 JavaScript를 사용하여 웹 페이지를 렌더링하는 방식</description>
    </item>
    <item>
      <title>LESS</title>
      <link>https://buenhyden.github.io/posts/frontend/stylesheet/less/</link>
      <pubDate>Sun, 01 Dec 2024 06:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/frontend/stylesheet/less/</guid>
      <description>LESS는 CSS를 더 효율적으로 작성할 수 있게 해주는 전처리기(preprocessor)</description>
    </item>
    <item>
      <title>PostCSS</title>
      <link>https://buenhyden.github.io/posts/frontend/stylesheet/postcss/</link>
      <pubDate>Sun, 01 Dec 2024 06:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/frontend/stylesheet/postcss/</guid>
      <description>JavaScript 플러그인을 사용하여 CSS를 변환하는 강력한 도구</description>
    </item>
    <item>
      <title>SASS</title>
      <link>https://buenhyden.github.io/posts/frontend/stylesheet/sass/</link>
      <pubDate>Sun, 01 Dec 2024 06:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/frontend/stylesheet/sass/</guid>
      <description>Sass는 CSS를 더 강력하고 우아하게 작성할 수 있게 해주는 전처리기</description>
    </item>
    <item>
      <title>HTML tag</title>
      <link>https://buenhyden.github.io/posts/frontend/html/html-tag/</link>
      <pubDate>Sun, 01 Dec 2024 03:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/frontend/html/html-tag/</guid>
      <description>HTML 태그는 웹 페이지의 구조와 콘텐츠를 정의하는 핵심 요소이다.</description>
    </item>
    <item>
      <title>SQLAlchemy</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/library/database/sqlalchemy/</link>
      <pubDate>Sat, 30 Nov 2024 09:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/library/database/sqlalchemy/</guid>
      <description>파이썬에서 사용되는 강력하고 유연한 SQL 툴킷 및 객체 관계 매핑(ORM) 라이브러리</description>
    </item>
    <item>
      <title>daphne</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/library/web-application-server/daphne/</link>
      <pubDate>Sat, 30 Nov 2024 08:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/library/web-application-server/daphne/</guid>
      <description>Daphne는 Django Channels를 위해 개발된 HTTP, HTTP2 및 WebSocket 프로토콜 서버이다.</description>
    </item>
    <item>
      <title>uvicorn</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/library/web-application-server/uvicorn/</link>
      <pubDate>Sat, 30 Nov 2024 08:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/library/web-application-server/uvicorn/</guid>
      <description>Uvicorn은 Python용 ASGI(Asynchronous Server Gateway Interface) 웹 서버 구현체이다.</description>
    </item>
    <item>
      <title>Modin</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/library/data-analysis/modin/</link>
      <pubDate>Sat, 30 Nov 2024 07:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/library/data-analysis/modin/</guid>
      <description>pandas를 대체할 수 있는 고성능 데이터프레임 라이브러리</description>
    </item>
    <item>
      <title>Dask</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/library/data-analysis/dask/</link>
      <pubDate>Sat, 30 Nov 2024 07:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/library/data-analysis/dask/</guid>
      <description>파이썬을 위한 유연한 병렬 컴퓨팅 라이브러리</description>
    </item>
    <item>
      <title>Polars</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/library/data-analysis/polars/</link>
      <pubDate>Sat, 30 Nov 2024 07:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/library/data-analysis/polars/</guid>
      <description>고성능 데이터 처리를 위해 설계된 파이썬 DataFrame 라이브러리</description>
    </item>
    <item>
      <title>gunicorn</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/library/web-application-server/gunicorn/</link>
      <pubDate>Sat, 30 Nov 2024 03:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/library/web-application-server/gunicorn/</guid>
      <description>Gunicorn(Green Unicorn)은 Python WSGI(Web Server Gateway Interface) HTTP 서버로, 파이썬 웹 애플리케이션을 위한 강력하고 효율적인 서버 솔루션이다.</description>
    </item>
    <item>
      <title>UWSGI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/library/web-application-server/uwsgi/</link>
      <pubDate>Sat, 30 Nov 2024 03:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/library/web-application-server/uwsgi/</guid>
      <description>파이썬 웹 애플리케이션을 위한 강력하고 유연한 애플리케이션 서버</description>
    </item>
    <item>
      <title>pydantic</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/library/static-typing/pydantic/</link>
      <pubDate>Sat, 30 Nov 2024 03:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/library/static-typing/pydantic/</guid>
      <description>데이터 검증과 설정 관리를 위한 라이브러리</description>
    </item>
    <item>
      <title>ruff</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/linter-and-formatter/ruff/</link>
      <pubDate>Thu, 28 Nov 2024 08:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/linter-and-formatter/ruff/</guid>
      <description>Python 코드 품질을 개선하기 위한 린터</description>
    </item>
    <item>
      <title>autopep8</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/linter-and-formatter/autopep8/</link>
      <pubDate>Thu, 28 Nov 2024 03:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/linter-and-formatter/autopep8/</guid>
      <description>Python 코드를 PEP 8 스타일 가이드라인에 맞게 자동으로 포맷팅해주는 도구</description>
    </item>
    <item>
      <title>Black</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/linter-and-formatter/black/</link>
      <pubDate>Thu, 28 Nov 2024 03:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/linter-and-formatter/black/</guid>
      <description>파이썬을 위한 강력하고 엄격한 코드 포매터</description>
    </item>
    <item>
      <title>Flake8</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/linter-and-formatter/flake8/</link>
      <pubDate>Thu, 28 Nov 2024 03:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/linter-and-formatter/flake8/</guid>
      <description>파이썬 코드를 위한 강력한 린팅(linting) 도구</description>
    </item>
    <item>
      <title>YAPF(Yet Another Python Formatter)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/linter-and-formatter/yapf/</link>
      <pubDate>Thu, 28 Nov 2024 03:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/linter-and-formatter/yapf/</guid>
      <description>Google에서 개발한 파이썬 코드 포매터.</description>
    </item>
    <item>
      <title>Pylint</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/linter-and-formatter/pylint/</link>
      <pubDate>Thu, 28 Nov 2024 03:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/linter-and-formatter/pylint/</guid>
      <description>파이썬 코드의 품질을 검사하고 개선하는데 도움을 주는 강력한 정적 코드 분석 도구</description>
    </item>
    <item>
      <title>ASGI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/gateway-interface/asgi/</link>
      <pubDate>Thu, 28 Nov 2024 03:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/gateway-interface/asgi/</guid>
      <description>Python 웹 애플리케이션과 웹 서버 간의 비동기 통신을 위한 표준 인터페이스</description>
    </item>
    <item>
      <title>CGI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/gateway-interface/cgi/</link>
      <pubDate>Thu, 28 Nov 2024 03:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/gateway-interface/cgi/</guid>
      <description>웹 서버와 외부 프로그램 간의 통신을 위한 표준 인터페이스</description>
    </item>
    <item>
      <title>WSGI</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/gateway-interface/wsgi/</link>
      <pubDate>Thu, 28 Nov 2024 03:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/gateway-interface/wsgi/</guid>
      <description>파이썬 웹 애플리케이션과 웹 서버 간의 표준 인터페이스를 정의하는 규약</description>
    </item>
    <item>
      <title>setup.cfg</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/configuration/setup.cfg/</link>
      <pubDate>Wed, 27 Nov 2024 14:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/configuration/setup.cfg/</guid>
      <description>파이썬 프로젝트의 설정을 관리하는 구성 파일</description>
    </item>
    <item>
      <title>Poetry Configuration</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/poetry/poetry-configuration/</link>
      <pubDate>Wed, 27 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/poetry/poetry-configuration/</guid>
      <description>`config` 명령어나 `config.toml` 파일을 통해 설정할 수 있다.</description>
    </item>
    <item>
      <title>Poetry Libraries</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/poetry/poetry-libraries/</link>
      <pubDate>Wed, 27 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/poetry/poetry-libraries/</guid>
      <description>Poetry는 파이썬 라이브러리를 효율적으로 관리하고 배포할 수 있도록 지원하는 도구로 라이브러리를 설치 가능하게 만들기 위해 다음과 같은 절차를 따를 수 있다.</description>
    </item>
    <item>
      <title>Poetry Managing dependencies</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/poetry/poetry-managing-dependencies/</link>
      <pubDate>Wed, 27 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/poetry/poetry-managing-dependencies/</guid>
      <description>Poetry는 의존성을 효율적으로 관리하기 위해 다양한 기능을 제공한다.</description>
    </item>
    <item>
      <title>Poetry Usage</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/poetry/poetry-usage/</link>
      <pubDate>Wed, 27 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/poetry/poetry-usage/</guid>
      <description>Python 프로젝트의 의존성 관리와 패키징을 위한 도구</description>
    </item>
    <item>
      <title>The pyproject.toml file</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/configuration/the-pyproject.toml-file/</link>
      <pubDate>Wed, 27 Nov 2024 06:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/configuration/the-pyproject.toml-file/</guid>
      <description>Python 프로젝트의 구성 정보와 빌드 시스템 요구 사항을 정의하는 표준화된 구성 파일</description>
    </item>
    <item>
      <title>Rye</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/rye/</link>
      <pubDate>Wed, 27 Nov 2024 04:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/rye/</guid>
      <description>Rye는 파이썬 프로젝트와 패키지 관리를 위한 통합 솔루션으로, 2022년 11월에 Pynecone이라는 이름으로 처음 공개되었으나, 2023년 6월에 Rye로 이름이 변경되었다.</description>
    </item>
    <item>
      <title>PEP 20–The Zen of Python</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/pep/pep-20-the-zen-of-python/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/pep/pep-20-the-zen-of-python/</guid>
      <description>파이썬의 철학과 디자인 원칙을 담고 있는 19개의 지침.</description>
    </item>
    <item>
      <title>PEP 257–Docstring Conventions</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/pep/pep-257docstring-conventions/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/pep/pep-257docstring-conventions/</guid>
      <description>Python 코드의 docstring 작성에 대한 규칙과 관례를 정의한 문서</description>
    </item>
    <item>
      <title>PEP 3000–Python 3000</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/pep/pep-3000python-3000/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/pep/pep-3000python-3000/</guid>
      <description>Python 3000 (Python 3.0 또는 Py3k로도 알려짐) 개발에 대한 가이드라인을 제시하는 문서</description>
    </item>
    <item>
      <title>PEP 3333–Python Web Server Gateway Interface V1.0.1</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/pep/pep-3333python-web-server-gateway-interface-v1/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/pep/pep-3333python-web-server-gateway-interface-v1/</guid>
      <description>Python Web Server Gateway Interface (WSGI) 버전 1.0.1을 정의하는 문서</description>
    </item>
    <item>
      <title>PEP 484–Type Hints</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/pep/pep-484type-hints/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/pep/pep-484type-hints/</guid>
      <description>Python에 타입 힌트(Type Hints)를 도입하여 함수의 인자와 반환값에 대한 타입을 명시할 수 있도록 하는 표준을 정의</description>
    </item>
    <item>
      <title>PEP 492–Coroutines with Async and Await Syntax</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/pep/pep-492coroutines-with-async-and-await-syntax/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/pep/pep-492coroutines-with-async-and-await-syntax/</guid>
      <description>Python에 비동기 프로그래밍을 위한 async와 await 구문을 도입하여 코루틴(coroutine)을 명시적으로 정의하고 사용하는 방법을 제안</description>
    </item>
    <item>
      <title>PEP 8-Style Guide for Python Code</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/pep/pep-8-style-guide-for-python-code/</link>
      <pubDate>Tue, 26 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/pep/pep-8-style-guide-for-python-code/</guid>
      <description>Python 코드의 스타일 가이드로, 가독성과 일관성을 높이기 위한 다양한 규칙과 권장사항을 제시</description>
    </item>
    <item>
      <title>Python-Special Methods</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/oop/class/special-methods/</link>
      <pubDate>Mon, 25 Nov 2024 23:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/oop/class/special-methods/</guid>
      <description>클래스에 특별한 기능을 부여하는 특수한 메소드</description>
    </item>
    <item>
      <title>Python - Iterators</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/oop/class/iterators/</link>
      <pubDate>Mon, 25 Nov 2024 17:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/oop/class/iterators/</guid>
      <description>데이터 컬렉션의 요소들을 순차적으로 접근할 수 있게 해주는 객체</description>
    </item>
    <item>
      <title>Structural Pattern Matching</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/conditionals/structural-pattern-matching/</link>
      <pubDate>Mon, 25 Nov 2024 14:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/conditionals/structural-pattern-matching/</guid>
      <description>Python 3.10부터 도입된 **구조적 패턴 매칭(Structural Pattern Matching)** 은 데이터의 구조와 값을 기반으로 코드의 흐름을 제어한다.</description>
    </item>
    <item>
      <title>name mangling</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/oop/class/name-mangling/</link>
      <pubDate>Mon, 25 Nov 2024 09:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/oop/class/name-mangling/</guid>
      <description>파이썬에서 &amp;#34;name mangling&amp;#34;은 클래스 내부의 속성이나 메서드의 이름을 변경하는 기능이다.  이 기능은 주로 정보 은닉과 캡슐화를 위해 사용된다.</description>
    </item>
    <item>
      <title>Python Super</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/oop/class/super/</link>
      <pubDate>Mon, 25 Nov 2024 02:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/oop/class/super/</guid>
      <description>super()는 상속 관계에서 부모 클래스의 메서드를 호출하는 데 사용되는 중요한 도구.</description>
    </item>
    <item>
      <title>Method Resolution Order (MRO)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/oop/class/method-resolution-order/</link>
      <pubDate>Mon, 25 Nov 2024 01:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/oop/class/method-resolution-order/</guid>
      <description>파이썬에서 클래스의 상속 관계에서 메서드를 찾는 순서를 정의하는 규칙</description>
    </item>
    <item>
      <title>classmethod and staticmethod</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/decorators/classmethod-and-staticmethod/</link>
      <pubDate>Sun, 24 Nov 2024 12:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/decorators/classmethod-and-staticmethod/</guid>
      <description>Python의 클래스에서 사용되는 두 가지 다른 종류의 메서드 데코레이터</description>
    </item>
    <item>
      <title>Lambdas</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/functions/lambdas/</link>
      <pubDate>Sun, 24 Nov 2024 11:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/functions/lambdas/</guid>
      <description>익명 함수를 생성하는 강력한 도구</description>
    </item>
    <item>
      <title>Generator and Iterator</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/generator-and-iterator/</link>
      <pubDate>Sun, 24 Nov 2024 10:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/generator-and-iterator/</guid>
      <description>이터레이터는 값을 차례대로 반환하는 객체로, `__iter__()`와 `__next__()` 메서드를 구현한다.  제너레이터는 `yield` 키워드를 사용하여 값을 하나씩 반환하는 함수로, 이터레이터를 생성한다.</description>
    </item>
    <item>
      <title>Python - Generators</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/functions/generators/</link>
      <pubDate>Sun, 24 Nov 2024 08:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/functions/generators/</guid>
      <description>반복 가능한 객체를 생성하는 강력한 도구</description>
    </item>
    <item>
      <title>내장 데코레이터 (Built-in Decorator)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/decorators/built-in-decorators/</link>
      <pubDate>Sun, 24 Nov 2024 07:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/decorators/built-in-decorators/</guid>
      <description>파이썬에는 다양한 내장 데코레이터가 있으며, 이들은 코드를 최적화하고 기능을 확장하는 데 중요한 역할을 한다.</description>
    </item>
    <item>
      <title>Docstring</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/comments/docstring/</link>
      <pubDate>Sun, 24 Nov 2024 03:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/comments/docstring/</guid>
      <description>python에서 함수, 클래스, 모듈에 대한 문서화를 위해 사용되는 문자열</description>
    </item>
    <item>
      <title>연산자(Operators)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/operators/</link>
      <pubDate>Sun, 24 Nov 2024 00:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/basic-syntax/operators/</guid>
      <description>연산자는 프로그래밍의 기본적인 구성 요소로, 데이터를 조작하고 계산하는 데 사용된다.</description>
    </item>
    <item>
      <title>Cypress</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/testing/cypress/</link>
      <pubDate>Fri, 22 Nov 2024 23:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/testing/cypress/</guid>
      <description>Cypress는 JavaScript 기반의 강력한 프론트엔드 테스팅 프레임워크.</description>
    </item>
    <item>
      <title>Playwright</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/testing/playwright/</link>
      <pubDate>Fri, 22 Nov 2024 23:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/testing/playwright/</guid>
      <description>Playwright는 Microsoft에서 개발한 현대적이고 강력한 웹 자동화 및 테스팅 라이브러리</description>
    </item>
    <item>
      <title>Puppeteer</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/testing/puppeteer/</link>
      <pubDate>Fri, 22 Nov 2024 23:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/testing/puppeteer/</guid>
      <description>Google에서 개발한 Node.js 라이브러리로, 프로그래밍을 통해 Chrome 또는 Chromium 브라우저를 제어할 수 있게 해주는 고급 웹 자동화 도구</description>
    </item>
    <item>
      <title>Fastify</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/fastify/</link>
      <pubDate>Fri, 22 Nov 2024 13:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/fastify/</guid>
      <description>Fastify는 Node.js를 위한 빠르고 낮은 오버헤드의 웹 프레임워크</description>
    </item>
    <item>
      <title>Koa</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/koa/</link>
      <pubDate>Fri, 22 Nov 2024 13:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/apis/frameworks/koa/</guid>
      <description>Node.js를 위한 경량 웹 프레임워크로, Express.js 팀에 의해 개발되었다. Koa는 더 작고, 더 표현력이 풍부하며, 더 강력한 웹 애플리케이션과 API의 기초를 제공하기 위해 설계되었다.</description>
    </item>
    <item>
      <title>jasmine</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/testing/jasmine/</link>
      <pubDate>Fri, 22 Nov 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/testing/jasmine/</guid>
      <description>Jasmine은 JavaScript 애플리케이션을 위한 행위 주도 개발(BDD) 스타일의 테스팅 프레임워크</description>
    </item>
    <item>
      <title>Karma</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/testing/karma/</link>
      <pubDate>Fri, 22 Nov 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/testing/karma/</guid>
      <description>Karma는 모든 브라우저에서 JavaScript 코드를 테스트할 수 있게 해주는 테스트 러너이다.</description>
    </item>
    <item>
      <title>VueJS</title>
      <link>https://buenhyden.github.io/posts/frontend/framework/vuejs/</link>
      <pubDate>Fri, 22 Nov 2024 04:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/frontend/framework/vuejs/</guid>
      <description>Vue.js는 사용자 인터페이스를 구축하기 위한 진보적이고 가벼운 JavaScript 프레임워크이다.</description>
    </item>
    <item>
      <title>winston</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/logging/winston/</link>
      <pubDate>Thu, 21 Nov 2024 15:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/logging/winston/</guid>
      <description>Winston은 Node.js 애플리케이션을 위한 다목적 로깅 라이브러리</description>
    </item>
    <item>
      <title>pino</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/logging/pino/</link>
      <pubDate>Thu, 21 Nov 2024 15:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/logging/pino/</guid>
      <description>Node.js를 위한 매우 빠르고 가벼운 로깅 라이브러리</description>
    </item>
    <item>
      <title>Mongoose</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/working-with-dbs/mongoose/</link>
      <pubDate>Thu, 21 Nov 2024 15:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/working-with-dbs/mongoose/</guid>
      <description>MongoDB와 Node.js 애플리케이션을 연결해주는 강력한 Object Document Mapper(ODM) 라이브러리</description>
    </item>
    <item>
      <title>Sequelize</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/working-with-dbs/sequelize/</link>
      <pubDate>Thu, 21 Nov 2024 15:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/working-with-dbs/sequelize/</guid>
      <description>Node.js 환경에서 사용되는 강력한 ORM(Object-Relational Mapping) 라이브러리</description>
    </item>
    <item>
      <title>Biome</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/build-tools/linter-and-formatter/biome/</link>
      <pubDate>Thu, 21 Nov 2024 15:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/build-tools/linter-and-formatter/biome/</guid>
      <description>JavaScript, TypeScript, JSX, TSX, JSON, CSS, GraphQL 등 다양한 웹 개발 언어를 위한 빠른 포매터이자 린터</description>
    </item>
    <item>
      <title>eslint</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/build-tools/linter-and-formatter/eslint/</link>
      <pubDate>Thu, 21 Nov 2024 15:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/build-tools/linter-and-formatter/eslint/</guid>
      <description>JavaScript 코드 분석 도구로, 코드의 품질을 향상시키고 잠재적인 문제를 미리 발견하는 것이 주요 목적</description>
    </item>
    <item>
      <title>prettier</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/build-tools/linter-and-formatter/prettier/</link>
      <pubDate>Thu, 21 Nov 2024 15:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/build-tools/linter-and-formatter/prettier/</guid>
      <description>JavaScript를 포함한 여러 웹 개발 언어를 위한 강력한 코드 포매터</description>
    </item>
    <item>
      <title>pm2</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/keep-app-running/pm2/</link>
      <pubDate>Thu, 21 Nov 2024 12:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/runtime-environments/nodejs/library/keep-app-running/pm2/</guid>
      <description>PM2는 Node.js 애플리케이션을 위한 고급 프로덕션 프로세스 관리자.</description>
    </item>
    <item>
      <title>jsdoc</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/jsdoc/</link>
      <pubDate>Thu, 21 Nov 2024 11:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/jsdoc/</guid>
      <description>JSDoc은 JavaScript 소스 코드에 대한 API 문서를 생성하기 위한 마크업 언어.</description>
    </item>
    <item>
      <title>Java Keywords</title>
      <link>https://buenhyden.github.io/posts/programming-languages/java/fundamentals/keywords/</link>
      <pubDate>Wed, 20 Nov 2024 02:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/java/fundamentals/keywords/</guid>
      <description>키워드들은 Java 언어의 기본 구성 요소이며, 각각이 특정한 프로그래밍 목적을 위해 설계되었다.  변수, 메서드, 클래스, 제어문 등 다양한 요소를 정의하고 제어하는 데 필수적인 역할을 한다.</description>
    </item>
    <item>
      <title>Junit</title>
      <link>https://buenhyden.github.io/posts/programming-languages/java/testing/junit/</link>
      <pubDate>Wed, 20 Nov 2024 00:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/java/testing/junit/</guid>
      <description>Java 프로그래밍 언어를 위한 가장 널리 사용되는 단위 테스트(Unit Testing) 프레임워크</description>
    </item>
    <item>
      <title>Polling publisher</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/transactional-messaging/polling-publisher/</link>
      <pubDate>Tue, 19 Nov 2024 11:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/transactional-messaging/polling-publisher/</guid>
      <description>Outbox 테이블에 저장된 메시지를 주기적으로 조회(polling)하여 메시지 브로커로 발행한다.  데이터베이스 트랜잭션의 일부로 메시지를 Outbox 테이블에 저장한 후, 별도의 프로세스에서 이를 읽어 발행한다.</description>
    </item>
    <item>
      <title>Transaction log tailing</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/transactional-messaging/transaction-log-tailing/</link>
      <pubDate>Tue, 19 Nov 2024 11:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/transactional-messaging/transaction-log-tailing/</guid>
      <description>데이터베이스의 트랜잭션 로그를 실시간으로 읽어 변경사항을 메시지 브로커에 발행하는 방식이다.</description>
    </item>
    <item>
      <title>Transactional Outbox</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/transactional-messaging/transactional-outbox/</link>
      <pubDate>Tue, 19 Nov 2024 11:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/transactional-messaging/transactional-outbox/</guid>
      <description>Transactional Outbox 패턴은 데이터베이스 업데이트와 메시지 발행을 원자적으로 처리하기 위한 방법으로, 데이터베이스 트랜잭션과 메시지 발행 사이의 일관성을 보장하는 것을 목적으로 한다.</description>
    </item>
    <item>
      <title>Client-side UI composition</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/ui/client-side-ui-composition/</link>
      <pubDate>Tue, 19 Nov 2024 11:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/ui/client-side-ui-composition/</guid>
      <description>이 패턴은 각 서비스가 독립적으로 UI 컴포넌트를 제공하고, 클라이언트가 이를 조합하여 최종 화면을 렌더링하는 방식으로 동작한다.</description>
    </item>
    <item>
      <title>Server-side page fragment composition</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/ui/server-side-page-fragment-composition/</link>
      <pubDate>Tue, 19 Nov 2024 11:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/ui/server-side-page-fragment-composition/</guid>
      <description>마이크로서비스 아키텍처(MSA)에서 여러 서비스로부터 HTML 조각(프래그먼트)을 수집하여 서버에서 최종 웹 페이지를 구성하는 패턴</description>
    </item>
    <item>
      <title>Twelve-Factor App methodology</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-patterns/twelve-factor-app-methodology/</link>
      <pubDate>Tue, 19 Nov 2024 01:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-patterns/twelve-factor-app-methodology/</guid>
      <description>클라우드 네이티브 애플리케이션을 구축하기 위한 12가지 모범 사례를 제시</description>
    </item>
    <item>
      <title>API Key Authentication</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/api-key-authentication/</link>
      <pubDate>Mon, 18 Nov 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/api-key-authentication/</guid>
      <description>API Key Authentication은 클라이언트가 API에 접근할 때 고유한 식별자(API 키)를 사용하여 인증하는 방식이다</description>
    </item>
    <item>
      <title>CORS</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/cors/</link>
      <pubDate>Mon, 18 Nov 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/cors/</guid>
      <description>CORS는 웹 브라우저에서 구현된 보안 메커니즘으로, 다른 출처(도메인, 프로토콜, 포트)의 리소스에 접근할 수 있도록 허용하는 체계이다. 이는 동일 출처 정책(Same-Origin Policy)의 제한을 안전하게 우회할 수 있게 해준다.</description>
    </item>
    <item>
      <title>Mutual TLS</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/mutual-tls/</link>
      <pubDate>Mon, 18 Nov 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/mutual-tls/</guid>
      <description>클라이언트와 서버 간의 통신에서 양쪽 모두가 서로의 신원을 확인하는 인증 방식이다.</description>
    </item>
    <item>
      <title>OAuth2/OIDC (OpenID Connect)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/oauth2-oidc/</link>
      <pubDate>Mon, 18 Nov 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/oauth2-oidc/</guid>
      <description>분산 시스템에서의 인증과 권한 부여를 효과적으로 처리할 수 있게 해준다.</description>
    </item>
    <item>
      <title>Rate Limiting</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/rate-limiting/</link>
      <pubDate>Mon, 18 Nov 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/rate-limiting/</guid>
      <description>클라이언트/서비스 간 요청 처리량을 제어하는 메커니즘으로, 특히 API 기반 마이크로서비스 통신에서 중요하다.</description>
    </item>
    <item>
      <title>Secret Management</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/secret-management/</link>
      <pubDate>Mon, 18 Nov 2024 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/secret-management/</guid>
      <description>민감한 자격 증명(API 키, 데이터베이스 비밀번호, 토큰 등)을 안전하게 저장, 관리, 배포하는 핵심 보안 메커니즘이다.</description>
    </item>
    <item>
      <title>Access Token</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/access-token/</link>
      <pubDate>Mon, 18 Nov 2024 11:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/security/access-token/</guid>
      <description>Access Token은 사용자의 인증 정보를 담고 있는 암호화된 문자열이다</description>
    </item>
    <item>
      <title>Consumer-side contract test</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/consumer-side-contract-test/</link>
      <pubDate>Mon, 18 Nov 2024 10:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/consumer-side-contract-test/</guid>
      <description>테스팅 패턴 중 하나로, 서비스 간 상호작용을 검증하는 중요한 방법이다.</description>
    </item>
    <item>
      <title>Consumer-Driven Contract Testing</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/consumer-driven-contract-testing/</link>
      <pubDate>Mon, 18 Nov 2024 03:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/consumer-driven-contract-testing/</guid>
      <description>서비스 소비자(consumer)와 제공자(provider) 간의 상호작용을 검증하는 방법</description>
    </item>
    <item>
      <title>Service Component Test</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/service-component-test/</link>
      <pubDate>Mon, 18 Nov 2024 03:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/testing/service-component-test/</guid>
      <description>개별 서비스 컴포넌트를 테스트하기 위한 중요한 패턴이다.</description>
    </item>
    <item>
      <title>Back Pressure</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/reliability/back-pressure/</link>
      <pubDate>Sun, 17 Nov 2024 12:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/reliability/back-pressure/</guid>
      <description>시스템이 처리할 수 있는 양보다 더 많은 요청이 들어올 때, 이를 제어하는 메커니즘이다.</description>
    </item>
    <item>
      <title>Bulkhead</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/reliability/bulkhead/</link>
      <pubDate>Sun, 17 Nov 2024 12:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/reliability/bulkhead/</guid>
      <description>Bulkhead 패턴은 마이크로서비스 아키텍처(MSA)에서 시스템의 복원력과 장애 격리를 향상시키기 위해 사용되는 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Cache-Aside</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/reliability/cache-aside/</link>
      <pubDate>Sun, 17 Nov 2024 12:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/reliability/cache-aside/</guid>
      <description>애플리케이션이 데이터를 읽을 때 먼저 캐시를 확인하고, 캐시에 데이터가 없을 경우 데이터베이스에서 데이터를 가져와 캐시에 저장하는 방식이다.</description>
    </item>
    <item>
      <title>Fail Fast</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/reliability/fail-fast/</link>
      <pubDate>Sun, 17 Nov 2024 12:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/reliability/fail-fast/</guid>
      <description>Fail Fast는 시스템에서 문제가 발생했을 때 즉시 실패를 보고하고 정상 작동을 중지하는 설계 원칙</description>
    </item>
    <item>
      <title>Anti-Corruption Layer</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/refactoring-to-services/anti-corruption-layer/</link>
      <pubDate>Sun, 17 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/refactoring-to-services/anti-corruption-layer/</guid>
      <description>이 패턴은 서로 다른 도메인 모델이나 통신 프로토콜을 가진 시스템 간의 통합을 위해 사용된다.</description>
    </item>
    <item>
      <title>Circuit Breaker</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/reliability/circuit-breaker/</link>
      <pubDate>Sun, 17 Nov 2024 10:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/reliability/circuit-breaker/</guid>
      <description>서킷 브레이커 패턴(Circuit Breaker Pattern)은 마이크로서비스 아키텍처에서 시스템의 안정성과 복원력을 향상시키기 위해 사용되는 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Timeout Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/reliability/timeout/</link>
      <pubDate>Sun, 17 Nov 2024 02:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/reliability/timeout/</guid>
      <description>서비스가 다른 서비스로부터의 응답을 무한정 기다리지 않도록 하여 시스템의 안정성과 응답성을 향상시킨다.</description>
    </item>
    <item>
      <title>Retry Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/reliability/retry/</link>
      <pubDate>Sun, 17 Nov 2024 02:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/reliability/retry/</guid>
      <description>Retry Pattern은 일시적인 오류가 발생했을 때 동일한 작업을 자동으로 재시도하여 시스템의 안정성과 신뢰성을 향상시키는 패턴이다.</description>
    </item>
    <item>
      <title>Strangler Application</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/refactoring-to-services/strangler-application/</link>
      <pubDate>Sun, 17 Nov 2024 01:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/refactoring-to-services/strangler-application/</guid>
      <description>Strangler Application 패턴은 기존의 모놀리식 애플리케이션을 점진적으로 새로운 마이크로서비스 기반 시스템으로 대체하는 방법이다.</description>
    </item>
    <item>
      <title>Application metrics</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/application-metrics/</link>
      <pubDate>Sat, 16 Nov 2024 11:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/application-metrics/</guid>
      <description>Application Metrics는 애플리케이션의 성능, 동작, 그리고 건강 상태를 나타내는 수치화된 데이터이다.</description>
    </item>
    <item>
      <title>Log deployments and changes</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/log-deployments-and-changes/</link>
      <pubDate>Sat, 16 Nov 2024 11:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/log-deployments-and-changes/</guid>
      <description>프로덕션 환경에서 발생하는 모든 배포와 변경사항을 로깅하는 것을 의미한다.</description>
    </item>
    <item>
      <title>API Composition</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/querying/api-composition/</link>
      <pubDate>Sat, 16 Nov 2024 10:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/querying/api-composition/</guid>
      <description>이 패턴은 여러 마이크로서비스의 데이터를 조합하여 클라이언트에게 단일 응답으로 제공하는 방식이다.</description>
    </item>
    <item>
      <title>Audit Logging</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/audit-logging/</link>
      <pubDate>Sat, 16 Nov 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/audit-logging/</guid>
      <description>Audit Logging은 시스템 내에서 발생하는 중요한 이벤트와 변경사항을 기록하는 프로세스이다.</description>
    </item>
    <item>
      <title>Exception Tracking</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/exception-tracking/</link>
      <pubDate>Sat, 16 Nov 2024 02:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/exception-tracking/</guid>
      <description>Exception Tracking은 분산 시스템 전반에 걸쳐 발생하는 예외를 중앙에서 수집, 집계, 분석하는 패턴이다.</description>
    </item>
    <item>
      <title>Distributed Tracing</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/distributed-tracing/</link>
      <pubDate>Sat, 16 Nov 2024 01:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/distributed-tracing/</guid>
      <description>Distributed Tracing은 마이크로서비스 환경에서 요청이 여러 서비스를 거쳐 처리되는 과정을 추적하고 관찰하는 방법이다</description>
    </item>
    <item>
      <title>Health Check API</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/health-check-api/</link>
      <pubDate>Sat, 16 Nov 2024 01:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/health-check-api/</guid>
      <description>Health Check API는 서비스의 상태를 주기적으로 확인하여 서비스의 정상 작동 여부를 판단하는 엔드포인트</description>
    </item>
    <item>
      <title>Log Aggregation</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/log-aggregation/</link>
      <pubDate>Sat, 16 Nov 2024 01:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/observability/log-aggregation/</guid>
      <description>Log Aggregation은 여러 마이크로서비스와 시스템 구성 요소에서 생성된 로그 데이터를 중앙 집중식 저장소로 수집, 통합, 정규화하는 프로세스이다.</description>
    </item>
    <item>
      <title>Dead Letter Queue</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/dead-letter-queue/</link>
      <pubDate>Fri, 15 Nov 2024 12:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/dead-letter-queue/</guid>
      <description>Dead Letter Queue는 메시징 시스템에서 정상적으로 처리되지 못한 메시지를 저장하는 특별한 큐</description>
    </item>
    <item>
      <title>Message Broker</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/message-broker/</link>
      <pubDate>Fri, 15 Nov 2024 12:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/message-broker/</guid>
      <description>메시지 브로커(Message Broker)는 마이크로서비스 아키텍처(MSA)에서 중요한 역할을 하는 소프트웨어 컴포넌트로, 서비스 간 메시지를 안전하고 효율적으로 전달하는 중간 역할을 한다. 이를 통해 비동기 통신과 시스템 간의 느슨한 결합(loose coupling)을 가능하게 한다.</description>
    </item>
    <item>
      <title>Competing Consumers</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/competing-consumers/</link>
      <pubDate>Fri, 15 Nov 2024 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/competing-consumers/</guid>
      <description>여러 소비자(Consumer)가 동일한 메시지 채널에서 동시에 메시지를 처리하는 방식이다. 이 패턴을 통해 시스템의 처리량을 높이고 확장성과 가용성을 개선할 수 있다.</description>
    </item>
    <item>
      <title>Message Filter</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/message-filter/</link>
      <pubDate>Fri, 15 Nov 2024 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/message-filter/</guid>
      <description>Message Filter는 특정 기준에 따라 원하지 않는 메시지를 제거하고 원하는 메시지만 통과시키는 패턴</description>
    </item>
    <item>
      <title>Message Router</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/message-router/</link>
      <pubDate>Fri, 15 Nov 2024 12:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/message-router/</guid>
      <description>Message Router는 메시지의 내용이나 메타데이터를 기반으로 메시지를 적절한 목적지로 전달하는 컴포넌트이다. 이는 메시지의 흐름을 제어하고 시스템의 유연성을 높이는 데 중요한 역할을 한다.</description>
    </item>
    <item>
      <title>Idempotent Consumer</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/idempotent-consumer/</link>
      <pubDate>Fri, 15 Nov 2024 11:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/messaging/idempotent-consumer/</guid>
      <description>Idempotent Consumer는 동일한 메시지를 여러 번 처리하더라도 시스템의 상태가 변하지 않도록 설계된 소비자를 의미한다</description>
    </item>
    <item>
      <title>Domain event</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/maintaining-data-consistency/domain-event/</link>
      <pubDate>Fri, 15 Nov 2024 11:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/maintaining-data-consistency/domain-event/</guid>
      <description>도메인 이벤트는 도메인 내에서 발생한 중요한 상태 변화를 나타내는 객체이다.</description>
    </item>
    <item>
      <title>Saga Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/maintaining-data-consistency/saga/</link>
      <pubDate>Fri, 15 Nov 2024 10:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/maintaining-data-consistency/saga/</guid>
      <description>Saga Pattern은 마이크로서비스 아키텍처에서 분산 트랜잭션을 관리하기 위한 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Aggregate Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/maintaining-data-consistency/aggregate/</link>
      <pubDate>Fri, 15 Nov 2024 02:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/maintaining-data-consistency/aggregate/</guid>
      <description>Aggregate 패턴은 도메인 주도 설계(DDD)에서 유래한 개념으로, 관련된 객체들을 하나의 단위로 묶어 데이터 변경 시 일관성을 유지한다.</description>
    </item>
    <item>
      <title>3rd party registration</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/discovery/3rd-party-registration/</link>
      <pubDate>Thu, 14 Nov 2024 11:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/discovery/3rd-party-registration/</guid>
      <description>이 패턴에서는 서비스 인스턴스가 직접 자신을 서비스 레지스트리에 등록하지 않고, 별도의 외부 컴포넌트가 서비스의 등록과 해제를 담당한다.</description>
    </item>
    <item>
      <title>Self registration</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/discovery/self-registration/</link>
      <pubDate>Thu, 14 Nov 2024 11:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/discovery/self-registration/</guid>
      <description>각 마이크로서비스 인스턴스가 자신의 정보를 서비스 레지스트리에 직접 등록하고 관리하는 패턴이다</description>
    </item>
    <item>
      <title>Server-side discovery</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/discovery/server-side-discovery/</link>
      <pubDate>Thu, 14 Nov 2024 11:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/discovery/server-side-discovery/</guid>
      <description>Server-side Discovery는 클라이언트가 서비스의 위치를 직접 찾지 않고, 중간에 위치한 로드 밸런서나 프록시 서버가 서비스 위치를 찾아 요청을 라우팅하는 방식이다.</description>
    </item>
    <item>
      <title>Service registry</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/discovery/service-registry/</link>
      <pubDate>Thu, 14 Nov 2024 11:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/discovery/service-registry/</guid>
      <description>각 서비스 인스턴스의 네트워크 위치(IP 주소와 포트)를 저장하고 관리하는 중앙화된 데이터베이스</description>
    </item>
    <item>
      <title>Client-side discovery</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/discovery/client-side-discovery/</link>
      <pubDate>Thu, 14 Nov 2024 11:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/discovery/client-side-discovery/</guid>
      <description>Client-side Discovery는 서비스 클라이언트가 직접 서비스 레지스트리에 질의하여 필요한 서비스의 위치 정보를 얻고, 그 정보를 바탕으로 서비스를 호출하는 방식이다.</description>
    </item>
    <item>
      <title>Backend for Frontend Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/external-api/backend-for-frontend/</link>
      <pubDate>Thu, 14 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/external-api/backend-for-frontend/</guid>
      <description>BFF는 특정 프론트엔드 애플리케이션을 위해 맞춤형으로 설계된 백엔드 서비스를 의미한다. 이는 마이크로서비스 아키텍처에서 자주 사용되는 패턴으로, 각각의 클라이언트(웹, 모바일, 태블릿 등)가 자신만의 전용 백엔드 서비스를 갖게 된다.</description>
    </item>
    <item>
      <title>API Gateway Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/external-api/api-gateway-pattern/</link>
      <pubDate>Thu, 14 Nov 2024 01:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/external-api/api-gateway-pattern/</guid>
      <description>마이크로서비스 아키텍처에서 클라이언트와 백엔드 서비스 간의 단일 진입점 역할을 수행하는 중요한 구성 요소</description>
    </item>
    <item>
      <title>Service deployment platform</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/service-deployment-platform/</link>
      <pubDate>Wed, 13 Nov 2024 11:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/service-deployment-platform/</guid>
      <description>마이크로서비스 아키텍처(MSA)에서 서비스를 효율적으로 배포하고 관리하기 위한 플랫폼</description>
    </item>
    <item>
      <title>Service per VM</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/service-per-vm/</link>
      <pubDate>Wed, 13 Nov 2024 11:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/service-per-vm/</guid>
      <description>각 마이크로서비스를 독립적인 가상 머신(VM)에 배포하는 방식</description>
    </item>
    <item>
      <title>Multiple Services per Host</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/multiple-services-per-host/</link>
      <pubDate>Wed, 13 Nov 2024 11:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/multiple-services-per-host/</guid>
      <description>하나의 물리적 또는 가상 호스트에 여러 개의 마이크로서비스 인스턴스를 배포하는 방식이다</description>
    </item>
    <item>
      <title>Service per Container</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/service-per-container/</link>
      <pubDate>Wed, 13 Nov 2024 11:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/service-per-container/</guid>
      <description>각 마이크로서비스를 독립적인 컨테이너에 배포하는 방식이다</description>
    </item>
    <item>
      <title>Single Service per Host</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/single-service-per-host/</link>
      <pubDate>Wed, 13 Nov 2024 11:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/single-service-per-host/</guid>
      <description>각 서비스 인스턴스를 독립적인 호스트에 배포하는 방식</description>
    </item>
    <item>
      <title>Serverless deployment</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/serverless-deployment/</link>
      <pubDate>Wed, 13 Nov 2024 11:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/serverless-deployment/</guid>
      <description>Serverless deployment는 개발자가 서버를 관리할 필요가 없는 클라우드 컴퓨팅 모델 중 하나이다. 즉, 서버 관리를 개발자가 아닌 클라우드 제공자가 알아서 해주는 것이다.</description>
    </item>
    <item>
      <title>Self-contained Service</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/self-contained-service/</link>
      <pubDate>Wed, 13 Nov 2024 10:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/self-contained-service/</guid>
      <description>단일 비즈니스 기능을 완전히 독립적으로 구현한 서비스를 의미한다.  이 서비스는 자체적으로 데이터를 저장하고, 비즈니스 로직을 처리하며, 사용자 인터페이스를 제공할 수 있다.</description>
    </item>
    <item>
      <title>Service per team</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/service-per-team/</link>
      <pubDate>Wed, 13 Nov 2024 10:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/service-per-team/</guid>
      <description>각 마이크로서비스를 개별 팀이 소유하고 관리하는 방식</description>
    </item>
    <item>
      <title>Sidecar Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/sidecar/</link>
      <pubDate>Wed, 13 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/deployment/sidecar/</guid>
      <description>Sidecar Pattern은 마치 오토바이의 사이드카처럼, 주 애플리케이션 컨테이너 옆에 보조 컨테이너를 배치하여 추가 기능을 제공한다.</description>
    </item>
    <item>
      <title>Decompose by Business Capability</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-business-capability/</link>
      <pubDate>Wed, 13 Nov 2024 01:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-business-capability/</guid>
      <description>이 패턴은 비즈니스 능력을 기반으로 애플리케이션을 마이크로서비스로 분해하는 방법을 제시한다.</description>
    </item>
    <item>
      <title>Decompose by Subdomain</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-subdomain/</link>
      <pubDate>Wed, 13 Nov 2024 01:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/decomposition/decompose-by-subdomain/</guid>
      <description>비즈니스 도메인을 여러 하위 도메인으로 나누어 마이크로서비스를 설계하는 방법</description>
    </item>
    <item>
      <title>Domain-specific</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication-style/domain-specific/</link>
      <pubDate>Tue, 12 Nov 2024 11:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication-style/domain-specific/</guid>
      <description>Domain-specific 프로토콜은 특정 도메인이나 비즈니스 영역에 특화된 통신 프로토콜을 의미한다.  이 프로토콜은 일반적인 통신 프로토콜보다 해당 도메인의 특성과 요구사항에 더 적합하게 설계되어 있다.</description>
    </item>
    <item>
      <title>Remote-Procedure</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication-style/remote-procedure/</link>
      <pubDate>Tue, 12 Nov 2024 11:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication-style/remote-procedure/</guid>
      <description>Remote Procedure Call은 분산 컴퓨팅 환경에서 한 프로그램이 다른 주소 공간(일반적으로 다른 컴퓨터)에 있는 프로시저나 함수를 마치 로컬 함수처럼 호출할 수 있게 해주는 프로토콜이다.</description>
    </item>
    <item>
      <title>Messaging</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication-style/messaging/</link>
      <pubDate>Tue, 12 Nov 2024 11:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/communication-style/messaging/</guid>
      <description>Messaging은 서비스들이 메시지를 통해 비동기적으로 통신하는 방식이다. 서비스들은 메시지 브로커를 통해 메시지를 주고받으며, 이를 통해 느슨한 결합(loose coupling)을 실현한다.</description>
    </item>
    <item>
      <title>Externalized configuration</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/externalized-configuration/</link>
      <pubDate>Tue, 12 Nov 2024 11:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/externalized-configuration/</guid>
      <description>이 패턴은 애플리케이션의 구성 정보를 코드와 분리하여 외부에서 관리하는 방식을 말한다.</description>
    </item>
    <item>
      <title>Microservice Chassis</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/microservice-chassis/</link>
      <pubDate>Tue, 12 Nov 2024 11:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/microservice-chassis/</guid>
      <description>이 패턴은 여러 마이크로서비스에서 공통적으로 필요한 기능들을 재사용 가능한 프레임워크나 라이브러리 형태로 제공한다.</description>
    </item>
    <item>
      <title>Service Template</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-template/</link>
      <pubDate>Tue, 12 Nov 2024 11:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/cross-cutting-concern/service-template/</guid>
      <description>여러 마이크로서비스에서 공통적으로 필요한 기능들을 재사용 가능한 템플릿 형태로 제공한다.</description>
    </item>
    <item>
      <title>Database per Service Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/database-per-service/</link>
      <pubDate>Tue, 12 Nov 2024 10:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/database-per-service/</guid>
      <description>Database per Service Pattern은 각 마이크로서비스가 자체적인 독립된 데이터베이스를 가지는 구조를 말한다.  이는 서비스 간의 느슨한 결합을 촉진하고, 각 서비스의 자율성을 높이는 것을 목표로 한다.</description>
    </item>
    <item>
      <title>Shared Database</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/shared-database/</link>
      <pubDate>Tue, 12 Nov 2024 07:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/shared-database/</guid>
      <description>여러 마이크로서비스가 동일한 데이터베이스 인스턴스를 사용하여 데이터를 저장하고 접근하는 방식이다</description>
    </item>
    <item>
      <title>Portainer</title>
      <link>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/containerization/tools/portainer/</link>
      <pubDate>Mon, 11 Nov 2024 15:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/containerization/tools/portainer/</guid>
      <description>컨테이너 환경을 관리하기 위한 오픈소스 웹 기반 GUI 도구</description>
    </item>
    <item>
      <title>분산 잠금 (Distributed Locking)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/distributed/distributed-system/distributed-locking/</link>
      <pubDate>Mon, 11 Nov 2024 15:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/distributed/distributed-system/distributed-locking/</guid>
      <description>분산 시스템 환경에서 여러 노드 또는 프로세스 간에 공유 자원에 대한 접근을 동기화하는 메커니즘</description>
    </item>
    <item>
      <title>VMware</title>
      <link>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/virtualization/tools/vmware/</link>
      <pubDate>Mon, 11 Nov 2024 12:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/virtualization/tools/vmware/</guid>
      <description>가상화 소프트웨어로, 물리적 컴퓨터에서 여러 가상 머신(VM)을 실행할 수 있게 해주는 도구</description>
    </item>
    <item>
      <title>Envoy</title>
      <link>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/containerization/orchestration/tools/kubernetes/envoy/</link>
      <pubDate>Mon, 11 Nov 2024 11:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/containerization/orchestration/tools/kubernetes/envoy/</guid>
      <description>Kubernetes 환경에서 널리 사용되는 고성능 프록시 서버</description>
    </item>
    <item>
      <title>Container</title>
      <link>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/containerization/container/</link>
      <pubDate>Mon, 11 Nov 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/containerization/container/</guid>
      <description>애플리케이션과 그 종속성을 격리된 환경에서 실행할 수 있게 해주는 경량화된 가상화 기술</description>
    </item>
    <item>
      <title>Istio</title>
      <link>https://buenhyden.github.io/posts/devops/service-mesh/istio/</link>
      <pubDate>Mon, 11 Nov 2024 06:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/service-mesh/istio/</guid>
      <description>마이크로서비스 아키텍처에서 서비스 간 통신을 관리하고 제어하는 서비스 메시(Service Mesh) 플랫폼</description>
    </item>
    <item>
      <title>Helm</title>
      <link>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/containerization/orchestration/tools/kubernetes/helm/</link>
      <pubDate>Mon, 11 Nov 2024 06:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/containerization/orchestration/tools/kubernetes/helm/</guid>
      <description>쿠버네티스를 위한 패키지 관리자로, 복잡한 쿠버네티스 애플리케이션의 배포와 관리를 간소화하는 도구</description>
    </item>
    <item>
      <title>VirtualBox</title>
      <link>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/virtualization/tools/virtualbox/</link>
      <pubDate>Mon, 11 Nov 2024 04:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/containerization-and-virtualization/virtualization/tools/virtualbox/</guid>
      <description>가상화 소프트웨어로, 물리적 컴퓨터에서 여러 가상 머신(VM)을 실행할 수 있게 해주는 도구</description>
    </item>
    <item>
      <title>온프레미스(On-Premise)</title>
      <link>https://buenhyden.github.io/posts/devops/on-premise/</link>
      <pubDate>Sun, 10 Nov 2024 10:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/on-premise/</guid>
      <description>On-Premise는 기업이 자체적으로 보유한 시설이나 건물에 IT 인프라를 구축하고 운영하는 방식을 의미한다.</description>
    </item>
    <item>
      <title>IaaS and PaaS and SaaS</title>
      <link>https://buenhyden.github.io/posts/devops/cloud/services/iaas-paas-saas/</link>
      <pubDate>Sun, 10 Nov 2024 06:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/cloud/services/iaas-paas-saas/</guid>
      <description>IaaS, PaaS, SaaS는 클라우드 컴퓨팅의 주요 서비스 모델</description>
    </item>
    <item>
      <title>비대칭키 암호화 (Asymmetric Encryption)</title>
      <link>https://buenhyden.github.io/posts/computer-science/security/encryption-and-decryption/asymmetric-encryption/</link>
      <pubDate>Sat, 09 Nov 2024 21:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/security/encryption-and-decryption/asymmetric-encryption/</guid>
      <description>공개키 암호화라고도 불리며, 암호화와 복호화에 서로 다른 두 개의 키를 사용하는 암호화 방식</description>
    </item>
    <item>
      <title>해시 함수 (Hash Functions)</title>
      <link>https://buenhyden.github.io/posts/computer-science/security/hashing/hash-functions/hash-functions/</link>
      <pubDate>Sat, 09 Nov 2024 21:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/security/hashing/hash-functions/hash-functions/</guid>
      <description>임의의 길이의 데이터를 고정된 길이의 데이터로 매핑하는 함수</description>
    </item>
    <item>
      <title>대칭키 암호화 (Symmetric Encryption)</title>
      <link>https://buenhyden.github.io/posts/computer-science/security/encryption-and-decryption/symmetric-encryption/</link>
      <pubDate>Sat, 09 Nov 2024 21:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/security/encryption-and-decryption/symmetric-encryption/</guid>
      <description>동일한 키를 사용하여 데이터를 암호화하고 복호화하는 방식</description>
    </item>
    <item>
      <title>Content Security Policy</title>
      <link>https://buenhyden.github.io/posts/backend/web-security/content-security-policy/</link>
      <pubDate>Sat, 09 Nov 2024 19:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/web-security/content-security-policy/</guid>
      <description>신뢰된 웹 페이지 콘텍스트에서 악의적인 콘텐츠를 실행하게 하는 사이트 간 스크립팅, 클릭재킹, 그리고 기타 코드 인젝션 공격을 예방하기 위해 도입된 컴퓨터 보안 표준</description>
    </item>
    <item>
      <title>동형 암호화(Homomorphic Encryption)</title>
      <link>https://buenhyden.github.io/posts/computer-science/security/encryption-and-decryption/homomorphic-encryption/</link>
      <pubDate>Sat, 09 Nov 2024 13:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/security/encryption-and-decryption/homomorphic-encryption/</guid>
      <description>동형 암호화는 암호화된 데이터를 복호화하지 않은 상태에서 연산을 수행할 수 있게 해주는 암호화 기술</description>
    </item>
    <item>
      <title>양자 암호화(quantum cryptography)</title>
      <link>https://buenhyden.github.io/posts/computer-science/security/encryption-and-decryption/quantum-cryptography/</link>
      <pubDate>Sat, 09 Nov 2024 13:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/security/encryption-and-decryption/quantum-cryptography/</guid>
      <description>양자역학의 원리를 활용하여 완벽한 보안을 실현하는 암호화 기술</description>
    </item>
    <item>
      <title>영지식 증명(Zero-Knowledge Proof, ZKP)</title>
      <link>https://buenhyden.github.io/posts/computer-science/security/encryption-and-decryption/zero-knowledge-proof/</link>
      <pubDate>Sat, 09 Nov 2024 13:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/security/encryption-and-decryption/zero-knowledge-proof/</guid>
      <description>영지식 증명은 어떤 명제가 참이라는 것을 증명하면서도, 그 명제에 대한 구체적인 정보는 전혀 공개하지 않는 암호학적 방법.</description>
    </item>
    <item>
      <title>The Open Web Application Security Project</title>
      <link>https://buenhyden.github.io/posts/computer-science/security/the-open-web-application-security-project/</link>
      <pubDate>Sat, 09 Nov 2024 11:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/security/the-open-web-application-security-project/</guid>
      <description>웹 애플리케이션의 가장 심각한 보안 위험 10가지를 정리한 보고서</description>
    </item>
    <item>
      <title>Server Security</title>
      <link>https://buenhyden.github.io/posts/backend/web-security/server-security/</link>
      <pubDate>Sat, 09 Nov 2024 07:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/web-security/server-security/</guid>
      <description>서버를 무단 액세스, 데이터 유출 및 기타 보안 위협으로부터 보호하기 위한 프로세스와 도구를 의미</description>
    </item>
    <item>
      <title>디지털 서명 (digital signature)</title>
      <link>https://buenhyden.github.io/posts/computer-science/security/encryption-and-decryption/digital-signature/</link>
      <pubDate>Sat, 09 Nov 2024 06:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/security/encryption-and-decryption/digital-signature/</guid>
      <description>전자 문서나 메시지의 진위성, 무결성, 그리고 부인 방지를 보장하기 위해 사용되는 암호화 기술</description>
    </item>
    <item>
      <title>제로 트러스트 (Zero Trust)</title>
      <link>https://buenhyden.github.io/posts/security/zero-trust/</link>
      <pubDate>Sat, 09 Nov 2024 01:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/zero-trust/</guid>
      <description> &amp;#34;절대 신뢰하지 말고, 항상 검증하라(Never trust, always verify)&amp;#34;라는 보안 철학에 기반을 둔 현대적인 보안 접근 방식</description>
    </item>
    <item>
      <title>Nonce</title>
      <link>https://buenhyden.github.io/posts/computer-science/security/cryptography/nonce/</link>
      <pubDate>Fri, 08 Nov 2024 15:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/security/cryptography/nonce/</guid>
      <description>&amp;#34;Number used Once&amp;#34;의 약자로 단 한 번만 사용되는 임의의 숫자</description>
    </item>
    <item>
      <title>Message Authentication Code</title>
      <link>https://buenhyden.github.io/posts/computer-science/security/cryptography/message-authentication-code/</link>
      <pubDate>Fri, 08 Nov 2024 13:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/security/cryptography/message-authentication-code/</guid>
      <description>Message Authentication Code는 메시지의 무결성(integrity)과 출처 인증(authentication)을 동시에 보장하기 위한 암호학적 도구로, 메시지와 비밀키를 입력으로 받아 고정된 길이의 값을 생성하며, 이 값은 메시지에 대한 일종의 디지털 지문 역할을 한다.</description>
    </item>
    <item>
      <title>방화벽 (Firewall)</title>
      <link>https://buenhyden.github.io/posts/security/firewall/</link>
      <pubDate>Fri, 08 Nov 2024 06:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/firewall/</guid>
      <description>네트워크 보안의 핵심 요소로, 내부 네트워크를 외부의 위협으로부터 보호하는 시스템.</description>
    </item>
    <item>
      <title>IDS and IPS</title>
      <link>https://buenhyden.github.io/posts/security/security-tools/ids-and-ips/</link>
      <pubDate>Fri, 08 Nov 2024 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-tools/ids-and-ips/</guid>
      <description>IDS(침입 탐지 시스템)와 IPS(침입 방지 시스템)는 네트워크 보안을 위한 중요한 개념이다. 이 두 시스템은 네트워크 상의 악의적인 활동을 탐지하고 대응하는 데 사용된다.</description>
    </item>
    <item>
      <title>CCE(Common Configuration Enumeration)</title>
      <link>https://buenhyden.github.io/posts/security/security-vulnerability/cce/</link>
      <pubDate>Thu, 07 Nov 2024 07:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-vulnerability/cce/</guid>
      <description>CCE(Common Configuration Enumeration)는 시스템의 보안 설정과 관련된 취약점을 식별하고 관리하기 위한 표준화된 명명 체계</description>
    </item>
    <item>
      <title>CVE</title>
      <link>https://buenhyden.github.io/posts/security/security-vulnerability/cve/</link>
      <pubDate>Thu, 07 Nov 2024 07:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-vulnerability/cve/</guid>
      <description>CVE(Common Vulnerabilities and Exposures)는 공개적으로 알려진 컴퓨터 보안 취약점을 식별하고 카탈로그화하는 표준화된 시스템</description>
    </item>
    <item>
      <title>CVSS(Common Vulnerability Scoring System)</title>
      <link>https://buenhyden.github.io/posts/security/security-vulnerability/cvss/</link>
      <pubDate>Thu, 07 Nov 2024 07:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-vulnerability/cvss/</guid>
      <description>CVSS(Common Vulnerability Scoring System)는 보안 취약점의 심각도를 평가하고 수치화하는 표준화된 시스템</description>
    </item>
    <item>
      <title>CWE(Common Weakness Enumeration)</title>
      <link>https://buenhyden.github.io/posts/security/security-vulnerability/cwe/</link>
      <pubDate>Thu, 07 Nov 2024 07:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/security-vulnerability/cwe/</guid>
      <description>CWE(Common Weakness Enumeration)는 소프트웨어와 하드웨어의 보안 약점을 체계적으로 분류하고 나열한 표준화된 목록</description>
    </item>
    <item>
      <title>Session base Auth and Cookie base Auth</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/session-base-auth-and-cookie-base-auth/</link>
      <pubDate>Thu, 07 Nov 2024 02:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/session-base-auth-and-cookie-base-auth/</guid>
      <description>세션 기반 인증(Session Based Authentication)과 쿠키 기반 인증(Cookie Based Authentication)은 웹 애플리케이션에서 사용자 인증을 처리하는 두 가지 주요 방식이다.</description>
    </item>
    <item>
      <title>DAC</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/dac/</link>
      <pubDate>Wed, 06 Nov 2024 23:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/dac/</guid>
      <description>리소스의 소유자가 해당 리소스에 대한다른  사용자들의 접근 권한을 직접 제어할 수 있는 접근 제어 방식</description>
    </item>
    <item>
      <title>MAC</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/mac/</link>
      <pubDate>Wed, 06 Nov 2024 23:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/mac/</guid>
      <description>시스템 전체에 걸쳐 중앙에서 정의된 보안 정책에 따라 접근 권한을 강제로 적용하는 접근 제어 방식.</description>
    </item>
    <item>
      <title>PBAC</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/pbac/</link>
      <pubDate>Wed, 06 Nov 2024 23:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/pbac/</guid>
      <description>중앙에서 정의된 정책들을 기반으로 접근 권한을 결정하는 접근 제어 방식.  각 정책은 &amp;#34;누가&amp;#34;, &amp;#34;무엇을&amp;#34;, &amp;#34;어떤 조건에서&amp;#34; 할 수 있는지를 정의하며, 이러한 정책들은 프로그래밍 방식으로 표현되고 평가된다.</description>
    </item>
    <item>
      <title>ABAC</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/abac/</link>
      <pubDate>Wed, 06 Nov 2024 23:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/abac/</guid>
      <description>ABAC는 주체(사용자), 객체(리소스), 작업, 환경 조건의 속성을 조합하여 접근 제어 정책을 정의한다.</description>
    </item>
    <item>
      <title>RBAC</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/rbac/</link>
      <pubDate>Wed, 06 Nov 2024 23:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authorization-methods/rbac/</guid>
      <description>RBAC는 &amp;#34;만약 ~라면 ~할 수 있다&amp;#34;와 같은 형태의 규칙들을 사용하여 접근 권한을 제어한다. 각 규칙은 조건부와 결과부로 구성되며, 시스템은 이러한 규칙들을 순차적으로 평가하여 접근 허용 여부를 결정한다.</description>
    </item>
    <item>
      <title>Session based Auth</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/session-based-auth/</link>
      <pubDate>Wed, 06 Nov 2024 11:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/session-based-auth/</guid>
      <description>웹 애플리케이션에서 사용자의 인증 상태를 유지하는 전통적인 방법</description>
    </item>
    <item>
      <title>SAML</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/saml/</link>
      <pubDate>Wed, 06 Nov 2024 11:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/saml/</guid>
      <description>웹 애플리케이션에서 사용자 인증과 권한 부여를 위한 개방형 표준 프로토콜</description>
    </item>
    <item>
      <title>Basic Authentication</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/basic-authentication/</link>
      <pubDate>Wed, 06 Nov 2024 11:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/basic-authentication/</guid>
      <description>HTTP 헤더에 사용자의 인증 정보를 포함시켜 전송하는 방식</description>
    </item>
    <item>
      <title>Cookie Based Auth</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/cookie-based-auth/</link>
      <pubDate>Wed, 06 Nov 2024 11:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/cookie-based-auth/</guid>
      <description>웹 애플리케이션에서 사용자 세션을 유지하는 전통적인 방법</description>
    </item>
    <item>
      <title>JWT</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/jwt/</link>
      <pubDate>Wed, 06 Nov 2024 11:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/jwt/</guid>
      <description>당사자 간에 정보를 안전하게 전송하기 위한 컴팩트하고 자체 포함된 방식을 정의하는 개방형 표준(RFC 7519)</description>
    </item>
    <item>
      <title>OAuth</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/oauth/</link>
      <pubDate>Wed, 06 Nov 2024 11:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/oauth/</guid>
      <description>사용자의 비밀번호를 공유하지 않고도 제3자 애플리케이션이 사용자의 데이터에 안전하게 접근할 수 있도록 하는 표준 프로토콜</description>
    </item>
    <item>
      <title>OpenID Connect</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/openid-connect/</link>
      <pubDate>Wed, 06 Nov 2024 11:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/openid-connect/</guid>
      <description>OAuth 2.0 프로토콜 위에 구축된 인증 계층으로, 사용자 인증과 기본적인 프로필 정보 획득을 위한 표준화된 방법을 제공</description>
    </item>
    <item>
      <title>Token Authentication</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/token-authentication/</link>
      <pubDate>Wed, 06 Nov 2024 11:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/authentication-methods/token-authentication/</guid>
      <description>사용자 자격 증명 대신 고유한 토큰을 사용하여 인증을 수행하며, 반복적인 로그인 없이 지속적인 접근을 가능하게 한다.</description>
    </item>
    <item>
      <title>Formal Review and Informal Review</title>
      <link>https://buenhyden.github.io/posts/qa/formal-review-and-informal-review/</link>
      <pubDate>Tue, 05 Nov 2024 05:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/formal-review-and-informal-review/</guid>
      <description>소프트웨어 개발 과정에서 품질 보증을 위해 사용되는 두 가지 주요 검토 방식이다.</description>
    </item>
    <item>
      <title>Black-box Test and White-box Test</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-test-and-white-box-test/</link>
      <pubDate>Tue, 05 Nov 2024 02:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-test-and-white-box-test/</guid>
      <description>Black-box Testing(블랙박스 테스팅)은 소프트웨어의 내부 구조나 동작 원리를 모르는 상태에서 진행하는 테스트 방식이다. 반면 White-box Testing(화이트박스 테스팅)은 소프트웨어의 내부 로직을 알고 있는 상태에서 진행하는 테스트이다.</description>
    </item>
    <item>
      <title>Beta Test</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/acceptance-test/beta-test/</link>
      <pubDate>Mon, 04 Nov 2024 06:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/acceptance-test/beta-test/</guid>
      <description>베타 테스트는 소프트웨어 개발 주기의 마지막 단계에서 수행되는 테스트로, 제품이 일반 대중에게 공개되기 전 최종 단계에서 실제 사용자들이 참여하여 진행하는 테스트이다.</description>
    </item>
    <item>
      <title>Alpha Test</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/acceptance-test/alpha-test/</link>
      <pubDate>Mon, 04 Nov 2024 06:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/acceptance-test/alpha-test/</guid>
      <description>알파 테스트는 소프트웨어 개발 주기의 후반부에 수행되는 중요한 테스트 단계로 개발 중인 소프트웨어를 실제 환경과 유사한 조건에서 테스트하는 과정이다.</description>
    </item>
    <item>
      <title>시스템 테스트 (System test)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/fundamental-testing/system-test/</link>
      <pubDate>Mon, 04 Nov 2024 06:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/fundamental-testing/system-test/</guid>
      <description>개발된 소프트웨어 시스템 전체를 검사하는 과정으로, 모든 개별 모듈과 구성 요소가 통합된 후 전체 시스템이 예상대로 작동하는지 확인한다.</description>
    </item>
    <item>
      <title>통합 테스트 (Integration Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/integration-test/</link>
      <pubDate>Mon, 04 Nov 2024 02:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/integration-test/</guid>
      <description>통합 테스트는 소프트웨어 개발 과정에서 개별적으로 테스트된 모듈들을 결합하여 전체 시스템으로서의 상호작용을 검증하는 과정이다</description>
    </item>
    <item>
      <title>단위 테스트 (Unit Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/unit-test/</link>
      <pubDate>Mon, 04 Nov 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/unit-test/</guid>
      <description>단위 테스트는 소프트웨어의 가장 작은 단위인 개별 모듈이나 컴포넌트를 독립적으로 테스트하는 과정이다.</description>
    </item>
    <item>
      <title>회귀 테스트 (Regression Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/regression-test/</link>
      <pubDate>Sun, 03 Nov 2024 14:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/regression-test/</guid>
      <description>회귀 테스트는 소프트웨어의 변경이나 수정 후에 기존 기능이 여전히 올바르게 작동하는지 확인하는 테스트이다.</description>
    </item>
    <item>
      <title>사용성 테스트 (Usability Test)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/usability-test/</link>
      <pubDate>Sun, 03 Nov 2024 14:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/usability-test/</guid>
      <description>사용성 테스트는 제품이나 서비스를 실제 사용자가 사용해보면서 그 과정을 관찰하고 분석하는 테스트 방법이다.</description>
    </item>
    <item>
      <title>부하 테스트(Load Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/load-testing/</link>
      <pubDate>Sun, 03 Nov 2024 14:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/load-testing/</guid>
      <description>부하 테스트는 소프트웨어 시스템이 예상되는 사용자 부하 하에서 어떻게 동작하는지 확인하는 성능 테스트의 한 유형이다.</description>
    </item>
    <item>
      <title>스트레스 테스트 (Stress Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/stress-testing/</link>
      <pubDate>Sun, 03 Nov 2024 14:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/stress-testing/</guid>
      <description>스트레스 테스트는 소프트웨어 시스템을 극한의 조건에서 테스트하여 그 한계를 파악하는 성능 테스트의 한 유형이다.</description>
    </item>
    <item>
      <title>보안 테스트 (Security Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/security-test/security-test/</link>
      <pubDate>Sun, 03 Nov 2024 05:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/security-test/security-test/</guid>
      <description>소프트웨어 시스템의 보안성을 평가하기 위한 일련의 활동</description>
    </item>
    <item>
      <title>호환성 테스트 (Compatibility Test)</title>
      <link>https://buenhyden.github.io/posts/qa/manual-testing/compatibility/compatibility-test/</link>
      <pubDate>Sun, 03 Nov 2024 03:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/manual-testing/compatibility/compatibility-test/</guid>
      <description>호환성 테스트는 소프트웨어가 다양한 하드웨어, 운영체제, 네트워크 환경 등에서 올바르게 작동하는지 확인하기 위해 수행되는 테스트이다.</description>
    </item>
    <item>
      <title>용량 테스트 (Volume Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/volume-test/</link>
      <pubDate>Sun, 03 Nov 2024 02:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/volume-test/</guid>
      <description>용량 테스트는 소프트웨어 시스템이 대량의 데이터를 처리할 때 어떻게 동작하는지 확인하는 성능 테스트의 한 유형이다.</description>
    </item>
    <item>
      <title>확장성 테스트 (Scalability Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/scalability-test/</link>
      <pubDate>Sun, 03 Nov 2024 02:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/scalability-test/</guid>
      <description>확장성 테스트는 소프트웨어 시스템이 증가하는 부하나 규모에 얼마나 잘 대응할 수 있는지를 평가하는 성능 테스트의 한 유형이다</description>
    </item>
    <item>
      <title>스모크 테스트 (Smoke Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/smoke-test/</link>
      <pubDate>Sun, 03 Nov 2024 02:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/functional-testing/smoke-test/</guid>
      <description>스모크 테스트는 소프트웨어의 가장 중요한 기능이 제대로 작동하는지 빠르게 확인하는 예비 테스트이다</description>
    </item>
    <item>
      <title>엔드투엔드 테스트(End-to-End Test, E2E Test)</title>
      <link>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/end-to-end-test/</link>
      <pubDate>Sun, 03 Nov 2024 02:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/end-to-end-test/</guid>
      <description>이는 사용자의 관점에서 전체 애플리케이션의 흐름을 테스트하여 모든 구성 요소가 올바르게 작동하는지 확인한다.</description>
    </item>
    <item>
      <title>스파이크 테스트(Spike Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/spike-test/</link>
      <pubDate>Sun, 03 Nov 2024 01:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/spike-test/</guid>
      <description>스파이크 테스트는 시스템에 갑작스럽고 극단적인 부하를 주어 시스템의 반응을 측정하는 성능 테스트의 한 유형이다.</description>
    </item>
    <item>
      <title>지속성 테스트(Endurance Test)</title>
      <link>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/endurance-test/</link>
      <pubDate>Sun, 03 Nov 2024 01:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/testing-techniques/non-functional-testing/performance-test/endurance-test/</guid>
      <description>지속성 테스트는 소프트웨어 시스템이 장기간 동안 지속적인 부하 상태에서 어떻게 동작하는지 확인하는 성능 테스트의 한 유형이다</description>
    </item>
    <item>
      <title>Use Case Testing</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/use-case-testing/</link>
      <pubDate>Sat, 02 Nov 2024 17:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/use-case-testing/</guid>
      <description>유즈케이스 테스팅은 유즈케이스나 비즈니스 시나리오를 기반으로 테스트를 명세화하는 블랙박스 테스트 설계 기법</description>
    </item>
    <item>
      <title>Requirements-based Testing</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/requirements-based-testing/</link>
      <pubDate>Sat, 02 Nov 2024 10:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/requirements-based-testing/</guid>
      <description>시스템의 요구사항을 기반으로 테스트 케이스를 설계하고 수행하는 방법</description>
    </item>
    <item>
      <title>Metamorphic Testing</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/metamorphic-testing/</link>
      <pubDate>Sat, 02 Nov 2024 10:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/metamorphic-testing/</guid>
      <description>메타모픽 테스팅은 소프트웨어의 의도된 기능에 대한 필수적인 속성인 메타모픽 관계(Metamorphic Relations, MRs)를 활용하여 테스트를 수행</description>
    </item>
    <item>
      <title>Boundary Value Analysis</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/boundary-value-analysis/</link>
      <pubDate>Sat, 02 Nov 2024 09:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/boundary-value-analysis/</guid>
      <description>경계값 분석은 입력 또는 출력 범위의 경계 근처에서 결함이 발생할 가능성이 높다는 경험적 관찰에 기반한 테스트 기법</description>
    </item>
    <item>
      <title>Cause-Effect Graphing</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/cause-effect-graphing/</link>
      <pubDate>Sat, 02 Nov 2024 09:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/cause-effect-graphing/</guid>
      <description>원인-결과 그래프 검사(Cause-Effect Graph Testing)는 블랙박스 테스트 기법 중 하나로, 입력 조건(원인)과 출력 결과(결과) 사이의 관계를 체계적으로 분석하고 모델링하여 효과적인 테스트 케이스를 도출하는 방법.</description>
    </item>
    <item>
      <title>Decision Table Testing</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/decision-table-testing/</link>
      <pubDate>Sat, 02 Nov 2024 09:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/decision-table-testing/</guid>
      <description>여러 조건(conditions)과 그에 따른 행동(actions)의 모든 가능한 조합을 표 형태로 정리하여 테스트 케이스를 도출하는 기법</description>
    </item>
    <item>
      <title>State Transition Testing</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/state-transition-testing/</link>
      <pubDate>Sat, 02 Nov 2024 09:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/state-transition-testing/</guid>
      <description>상태 전이 테스트는 시스템이나 객체의 상태 변화를 모델링하고, 이벤트에 따른 상태 전이와 그 결과를 검증하는 기법이다.</description>
    </item>
    <item>
      <title>분류 트리 방법 (Classification Tree Method)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/classification-tree-method/</link>
      <pubDate>Sat, 02 Nov 2024 09:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/classification-tree-method/</guid>
      <description>CTM은 1993년 Grimm과 Grochtmann에 의해 개발된 테스트 설계 방법으로, 소프트웨어의 테스트 관련 측면을 체계적으로 분류하고 조합하여 테스트 케이스를 생성한다.</description>
    </item>
    <item>
      <title>Equivalence Partitioning</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/equivalence-partitioning/</link>
      <pubDate>Sat, 02 Nov 2024 09:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/equivalence-partitioning/</guid>
      <description>동등 분할은 입력 또는 출력 데이터를 의미 있는 그룹으로 나누어 테스트하는 기법으로 핵심 아이디어는 같은 그룹에 속한 데이터는 프로그램에서 동일한 방식으로 처리될 것이라는 가정에 기반한다.</description>
    </item>
    <item>
      <title>Scenario Testing</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/scenario-testing/</link>
      <pubDate>Sat, 02 Nov 2024 09:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/scenario-testing/</guid>
      <description>시나리오 테스팅은 실제 상황을 시뮬레이션하여 소프트웨어를 검증하는 강력한 기술이다. 개별 기능에 초점을 맞춘 기존 테스트 케이스와 달리 시나리오 테스트에서는 일련의 이벤트나 상호 작용이 발생할 때 시스템이 어떻게 작동하는지 검사한다.</description>
    </item>
    <item>
      <title>조합 테스트 설계 기법 (Combinatorial Test Design Techniques)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/combinatorial-test-design-techniques/</link>
      <pubDate>Sat, 02 Nov 2024 09:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/combinatorial-test-design-techniques/</guid>
      <description>조합 테스트 설계는 입력 매개변수의 다양한 조합을 사용하여 소프트웨어 애플리케이션을 테스트하는 방법이다.</description>
    </item>
    <item>
      <title>체크리스트 기반 테스팅 (Checklist-based Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/experience-based-test/checklist-based-testing/</link>
      <pubDate>Sat, 02 Nov 2024 08:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/experience-based-test/checklist-based-testing/</guid>
      <description>Checklist-based Testing은 소프트웨어 테스팅 기법 중 하나로, 미리 정의된 체크리스트를 사용하여 체계적으로 테스트를 수행하는 방법</description>
    </item>
    <item>
      <title>랜덤 테스팅(Random Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/random-testing/</link>
      <pubDate>Sat, 02 Nov 2024 07:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/random-testing/</guid>
      <description>임의로 생성된 입력 데이터를 사용하여 프로그램을 테스트하는 방법</description>
    </item>
    <item>
      <title>탐색적 테스팅(Exploratory Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/experience-based-test/exploratory-testing/</link>
      <pubDate>Sat, 02 Nov 2024 07:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/experience-based-test/exploratory-testing/</guid>
      <description>탐색적 테스팅(Exploratory Testing)은 소프트웨어 테스팅의 한 접근 방식으로, 테스터의 창의성, 경험, 직관을 활용하여 소프트웨어를 자유롭게 탐색하며 결함을 발견하는 과정</description>
    </item>
    <item>
      <title>페어와이즈 테스팅(Pairwise Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/pairwise-testing/</link>
      <pubDate>Sat, 02 Nov 2024 07:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/pairwise-testing/</guid>
      <description>페어와이즈 테스팅은 모든 가능한 입력 값 조합을 테스트하는 대신, 입력 매개변수의 모든 쌍(pair)을 최소한 한 번씩 테스트하는 기법이다.</description>
    </item>
    <item>
      <title>비교 검사(Comparison Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/comparison-testing/</link>
      <pubDate>Sat, 02 Nov 2024 00:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/specification-based-test/comparison-testing/</guid>
      <description>비교 검사는 블랙박스 테스팅 기법 중 하나로, 동일한 기능을 수행하는 여러 버전의 소프트웨어나 시스템을 비교하여 테스트하는 방법으로 동일한 입력값을 여러 버전의 소프트웨어에 제공하고, 그 출력값을 비교하는 방식으로 진행된다.</description>
    </item>
    <item>
      <title>오류 예측 검사(Error Guessing)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/experience-based-test/error-guessing/</link>
      <pubDate>Sat, 02 Nov 2024 00:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/black-box-testing/experience-based-test/error-guessing/</guid>
      <description>오류 예측 검사(Error Guessing)는 블랙박스 테스트 기법 중 하나로, 테스터의 **경험, 지식, 직관**을 활용하여 소프트웨어에서 발생할 가능성이 높은 오류를 예측하고 이를 기반으로 테스트 케이스를 설계하는 방법</description>
    </item>
    <item>
      <title>Fakes</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/test-double/fakes/</link>
      <pubDate>Fri, 01 Nov 2024 21:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/test-double/fakes/</guid>
      <description>실제 객체의 간단한 구현을 제공하는 테스트용 객체</description>
    </item>
    <item>
      <title>Dummy Objects</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/test-double/dummy-objects/</link>
      <pubDate>Fri, 01 Nov 2024 21:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/test-double/dummy-objects/</guid>
      <description>테스트 과정에서 실제로는 사용되지 않지만 메서드의 파라미터를 채우기 위해 전달되는 객체</description>
    </item>
    <item>
      <title>Spies</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/test-double/spies/</link>
      <pubDate>Fri, 01 Nov 2024 21:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/test-double/spies/</guid>
      <description>실제 객체의 메서드 호출을 추적하고 기록하는 데 사용</description>
    </item>
    <item>
      <title>Path Coverage</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/path-coverage/</link>
      <pubDate>Fri, 01 Nov 2024 15:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/path-coverage/</guid>
      <description>프로그램의 모든 가능한 실행 경로를 최소한 한 번씩 테스트하는 것을 목표로 한다.</description>
    </item>
    <item>
      <title>조건 커버리지 (Condition Coverage)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/condition-coverage/</link>
      <pubDate>Fri, 01 Nov 2024 15:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/condition-coverage/</guid>
      <description>조건 커버리지는 결정 포인트 내의 각 개별 조건식이 참(true)과 거짓(false)의 결과를 최소한 한 번씩 갖도록 테스트하는 기법</description>
    </item>
    <item>
      <title>Decision Coverage</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/decision-coverage/</link>
      <pubDate>Fri, 01 Nov 2024 15:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/decision-coverage/</guid>
      <description>결정 커버리지는 프로그램의 모든 결정 포인트(조건문)에서 전체 조건식이 최소한 한 번씩 참(True)과 거짓(False)의 결과를 가지도록 테스트하는 방법</description>
    </item>
    <item>
      <title>Statement Coverage</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/statement-coverage/</link>
      <pubDate>Fri, 01 Nov 2024 15:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/statement-coverage/</guid>
      <description>프로그램을 구성하는 모든 문장들이 최소한 한 번은 실행될 수 있는 입력 데이터를 테스트 데이터로 선정하는 기준</description>
    </item>
    <item>
      <title>Function Coverage</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/function-coverage/</link>
      <pubDate>Fri, 01 Nov 2024 10:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/function-coverage/</guid>
      <description>함수 커버리지는 프로그램 내의 모든 함수가 테스트 중에 최소한 한 번 이상 호출되었는지를 측정하는 지표이다.</description>
    </item>
    <item>
      <title>다중 조건 테스팅 (Branch Condition Combination Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/branch-condition-combination-testing/</link>
      <pubDate>Fri, 01 Nov 2024 10:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/branch-condition-combination-testing/</guid>
      <description>다중 조건 테스팅(Branch Condition Combination Testing)은 화이트박스 테스트 기법 중 하나로, 조건문 내의 모든 가능한 조건 조합을 테스트하는 방법이다</description>
    </item>
    <item>
      <title>Data Flow Testing</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/data-flow-testing/</link>
      <pubDate>Fri, 01 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/data-flow-testing/</guid>
      <description>데이터 흐름 테스팅(Data Flow Testing)은 소프트웨어 테스트 기법 중 하나로, 프로그램 내에서 데이터의 정의와 사용에 초점을 맞춰 테스트를 수행하는 방법</description>
    </item>
    <item>
      <title>변경 조건/결정 커버리지 테스팅 (Modified Condition/Decision Coverage Testing, MC/DC)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/modified-condition-decision-coverage-testing/</link>
      <pubDate>Fri, 01 Nov 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/modified-condition-decision-coverage-testing/</guid>
      <description>MC/DC는 결정문 내의 각 조건이 독립적으로 결정의 결과에 영향을 미치는지 확인하는 테스트 기법</description>
    </item>
    <item>
      <title>Stubs</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/test-double/stubs/</link>
      <pubDate>Fri, 01 Nov 2024 09:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/test-double/stubs/</guid>
      <description>테스트에서 사용되는 기법으로, 실제 객체나 아직 구현되지 않은 코드를 대신하여 미리 정의된 응답을 제공하는 메커니즘</description>
    </item>
    <item>
      <title>구문 테스팅(Syntax Testing)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/syntax-testing/</link>
      <pubDate>Fri, 01 Nov 2024 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/testing-approaches/white-box-testing/syntax-testing/</guid>
      <description>구문 테스팅(Syntax Testing)은 화이트박스 테스트 기법 중 하나로, 소프트웨어의 내부 구조와 코드를 검증하는 방법</description>
    </item>
    <item>
      <title>Mocks</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/test-double/mocks/</link>
      <pubDate>Fri, 01 Nov 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/test-double/mocks/</guid>
      <description>소프트웨어 테스트에서 사용되는 중요한 기법으로, 실제 객체를 모방하는 가짜 객체를 만들어 테스트하는 방법</description>
    </item>
    <item>
      <title>레플리케이션 (replication)</title>
      <link>https://buenhyden.github.io/posts/databases/rdbms/replication/</link>
      <pubDate>Wed, 30 Oct 2024 06:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/databases/rdbms/replication/</guid>
      <description>하나의 데이터베이스(마스터 또는 프라이머리)의 데이터를 다른 데이터베이스(슬레이브 또는 세컨더리)로 복제하는 프로세스</description>
    </item>
    <item>
      <title>Security Vulnerability Scanning</title>
      <link>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/security-vulnerability-scanning/</link>
      <pubDate>Tue, 29 Oct 2024 16:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/security-vulnerability-scanning/</guid>
      <description>보안 취약점 스캔은 자동화된 도구를 사용하여 시스템과 소프트웨어의 보안 약점을 찾아내는 과정으로, 시스템, 네트워크, 소프트웨어의 보안 취약점을 식별하고 분석하는 프로세스이다</description>
    </item>
    <item>
      <title>성능 프로파일링 (Performance Profiling)</title>
      <link>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/performance-profiling/</link>
      <pubDate>Tue, 29 Oct 2024 16:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/performance-profiling/</guid>
      <description>성능 프로파일링(Performance Profiling)은 소프트웨어의 실행 동작을 분석하여 성능을 측정하고 개선하는 기술이다</description>
    </item>
    <item>
      <title>Desk Check</title>
      <link>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/informal-review/desk-check/</link>
      <pubDate>Tue, 29 Oct 2024 07:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/informal-review/desk-check/</guid>
      <description>데스크 체크는 가장 기본적인 비형식 리뷰 방법 중 하나로, 개발자가 자신의 코드를 스스로 검토하는 과정</description>
    </item>
    <item>
      <title>워크스루(Walkthrough)</title>
      <link>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/informal-review/walkthrough/</link>
      <pubDate>Tue, 29 Oct 2024 07:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/informal-review/walkthrough/</guid>
      <description>워크스루는 코드 작성자가 다른 개발자들에게 코드를 단계별로 설명하며 진행하는 비형식적 리뷰 방식</description>
    </item>
    <item>
      <title>코드 리뷰 (Code Review)</title>
      <link>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/informal-review/code-review/</link>
      <pubDate>Tue, 29 Oct 2024 07:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/informal-review/code-review/</guid>
      <description>코드 리뷰는 개발자가 작성한 코드를 다른 개발자들이 검토하고 피드백을 제공하는 과정이다.</description>
    </item>
    <item>
      <title>패스 어라운드(Pass Around)</title>
      <link>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/informal-review/pass-around/</link>
      <pubDate>Tue, 29 Oct 2024 07:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/informal-review/pass-around/</guid>
      <description>패스 어라운드는 비형식적 코드 리뷰의 한 형태로, 코드가 여러 리뷰어들 사이를 &amp;#34;돌아다니며&amp;#34; 검토되는 방식을 말한다.</description>
    </item>
    <item>
      <title>감사(Audit)</title>
      <link>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/formal-review/audit/</link>
      <pubDate>Tue, 29 Oct 2024 07:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/formal-review/audit/</guid>
      <description>독립적인 검토자들이 소프트웨어 산출물과 프로세스를 체계적으로 검사하고 평가하는 공식적인 검토 과정이다.</description>
    </item>
    <item>
      <title>페어 프로그래밍(Pair Programming)</title>
      <link>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/informal-review/pair-programming/</link>
      <pubDate>Tue, 29 Oct 2024 07:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/informal-review/pair-programming/</guid>
      <description>페어 프로그래밍은 두 명의 개발자가 하나의 컴퓨터에서 함께 작업하는 협력적인 개발 방식</description>
    </item>
    <item>
      <title>Inspection</title>
      <link>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/formal-review/inspection/</link>
      <pubDate>Tue, 29 Oct 2024 07:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/formal-review/inspection/</guid>
      <description>인스펙션은 FTR(Formal Technical Review)라고도 불리며, 정형화된 절차와 체크리스트를 사용하여 소프트웨어 산출물의 결함을 찾아내는 방법이다.</description>
    </item>
    <item>
      <title>관리 검토(Management Review)</title>
      <link>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/formal-review/management-review/</link>
      <pubDate>Tue, 29 Oct 2024 07:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/formal-review/management-review/</guid>
      <description>관리 검토는 소프트웨어 개발 프로젝트의 진행 상황, 목표 달성도, 리스크 등을 경영진과 프로젝트 관리자가 검토하는 공식적인 프로세스</description>
    </item>
    <item>
      <title>기술 검토(Technical Review)</title>
      <link>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/formal-review/technical-review/</link>
      <pubDate>Tue, 29 Oct 2024 07:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/peer-review/formal-review/technical-review/</guid>
      <description>기술 검토는 소프트웨어의 기술적 측면을 전문가들이 체계적으로 평가하는 공식적인 검토 프로세스이다.</description>
    </item>
    <item>
      <title>정적 코드 분석 (Static Code analysis)</title>
      <link>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/static-code-analysis/</link>
      <pubDate>Tue, 29 Oct 2024 06:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/manual-testing/verification-and-validation/verification/static-code-analysis/</guid>
      <description>정적 코드 분석은 프로그램을 실행하지 않고 소스 코드를 분석하여 잠재적인 결함, 취약점, 코딩 표준 위반 등을 찾아내는 기술이다</description>
    </item>
    <item>
      <title>코드 크기 메트릭(Lines of Code, LOC)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/quality-metric/lines-of-code/</link>
      <pubDate>Mon, 28 Oct 2024 10:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/quality-metric/lines-of-code/</guid>
      <description>이 메트릭은 프로그램의 크기를 코드 라인 수로 표현하며, 소프트웨어 개발 프로젝트의 규모 추정, 생산성 측정, 품질 관리 등에 활용된다</description>
    </item>
    <item>
      <title>유지보수성 지수 (Maintainability Index)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/quality-metric/maintainability-index/</link>
      <pubDate>Mon, 28 Oct 2024 09:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/quality-metric/maintainability-index/</guid>
      <description>유지보수성 지수는 코드를 얼마나 쉽게 유지보수할 수 있는지를 나타내는 0에서 100 사이의 수치로 높을수록 코드의 유지보수가 더 쉽다는 것을 의미한다.</description>
    </item>
    <item>
      <title>응집도(Cohesion)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/quality-metric/cohesion/</link>
      <pubDate>Mon, 28 Oct 2024 09:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/quality-metric/cohesion/</guid>
      <description>하나의 모듈이 얼마나 단일한 목적에 집중되어 있는지를 나타낸다.</description>
    </item>
    <item>
      <title>코드 중복도 (Code Duplication)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/quality-metric/code-duplication/</link>
      <pubDate>Mon, 28 Oct 2024 09:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/quality-metric/code-duplication/</guid>
      <description>코드 중복도는 소프트웨어 내에서 동일하거나 유사한 코드가 반복되는 정도를 나타낸다</description>
    </item>
    <item>
      <title>결합도 (Coupling)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/quality-metric/coupling/</link>
      <pubDate>Mon, 28 Oct 2024 09:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/quality-metric/coupling/</guid>
      <description>서로 다른 모듈 간의 상호 의존성이나 연관성을 측정하는 지표</description>
    </item>
    <item>
      <title>테스트 커버리지 (Test Coverage)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/quality-metric/test-coverage/</link>
      <pubDate>Mon, 28 Oct 2024 09:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/quality-metric/test-coverage/</guid>
      <description>테스트 커버리지는 테스트 대상 시스템이나 소프트웨어에 대해 얼마나 충분한 테스트가 수행되었는지를 나타내는 척도</description>
    </item>
    <item>
      <title>Halstead Complexity</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/quality-metric/halstead-complexity/</link>
      <pubDate>Mon, 28 Oct 2024 09:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/quality-metric/halstead-complexity/</guid>
      <description>프로그램의 복잡성을 연산자(operators)와 피연산자(operands)의 수를 기반으로 측정한다</description>
    </item>
    <item>
      <title>순환 복잡도 (Cyclomatic Complexity)</title>
      <link>https://buenhyden.github.io/posts/qa/fundamentals/quality-metric/cyclomatic-complexity/</link>
      <pubDate>Mon, 28 Oct 2024 07:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/fundamentals/quality-metric/cyclomatic-complexity/</guid>
      <description>프로그램의 논리적 복잡성을 정량적으로 측정하는 지표</description>
    </item>
    <item>
      <title>SOC 2</title>
      <link>https://buenhyden.github.io/posts/qa/standards-and-policies/soc-2/</link>
      <pubDate>Sun, 27 Oct 2024 13:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/standards-and-policies/soc-2/</guid>
      <description>SOC 2(Service Organization Control 2)는 미국공인회계사회(AICPA)가 개발한 **서비스 기업의 데이터 보안 및 개인정보 보호 관리 체계**를 검증하는 국제 인증 제도</description>
    </item>
    <item>
      <title>PCI DSS(Payment Card Industry Data Security Standard)</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/standards-and-compliance/pci-dss/</link>
      <pubDate>Sun, 27 Oct 2024 13:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/standards-and-compliance/pci-dss/</guid>
      <description>PCI DSS(Payment Card Industry Data Security Standard)는 신용카드 결제 과정에서 카드 소유자의 데이터를 안전하게 보호하기 위해 주요 글로벌 카드 브랜드(Visa, MasterCard, American Express, Discover, JCB)가 공동으로 제정한 국제 보안 표준이다.</description>
    </item>
    <item>
      <title>소프트웨어 라이선스 (Software License)</title>
      <link>https://buenhyden.github.io/posts/qa/standards-and-policies/software-license/</link>
      <pubDate>Sun, 27 Oct 2024 12:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/standards-and-policies/software-license/</guid>
      <description>소프트웨어의 사용, 수정, 배포에 대한 권리와 제한을 정의하는 법적 도구</description>
    </item>
    <item>
      <title>Airflow</title>
      <link>https://buenhyden.github.io/posts/data/data-engineering/data-pipeline/airflow/</link>
      <pubDate>Sat, 26 Oct 2024 05:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data/data-engineering/data-pipeline/airflow/</guid>
      <description>Apache Airflow는 데이터 파이프라인을 구축, 관리, 모니터링하기 위한 오픈소스 플랫폼이다.</description>
    </item>
    <item>
      <title>백프레셔(Backpressure)</title>
      <link>https://buenhyden.github.io/posts/system-design/asynchronism/back-pressure/backpressure/</link>
      <pubDate>Sat, 26 Oct 2024 04:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/asynchronism/back-pressure/backpressure/</guid>
      <description>백프레셔는 시스템에서 데이터나 작업의 처리 속도가 유입 속도를 따라가지 못할 때 발생하는 압력을 의미한다.</description>
    </item>
    <item>
      <title>데이터베이스 클러스터링 (Clustering)과 레플리케이션(Replication)</title>
      <link>https://buenhyden.github.io/posts/databases/rdbms/database-clustering-and-replication/</link>
      <pubDate>Fri, 25 Oct 2024 15:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/databases/rdbms/database-clustering-and-replication/</guid>
      <description>데이터베이스 클러스터링 (Clustering)과 레플리케이션(Replication)은 데이터베이스의 가용성과 성능을 향상시키는 전략으로, 각각의 목적과 구현 방식에서 차이가 있다.</description>
    </item>
    <item>
      <title>데이터 불일치 (Data Inconsistency)</title>
      <link>https://buenhyden.github.io/posts/databases/data-inconsistency/</link>
      <pubDate>Fri, 25 Oct 2024 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/databases/data-inconsistency/</guid>
      <description>동일한 데이터가 데이터베이스 내의 여러 위치에서 서로 다른 형식이나 값으로 존재하는 상황</description>
    </item>
    <item>
      <title>데이터베이스 잠금 (database lock)</title>
      <link>https://buenhyden.github.io/posts/databases/more-about-databases/tracsactions/database-lock/</link>
      <pubDate>Thu, 24 Oct 2024 15:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/databases/more-about-databases/tracsactions/database-lock/</guid>
      <description>여러 사용자가 동시에 데이터에 접근할 때 데이터의 일관성과 무결성을 보장하기 위한 핵심적인 메커니즘</description>
    </item>
    <item>
      <title>ACID</title>
      <link>https://buenhyden.github.io/posts/databases/more-about-databases/tracsactions/acid/</link>
      <pubDate>Thu, 24 Oct 2024 13:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/databases/more-about-databases/tracsactions/acid/</guid>
      <description>트랜잭션의 신뢰성과 일관성을 정의하는 네 가지 주요 특성</description>
    </item>
    <item>
      <title>N plus one problem</title>
      <link>https://buenhyden.github.io/posts/databases/more-about-databases/n-plus-one-problem/</link>
      <pubDate>Thu, 24 Oct 2024 11:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/databases/more-about-databases/n-plus-one-problem/</guid>
      <description>N&#43;1 문제는 하나의 쿼리로 N개의 엔티티를 조회한 후, 각 엔티티와 연관된 데이터를 조회하기 위해 N번의 추가 쿼리가 발생하는 현상을 말한다.</description>
    </item>
    <item>
      <title>프로시저 (Procedure)</title>
      <link>https://buenhyden.github.io/posts/databases/rdbms/procedure/</link>
      <pubDate>Thu, 24 Oct 2024 09:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/databases/rdbms/procedure/</guid>
      <description>데이터베이스 프로시저(Database Procedure)는 데이터베이스 내에 저장되고 실행되는 일련의 SQL 문들의 집합이다.</description>
    </item>
    <item>
      <title>keyword</title>
      <link>https://buenhyden.github.io/posts/databases/rdbms/sql/syntax/keywords/</link>
      <pubDate>Thu, 24 Oct 2024 07:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/databases/rdbms/sql/syntax/keywords/</guid>
      <description>SQL(Structured Query Language)는 데이터베이스를 관리하고 조작하기 위한 표준 언어로, 다양한 **키워드**를 통해 데이터 정의, 조작, 제어, 트랜잭션 관리 등을 수행한다.</description>
    </item>
    <item>
      <title>Cardinality</title>
      <link>https://buenhyden.github.io/posts/databases/rdbms/sql/cardinality/</link>
      <pubDate>Tue, 22 Oct 2024 15:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/databases/rdbms/sql/cardinality/</guid>
      <description>두 엔티티 간의 최대 연관성 혹은 특정 컬럼에 존재하는 고유한 값의 개수를 의미한다.</description>
    </item>
    <item>
      <title>분산 쿼리 (distributed query)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/distributed/distributed-database/distributed-query/</link>
      <pubDate>Tue, 22 Oct 2024 09:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/distributed/distributed-database/distributed-query/</guid>
      <description>여러 노드에 분산된 데이터를 대상으로 쿼리를 실행하고 결과를 얻는 과정</description>
    </item>
    <item>
      <title>분산 트랜잭션 (Distributed transaction)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/distributed/distributed-database/distributed-transaction/</link>
      <pubDate>Tue, 22 Oct 2024 09:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/distributed/distributed-database/distributed-transaction/</guid>
      <description>여러 분산된 데이터베이스 노드에서 수행되는 하나의 논리적 작업 단위를 의미한다</description>
    </item>
    <item>
      <title>데이터베이스 클러스터링(Database Clustering)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/distributed/distributed-database/database-clustering/</link>
      <pubDate>Tue, 22 Oct 2024 06:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/distributed/distributed-database/database-clustering/</guid>
      <description>하나의 데이터베이스를 여러 개의 서버 또는 인스턴스로 구성하여 운영하는 기술</description>
    </item>
    <item>
      <title>샤딩 (sharding)</title>
      <link>https://buenhyden.github.io/posts/databases/rdbms/sharding/</link>
      <pubDate>Tue, 22 Oct 2024 06:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/databases/rdbms/sharding/</guid>
      <description>대규모 데이터베이스 시스템에서 데이터를 수평적으로 분할하여 여러 서버에 분산 저장하는 기술</description>
    </item>
    <item>
      <title>데이터베이스 캐싱 (Database Caching)</title>
      <link>https://buenhyden.github.io/posts/system-design/caching/types/database-caching/</link>
      <pubDate>Tue, 22 Oct 2024 06:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/caching/types/database-caching/</guid>
      <description>자주 사용되는 데이터를 빠르게 접근할 수 있는 메모리에 임시로 저장하는 기술</description>
    </item>
    <item>
      <title>쿼리 최적화 (Query Optimization)</title>
      <link>https://buenhyden.github.io/posts/databases/rdbms/sql/indexes/query-optimization/</link>
      <pubDate>Tue, 22 Oct 2024 06:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/databases/rdbms/sql/indexes/query-optimization/</guid>
      <description>데이터베이스 시스템의 성능을 향상시키고 효율성을 높이기 위한 중요한 프로세스</description>
    </item>
    <item>
      <title>데이터베이스 최적화 (Database Optimization)</title>
      <link>https://buenhyden.github.io/posts/databases/more-about-databases/database-optimization/</link>
      <pubDate>Tue, 22 Oct 2024 06:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/databases/more-about-databases/database-optimization/</guid>
      <description>데이터베이스 시스템의 성능을 향상시키고 효율성을 높이기 위한 다양한 기법과 프로세스를 의미한다.</description>
    </item>
    <item>
      <title>SingleStore</title>
      <link>https://buenhyden.github.io/posts/databases/rdbms/singlestore/</link>
      <pubDate>Tue, 22 Oct 2024 03:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/databases/rdbms/singlestore/</guid>
      <description>&lt;h2 id=&#34;singlestore&#34;&gt;SingleStore&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;img alt=&#34;SingleStore&#34; loading=&#34;lazy&#34; src=&#34;https://buenhyden.github.io/img/singlestore-connect_diagram_cloud_img-1.webp&#34;&gt;&lt;figcaption&gt;https://www.singlestore.com/blog/singlestore-connect-for-real-time-enterprises/&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Event Broker</title>
      <link>https://buenhyden.github.io/posts/backend/event-broker-and-message-broker/event-broker/</link>
      <pubDate>Mon, 21 Oct 2024 06:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/event-broker-and-message-broker/event-broker/</guid>
      <description>이벤트 생성자(Producer)와 이벤트 소비자(Consumer) 사이에서 중개자 역할을 수행한다</description>
    </item>
    <item>
      <title>Message Broker</title>
      <link>https://buenhyden.github.io/posts/backend/event-broker-and-message-broker/message-broker/</link>
      <pubDate>Mon, 21 Oct 2024 05:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/event-broker-and-message-broker/message-broker/</guid>
      <description>소프트웨어 애플리케이션, 시스템 및 서비스 간의 통신을 가능하게 하는 중간 소프트웨어 모듈</description>
    </item>
    <item>
      <title>Cloud Networking</title>
      <link>https://buenhyden.github.io/til/2024/10/20/cloud-networking/</link>
      <pubDate>Sun, 20 Oct 2024 17:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/20/cloud-networking/</guid>
      <description>클라우드 네트워킹은 클라우드 컴퓨팅 환경에서 리소스들을 연결하고 통신할 수 있게 해주는 인프라를 의미한다.</description>
    </item>
    <item>
      <title>폴링(Polling)</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/polling/</link>
      <pubDate>Sun, 20 Oct 2024 16:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/polling/</guid>
      <description>폴링(Polling)은 소프트웨어 개발에서 중요한 통신 기법으로, 클라이언트가 주기적으로 서버에 데이터나 상태 변경을 요청하는 방식이다.</description>
    </item>
    <item>
      <title>Data Transmission</title>
      <link>https://buenhyden.github.io/til/2024/10/20/data-transmission/</link>
      <pubDate>Sun, 20 Oct 2024 09:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/20/data-transmission/</guid>
      <description>데이터 전송 및 처리 방식은 다양한 기준에 따라 분류되며, 각 방식은 특정한 통신 환경과 요구 사항에 맞게 선택된다.</description>
    </item>
    <item>
      <title>스트리밍 (Streaming)</title>
      <link>https://buenhyden.github.io/til/2024/10/20/streaming/</link>
      <pubDate>Sun, 20 Oct 2024 06:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/20/streaming/</guid>
      <description>스트리밍은 인터넷을 통해 오디오, 비디오 및 기타 콘텐츠를 실시간으로 전송하고 재생하는 기술</description>
    </item>
    <item>
      <title>AMQP</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/messaging-protocol/amqp/</link>
      <pubDate>Sun, 20 Oct 2024 05:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/messaging-protocol/amqp/</guid>
      <description>AMQP(Advanced Message Queuing Protocol)는 메시지 지향 미들웨어를 위한 개방형 표준 응용 계층 프로토콜이다.</description>
    </item>
    <item>
      <title>MQTT</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/messaging-protocol/mqtt/</link>
      <pubDate>Sun, 20 Oct 2024 04:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/messaging-protocol/mqtt/</guid>
      <description>MQTT(Message Queuing Telemetry Transport)는 IoT 환경에서 널리 사용되는 경량 메시징 프로토콜이다.</description>
    </item>
    <item>
      <title>네트워크 기능 가상화(Network Functions Virtualization, NFV)</title>
      <link>https://buenhyden.github.io/til/2024/10/20/network-functions-virtualization/</link>
      <pubDate>Sun, 20 Oct 2024 02:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/20/network-functions-virtualization/</guid>
      <description>NFV는 전통적으로 전용 하드웨어 장비에서 실행되던 네트워크 기능들을 가상화하여 소프트웨어로 구현하는 네트워크 아키텍처 개념이다.</description>
    </item>
    <item>
      <title>소프트웨어 정의 네트워킹 (Software-Defined Networking, SDN)</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/software-defined-networking/</link>
      <pubDate>Sun, 20 Oct 2024 02:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/software-defined-networking/</guid>
      <description>네트워크의 제어 기능을 네트워크 장비에서 분리하여 소프트웨어 기반 컨트롤러로 중앙집중화하는 네트워크 아키텍처.</description>
    </item>
    <item>
      <title>RDMA</title>
      <link>https://buenhyden.github.io/til/2024/10/20/rdma/</link>
      <pubDate>Sun, 20 Oct 2024 01:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/20/rdma/</guid>
      <description>네트워크 상의 한 컴퓨터에서 다른 컴퓨터의 메모리에 직접 접근할 수 있게 해주는 기술로, CPU의 개입 없이 데이터를 전송할 수 있는 고성능 네트워크 기술</description>
    </item>
    <item>
      <title>HATEOAS (Hypermedia As The Engine Of Application State)</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/hateoas/</link>
      <pubDate>Sat, 19 Oct 2024 07:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/restful-api/hateoas/</guid>
      <description>RESTful API 설계의 중요한 개념으로, 클라이언트와 서버 간의 동적이고 유연한 상호작용을 가능하게 하는 방식.</description>
    </item>
    <item>
      <title>웹훅 (Webhook)</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/webhook/</link>
      <pubDate>Sat, 19 Oct 2024 06:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/webhooks-vs-polling/webhook/</guid>
      <description>웹훅은 웹 애플리케이션에서 특정 이벤트가 발생했을 때 다른 애플리케이션에 실시간으로 정보를 전달하는 방법이다.</description>
    </item>
    <item>
      <title>WebRTC(Web Real-Time Communication) API</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/webrtc-api/</link>
      <pubDate>Sat, 19 Oct 2024 06:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/webrtc-api/</guid>
      <description>WebRTC(Web Real-Time Communication) API는 웹 브라우저 간에 플러그인 없이 실시간 통신을 가능하게 하는 기술.</description>
    </item>
    <item>
      <title>Server sent Events</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/server-sent-events/</link>
      <pubDate>Sat, 19 Oct 2024 06:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/real-time-apis/server-sent-events/</guid>
      <description>SSE는 서버가 클라이언트로 단방향 실시간 이벤트 스트림을 전송할 수 있게 해주는 웹 기술</description>
    </item>
    <item>
      <title>쓰로틀링 (Throttling)</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-performance/rate-limiting-and-throttling/throttling/</link>
      <pubDate>Sat, 19 Oct 2024 04:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-performance/rate-limiting-and-throttling/throttling/</guid>
      <description>쓰로틀링(Throttling)은 시스템이나 리소스의 과도한 사용을 제어하고 관리하는 기술이다.</description>
    </item>
    <item>
      <title>SOAP API</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/soap-api/</link>
      <pubDate>Sat, 19 Oct 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/soap-api/</guid>
      <description>SOAP(Simple Object Access Protocol) API는 XML 기반의 메시지 교환 프로토콜</description>
    </item>
    <item>
      <title>로드밸런싱 (LoadBalancing)</title>
      <link>https://buenhyden.github.io/posts/system-design/load-balancers/loadbalancing/</link>
      <pubDate>Sat, 19 Oct 2024 02:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/load-balancers/loadbalancing/</guid>
      <description>여러 서버나 네트워크 리소스에 작업량을 분산시켜주는 방법으로 이를 통해 특정 서버에 부하가 집중되는 것을 방지하고, 전체 시스템의 안정성과 가용성을 높일 수 있다.</description>
    </item>
    <item>
      <title>PDU and SDU</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/pdu-and-sdu/</link>
      <pubDate>Sat, 19 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/pdu-and-sdu/</guid>
      <description>데이터에 헤더 (Header) 를 붙이고 아래 계층에 보내는 것을 캡슐화 (Encapsulation), 데이터에 헤더를 제거하고 위 계층에 보내는 것을 역캡슐화 (Decapsulation)</description>
    </item>
    <item>
      <title>멱등성 (Idempotency)과 안전한 메서드 (Safe Methods)의 비교</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/idempotency/idempotency-and-safe-methods/</link>
      <pubDate>Sat, 19 Oct 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/idempotency/idempotency-and-safe-methods/</guid>
      <description>멱등성과 안전한 메서드는 HTTP 메서드의 중요한 특성으로, 서버의 상태 변화와 관련이 있다.</description>
    </item>
    <item>
      <title>안전한 메서드 (Safe Methods)</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/safe-methods/</link>
      <pubDate>Fri, 18 Oct 2024 16:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/safe-methods/</guid>
      <description>서버의 상태를 변경하지 않는 HTTP 메서드</description>
    </item>
    <item>
      <title>SSH (Secure Shell)</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/remote-access-protocols/ssh/</link>
      <pubDate>Fri, 18 Oct 2024 12:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/remote-access-protocols/ssh/</guid>
      <description>SSH는 네트워크 상의 다른 컴퓨터에 안전하게 접속하기 위한 암호화 네트워크 프로토콜.</description>
    </item>
    <item>
      <title>SSL and TLS</title>
      <link>https://buenhyden.github.io/posts/backend/web-security/ssl-and-tls/</link>
      <pubDate>Fri, 18 Oct 2024 08:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/web-security/ssl-and-tls/</guid>
      <description>인터넷 상에서 데이터를 안전하게 전송하기 위한 암호화 프로토콜.</description>
    </item>
    <item>
      <title>SSL and TLS</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/ssl-and-tls/</link>
      <pubDate>Fri, 18 Oct 2024 08:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/ssl-and-tls/</guid>
      <description>인터넷 상에서 데이터를 안전하게 전송하기 위한 암호화 프로토콜.</description>
    </item>
    <item>
      <title>CORS</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/cors/</link>
      <pubDate>Fri, 18 Oct 2024 07:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/cors/</guid>
      <description>다른 출처(Origin)의 리소스를 공유하기 위한 보안 메커니즘</description>
    </item>
    <item>
      <title>Cookies</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/cookies/</link>
      <pubDate>Fri, 18 Oct 2024 07:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/cookies/</guid>
      <description>웹사이트가 사용자의 브라우저에 저장하는 작은 텍스트 파일</description>
    </item>
    <item>
      <title>HTTP Cache</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/http-cache/</link>
      <pubDate>Fri, 18 Oct 2024 07:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/http-cache/</guid>
      <description>웹 브라우저나 서버에서 데이터를 임시 저장하는 기술</description>
    </item>
    <item>
      <title>HTTP Headers</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/http-headers/</link>
      <pubDate>Fri, 18 Oct 2024 07:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/http-headers/</guid>
      <description>HTTP 요청이나 응답에서 전달할 부가적인 정보를 담는 데이터</description>
    </item>
    <item>
      <title>HTTP Methods</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/http-methods/</link>
      <pubDate>Fri, 18 Oct 2024 07:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/http-methods/</guid>
      <description>클라이언트가 서버에 특정 작업을 요청하기 위해 사용하는 방식</description>
    </item>
    <item>
      <title>HTTP Status Code</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/http-status-code/</link>
      <pubDate>Fri, 18 Oct 2024 07:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/http-status-code/</guid>
      <description>서버가 클라이언트의 요청에 대한 응답 상태를 나타내는 3자리 숫자.</description>
    </item>
    <item>
      <title>URI</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/uri/</link>
      <pubDate>Fri, 18 Oct 2024 04:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/http/uri/</guid>
      <description>인터넷 상의 자원을 고유하게 식별하기 위한 문자열로 URL과 URN은 모두 URI의 하위 개념이라고 볼 수 있다.</description>
    </item>
    <item>
      <title>WebSocket</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/websocket/</link>
      <pubDate>Fri, 18 Oct 2024 04:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/websocket/</guid>
      <description>웹 환경에서 클라이언트와 서버 간의 실시간 양방향 통신을 가능하게 하는 프로토콜</description>
    </item>
    <item>
      <title>서브넷팅 (Subnetting)</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/internet-protocol/subnetting/</link>
      <pubDate>Thu, 17 Oct 2024 13:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/internet-protocol/subnetting/</guid>
      <description>서브넷팅(Subnetting)은 네트워크를 더 작은 단위의 네트워크로 분할하는 기술로 IP 주소의 효율적인 사용과 네트워크 관리를 개선하기 위해 사용된다.</description>
    </item>
    <item>
      <title>네트워크 주소 변환 (NAT, Network Address Translation)</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/internet-protocol/nat/</link>
      <pubDate>Thu, 17 Oct 2024 13:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/internet-protocol/nat/</guid>
      <description>네트워크 주소 변환(NAT, Network Address Translation)은 IP 패킷의 TCP/UDP 포트 번호와 소스 및 목적지의 IP 주소를 재기록하면서 라우터를 통해 네트워크 트래픽을 주고받는 기술이다.</description>
    </item>
    <item>
      <title>CIDR (Classless Inter-Domain Routing)</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/internet-protocol/cidr/</link>
      <pubDate>Thu, 17 Oct 2024 11:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/internet-protocol/cidr/</guid>
      <description>CIDR는 도메인 간 라우팅에 사용되는 인터넷 주소를 기존의 IP 주소 클래스 체계보다 더 유연하게 할당하고 지정하는 방식</description>
    </item>
    <item>
      <title>IP Delivery Modes</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/internet-protocol/ip-delivery-modes/</link>
      <pubDate>Thu, 17 Oct 2024 07:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/network-protocols/internet-protocol/ip-delivery-modes/</guid>
      <description>네트워크에서 데이터를 전송하는 다양한 방식.</description>
    </item>
    <item>
      <title>DNS 캐싱 (DNS Caching)</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/domain-name-system/dns-caching/</link>
      <pubDate>Thu, 17 Oct 2024 07:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/domain-name-system/dns-caching/</guid>
      <description>DNS 캐싱은 이전에 조회한 도메인 이름과 IP 주소의 매핑 정보를 임시로 저장하는 메커니즘이다.</description>
    </item>
    <item>
      <title>DNS Records</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/domain-name-system/dns-records/</link>
      <pubDate>Thu, 17 Oct 2024 07:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/domain-name-system/dns-records/</guid>
      <description>DNS Records는 도메인 이름 시스템(DNS)에서 사용되는 데이터 구조로, 도메인과 관련된 다양한 정보를 저장한다.</description>
    </item>
    <item>
      <title>Domain</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/domain-name-system/domain/</link>
      <pubDate>Thu, 17 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/domain-name-system/domain/</guid>
      <description>도메인(Domain)은 인터넷 상의 계층적 주소 체계로, 사용자가 이해하기 쉬운 형태의 웹사이트 주소를 제공한다.</description>
    </item>
    <item>
      <title>Media Access Control Address (MAC Address)</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/hardwares/media-access-control-address/</link>
      <pubDate>Wed, 16 Oct 2024 12:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/hardwares/media-access-control-address/</guid>
      <description>네트워크 장비를 식별하기 위한 고유한 하드웨어 주소</description>
    </item>
    <item>
      <title>Packet</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/packet/</link>
      <pubDate>Wed, 16 Oct 2024 10:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/packet/</guid>
      <description>패킷(Packet)은 네트워크를 통해 전송되는 데이터의 기본 단위</description>
    </item>
    <item>
      <title>Routing</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/routing/</link>
      <pubDate>Wed, 16 Oct 2024 10:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/routing/</guid>
      <description>데이터 패킷이 출발지에서 목적지까지 가장 효율적인 경로로 전달되도록 하는 과정.</description>
    </item>
    <item>
      <title>Network Hop</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/network-hop/</link>
      <pubDate>Wed, 16 Oct 2024 09:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/network-hop/</guid>
      <description>네트워크 홉(Network Hop)은 데이터 패킷이 출발지에서 목적지로 이동하는 과정에서 거치는 네트워크 장비(주로 라우터)의 횟수를 의미한다.</description>
    </item>
    <item>
      <title>프래그먼테이션 (Fragmentation)</title>
      <link>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/fragmentation/</link>
      <pubDate>Wed, 16 Oct 2024 02:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-knowledge/fundamentals/osi-7layers/network-layer/fragmentation/</guid>
      <description>Fragmentation은 큰 데이터 패킷을 네트워크의 최대 전송 단위(Maximum Transmission Unit, MTU)보다 작은 조각으로 나누는 과정이다.</description>
    </item>
    <item>
      <title>보간 검색 (Interpolation Search)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/searching/interpolation-search/</link>
      <pubDate>Tue, 15 Oct 2024 12:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/searching/interpolation-search/</guid>
      <description>이진 탐색(Binary Search)과 유사하지만, 데이터 분포를 고려해 탐색 위치를 예측함으로써 평균적으로 더 빠른 성능을 보인다. 특히 균등한 데이터 분포에서 효과적이다.</description>
    </item>
    <item>
      <title>깊이 우선 탐색 (Depth-First Search)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/searching/depth-first-search/</link>
      <pubDate>Tue, 15 Oct 2024 05:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/searching/depth-first-search/</guid>
      <description>그래프나 트리 구조에서 하나의 경로를 끝까지 탐색한 후 다음 경로를 탐색하는 알고리즘.</description>
    </item>
    <item>
      <title>너비 우선 탐색 (Breadth-First Search)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/searching/breadth-first-search/</link>
      <pubDate>Tue, 15 Oct 2024 05:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/searching/breadth-first-search/</guid>
      <description>BFS는 그래프나 트리 구조에서 가까운 노드부터 탐색하는 알고리즘</description>
    </item>
    <item>
      <title>이진 검색 (Binary Search)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/searching/binary-search/</link>
      <pubDate>Tue, 15 Oct 2024 05:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/searching/binary-search/</guid>
      <description>리스트의 중간 값을 선택하고, 찾고자 하는 값과 비교하여 탐색 범위를 반으로 줄여가며 검색을 수행한다</description>
    </item>
    <item>
      <title>해시 검색 (Hash Search)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/searching/hash-search/</link>
      <pubDate>Tue, 15 Oct 2024 05:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/searching/hash-search/</guid>
      <description>해시 검색은 키(key)를 해시 함수(hash function)에 통과시켜 얻은 해시 값(hash value)을 인덱스로 사용하여 데이터에 직접 접근하는 방식.</description>
    </item>
    <item>
      <title>선형 검색(Linear Search)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/searching/linear-search/</link>
      <pubDate>Tue, 15 Oct 2024 05:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/searching/linear-search/</guid>
      <description>순차 검색은 데이터 집합을 처음부터 끝까지 차례대로 하나씩 검색하는 방법으로 선형 검색(Linear Search)으로도 불리며, 리스트에서 순차적으로 탐색하면서 원하는 값을 찾아내는 알고리즘.</description>
    </item>
    <item>
      <title>Sorting Algorithms 비교</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/sorting/sorting-algorithms-%EB%B9%84%EA%B5%90/</link>
      <pubDate>Tue, 15 Oct 2024 04:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/sorting/sorting-algorithms-%EB%B9%84%EA%B5%90/</guid>
      <description>정렬(Sorting) 알고리즘은 데이터를 특정 순서(오름차순/내림차순)로 정렬하는 알고리즘이다.</description>
    </item>
    <item>
      <title>환원 가능성 (Reducibility)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/reducibility/</link>
      <pubDate>Sun, 13 Oct 2024 12:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/reducibility/</guid>
      <description>환원 가능성 (Reducibility)이란 한 문제를 다른 문제로 변환하는 과정을 말한다.</description>
    </item>
    <item>
      <title>메모이제이션 (Memoization)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/dynamic-programming/memoization/</link>
      <pubDate>Sun, 13 Oct 2024 11:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/dynamic-programming/memoization/</guid>
      <description>메모이제이션(Memoization)은 컴퓨터 프로그래밍에서 사용되는 최적화 기법으로, 함수의 호출 결과를 저장해두고 재사용함으로써 프로그램의 실행 속도를 향상시키는 방법이다.</description>
    </item>
    <item>
      <title>테이블레이션(Tabulation)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/dynamic-programming/tabulation/</link>
      <pubDate>Sun, 13 Oct 2024 11:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/dynamic-programming/tabulation/</guid>
      <description>Tabulation은 프로그래밍에서 동적 프로그래밍(Dynamic Programming)의 한 기법으로, 복잡한 문제를 해결하기 위해 사용되는 방법이다.</description>
    </item>
    <item>
      <title>튜링 기계 (Turing Machine)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/turing-machine/</link>
      <pubDate>Sun, 13 Oct 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/complexity-classes/turing-machine/</guid>
      <description>튜링 기계는 1936년 앨런 튜링이 제안한 추상적인 계산 모델로, 알고리즘의 개념을 수학적으로 정형화한 것으로, 현대 컴퓨터의 이론적 기초가 되었다.</description>
    </item>
    <item>
      <title>비결정성 (Non-determinism)</title>
      <link>https://buenhyden.github.io/posts/computer-science/fundamentals/non-determinism/</link>
      <pubDate>Sun, 13 Oct 2024 09:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/fundamentals/non-determinism/</guid>
      <description>알고리즘이나 시스템에서 동일한 입력에 대해 매번 다른 과정을 거쳐 다른 결과를 도출할 수 있는 특성</description>
    </item>
    <item>
      <title>Branch and Bound vs. Dynamic Programming</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/branch-and-bound/branch-and-bound-vs-dynamic-programming/</link>
      <pubDate>Sun, 13 Oct 2024 02:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/branch-and-bound/branch-and-bound-vs-dynamic-programming/</guid>
      <description>&lt;h2 id=&#34;branch-and-bound-vs-dynamic-programming&#34;&gt;Branch and Bound vs. Dynamic Programming&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Octree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/octree/</link>
      <pubDate>Fri, 11 Oct 2024 12:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/octree/</guid>
      <description>Octree는 3차원 공간을 재귀적으로 분할하여 표현하는 트리 기반의 데이터 구조로, 3차원 공간을 8개의 동일한 크기의 정육면체(옥탄트)로 재귀적으로 분할하는 트리 구조이다.</description>
    </item>
    <item>
      <title>Fenwick Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/advanced/fenwick-tree/</link>
      <pubDate>Fri, 11 Oct 2024 12:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/advanced/fenwick-tree/</guid>
      <description>Fenwick Tree는 구간 합을 효율적으로 계산하고 업데이트하기 위해 설계된 특수한 트리 구조로, 데이터베이스, 알고리즘 문제 해결, 그리고 다양한 응용 프로그램에서 사용된다.</description>
    </item>
    <item>
      <title>BK-tree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/bk-tree/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/bk-tree/</guid>
      <description>BK-Tree(Burkhard-Keller Tree)는 메트릭 공간(metric space)에서 효율적인 근사 검색을 위해 설계된 트리 기반 데이터 구조이다.  주로 레벤슈타인 거리(Levenshtein Distance)를 활용한 문자열 유사성 검색, 맞춤법 검사, DNA 시퀀스 분석에 활용된다.</description>
    </item>
    <item>
      <title>BSP Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/bsp-tree/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/bsp-tree/</guid>
      <description>BSP Tree는 공간을 재귀적으로 분할하여 표현하는 트리 구조의 데이터 구조로, 유클리드 공간을 초평면(hyperplane)을 기준으로 재귀적으로 분할하여 볼록 집합으로 나누는 기법을 트리 구조로 표현한 것</description>
    </item>
    <item>
      <title>K-d Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/k-d-tree/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/k-d-tree/</guid>
      <description>K-d Tree는 k차원 공간에서 점들을 효율적으로 저장하고 검색하기 위한 이진 트리 기반의 공간 분할 데이터 구조로, K-d Tree는 k차원 공간을 재귀적으로 분할하여 표현하는 이진 트리이다.</description>
    </item>
    <item>
      <title>Merkle Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/advanced/merkle-tree/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/advanced/merkle-tree/</guid>
      <description>머클 트리(Merkle Tree)는 암호화된 해시 값을 기반으로 데이터 무결성을 효율적으로 검증하는 트리 구조이다.  블록체인, 분산 시스템, 파일 전송 프로토콜 등에서 널리 활용되며, 데이터 변조 탐지와 검증 효율성이 핵심 강점이다.</description>
    </item>
    <item>
      <title>Quad Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/quad-tree/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/quad-tree/</guid>
      <description>Quad Tree는 2차원 공간을 재귀적으로 4개의 영역으로 분할하여 표현하는 트리 기반의 데이터 구조로, 각 노드가 정확히 4개의 자식 노드를 갖는 트리 구조이다.</description>
    </item>
    <item>
      <title>R-tree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/b-tree/r-tree/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/b-tree/r-tree/</guid>
      <description>R-Tree는 다차원 공간 데이터를 효율적으로 저장하고 검색하기 위해 설계된 트리 기반의 데이터 구조로, 공간 인덱스 알고리즘이다.</description>
    </item>
    <item>
      <title>Rope</title>
      <link>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/data-structures/rope/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/data-structures/rope/</guid>
      <description>Rope는 대규모 문자열을 효율적으로 저장하고 조작하기 위해 설계된 트리 기반의 데이터 구조</description>
    </item>
    <item>
      <title>Suffix Tree</title>
      <link>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/data-structures/suffix-tree/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/data-structures/suffix-tree/</guid>
      <description>Suffix Tree는 문자열의 모든 접미사를 효율적으로 저장하고 검색하는 특수한 트리 구조로, 문자열 처리와 패턴 매칭을 위해 사용되는 고급 데이터 구조이다.</description>
    </item>
    <item>
      <title>트라이 (Trie)</title>
      <link>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/data-structures/trie/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/data-structures/trie/</guid>
      <description>문자열을 효율적으로 저장하고 검색할 수 있는 트리 기반의 자료구조</description>
    </item>
    <item>
      <title>디스조인트 셋 (Disjoint-Set)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/advanced/disjoint-set/</link>
      <pubDate>Fri, 11 Oct 2024 07:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/advanced/disjoint-set/</guid>
      <description>디스조인트 셋은 서로 겹치지 않는(disjoint) 부분 집합들로 나누어진 요소들의 집합을 표현하고 조작하는 데이터 구조이다.</description>
    </item>
    <item>
      <title>Hash Map</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/hash-tables/types/hash-map/</link>
      <pubDate>Wed, 09 Oct 2024 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/hash-tables/types/hash-map/</guid>
      <description>HashMap은 해시 함수를 사용하여 키를 배열의 인덱스로 변환하고, 해당 인덱스에 값을 저장하는 데이터 구조이다.</description>
    </item>
    <item>
      <title>Lock-free Stack</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/concurrent-data-structures/lock-free-stack/</link>
      <pubDate>Wed, 09 Oct 2024 13:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/concurrent-data-structures/lock-free-stack/</guid>
      <description>Lock-free Stack은 락(lock)을 사용하지 않고 동시성을 제공하는 LIFO(Last-In-First-Out) 자료구조.</description>
    </item>
    <item>
      <title>Concurrent Hash Map</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/concurrent-data-structures/concurrent-hash-map/</link>
      <pubDate>Wed, 09 Oct 2024 13:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/concurrent-data-structures/concurrent-hash-map/</guid>
      <description>여러 스레드가 동시에 데이터를 안전하게 접근하고 수정할 수 있도록 설계된 스레드 안전(thread-safe)한 해시 맵 구현체</description>
    </item>
    <item>
      <title>Cuckoo Hash Table</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/hash-tables/types/cuckoo-hash-table/</link>
      <pubDate>Wed, 09 Oct 2024 12:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/hash-tables/types/cuckoo-hash-table/</guid>
      <description>Cuckoo Hash Table은 해시 충돌 문제를 해결하기 위해 개발된 해시 테이블의 한 종류로, 두 개 이상의 해시 함수를 사용하여 각 키에 대해 여러 개의 가능한 위치를 제공한다.</description>
    </item>
    <item>
      <title>Bloom filter</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/hash-tables/types/bloom-filter/</link>
      <pubDate>Wed, 09 Oct 2024 12:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/hash-tables/types/bloom-filter/</guid>
      <description>블룸 필터(Bloom Filter)는 **공간 효율적인 확률적 데이터 구조**로, 원소가 집합에 속하는지 여부를 빠르게 확인하는 데 사용된다.</description>
    </item>
    <item>
      <title>Singly Linked List</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/linked-list/types/singly-linked-list/</link>
      <pubDate>Tue, 08 Oct 2024 13:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/linked-list/types/singly-linked-list/</guid>
      <description>&lt;h2 id=&#34;singly-linked-list&#34;&gt;Singly Linked List&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Concurrent Skip List</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/concurrent-data-structures/concurrent-skip-list/</link>
      <pubDate>Tue, 08 Oct 2024 13:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/concurrent-data-structures/concurrent-skip-list/</guid>
      <description>Concurrent Skip List는 Skip List 자료구조를 기반으로 하여 멀티스레드 환경에서 동시에 삽입, 삭제, 검색 작업을 수행할 수 있도록 구현된 동시성 자료구조이다.</description>
    </item>
    <item>
      <title>Read-Copy-Update List</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/concurrent-data-structures/read-copy-update-list/</link>
      <pubDate>Tue, 08 Oct 2024 13:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/concurrent-data-structures/read-copy-update-list/</guid>
      <description>RCU List는 Read-Copy-Update 메커니즘을 사용하여 구현된 동시성 연결 리스트로 읽기 작업에 대해 락을 사용하지 않으면서도 동시에 업데이트를 수행할 수 있게 해준다.</description>
    </item>
    <item>
      <title>Lock-free Queue</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/concurrent-data-structures/lock-free-queue/</link>
      <pubDate>Tue, 08 Oct 2024 13:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/concurrent-data-structures/lock-free-queue/</guid>
      <description>Lock-free Queue는 락(lock)을 사용하지 않고 동시성을 제공하는 FIFO(First-In-First-Out) 자료구조이다.</description>
    </item>
    <item>
      <title>Suffix Array</title>
      <link>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/data-structures/suffix-array/</link>
      <pubDate>Tue, 08 Oct 2024 13:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/string-search-and-manipulations/data-structures/suffix-array/</guid>
      <description>Suffix Array는 문자열의 모든 접미사를 효율적으로 저장하고 관리하는 특수한 배열 구조로, 문자열 처리와 패턴 매칭을 위해 사용되는 고급 데이터 구조이다.</description>
    </item>
    <item>
      <title>Circular Linked List</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/linked-list/types/circular-linked-list/</link>
      <pubDate>Tue, 08 Oct 2024 12:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/linked-list/types/circular-linked-list/</guid>
      <description>Circular Linked List(원형 연결 리스트)는 마지막 노드가 첫 번째 노드를 가리키는 연결 리스트의 변형이다.</description>
    </item>
    <item>
      <title>Circular Queue</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/queue/types/circular-queue/</link>
      <pubDate>Tue, 08 Oct 2024 12:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/queue/types/circular-queue/</guid>
      <description>Circular Queue는 마지막 요소가 첫 번째 요소와 연결되어 원형 구조를 형성하는 큐 데이터 구조이다.</description>
    </item>
    <item>
      <title>Doubly Linked List</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/linked-list/types/doubly-linked-list/</link>
      <pubDate>Tue, 08 Oct 2024 12:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/linked-list/types/doubly-linked-list/</guid>
      <description>Doubly Linked List는 노드들이 양방향으로 연결된 선형 데이터 구조로, 각 노드가 데이터와 이전 노드, 다음 노드를 가리키는 포인터를 포함하고 있다.</description>
    </item>
    <item>
      <title>Skip List</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/skip-list/</link>
      <pubDate>Tue, 08 Oct 2024 12:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/skip-list/</guid>
      <description>Skip List는 정렬된 연결 리스트를 기반으로 하여 빠른 검색, 삽입, 삭제 연산을 지원하는 확률적 데이터 구조이다</description>
    </item>
    <item>
      <title>Deque</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/queue/types/deque/</link>
      <pubDate>Tue, 08 Oct 2024 12:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/queue/types/deque/</guid>
      <description>Deque는 양쪽 끝에서 삽입과 삭제가 가능한 선형 데이터 구조로, 큐와 스택의 특성을 모두 가지고 있다.</description>
    </item>
    <item>
      <title>Linked List vs. Array</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/linked-list/array-vs-linked-list/</link>
      <pubDate>Mon, 07 Oct 2024 16:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/linked-list/array-vs-linked-list/</guid>
      <description>배열은 인덱스를 통한 빠른 접근과 간단한 구현이 장점이지만, 크기가 고정되어 있고 중간 삽입/삭제가 비효율적이다.  반면 연결 리스트는 동적 크기 조정과 효율적인 삽입/삭제가 장점이지만, 임의 접근이 불가능하고 추가 메모리를 사용한다.</description>
    </item>
    <item>
      <title>해시 (Hash)</title>
      <link>https://buenhyden.github.io/posts/computer-science/security/hashing/hash/</link>
      <pubDate>Mon, 07 Oct 2024 01:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/security/hashing/hash/</guid>
      <description>임의의 크기를 가진 데이터를 고정된 크기의 데이터로 변환하는 과정</description>
    </item>
    <item>
      <title>동기(Synchronous)</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/synchronous-vs-asynchronous-apis/synchronous/</link>
      <pubDate>Sun, 06 Oct 2024 00:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/synchronous-vs-asynchronous-apis/synchronous/</guid>
      <description>프로그래밍에서 작업을 처리하는 두 가지 주요 방식</description>
    </item>
    <item>
      <title>비동기(Asynchronous)</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/synchronous-vs-asynchronous-apis/asynchronous/</link>
      <pubDate>Sun, 06 Oct 2024 00:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-integration-patterns/synchronous-vs-asynchronous-apis/asynchronous/</guid>
      <description>프로그래밍에서 작업을 처리하는 두 가지 주요 방식</description>
    </item>
    <item>
      <title>메모리 보호와 안전 (Memory Protection and Safety)</title>
      <link>https://buenhyden.github.io/posts/computer-science/memory-protection-and-safety/</link>
      <pubDate>Sat, 05 Oct 2024 08:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/memory-protection-and-safety/</guid>
      <description>메모리 보호는 컴퓨터 시스템에서 프로세스가 허가되지 않은 메모리 영역에 접근하는 것을 방지하는 메커니즘이다.</description>
    </item>
    <item>
      <title>코루틴(Coroutine)</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/coroutine/</link>
      <pubDate>Sat, 05 Oct 2024 06:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/coroutine/</guid>
      <description>코루틴은 &amp;#34;협력적인 루틴&amp;#34;이라는 의미로, 여러 작업이 협력하여 실행되는 방식을 말한다. 일반 함수와 달리, 코루틴은 실행 중간에 일시 중단되었다가 나중에 다시 재개될 수 있다.</description>
    </item>
    <item>
      <title>Thrashing</title>
      <link>https://buenhyden.github.io/posts/computer-science/thrashing/</link>
      <pubDate>Sat, 05 Oct 2024 00:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/thrashing/</guid>
      <description>운영체제에서 발생하는 성능 저하 현상으로, 프로세스의 실제 작업 시간보다 페이지 교체(페이징)에 더 많은 시간을 소비하는 현상</description>
    </item>
    <item>
      <title>교착상태 (Deadlock)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/deadlock/</link>
      <pubDate>Thu, 03 Oct 2024 23:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/deadlock/</guid>
      <description>둘 이상의 프로세스가 서로가 가진 자원을 기다리며 더 이상 진행할 수 없는 상태</description>
    </item>
    <item>
      <title>Race Condition</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/race-condition/</link>
      <pubDate>Thu, 03 Oct 2024 23:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/race-condition/</guid>
      <description>여러 프로세스나 스레드가 공유 자원에 동시에 접근할 때, 접근의 타이밍이나 순서에 따라 결과가 달라질 수 있는 상황</description>
    </item>
    <item>
      <title>Mutex</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/mutex/</link>
      <pubDate>Thu, 03 Oct 2024 11:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/mutex/</guid>
      <description>Mutex(Mutual Exclusion)는 공유 자원에 대한 접근을 동기화하는 객체.</description>
    </item>
    <item>
      <title>Monitor</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/monitor/</link>
      <pubDate>Thu, 03 Oct 2024 10:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/monitor/</guid>
      <description>모니터는 공유 데이터와 해당 데이터를 조작하는 연산을 하나의 모듈로 캡슐화하여, 다중 스레드 환경에서의 경쟁 조건(Race Condition)을 방지한다.</description>
    </item>
    <item>
      <title>Semaphore</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/semaphore/</link>
      <pubDate>Thu, 03 Oct 2024 10:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/semaphore/</guid>
      <description>멀티스레딩 환경에서 공유 자원에 대한 접근을 제어하는 동기화 도구</description>
    </item>
    <item>
      <title>조건 변수 (Condition Variable)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/condition-variable/</link>
      <pubDate>Thu, 03 Oct 2024 10:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/condition-variable/</guid>
      <description>조건 변수(Condition Variables)는 프로세스 동기화에서 중요한 역할을 하는 동기화 기본 요소로, 스레드가 특정 조건이 충족될 때까지 대기하도록 하는 메커니즘을 제공한다.</description>
    </item>
    <item>
      <title>원자적 연산 (Atomic Operation)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/atomic-operation/</link>
      <pubDate>Thu, 03 Oct 2024 10:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/atomic-operation/</guid>
      <description>원자적 연산이란, 더 이상 쪼개질 수 없는 최소 단위의 연산을 의미하는데 중단되거나 간섭받지 않고 완전히 실행되는 연산을 말한다.</description>
    </item>
    <item>
      <title>데커 알고리즘 (Dekker&#39;s Algorithm)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/dekkers-algorithm/</link>
      <pubDate>Thu, 03 Oct 2024 10:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/dekkers-algorithm/</guid>
      <description>데커 알고리즘(Dekker&amp;#39;s Algorithm)은 두 프로세스 간 상호 배제(Mutual Exclusion)를 보장하기 위해 1965년 네덜란드의 수학자 Theodorus Dekker가 개발한 최초의 소프트웨어 상호 배제(mutual exclusion) 알고리즘이다.</description>
    </item>
    <item>
      <title>램포트의 빵집 알고리즘 (Lamport&#39;s Bakery Algorithm)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/lamports-bakery-algorithm/</link>
      <pubDate>Thu, 03 Oct 2024 10:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/lamports-bakery-algorithm/</guid>
      <description>N개 프로세스의 상호 배제(Mutual Exclusion) 문제를 해결하기 위한 소프트웨어 기반 알고리즘이다</description>
    </item>
    <item>
      <title>피터슨 알고리즘 (Peterson&#39;s Algorithm)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/petersons-algorithm/</link>
      <pubDate>Thu, 03 Oct 2024 10:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/petersons-algorithm/</guid>
      <description>피터슨 알고리즘(Peterson&amp;#39;s Algorithm)은 두 프로세스의 상호 배제(Mutual Exclusion)를 보장하기 위한 소프트웨어 기반 동기화 알고리즘이다.</description>
    </item>
    <item>
      <title>라이브락 (Livelock)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/livelock/</link>
      <pubDate>Thu, 03 Oct 2024 09:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/livelock/</guid>
      <description>멀티스레딩 환경에서 발생할 수 있는 문제 상황으로, 프로세스나 스레드가 계속 실행 중이지만 실제로는 유용한 작업을 수행하지 못하는 상태</description>
    </item>
    <item>
      <title>Starvation</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/starvation/</link>
      <pubDate>Thu, 03 Oct 2024 07:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/starvation/</guid>
      <description>운영 체제 및 동시성 프로그래밍에서 중요한 문제로, 특정 프로세스가 필요한 자원을 지속적으로 얻지 못해 실행되지 못하는 상황</description>
    </item>
    <item>
      <title>상호 배제 (Mutual Exclusion)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/mutual-exclusion/</link>
      <pubDate>Thu, 03 Oct 2024 07:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/mutual-exclusion/</guid>
      <description>여러 프로세스나 스레드가 공유 자원에 동시에 접근하는 것을 방지하는 동기화 메커니즘</description>
    </item>
    <item>
      <title>소켓(Socket)</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/processes/process-mgmt/ipc/socket/</link>
      <pubDate>Wed, 02 Oct 2024 16:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/processes/process-mgmt/ipc/socket/</guid>
      <description>네트워크 상에서 두 프로그램이 데이터를 주고받을 수 있도록 하는 양방향 통신의 종착점이다.</description>
    </item>
    <item>
      <title>Message Queue</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/processes/process-mgmt/ipc/message-queue/</link>
      <pubDate>Wed, 02 Oct 2024 12:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/processes/process-mgmt/ipc/message-queue/</guid>
      <description>프로세스 간 통신(IPC)의 메시지 큐(Message Queue)는 프로세스 간에 데이터를 교환하는 메커니즘이다.</description>
    </item>
    <item>
      <title>Shared Memory</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/processes/process-mgmt/ipc/shared-memory/</link>
      <pubDate>Wed, 02 Oct 2024 12:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/processes/process-mgmt/ipc/shared-memory/</guid>
      <description>공유 메모리(Shared Memory)는 운영체제의 프로세스 간 통신(IPC) 기법 중 하나로, 여러 프로세스가 동시에 접근할 수 있는 메모리 영역이며, 커널에 의해 생성되고 관리되는 공통 메모리 공간이다.</description>
    </item>
    <item>
      <title>Pipe</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/processes/process-mgmt/ipc/pipe/</link>
      <pubDate>Wed, 02 Oct 2024 12:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/processes/process-mgmt/ipc/pipe/</guid>
      <description>파이프(Pipe)는 프로세스 간 통신(IPC)의 한 방법으로, 단방향 데이터 흐름을 제공하는 가장 오래된 IPC(프로세스 간 통신) 메커니즘 중 하나이다. 파이프는 한쪽 끝에서 데이터를 쓰고 다른 쪽 끝에서 데이터를 읽을 수 있게 해준다.</description>
    </item>
    <item>
      <title>동기화 (Synchronization)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/synchronization/</link>
      <pubDate>Wed, 02 Oct 2024 07:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/synchronization-and-concurrency-control/synchronization/</guid>
      <description>여러 프로세스나 스레드가 공유 자원에 접근할 때 데이터의 일관성과 무결성을 보장하기 위한 메커니즘</description>
    </item>
    <item>
      <title>프로세스 제어 블록(Process Control Block, PCB)</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/processes/process-mgmt/process-control-block/</link>
      <pubDate>Wed, 02 Oct 2024 06:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/processes/process-mgmt/process-control-block/</guid>
      <description>프로세스 제어 블록(Process Control Block, PCB)은 운영 체제에서 프로세스를 관리하기 위해 사용하는 핵심적인 데이터 구조이다. PCB는 각 프로세스에 대한 중요한 정보를 저장하고 관리하며, 운영 체제가 프로세스를 효율적으로 제어하고 실행할 수 있게 한다.</description>
    </item>
    <item>
      <title>Context Switching</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/processes/process-mgmt/context-switching/</link>
      <pubDate>Wed, 02 Oct 2024 01:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/processes/process-mgmt/context-switching/</guid>
      <description>Context Switching은 운영 체제에서 매우 중요한 개념으로, 여러 프로세스나 스레드가 단일 CPU 자원을 공유하여 효율적으로 실행될 수 있게 하는 메커니즘으로, CPU가 현재 실행 중인 프로세스나 스레드의 상태를 저장하고, 다른 프로세스나 스레드의 상태를 불러와 실행을 재개하는 과정을 말한다.  이를 통해 여러 작업이 동시에 실행되는 것처럼 보이게 된다.</description>
    </item>
    <item>
      <title>가상 메모리 (Virtual Memory)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/components/memory-mgmt/memory-mgmt-techniques/virtual-memory/</link>
      <pubDate>Tue, 01 Oct 2024 13:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/components/memory-mgmt/memory-mgmt-techniques/virtual-memory/</guid>
      <description>가상 메모리(Virtual Memory)는 운영체제의 메모리 관리 기법 중 하나로, 물리적 메모리의 한계를 극복하고 더 큰 메모리 공간을 제공하는 기술이다.</description>
    </item>
    <item>
      <title>System Call Interface</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/components/kernel/system-call-interface/</link>
      <pubDate>Tue, 01 Oct 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/operating-system/components/kernel/system-call-interface/</guid>
      <description>사용자 공간의 프로그램과 운영 체제 커널 사이의 중간 계층으로, 프로그램이 운영 체제의 서비스를 요청할 수 있게 해주는 인터페이스</description>
    </item>
    <item>
      <title>캐시 (Cache)</title>
      <link>https://buenhyden.github.io/posts/system-design/caching/cache/cache/</link>
      <pubDate>Mon, 30 Sep 2024 13:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/caching/cache/cache/</guid>
      <description>캐시(Cache)는 컴퓨터 과학에서 데이터나 값을 미리 복사해 놓는 임시 저장소를 의미한다.</description>
    </item>
    <item>
      <title>Byte Addressable Memory vs Word Addressable Memory</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/memory-architecture/byte-addressable-memory-vs-word-addressable-memory/</link>
      <pubDate>Mon, 30 Sep 2024 11:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/memory-architecture/byte-addressable-memory-vs-word-addressable-memory/</guid>
      <description>컴퓨터 메모리의 주소 지정 방식을 설명하는 개념</description>
    </item>
    <item>
      <title>Cache Memory</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/memory-architecture/cache-memory/</link>
      <pubDate>Mon, 30 Sep 2024 11:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/memory-architecture/cache-memory/</guid>
      <description>캐시 메모리(Cache Memory)는 컴퓨터 아키텍처에서 중요한 역할을 하는 CPU와 주 메모리(RAM) 사이에 위치한 소규모의 고속 메모리이다.</description>
    </item>
    <item>
      <title>Allocation Policy</title>
      <link>https://buenhyden.github.io/posts/system-design/caching/cache-policy/allocation-policy/</link>
      <pubDate>Mon, 30 Sep 2024 10:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/caching/cache-policy/allocation-policy/</guid>
      <description>Cache Allocation Policy(캐시 할당 정책)는 캐시 메모리 관리에서 중요한 역할을 하는 정책으로, 데이터를 캐시에 어떻게 할당할지 결정하는 방식을 의미한다.</description>
    </item>
    <item>
      <title>Prefetch Policy</title>
      <link>https://buenhyden.github.io/posts/system-design/caching/cache-policy/prefetch-policy/</link>
      <pubDate>Mon, 30 Sep 2024 10:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/caching/cache-policy/prefetch-policy/</guid>
      <description>**Prefetch Policy**는 데이터 요청을 미리 예측하여 필요한 데이터를 캐시에 미리 로드하는 전략</description>
    </item>
    <item>
      <title>Replacement Policy</title>
      <link>https://buenhyden.github.io/posts/system-design/caching/cache-policy/replacement-policy/</link>
      <pubDate>Mon, 30 Sep 2024 10:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/caching/cache-policy/replacement-policy/</guid>
      <description>Cache Replacement Policy(캐시 교체 정책)는 캐시 메모리에서 새로운 데이터를 저장하기 위해 기존의 데이터를 교체할 때 어떤 데이터를 제거할지를 결정하는 규칙이다.</description>
    </item>
    <item>
      <title>Write Policy</title>
      <link>https://buenhyden.github.io/posts/system-design/caching/cache-policy/write-policy/</link>
      <pubDate>Mon, 30 Sep 2024 10:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/caching/cache-policy/write-policy/</guid>
      <description>Cache Policy의 Write Policy(쓰기 정책)는 캐시 메모리에서 데이터를 쓰는 방식과, 캐시에 저장된 데이터가 메인 메모리와 어떻게 동기화될지를 결정하는 규칙을 의미한다.</description>
    </item>
    <item>
      <title>Placement Policy</title>
      <link>https://buenhyden.github.io/posts/system-design/caching/cache-policy/placement-policy/</link>
      <pubDate>Mon, 30 Sep 2024 10:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/caching/cache-policy/placement-policy/</guid>
      <description>Cache Placement Policy는 캐시 메모리에서 특정 메모리 블록이 캐시에 저장될 위치를 결정하는 규칙을 의미한다.</description>
    </item>
    <item>
      <title>메모리 접근 방법 (Memory Access Methods)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/memory-architecture/memory-access-methods/</link>
      <pubDate>Mon, 30 Sep 2024 08:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/memory-architecture/memory-access-methods/</guid>
      <description>메모리 접근 방식 (Memory Access Methods)은 컴퓨터 시스템에서 메모리에 접근하는 방식을 말한다.</description>
    </item>
    <item>
      <title>메모리 주소 지정 방식 (Memory Address Modes)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/memory-architecture/memory-address-modes/</link>
      <pubDate>Mon, 30 Sep 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/memory-architecture/memory-address-modes/</guid>
      <description>메모리 주소 지정 방식(Memory Address Modes)은 CPU가 메모리의 특정 위치에 어떻게 접근하는지를 나타내는 방법이다.</description>
    </item>
    <item>
      <title>메모리의 계층 구조 (Memory Hierarchy)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/memory-architecture/memory-hierarchy/</link>
      <pubDate>Mon, 30 Sep 2024 03:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/memory-architecture/memory-hierarchy/</guid>
      <description>컴퓨터 시스템에서 데이터 접근의 효율성을 극대화하고 전체 시스템 성능을 향상시키기 위해 설계된 구조</description>
    </item>
    <item>
      <title>Cache Coherence</title>
      <link>https://buenhyden.github.io/posts/system-design/caching/cache-coherence/cache-coherence/</link>
      <pubDate>Mon, 30 Sep 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/caching/cache-coherence/cache-coherence/</guid>
      <description>Cache Coherence(캐시 일관성)는 컴퓨터 시스템에서 여러 프로세서가 각각의 로컬 캐시를 사용하면서 동일한 메모리 주소를 참조할 때, 데이터의 일관성을 유지하기 위한 메커니즘을 의미한다.</description>
    </item>
    <item>
      <title>Cache Invalidation</title>
      <link>https://buenhyden.github.io/posts/system-design/caching/cache-invalidation/cache-invalidation/</link>
      <pubDate>Mon, 30 Sep 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/caching/cache-invalidation/cache-invalidation/</guid>
      <description>Cache Invalidation(캐시 무효화)는 캐시에 저장된 데이터가 더 이상 최신 상태가 아니거나 유효하지 않을 때, 이를 무효화하여 캐시가 최신 데이터를 제공하도록 보장하는 과정이다.</description>
    </item>
    <item>
      <title>Cache Strategy</title>
      <link>https://buenhyden.github.io/posts/system-design/caching/cache-strategy/cache-strategy/</link>
      <pubDate>Mon, 30 Sep 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/caching/cache-strategy/cache-strategy/</guid>
      <description>Cache Strategy(캐시 전략)는 캐시를 효과적으로 활용하여 시스템 성능을 최적화하고 데이터 일관성을 유지하기 위한 방법론이다.</description>
    </item>
    <item>
      <title>Caching Techniques</title>
      <link>https://buenhyden.github.io/posts/system-design/caching/types/caching-techniques/</link>
      <pubDate>Mon, 30 Sep 2024 02:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/caching/types/caching-techniques/</guid>
      <description>캐싱 기술(Caching Techniques)은 데이터 접근 속도를 높이고 시스템 성능을 개선하기 위해 사용되는 다양한 방법들을 말한다.</description>
    </item>
    <item>
      <title>컴퓨터 구성 요소 (Components of Computer Architecture)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/components-of-computer-architecture/</link>
      <pubDate>Sun, 29 Sep 2024 16:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/components-of-computer-architecture/</guid>
      <description>이 구성 요소들의 상호작용을 통해 컴퓨터가 작동하게 된다.</description>
    </item>
    <item>
      <title>인터럽트 (Interrupt)</title>
      <link>https://buenhyden.github.io/posts/computer-science/processes-and-threads/interrupt/</link>
      <pubDate>Sun, 29 Sep 2024 06:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/processes-and-threads/interrupt/</guid>
      <description>프로세서에게 현재 실행 중인 코드를 중단하고 특정 이벤트를 처리하도록 요청하는 신호</description>
    </item>
    <item>
      <title>파이프라이닝 (Pipelining)</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/processor-architecture/pipelining/</link>
      <pubDate>Sun, 29 Sep 2024 02:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/processor-architecture/pipelining/</guid>
      <description>파이프라이닝은 여러 명령어의 실행 단계를 중첩시켜 전체적인 처리량을 향상시키는 기술로, 여러 단계를 동시에 처리함으로써 효율성을 높인다.</description>
    </item>
    <item>
      <title>System Bus</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/bus/system-bus/</link>
      <pubDate>Sun, 29 Sep 2024 02:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/bus/system-bus/</guid>
      <description>System Bus는 컴퓨터 아키텍처에서 주요 구성 요소들을 연결하는 중요한 통신 경로로, 컴퓨터의 혈관과 같은 역할을 한다.</description>
    </item>
    <item>
      <title>Harvard Architecture</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/harvard-architecture/</link>
      <pubDate>Sun, 29 Sep 2024 01:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/harvard-architecture/</guid>
      <description>하버드 아키텍처(Harvard Architecture)는 프로세서 설계에서 중요한 구조로, 명령어와 데이터를 위한 별도의 메모리 및 버스 시스템을 사용하는 컴퓨터 아키텍처이다.</description>
    </item>
    <item>
      <title>Von Neumann architecture</title>
      <link>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/von-neumann-architecture/</link>
      <pubDate>Sun, 29 Sep 2024 01:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/computer-system/computer-architecture/von-neumann-architecture/</guid>
      <description>Von Neumann architecture는 1945년 John von Neumann이 제안한 컴퓨터 아키텍처로, 현대 대부분의 컴퓨터 시스템의 기본이 되는 설계이다.</description>
    </item>
    <item>
      <title>Jenkins</title>
      <link>https://buenhyden.github.io/posts/devops/ci-and-cd/ci-and-cd-tools/jenkins/</link>
      <pubDate>Sat, 28 Sep 2024 15:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/ci-and-cd/ci-and-cd-tools/jenkins/</guid>
      <description>오픈 소스 자동화 서버로, 주로 지속적 통합(CI)과 지속적 배포(CD) 프로세스를 자동화하는 데 사용되는 도구</description>
    </item>
    <item>
      <title>Shadow Deployment</title>
      <link>https://buenhyden.github.io/posts/devops/ci-and-cd/deployment-strategies/shadow-deployment/</link>
      <pubDate>Sat, 28 Sep 2024 12:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/ci-and-cd/deployment-strategies/shadow-deployment/</guid>
      <description>Shadow Deployment는 새로운 버전의 애플리케이션을 프로덕션 환경에 배포하고 실제 트래픽을 복제하여 새 버전으로 전송하지만, 그 결과는 사용자에게 반환하지 않는 방식이다.</description>
    </item>
    <item>
      <title>Feature Flags</title>
      <link>https://buenhyden.github.io/posts/devops/ci-and-cd/deployment-strategies/feature-flags/</link>
      <pubDate>Sat, 28 Sep 2024 12:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/ci-and-cd/deployment-strategies/feature-flags/</guid>
      <description>Feature flags는 조건문을 사용하여 코드의 특정 부분을 동적으로 제어하는 소프트웨어 개발 기법</description>
    </item>
    <item>
      <title>Git Branch 전략</title>
      <link>https://buenhyden.github.io/posts/devops/version-control-systems/git/git-branch-%EC%A0%84%EB%9E%B5/</link>
      <pubDate>Sat, 28 Sep 2024 10:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/version-control-systems/git/git-branch-%EC%A0%84%EB%9E%B5/</guid>
      <description>Git 브랜치 전략 (Git Flow, Github Flow, Gitlab Flow)</description>
    </item>
    <item>
      <title>Monitoring and Observability</title>
      <link>https://buenhyden.github.io/posts/backend/scalability/monitoring-and-observability/</link>
      <pubDate>Sat, 28 Sep 2024 08:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/scalability/monitoring-and-observability/</guid>
      <description>Observability는 시스템의 내부 상태를 외부 출력을 통해 이해하고 추론할 수 있는 능력을 말하고, Monitoring은 시스템의 동작과 성능을 지속적으로 관찰하고 추적하는 활동을 말한다.</description>
    </item>
    <item>
      <title>Git 원격 저장소와 Branch</title>
      <link>https://buenhyden.github.io/posts/devops/version-control-systems/git/git-%EC%9B%90%EA%B2%A9-%EC%A0%80%EC%9E%A5%EC%86%8C%EC%99%80-branch/</link>
      <pubDate>Sat, 28 Sep 2024 07:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/version-control-systems/git/git-%EC%9B%90%EA%B2%A9-%EC%A0%80%EC%9E%A5%EC%86%8C%EC%99%80-branch/</guid>
      <description>소프트웨어 개발에서 널리 사용되는 분산 버전 관리 시스템으로, 코드의 변경 이력을 효율적으로 관리하고 협업을 지원한다.</description>
    </item>
    <item>
      <title>Git의 고급 기능</title>
      <link>https://buenhyden.github.io/posts/devops/version-control-systems/git/git%EC%9D%98-%EA%B3%A0%EA%B8%89-%EA%B8%B0%EB%8A%A5/</link>
      <pubDate>Sat, 28 Sep 2024 07:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/version-control-systems/git/git%EC%9D%98-%EA%B3%A0%EA%B8%89-%EA%B8%B0%EB%8A%A5/</guid>
      <description>소프트웨어 개발에서 널리 사용되는 분산 버전 관리 시스템으로, 코드의 변경 이력을 효율적으로 관리하고 협업을 지원한다.</description>
    </item>
    <item>
      <title>Github Actions</title>
      <link>https://buenhyden.github.io/posts/devops/ci-and-cd/ci-and-cd-tools/github-actions/</link>
      <pubDate>Sat, 28 Sep 2024 03:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/ci-and-cd/ci-and-cd-tools/github-actions/</guid>
      <description>GitHub에서 각각 제공하는 CI/CD(Continuous Integration and Continuous Deployment) 도구</description>
    </item>
    <item>
      <title>Gitlab CI</title>
      <link>https://buenhyden.github.io/posts/devops/ci-and-cd/ci-and-cd-tools/gitlab-ci/</link>
      <pubDate>Sat, 28 Sep 2024 03:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/ci-and-cd/ci-and-cd-tools/gitlab-ci/</guid>
      <description>Gitlab에서 각각 제공하는 CI/CD(Continuous Integration and Continuous Deployment) 도구</description>
    </item>
    <item>
      <title>A/B Testing</title>
      <link>https://buenhyden.github.io/posts/devops/ci-and-cd/deployment-strategies/a-b-testing/</link>
      <pubDate>Sat, 28 Sep 2024 02:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/ci-and-cd/deployment-strategies/a-b-testing/</guid>
      <description>A/B Testing은 소프트웨어 배포 전략 중 하나로, 두 가지 이상의 버전을 사용자에게 제공하여 어떤 버전이 더 효과적인지 비교하는 방법이다.</description>
    </item>
    <item>
      <title>Blue-Green Deployment</title>
      <link>https://buenhyden.github.io/posts/devops/ci-and-cd/deployment-strategies/blue-green-deployment/</link>
      <pubDate>Sat, 28 Sep 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/ci-and-cd/deployment-strategies/blue-green-deployment/</guid>
      <description>Blue-Green Deployment Pattern은 무중단 배포 전략 중 하나로, 애플리케이션의 새 버전을 안전하고 효율적으로 배포하는 방법이다.</description>
    </item>
    <item>
      <title>Canary Deployment</title>
      <link>https://buenhyden.github.io/posts/devops/ci-and-cd/deployment-strategies/canary-deployment/</link>
      <pubDate>Sat, 28 Sep 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/ci-and-cd/deployment-strategies/canary-deployment/</guid>
      <description>카나리 배포(Canary Deployment) 패턴은 새로운 버전의 애플리케이션을 점진적으로 배포하는 전략이다.</description>
    </item>
    <item>
      <title>Rolling Deployment</title>
      <link>https://buenhyden.github.io/posts/devops/ci-and-cd/deployment-strategies/rolling-deployment/</link>
      <pubDate>Sat, 28 Sep 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/ci-and-cd/deployment-strategies/rolling-deployment/</guid>
      <description>Rolling Deployment는 애플리케이션의 새 버전을 점진적으로 배포하는 무중단 배포 전략이다.</description>
    </item>
    <item>
      <title>멀티 테넌시(Multi-tenancy)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/multi-tenancy/</link>
      <pubDate>Fri, 27 Sep 2024 14:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/multi-tenancy/</guid>
      <description>하나의 소프트웨어 애플리케이션이나 시스템이 여러 고객(테넌트)에게 서비스를 제공하는 아키텍처이다.</description>
    </item>
    <item>
      <title>Rate Limiting Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/rate-limiting-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 11:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/rate-limiting-pattern/</guid>
      <description>Rate Limiting은 특정 시간 동안 클라이언트나 서비스가 보낼 수 있는 요청 수를 제한하는 메커니즘이다.</description>
    </item>
    <item>
      <title>Serverless Architecture</title>
      <link>https://buenhyden.github.io/posts/devops/serverless/serverless-architecture/</link>
      <pubDate>Fri, 27 Sep 2024 11:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/serverless/serverless-architecture/</guid>
      <description>Serverless Architecture는 개발자가 서버 관리 없이 애플리케이션 로직에 집중할 수 있도록 설계된 클라우드 컴퓨팅 모델로, 이벤트 기반의 자동 확장성과 사용한 만큼만 비용을 지불하는 구조가 핵심이다.</description>
    </item>
    <item>
      <title>Publisher-Subscriber Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/publisher-subscriber-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 11:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/publisher-subscriber-pattern/</guid>
      <description>이 패턴은 메시지를 보내는 발행자(Publisher)와 메시지를 받는 구독자(Subscriber) 사이의 느슨한 결합(Loose Coupling)을 제공하는 메시징 패턴으로, 발행자는 메시지를 특정 주제(Topic)나 채널로 발행하고, 해당 주제를 구독하는 모든 구독자들이 그 메시지를 받게 된다.</description>
    </item>
    <item>
      <title>Retry Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/retry-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 11:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/retry-pattern/</guid>
      <description>분산 시스템이나 마이크로서비스 아키텍처에서 일시적인 오류(Transient Failure)를 처리하기 위한 핵심 설계 패턴이다.</description>
    </item>
    <item>
      <title>Model-View-ViewModel Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/model-view-viewmodel-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 11:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/model-view-viewmodel-pattern/</guid>
      <description>MVVM(Model-View-ViewModel) 패턴은 소프트웨어 아키텍처 패턴 중 하나로, 사용자 인터페이스(UI)와 비즈니스 로직을 효과적으로 분리하여 코드의 유지보수성과 재사용성을 향상시키는 데 중점을 둔다.</description>
    </item>
    <item>
      <title>Monolithic Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/structural/monolithic/monolithic-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 11:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/structural/monolithic/monolithic-pattern/</guid>
      <description>애플리케이션의 모든 구성 요소가 단일 코드베이스와 단일 실행 단위로 통합된 형태</description>
    </item>
    <item>
      <title>Model–view–presenter Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/modelviewpresenter-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 09:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/modelviewpresenter-pattern/</guid>
      <description>Model-View-Presenter(MVP) 패턴은 사용자 인터페이스 개발을 위한 아키텍처 패턴으로, **관심사 분리** 원칙에 기반해 UI 로직과 비즈니스 로직을 분리한다.</description>
    </item>
    <item>
      <title>Microkernel Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/microkernel-architecture/</link>
      <pubDate>Fri, 27 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/microkernel-architecture/</guid>
      <description>시스템의 핵심 기능을 최소화하고 확장성과 유연성을 극대화하는 설계 방식</description>
    </item>
    <item>
      <title>Repository Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/repository-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/repository-pattern/</guid>
      <description>데이터 접근 로직을 추상화하고 캡슐화하여 비즈니스 로직과 데이터 저장소 간의 의존성을 줄이는 소프트웨어 아키텍처 패턴</description>
    </item>
    <item>
      <title>Space-Based Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/space-based-architecture/</link>
      <pubDate>Fri, 27 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/space-based-architecture/</guid>
      <description>분산 컴퓨팅 시스템을 위한 소프트웨어 아키텍처 패턴으로, 복잡성을 증가시키지 않으면서 애플리케이션과 시스템의 확장성을 높이는 것을 목표로 한다.</description>
    </item>
    <item>
      <title>Master-Slave Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/master-slave-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/master-slave-pattern/</guid>
      <description>하나의 마스터 컴포넌트와 여러 슬레이브 컴포넌트로 구성되어 있으며, 작업을 효율적으로 분배하고 관리하는 데 사용된다</description>
    </item>
    <item>
      <title>Model-View-Controller Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/model-view-controller-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/model-view-controller-pattern/</guid>
      <description>애플리케이션을 세 가지 주요 구성 요소로 분리하여 개발의 유연성과 유지보수성을 향상시킨다.</description>
    </item>
    <item>
      <title>Peer-to-Peer Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/distributed/peer-to-peer/peer-to-peer-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/distributed/peer-to-peer/peer-to-peer-pattern/</guid>
      <description>분산 네트워크 아키텍처의 한 형태로, 각 노드(피어)가 클라이언트와 서버의 역할을 동시에 수행하는 구조</description>
    </item>
    <item>
      <title>Pipe-Filter Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/pipe-filter-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/pipe-filter-pattern/</guid>
      <description>데이터 스트림을 처리하는 시스템에서 사용되는 소프트웨어 아키텍처 패턴</description>
    </item>
    <item>
      <title>Producer-Consumer Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/producer-consumer-pattern/</link>
      <pubDate>Fri, 27 Sep 2024 01:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/producer-consumer-pattern/</guid>
      <description>이 패턴은 데이터를 생성하는 프로듀서(Producer)와 데이터를 소비하는 컨슈머(Consumer) 사이의 작업을 분리하여 효율적인 데이터 처리를 가능하게 한다.</description>
    </item>
    <item>
      <title>Component-Based Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/structural/component-based/component-based-architecture/</link>
      <pubDate>Thu, 26 Sep 2024 11:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/structural/component-based/component-based-architecture/</guid>
      <description>애플리케이션을 독립적이고 재사용 가능한 단위인 &amp;#39;컴포넌트&amp;#39;로 구성하는 방식을 말한다.</description>
    </item>
    <item>
      <title>Event-Driven Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/messaging/event-driven/event-driven-architecture/</link>
      <pubDate>Thu, 26 Sep 2024 11:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/messaging/event-driven/event-driven-architecture/</guid>
      <description>Event-Driven Architecture (EDA)는 현대 소프트웨어 아키텍처 패턴 중 하나로, 시스템 내에서 발생하는 이벤트를 중심으로 동작하는 설계 방식이다.</description>
    </item>
    <item>
      <title>Event Sourcing Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-sourcing-pattern/</link>
      <pubDate>Thu, 26 Sep 2024 11:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-sourcing-pattern/</guid>
      <description>Event Sourcing Pattern은 데이터 처리와 저장에 대한 접근 방식을 정의하는 아키텍처 패턴으로, 시스템의 상태 변화를 일련의 이벤트로 기록하고 저장하는 방식을 채택한다.</description>
    </item>
    <item>
      <title>CQRS 패턴 (Command Query Responsibility Segregation)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/cqrs/</link>
      <pubDate>Thu, 26 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/cqrs/</guid>
      <description>애플리케이션의 명령(Command)과 쿼리(Query)의 책임을 분리하는 소프트웨어 아키텍처 패턴</description>
    </item>
    <item>
      <title>Domain-Driven Design</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/domain-driven-design/</link>
      <pubDate>Thu, 26 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/domain-driven-design/</guid>
      <description>복잡한 소프트웨어 시스템을 개발하기 위한 접근 방식으로, 비즈니스 도메인을 중심으로 소프트웨어를 설계하고 개발하는 방법론</description>
    </item>
    <item>
      <title>Hexagonal Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/hexagonal-architecture/</link>
      <pubDate>Thu, 26 Sep 2024 08:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/hexagonal-architecture/</guid>
      <description>애플리케이션의 핵심 비즈니스 로직을 외부 요소로부터 분리하여 유연하고 유지보수가 용이한 시스템을 구축하는 것을 목표로 한다</description>
    </item>
    <item>
      <title>Broker Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/broker-pattern/</link>
      <pubDate>Thu, 26 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/broker-pattern/</guid>
      <description>분산 시스템에서 컴포넌트들 간의 통신을 조정하고 중개하는 구조적 패턴</description>
    </item>
    <item>
      <title>Event-Bus Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-bus-pattern/</link>
      <pubDate>Thu, 26 Sep 2024 08:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-bus-pattern/</guid>
      <description>소프트웨어 시스템의 컴포넌트 간 통신을 단순화하고 유연성을 높이는 아키텍처 패턴</description>
    </item>
    <item>
      <title>Client-Server Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/distributed/client-server/client-server-pattern/</link>
      <pubDate>Thu, 26 Sep 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/distributed/client-server/client-server-pattern/</guid>
      <description>서비스를 제공하는 서버와 서비스를 요청하는 클라이언트로 구성되는 소프트웨어 아키텍처 패턴</description>
    </item>
    <item>
      <title>Layered Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/structural/layered/layered-pattern/</link>
      <pubDate>Thu, 26 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/structural/layered/layered-pattern/</guid>
      <description>애플리케이션의 구성 요소를 수평적 계층으로 조직화하여 각 계층이 특정 기능을 담당하도록 한다.</description>
    </item>
    <item>
      <title>Factory Method Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/creational-design-patterns/factory-method-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 18:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/creational-design-patterns/factory-method-pattern/</guid>
      <description>객체 생성을 위한 인터페이스를 정의하지만, 실제 어떤 클래스의 인스턴스를 생성할지는 서브클래스가 결정하도록 하는 디자인 패턴</description>
    </item>
    <item>
      <title>Singleton Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/creational-design-patterns/singleton-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 18:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/creational-design-patterns/singleton-pattern/</guid>
      <description>클래스의 인스턴스가 프로그램 전체에서 오직 하나만 생성되도록 보장하는 소프트웨어 디자인 패턴.</description>
    </item>
    <item>
      <title>Flyweight Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/structural-design-patterns/flyweight-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 08:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/structural-design-patterns/flyweight-pattern/</guid>
      <description>플라이웨이트 패턴은 재사용 가능한 객체 인스턴스를 공유하여 메모리 사용량을 최소화하는 구조 패턴이다.  간단히 말하면 캐시(Cache) 개념을 코드로 패턴화한 것으로, 자주 변화하는 속성(extrinsic)과 변하지 않는 속성(intrinsic)을 분리하고 변하지 않는 속성을 캐시하여 재사용함으로써 메모리 사용을 줄이는 방식이다.</description>
    </item>
    <item>
      <title>Composite Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/structural-design-patterns/composite-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 08:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/structural-design-patterns/composite-pattern/</guid>
      <description>Composite Pattern은 구조적 디자인 패턴 중 하나로, 객체들을 트리 구조로 구성하여 부분-전체 계층을 표현하는 패턴이다.</description>
    </item>
    <item>
      <title>Bridge Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/structural-design-patterns/bridge-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/structural-design-patterns/bridge-pattern/</guid>
      <description>복잡한 시스템에서 추상화(abstraction)와 구현(implementation)을 분리하여 독립적으로 변형과 확장이 가능하도록 하는 구조 패턴</description>
    </item>
    <item>
      <title>Decorator Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/structural-design-patterns/decorator-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/structural-design-patterns/decorator-pattern/</guid>
      <description>객체에 동적으로 새로운 책임을 추가할 수 있게 해주는 구조적 디자인 패턴</description>
    </item>
    <item>
      <title>Facade Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/structural-design-patterns/facade-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/structural-design-patterns/facade-pattern/</guid>
      <description>복잡한 서브시스템에 대한 간단한 인터페이스를 제공하는 구조적 디자인 패턴</description>
    </item>
    <item>
      <title>Proxy Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/structural-design-patterns/proxy-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/structural-design-patterns/proxy-pattern/</guid>
      <description>객체에 대한 접근을 제어하기 위한 대리인(또는 대변인) 역할을 하는 객체를 제공하는 구조적 디자인 패턴</description>
    </item>
    <item>
      <title>Adapter Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/structural-design-patterns/adapter-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/structural-design-patterns/adapter-pattern/</guid>
      <description>호환되지 않는 인터페이스를 가진 객체들이 협력할 수 있도록 하는 구조적 디자인 패턴</description>
    </item>
    <item>
      <title>Abstract Factory Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/creational-design-patterns/abstract-factory-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/creational-design-patterns/abstract-factory-pattern/</guid>
      <description>구체적인 클래스를 지정하지 않고도 관련된 객체들의 집합을 생성할 수 있게 해주는 생성 패턴</description>
    </item>
    <item>
      <title>Builder Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/creational-design-patterns/builder-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/creational-design-patterns/builder-pattern/</guid>
      <description>복잡한 객체의 생성 과정과 표현 방법을 분리하여, 동일한 생성 절차에서 서로 다른 표현 결과를 만들 수 있게 하는 생성 패턴</description>
    </item>
    <item>
      <title>Prototype Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/creational-design-patterns/prototype-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/creational-design-patterns/prototype-pattern/</guid>
      <description>기존 객체를 복제하여 새로운 객체를 생성하는 생성 패턴</description>
    </item>
    <item>
      <title>Interpreter Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/interpreter-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/interpreter-pattern/</guid>
      <description>Interpreter 패턴은 행동 디자인 패턴의 하나로, 특정 언어의 문법을 해석하고 실행하는 방법을 정의한다.</description>
    </item>
    <item>
      <title>Visitor Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/visitor-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/visitor-pattern/</guid>
      <description>Visitor Pattern은 객체 구조와 알고리즘을 분리하는 행위 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Chain of Responsibility</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/chain-of-responsibility/</link>
      <pubDate>Tue, 24 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/chain-of-responsibility/</guid>
      <description>Chain of Responsibility 패턴은 요청을 보내는 객체와 이를 처리하는 객체들 간의 결합도를 낮추기 위한 행위 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Mediator Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/mediator-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/mediator-pattern/</guid>
      <description>Mediator Pattern(중재자 패턴)은 소프트웨어 디자인 패턴 중 하나로, 객체 간의 상호작용을 캡슐화하여 서로 직접 통신하지 않고 중재자 객체를 통해서만 소통하도록 설계된 행동 패턴이다.</description>
    </item>
    <item>
      <title>Memento Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/memento-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/memento-pattern/</guid>
      <description>Mediator 패턴은 객체 지향 소프트웨어 디자인 패턴 중 하나로, 객체들 간의 복잡한 상호작용을 캡슐화하여 객체 간 결합도를 낮추는 행위 패턴이다.</description>
    </item>
    <item>
      <title>Command Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/command-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/command-pattern/</guid>
      <description>요청을 객체의 형태로 캡슐화하여 나중에 사용할 수 있도록 하는 행동 디자인 패턴</description>
    </item>
    <item>
      <title>State Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/state-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/state-pattern/</guid>
      <description>객체의 내부 상태가 변경될 때 객체의 행동이 변경되도록 하는 행동 디자인 패턴</description>
    </item>
    <item>
      <title>Strategy Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/strategy-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/strategy-pattern/</guid>
      <description>알고리즘의 집합을 정의하고, 각각을 캡슐화하여 교환 가능하게 만드는 행동 디자인 패턴</description>
    </item>
    <item>
      <title>Template Method Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/template-method-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/template-method-pattern/</guid>
      <description>알고리즘의 구조를 정의하고 일부 단계를 서브클래스에서 구현할 수 있도록 하는 행동 디자인 패턴</description>
    </item>
    <item>
      <title>Observer Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/observer-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 06:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/gof/behavioral-design-patterns/observer-pattern/</guid>
      <description>객체의 상태 변화를 관찰하는 관찰자들, 즉 옵저버들의 목록을 객체에 등록하여 상태 변화가 있을 때마다 메서드 등을 통해 객체가 직접 목록의 각 옵저버에게 통지하도록 하는 디자인 패턴</description>
    </item>
    <item>
      <title>프로그램 설계 방법론</title>
      <link>https://buenhyden.github.io/til/2024/09/24/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%84%A4%EA%B3%84-%EB%B0%A9%EB%B2%95%EB%A1%A0/</link>
      <pubDate>Tue, 24 Sep 2024 05:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/24/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%84%A4%EA%B3%84-%EB%B0%A9%EB%B2%95%EB%A1%A0/</guid>
      <description>소프트웨어 개발 과정에서 시스템을 구조화하고 모듈화하는 체계적인 접근 방식</description>
    </item>
    <item>
      <title>Access Modifiers</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/access-modifiers/</link>
      <pubDate>Mon, 23 Sep 2024 04:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/access-modifiers/</guid>
      <description>객체지향 프로그래밍(OOP)에서 접근 제어자(Access Modifiers)는 클래스, 메서드, 변수 등의 접근 범위를 제어하는 중요한 개념이다.</description>
    </item>
    <item>
      <title>KISS Principle</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/kiss-principle/</link>
      <pubDate>Mon, 23 Sep 2024 01:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/kiss-principle/</guid>
      <description>시스템이나 코드의 복잡성을 최소화하라.</description>
    </item>
    <item>
      <title>YAGNI Principle</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/yagni-principle/</link>
      <pubDate>Mon, 23 Sep 2024 00:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/yagni-principle/</guid>
      <description>당장 필요하지 않은 기능을 미리 구현하지 마라.</description>
    </item>
    <item>
      <title>DRY Principle</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/dry-principle/</link>
      <pubDate>Mon, 23 Sep 2024 00:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/dry-principle/</guid>
      <description>코드 중복을 피하고 로직을 한 곳에서 관리하도록 권장하는 원칙.</description>
    </item>
    <item>
      <title>SOLID Principles</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/solid-principles/</link>
      <pubDate>Mon, 23 Sep 2024 00:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-principles/solid-principles/</guid>
      <description>객체 지향 프로그래밍 및 설계의 다섯 가지 기본 원칙.</description>
    </item>
    <item>
      <title>Class and Instance</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/class-and-instance/</link>
      <pubDate>Sun, 22 Sep 2024 12:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/class-and-instance/</guid>
      <description>클래스란 객체를 생성하기 위한 템플릿 또는 청사진이고, 인스턴스는 클래스를 기반으로 생성된 실제 객체</description>
    </item>
    <item>
      <title>Class and Object and Instance</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/class-and-object-and-instance/</link>
      <pubDate>Sun, 22 Sep 2024 12:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/class-and-object-and-instance/</guid>
      <description>&lt;h2 id=&#34;class-and-object-and-instance&#34;&gt;Class and Object and Instance&lt;/h2&gt;
&lt;p&gt;객체 지향 프로그래밍(Object-Oriented Programming, OOP)에서 클래스(Class)와 객체(Object), 그리고 인스턴스(Instance)는 핵심적인 개념이다.&lt;/p&gt;
&lt;h3 id=&#34;클래스class&#34;&gt;클래스(Class)&lt;/h3&gt;
&lt;p&gt;클래스는 객체를 생성하기 위한 템플릿 또는 청사진이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정의: 객체를 정의해놓은 것 또는 객체의 설계도/틀&lt;/li&gt;
&lt;li&gt;용도: 객체를 생성하는데 사용됨&lt;/li&gt;
&lt;li&gt;구성: 연관된 데이터(속성)와 메서드(행동)의 집합&lt;/li&gt;
&lt;li&gt;특징:
&lt;ul&gt;
&lt;li&gt;메모리를 차지하지 않음&lt;/li&gt;
&lt;li&gt;한 번만 선언됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예를 들어, &amp;lsquo;자동차&amp;rsquo; 클래스는 모든 자동차의 공통적인 특성(브랜드, 모델, 색상 등)과 행동(시동 걸기, 가속하기 등)을 정의한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-1&#34;&gt; 1&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-2&#34;&gt; 2&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-3&#34;&gt; 3&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-4&#34;&gt; 4&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-5&#34;&gt; 5&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-6&#34;&gt; 6&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-7&#34;&gt; 7&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-8&#34;&gt; 8&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-9&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-9&#34;&gt; 9&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-10&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-10&#34;&gt;10&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-11&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-11&#34;&gt;11&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-12&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-12&#34;&gt;12&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Car&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 생성자: 객체가 생성될 때 초기화하는 메서드&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;brand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;brand&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;brand&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# 브랜드 속성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# 색상 속성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;year&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# 연식 속성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;engine_on&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 시동 상태&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 시동 걸기 메서드&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;start_engine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;engine_on&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;brand&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; 차량의 시동을 겁니다.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;객체object&#34;&gt;객체(Object)&lt;/h3&gt;
&lt;p&gt;객체는 클래스를 기반으로 생성된 실체.&lt;/p&gt;</description>
    </item>
    <item>
      <title>다형성 (Polymorphism)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/primary-principles/polymorphism/</link>
      <pubDate>Sun, 22 Sep 2024 10:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/primary-principles/polymorphism/</guid>
      <description>다형성(Polymorphism)은 객체지향 프로그래밍의 핵심 특징 중 하나로, &amp;#34;여러 가지 형태를 가질 수 있는 능력&amp;#34;을 의미한다</description>
    </item>
    <item>
      <title>상속 (Inheritance)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/primary-principles/inheritance/</link>
      <pubDate>Sun, 22 Sep 2024 10:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/primary-principles/inheritance/</guid>
      <description>상속은 객체지향 프로그래밍의 핵심 특징 중 하나로, 기존 클래스의 특성을 다른 클래스가 물려받아 재사용하고 확장할 수 있게 해주는 메커니즘</description>
    </item>
    <item>
      <title>추상화 (Abstraction)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/primary-principles/abstraction/</link>
      <pubDate>Sun, 22 Sep 2024 06:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/primary-principles/abstraction/</guid>
      <description>프로그래밍에서 핵심적인 개념으로, 복잡한 시스템이나 데이터를 단순화하여 필수적인 특징만을 강조하는 과정</description>
    </item>
    <item>
      <title>Abstract Classes</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/paradigm-features/abstract-classes/</link>
      <pubDate>Sun, 22 Sep 2024 04:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/paradigm-features/abstract-classes/</guid>
      <description>추상 클래스는 하나 이상의 추상 메서드를 포함하는 클래스이다. 추상 메서드는 선언만 되고 구현되지 않은 메서드를 말한다.</description>
    </item>
    <item>
      <title>Interfaces</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/paradigm-features/interfaces/</link>
      <pubDate>Sun, 22 Sep 2024 04:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/paradigm-features/interfaces/</guid>
      <description>소프트웨어나 애플리케이션에서 인터페이스(Interface)는 두 개의 시스템, 프로그램, 장치 또는 구성 요소 간의 상호 작용을 가능하게 하는 연결점 또는 접점을 의미한다.</description>
    </item>
    <item>
      <title>오버라이딩(Overriding)과 오버로딩(Overloading)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/overriding-and-overloading/</link>
      <pubDate>Sun, 22 Sep 2024 04:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/overriding-and-overloading/</guid>
      <description>오버라이딩(Overriding)과 오버로딩(Overloading)에 대해 알아보고 비교 분석해보자.</description>
    </item>
    <item>
      <title>Encapsulation</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/primary-principles/encapsulation/</link>
      <pubDate>Sun, 22 Sep 2024 02:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/programming-paradigms/oop/primary-principles/encapsulation/</guid>
      <description>캡슐화는 데이터와 그 데이터를 처리하는 메서드를 하나의 단위로 묶고, 외부로부터 접근을 제한하는 것을 의미한다.</description>
    </item>
    <item>
      <title>Concurrent Engineering Model</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/concurrent-engineering-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/concurrent-engineering-model/</guid>
      <description>소프트웨어 개발 프로세스를 최적화하고 효율성을 높이기 위한 접근 방식</description>
    </item>
    <item>
      <title>Domain-Driven Development</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/domain-driven-development/</link>
      <pubDate>Sat, 21 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/domain-driven-development/</guid>
      <description>복잡한 소프트웨어를 개발할 때 비즈니스 도메인을 중심으로 설계와 개발을 진행하는 방법론</description>
    </item>
    <item>
      <title>Formal Methods Model</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/formal-methods-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/formal-methods-model/</guid>
      <description>소프트웨어 개발에서 수학적 기법을 사용하여 시스템을 명세, 개발, 분석 및 검증하는 엄격한 접근 방식</description>
    </item>
    <item>
      <title>Incremental Model</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/incremental-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/incremental-model/</guid>
      <description>전체 시스템을 여러 개의 작은 부분(증분)으로 나누어 순차적으로 개발하고 제공하는 접근 방식.</description>
    </item>
    <item>
      <title>행동 주도 개발 (Behavior-Driven Development, BDD)</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/behavior-driven-development/</link>
      <pubDate>Sat, 21 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/behavior-driven-development/</guid>
      <description>테스트 주도 개발(TDD)에서 파생된 소프트웨어 개발 방법론으로, 사용자의 행동과 비즈니스 가치에 초점을 맞춘다.</description>
    </item>
    <item>
      <title>DevOps Model</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/devops-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/devops-model/</guid>
      <description>소프트웨어 개발(Development)과 IT 운영(Operations)을 통합하는 방법론으로, 소프트웨어 개발 프로세스를 개선하고 더 빠르고 안정적인 제품 배포를 가능하게 한다.</description>
    </item>
    <item>
      <title>Prototyping Model</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/prototyping-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/prototyping-model/</guid>
      <description>최종 제품의 초기 버전 또는 모형을 만들어 사용자의 피드백을 받고 요구사항을 명확히 하는 방법.</description>
    </item>
    <item>
      <title>Rapid Application Development</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/rapid-application-development/</link>
      <pubDate>Sat, 21 Sep 2024 00:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/rapid-application-development/</guid>
      <description>빠른 프로토타이핑과 반복적인 개발을 통해 신속하게 애플리케이션을 구축하는 접근 방식</description>
    </item>
    <item>
      <title>Iterative Model</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/iterative-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/iterative-model/</guid>
      <description>전체 시스템을 여러 개의 작은 부분으로 나누어 반복적으로 개발하고 개선하는 방법</description>
    </item>
    <item>
      <title>Spiral Model</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/spiral-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/spiral-model/</guid>
      <description>위험 분석을 중심으로 반복적인 개발을 수행하며, 각 반복 주기마다 위험 요소를 평가하고 대응한다.</description>
    </item>
    <item>
      <title>V Model</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/v-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/v-model/</guid>
      <description>개발 단계와 테스트 단계를 병행하여 진행하는 검증(Verification)과 확인(Validation) 중심의 접근 방식이다.</description>
    </item>
    <item>
      <title>Waterfall Model</title>
      <link>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/waterfall-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/qa/sdlc/software-development-model/waterfall-model/</guid>
      <description>각 단계를 순차적으로 진행하며, 이전 단계가 완료되어야 다음 단계로 넘어가는 전통적인 모델.</description>
    </item>
  </channel>
</rss>
