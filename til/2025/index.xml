<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2025 on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/til/2025/</link>
    <description>Recent content in 2025 on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 25 Jan 2025 01:13:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/til/2025/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Decompose by Business Capability vs Decompose by Subdomain</title>
      <link>https://buenhyden.github.io/til/2025/01/25/decompose-by-business-capability-vs-decompose-by-subdomain/</link>
      <pubDate>Sat, 25 Jan 2025 01:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2025/01/25/decompose-by-business-capability-vs-decompose-by-subdomain/</guid>
      <description>&lt;h2 id=&#34;decompose-by-business-capability-vs-decompose-by-subdomain&#34;&gt;Decompose by Business Capability Vs Decompose by Subdomain&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Decompose by Business Capability&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;정의&lt;/strong&gt;: 비즈니스의 기능적 역량을 중심으로 시스템을 분해하는 방식으로, 조직의 주요 기능(예: 판매, 마케팅, 고객 서비스 등)에 따라 모듈을 나누는 방법.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;비즈니스의 주요 역량을 중심으로 서비스나 모듈을 설계.&lt;/li&gt;
&lt;li&gt;시스템의 경계가 기능적인 책임(Functional Responsibility)에 맞춰 설정됨.&lt;/li&gt;
&lt;li&gt;기술적으로 독립적이고 명확한 책임 분리가 가능.&lt;/li&gt;
&lt;li&gt;조직 구조와 자연스럽게 연계되므로 비즈니스와 IT의 연계성이 높아짐.&lt;/li&gt;
&lt;li&gt;비즈니스의 장기적 확장성과 변화를 쉽게 수용할 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;주문 관리 시스템(Order Management System)&lt;/strong&gt;, &lt;strong&gt;재고 관리 시스템(Inventory Management System)&lt;/strong&gt; 등으로 분할.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decompose by Subdomain&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mediator Pattern vs Observer Pattern</title>
      <link>https://buenhyden.github.io/til/2025/01/25/mediator-pattern-vs-observer-pattern/</link>
      <pubDate>Sat, 25 Jan 2025 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2025/01/25/mediator-pattern-vs-observer-pattern/</guid>
      <description>&lt;h2 id=&#34;mediator-pattern-vs-observer-pattern&#34;&gt;Mediator Pattern Vs Observer Pattern&lt;/h2&gt;
&lt;p&gt;Mediator 패턴과 Observer 패턴은 객체 간 통신을 관리하는 디자인 패턴이지만, 그 접근 방식과 용도에 차이가 있다.&lt;/p&gt;
&lt;p&gt;Mediator 패턴:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체 간의 복잡한 상호작용을 캡슐화하여 중재자 객체를 통해 간접적으로 통신하게 하는 패턴&lt;/li&gt;
&lt;li&gt;객체 간 결합도를 낮추고 상호작용을 중앙 집중화함&lt;/li&gt;
&lt;li&gt;복잡한 다대다 관계를 단순화하는 데 유용&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Observer 패턴:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체의 상태 변화를 관찰하는 관찰자들에게 자동으로 알리는 패턴&lt;/li&gt;
&lt;li&gt;주체 객체와 다수의 관찰자 객체 간의 일대다 관계를 정의함&lt;/li&gt;
&lt;li&gt;상태 변경에 대한 효율적인 알림 메커니즘을 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mediator 패턴은 객체 간 복잡한 상호작용을 중재자를 통해 관리하여 &lt;strong&gt;객체 간의 결합도를 줄이고 상호작용 로직을 집중&lt;/strong&gt;시키는 데 적합하다.
Observer 패턴은 상태 변화에 따른 &lt;strong&gt;자동 알림 및 실시간 동기화&lt;/strong&gt;를 구현할 때 적합하며, &lt;strong&gt;이벤트 기반 시스템&lt;/strong&gt;에 자주 사용된다.
두 패턴 모두 객체 간의 결합도를 낮추는 데 기여하지만, &lt;strong&gt;Mediator&lt;/strong&gt;는 상호작용을 캡슐화하고 &lt;strong&gt;Observer&lt;/strong&gt;는 상태 변경에 반응하는 방식으로 목적과 활용 분야가 다르다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
