<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – 01</title><link>https://buenhyden.github.io/til/2025/01/</link><description>Recent content in 01 on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://buenhyden.github.io/til/2025/01/index.xml" rel="self" type="application/rss+xml"/><item><title>MSA 패턴 유형별 비교</title><link>https://buenhyden.github.io/til/2025/01/msa-%ED%8C%A8%ED%84%B4-%EC%9C%A0%ED%98%95%EB%B3%84-%EB%B9%84%EA%B5%90/</link><pubDate>Sat, 04 Jan 2025 02:45:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/msa-%ED%8C%A8%ED%84%B4-%EC%9C%A0%ED%98%95%EB%B3%84-%EB%B9%84%EA%B5%90/</guid><description>
&lt;h2>MSA 패턴 유형별 비교&lt;/h2>&lt;p>아래 표는 MSA의 주요 패턴 유형들을 체계적으로 정리한 것이다.&lt;/p>
&lt;h3>기본 인프라 관련 패턴&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>패턴 유형&lt;/th>
&lt;th>목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>주요 패턴 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Cross-cutting Concern Patterns&lt;/td>
&lt;td>여러 서비스에 공통적으로 적용되는 기능을 분리하여 관리&lt;/td>
&lt;td>인프라 수준에서 공통 관심사 처리&lt;/td>
&lt;td>• 코드 중복 감소&lt;br>• 일관성 있는 처리&lt;br>• 유지보수 용이&lt;/td>
&lt;td>• 추가적인 인프라 필요&lt;br>• 복잡도 증가&lt;/td>
&lt;td>• Service Mesh&lt;br>• Sidecar&lt;br>• Ambassador&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Configuration Management Patterns&lt;/td>
&lt;td>서비스 구성 정보를 외부화하여 중앙 관리&lt;/td>
&lt;td>환경별 설정 분리 및 동적 구성 지원&lt;/td>
&lt;td>• 유연한 설정 변경&lt;br>• 환경별 구성 용이&lt;/td>
&lt;td>• 구성 정보 관리 복잡&lt;br>• 보안 고려 필요&lt;/td>
&lt;td>• External Configuration&lt;br>• Config Server&lt;br>• Environment Variables&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Service Registry Patterns&lt;/td>
&lt;td>서비스 위치 정보를 동적으로 관리&lt;/td>
&lt;td>서비스 등록 및 발견 자동화&lt;/td>
&lt;td>• 동적 확장 용이&lt;br>• 자동 장애 감지&lt;/td>
&lt;td>• 추가 인프라 필요&lt;br>• 의존성 증가&lt;/td>
&lt;td>• Service Discovery&lt;br>• Service Registry&lt;br>• Client-side Discovery&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>데이터 관련 패턴&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>패턴 유형&lt;/th>
&lt;th>목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>주요 패턴 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Database Patterns&lt;/td>
&lt;td>데이터 저장소 설계 및 관리 전략&lt;/td>
&lt;td>서비스별 독립적 데이터 관리&lt;/td>
&lt;td>• 데이터 독립성&lt;br>• 확장성 향상&lt;/td>
&lt;td>• 데이터 일관성 관리 어려움&lt;br>• 복잡도 증가&lt;/td>
&lt;td>• Database per Service&lt;br>• CQRS&lt;br>• Saga&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Data Management Patterns&lt;/td>
&lt;td>데이터 처리 및 동기화 전략&lt;/td>
&lt;td>분산 데이터 관리&lt;/td>
&lt;td>• 데이터 일관성 보장&lt;br>• 효율적 처리&lt;/td>
&lt;td>• 구현 복잡도&lt;br>• 성능 오버헤드&lt;/td>
&lt;td>• Event Sourcing&lt;br>• Materialized View&lt;br>• Shared Data&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>State Management Patterns&lt;/td>
&lt;td>서비스 상태 관리 전략&lt;/td>
&lt;td>상태 정보의 일관성 유지&lt;/td>
&lt;td>• 상태 추적 용이&lt;br>• 복구 용이&lt;/td>
&lt;td>• 구현 복잡도&lt;br>• 성능 영향&lt;/td>
&lt;td>• Stateless Service&lt;br>• Session State&lt;br>• Distributed Cache&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>서비스 구조 및 통신 관련 패턴&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>패턴 유형&lt;/th>
&lt;th>목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>주요 패턴 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Decomposition Patterns&lt;/td>
&lt;td>서비스 분할 전략&lt;/td>
&lt;td>비즈니스 기능 기반 분할&lt;/td>
&lt;td>• 독립적 개발/배포&lt;br>• 확장성 향상&lt;/td>
&lt;td>• 서비스 경계 설정 어려움&lt;br>• 통신 복잡도 증가&lt;/td>
&lt;td>• Business Capability&lt;br>• Domain-Driven&lt;br>• Strangler&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Communication Patterns&lt;/td>
&lt;td>서비스 간 통신 방식 정의&lt;/td>
&lt;td>동기/비동기 통신 지원&lt;/td>
&lt;td>• 유연한 통신&lt;br>• 느슨한 결합&lt;/td>
&lt;td>• 메시지 관리 복잡&lt;br>• 디버깅 어려움&lt;/td>
&lt;td>• Synchronous RPC&lt;br>• Event-Driven&lt;br>• Message Queue&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Integration Patterns&lt;/td>
&lt;td>서비스 통합 전략&lt;/td>
&lt;td>다양한 통합 방식 제공&lt;/td>
&lt;td>• 유연한 통합&lt;br>• 재사용성&lt;/td>
&lt;td>• 구현 복잡도&lt;br>• 관리 어려움&lt;/td>
&lt;td>• API Gateway&lt;br>• BFF&lt;br>• Aggregator&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>운영 및 품질 관련 패턴&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>패턴 유형&lt;/th>
&lt;th>목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>주요 패턴 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Deployment Patterns&lt;/td>
&lt;td>서비스 배포 전략&lt;/td>
&lt;td>무중단 배포 지원&lt;/td>
&lt;td>• 안정적 배포&lt;br>• 위험 감소&lt;/td>
&lt;td>• 인프라 비용&lt;br>• 복잡도 증가&lt;/td>
&lt;td>• Blue-Green&lt;br>• Canary&lt;br>• Rolling Update&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Testing Patterns&lt;/td>
&lt;td>서비스 테스트 전략&lt;/td>
&lt;td>다양한 수준의 테스트 지원&lt;/td>
&lt;td>• 품질 보장&lt;br>• 신뢰성 향상&lt;/td>
&lt;td>• 테스트 환경 구축 비용&lt;br>• 실행 시간 증가&lt;/td>
&lt;td>• Consumer-Driven&lt;br>• Contract Test&lt;br>• End-to-End Test&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Observability Patterns&lt;/td>
&lt;td>서비스 모니터링 전략&lt;/td>
&lt;td>시스템 상태 가시화&lt;/td>
&lt;td>• 문제 감지 용이&lt;br>• 분석 용이&lt;/td>
&lt;td>• 데이터 양 증가&lt;br>• 저장/분석 비용&lt;/td>
&lt;td>• Distributed Tracing&lt;br>• Log Aggregation&lt;br>• Health Check&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>성능 및 보안 관련 패턴&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>패턴 유형&lt;/th>
&lt;th>목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>주요 패턴 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Scalability Patterns&lt;/td>
&lt;td>서비스 확장성 확보&lt;/td>
&lt;td>동적 확장/축소 지원&lt;/td>
&lt;td>• 자원 효율성&lt;br>• 비용 최적화&lt;/td>
&lt;td>• 구현 복잡도&lt;br>• 관리 어려움&lt;/td>
&lt;td>• Horizontal Scaling&lt;br>• Sharding&lt;br>• Load Balancer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Performance Patterns&lt;/td>
&lt;td>성능 최적화 전략&lt;/td>
&lt;td>응답 시간 및 처리량 개선&lt;/td>
&lt;td>• 사용자 경험 향상&lt;br>• 자원 효율성&lt;/td>
&lt;td>• 구현 복잡도&lt;br>• 유지보수 어려움&lt;/td>
&lt;td>• Caching&lt;br>• Async Processing&lt;br>• Throttling&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Versioning Patterns&lt;/td>
&lt;td>API 버전 관리 전략&lt;/td>
&lt;td>하위 호환성 보장&lt;/td>
&lt;td>• 안정적 변경&lt;br>• 클라이언트 독립성&lt;/td>
&lt;td>• 관리 복잡도&lt;br>• 테스트 부담&lt;/td>
&lt;td>• URI Versioning&lt;br>• Header Versioning&lt;br>• Content Negotiation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Resilience Patterns&lt;/td>
&lt;td>장애 대응 전략&lt;/td>
&lt;td>시스템 복원력 향상&lt;/td>
&lt;td>• 안정성 향상&lt;br>• 가용성 보장&lt;/td>
&lt;td>• 구현 복잡도&lt;br>• 성능 영향&lt;/td>
&lt;td>• Circuit Breaker&lt;br>• Bulkhead&lt;br>• Retry&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Security Patterns&lt;/td>
&lt;td>보안 통제 전략&lt;/td>
&lt;td>다층적 보안 구현&lt;/td>
&lt;td>• 보안성 향상&lt;br>• 규정 준수&lt;/td>
&lt;td>• 구현 복잡도&lt;br>• 성능 영향&lt;/td>
&lt;td>• OAuth/OIDC&lt;br>• API Security&lt;br>• Zero Trust&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>패턴 선택 시 고려사항&lt;/h3>&lt;p>실제 구현 시에는 비즈니스 요구사항, 기술적 제약사항, 팀의 역량 등을 고려하여 적절한 패턴을 선택하고 조합해야 한다.&lt;br>
또한, 각 패턴은 독립적으로 사용될 수도 있지만, 대부분의 경우 여러 패턴을 함께 사용하여 시너지를 얻을 수 있다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>비즈니스 요구사항&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>시스템의 규모와 복잡도&lt;/li>
&lt;li>성능 요구사항&lt;/li>
&lt;li>보안 요구사항&lt;/li>
&lt;li>확장성 요구사항&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>기술적 제약사항&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>기존 시스템과의 통합&lt;/li>
&lt;li>팀의 기술력&lt;/li>
&lt;li>인프라 환경&lt;/li>
&lt;li>비용 제약&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>운영 환경&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>모니터링 요구사항&lt;/li>
&lt;li>배포 환경&lt;/li>
&lt;li>유지보수 용이성&lt;/li>
&lt;li>장애 대응 체계&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>성공적인 구현을 위한 제언&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>점진적 도입&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>핵심 패턴부터 순차적 적용&lt;/li>
&lt;li>파일럿 프로젝트로 검증&lt;/li>
&lt;li>팀 역량 강화 병행&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>모니터링 강화&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>핵심 메트릭 정의&lt;/li>
&lt;li>알림 체계 구축&lt;/li>
&lt;li>성능 지표 수집&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>지속적인 개선&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>피드백 루프 구축&lt;/li>
&lt;li>패턴 적용 효과 측정&lt;/li>
&lt;li>문제점 조기 발견 및 대응&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3>참고 및 출처&lt;/h3></description></item><item><title>Concurrent Hash Map vs Hash Map vs Hash Table</title><link>https://buenhyden.github.io/til/2025/01/concurrent-hash-map-vs-hash-map-vs-hash-table/</link><pubDate>Mon, 06 Jan 2025 14:35:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/concurrent-hash-map-vs-hash-map-vs-hash-table/</guid><description>
&lt;h2>Concurrent Hash Map Vs Hash Map Vs Hash Table&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Concurrent HashMap&lt;/th>
&lt;th>HashMap&lt;/th>
&lt;th>HashTable&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>동기화&lt;/strong>&lt;/td>
&lt;td>세그먼트/버킷 단위의 부분 동기화 지원&lt;/td>
&lt;td>동기화 지원하지 않음&lt;/td>
&lt;td>메서드 단위의 전체 동기화 지원&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>동시성&lt;/strong>&lt;/td>
&lt;td>높은 동시성 지원 (여러 스레드가 동시에 다른 세그먼트에 접근 가능)&lt;/td>
&lt;td>동시성 지원하지 않음 (단일 스레드 환경용)&lt;/td>
&lt;td>낮은 동시성 (한 번에 하나의 스레드만 접근 가능)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>성능&lt;/strong>&lt;/td>
&lt;td>동시 접근 시 높은 성능&lt;/td>
&lt;td>단일 스레드에서 가장 높은 성능&lt;/td>
&lt;td>동기화로 인한 성능 저하&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>null 허용&lt;/strong>&lt;/td>
&lt;td>key와 value 모두 null 불가&lt;/td>
&lt;td>key는 하나만 null 허용, value는 여러 개 null 허용&lt;/td>
&lt;td>key와 value 모두 null 불가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>초기 용량&lt;/strong>&lt;/td>
&lt;td>기본 16, 세그먼트 수는 16&lt;/td>
&lt;td>기본 16&lt;/td>
&lt;td>기본 11&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>적재율&lt;/strong>&lt;/td>
&lt;td>기본 0.75&lt;/td>
&lt;td>기본 0.75&lt;/td>
&lt;td>기본 0.75&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>이터레이션&lt;/strong>&lt;/td>
&lt;td>fail-safe 이터레이터 제공&lt;/td>
&lt;td>fail-fast 이터레이터 제공&lt;/td>
&lt;td>fail-fast 이터레이터 제공&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>생성 시기&lt;/strong>&lt;/td>
&lt;td>Java 5&lt;/td>
&lt;td>Java 1.2&lt;/td>
&lt;td>Java 1.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 사용&lt;/strong>&lt;/td>
&lt;td>세그먼트로 인한 추가 메모리 필요&lt;/td>
&lt;td>가장 적은 메모리 사용&lt;/td>
&lt;td>동기화로 인한 추가 메모리 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>용도&lt;/strong>&lt;/td>
&lt;td>멀티스레드 환경의 동시성이 필요한 경우&lt;/td>
&lt;td>단일 스레드 환경의 일반적인 경우&lt;/td>
&lt;td>레거시 코드 호환성이 필요한 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>확장성&lt;/strong>&lt;/td>
&lt;td>동적 확장 가능&lt;/td>
&lt;td>동적 확장 가능&lt;/td>
&lt;td>동적 확장 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>순서 보장&lt;/strong>&lt;/td>
&lt;td>삽입 순서 보장하지 않음&lt;/td>
&lt;td>삽입 순서 보장하지 않음&lt;/td>
&lt;td>삽입 순서 보장하지 않음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>동기화 비용&lt;/strong>&lt;/td>
&lt;td>부분적 동기화로 중간 수준의 비용&lt;/td>
&lt;td>동기화 비용 없음&lt;/td>
&lt;td>전체 동기화로 높은 비용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>스레드 안전성&lt;/strong>&lt;/td>
&lt;td>스레드 안전&lt;/td>
&lt;td>스레드 안전하지 않음&lt;/td>
&lt;td>스레드 안전&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>키 충돌 처리&lt;/strong>&lt;/td>
&lt;td>체이닝 방식&lt;/td>
&lt;td>체이닝 방식&lt;/td>
&lt;td>체이닝 방식&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>참고로 몇 가지 중요한 추가 설명을 하자면:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>fail-safe vs fail-fast:&lt;/p>
&lt;ul>
&lt;li>fail-safe: 이터레이션 중 컬렉션이 수정되어도 예외가 발생하지 않음&lt;/li>
&lt;li>fail-fast: 이터레이션 중 컬렉션이 수정되면 예외 발생&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 특성:&lt;/p>
&lt;ul>
&lt;li>ConcurrentHashMap: 읽기 작업은 락이 필요 없음&lt;/li>
&lt;li>HashMap: 모든 작업에서 락이 없어 가장 빠름&lt;/li>
&lt;li>HashTable: 모든 작업에 락이 필요해 가장 느림&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>동시성 처리:&lt;/p>
&lt;ul>
&lt;li>ConcurrentHashMap: 세그먼트 단위로 락을 걸어 다른 세그먼트는 동시 접근 가능&lt;/li>
&lt;li>HashMap: 동시성 처리 없음&lt;/li>
&lt;li>HashTable: 메서드 단위로 전체에 락을 걸어 동시 접근 불가&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Concurrent Data Structure</title><link>https://buenhyden.github.io/til/2025/01/concurrent-data-structure/</link><pubDate>Mon, 06 Jan 2025 12:55:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/concurrent-data-structure/</guid><description>
&lt;h2>Concurrent Data Structure&lt;/h2>&lt;p>Concurrent Data Structure는 여러 스레드가 동시에 안전하게 접근하고 조작할 수 있도록 설계된 데이터 구조이다.&lt;br>
전통적인 데이터 구조와 달리, 동시성을 고려하여 데이터의 일관성과 무결성을 보장하면서도 높은 성능을 제공하는 것이 특징이다.&lt;br>
Concurrent Data Structure는 여러 스레드가 동시에 안전하게 접근하고 수정할 수 있도록 설계된 데이터 구조입니다.&lt;/p>
&lt;p>Concurrent Data Structure는 일반적으로 다음과 같은 방식으로 구현된다:&lt;/p>
&lt;ul>
&lt;li>세밀한 락(fine-grained locking) 사용&lt;/li>
&lt;li>락 없는(lock-free) 알고리즘&lt;/li>
&lt;li>대기 없는(wait-free) 알고리즘&lt;/li>
&lt;li>지연된 삭제와 메모리 재사용 기법&lt;/li>
&lt;/ul>
&lt;p>이러한 구조는 고성능 멀티스레드 시스템, 데이터베이스, 운영체제, 네트워크 스택 등 다양한 분야에서 활용된다.&lt;/p>
&lt;h3>주요 특징&lt;/h3>&lt;ol>
&lt;li>스레드 안전성: 여러 스레드가 동시에 접근해도 데이터의 일관성을 유지한다.&lt;/li>
&lt;li>높은 동시성: 여러 스레드가 동시에 작업을 수행할 수 있어 성능이 향상된다.&lt;/li>
&lt;li>락 최소화: 전체 구조에 대한 락 대신 세밀한 락이나 락 없는 기법을 사용한다.&lt;/li>
&lt;li>확장성: 스레드 수가 증가해도 성능 저하가 적다.&lt;/li>
&lt;li>원자적 연산: Compare-And-Swap(CAS)과 같은 원자적 연산을 활용한다.&lt;/li>
&lt;/ol>
&lt;h3>Concurrent Data Structure 패턴 비교&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Concurrent HashMap&lt;/th>
&lt;th>Concurrent Skip List&lt;/th>
&lt;th>Lock-free Queue&lt;/th>
&lt;th>Lock-free Stack&lt;/th>
&lt;th>Read-Copy-Update (RCU) List&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>개념&lt;/td>
&lt;td>동시에 여러 스레드가 접근 가능한 해시 기반 맵&lt;/td>
&lt;td>동시성을 지원하는 계층화된 정렬 리스트&lt;/td>
&lt;td>락 없이 동시 접근 가능한 FIFO 큐&lt;/td>
&lt;td>락 없이 동시 접근 가능한 LIFO 스택&lt;/td>
&lt;td>읽기에 최적화된 동시성 리스트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>동기화 방식&lt;/td>
&lt;td>세그먼트 락 또는 CAS&lt;/td>
&lt;td>CAS 기반&lt;/td>
&lt;td>CAS 기반&lt;/td>
&lt;td>CAS 기반&lt;/td>
&lt;td>읽기는 락 없음, 쓰기는 RCU 메커니즘&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 용도&lt;/td>
&lt;td>동시성 캐시, 공유 데이터 저장&lt;/td>
&lt;td>정렬된 데이터의 동시 접근&lt;/td>
&lt;td>작업 큐, 버퍼&lt;/td>
&lt;td>후입선출 데이터 관리&lt;/td>
&lt;td>읽기가 빈번한 데이터 구조&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>성능 특성&lt;/td>
&lt;td>읽기/쓰기 균형&lt;/td>
&lt;td>로그 시간 복잡도 연산&lt;/td>
&lt;td>높은 처리량&lt;/td>
&lt;td>빠른 푸시/팝 연산&lt;/td>
&lt;td>매우 빠른 읽기, 느린 쓰기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>장점&lt;/td>
&lt;td>높은 동시성, 확장성&lt;/td>
&lt;td>효율적인 검색과 삽입&lt;/td>
&lt;td>높은 동시성, 데드락 없음&lt;/td>
&lt;td>단순한 구현, 높은 동시성&lt;/td>
&lt;td>락 없는 읽기, 높은 확장성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>단점&lt;/td>
&lt;td>메모리 사용량 증가&lt;/td>
&lt;td>구현 복잡도 높음&lt;/td>
&lt;td>ABA 문제 가능성&lt;/td>
&lt;td>ABA 문제, 제한된 확장성&lt;/td>
&lt;td>복잡한 메모리 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 사용&lt;/td>
&lt;td>중간~높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>높음 (여러 버전 유지)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 방식&lt;/td>
&lt;td>버킷 배열, 연결 리스트/트리&lt;/td>
&lt;td>계층화된 연결 리스트&lt;/td>
&lt;td>연결 리스트, 원자적 포인터&lt;/td>
&lt;td>연결 리스트, 원자적 포인터&lt;/td>
&lt;td>버전 관리된 연결 리스트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>특징&lt;/td>
&lt;td>동적 크기 조정&lt;/td>
&lt;td>확률적 밸런싱&lt;/td>
&lt;td>대기 없는 연산&lt;/td>
&lt;td>단순한 구조&lt;/td>
&lt;td>읽기 최적화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡도&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>매우 좋음&lt;/td>
&lt;td>좋음&lt;/td>
&lt;td>좋음&lt;/td>
&lt;td>제한적&lt;/td>
&lt;td>매우 좋음 (읽기)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ABA 문제&lt;/td>
&lt;td>해결됨&lt;/td>
&lt;td>해결 필요&lt;/td>
&lt;td>해결 필요&lt;/td>
&lt;td>해결 필요&lt;/td>
&lt;td>해결됨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>순서 보장&lt;/td>
&lt;td>보장 안 됨&lt;/td>
&lt;td>정렬 순서 보장&lt;/td>
&lt;td>FIFO 보장&lt;/td>
&lt;td>LIFO 보장&lt;/td>
&lt;td>보장 안 됨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용 사례&lt;/td>
&lt;td>데이터베이스, 캐시 시스템&lt;/td>
&lt;td>정렬된 데이터 관리&lt;/td>
&lt;td>작업 스케줄링, 이벤트 처리&lt;/td>
&lt;td>메모리 할당자, 스택 추적&lt;/td>
&lt;td>운영체제 커널, 네트워크 스택&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Suffix Array vs Suffix Tree vs Trie</title><link>https://buenhyden.github.io/til/2025/01/suffix-array-vs-suffix-tree-vs-trie/</link><pubDate>Wed, 08 Jan 2025 15:40:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/suffix-array-vs-suffix-tree-vs-trie/</guid><description>
&lt;h2>Suffix Array Vs Suffix Tree Vs Trie&lt;/h2>&lt;p>Suffix Array, Suffix Tree, 그리고 Trie는 모두 문자열 처리와 패턴 매칭을 위한 데이터 구조로, 각각 고유한 특성과 용도를 가지고 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Suffix Array&lt;/th>
&lt;th>Suffix Tree&lt;/th>
&lt;th>Trie&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>기본 구조&lt;/strong>&lt;/td>
&lt;td>모든 접미사를 정렬하여 저장하는 1차원 배열&lt;/td>
&lt;td>모든 접미사를 트리 형태로 저장하는 압축된 트리 구조&lt;/td>
&lt;td>문자열을 문자 단위로 저장하는 트리 구조&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 효율성&lt;/strong>&lt;/td>
&lt;td>O(n), 매우 효율적&lt;/td>
&lt;td>O(n), 하지만 실제로는 4n 정도로 큼&lt;/td>
&lt;td>O(ALPHABET_SIZE &lt;em>key_length&lt;/em> n), 매우 큼&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>구축 시간&lt;/strong>&lt;/td>
&lt;td>O(n log n)&lt;/td>
&lt;td>O(n) (Ukkonen&amp;rsquo;s Algorithm 사용 시)&lt;/td>
&lt;td>O(n * key_length)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>검색 시간&lt;/strong>&lt;/td>
&lt;td>O(m log n + occ), m은 패턴 길이&lt;/td>
&lt;td>O(m + occ), m은 패턴 길이&lt;/td>
&lt;td>O(m), m은 검색할 문자열 길이&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>구현 난이도&lt;/strong>&lt;/td>
&lt;td>비교적 간단&lt;/td>
&lt;td>매우 복잡&lt;/td>
&lt;td>비교적 간단&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>LCP 계산&lt;/strong>&lt;/td>
&lt;td>추가 배열 필요&lt;/td>
&lt;td>트리 구조에서 직접 계산 가능&lt;/td>
&lt;td>해당 없음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>패턴 매칭&lt;/strong>&lt;/td>
&lt;td>이진 검색 이용&lt;/td>
&lt;td>트리 순회로 직접 검색&lt;/td>
&lt;td>트리 순회로 직접 검색&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>공간 지역성&lt;/strong>&lt;/td>
&lt;td>매우 좋음 (연속된 메모리)&lt;/td>
&lt;td>보통 (포인터로 인한 흩어짐)&lt;/td>
&lt;td>나쁨 (노드가 메모리에 흩어짐)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주요 응용&lt;/strong>&lt;/td>
&lt;td>텍스트 검색, DNA 분석&lt;/td>
&lt;td>문자열 처리, 바이오인포매틱스&lt;/td>
&lt;td>사전 구현, 자동 완성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>동적 업데이트&lt;/strong>&lt;/td>
&lt;td>어려움&lt;/td>
&lt;td>가능하나 복잡&lt;/td>
&lt;td>쉬움&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>접두사 검색&lt;/strong>&lt;/td>
&lt;td>어려움&lt;/td>
&lt;td>가능하나 비효율적&lt;/td>
&lt;td>매우 효율적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>최장 공통 접두사&lt;/strong>&lt;/td>
&lt;td>추가 작업 필요&lt;/td>
&lt;td>직접 계산 가능&lt;/td>
&lt;td>직접 계산 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>최장 공통 부분 문자열&lt;/strong>&lt;/td>
&lt;td>LCP 배열 필요&lt;/td>
&lt;td>직접 계산 가능&lt;/td>
&lt;td>부적합&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>압축 가능성&lt;/strong>&lt;/td>
&lt;td>제한적&lt;/td>
&lt;td>매우 좋음&lt;/td>
&lt;td>있음 (압축 트라이)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>캐시 성능&lt;/strong>&lt;/td>
&lt;td>매우 좋음&lt;/td>
&lt;td>보통&lt;/td>
&lt;td>나쁨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>실제 사용 사례&lt;/strong>&lt;/td>
&lt;td>대용량 문자열 검색 시스템&lt;/td>
&lt;td>생물정보학, 문자열 처리&lt;/td>
&lt;td>자동 완성, 사전 검색&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>추가적인 중요 고려사항:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>메모리 사용 패턴:&lt;/p>
&lt;ul>
&lt;li>Suffix Array: 연속된 메모리 공간 사용으로 캐시 효율성 높음&lt;/li>
&lt;li>Suffix Tree: 포인터 기반 구조로 메모리 사용이 분산됨&lt;/li>
&lt;li>Trie: 노드별 메모리 할당으로 가장 분산된 사용 패턴&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 트레이드오프:&lt;/p>
&lt;ul>
&lt;li>Suffix Array: 공간 효율성 vs 검색 속도&lt;/li>
&lt;li>Suffix Tree: 구현 복잡성 vs 기능성&lt;/li>
&lt;li>Trie: 메모리 사용량 vs 검색 단순성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>적합한 사용 시나리오:&lt;/p>
&lt;ul>
&lt;li>Suffix Array: 메모리 제약이 있는 대규모 문자열 처리&lt;/li>
&lt;li>Suffix Tree: 복잡한 문자열 처리가 필요한 고성능 응용&lt;/li>
&lt;li>Trie: 접두사 기반 검색이 중요한 응용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Memoization vs Tabulation</title><link>https://buenhyden.github.io/til/2025/01/memoization-vs-tabulation/</link><pubDate>Mon, 13 Jan 2025 11:25:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/memoization-vs-tabulation/</guid><description>
&lt;h2>Memoization Vs Tabulation&lt;/h2>&lt;p>Memoization과 Tabulation은 동적 프로그래밍(Dynamic Programming)에서 사용되는 두 가지 주요 최적화 기법이다.&lt;/p>
&lt;p>Memoization(메모이제이션)은 &amp;ldquo;하향식(Top-down)&amp;rdquo; 접근 방식이다.&lt;br>
이는 재귀적으로 문제를 해결하면서, 계산된 결과를 캐시(보통 배열이나 해시 맵)에 저장하여 나중에 같은 입력이 들어왔을 때 재계산하지 않고 저장된 결과를 반환하는 방식이다.&lt;/p>
&lt;p>Tabulation(타뷸레이션)은 &amp;ldquo;상향식(Bottom-up)&amp;rdquo; 접근 방식이다.&lt;br>
가장 작은 하위 문제부터 시작하여 더 큰 문제의 해답을 테이블에 순차적으로 채워나가는 방식이다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Tabulation&lt;/th>
&lt;th>Memoization&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>접근 방식&lt;/strong>&lt;/td>
&lt;td>Bottom-up (상향식)&lt;/td>
&lt;td>Top-down (하향식)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>구현 방법&lt;/strong>&lt;/td>
&lt;td>반복문 (Iterative)&lt;/td>
&lt;td>재귀 (Recursive)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 사용&lt;/strong>&lt;/td>
&lt;td>문제 크기만큼 고정&lt;/td>
&lt;td>필요한 만큼 동적 할당&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>실행 순서&lt;/strong>&lt;/td>
&lt;td>순차적으로 모든 하위 문제 해결&lt;/td>
&lt;td>필요한 하위 문제만 해결&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>공간 효율성&lt;/strong>&lt;/td>
&lt;td>예측 가능하고 일정함&lt;/td>
&lt;td>재귀 호출로 인한 스택 공간 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>시간 효율성&lt;/strong>&lt;/td>
&lt;td>모든 경우를 계산&lt;/td>
&lt;td>필요한 경우만 계산&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>코드 복잡도&lt;/strong>&lt;/td>
&lt;td>일반적으로 더 단순&lt;/td>
&lt;td>일반적으로 더 복잡&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>캐시 활용&lt;/strong>&lt;/td>
&lt;td>배열/테이블 형태&lt;/td>
&lt;td>해시 테이블/맵 형태&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>구현 예시 비교&lt;/h3>&lt;h4>피보나치 수열 계산의 경우&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Tabulation 방식&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">fib_tabulation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 테이블 초기화&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 순차적으로 값 채우기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">table&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Memoization 방식&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">fib_memoization&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">memo&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{}):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 이미 계산된 값이면 반환&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">memo&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">memo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 기본 케이스&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 결과 저장 및 반환&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">memo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fib_memoization&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">memo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">fib_memoization&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">memo&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">memo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>세부 특성&lt;/th>
&lt;th>Tabulation&lt;/th>
&lt;th>Memoization&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>적합한 상황&lt;/strong>&lt;/td>
&lt;td>모든 하위 문제의 결과가 필요한 경우&lt;/td>
&lt;td>일부 하위 문제의 결과만 필요한 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>디버깅 난이도&lt;/strong>&lt;/td>
&lt;td>상대적으로 쉬움&lt;/td>
&lt;td>재귀로 인해 더 어려움&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>최적화 가능성&lt;/strong>&lt;/td>
&lt;td>공간 최적화 쉬움&lt;/td>
&lt;td>재귀 깊이 제한으로 인한 제약&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>병렬화 가능성&lt;/strong>&lt;/td>
&lt;td>쉬움 (독립적인 계산)&lt;/td>
&lt;td>어려움 (의존성 있는 호출)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>초기화 오버헤드&lt;/strong>&lt;/td>
&lt;td>더 큼 (전체 테이블)&lt;/td>
&lt;td>더 작음 (필요시 할당)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 예측성&lt;/strong>&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음 (실행 중 변동)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>성능 특성&lt;/th>
&lt;th>Tabulation&lt;/th>
&lt;th>Memoization&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>시간 복잡도&lt;/strong>&lt;/td>
&lt;td>O(n) - 모든 경우&lt;/td>
&lt;td>O(n) - 최악의 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>공간 복잡도&lt;/strong>&lt;/td>
&lt;td>O(n) - 테이블 크기&lt;/td>
&lt;td>O(n) - 캐시 + 스택&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>캐시 적중률&lt;/strong>&lt;/td>
&lt;td>100% (모든 값 계산)&lt;/td>
&lt;td>상황에 따라 다름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>초기 지연 시간&lt;/strong>&lt;/td>
&lt;td>더 김 (테이블 초기화)&lt;/td>
&lt;td>더 짧음 (즉시 시작)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 사용량&lt;/strong>&lt;/td>
&lt;td>예측 가능&lt;/td>
&lt;td>변동적&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 차이점을 이해하고 상황에 맞는 적절한 방법을 선택하는 것이 중요하다.&lt;br>
일반적으로:&lt;/p>
&lt;ol>
&lt;li>모든 하위 문제를 풀어야 하는 경우: Tabulation&lt;/li>
&lt;li>일부 하위 문제만 필요한 경우: Memoization&lt;/li>
&lt;li>공간 효율성이 중요한 경우: Tabulation&lt;/li>
&lt;li>구현 단순성이 중요한 경우: Tabulation&lt;/li>
&lt;li>필요한 계산만 하고 싶은 경우: Memoization&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Programming Language Control Structures</title><link>https://buenhyden.github.io/til/2025/01/programming-language-control-structures/</link><pubDate>Mon, 13 Jan 2025 11:12:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/programming-language-control-structures/</guid><description>
&lt;h2>Programming Language Control Structures&lt;/h2>&lt;p>프로그래밍에서 코드의 실행 흐름을 제어하는 핵심적인 구문이다.&lt;/p>
&lt;h3>1. Iteration Structures&lt;/h3>&lt;p>특정 코드 블록을 반복적으로 실행하기 위한 구조&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Language&lt;/th>
&lt;th>For Loop&lt;/th>
&lt;th>While Loop&lt;/th>
&lt;th>Do-While&lt;/th>
&lt;th>For-Each/Range&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Python&lt;/td>
&lt;td>&lt;code>for x in sequence&lt;/code>&lt;/td>
&lt;td>&lt;code>while condition&lt;/code>&lt;/td>
&lt;td>N/A&lt;/td>
&lt;td>&lt;code>for x in iterable&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Java&lt;/td>
&lt;td>&lt;code>for(init;condition;increment)&lt;/code>&lt;/td>
&lt;td>&lt;code>while(condition)&lt;/code>&lt;/td>
&lt;td>&lt;code>do {…} while(condition)&lt;/code>&lt;/td>
&lt;td>&lt;code>for(Type x: collection)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>JavaScript&lt;/td>
&lt;td>&lt;code>for(let i=0;i&amp;lt;n;i++)&lt;/code>&lt;/td>
&lt;td>&lt;code>while(condition)&lt;/code>&lt;/td>
&lt;td>&lt;code>do {…} while(condition)&lt;/code>&lt;/td>
&lt;td>&lt;code>for(let x of iterable)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TypeScript&lt;/td>
&lt;td>Same as JavaScript + type safety&lt;/td>
&lt;td>Same as JavaScript&lt;/td>
&lt;td>Same as JavaScript&lt;/td>
&lt;td>Same as JavaScript&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Golang&lt;/td>
&lt;td>&lt;code>for i:=0; i&amp;lt;n; i++&lt;/code>&lt;/td>
&lt;td>&lt;code>for condition&lt;/code>&lt;/td>
&lt;td>N/A&lt;/td>
&lt;td>&lt;code>for _, v:= range slice&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Kotlin&lt;/td>
&lt;td>&lt;code>for (i in range)&lt;/code>&lt;/td>
&lt;td>&lt;code>while(condition)&lt;/code>&lt;/td>
&lt;td>&lt;code>do {…} while(condition)&lt;/code>&lt;/td>
&lt;td>&lt;code>for (item in collection)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rust&lt;/td>
&lt;td>&lt;code>for x in iter&lt;/code>&lt;/td>
&lt;td>&lt;code>while condition&lt;/code>&lt;/td>
&lt;td>&lt;code>loop {…}&lt;/code>&lt;/td>
&lt;td>&lt;code>for x in collection&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>2. Conditional Statements&lt;/h3>&lt;p>특정 조건에 따라 다른 코드 블록을 실행하도록 하는 구조&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Language&lt;/th>
&lt;th>If-Else&lt;/th>
&lt;th>Switch/Match&lt;/th>
&lt;th>Ternary&lt;/th>
&lt;th>Pattern Matching&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Python&lt;/td>
&lt;td>&lt;code>if/elif/else&lt;/code>&lt;/td>
&lt;td>&lt;code>match&lt;/code> (3.10+)&lt;/td>
&lt;td>&lt;code>a if cond else b&lt;/code>&lt;/td>
&lt;td>Limited&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Java&lt;/td>
&lt;td>&lt;code>if/else if/else&lt;/code>&lt;/td>
&lt;td>&lt;code>switch&lt;/code>&lt;/td>
&lt;td>&lt;code>cond? a: b&lt;/code>&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>JavaScript&lt;/td>
&lt;td>&lt;code>if/else if/else&lt;/code>&lt;/td>
&lt;td>&lt;code>switch&lt;/code>&lt;/td>
&lt;td>&lt;code>cond? a: b&lt;/code>&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TypeScript&lt;/td>
&lt;td>Same as JavaScript&lt;/td>
&lt;td>Same as JavaScript + type patterns&lt;/td>
&lt;td>Same as JavaScript&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Golang&lt;/td>
&lt;td>&lt;code>if/else if/else&lt;/code>&lt;/td>
&lt;td>&lt;code>switch&lt;/code>&lt;/td>
&lt;td>N/A&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Kotlin&lt;/td>
&lt;td>&lt;code>if/else if/else&lt;/code>&lt;/td>
&lt;td>&lt;code>when&lt;/code>&lt;/td>
&lt;td>&lt;code>if(cond) a else b&lt;/code>&lt;/td>
&lt;td>&lt;code>when&lt;/code> expressions&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rust&lt;/td>
&lt;td>&lt;code>if/else if/else&lt;/code>&lt;/td>
&lt;td>&lt;code>match&lt;/code>&lt;/td>
&lt;td>N/A&lt;/td>
&lt;td>Full pattern matching&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>3. Exception Handling&lt;/h3>&lt;p>프로그램 실행 중 발생할 수 있는 오류 상황을 관리하는 메커니즘&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Language&lt;/th>
&lt;th>Try-Catch&lt;/th>
&lt;th>Finally&lt;/th>
&lt;th>Custom Exceptions&lt;/th>
&lt;th>Error Types&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Python&lt;/td>
&lt;td>&lt;code>try/except&lt;/code>&lt;/td>
&lt;td>&lt;code>finally&lt;/code>&lt;/td>
&lt;td>Class inheritance&lt;/td>
&lt;td>Exception hierarchy&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Java&lt;/td>
&lt;td>&lt;code>try/catch&lt;/code>&lt;/td>
&lt;td>&lt;code>finally&lt;/code>&lt;/td>
&lt;td>Class inheritance&lt;/td>
&lt;td>Checked/Unchecked&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>JavaScript&lt;/td>
&lt;td>&lt;code>try/catch&lt;/code>&lt;/td>
&lt;td>&lt;code>finally&lt;/code>&lt;/td>
&lt;td>Class inheritance&lt;/td>
&lt;td>Error object&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TypeScript&lt;/td>
&lt;td>Same as JavaScript&lt;/td>
&lt;td>Same as JavaScript&lt;/td>
&lt;td>Same as JavaScript + types&lt;/td>
&lt;td>Same as JavaScript&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Golang&lt;/td>
&lt;td>N/A (uses error returns)&lt;/td>
&lt;td>&lt;code>defer&lt;/code>&lt;/td>
&lt;td>Custom error types&lt;/td>
&lt;td>Error interface&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Kotlin&lt;/td>
&lt;td>&lt;code>try/catch&lt;/code>&lt;/td>
&lt;td>&lt;code>finally&lt;/code>&lt;/td>
&lt;td>Class inheritance&lt;/td>
&lt;td>Exception hierarchy&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rust&lt;/td>
&lt;td>&lt;code>Result&amp;lt;T,E&amp;gt;&lt;/code>&lt;/td>
&lt;td>N/A&lt;/td>
&lt;td>Custom error types&lt;/td>
&lt;td>Result/Option types&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Example&lt;/h3>&lt;h4>Python&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Iteration&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Conditionals&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Positive&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">elif&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Negative&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Zero&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Exception Handling&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">except&lt;/span> &lt;span class="ne">ZeroDivisionError&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Cannot divide by zero&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Cleanup&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>Java&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Iteration&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// Conditionals&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Positive&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Negative&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Zero&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// Exception Handling&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">try&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ArithmeticException&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Cannot divide by zero&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">finally&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Cleanup&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>JavaScript/TypeScript&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Iteration
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Conditionals
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Positive&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Negative&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Zero&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Exception Handling
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;An error occurred&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Cleanup&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>Golang&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Iteration&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Conditionals&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Positive&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Negative&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Zero&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Error Handling&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">someFunction&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Error:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>Kotlin&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Iteration
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="m">0.&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Conditionals
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">when&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Positive&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Negative&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Zero&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Exception Handling
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">10&lt;/span> &lt;span class="p">/&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ArithmeticException&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Cannot divide by zero&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Cleanup&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>Rust&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Iteration
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">0.&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// Conditionals
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Positive&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Negative&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Zero&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// Error Handling
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">some_function&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Success: &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Err&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Error: &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">error&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Iteration vs Recursion</title><link>https://buenhyden.github.io/til/2025/01/iteration-vs-recursion/</link><pubDate>Mon, 13 Jan 2025 11:03:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/iteration-vs-recursion/</guid><description>
&lt;h2>Iteration Vs Recursion&lt;/h2>&lt;p>Iteration과 Recursion은 프로그래밍에서 반복적인 작업을 수행하는 두 가지 주요 방식이다.&lt;/p>
&lt;p>Iteration은 루프를 사용하여 특정 조건이 만족될 때까지 코드 블록을 반복 실행하는 방식이다.&lt;br>
주로 for, while 등의 루프 구조를 사용한다.&lt;br>
Iteration은 명시적인 반복 구조를 가지며, 각 반복마다 변수의 상태가 변경된다.&lt;/p>
&lt;p>Recursion은 함수가 자기 자신을 호출하여 문제를 해결하는 방식이다.&lt;br>
복잡한 문제를 더 작고 간단한 문제로 나누어 해결한다.&lt;br>
Recursion은 base case(종료 조건)와 recursive case(재귀 호출)로 구성된다.&lt;/p>
&lt;h3>Iteration Vs Recursion&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Iteration&lt;/th>
&lt;th>Recursion&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>루프를 사용한 반복 실행&lt;/td>
&lt;td>함수가 자기 자신을 호출&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>제어 구조&lt;/td>
&lt;td>루프 (for, while 등)&lt;/td>
&lt;td>함수 호출 스택&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>종료 조건&lt;/td>
&lt;td>루프 조건이 거짓이 될 때&lt;/td>
&lt;td>Base case에 도달할 때&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 사용&lt;/td>
&lt;td>일반적으로 적음&lt;/td>
&lt;td>함수 호출 스택으로 인해 많음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>속도&lt;/td>
&lt;td>대체로 빠름&lt;/td>
&lt;td>대체로 느림 (오버헤드 존재)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>코드 복잡성&lt;/td>
&lt;td>간단한 문제에 적합&lt;/td>
&lt;td>복잡한 문제 해결에 유용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>무한 반복 위험&lt;/td>
&lt;td>루프 조건 오류 시 발생&lt;/td>
&lt;td>Base case 누락 시 발생&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>문제 해결 접근&lt;/td>
&lt;td>순차적 실행&lt;/td>
&lt;td>분할 정복&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>가독성&lt;/td>
&lt;td>단순한 경우 높음&lt;/td>
&lt;td>복잡한 경우 높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>디버깅&lt;/td>
&lt;td>상대적으로 쉬움&lt;/td>
&lt;td>상대적으로 어려움&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>두 방식 모두 장단점이 있으며, 문제의 특성과 요구사항에 따라 적절한 방식을 선택해야 한다.&lt;br>
Iteration은 단순하고 반복적인 작업에 적합하며, Recursion은 복잡한 문제를 분할하여 해결하는 데 유용하다.&lt;/p>
&lt;h4>예시를 통한 비교&lt;/h4>&lt;p>피보나치 수열을 구하는 알고리즘을 통한 두 가지 방식의 구현:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">fibonacci_iterative&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 반복적 방식으로 피보나치 수열의 n번째 값을 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 이전 두 수를 저장할 변수 초기화&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># n-1번 반복하면서 다음 피보나치 수를 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prev&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">prev&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">current&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">current&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">fibonacci_recursive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 재귀적 방식으로 피보나치 수열의 n번째 값을 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 기저 조건&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 재귀 단계: f(n) = f(n-1) + f(n-2)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">fibonacci_recursive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">fibonacci_recursive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 실행 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Iterative result: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">fibonacci_iterative&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Recursive result: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">fibonacci_recursive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 5&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Multithreading Vs Multiprocessing vs Multitasking</title><link>https://buenhyden.github.io/til/2025/01/multithreading-vs-multiprocessing-vs-multitasking/</link><pubDate>Tue, 14 Jan 2025 14:39:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/multithreading-vs-multiprocessing-vs-multitasking/</guid><description>
&lt;h2>Multithreading Vs Multiprocessing Vs Multitasking&lt;/h2>&lt;p>Multithreading, Multiprocessing, Multitasking은 컴퓨터 시스템에서 동시성과 병렬성을 구현하는 세 가지 주요 개념이다.&lt;/p>
&lt;p>Multitasking은 단일 CPU에서 여러 작업(프로세스)을 동시에 실행하는 것처럼 보이게 하는 기술이다. 실제로는 CPU가 매우 빠르게 여러 작업 간을 전환하면서 실행한다.&lt;/p>
&lt;ul>
&lt;li>목적: CPU 사용률을 최대화하고 사용자에게 여러 프로그램이 동시에 실행되는 것 같은 환상을 제공한다.&lt;/li>
&lt;li>구현: 시분할(time-sharing) 방식을 사용하여 각 작업에 CPU 시간을 할당한다.&lt;/li>
&lt;/ul>
&lt;p>Multithreading은 하나의 프로세스 내에서 여러 실행 흐름(스레드)을 동시에 처리하는 기술이다.&lt;/p>
&lt;ul>
&lt;li>목적: 단일 프로세스의 성능을 향상시키고 자원을 효율적으로 사용한다.&lt;/li>
&lt;li>특징: 스레드들은 같은 프로세스 내의 메모리와 자원을 공유한다.&lt;/li>
&lt;/ul>
&lt;p>Multiprocessing은 여러 개의 프로세서(또는 코어)를 사용하여 여러 작업을 실제로 동시에 처리하는 기술이다.&lt;/p>
&lt;ul>
&lt;li>목적: 시스템의 전체적인 처리 능력을 향상시킨다.&lt;/li>
&lt;li>특징: 각 프로세서가 독립적으로 작업을 처리하며, 실제 병렬 처리가 가능하다.&lt;/li>
&lt;/ul>
&lt;p>이들의 차이점을 표로 정리하면 다음과 같습니다:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Multitasking&lt;/th>
&lt;th>Multiprocessing&lt;/th>
&lt;th>Multithreading&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>단일 CPU에서 여러 작업을 번갈아 실행&lt;/td>
&lt;td>여러 프로세서에서 여러 작업을 동시에 실행&lt;/td>
&lt;td>단일 프로세스 내에서 여러 실행 흐름을 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실행 단위&lt;/td>
&lt;td>태스크/프로세스&lt;/td>
&lt;td>프로세스&lt;/td>
&lt;td>스레드&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 공유&lt;/td>
&lt;td>각 작업이 독립적인 메모리 공간 사용&lt;/td>
&lt;td>각 프로세스가 독립적인 메모리 공간 사용&lt;/td>
&lt;td>스레드 간 메모리와 자원 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 사용&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>통신 비용&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>컨텍스트 스위칭 비용&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡도&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>안정성&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CPU 활용&lt;/td>
&lt;td>단일 CPU&lt;/td>
&lt;td>여러 CPU/코어&lt;/td>
&lt;td>단일 CPU 또는 여러 CPU&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>장점&lt;/td>
&lt;td>- 자원 격리&lt;br>- 안정성&lt;br>- 구현 용이&lt;/td>
&lt;td>- 진정한 병렬 처리&lt;br>- 높은 성능&lt;br>- 안정성&lt;/td>
&lt;td>- 자원 공유&lt;br>- 빠른 컨텍스트 스위칭&lt;br>- 효율적인 통신&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>단점&lt;/td>
&lt;td>- 높은 리소스 사용&lt;br>- 느린 통신&lt;/td>
&lt;td>- 높은 리소스 사용&lt;br>- 복잡한 구현&lt;br>- 비용 높음&lt;/td>
&lt;td>- 동기화 필요&lt;br>- 디버깅 어려움&lt;br>- 공유 자원 관리 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>적합한 사용 사례&lt;/td>
&lt;td>- 독립적인 작업 실행&lt;br>- 일반적인 데스크톱 환경&lt;/td>
&lt;td>- 대규모 데이터 처리&lt;br>- 고성능 컴퓨팅&lt;/td>
&lt;td>- GUI 애플리케이션&lt;br>- 웹 서버&lt;br>- 게임 엔진&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 기술들은 서로 배타적이지 않으며, 현대의 시스템에서는 이들을 조합하여 사용하는 것이 일반적이다.&lt;br>
예를 들어, 멀티코어 시스템에서 여러 프로세스(멀티프로세싱)가 실행되고, 각 프로세스 내에서는 여러 스레드(멀티스레딩)가 실행되며, 이 모든 것이 멀티태스킹 환경에서 동작하는 것이다.&lt;/p>
&lt;p>Multitasking은 사용자 인터페이스의 반응성을 높이는 데 유용하고, Multithreading은 단일 애플리케이션의 성능을 최적화하는 데 효과적이며, Multiprocessing은 대규모 병렬 처리가 필요한 작업에 적합하다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Nginx vs Apache HTTP Server vs Caddy</title><link>https://buenhyden.github.io/til/2025/01/nginx-vs-apache-tomcat-vs-caddy/</link><pubDate>Thu, 16 Jan 2025 11:42:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/nginx-vs-apache-tomcat-vs-caddy/</guid><description>
&lt;h2>Nginx Vs Apache HTTP Server Vs Caddy&lt;/h2>&lt;p>Nginx, Apache HTTP Server, 그리고 Caddy는 모두 웹 서버 소프트웨어입니다&lt;/p>
&lt;p>Nginx는 2004년에 출시된 고성능 웹 서버로, 비동기 이벤트 기반 아키텍처를 사용한다.&lt;br>
주로 정적 콘텐츠 제공, 리버스 프록시, 로드 밸런싱에 사용되며, 적은 리소스로도 많은 동시 연결을 처리할 수 있다.&lt;br>
C언어로 작성되었으며, 현대적인 웹 서비스에서 널리 사용된다.&lt;/p>
&lt;p>Apache HTTP Server는 1995년부터 시작된 가장 오래된 웹 서버 중 하나이다.&lt;br>
프로세스/스레드 기반의 아키텍처를 사용하며, 풍부한 모듈 시스템을 통해 다양한 기능을 확장할 수 있다.&lt;br>
안정성과 유연성이 뛰어나며, 광범위한 커뮤니티 지원을 받고 있다.&lt;/p>
&lt;p>Caddy는 2015년에 등장한 현대적인 웹 서버이다.&lt;br>
Go 언어로 작성되었으며, 자동 HTTPS 설정과 간단한 설정 파일 구조가 특징이다.&lt;br>
보안과 사용 편의성에 중점을 두고 있으며, 현대적인 웹 표준을 자동으로 지원한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특징&lt;/th>
&lt;th>Nginx&lt;/th>
&lt;th>Apache HTTP Server&lt;/th>
&lt;th>Caddy&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>아키텍처&lt;/strong>&lt;/td>
&lt;td>이벤트 기반, 비동기&lt;/td>
&lt;td>프로세스/스레드 기반&lt;/td>
&lt;td>Go 루틴 기반&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>출시 연도&lt;/strong>&lt;/td>
&lt;td>2004&lt;/td>
&lt;td>1995&lt;/td>
&lt;td>2015&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>개발 언어&lt;/strong>&lt;/td>
&lt;td>C&lt;/td>
&lt;td>C&lt;/td>
&lt;td>Go&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>성능 특성&lt;/strong>&lt;/td>
&lt;td>매우 높은 동시성, 적은 메모리 사용&lt;/td>
&lt;td>중간 수준의 동시성, 높은 메모리 사용&lt;/td>
&lt;td>높은 동시성, 효율적인 메모리 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>설정 난이도&lt;/strong>&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>매우 낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>설정 파일 형식&lt;/strong>&lt;/td>
&lt;td>계층적 텍스트&lt;/td>
&lt;td>지시어 기반 텍스트&lt;/td>
&lt;td>JSON-like 구문&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>HTTPS 지원&lt;/strong>&lt;/td>
&lt;td>수동 설정 필요&lt;/td>
&lt;td>수동 설정 필요&lt;/td>
&lt;td>자동 설정&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>모듈 시스템&lt;/strong>&lt;/td>
&lt;td>동적 모듈&lt;/td>
&lt;td>풍부한 모듈 시스템&lt;/td>
&lt;td>플러그인 시스템&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주요 장점&lt;/strong>&lt;/td>
&lt;td>높은 성능, 리버스 프록시&lt;/td>
&lt;td>안정성, 유연성&lt;/td>
&lt;td>사용 편의성, 현대적 기능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주요 단점&lt;/strong>&lt;/td>
&lt;td>복잡한 설정&lt;/td>
&lt;td>높은 리소스 사용&lt;/td>
&lt;td>상대적으로 적은 커뮤니티&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>적합한 용도&lt;/strong>&lt;/td>
&lt;td>대규모 웹사이트, CDN&lt;/td>
&lt;td>전통적인 웹 호스팅&lt;/td>
&lt;td>중소규모 현대적 웹사이트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>로드 밸런싱&lt;/strong>&lt;/td>
&lt;td>내장 기능&lt;/td>
&lt;td>모듈 필요&lt;/td>
&lt;td>기본 지원&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>정적 파일 처리&lt;/strong>&lt;/td>
&lt;td>매우 효율적&lt;/td>
&lt;td>효율적&lt;/td>
&lt;td>효율적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>동적 콘텐츠&lt;/strong>&lt;/td>
&lt;td>리버스 프록시 필요&lt;/td>
&lt;td>모듈로 직접 처리&lt;/td>
&lt;td>리버스 프록시 지원&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>보안 기능&lt;/strong>&lt;/td>
&lt;td>강력함&lt;/td>
&lt;td>강력함&lt;/td>
&lt;td>현대적이고 강력함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>커뮤니티 크기&lt;/strong>&lt;/td>
&lt;td>매우 큼&lt;/td>
&lt;td>매우 큼&lt;/td>
&lt;td>성장 중&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>문서화 수준&lt;/strong>&lt;/td>
&lt;td>광범위함&lt;/td>
&lt;td>매우 광범위함&lt;/td>
&lt;td>명확하고 현대적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>클라우드 지원&lt;/strong>&lt;/td>
&lt;td>우수함&lt;/td>
&lt;td>좋음&lt;/td>
&lt;td>우수함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>컨테이너화&lt;/strong>&lt;/td>
&lt;td>매우 적합&lt;/td>
&lt;td>적합&lt;/td>
&lt;td>매우 적합&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Kafka vs RabbitMQ</title><link>https://buenhyden.github.io/til/2025/01/kafka-vs-rabbitmq/</link><pubDate>Thu, 16 Jan 2025 11:41:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/kafka-vs-rabbitmq/</guid><description>
&lt;h2>Kafka Vs RabbitMQ&lt;/h2>&lt;p>Kafka와 RabbitMQ는 모두 메시지 브로커 시스템으로, 분산 시스템에서 데이터를 효율적으로 전송하고 처리하는 역할을 한다.&lt;/p>
&lt;p>Apache Kafka:&lt;/p>
&lt;ul>
&lt;li>분산 스트리밍 플랫폼&lt;/li>
&lt;li>대용량 실시간 데이터 처리에 최적화&lt;/li>
&lt;li>높은 처리량과 확장성 제공&lt;/li>
&lt;li>데이터 스트림의 발행/구독, 저장, 처리 기능 제공&lt;/li>
&lt;/ul>
&lt;p>RabbitMQ:&lt;/p>
&lt;ul>
&lt;li>메시지 지향 미들웨어&lt;/li>
&lt;li>AMQP(Advanced Message Queuing Protocol) 구현&lt;/li>
&lt;li>다양한 메시징 패턴 지원&lt;/li>
&lt;li>신뢰성 있는 메시지 전달과 라우팅 기능 제공&lt;/li>
&lt;/ul>
&lt;h3>Kafka Vs RabbitMQ 비교 분석&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Apache Kafka&lt;/th>
&lt;th>RabbitMQ&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>아키텍처&lt;/td>
&lt;td>분산 로그&lt;/td>
&lt;td>메시지 브로커&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 용도&lt;/td>
&lt;td>대용량 실시간 데이터 스트리밍&lt;/td>
&lt;td>일반적인 메시징 시나리오&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>성능&lt;/td>
&lt;td>매우 높은 처리량&lt;/td>
&lt;td>중간 수준의 처리량&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메시지 순서&lt;/td>
&lt;td>파티션 내에서 보장&lt;/td>
&lt;td>FIFO 큐로 보장&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메시지 보존&lt;/td>
&lt;td>장기간 보존 가능&lt;/td>
&lt;td>일반적으로 단기 보존&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>수평적 확장 용이&lt;/td>
&lt;td>클러스터링 지원&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로토콜&lt;/td>
&lt;td>자체 프로토콜&lt;/td>
&lt;td>AMQP, MQTT 등 다양한 프로토콜 지원&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>라우팅 복잡성&lt;/td>
&lt;td>상대적으로 단순&lt;/td>
&lt;td>복잡한 라우팅 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>클라이언트 지원&lt;/td>
&lt;td>제한적&lt;/td>
&lt;td>다양한 언어 지원&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>관리 용이성&lt;/td>
&lt;td>상대적으로 복잡&lt;/td>
&lt;td>사용자 친화적 관리 도구&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Kafka 선택이 좋은 경우:
&lt;ul>
&lt;li>대용량 데이터 처리가 필요할 때&lt;/li>
&lt;li>실시간 스트림 처리가 중요할 때&lt;/li>
&lt;li>높은 처리량이 요구될 때&lt;/li>
&lt;li>장기간의 데이터 보존이 필요할 때&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>RabbitMQ 선택이 좋은 경우:
&lt;ul>
&lt;li>복잡한 라우팅이 필요할 때&lt;/li>
&lt;li>전통적인 메시징 패턴을 사용할 때&lt;/li>
&lt;li>낮은 지연시간이 중요할 때&lt;/li>
&lt;li>관리의 용이성이 중요할 때&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Event-Driven Architecture vs Event Sourcing Pattern vs Publisher-Subscriber Pattern vs Producer-Consumer Pattern</title><link>https://buenhyden.github.io/til/2025/01/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</link><pubDate>Thu, 16 Jan 2025 03:37:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</guid><description>
&lt;h2>Event-Driven Architecture Vs Event Sourcing Pattern Vs Publisher-Subscriber Pattern Vs Producer-Consumer Pattern&lt;/h2>&lt;p>Event Sourcing Pattern, Publisher-Subscriber Pattern, Event-Driven Architecture, Producer-Consumer Pattern은 모두 소프트웨어 아키텍처에서 중요한 역할을 하는 패턴들이며, 서로 밀접한 관계를 가지고 있다.&lt;br>
이들의 관계를 다음과 같이 설명할 수 있다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Event-Driven Architecture (EDA)와 다른 패턴들의 관계:&lt;/p>
&lt;ul>
&lt;li>EDA는 이벤트 중심의 시스템 설계를 위한 상위 수준의 아키텍처 스타일.&lt;/li>
&lt;li>Publisher-Subscriber Pattern과 Producer-Consumer Pattern은 EDA를 구현하는 데 사용되는 구체적인 통신 모델이다.&lt;/li>
&lt;li>Event Sourcing Pattern은 EDA의 한 구현 방식으로 볼 수 있으며, 이벤트를 저장하고 관리하는 방법을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Publisher-Subscriber Pattern과 Producer-Consumer Pattern의 관계:&lt;/p>
&lt;ul>
&lt;li>두 패턴 모두 비동기 메시징을 위한 디자인 패턴이지만, 약간의 차이가 있다.&lt;/li>
&lt;li>Publisher-Subscriber Pattern은 메시지를 특정 주제(topic)에 발행하고, 해당 주제를 구독하는 모든 구독자에게 메시지를 전달한다.&lt;/li>
&lt;li>Producer-Consumer Pattern은 일반적으로 메시지를 큐에 넣고, 하나의 소비자가 메시지를 처리한다.&lt;/li>
&lt;li>Publisher-Subscriber Pattern은 Producer-Consumer Pattern의 확장된 형태로 볼 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Event Sourcing Pattern과 다른 패턴들의 관계:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Event Sourcing은 시스템의 상태 변화를 이벤트로 저장하는 방식.&lt;/li>
&lt;li>이 패턴은 Publisher-Subscriber 또는 Producer-Consumer 패턴을 활용하여 이벤트를 발행하고 구독할 수 있다.&lt;/li>
&lt;li>Event Sourcing은 EDA의 핵심 구성 요소 중 하나로, 이벤트의 저장과 재생을 통해 시스템의 상태를 관리한다.&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>통합적 관점:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>EDA는 이러한 패턴들을 포괄하는 상위 개념으로, 시스템 전체의 이벤트 중심 설계를 지향한다.&lt;/li>
&lt;li>Publisher-Subscriber와 Producer-Consumer 패턴은 EDA 내에서 이벤트의 생성과 소비를 관리하는 메커니즘을 제공한다.&lt;/li>
&lt;li>Event Sourcing은 이벤트의 지속성과 시스템 상태 관리를 담당하며, EDA의 이벤트 처리 방식을 보완한다.&lt;/li>
&lt;/ul>
&lt;p>이러한 패턴들은 서로 보완적인 관계를 가지며, 복잡한 분산 시스템에서 함께 사용되어 시너지 효과를 낼 수 있다.&lt;br>
예를 들어, Event Sourcing을 통해 저장된 이벤트는 Publisher-Subscriber 패턴을 통해 다른 서비스에 전파될 수 있으며, 이는 전체적인 Event-Driven Architecture의 일부로 작동할 수 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Event-Driven Architecture&lt;/th>
&lt;th>Event Sourcing Pattern&lt;/th>
&lt;th>Publisher-Subscriber Pattern&lt;/th>
&lt;th>Producer-Consumer Pattern&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>주요 목적&lt;/td>
&lt;td>이벤트 중심의 시스템 설계&lt;/td>
&lt;td>모든 상태 변경을 이벤트로 저장하고 재구성&lt;/td>
&lt;td>메시지 발행자와 구독자 간 느슨한 결합 제공&lt;/td>
&lt;td>데이터 생성과 소비 작업 분리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>핵심 구성 요소&lt;/td>
&lt;td>이벤트 생성자, 이벤트 채널, 이벤트 처리자&lt;/td>
&lt;td>이벤트 스토어, 이벤트 생성자, 이벤트 소비자&lt;/td>
&lt;td>발행자, 구독자, 메시지 브로커&lt;/td>
&lt;td>프로듀서, 컨슈머, 공유 버퍼(큐)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 흐름&lt;/td>
&lt;td>이벤트 발생 → 채널 → 처리&lt;/td>
&lt;td>이벤트 생성 → 저장 → 재생&lt;/td>
&lt;td>메시지 발행 → 브로커 → 구독자 전달&lt;/td>
&lt;td>데이터 생성 → 버퍼 저장 → 소비&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 사용 사례&lt;/td>
&lt;td>마이크로서비스, IoT, 실시간 분석&lt;/td>
&lt;td>감사, 규정 준수, 복잡한 도메인 모델링&lt;/td>
&lt;td>실시간 알림, 데이터 동기화&lt;/td>
&lt;td>작업 큐, 로그 처리, 스트리밍 데이터&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>장점&lt;/td>
&lt;td>높은 확장성, 반응성&lt;/td>
&lt;td>완전한 감사 추적, 시간 기반 쿼리&lt;/td>
&lt;td>느슨한 결합, 실시간 데이터 처리&lt;/td>
&lt;td>비동기 처리, 부하 분산&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>단점&lt;/td>
&lt;td>시스템 복잡도 증가, 일관성 유지 어려움&lt;/td>
&lt;td>구현 복잡성, 스키마 변경 어려움&lt;/td>
&lt;td>메시지 순서 보장 어려움, 복잡한 디버깅&lt;/td>
&lt;td>버퍼 관리 복잡성, 메모리 사용량 증가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>전체 시스템 확장성 제공&lt;/td>
&lt;td>이벤트 저장소 확장성에 의존&lt;/td>
&lt;td>메시지 브로커 확장성에 의존&lt;/td>
&lt;td>프로듀서와 컨슈머 독립 확장 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 저장&lt;/td>
&lt;td>패턴에 따라 다름&lt;/td>
&lt;td>모든 이벤트 영구 저장&lt;/td>
&lt;td>일시적 저장 또는 즉시 처리&lt;/td>
&lt;td>일시적 버퍼 저장&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>복잡성 수준&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>중간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>상태 관리&lt;/td>
&lt;td>이벤트 기반 상태 변경&lt;/td>
&lt;td>이벤트 기반 상태 재구성&lt;/td>
&lt;td>현재 상태 중심&lt;/td>
&lt;td>현재 상태 중심&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Publisher-Subscriber Pattern Vs Producer-Consumer Pattern&lt;/h3>&lt;p>Producer-Consumer Pattern과 Publisher-Subscriber Pattern은 비동기 통신을 위한 소프트웨어 아키텍처 패턴이지만, 몇 가지 중요한 차이점이 있다:&lt;/p>
&lt;p>Producer-Consumer Pattern과 Publisher-Subscriber Pattern의 주요 차이점을 다음 표로 정리했습니다:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Producer-Consumer Pattern&lt;/th>
&lt;th>Publisher-Subscriber Pattern&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>통신 방식&lt;/td>
&lt;td>일대일 또는 일대다&lt;/td>
&lt;td>일대다&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메시지 처리&lt;/td>
&lt;td>각 메시지는 단일 소비자에 의해 처리&lt;/td>
&lt;td>하나의 메시지가 여러 구독자에 의해 동시에 처리 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결합도&lt;/td>
&lt;td>생산자와 소비자 간의 결합도가 상대적으로 높음&lt;/td>
&lt;td>발행자와 구독자 간의 결합도가 낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메시지 분배&lt;/td>
&lt;td>작업 큐를 통해 메시지 분배&lt;/td>
&lt;td>토픽/채널을 통해 메시지 분배&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>소비자 추가로 처리량 증가, 각 메시지는 하나의 소비자만 처리&lt;/td>
&lt;td>새로운 구독자를 쉽게 추가 가능, 모든 구독자가 메시지를 받을 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용 사례&lt;/td>
&lt;td>작업 큐, 부하 분산, 비동기 처리&lt;/td>
&lt;td>이벤트 기반 아키텍처, 실시간 업데이트, 다중 수신자에게 메시지 브로드캐스팅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메시지 보존&lt;/td>
&lt;td>일반적으로 처리 후 메시지 삭제&lt;/td>
&lt;td>메시지 브로커에 따라 메시지 보존 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡성&lt;/td>
&lt;td>상대적으로 단순&lt;/td>
&lt;td>메시지 필터링, 라우팅 등으로 인해 더 복잡할 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>동기화&lt;/td>
&lt;td>생산자와 소비자 간 동기화 필요&lt;/td>
&lt;td>발행자와 구독자 간 동기화 불필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>백프레셔 관리&lt;/td>
&lt;td>큐 크기 제한으로 백프레셔 관리 가능&lt;/td>
&lt;td>메시지 브로커를 통한 백프레셔 관리&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>