<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>16 on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/til/2025/01/16/</link>
    <description>Recent content in 16 on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 16 Jan 2025 11:42:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/til/2025/01/16/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nginx vs Apache HTTP Server vs Caddy</title>
      <link>https://buenhyden.github.io/til/2025/01/16/nginx-vs-apache-tomcat-vs-caddy/</link>
      <pubDate>Thu, 16 Jan 2025 11:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2025/01/16/nginx-vs-apache-tomcat-vs-caddy/</guid>
      <description>Nginx, Apache HTTP Server, 그리고 Caddy는 모두 웹 서버 소프트웨어이다.</description>
    </item>
    <item>
      <title>Kafka vs RabbitMQ</title>
      <link>https://buenhyden.github.io/til/2025/01/16/kafka-vs-rabbitmq/</link>
      <pubDate>Thu, 16 Jan 2025 11:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2025/01/16/kafka-vs-rabbitmq/</guid>
      <description>Kafka와 RabbitMQ는 모두 메시지 브로커 시스템으로, 분산 시스템에서 데이터를 효율적으로 전송하고 처리하는 역할을 한다.</description>
    </item>
    <item>
      <title>Paging vs Segmentation</title>
      <link>https://buenhyden.github.io/til/2025/01/16/paging-vs-segmentation/</link>
      <pubDate>Thu, 16 Jan 2025 08:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2025/01/16/paging-vs-segmentation/</guid>
      <description>Paging과 Segmentation은 운영체제의 메모리 관리 기법이다.</description>
    </item>
    <item>
      <title>Event-Driven Architecture vs Event Sourcing Pattern vs Publisher-Subscriber Pattern vs Producer-Consumer Pattern</title>
      <link>https://buenhyden.github.io/til/2025/01/16/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</link>
      <pubDate>Thu, 16 Jan 2025 03:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2025/01/16/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</guid>
      <description>EDA는 이벤트 중심의 시스템 설계를 위한 상위 수준의 아키텍처 스타일이며, Publisher-Subscriber Pattern과 Producer-Consumer Pattern은 EDA를 구현하는 데 사용되는 구체적인 통신 모델이다. 그리고 Event Sourcing Pattern은 EDA의 한 구현 방식으로 볼 수 있으며, 이벤트를 저장하고 관리하는 방법을 제공한다.</description>
    </item>
  </channel>
</rss>
