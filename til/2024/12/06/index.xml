<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>06 on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/til/2024/12/06/</link>
    <description>Recent content in 06 on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.143.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 06 Dec 2024 18:02:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/til/2024/12/06/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ahead-of-Time Compiler</title>
      <link>https://buenhyden.github.io/til/2024/12/06/ahead-of-time-compiler/</link>
      <pubDate>Fri, 06 Dec 2024 18:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/12/06/ahead-of-time-compiler/</guid>
      <description>&lt;h2 id=&#34;ahead-of-time-aot-compiler&#34;&gt;Ahead-of-Time (AOT) Compiler&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Ahead-of-Time(AOT) 컴파일러&lt;/strong&gt;는 프로그램 실행 전에 소스 코드나 중간 언어(예: 바이트코드)를 &lt;strong&gt;네이티브 머신 코드로 미리 변환&lt;/strong&gt;하는 기술이다. JIT(Just-In-Time) 컴파일러와 대비되며, 실행 시점의 오버헤드를 줄이고 성능을 최적화하는 데 중점을 둔다.&lt;/p&gt;
&lt;p&gt;AOT 컴파일은 &lt;strong&gt;시작 속도&lt;/strong&gt;와 &lt;strong&gt;리소스 효율성&lt;/strong&gt;이 중요한 환경에서 필수적이다.&lt;br&gt;
JIT 대비 &lt;strong&gt;안정성&lt;/strong&gt;과 &lt;strong&gt;보안&lt;/strong&gt; 측면에서 우수하나, 동적 최적화에는 한계가 있다.&lt;br&gt;
클라우드, 모바일, 임베디드 분야에서 점차 확산되는 추세이며, GraalVM,.NET AOT, Angular와 같은 프레임워크에서 적극 도입되고 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;img alt=&#34;Ahead-of-Time (AOT) Compiler&#34; loading=&#34;lazy&#34; src=&#34;https://buenhyden.github.io/img/Ahead-of-Time-AOT-Compilation-1-1536x793.jpg.webp&#34;&gt;&lt;figcaption&gt;https://www.monarch-innovation.com/aot-vs-jit-compiler-in-angular&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;주요-특징&#34;&gt;주요 특징&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;사전 컴파일:&lt;/strong&gt; 프로그램의 소스 코드를 빌드 시점에 기계어로 변환하여 실행 파일을 생성한다. 이를 통해 실행 시점에 추가적인 컴파일 작업이 필요 없으며, 프로그램의 시작 시간을 단축시킨다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;일관된 성능:&lt;/strong&gt; 실행 전에 모든 컴파일 작업이 완료되므로, 프로그램 실행 중에 발생할 수 있는 성능 변동이 최소화된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;보안 강화:&lt;/strong&gt; 소스 코드가 미리 컴파일되어 배포되므로, 코드 노출 위험이 감소하고 역공학에 대한 저항력이 높아진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aot-컴파일의-핵심-원리&#34;&gt;AOT 컴파일의 핵심 원리&lt;/h3&gt;
&lt;h4 id=&#34;동작-단계&#34;&gt;&lt;strong&gt;동작 단계&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;소스 코드 컴파일&lt;/strong&gt;:&lt;br&gt;
고수준 언어(Java, C#)나 중간 언어(바이트코드)를 타겟 플랫폼의 기계어로 변환한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;최적화&lt;/strong&gt;:&lt;br&gt;
정적 분석을 통해 코드 병합, 불필요한 코드 제거, 인라인화 등의 최적화를 수행한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;네이티브 코드 생성&lt;/strong&gt;:&lt;br&gt;
실행 파일 또는 라이브러리 형태로 저장되며, 런타임에 추가 컴파일 없이 직접 실행된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-1&#34;&gt;1&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-2&#34;&gt;2&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-3&#34;&gt;3&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-4&#34;&gt;4&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-5&#34;&gt;5&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-6&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-6&#34;&gt;6&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-7&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-7&#34;&gt;7&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-8&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-8&#34;&gt;8&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Spring Boot AOT 예시: 네이티브 이미지 생성&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@SpringBootApplication&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DemoApplication&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SpringApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DemoApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// AOT 컴파일 후 네이티브 실행 파일 생성[9]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;aot-컴파일의-장점&#34;&gt;AOT 컴파일의 장점&lt;/h3&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;빠른 시작 시간&lt;/strong&gt;:&lt;br&gt;
네이티브 코드를 미리 생성하므로 JIT의 웜업 단계 없이 즉시 실행된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예측 가능한 성능&lt;/strong&gt;:&lt;br&gt;
런타임 컴파일 오버헤드가 없어 응답 시간이 일관된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;메모리 효율성&lt;/strong&gt;:&lt;br&gt;
JIT에 필요한 코드 캐시나 프로파일링 데이터가 없어 리소스 사용이 적다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;보안 강화&lt;/strong&gt;:&lt;br&gt;
네이티브 코드는 리버스 엔지니어링이 어려우며, 런타임 코드 주입 위험이 감소한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;예시: 모바일 앱 배포&lt;/strong&gt;&lt;br&gt;
Android의 ART 런타임은 설치 시 AOT 컴파일을 사용해 앱 실행 속도를 향상시킨다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JIT Compiler vs AOT Compiler</title>
      <link>https://buenhyden.github.io/til/2024/12/06/jit-compiler-vs-aot-compiler/</link>
      <pubDate>Fri, 06 Dec 2024 18:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/12/06/jit-compiler-vs-aot-compiler/</guid>
      <description>&lt;h2 id=&#34;jit-compiler-vs-aot-compiler&#34;&gt;JIT Compiler Vs AOT Compiler&lt;/h2&gt;
&lt;p&gt;JIT(Just-In-Time) 컴파일러와 AOT(Ahead-of-Time) 컴파일러는 프로그램 실행 방식에서 근본적인 차이를 보인다.&lt;/p&gt;
&lt;h3 id=&#34;jit-컴파일러&#34;&gt;JIT 컴파일러&lt;/h3&gt;
&lt;h4 id=&#34;정의-및-동작-방식&#34;&gt;&lt;strong&gt;정의 및 동작 방식&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;실시간 컴파일&lt;/strong&gt;: 프로그램 실행 중 자주 사용되는 코드(Hotspot)를 기계어로 변환하고 캐싱.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;동적 최적화&lt;/strong&gt;: 런타임 데이터(예: 메서드 호출 빈도)를 활용해 최적화 수행.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;적용 예시&lt;/strong&gt;: Java(JVM), JavaScript(V8),.NET(CLR).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;장단점&#34;&gt;장단점&lt;/h4&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;장점&lt;/th&gt;
          &lt;th&gt;단점&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;- 동적 환경에 유연한 최적화&lt;br&gt;- 플랫폼 독립성 유지&lt;/td&gt;
          &lt;td&gt;- 초기 실행 지연(Warm-up)&lt;br&gt;- 메모리 소비 증가(캐시 저장)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;aot-컴파일러&#34;&gt;AOT 컴파일러&lt;/h3&gt;
&lt;h4 id=&#34;정의-및-동작-방식-1&#34;&gt;&lt;strong&gt;정의 및 동작 방식&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;사전 컴파일&lt;/strong&gt;: 실행 전 전체 코드를 네이티브 기계어로 변환.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;정적 최적화&lt;/strong&gt;: 컴파일 시점에 가능한 최적화만 적용.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;적용 예시&lt;/strong&gt;: C/C++, Flutter(AOT 모드), Android ART.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;장단점-1&#34;&gt;장단점&lt;/h4&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;장점&lt;/th&gt;
          &lt;th&gt;단점&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;- 즉각적인 실행 속도&lt;br&gt;- 리소스 효율성&lt;/td&gt;
          &lt;td&gt;- 런타임 최적화 불가&lt;br&gt;- 플랫폼 의존성&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;jit-vs-aot-비교표&#34;&gt;JIT Vs AOT 비교표&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;기준&lt;/th&gt;
          &lt;th&gt;JIT 컴파일러&lt;/th&gt;
          &lt;th&gt;AOT 컴파일러&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;컴파일 시점&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;런타임 중 실시간 변환&lt;/td&gt;
          &lt;td&gt;실행 전 미리 변환&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;시작 속도&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;초기 느림 → 반복 실행 시 개선&lt;/td&gt;
          &lt;td&gt;즉시 빠름&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;메모리 사용&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;높음 (캐시/프로파일링 데이터 유지)&lt;/td&gt;
          &lt;td&gt;낮음 (컴파일된 코드만 로드)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;최적화&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;런타임 데이터 기반 적응형&lt;/td&gt;
          &lt;td&gt;정적 분석 기반&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;플랫폼 호환성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;플랫폼 독립적 (바이트코드 사용)&lt;/td&gt;
          &lt;td&gt;타겟 플랫폼에 종속적&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;사용 사례&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;웹 앱(JavaScript), 서버(Java)&lt;/td&gt;
          &lt;td&gt;모바일 앱(Flutter), 임베디드 시스템&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;결론&#34;&gt;결론&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JIT 우선 사용&lt;/strong&gt;: 동적 최적화가 필요한 서버 애플리케이션, 크로스 플랫폼 지원 필요 시.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AOT 우선 사용&lt;/strong&gt;: 빠른 시작 시간이 중요한 모바일 앱, 리소스 제약 환경.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;하이브리드 접근&lt;/strong&gt;: Android ART처럼 설치 시 AOT, 업데이트 시 JIT을 혼용.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Just-In-Time (JIT) Compiler</title>
      <link>https://buenhyden.github.io/til/2024/12/06/just-in-time-compiler/</link>
      <pubDate>Fri, 06 Dec 2024 17:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/12/06/just-in-time-compiler/</guid>
      <description>&lt;h2 id=&#34;just-in-time-jit-compiler&#34;&gt;Just-In-Time (JIT) Compiler&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;JIT(Just-In-Time) 컴파일&lt;/strong&gt;은 프로그램 실행 시점에 코드를 기계어로 변환하는 기술로, &lt;strong&gt;인터프리터의 유연성&lt;/strong&gt;과 &lt;strong&gt;컴파일러의 성능&lt;/strong&gt;을 결합한 혁신적인 방식이다.&lt;br&gt;
주로 자바(JVM), 자바스크립트(V8), 닷넷(CLR) 등에서 사용되며, 런타임 최적화를 통해 애플리케이션 성능을 크게 향상시킨다.&lt;/p&gt;
&lt;p&gt;JIT 컴파일은 &lt;strong&gt;런타임 유연성&lt;/strong&gt;과 &lt;strong&gt;성능&lt;/strong&gt; 사이의 균형을 찾은 기술이다.&lt;br&gt;
모던 프로그래밍 언어와 프레임워크에서 필수적인 요소로 자리잡았으며, 클라우드 네이티브 환경과 실시간 애플리케이션에서 더욱 중요해질 전망이다.&lt;br&gt;
개발자는 대상 시스템의 요구사항에 따라 JIT과 AOT를 전략적으로 조합해 사용해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;img alt=&#34;Just-In-Time (JIT) Compiler&#34; loading=&#34;lazy&#34; src=&#34;https://buenhyden.github.io/img/Working-of-JIT-Compiler1.png&#34;&gt;&lt;figcaption&gt;https://www.geeksforgeeks.org/what-is-just-in-time-jit-compiler-in-dot-net/&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ECMAScript</title>
      <link>https://buenhyden.github.io/til/2024/12/06/ecmascript/</link>
      <pubDate>Fri, 06 Dec 2024 17:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/12/06/ecmascript/</guid>
      <description>ECMAScript는 자바스크립트의 표준 규격으로, **Ecma International**이 ECMA-262 기술 규격을 통해 정의한 스크립트 프로그래밍 언어이다.</description>
    </item>
  </channel>
</rss>
