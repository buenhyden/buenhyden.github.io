<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>24 on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/til/2024/09/24/</link>
    <description>Recent content in 24 on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.143.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 24 Sep 2024 05:52:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/til/2024/09/24/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mediator Pattern vs Observer Pattern</title>
      <link>https://buenhyden.github.io/til/2024/09/24/mediator-pattern-vs-observer-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/24/mediator-pattern-vs-observer-pattern/</guid>
      <description>&lt;h2 id=&#34;mediator-pattern-vs-observer-pattern&#34;&gt;Mediator Pattern Vs Observer Pattern&lt;/h2&gt;
&lt;p&gt;Mediator 패턴과 Observer 패턴은 객체 간 통신을 관리하는 디자인 패턴이지만, 그 접근 방식과 용도에 차이가 있다.&lt;/p&gt;
&lt;p&gt;Mediator 패턴:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체 간의 복잡한 상호작용을 캡슐화하여 중재자 객체를 통해 간접적으로 통신하게 하는 패턴&lt;/li&gt;
&lt;li&gt;객체 간 결합도를 낮추고 상호작용을 중앙 집중화함&lt;/li&gt;
&lt;li&gt;복잡한 다대다 관계를 단순화하는 데 유용&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Observer 패턴:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체의 상태 변화를 관찰하는 관찰자들에게 자동으로 알리는 패턴&lt;/li&gt;
&lt;li&gt;주체 객체와 다수의 관찰자 객체 간의 일대다 관계를 정의함&lt;/li&gt;
&lt;li&gt;상태 변경에 대한 효율적인 알림 메커니즘을 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mediator 패턴은 객체 간 복잡한 상호작용을 중재자를 통해 관리하여 &lt;strong&gt;객체 간의 결합도를 줄이고 상호작용 로직을 집중&lt;/strong&gt;시키는 데 적합하다.
Observer 패턴은 상태 변화에 따른 &lt;strong&gt;자동 알림 및 실시간 동기화&lt;/strong&gt;를 구현할 때 적합하며, &lt;strong&gt;이벤트 기반 시스템&lt;/strong&gt;에 자주 사용된다.
두 패턴 모두 객체 간의 결합도를 낮추는 데 기여하지만, &lt;strong&gt;Mediator&lt;/strong&gt;는 상호작용을 캡슐화하고 &lt;strong&gt;Observer&lt;/strong&gt;는 상태 변경에 반응하는 방식으로 목적과 활용 분야가 다르다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>프로그램 설계 방법론</title>
      <link>https://buenhyden.github.io/til/2024/09/24/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%84%A4%EA%B3%84-%EB%B0%A9%EB%B2%95%EB%A1%A0/</link>
      <pubDate>Tue, 24 Sep 2024 05:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/24/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%84%A4%EA%B3%84-%EB%B0%A9%EB%B2%95%EB%A1%A0/</guid>
      <description>소프트웨어 개발 과정에서 시스템을 구조화하고 모듈화하는 체계적인 접근 방식</description>
    </item>
  </channel>
</rss>
