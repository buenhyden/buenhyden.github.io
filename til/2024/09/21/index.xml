<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>21 on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/til/2024/09/21/</link>
    <description>Recent content in 21 on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 21 Sep 2024 15:45:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/til/2024/09/21/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Von Neumann Architecture vs Harvard Architecture</title>
      <link>https://buenhyden.github.io/til/2024/09/21/von-neumann-architecture-vs-harvard-architecture/</link>
      <pubDate>Sat, 21 Sep 2024 05:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/21/von-neumann-architecture-vs-harvard-architecture/</guid>
      <description>하버드 아키텍처(Harvard Architecture)와 폰 노이만 아키텍처(von Neumann Architecture)는 컴퓨터 시스템의 메모리 구조를 정의하는 두 가지 대표적인 설계 방식이다.</description>
    </item>
    <item>
      <title>Software Architecture pattern vs Software Design Pattern</title>
      <link>https://buenhyden.github.io/til/2024/09/21/software-architecture-pattern-vs-software-design-pattern/</link>
      <pubDate>Sat, 21 Sep 2024 08:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/21/software-architecture-pattern-vs-software-design-pattern/</guid>
      <description>Software Architecture Pattern과 Software Design Pattern은 소프트웨어 개발에서 반복적으로 발생하는 문제들에 대한 검증된 해결책을 제공하는 개념이다. 이 두 패턴은 서로 다른 수준의 추상화와 범위를 다루고 있다.</description>
    </item>
    <item>
      <title>마이그레이션 (Migration)</title>
      <link>https://buenhyden.github.io/til/2024/09/21/migration/</link>
      <pubDate>Sat, 21 Sep 2024 15:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/21/migration/</guid>
      <description>IT 분야에서 데이터, 시스템, 애플리케이션 등을 한 환경에서 다른 환경으로 이동하는 과정</description>
    </item>
    <item>
      <title>Behavioral Design Patterns vs Creational Design Patterns vs Structural Design Patterns</title>
      <link>https://buenhyden.github.io/til/2024/09/21/behavioral-design-patterns-vs-creational-design-patterns-vs-structural-design-patterns/</link>
      <pubDate>Sat, 21 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/21/behavioral-design-patterns-vs-creational-design-patterns-vs-structural-design-patterns/</guid>
      <description>소프트웨어 설계에서 자주 발생하는 문제들을 해결하기 위한 일반화된 솔루션을 제공하는 디자인 패턴의 세 가지 주요 카테고리</description>
    </item>
    <item>
      <title>Cache Strategy vs Cache Policy</title>
      <link>https://buenhyden.github.io/til/2024/09/21/cache-strategy-vs-cache-policy/</link>
      <pubDate>Sat, 21 Sep 2024 15:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/21/cache-strategy-vs-cache-policy/</guid>
      <description>&lt;h2 id=&#34;cache-strategy-vs-cache-policy&#34;&gt;Cache Strategy vs Cache Policy&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Version Control</title>
      <link>https://buenhyden.github.io/til/2024/09/21/version-control/</link>
      <pubDate>Sat, 21 Sep 2024 15:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/21/version-control/</guid>
      <description>동일한 정보에 대한 여러 버전을 관리하는 것</description>
    </item>
    <item>
      <title>프로그램 설계 방법론</title>
      <link>https://buenhyden.github.io/til/2024/09/21/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%84%A4%EA%B3%84-%EB%B0%A9%EB%B2%95%EB%A1%A0/</link>
      <pubDate>Sat, 21 Sep 2024 05:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/21/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%84%A4%EA%B3%84-%EB%B0%A9%EB%B2%95%EB%A1%A0/</guid>
      <description>소프트웨어 개발 과정에서 시스템을 구조화하고 모듈화하는 체계적인 접근 방식</description>
    </item>
    <item>
      <title>클린 코드 (Clean Code)</title>
      <link>https://buenhyden.github.io/til/2024/09/21/clean-code/</link>
      <pubDate>Sat, 21 Sep 2024 05:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/21/clean-code/</guid>
      <description>프로그램의 동작을 보장하면서도 가독성이 뛰어나고 유지보수가 쉬운 코드</description>
    </item>
    <item>
      <title>Secure Coding</title>
      <link>https://buenhyden.github.io/til/2024/09/21/secure-coding/</link>
      <pubDate>Sat, 21 Sep 2024 01:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/21/secure-coding/</guid>
      <description>Secure Coding은 소프트웨어 개발 과정에서 보안 취약점을 최소화하고 안전한 소프트웨어를 만들기 위한 코딩 기법이다.</description>
    </item>
  </channel>
</rss>
