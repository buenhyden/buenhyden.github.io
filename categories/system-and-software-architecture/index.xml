<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>System and Software Architecture on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/system-and-software-architecture/</link>
    <description>Recent content in System and Software Architecture on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.8</generator>
    <language>en</language>
    <lastBuildDate>Thu, 29 May 2025 03:25:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/system-and-software-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Principles</title>
      <link>https://buenhyden.github.io/posts/software-engineering/requirements-and-design/architecture-and-system-design/principles/</link>
      <pubDate>Tue, 27 May 2025 07:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/requirements-and-design/architecture-and-system-design/principles/</guid>
      <description>시스템 아키텍처와 소프트웨어 아키텍처 원칙들은 견고하고 유지보수 가능하며 확장 가능한 소프트웨어 시스템을 설계하기 위한 핵심 지침들로, SOLID 원칙, 관심사의 분리, 의존성 역전 등의 기본 원칙을 바탕으로 계층화 아키텍처, 클린 아키텍처, 마이크로서비스 아키텍처 등 다양한 패턴을 통해 복잡한 시스템의 설계와 구현을 체계적으로 지원한다.</description>
    </item>
    <item>
      <title>Architecture Principles</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-principles/</link>
      <pubDate>Sat, 21 Dec 2024 05:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-principles/</guid>
      <description>아키텍처 원칙은 소프트웨어 시스템의 품질, 지속 가능성, 적응성을 보장하기 위한 근본적인 지침과 규칙의 집합으로, SOLID, DRY, KISS와 같은 설계 원칙부터 클라우드 네이티브, 마이크로서비스 원칙까지 다양한 측면을 포괄한다. 이러한 원칙들은 비즈니스 목표와 기술적 제약 사이의 균형을 맞추며, 일관된 설계 결정과 효과적인 커뮤니케이션을 통해 복잡한 시스템의 성공적인 구현과 진화를 가능하게 한다.</description>
    </item>
    <item>
      <title>Clean Code</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-principles/clean-code/</link>
      <pubDate>Thu, 19 Sep 2024 05:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-principles/clean-code/</guid>
      <description>클린 코드는 읽기 쉽고, 이해와 유지보수가 용이한 코드를 작성하는 원칙과 기법을 의미한다. 명확한 네이밍, 단순화, 일관성, 중복 최소화, 테스트 가능성 등 다양한 원칙을 통해 소프트웨어 품질과 개발 생산성을 높이며, 협업과 장기적인 유지보수에 큰 이점을 제공한다.</description>
    </item>
    <item>
      <title>보안 코딩 (Secure Coding)</title>
      <link>https://buenhyden.github.io/posts/cybersecurity-and-information-security/web-and-application-security/secure-coding/</link>
      <pubDate>Thu, 19 Sep 2024 01:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/cybersecurity-and-information-security/web-and-application-security/secure-coding/</guid>
      <description>Secure Coding은 소프트웨어 개발 과정에서 보안 취약점을 최소화하고 안전한 소프트웨어를 만들기 위한 코딩 기법이다.</description>
    </item>
    <item>
      <title>Modeling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/modeling-and-documentation/</link>
      <pubDate>Sun, 25 May 2025 09:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/modeling-and-documentation/</guid>
      <description>&amp;#34;Principles and Modeling&amp;#34; 은 소프트웨어 시스템의 설계와 구축을 위한 근본적인 원칙들과 이를 시각적으로 표현하고 분석하는 모델링 기법들을 통합한 분야이다. 원칙은 설계와 구현의 방향성을 제시하며, 모델링은 복잡한 시스템을 시각적으로 구조화해 이해와 의사소통, 검증, 최적화를 가능하게 한다. SOLID 원칙과 같은 설계 원칙을 통해 시스템의 품질과 유지보수성을 확보하고, UML 과 같은 모델링 언어로 시스템의 구조와 동작을 명확하게 표현하여 개발팀 간의 소통과 시스템 이해를 촉진하는 것이 핵심이다.</description>
    </item>
    <item>
      <title>Programming Paradigms</title>
      <link>https://buenhyden.github.io/posts/software-engineering/programming-paradigms/</link>
      <pubDate>Sun, 22 Sep 2024 04:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/programming-paradigms/</guid>
      <description>코드를 효율적이고 유지보수가 용이하게 작성하기 위한 다양한 접근 방식</description>
    </item>
    <item>
      <title>Design Principles</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-principles/</link>
      <pubDate>Thu, 29 May 2025 03:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-principles/</guid>
      <description>Design Principles 는 소프트웨어 시스템의 구조적 안정성, 유지보수성, 확장성을 보장하기 위한 핵심 규칙이다. 모듈화, 관심사 분리, 단일 책임 원칙 등이 대표적이며, 이는 시스템 아키텍처 설계 시 복잡성 관리와 효율적인 리소스 활용을 가능하게 한다. 실무에서는 마이크로서비스, 계층화 아키텍처, CI/CD 파이프라인 등에 적용되어 신뢰성 있는 시스템 구축을 지원한다.</description>
    </item>
    <item>
      <title>Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/requirements-and-design/architecture-and-system-design/architecture/</link>
      <pubDate>Sun, 25 May 2025 09:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/requirements-and-design/architecture-and-system-design/architecture/</guid>
      <description>소프트웨어 아키텍처는 시스템의 구성 요소, 구조, 상호작용, 기술 선택, 품질 속성 등을 정의하는 설계의 청사진이다. 이는 유지보수성, 확장성, 성능, 보안 등 비기능 요구사항을 충족시키며, 시스템의 성공적 개발과 장기적 진화를 이끄는 핵심 역할을 한다.</description>
    </item>
    <item>
      <title>System Design and Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/requirements-and-design/architecture-and-system-design/system-design/system-design-and-architecture/</link>
      <pubDate>Thu, 19 Sep 2024 21:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/requirements-and-design/architecture-and-system-design/system-design/system-design-and-architecture/</guid>
      <description>시스템 디자인은 복잡한 소프트웨어 시스템의 구조와 구성 요소를 정의하여 안정적이고 확장 가능한 시스템을 구축하는 과정이다. 사용자 요구사항을 분석하고, 구조적 설계를 통해 시스템 구성요소와 인터페이스를 정의하며, 성능, 보안, 유지보수성을 고려하여 최적의 아키텍처를 구축한다. 현대 소프트웨어 개발에서 필수적인 역할을 수행한다.</description>
    </item>
    <item>
      <title>POSA(Pattern-Oriented Software Architecture)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns/posa/</link>
      <pubDate>Sat, 05 Apr 2025 01:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns/posa/</guid>
      <description>POSA(패턴 지향 소프트웨어 아키텍처) 는 복잡한 소프트웨어 시스템 설계 문제에 대한 검증된 해결책을 패턴 형태로 제공하는 아키텍처 접근 방식이다. 다양한 수준의 추상화에서 재사용 가능한 디자인 패턴을 체계적으로 적용하여 소프트웨어의 품질, 유지보수성 및 확장성을 향상시키는 방법론을 제시한다.</description>
    </item>
    <item>
      <title>GoF</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns/gof/</link>
      <pubDate>Wed, 25 Sep 2024 01:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-patterns/gof/</guid>
      <description>GoF 디자인 패턴은 객체 생성, 구조 조합, 행동 관리를 체계화한 23 가지 솔루션이다. 재사용 가능한 코드 작성을 통해 **유지보수성**과 **확장성**을 높이며, Singleton, Adapter, Observer 등이 대표적이다. 이 패턴들은 복잡한 시스템에서 발생하는 공통 문제를 해결하기 위해 필수적으로 활용된다.</description>
    </item>
  </channel>
</rss>
