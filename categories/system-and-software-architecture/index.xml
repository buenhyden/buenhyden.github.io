<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>System-and-Software-Architecture on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/system-and-software-architecture/</link>
    <description>Recent content in System-and-Software-Architecture on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Thu, 29 May 2025 03:25:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/system-and-software-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Architecture Principles</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-fundamentals/core-principles/architecture-principles/</link>
      <pubDate>Sat, 21 Dec 2024 05:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-fundamentals/core-principles/architecture-principles/</guid>
      <description>아키텍처 원칙은 소프트웨어 시스템의 품질, 지속 가능성, 적응성을 보장하기 위한 근본적인 지침과 규칙의 집합으로, SOLID, DRY, KISS와 같은 설계 원칙부터 클라우드 네이티브, 마이크로서비스 원칙까지 다양한 측면을 포괄한다. 이러한 원칙들은 비즈니스 목표와 기술적 제약 사이의 균형을 맞추며, 일관된 설계 결정과 효과적인 커뮤니케이션을 통해 복잡한 시스템의 성공적인 구현과 진화를 가능하게 한다.</description>
    </item>
    <item>
      <title>Clean Code</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-development/software-development-fundamentals/clean-code/</link>
      <pubDate>Thu, 19 Sep 2024 05:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-development/software-development-fundamentals/clean-code/</guid>
      <description>클린 코드는 읽기 쉽고, 이해와 유지보수가 용이한 코드를 작성하는 원칙과 기법을 의미한다. 명확한 네이밍, 단순화, 일관성, 중복 최소화, 테스트 가능성 등 다양한 원칙을 통해 소프트웨어 품질과 개발 생산성을 높이며, 협업과 장기적인 유지보수에 큰 이점을 제공한다.</description>
    </item>
    <item>
      <title>보안 코딩 (Secure Coding)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/software-development/software-development-fundamentals/secure-coding/</link>
      <pubDate>Thu, 19 Sep 2024 01:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/software-development/software-development-fundamentals/secure-coding/</guid>
      <description>Secure Coding은 소프트웨어 개발 과정에서 보안 취약점을 최소화하고 안전한 소프트웨어를 만들기 위한 코딩 기법이다.</description>
    </item>
    <item>
      <title>Design Principles</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-fundamentals/core-principles/design-principles/</link>
      <pubDate>Thu, 29 May 2025 03:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-fundamentals/core-principles/design-principles/</guid>
      <description>Design Principles 는 소프트웨어 시스템의 구조적 안정성, 유지보수성, 확장성을 보장하기 위한 핵심 규칙이다. 모듈화, 관심사 분리, 단일 책임 원칙 등이 대표적이며, 이는 시스템 아키텍처 설계 시 복잡성 관리와 효율적인 리소스 활용을 가능하게 한다. 실무에서는 마이크로서비스, 계층화 아키텍처, CI/CD 파이프라인 등에 적용되어 신뢰성 있는 시스템 구축을 지원한다.</description>
    </item>
  </channel>
</rss>
