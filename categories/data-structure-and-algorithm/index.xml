<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Data Structure and Algorithm on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/data-structure-and-algorithm/</link>
    <description>Recent content in Data Structure and Algorithm on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.141.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 Nov 2024 09:18:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/data-structure-and-algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Structure</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/</link>
      <pubDate>Sun, 27 Oct 2024 06:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/</guid>
      <description>데이터를 효율적으로 저장, 관리, 접근하기 위한 방법</description>
    </item>
    <item>
      <title>계산 복잡도 (Computational Complexity)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/</link>
      <pubDate>Sat, 26 Oct 2024 01:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/</guid>
      <description>알고리즘의 효율성을 분석하고 문제의 난이도를 분류하는 이론</description>
    </item>
    <item>
      <title>알고리즘 설계 (Algorithm Design)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/</link>
      <pubDate>Mon, 28 Oct 2024 05:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/</guid>
      <description>알고리즘 설계는 주어진 문제를 효율적으로 해결하기 위한 체계적인 과정</description>
    </item>
    <item>
      <title>Algorithm</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/</link>
      <pubDate>Tue, 29 Oct 2024 08:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/</guid>
      <description>문제를 해결하거나 특정 작업을 수행하기 위한 명확하고 단계적인 절차</description>
    </item>
    <item>
      <title>비결정성 (Non-determinism)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/non-determinism/</link>
      <pubDate>Mon, 25 Nov 2024 09:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/non-determinism/</guid>
      <description>알고리즘이나 시스템에서 동일한 입력에 대해 매번 다른 과정을 거쳐 다른 결과를 도출할 수 있는 특성</description>
    </item>
    <item>
      <title>머신러닝 알고리즘 (Machine Learning Algorithms)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/machine-learning-algorithms/machine-learning-algorithms/</link>
      <pubDate>Fri, 08 Nov 2024 07:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/machine-learning-algorithms/machine-learning-algorithms/</guid>
      <description>컴퓨터가 명시적인 프로그래밍 없이 데이터로부터 패턴을 학습하고 예측이나 의사결정을 수행할 수 있게 하는 알고리즘</description>
    </item>
    <item>
      <title>최적화 알고리즘 (Optimization Algorithms)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/optimization-algorithms/optimization-algorithms/</link>
      <pubDate>Wed, 06 Nov 2024 06:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/optimization-algorithms/optimization-algorithms/</guid>
      <description>주어진 문제에 대해 가장 효율적이거나 최적의 해결책을 찾기 위해 사용되는 방법론</description>
    </item>
    <item>
      <title>암호화 알고리즘 (Encryption Algorithm)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/encryption-algorithms/encryption-algorithm/</link>
      <pubDate>Tue, 05 Nov 2024 15:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/encryption-algorithms/encryption-algorithm/</guid>
      <description>데이터를 안전하게 보호하기 위해 사용되는 수학적 방법</description>
    </item>
    <item>
      <title>기하 알고리즘 (Geometric Algorithms)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/geometric-algorithms/geometric-algorithms/</link>
      <pubDate>Tue, 05 Nov 2024 06:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/geometric-algorithms/geometric-algorithms/</guid>
      <description> 2차원, 3차원 또는 더 높은 차원의 공간에 존재하는 점, 선, 다각형, 원 등의 기하학적 객체를 다루는 알고리즘</description>
    </item>
    <item>
      <title>문자열 알고리즘 (String Algorithms)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/string-algorithms/string-algorithms/</link>
      <pubDate>Tue, 05 Nov 2024 06:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/string-algorithms/string-algorithms/</guid>
      <description>문자열 알고리즘은 텍스트 데이터를 처리하고 분석하는 알고리즘의 집합</description>
    </item>
    <item>
      <title>그리디 알고리즘 (Greedy Algorithms)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/greedy-algorithms/greedy-algorithms/</link>
      <pubDate>Tue, 05 Nov 2024 02:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/greedy-algorithms/greedy-algorithms/</guid>
      <description>&amp;#34;탐욕적&amp;#34; 또는 &amp;#34;욕심쟁이&amp;#34; 알고리즘이라고도 불리며, 현재 상황에서 가장 최적의 선택을 하는 방식으로 문제를 해결하는 알고리즘</description>
    </item>
    <item>
      <title>그래프 알고리즘 (Graph Algorithms)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/graph-algorithms/graph-algorithms/</link>
      <pubDate>Tue, 05 Nov 2024 01:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/graph-algorithms/graph-algorithms/</guid>
      <description>네트워크, 경로 찾기, 최적화 등 다양한 실제 문제를 해결하는 데 사용되는 중요한 알고리즘</description>
    </item>
    <item>
      <title>수치 알고리즘 (Numerical Algorithms)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/numerical-algorithms/numerical-algorithms/</link>
      <pubDate>Mon, 04 Nov 2024 06:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/numerical-algorithms/numerical-algorithms/</guid>
      <description>수치해석학의 일부로, 복잡한 수학적 문제를 컴퓨터를 이용해 수치적으로 근사해서 해결하는 알고리즘</description>
    </item>
    <item>
      <title>정렬 알고리즘 (Sorting Algorithms)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/sorting-algorithms/sorting-algorithms/</link>
      <pubDate>Sat, 02 Nov 2024 01:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/sorting-algorithms/sorting-algorithms/</guid>
      <description>정렬 알고리즘은 데이터를 특정 순서로 배열하는 알고리즘으로, 컴퓨터 과학에서 매우 중요한 역할을 한다.</description>
    </item>
    <item>
      <title>Algorithm Design techniques</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/</link>
      <pubDate>Fri, 01 Nov 2024 07:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/algorithm-design-techniques/</guid>
      <description>알고리즘 설계 기법(Algorithm Design Techniques)은 이러한 접근 방법을 구체화하여 실제 알고리즘을 구현하는 데 사용되는 기술적인 방법론으로 특정 문제 유형에 최적화된 해결 방식을 제공하며 명확한 알고리즘 구조를 제공한다.</description>
    </item>
    <item>
      <title>Approaches to algorithm design</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/approaches-to-algorithm-design/</link>
      <pubDate>Fri, 01 Nov 2024 07:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm-design/approaches-to-algorithm-design/</guid>
      <description>알고리즘 설계를 위한 접근 방법 (Approaches to Algorithm Design)은 문제 해결을 위한 전략적인 사고 과정을 의미한다. 문제를 이해하고 해결책을 도출하는 과정에 초점을 맞추며 다양한 기법들을 조합하여 사용이 가능하다.</description>
    </item>
    <item>
      <title>검색 알고리즘 (Searching Algorithms)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/searching-algorithms/searching-algorithms/</link>
      <pubDate>Wed, 30 Oct 2024 01:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/algorithm/searching-algorithms/searching-algorithms/</guid>
      <description> 데이터 집합에서 특정 항목을 찾는 방법을 정의하는 알고리즘</description>
    </item>
    <item>
      <title>Big O 표기법 (Big O notation)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/big-o-notation/</link>
      <pubDate>Sat, 26 Oct 2024 01:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/big-o-notation/</guid>
      <description>알고리즘의 성능과 효율성을 수학적으로 표현하는 방법으로, 주로 알고리즘이 처리해야 할 데이터의 크기(n)가 늘어날 때, 실행 시간이나 메모리 사용량이 어떻게 증가하는지를 나타낸다.</description>
    </item>
    <item>
      <title>환원 가능성 (Reducibility)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/reducibility/</link>
      <pubDate>Thu, 24 Oct 2024 12:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/reducibility/</guid>
      <description>환원 가능성 (Reducibility)이란 한 문제를 다른 문제로 변환하는 과정을 말한다.</description>
    </item>
    <item>
      <title>튜링 기계 (Turing Machine)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/turing-machine/</link>
      <pubDate>Thu, 24 Oct 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/turing-machine/</guid>
      <description>튜링 기계는 1936년 앨런 튜링이 제안한 추상적인 계산 모델로, 알고리즘의 개념을 수학적으로 정형화한 것으로, 현대 컴퓨터의 이론적 기초가 되었다.</description>
    </item>
    <item>
      <title>복잡도 클래스(Complexity Classes)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/complexity-classes/</link>
      <pubDate>Thu, 24 Oct 2024 09:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/computational-complexity/complexity-classes/</guid>
      <description>계산 복잡도 이론에서 비슷한 복잡도를 가진 문제들의 집합을 나타낸다.</description>
    </item>
  </channel>
</rss>
