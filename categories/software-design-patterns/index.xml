<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Software Design Patterns on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/software-design-patterns/</link>
    <description>Recent content in Software Design Patterns on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.9</generator>
    <language>en</language>
    <lastBuildDate>Tue, 24 Jun 2025 13:23:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/software-design-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creational</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/</link>
      <pubDate>Wed, 25 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/</guid>
      <description>Creational Design Patterns(생성 디자인 패턴) 는 객체 생성 메커니즘을 다루는 디자인 패턴 분류로, 시스템이 객체를 생성, 구성, 표현하는 방식에 독립성을 제공한다. GoF 에서 정의한 5 가지 패턴 (Singleton, Factory Method, Abstract Factory, Builder, Prototype) 을 포함하며, 객체 생성의 복잡성을 캡슐화하고 유연성을 향상시켜 재사용 가능하고 유지보수가 용이한 소프트웨어 시스템 구축을 지원한다.</description>
    </item>
    <item>
      <title>Structural</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/</link>
      <pubDate>Wed, 25 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/</guid>
      <description>&lt;h2 id=&#34;structural&#34;&gt;Structural&lt;/h2&gt;
&lt;p&gt;아래는 &amp;ldquo;Structural(구조 패턴)&amp;rdquo; 에 대한 체계적인 조사, 분석 및 정리 결과입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-주제에-대한-태그&#34;&gt;1. 주제에 대한 태그&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Structural-Pattern&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Object-Composition&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Class-Relationship&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GoF-Design-Patterns&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-태그-영문---사용&#34;&gt;1. 태그 (영문, &amp;lsquo;-&amp;rsquo; 사용)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Structural-Patterns&lt;/li&gt;
&lt;li&gt;Object-Composition&lt;/li&gt;
&lt;li&gt;Interface-Adapter&lt;/li&gt;
&lt;li&gt;GoF-Structural&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-카테고리-계층-구조-분석&#34;&gt;2. 카테고리 계층 구조 분석&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Structural&amp;rdquo; 패턴은 &lt;code&gt;Software Design Patterns &amp;gt; GoF &amp;gt; Structural&lt;/code&gt; 하위에 적합합니다.&lt;br&gt;
&lt;strong&gt;근거&lt;/strong&gt;: GoF 분류 체계에서는 &lt;strong&gt;Structural Patterns&lt;/strong&gt;가 객체와 클래스 간의 조합과 관계에 초점을 맞춘 별도의 범주로 정의되며, Adapter, Facade, Bridge, Composite, Decorator, Proxy, Flyweight 등이 여기에 속합니다 (&lt;a href=&#34;https://www.geeksforgeeks.org/system-design/gang-of-four-gof-design-patterns/?utm_source=chatgpt.com&#34; title=&#34;Gang of Four (GOF) Design Patterns - GeeksforGeeks&#34;&gt;geeksforgeeks.org&lt;/a&gt;, &lt;a href=&#34;https://refactoring.guru/design-patterns/go?utm_source=chatgpt.com&#34; title=&#34;Design Patterns in Go - Refactoring.Guru&#34;&gt;refactoring.guru&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Behavioral</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/</link>
      <pubDate>Tue, 24 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/</guid>
      <description>Behavioral Design Patterns 는 객체 및 클래스 간의 상호작용과 책임 분산에 집중한 디자인 패턴군으로, 복잡한 시스템에서 객체들의 행위를 유연하게 조정하고 기능 확장 및 유지보수를 용이하게 만든다. 실무에서 프로그램의 확장성과 코드 품질 향상을 위해 필수적으로 활용된다.</description>
    </item>
    <item>
      <title>Performance Optimization</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/performance-optimization/</link>
      <pubDate>Tue, 24 Jun 2025 13:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/performance-optimization/</guid>
      <description>&lt;h2 id=&#34;performance-optimization&#34;&gt;Performance Optimization&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;용어-정리&#34;&gt;용어 정리&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;용어&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;
&lt;hr&gt;</description>
    </item>
    <item>
      <title>Object Pooling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/performance-optimization/object-pooling/</link>
      <pubDate>Tue, 24 Jun 2025 10:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/performance-optimization/object-pooling/</guid>
      <description>Object Pooling 은 객체의 생성과 소멸 비용을 줄이기 위해 미리 생성된 객체들을 풀 (Pool) 에 보관하고 재사용하는 성능 최적화 디자인 패턴이다.  메모리 할당/해제 오버헤드를 줄이고 가비지 컬렉션 압력을 감소시켜 시스템 성능을 향상시킨다.</description>
    </item>
    <item>
      <title>POSA(Pattern-Oriented Software Architecture)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/posa/</link>
      <pubDate>Sat, 05 Apr 2025 01:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/posa/</guid>
      <description>POSA(패턴 지향 소프트웨어 아키텍처) 는 복잡한 소프트웨어 시스템 설계 문제에 대한 검증된 해결책을 패턴 형태로 제공하는 아키텍처 접근 방식이다. 다양한 수준의 추상화에서 재사용 가능한 디자인 패턴을 체계적으로 적용하여 소프트웨어의 품질, 유지보수성 및 확장성을 향상시키는 방법론을 제시한다.</description>
    </item>
    <item>
      <title>지연 초기화(Lazy Initialization)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/performance-optimization/lazy-initialization/</link>
      <pubDate>Wed, 18 Dec 2024 10:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/performance-optimization/lazy-initialization/</guid>
      <description>지연 초기화는 객체나 값의 생성을 실제로 필요할 때까지 미루는 설계 패턴이다. 메모리 절약, 빠른 시작, 불필요한 연산 방지 등 자원 효율성을 극대화할 수 있지만, 최초 접근 시 지연, 예외 발생의 지연, 동시성 관리 등 주의가 필요하다.</description>
    </item>
    <item>
      <title>GoF</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/</link>
      <pubDate>Wed, 25 Sep 2024 01:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/</guid>
      <description>GoF 디자인 패턴은 객체 생성, 구조 조합, 행동 관리를 체계화한 23 가지 솔루션이다. 재사용 가능한 코드 작성을 통해 **유지보수성**과 **확장성**을 높이며, Singleton, Adapter, Observer 등이 대표적이다. 이 패턴들은 복잡한 시스템에서 발생하는 공통 문제를 해결하기 위해 필수적으로 활용된다.</description>
    </item>
  </channel>
</rss>
