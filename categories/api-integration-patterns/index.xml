<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>API Integration Patterns on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/api-integration-patterns/</link>
    <description>Recent content in API Integration Patterns on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.8</generator>
    <language>en</language>
    <lastBuildDate>Sun, 23 Mar 2025 04:35:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/api-integration-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Synchronous vs Asynchronous APIs</title>
      <link>https://buenhyden.github.io/posts/software-engineering/application-development/api-design-and-implementation/api-integration-patterns/synchronous-vs-asynchronous-apis/</link>
      <pubDate>Sun, 06 Oct 2024 00:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/application-development/api-design-and-implementation/api-integration-patterns/synchronous-vs-asynchronous-apis/</guid>
      <description>프로그래밍에서 작업을 처리하는 두 가지 주요 방식</description>
    </item>
    <item>
      <title>API Gateway</title>
      <link>https://buenhyden.github.io/posts/software-engineering/requirements-and-design/architecture-and-system-design/system-components/api-gateway/</link>
      <pubDate>Sun, 20 Oct 2024 09:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/requirements-and-design/architecture-and-system-design/system-components/api-gateway/</guid>
      <description>클라이언트와 백엔드 서비스 사이에서 중개자 역할을 하는 서버로, 여러 마이크로서비스나 백엔드 시스템에 대한 단일 진입점을 제공하는 중요한 컴포넌트</description>
    </item>
    <item>
      <title>Implementations of API Gateway</title>
      <link>https://buenhyden.github.io/posts/software-engineering/requirements-and-design/architecture-and-system-design/system-components/api-gateway/implementations/</link>
      <pubDate>Sun, 23 Mar 2025 04:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/requirements-and-design/architecture-and-system-design/system-components/api-gateway/implementations/</guid>
      <description>API 게이트웨이는 현대적인 애플리케이션 아키텍처의 핵심 구성 요소로, 클라이언트 요청을 처리하고 다양한 마이크로서비스로 라우팅하는 중앙 진입점 역할을 한다.</description>
    </item>
    <item>
      <title>Polling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/application-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/polling/</link>
      <pubDate>Sat, 08 Mar 2025 15:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/application-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/polling/</guid>
      <description>폴링은 클라이언트가 주기적으로 서버에 요청을 보내 새로운 정보나 상태 변화를 확인하는 통신 방식이다. 이는 &amp;#39;끌어오기(Pull)&amp;#39; 방식의 대표적인 예로, 클라이언트가 능동적으로 서버에서 정보를 요청한다.</description>
    </item>
    <item>
      <title>Webhook</title>
      <link>https://buenhyden.github.io/posts/software-engineering/application-development/api-design-and-implementation/api-styles/event-based-style/webhook/</link>
      <pubDate>Sat, 08 Mar 2025 15:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/application-development/api-design-and-implementation/api-styles/event-based-style/webhook/</guid>
      <description>webhook은 특정 이벤트가 발생했을 때 서버가 미리 지정된 클라이언트의 URL로 데이터를 능동적으로 보내는 방식이다.</description>
    </item>
    <item>
      <title>Asynchronous APIs</title>
      <link>https://buenhyden.github.io/posts/software-engineering/application-development/backend-development-fundamentals/request-response-cycle/asynchronous/</link>
      <pubDate>Thu, 06 Mar 2025 15:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/application-development/backend-development-fundamentals/request-response-cycle/asynchronous/</guid>
      <description>비동기식 API의 핵심은 요청과 응답 사이의 시간적 분리이다. 이 패턴에서는 클라이언트가 요청을 보낸 후 즉각적인 응답을 기다리지 않고, 다른 작업을 계속 진행할 수 있다. 서버는 요청을 처리한 후, 다양한 메커니즘을 통해 결과를 클라이언트에게 전달한다.</description>
    </item>
    <item>
      <title>Synchronous APIs</title>
      <link>https://buenhyden.github.io/posts/software-engineering/application-development/backend-development-fundamentals/request-response-cycle/synchronous/</link>
      <pubDate>Thu, 06 Mar 2025 15:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/application-development/backend-development-fundamentals/request-response-cycle/synchronous/</guid>
      <description>클라이언트가 요청을 보내고 서버가 해당 요청을 처리한 후 즉시 응답을 반환하는 방식으로 작동한다. 이러한 동기식 통신의 본질은 &amp;#34;요청-응답&amp;#34; 주기가 완료될 때까지 클라이언트가 다른 작업으로 진행하지 않고 대기한다는 점이다.</description>
    </item>
    <item>
      <title>Messaging Queues</title>
      <link>https://buenhyden.github.io/posts/software-engineering/requirements-and-design/architecture-and-system-design/system-integration-and-messaging/event-and-message-brokers/messaging-systems/message-queues/</link>
      <pubDate>Sat, 01 Feb 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/requirements-and-design/architecture-and-system-design/system-integration-and-messaging/event-and-message-brokers/messaging-systems/message-queues/</guid>
      <description>메시징 큐는 비동기 통신을 가능하게 하는 중간 저장소로, 메시지 생산자(Producer)와 소비자(Consumer) 사이에서 데이터를 버퍼링하는 역할을 한다.</description>
    </item>
    <item>
      <title>Batch Processing</title>
      <link>https://buenhyden.github.io/posts/software-engineering/application-development/api-design-and-implementation/api-integration-patterns/batch-processing/</link>
      <pubDate>Sat, 01 Feb 2025 03:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/application-development/api-design-and-implementation/api-integration-patterns/batch-processing/</guid>
      <description>배치 처리는 여러 개별 API 요청을 하나의 그룹으로 묶어 단일 요청으로 처리하는 방식이다. 이는 여러 개의 개별 API 호출을 하는 대신, 다수의 작업을 포함한 하나의 요청을 보내는 것이다.</description>
    </item>
    <item>
      <title>Webhooks vs. Polling</title>
      <link>https://buenhyden.github.io/posts/software-engineering/application-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/</link>
      <pubDate>Fri, 31 Jan 2025 15:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/application-development/api-design-and-implementation/api-integration-patterns/webhooks-vs-polling/</guid>
      <description>웹 애플리케이션에서 외부 시스템과 통신하거나 상태 변화를 감지하는 방식에는 대표적으로 웹훅(Webhooks)과 폴링(Polling)이 있다.</description>
    </item>
  </channel>
</rss>
