<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CI-CD Fundamentals on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/ci-cd-fundamentals/</link>
    <description>Recent content in CI-CD Fundamentals on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.2</generator>
    <language>en</language>
    <lastBuildDate>Thu, 08 May 2025 01:43:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/ci-cd-fundamentals/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CI vs. CD vs. CD</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/ci-cd-fundamentals/ci-vs-cd-vs-cd/</link>
      <pubDate>Thu, 08 May 2025 01:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/ci-cd-fundamentals/ci-vs-cd-vs-cd/</guid>
      <description>CI/CD 는 현대 소프트웨어 개발의 핵심 요소로, 자동화를 통해 소프트웨어 품질을 향상시키고 개발 및 배포 속도를 높인다. CI(지속적 통합) 는 개발자의 코드 변경을 자주 통합하고 검증하는 과정에 중점을 두며, CD(지속적 전달) 는 소프트웨어가 언제든 배포 가능한 상태를 유지하도록 자동화하고, CD(지속적 배포) 는 검증된 변경사항을 자동으로 프로덕션에 배포한다. 이 세 가지 접근법의 주요 차이점은 자동화 수준과 사람의 개입 정도에 있다.2025 년 트렌드로는 AI 통합, GitOps, DevSecOps, 클라우드 네이티브 접근법이 주목받고 있으며, 효과적인 CI/CD 구현을 위해서는 적절한 도구 선택, 테스트 자동화, 안전한 배포 전략, 팀 문화 변화가 필수적이다.</description>
    </item>
    <item>
      <title>History and Evolution of CI/CD</title>
      <link>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/ci-cd-fundamentals/history-and-evolution-of-ci-cd/</link>
      <pubDate>Thu, 08 May 2025 00:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops-and-infrastructure/ci-cd/ci-cd-fundamentals/history-and-evolution-of-ci-cd/</guid>
      <description>1990 년대 후반 익스트림 프로그래밍 (XP) 에서 처음 등장한 지속적 통합 개념은 워터폴 모델의 한계를 극복하기 위해 발전했으며, 2000 년대 중반 젠킨스 (이전의 허드슨) 의 등장으로 대중화되었다. 이후 클라우드 컴퓨팅, 컨테이너 기술의 발전과 함께 GitLab CI, CircleCI, GitHub Actions 등 다양한 CI/CD 도구가 등장했다. CI/CD 는 코드 통합 문제 조기 발견, 출시 주기 단축, 품질 향상 등 다양한 이점을 제공하며, 현재는 AI/ML 통합, GitOps, DevSecOps 등의 최신 트렌드와 함께 계속 진화하고 있다.</description>
    </item>
  </channel>
</rss>
