<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Transaction Management on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/transaction-management/</link>
    <description>Recent content in Transaction Management on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.151.2</generator>
    <language>en</language>
    <lastBuildDate>Wed, 27 Aug 2025 06:21:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/transaction-management/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MVCC(Multi-Version Concurrency Control, 다중 버전 동시성 제어)</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/optimistic-concurrency-control/versioning/mvcc/</link>
      <pubDate>Wed, 27 Aug 2025 06:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/optimistic-concurrency-control/versioning/mvcc/</guid>
      <description>MVCC는 트랜잭션마다 일관된 스냅샷을 제공하기 위해 데이터의 여러 버전을 유지하는 동시성 제어 방식이다. 읽기는 기존 버전을 읽어 비차단으로 처리되고, 쓰기는 새 버전을 생성해 커밋 시 가시성이 바뀐다. 높은 읽기 동시성과 낮은 락 경합을 제공하지만 버전 누적으로 인한 저장·GC 부담과 일부 격리 이상(issue)이 존재한다.</description>
    </item>
    <item>
      <title>Transaction</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/</link>
      <pubDate>Sun, 10 Aug 2025 14:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/</guid>
      <description>**트랜잭션(Transaction)**은 데이터베이스에서 상태를 변화시키는 여러 작업을 하나의 논리적 단위로 묶어 처리하는 기술이다. ACID (Atomicity, Consistency, Isolation, Durability) 속성을 보장하여 시스템 오류나 동시성 문제에도 데이터의 무결성과 신뢰성을 유지한다. 트랜잭션의 **격리 수준(Isolation Level)**을 조절하여 데이터 일관성과 성능 사이의 균형을 맞추며, 분산 시스템에서는 2상 커밋(2-Phase Commit) 같은 프로토콜을 통해 여러 노드에 걸친 작업의 원자성을 보장한다. 이처럼 트랜잭션은 현대 소프트웨어의 안정적 데이터 관리에 필수적인 핵심 메커니즘이다.</description>
    </item>
    <item>
      <title>ACID Properties</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/acid-properties/</link>
      <pubDate>Thu, 15 May 2025 02:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/acid-properties/</guid>
      <description>ACID는 데이터베이스 트랜잭션이 전부 수행 또는 전부 취소(원자성), 일관된 규칙 준수(일관성), 동시 실행 간 간섭 방지(격리성), **결과 영구 저장(지속성)**을 보장하는 원칙이다. 이를 통해 장애나 동시성 경쟁 상황에서도 데이터 무결성과 신뢰성을 유지하며, 현대 DB·분산 환경 설계의 핵심 기반이 된다.</description>
    </item>
    <item>
      <title>Transaction Isolation</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/</link>
      <pubDate>Mon, 12 May 2025 14:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/</guid>
      <description>트랜잭션 격리(Transaction Isolation)는 ACID 속성 중 하나로, 동시에 실행되는 트랜잭션 간 간섭을 제어해 데이터 일관성을 보장한다. SQL 표준 격리 수준은 Read Uncommitted, Read Committed, Repeatable Read, Serializable로, 각 수준에 따라 Dirty/Non-Repeatable/Phantom Read 허용 여부와 성능이 달라진다.</description>
    </item>
    <item>
      <title>Locking</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/</link>
      <pubDate>Thu, 24 Oct 2024 15:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/</guid>
      <description>락킹은 동시 트랜잭션이 같은 데이터를 안전하게 다루게 하는 메커니즘으로, 공유·배타·의도락 등 다양한 모드와 행·페이지·테이블 단위로 접근을 제어한다. 2PL 계열은 직렬성을 보장하지만 데드락과 대기 비용이 생기므로 MVCC나 낙관적 기법과 조합해 성능·일관성의 균형을 맞춘다. 분산 환경에서는 네트워크·타임 동기 문제를 추가로 고려해야 한다.</description>
    </item>
    <item>
      <title>Pessimistic Locking vs. Optimistic Concurrency Control(OCC)</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/</link>
      <pubDate>Wed, 02 Oct 2024 02:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/</guid>
      <description>Pessimistic Locking과 Optimistic Concurrency Control  데이터 무결성 보장을 위한 두 가지 대표 동시성 제어 전략이다. 전자는 충돌을 사전에 차단하고, 후자는 충돌 발생 시 검증한다. 충돌 빈도, 시스템 환경, 성능 요구에 따라 적절히 선택해야 한다.</description>
    </item>
  </channel>
</rss>
