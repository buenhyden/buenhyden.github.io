<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Types on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/types/</link>
    <description>Recent content in Types on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.149.0</generator>
    <language>en</language>
    <lastBuildDate>Sun, 23 Mar 2025 04:10:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/types/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ASCII(American Standard Code for Information Interchange)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-systems/data-representation--encoding/character-encoding/ascii-encoding/</link>
      <pubDate>Fri, 13 Dec 2024 16:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-systems/data-representation--encoding/character-encoding/ascii-encoding/</guid>
      <description>ASCII는 현대 컴퓨터 시스템과 통신 프로토콜의 근간이 된 가장 기본적인 문자 인코딩 표준이다.</description>
    </item>
    <item>
      <title>꼬리 재귀(Tail Recursion)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/implementation-strategies/iteration-vs-recursion/recursion/types/tail-recursion/</link>
      <pubDate>Mon, 09 Dec 2024 09:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/implementation-strategies/iteration-vs-recursion/recursion/types/tail-recursion/</guid>
      <description>Tail Recursion는 재귀 함수의 마지막 연산이 재귀 호출 자체인 특별한 형태의 재귀이다.</description>
    </item>
    <item>
      <title>Native Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/compiler-types/native-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 15:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/compiler-types/native-compiler/</guid>
      <description>Native Compiler는 소스 코드를 현재 컴파일러가 실행되고 있는 시스템의 운영체제와 하드웨어 아키텍처에 최적화된 기계어로 변환하는 컴파일러</description>
    </item>
    <item>
      <title>ANSI</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-systems/data-representation--encoding/character-encoding/regional-encodings/ansi/</link>
      <pubDate>Fri, 24 Jan 2025 04:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-systems/data-representation--encoding/character-encoding/regional-encodings/ansi/</guid>
      <description>일반적으로 Windows 운영 체제에서 사용되는 특정 8비트 코드 페이지 집합을 지칭한다.</description>
    </item>
    <item>
      <title>비꼬리 재귀(Non-tail Recursion)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/implementation-strategies/iteration-vs-recursion/recursion/types/non-tail-recursion/</link>
      <pubDate>Mon, 09 Dec 2024 09:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/implementation-strategies/iteration-vs-recursion/recursion/types/non-tail-recursion/</guid>
      <description>Non-tail Recursion는 재귀 호출이 함수의 마지막 연산이 아닌 형태의 재귀를 의미한다</description>
    </item>
    <item>
      <title>Cross Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/compiler-types/cross-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 15:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/compiler-types/cross-compiler/</guid>
      <description>크로스 컴파일러는 현재 코드를 실행하는 환경(호스트)와는 다른 플랫폼(대상)에서 실행될 수 있는 실행 파일이나 바이너리를 생성하는 컴파일러</description>
    </item>
    <item>
      <title>이진 검색 트리 (Binary Search Tree)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/tree-structures--algorithms/binary-search-trees/</link>
      <pubDate>Mon, 07 Oct 2024 12:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/tree-structures--algorithms/binary-search-trees/</guid>
      <description>BST는 계층적 데이터를 정렬된 방식으로 저장하고 조직하는 데 사용되는 특수한 이진 트리 구조이다.</description>
    </item>
    <item>
      <title>CP949</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-systems/data-representation--encoding/character-encoding/regional-encodings/cp949/</link>
      <pubDate>Fri, 24 Jan 2025 04:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-systems/data-representation--encoding/character-encoding/regional-encodings/cp949/</guid>
      <description>CP949(Code Page 949)는 한국어 문자를 표현하기 위해 마이크로소프트가 개발한 문자 인코딩이다.</description>
    </item>
    <item>
      <title>tail Recursion vs. Non-tail Recursion</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/implementation-strategies/iteration-vs-recursion/recursion/types/tail-recursion-vs-non-tail-recursion/</link>
      <pubDate>Mon, 09 Dec 2024 00:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/foundations/algorithmic-thinking/implementation-strategies/iteration-vs-recursion/recursion/types/tail-recursion-vs-non-tail-recursion/</guid>
      <description>재귀 호출이 함수의 마지막 연산으로 수행되는지 여부에 따라 Tail Recursion(꼬리 재귀)과 Non-Tail Recursion(비꼬리 재귀)으로 구분된다.</description>
    </item>
    <item>
      <title>Ahead-of-Time Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/compiler-types/ahead-of-time-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 18:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/compiler-types/ahead-of-time-compiler/</guid>
      <description>**Ahead-of-Time(AOT) 컴파일러**는 프로그램 실행 전에 소스 코드나 중간 언어(예: 바이트코드)를 **네이티브 머신 코드로 미리 변환**하는 기술</description>
    </item>
    <item>
      <title>EUC-KR</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-systems/data-representation--encoding/character-encoding/regional-encodings/euc-kr/</link>
      <pubDate>Fri, 24 Jan 2025 04:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-systems/data-representation--encoding/character-encoding/regional-encodings/euc-kr/</guid>
      <description>EUC-KR은 한국어 텍스트를 컴퓨터에서 표현하기 위해 개발된 문자 인코딩 방식이다.</description>
    </item>
    <item>
      <title>Just-In-Time (JIT) Compiler</title>
      <link>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/compiler-types/just-in-time-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 17:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/foundations/language-theory/compilation-and-interpretation/compiler-types/just-in-time-compiler/</guid>
      <description>**JIT(Just-In-Time) 컴파일**은 프로그램 실행 시점에 코드를 기계어로 변환하는 기술로, **인터프리터의 유연성**과 **컴파일러의 성능**을 결합한 혁신적인 방식</description>
    </item>
    <item>
      <title>Unicode</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-systems/data-representation--encoding/character-encoding/unicode-standards/</link>
      <pubDate>Fri, 13 Dec 2024 16:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-systems/data-representation--encoding/character-encoding/unicode-standards/</guid>
      <description>Unicode는 전 세계의 모든 문자를 컴퓨터에서 일관되게 표현하고 다룰 수 있도록 설계된 국제 표준이다. 단순히 말해서, Unicode는 각 문자에 고유한 번호(코드 포인트)를 할당하는 표준화된 방식이다.</description>
    </item>
    <item>
      <title>힙 (Heap)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/tree-structures--algorithms/heap--priority-queue/heaps/</link>
      <pubDate>Mon, 07 Oct 2024 05:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/core-concepts/tree-structures--algorithms/heap--priority-queue/heaps/</guid>
      <description>부모 노드와 자식 노드 간의 대소 관계가 일정한 규칙을 따르는 자료구조</description>
    </item>
    <item>
      <title>Redis와 Valkey</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/key-value-stores/redis%EC%99%80-valkey/</link>
      <pubDate>Tue, 22 Oct 2024 01:34:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/key-value-stores/redis%EC%99%80-valkey/</guid>
      <description>Redis와 Valkey 모두 인메모리 데이터베이스로, 빠른 읽기/쓰기 성능을 제공하나, Redis의 라이선스 정책 변경으로 인해 Valkey가 fork되어 새로운 프로젝트가 되었다.</description>
    </item>
    <item>
      <title>Server-Sent Events vs. Webhook</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/asynchronous-communication/hybrid/sse/server-sent-events-vs-webhook/</link>
      <pubDate>Sat, 08 Mar 2025 06:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/asynchronous-communication/hybrid/sse/server-sent-events-vs-webhook/</guid>
      <description>Webhook과 Server-Sent Events(SSE)는 실시간 데이터 전송을 위한 웹 기술이다.</description>
    </item>
    <item>
      <title>Adaptive Polling</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/asynchronous-communication/hybrid/polling/types/adaptive-polling/</link>
      <pubDate>Sun, 23 Mar 2025 04:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/asynchronous-communication/hybrid/polling/types/adaptive-polling/</guid>
      <description>어댑티브 폴링은 데이터 수집이나 시스템 모니터링 과정에서 폴링(polling) 주기를 상황과 필요에 따라 동적으로 조절하는 기술이다.</description>
    </item>
    <item>
      <title>Smart Polling</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/asynchronous-communication/hybrid/polling/types/smart-polling/</link>
      <pubDate>Sun, 23 Mar 2025 04:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/asynchronous-communication/hybrid/polling/types/smart-polling/</guid>
      <description>스마트 폴링은 단순히 일정 주기로 데이터를 확인하는 전통적인 폴링과 달리, 다양한 컨텍스트 정보와 알고리즘을 활용하여 &amp;#39;언제&amp;#39;, &amp;#39;무엇을&amp;#39;, &amp;#39;어떻게&amp;#39; 폴링할지 지능적으로 결정한다.</description>
    </item>
    <item>
      <title>UTF-8</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-systems/data-representation--encoding/character-encoding/utf-8-encoding/</link>
      <pubDate>Wed, 12 Mar 2025 13:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-systems/data-representation--encoding/character-encoding/utf-8-encoding/</guid>
      <description>UTF-8은 현대 컴퓨팅 환경에서 가장 널리 사용되는 문자 인코딩 방식으로, 전 세계의 모든 문자를 표현할 수 있는 유니코드를 효율적으로 저장하고 전송하기 위해 설계되었다.</description>
    </item>
    <item>
      <title>Web Socket vs. Long Polling</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-protocols/web-protocols/websocket/websocket-vs-long-polling/</link>
      <pubDate>Sun, 09 Mar 2025 02:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-protocols/web-protocols/websocket/websocket-vs-long-polling/</guid>
      <description>WebSocket은 TCP 연결을 통해 전이중(full-duplex) 통신 채널을 제공하는 프로토콜이다. Long Polling은 기존 HTTP 요청-응답 모델을 확장한 기법으로, 클라이언트가 서버에 요청을 보내면 서버는 새로운 정보가 있을 때까지 응답을 보류한다.</description>
    </item>
    <item>
      <title>WebSocket</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-protocols/web-protocols/websocket/websocket/</link>
      <pubDate>Sat, 08 Mar 2025 16:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-protocols/web-protocols/websocket/websocket/</guid>
      <description>웹 소켓은 클라이언트와 서버 간에 지속적인 양방향 통신 채널을 제공하는 프로토콜이다. 전통적인 HTTP 통신과 달리, 웹 소켓은 한 번 연결이 수립되면 지속적으로 유지되어 실시간으로 데이터를 주고받을 수 있다.</description>
    </item>
    <item>
      <title>Server sent Events</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/asynchronous-communication/hybrid/sse/</link>
      <pubDate>Sat, 08 Mar 2025 16:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/asynchronous-communication/hybrid/sse/</guid>
      <description>서버 전송 이벤트(Server-Sent Events, SSE)는 웹 서버가 클라이언트 브라우저로 데이터를 자동으로 푸시할 수 있게 해주는 웹 기술이다.</description>
    </item>
    <item>
      <title>Server-sent Events vs. Websocket</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/asynchronous-communication/hybrid/sse/server-sent-events-vs-websocket/</link>
      <pubDate>Mon, 03 Mar 2025 05:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/asynchronous-communication/hybrid/sse/server-sent-events-vs-websocket/</guid>
      <description>전통적인 HTTP 요청-응답 모델은 실시간 데이터 전송에 최적화되어 있지 않기 때문에, 이를 보완하기 위한 기술로 서버 전송 이벤트(Server-Sent Events, SSE)와 웹소켓(WebSocket)이 등장했다.</description>
    </item>
    <item>
      <title>Websocket API vs. Websocket</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-protocols/web-protocols/websocket/websocket-api-vs-websocket/</link>
      <pubDate>Fri, 28 Feb 2025 03:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/core-protocols/application-protocols/web-protocols/websocket/websocket-api-vs-websocket/</guid>
      <description>WebSocket은 통신 프로토콜 자체를 의미하며, 인터넷 상에서 메시지를 주고받는 방식을 정의하며 WebSocket API는 개발자가 웹 애플리케이션에서 WebSocket 프로토콜을 사용할 수 있게 해주는 프로그래밍 인터페이스이다.</description>
    </item>
    <item>
      <title>Short Polling</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/asynchronous-communication/hybrid/polling/types/short-polling/</link>
      <pubDate>Sat, 01 Feb 2025 03:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/asynchronous-communication/hybrid/polling/types/short-polling/</guid>
      <description>Short polling은 클라이언트가 주기적으로 서버에 HTTP 요청을 보내 새로운 데이터가 있는지 확인하는 방식이다.</description>
    </item>
    <item>
      <title>Long Polling</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/asynchronous-communication/hybrid/polling/types/long-polling/</link>
      <pubDate>Sat, 01 Feb 2025 03:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/communication-patterns/asynchronous-communication/hybrid/polling/types/long-polling/</guid>
      <description>Long polling은 클라이언트가 서버에 HTTP 요청을 보내고, 서버는 새로운 정보가 있을 때까지 응답을 보류하는 방식이다.</description>
    </item>
    <item>
      <title>Column Oriented</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/column-family/</link>
      <pubDate>Wed, 23 Oct 2024 12:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/column-family/</guid>
      <description>컬럼형 데이터베이스(Columnar database) 또는 컬럼 지향 데이터베이스(Column-oriented database)는 NoSQL 데이터베이스의 한 유형으로, 데이터를 행이 아닌 열 단위로 저장하는 특징을 가지고 있다.</description>
    </item>
    <item>
      <title>Graph</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/graph-databases/</link>
      <pubDate>Wed, 23 Oct 2024 12:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/graph-databases/</guid>
      <description>그래프 데이터베이스는 NoSQL 데이터베이스의 한 유형으로, 데이터를 노드(Node)와 엣지(Edge)로 구성된 그래프 구조로 저장하고 관리하는 데이터베이스 시스템이다.</description>
    </item>
    <item>
      <title>Time-Series</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/specialized-systems/time-series/</link>
      <pubDate>Wed, 23 Oct 2024 12:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/specialized-systems/time-series/</guid>
      <description>시계열 데이터베이스(Time Series Database, TSDB)는 NoSQL 데이터베이스의 한 종류로, 시간에 따라 변화하는 데이터를 효율적으로 저장하고 관리하기 위해 특별히 설계된 데이터베이스 시스템이다.</description>
    </item>
    <item>
      <title>Document Oriented</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/document-stores/</link>
      <pubDate>Wed, 23 Oct 2024 06:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/document-stores/</guid>
      <description>Document-Oriented Database는 NoSQL 데이터베이스의 한 유형으로, 데이터를 문서 형태로 저장하고 관리하는 시스템이다.</description>
    </item>
    <item>
      <title>Key-Value</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/key-value-stores/</link>
      <pubDate>Wed, 23 Oct 2024 06:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/nosql-databases/key-value-stores/</guid>
      <description>In-Memory 데이터베이스는 데이터를 주 메모리(RAM)에 저장하고 관리하는 NoSQL 데이터베이스 시스템이다.</description>
    </item>
    <item>
      <title>Valkey</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/database-technologies/specialized-systems/in-memory/valkey/</link>
      <pubDate>Wed, 23 Oct 2024 01:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/database-technologies/specialized-systems/in-memory/valkey/</guid>
      <description>Valkey는 선택적 내구성을 갖춘 분산형 인메모리 키-값 데이터베이스, 캐시 및 메시지 브로커로 사용되는 오픈 소스 인메모리 스토리지.</description>
    </item>
    <item>
      <title>Octree</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/advanced-trees--graphs/spatial-data-structures/octree/</link>
      <pubDate>Fri, 11 Oct 2024 12:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/advanced-trees--graphs/spatial-data-structures/octree/</guid>
      <description>Octree는 3차원 공간을 재귀적으로 분할하여 표현하는 트리 기반의 데이터 구조로, 3차원 공간을 8개의 동일한 크기의 정육면체(옥탄트)로 재귀적으로 분할하는 트리 구조이다.</description>
    </item>
    <item>
      <title>BK-tree</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/advanced-trees--graphs/spatial-data-structures/bk-tree/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/advanced-trees--graphs/spatial-data-structures/bk-tree/</guid>
      <description>BK-Tree(Burkhard-Keller Tree)는 메트릭 공간(metric space)에서 효율적인 근사 검색을 위해 설계된 트리 기반 데이터 구조이다.  주로 레벤슈타인 거리(Levenshtein Distance)를 활용한 문자열 유사성 검색, 맞춤법 검사, DNA 시퀀스 분석에 활용된다.</description>
    </item>
    <item>
      <title>BSP Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/advanced-trees--graphs/spatial-data-structures/bsp-trees/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/advanced-trees--graphs/spatial-data-structures/bsp-trees/</guid>
      <description>BSP Tree는 공간을 재귀적으로 분할하여 표현하는 트리 구조의 데이터 구조로, 유클리드 공간을 초평면(hyperplane)을 기준으로 재귀적으로 분할하여 볼록 집합으로 나누는 기법을 트리 구조로 표현한 것</description>
    </item>
    <item>
      <title>K-d Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/advanced-trees--graphs/spatial-data-structures/k-d-trees/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/advanced-trees--graphs/spatial-data-structures/k-d-trees/</guid>
      <description>K-d Tree는 k차원 공간에서 점들을 효율적으로 저장하고 검색하기 위한 이진 트리 기반의 공간 분할 데이터 구조로, K-d Tree는 k차원 공간을 재귀적으로 분할하여 표현하는 이진 트리이다.</description>
    </item>
    <item>
      <title>Merkle Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/practical-applications/algorithm-applications/cryptography/merkle-trees/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/practical-applications/algorithm-applications/cryptography/merkle-trees/</guid>
      <description>머클 트리(Merkle Tree)는 암호화된 해시 값을 기반으로 데이터 무결성을 효율적으로 검증하는 트리 구조이다.  블록체인, 분산 시스템, 파일 전송 프로토콜 등에서 널리 활용되며, 데이터 변조 탐지와 검증 효율성이 핵심 강점이다.</description>
    </item>
    <item>
      <title>Quad Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/advanced-trees--graphs/spatial-data-structures/quad-tree/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/advanced-trees--graphs/spatial-data-structures/quad-tree/</guid>
      <description>Quad Tree는 2차원 공간을 재귀적으로 4개의 영역으로 분할하여 표현하는 트리 기반의 데이터 구조로, 각 노드가 정확히 4개의 자식 노드를 갖는 트리 구조이다.</description>
    </item>
    <item>
      <title>Rope</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/advanced-trees--graphs/specialized-trees/rope/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/advanced-trees--graphs/specialized-trees/rope/</guid>
      <description>Rope는 대규모 문자열을 효율적으로 저장하고 조작하기 위해 설계된 트리 기반의 데이터 구조</description>
    </item>
    <item>
      <title>Suffix Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/advanced-trees--graphs/specialized-trees/suffix-trees/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/advanced-trees--graphs/specialized-trees/suffix-trees/</guid>
      <description>Suffix Tree는 문자열의 모든 접미사를 효율적으로 저장하고 검색하는 특수한 트리 구조로, 문자열 처리와 패턴 매칭을 위해 사용되는 고급 데이터 구조이다.</description>
    </item>
    <item>
      <title>B 트리 (B-Trees)</title>
      <link>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/advanced-trees--graphs/self-balancing-trees/b-trees/</link>
      <pubDate>Fri, 11 Oct 2024 05:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures--algorithms/advanced-topics/advanced-trees--graphs/self-balancing-trees/b-trees/</guid>
      <description>균형 잡힌 트리 구조로, 대용량 데이터를 효율적으로 관리하는 데 사용되는 자료구조</description>
    </item>
  </channel>
</rss>
