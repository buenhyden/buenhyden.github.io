<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Architectural Styles on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/architectural-styles/</link>
    <description>Recent content in Architectural Styles on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Mon, 23 Jun 2025 02:57:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/architectural-styles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Message-Driven Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles/messaging-oriented-architecture/message-driven-architecture/</link>
      <pubDate>Mon, 23 Jun 2025 02:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles/messaging-oriented-architecture/message-driven-architecture/</guid>
      <description>Message-Driven Architecture 는 시스템 구성 요소들이 비동기 메시지 교환을 통해 상호작용하는 소프트웨어 아키텍처 패턴이다. 느슨한 결합 (Loose Coupling), 확장성 (Scalability), 탄력성 (Resilience) 을 제공하며, 분산 시스템에서 높은 처리량과 장애 허용성을 실현한다.</description>
    </item>
    <item>
      <title>Serverless Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/cloud-native-architecture/serverless-architecture/</link>
      <pubDate>Wed, 19 Mar 2025 12:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/cloud-native-architecture/serverless-architecture/</guid>
      <description>Serverless Architecture 는 개발자가 인프라 관리 없이 코드 (함수) 를 클라우드에 배포하고, 이벤트 기반으로 자동 실행·확장하며 **비용 효율성**, **운영 오버헤드 감소**, **빠른 시장 출시**를 달성하는 클라우드 네이티브 구성이며, FaaS 와 BaaS 가 핵심이다.</description>
    </item>
    <item>
      <title>Client Server Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles/distributed-architecture/client-server-architecture/</link>
      <pubDate>Thu, 26 Sep 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles/distributed-architecture/client-server-architecture/</guid>
      <description>Client‑Server Architecture 는 클라이언트가 요청 (request) 을 보내면 서버가 응답 (response) 하는 구조로, 역할과 책임을 분리하고 중앙화된 자원 관리, 보안성, 확장성을 제공한다. 웹, 데이터베이스, 이메일 시스템 등 대부분의 네트워크 기반 애플리케이션의 기본 모델이다.</description>
    </item>
  </channel>
</rss>
