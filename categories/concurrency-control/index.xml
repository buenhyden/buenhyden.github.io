<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Concurrency Control on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/concurrency-control/</link>
    <description>Recent content in Concurrency Control on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.150.1</generator>
    <language>en</language>
    <lastBuildDate>Tue, 23 Sep 2025 03:56:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/concurrency-control/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lock Duration</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-duration/</link>
      <pubDate>Tue, 23 Sep 2025 03:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-duration/</guid>
      <description>락 지속시간은 트랜잭션이 특정 자원 락을 획득한 시점부터 해제·커밋으로 풀릴 때까지의 보유 기간이다. 격리수준, 2PL(Strict/Rigorous 여부), MVCC와 키-범위락, 락 에스컬레이션·타임아웃, 애플리케이션 로직이 이를 좌우한다. 지속시간은 동시성, 지연, 데드락 확률, 로그·복구 비용에 직접 영향을 준다.</description>
    </item>
    <item>
      <title>Locking Protocols</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/locking-protocols/</link>
      <pubDate>Mon, 22 Sep 2025 04:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/locking-protocols/</guid>
      <description>락 프로토콜은 트랜잭션의 동시 접근을 제어해 일관성과 직렬성을 보장하는 규칙 집합이다. 대표적으로 Two-Phase Locking(공유·배타·업데이트·의도 락)과 범위 락이 있으며, MVCC·낙관적 기법과의 혼용으로 성능·무결성 간 트레이드오프를 관리한다.</description>
    </item>
    <item>
      <title>Lock Modes</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-modes/</link>
      <pubDate>Wed, 27 Aug 2025 06:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-modes/</guid>
      <description>락 모드는 자원 접근의 허용 범위를 규정해 일관성과 동시성을 관리한다. S/X/U와 Intent 계열은 계층적 락 조정에, gap/next-key/predicate 등 범위형 락은 팬텀을 방지한다. DBMS별 용어·정책 차이를 확인하고 트랜잭션 패턴에 맞춰 레벨·격리·인덱스를 조정하면 성능과 일관성 균형을 맞출 수 있다.</description>
    </item>
    <item>
      <title>MVCC(Multi-Version Concurrency Control, 다중 버전 동시성 제어)</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/optimistic-concurrency-control/versioning/mvcc/</link>
      <pubDate>Wed, 27 Aug 2025 06:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/optimistic-concurrency-control/versioning/mvcc/</guid>
      <description>MVCC는 트랜잭션마다 일관된 스냅샷을 제공하기 위해 데이터의 여러 버전을 유지하는 동시성 제어 방식이다. 읽기는 기존 버전을 읽어 비차단으로 처리되고, 쓰기는 새 버전을 생성해 커밋 시 가시성이 바뀐다. 높은 읽기 동시성과 낮은 락 경합을 제공하지만 버전 누적으로 인한 저장·GC 부담과 일부 격리 이상(issue)이 존재한다.</description>
    </item>
    <item>
      <title>Lock Granularity</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-granularity/</link>
      <pubDate>Tue, 12 Aug 2025 09:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-granularity/</guid>
      <description>잠금 세분성은 잠금을 적용하는 단위를 정의해 동시성 및 관리 오버헤드의 균형을 결정하는 핵심 설계 요소다. 세분화는 동시성을 높이나 메타데이터·추적 비용을 증가시키며, 의도잠금·계층적 잠금·에스컬레이션과 워크로드 기반 튜닝으로 실무적 트레이드오프를 관리한다.</description>
    </item>
    <item>
      <title>Locking</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/</link>
      <pubDate>Thu, 24 Oct 2024 15:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/</guid>
      <description>락킹은 동시 트랜잭션이 같은 데이터를 안전하게 다루게 하는 메커니즘으로, 공유·배타·의도락 등 다양한 모드와 행·페이지·테이블 단위로 접근을 제어한다. 2PL 계열은 직렬성을 보장하지만 데드락과 대기 비용이 생기므로 MVCC나 낙관적 기법과 조합해 성능·일관성의 균형을 맞춘다. 분산 환경에서는 네트워크·타임 동기 문제를 추가로 고려해야 한다.</description>
    </item>
    <item>
      <title>동시성 (Concurrency)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/basic-concepts/concurrency-vs-parallelism/concurrency/</link>
      <pubDate>Fri, 04 Oct 2024 06:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/basic-concepts/concurrency-vs-parallelism/concurrency/</guid>
      <description>동시성 (Concurrency)은 여러 작업이 동시에 실행되는 것처럼 보이지만, 실제로는 매우 빠르게 작업 간 전환을 하면서 처리하는 방식이다.</description>
    </item>
  </channel>
</rss>
