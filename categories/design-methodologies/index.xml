<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Design Methodologies on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/design-methodologies/</link>
    <description>Recent content in Design Methodologies on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.149.1</generator>
    <language>en</language>
    <lastBuildDate>Wed, 04 Jun 2025 13:42:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/design-methodologies/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Strategic Design</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/domain-modeling/domain-driven-design/strategic-design/</link>
      <pubDate>Wed, 04 Jun 2025 13:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/domain-modeling/domain-driven-design/strategic-design/</guid>
      <description>Strategic Design 은 DDD 내부에서 &amp;#39;무엇을&amp;#39; &amp;#39;왜&amp;#39; 만들지 결정하는 고수준 접근 방식이다. 복잡한 비즈니스 도메인의 핵심 (Subdomain/Core Domain) 을 정의하고 Bounded Context(경계 컨텍스트) 를 설정하며 Ubiquitous Language(공통 언어) 를 개발해 조직과 도메인 간 협업 기반을 마련하며 Context Map (컨텍스트 맵) 으로 시스템 전체 아키텍처를 관리한다.</description>
    </item>
    <item>
      <title>Tactical Design</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/domain-modeling/domain-driven-design/tactical-design/</link>
      <pubDate>Wed, 04 Jun 2025 13:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/domain-modeling/domain-driven-design/tactical-design/</guid>
      <description>전술적 설계 (Tactical Design) 는 **어떻게 구현할 것인가** 에 집중한다. 도메인 주도 설계 (DDD) 에서 전략적 설계로 정의된 도메인 모델을 실제 코드와 아키텍처로 구현하는 단계로, 단일 Bounded Context 내에서 Entity, Value Object, Aggregate, Repository, Factory, Domain Service 등 패턴을 적용해 **도메인 모델의 일관성, 트랜잭션 경계, 불변성, 도메인 규칙**을 구현한다.</description>
    </item>
    <item>
      <title>Domain-Driven Design</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/domain-modeling/domain-driven-design/</link>
      <pubDate>Thu, 26 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/domain-modeling/domain-driven-design/</guid>
      <description>Domain-Driven Design (DDD, 도메인 주도 설계) 는 복잡한 비즈니스 도메인을 중심으로 소프트웨어를 설계하는 방법론으로, 도메인 전문가와 개발자가 유비쿼터스 언어 (Ubiquitous Language) 를 통해 협력하여 도메인 모델을 구축하고, 바운디드 컨텍스트 (Bounded Context) 로 복잡성을 관리하며, 전략적 설계와 전술적 설계를 통해 유지보수 가능한 소프트웨어를 개발하는 접근법이다.</description>
    </item>
  </channel>
</rss>
