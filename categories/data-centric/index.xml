<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Data-Centric on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/data-centric/</link>
    <description>Recent content in Data-Centric on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.1</generator>
    <language>en</language>
    <lastBuildDate>Sun, 06 Jul 2025 10:14:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/data-centric/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Mesh Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/data-mesh-architecture/</link>
      <pubDate>Sun, 06 Jul 2025 10:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/data-mesh-architecture/</guid>
      <description>Data Mesh Architecture 는 도메인 중심의 탈중앙화된 데이터 관리 방식으로, 각 비즈니스 도메인이 자체 데이터를 제품으로 취급하며 소유권을 갖는 아키텍처이다. 셀프서비스 인프라와 연합 거버넌스를 통해 확장성과 민첩성을 제공하며, 전통적인 중앙집중형 데이터 플랫폼의 한계를 극복한다.</description>
    </item>
    <item>
      <title>Kappa Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/kappa-architecture/</link>
      <pubDate>Sun, 06 Jul 2025 10:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/kappa-architecture/</guid>
      <description>Kappa 아키텍처는 배치와 스트림 분리 없이 &amp;#34;모든 데이터를 스트림으로 처리&amp;#34; 하는 단일 레이어 방식이다. 단순성, 코드 통일성, 실시간 응답성을 확보하고 이벤트 재처리 방식으로 유연하게 대응하지만, 이력 분석 및 리플레이 처리 비용 등의 trade-off 가 존재한다.</description>
    </item>
    <item>
      <title>Lakehouse Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/lakehouse-architecture/</link>
      <pubDate>Sun, 06 Jul 2025 10:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/lakehouse-architecture/</guid>
      <description>Lakehouse Architecture는 데이터 레이크의 유연성과 비용 효율성을 데이터 웨어하우스의 성능 및 거버넌스 기능과 결합한 차세대 데이터 관리 아키텍처이다. 오픈 포맷 (Parquet, Delta Lake) 을 기반으로 구조화 및 비구조화 데이터를 단일 플랫폼에서 통합 관리하며, ACID 트랜잭션과 스키마 진화를 지원하여 실시간 분석과 머신러닝을 가능하게 한다.</description>
    </item>
    <item>
      <title>Lambda Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/lambda-architecture/</link>
      <pubDate>Sun, 06 Jul 2025 10:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/lambda-architecture/</guid>
      <description>Lambda Architecture 는 배치 처리 (Batch Processing) 와 실시간 스트림 처리 (Real-time Stream Processing) 를 결합하여 대용량 데이터를 효과적으로 처리하는 하이브리드 아키텍처 패턴이다. 배치 레이어 (Batch Layer), 스피드 레이어 (Speed Layer), 서빙 레이어 (Serving Layer) 세 계층으로 구성되어 높은 처리량과 낮은 지연시간을 동시에 제공한다.</description>
    </item>
  </channel>
</rss>
