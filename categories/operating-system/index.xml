<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Operating System</title><link>https://buenhyden.github.io/categories/operating-system/</link><description>Recent content in Operating System on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 16 Jan 2025 08:24:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/categories/operating-system/index.xml" rel="self" type="application/rss+xml"/><item><title>Operating System</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/</link><pubDate>Sun, 22 Sep 2024 17:13:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/</guid><description>
&lt;h2>Operating System&lt;/h2>&lt;p>컴퓨터 하드웨어와 소프트웨어 자원을 관리하고 다양한 서비스를 제공하는 소프트웨어.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/conceptual_view.jpg"
alt="Operating System"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.tutorialspoint.com/operating_system/os_overview.htm" target="_blank" rel="noopener">https://www.tutorialspoint.com/operating_system/os_overview.htm&lt;/a> _&lt;/p>
&lt;h3>특성&lt;/h3>&lt;ul>
&lt;li>동시성: 여러 작업을 동시에 처리할 수 있음&lt;/li>
&lt;li>하드웨어 추상화: 하드웨어 세부사항을 숨기고 일관된 인터페이스 제공&lt;/li>
&lt;li>자원 할당: 시스템 자원을 효율적으로 관리하고 할당&lt;/li>
&lt;li>가상화: 가상 메모리와 가상 CPU 생성&lt;/li>
&lt;li>보안: 무단 접근 방지 및 데이터 보호&lt;/li>
&lt;li>결함 허용: 하드웨어 및 소프트웨어 오류 처리&lt;/li>
&lt;/ul>
&lt;h3>주요 기능&lt;/h3>&lt;ul>
&lt;li>프로세스 관리: 프로세스 생성, 실행, 종료 관리하며 프로세스 간 통신을 지원&lt;/li>
&lt;li>메모리 관리: 메모리 할당 및 해제를 관리하고 가상 메모리를 구현&lt;/li>
&lt;li>파일 시스템 관리: 파일 저장, 검색, 조직화&lt;/li>
&lt;li>장치 관리: 입출력 장치 제어 및 드라이버 관리&lt;/li>
&lt;li>사용자 인터페이스 제공: GUI 또는 CLI 제공&lt;/li>
&lt;li>보안 및 보호: 데이터 및 시스템 보호&lt;/li>
&lt;li>네트워킹: 네트워크 통신 지원&lt;/li>
&lt;/ul>
&lt;h3>운영체제의 목적&lt;/h3>&lt;p>운영체제는 다음과 같은 주요 목적을 가지고 있다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>사용자 편의성 제공&lt;/strong>: 복잡한 하드웨어를 추상화하여 사용하기 쉽게 만든다.&lt;/li>
&lt;li>&lt;strong>자원 효율성 최대화&lt;/strong>: 시스템 자원을 효율적으로 관리하고 할당한다.&lt;/li>
&lt;li>&lt;strong>시스템 신뢰성 보장&lt;/strong>: 안정적인 시스템 운영을 보장한다.&lt;/li>
&lt;/ol>
&lt;h3>계층적 디자인&lt;/h3>&lt;p>운영체제는 다음과 같은 계층 구조로 설계되어 있다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>하드웨어 계층&lt;/strong>: CPU, 메모리, 디스크 등 물리적 자원&lt;/li>
&lt;li>&lt;strong>커널 계층&lt;/strong>: 운영체제의 핵심 기능을 수행&lt;/li>
&lt;li>&lt;strong>시스템 콜 계층&lt;/strong>: 사용자 프로그램과 커널 간의 인터페이스&lt;/li>
&lt;li>&lt;strong>사용자 계층&lt;/strong>: 응용 프로그램과 사용자 인터페이스&lt;/li>
&lt;/ol>
&lt;h3>구성 요소&lt;/h3>&lt;p>운영체제의 주요 구성 요소는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>커널(Kernel)&lt;/strong>: 운영체제의 핵심 부분으로, 자원 관리와 하드웨어 제어를 담당.&lt;/li>
&lt;li>&lt;strong>쉘(Shell)&lt;/strong>: 사용자와 커널 사이의 인터페이스를 제공.&lt;/li>
&lt;li>&lt;strong>파일 시스템&lt;/strong>: 데이터의 저장과 관리를 담당.&lt;/li>
&lt;li>&lt;strong>장치 드라이버&lt;/strong>: 하드웨어 장치와의 통신을 담당.&lt;/li>
&lt;/ol>
&lt;h3>운영체제의 유형&lt;/h3>&lt;ol>
&lt;li>
&lt;p>배치 처리 시스템 (Batch Operating System)&lt;br>
초기 컴퓨터 시스템에서 사용된 이 방식은 유사한 작업들을 그룹으로 모아서 연속적으로 처리한다.&lt;br>
예를 들어, 급여 계산이나 재고 관리와 같은 대량의 반복적인 작업을 처리할 때 효율적이다.&lt;br>
사용자와의 상호작용은 최소화되어 있으며, 작업이 시작되면 중간에 개입할 수 없다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>멀티프로그래밍 시스템 (Multiprogramming Operating System)&lt;br>
CPU 사용률을 최대화하기 위해 여러 프로그램을 메모리에 동시에 유지하면서 실행하는 시스템.&lt;br>
한 프로그램이 I/O 작업을 수행할 때 다른 프로그램이 CPU를 사용할 수 있게 하여 자원 활용도를 높인다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>멀티프로세싱 시스템 (Multiprocessing Operating System)&lt;br>
두 개 이상의 프로세서를 사용하여 병렬 처리를 수행하는 시스템.&lt;br>
현대의 대부분의 컴퓨터가 이 방식을 사용하며, 하나의 프로세서가 실패하더라도 시스템이 계속 동작할 수 있는 장점이 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>멀티태스킹 시스템 (Multitasking Operating System)&lt;br>
여러 작업을 동시에 수행하는 것처럼 보이게 하는 시스템.&lt;br>
실제로는 CPU가 매우 빠른 속도로 작업들을 번갈아가며 실행한다.&lt;br>
현대의 Windows, macOS, Linux가 이에 해당한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>시분할 시스템 (Time-Sharing Operating System)&lt;br>
여러 사용자가 동시에 컴퓨터를 사용할 수 있게 하는 시스템.&lt;br>
CPU 시간을 작은 단위로 나누어 각 사용자에게 할당한다.&lt;br>
초기 메인프레임 컴퓨터에서 많이 사용되었다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>분산 운영체제 (Distributed Operating System)&lt;br>
여러 컴퓨터의 자원을 네트워크로 연결하여 하나의 시스템처럼 사용할 수 있게 하는 시스템.&lt;br>
클라우드 컴퓨팅 환경에서 많이 사용된다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>네트워크 운영체제 (Network Operating System)&lt;br>
네트워크로 연결된 다른 컴퓨터의 자원을 사용할 수 있게 해주는 시스템.&lt;br>
서버-클라이언트 모델을 기반으로 동작한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>실시간 운영체제 (Real-Time Operating System)&lt;br>
정해진 시간 내에 작업 완료를 보장하는 시스템.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4>운영체제 유형 비교&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>운영 체제 유형&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>주요 특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>사용 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>배치 운영 체제&lt;/td>
&lt;td>유사한 작업을 그룹화하여 일괄 처리하는 시스템&lt;/td>
&lt;td>• 작업 그룹화&lt;br>• 순차적 실행&lt;br>• 운영자 개입 최소화&lt;/td>
&lt;td>• 자원 효율성 높음&lt;br>• 대량 작업 처리에 적합&lt;/td>
&lt;td>• 상호작용 부족&lt;br>• 긴 대기 시간&lt;/td>
&lt;td>• 급여 시스템&lt;br>• 은행 거래 명세서 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>다중 프로그래밍 운영 체제&lt;/td>
&lt;td>여러 프로그램을 메모리에 동시에 로드하여 실행하는 시스템&lt;/td>
&lt;td>• 동시 프로그램 실행&lt;br>• CPU 활용도 최적화&lt;/td>
&lt;td>• 처리량 증가&lt;br>• 자원 활용도 향상&lt;/td>
&lt;td>• 복잡한 메모리 관리&lt;br>• 프로세스 간 간섭 가능성&lt;/td>
&lt;td>• 서버 환경&lt;br>• 대형 컴퓨터 시스템&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>다중 처리 운영 체제&lt;/td>
&lt;td>여러 프로세서를 사용하여 작업을 병렬 처리하는 시스템&lt;/td>
&lt;td>• 병렬 처리&lt;br>• 부하 분산&lt;/td>
&lt;td>• 성능 향상&lt;br>• 신뢰성 증가&lt;/td>
&lt;td>• 복잡한 설계&lt;br>• 높은 구현 비용&lt;/td>
&lt;td>• 슈퍼컴퓨터&lt;br>• 고성능 서버&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>다중 작업 운영 체제&lt;/td>
&lt;td>여러 작업을 동시에 실행하는 시스템&lt;/td>
&lt;td>• 작업 전환&lt;br>• 시분할&lt;/td>
&lt;td>• 사용자 반응성 향상&lt;br>• 자원 공유 효율화&lt;/td>
&lt;td>• 컨텍스트 전환 오버헤드&lt;br>• 복잡한 스케줄링&lt;/td>
&lt;td>• 데스크톱 컴퓨터&lt;br>• 워크스테이션&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>시분할 운영 체제&lt;/td>
&lt;td>CPU 시간을 여러 사용자나 작업에 분할하여 할당하는 시스템&lt;/td>
&lt;td>• 빠른 응답 시간&lt;br>• 대화형 컴퓨팅&lt;/td>
&lt;td>• 다중 사용자 지원&lt;br>• 자원 공유 효율성&lt;/td>
&lt;td>• 보안 위험&lt;br>• 성능 저하 가능성&lt;/td>
&lt;td>• 클라우드 컴퓨팅 환경&lt;br>• 대학 컴퓨터 실습실&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>분산 운영 체제&lt;/td>
&lt;td>네트워크로 연결된 여러 컴퓨터에서 작동하는 시스템&lt;/td>
&lt;td>• 자원 공유&lt;br>• 확장성&lt;/td>
&lt;td>• 높은 신뢰성&lt;br>• 성능 향상&lt;/td>
&lt;td>• 복잡한 구현&lt;br>• 네트워크 의존성&lt;/td>
&lt;td>• 클러스터 컴퓨팅&lt;br>• 그리드 컴퓨팅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>네트워크 운영 체제&lt;/td>
&lt;td>네트워크 자원 관리에 특화된 시스템&lt;/td>
&lt;td>• 네트워크 프로토콜 지원&lt;br>• 원격 접속 기능&lt;/td>
&lt;td>• 자원 공유 용이&lt;br>• 중앙 관리 효율성&lt;/td>
&lt;td>• 네트워크 의존성&lt;br>• 보안 취약점&lt;/td>
&lt;td>• 기업 네트워크&lt;br>• 파일 서버&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실시간 운영 체제&lt;/td>
&lt;td>시간 제약이 엄격한 작업을 처리하는 시스템&lt;/td>
&lt;td>• 빠른 응답 시간&lt;br>• 예측 가능한 동작&lt;/td>
&lt;td>• 높은 신뢰성&lt;br>• 정확한 타이밍&lt;/td>
&lt;td>• 제한된 기능&lt;br>• 복잡한 설계&lt;/td>
&lt;td>• 로봇 제어 시스템&lt;br>• 의료 기기&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3>참고 및 출처&lt;/h3></description></item><item><title>Linux Basic Command</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-basic-command/</link><pubDate>Tue, 15 Oct 2024 15:39:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-basic-command/</guid><description>
&lt;h2>Linux Command&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Command&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>pwd&lt;/td>
&lt;td>현재 위치 출력&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>ls&lt;/td>
&lt;td>현재 디렉터리 내의 파일과 디렉터리 출력&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>cd&lt;/td>
&lt;td>디렉터리 이동&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>mkdir&lt;/td>
&lt;td>디렉터리 생성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>cp&lt;/td>
&lt;td>파일 또는 디렉터리 복사&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>mv&lt;/td>
&lt;td>파일 또는 디렉터리 이동&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>rm&lt;/td>
&lt;td>파일 또는 디렉터리 삭제&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>cat&lt;/td>
&lt;td>파일 내용을 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9&lt;/td>
&lt;td>touch&lt;/td>
&lt;td>빈 파일을 생성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10&lt;/td>
&lt;td>echo&lt;/td>
&lt;td>문자열 화면에 표시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>11&lt;/td>
&lt;td>ip addr/ifconfig&lt;/td>
&lt;td>IP 정보 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>12&lt;/td>
&lt;td>ss&lt;/td>
&lt;td>네트워크 상태 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>13&lt;/td>
&lt;td>nc&lt;/td>
&lt;td>서버의 포트 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>14&lt;/td>
&lt;td>which, whereis, locate&lt;/td>
&lt;td>명령어 위치 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>15&lt;/td>
&lt;td>tail&lt;/td>
&lt;td>파일의 마지막 부분 확인하기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16&lt;/td>
&lt;td>find&lt;/td>
&lt;td>파일이나 디렉터리 찾기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>17&lt;/td>
&lt;td>ps&lt;/td>
&lt;td>현재 실행 중인 프로세스 목록과 상태 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>18&lt;/td>
&lt;td>grep&lt;/td>
&lt;td>주어진 입력값에서 패턴에 맞는 값 출력&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>19&lt;/td>
&lt;td>kill&lt;/td>
&lt;td>프로세스 종료&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>20&lt;/td>
&lt;td>alias&lt;/td>
&lt;td>명령어 별칭 만들기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>21&lt;/td>
&lt;td>vi / vim&lt;/td>
&lt;td>편집기&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Pwd&lt;/h3>&lt;ul>
&lt;li>work directory의 약자로 작업 중인 디렉터리를 보여줌&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">pwd&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/Users/hyden&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Ls&lt;/h3>&lt;ul>
&lt;li>list segments의 약자로 현재 디렉터리의 파일과 디렉터리를 보여준다.&lt;/li>
&lt;li>보통 단독으로 잘 사용하지 않고 a,l 등의 옵션과 함께 사용&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ls -l&lt;/td>
&lt;td>파일들의 상세 정보를 보여줌&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ls -a&lt;/td>
&lt;td>숨김 파일 표시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ls -t&lt;/td>
&lt;td>최신 파일부터 표시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ls -rt&lt;/td>
&lt;td>오래된 파일부터 표시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ls -F&lt;/td>
&lt;td>파일을 표시할 때 파일의 타입을 나타내는 문자열을 표시(/ 디렉터리, * 실행파일, @심볼릭 링크)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ls -R&lt;/td>
&lt;td>하위 디렉터리의 내용까지 표시&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>보통은 위 옵셥들을 조합해 ls -al, ls -alt, ls -altF 등으로 사용&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ls -altF
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total &lt;span class="m">95340&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-x--- &lt;span class="m">28&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">29&lt;/span> 12:34 ./
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">326035&lt;/span> Oct &lt;span class="m">29&lt;/span> 12:34 .zsh_history
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwx------ &lt;span class="m">8&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">29&lt;/span> 12:34 .cache/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">33&lt;/span> Oct &lt;span class="m">27&lt;/span> 16:40 .lesshst
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">25052&lt;/span> Oct &lt;span class="m">27&lt;/span> 16:39 .bash_history
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">38160&lt;/span> Oct &lt;span class="m">27&lt;/span> 16:32 .viminfo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwx------ &lt;span class="m">6&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">27&lt;/span> 15:50 .config/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwx------ &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">27&lt;/span> 15:36 .ssh/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">287&lt;/span> Oct &lt;span class="m">27&lt;/span> 13:34 .wget-hsts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">117120&lt;/span> Oct &lt;span class="m">27&lt;/span> 12:31 .zcompdump-devserver-5.8.1.zwc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">50720&lt;/span> Oct &lt;span class="m">27&lt;/span> 12:31 .zcompdump-devserver-5.8.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">49203&lt;/span> Oct &lt;span class="m">27&lt;/span> 12:31 .zcompdump
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-x--- &lt;span class="m">6&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">26&lt;/span> 16:20 istio-1.18.2/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x &lt;span class="m">12&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">26&lt;/span> 14:30 .oh-my-zsh/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">4789&lt;/span> Oct &lt;span class="m">26&lt;/span> 14:30 .zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x &lt;span class="m">9&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">23&lt;/span> 13:01 .minikube/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">3919&lt;/span> Oct &lt;span class="m">20&lt;/span> 17:47 .bashrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">2313&lt;/span> Oct &lt;span class="m">5&lt;/span> 12:49 kubeconfig.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">19&lt;/span> 12:52 lang_test/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">18&lt;/span> 20:27 .ncloud/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x &lt;span class="m">5&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">11&lt;/span> 19:06 pybind11/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">8&lt;/span> 16:25 data/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">151&lt;/span> Sep &lt;span class="m">8&lt;/span> 15:59 .python_history
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">1452216&lt;/span> Sep &lt;span class="m">7&lt;/span> 18:59 libboost_regex.so.1.58.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">6&lt;/span> 14:35 test/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">4&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">6&lt;/span> 14:28 ffmpeg/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Aug &lt;span class="m">30&lt;/span> 16:00 dockerbuild/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x &lt;span class="m">8&lt;/span> root root &lt;span class="m">4096&lt;/span> Aug &lt;span class="m">30&lt;/span> 10:50 ../
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">435&lt;/span> Aug &lt;span class="m">3&lt;/span> 17:05 default-user-config.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-x--- &lt;span class="m">3&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Aug &lt;span class="m">3&lt;/span> 15:30 .kube/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">5&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Aug &lt;span class="m">3&lt;/span> 14:47 manage_kubernetes/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">84&lt;/span> Aug &lt;span class="m">2&lt;/span> 18:54 .bash_profile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">508&lt;/span> Aug &lt;span class="m">2&lt;/span> 18:53 ncp-iam-authenticator.sha256
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rwxrwxr-x &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">11665408&lt;/span> Aug &lt;span class="m">2&lt;/span> 18:53 ncp-iam-authenticator*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rwx------ &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">11345&lt;/span> Aug &lt;span class="m">2&lt;/span> 10:13 get_helm.sh*&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>심볼릭 링크(symbolic link): 원본 파일을 가리키도록 링크만 연결. 윈도우의 바로가기 링크와 같은 개념&lt;/li>
&lt;/ul>
&lt;h3>Cd&lt;/h3>&lt;ul>
&lt;li>change directory의 약자로 디렉터리 이동시 사용하는 명령어&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>cd ~&lt;/td>
&lt;td>홈 디렉터리로 이동&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cd..&lt;/td>
&lt;td>상위 디렉터리로 이동. cd../../ 같은 식으로 여러 단계를 한 번에 이동 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cd /dir&lt;/td>
&lt;td>절대 경로를 지정해 이동 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cd -&lt;/td>
&lt;td>바로 전의 디렉터리로 이동&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Mkdir&lt;/h3>&lt;ul>
&lt;li>make directory의 약자로 디렉터리를 만들 때 사용&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># &amp;lt;이름&amp;gt;의 디렉터리를 현재 디렉터리에 만든다&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mkdir &amp;lt;이름&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>절대 경로를 지정하여 만들 수도 있다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># &amp;lt;이름&amp;gt;의 디렉터리를 절대 경로의 디렉터리에 만든다&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mkdir /home/hyden/&amp;lt;이름&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>-p 옵션으로 하위 디렉터리까지 한 번에 생성할 수 있다&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mkdir -p &amp;lt;디렉터리명&amp;gt;/&amp;lt;하위 디렉터리명&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Cp&lt;/h3>&lt;ul>
&lt;li>copy의 약자로 파일 또는 디렉터리를 복사할 때 사용&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># source를 target으로 복사&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cp &lt;span class="nb">source&lt;/span> target
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># target 파일의 이미 있는 경우 덮어쓰기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cp -f &lt;span class="nb">source&lt;/span> target
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 디렉터리를 복사할 때 사용. 하위 디렉터리도 모두 복사하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cp -R sourceDir targetDir&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Mv&lt;/h3>&lt;ul>
&lt;li>move의 약자로 파일 또는 디렉터리의 위치를 옮길 때 사용. 혹은 이름을 변경할 때도 사용&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile 이름을 bfile로 변경&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mv afile bfile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile을 상위 디렉터리로 옮김&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mv afile ../
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile을 /opt 이하 디렉터리로 옮김&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mv afile /opt/&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Rm&lt;/h3>&lt;ul>
&lt;li>remove의 약자로 파일 또는 디렉터리를 삭제할 때 사용&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile을 삭제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ rm afile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 디렉터리 adir을 삭제. 삭제 시 확인을 함&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ rm -r adir
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 디렉터리 adir을 삭제. 삭제 시 확인 안 함&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ rm -rf adir
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># txt로 끝나는 모든 파일을 삭제할지 물어보면서 삭제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ rm -i *.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Cat&lt;/h3>&lt;ul>
&lt;li>catenate의 약자로 파일의 내용을 확인할 때 사용.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># test.txt 파일의 내용을 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cat test.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Touch&lt;/h3>&lt;ul>
&lt;li>touch는 빈 파일을 생성. 혹은 파일의 날짜와 시간을 수정할 때 사용한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile을 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ touch afile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile의 시간을 현재 시간으로 갱신&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ touch -c afile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># bfile의 날짜 정보를 afile의 정보와 동일하게 변경&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ touch -r afile bfile&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Echo&lt;/h3>&lt;ul>
&lt;li>echo는 어떤 문자열을 화면에 보여줄 때 사용. echo와 리다이렉션을 사용해 파일을 생성, 추가하는 작업을 많이 한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># helloworld 출력&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;helloworld&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 패스로 지정된 문자열을 출력&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$PATH&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 이스케이프 문자열을 해석&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> -e 문자열
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 개행을 표시할 수 있음&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;안녕하세요\n이렇게 하면\n새 줄이생겨요&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ls와 유사하게 현재 디렉터리의 파일과 폴더를 출력&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 리다이렉션 &amp;#39;&amp;gt;&amp;#39;을 사용해 hello.txt 파일 생성. 파일 내용에는 echo로 표시되는 내용이 들어감&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> hello redirection &amp;gt; hello.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 추가 연산자 &amp;gt;&amp;gt;를 사용해 기존 파일에 문자열 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> hello2 &amp;gt;&amp;gt; hello.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Ip addr/ifconfig&lt;/h3>&lt;ul>
&lt;li>접속한 리눅스의 IP 정보를 알아낼 때 사용.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ip addr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span class="m">65536&lt;/span> qdisc noqueue state UNKNOWN group default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">qlen &lt;span class="m">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet 127.0.0.1/8 scope host lo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class="m">1500&lt;/span> qdisc pfifo_fast state UP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">group default qlen &lt;span class="m">50000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">link/ether fa:16:3e:5d:0b:d7 brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet 10.201.1.10/16 brd 10.202.255.255 scope global eth0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">valid_lft forever preferred_lft forever&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>ip addr이 설치되어 있지 않은 경우에는 ifconfig를 사용.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ifconfig
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">eth0 Link encap:Ethernet HWaddr 06:4d:de:ae:a8:50
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet addr:172.31.27.212 Bcast:172.31.31.255 Mask:255.255.240.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet6 addr: fe80::44d:deff:feae:a850/64 Scope:Link
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">UP BROADCAST RUNNING MULTICAST MTU:9001 Metric:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RX packets:68903966 errors:0 dropped:0 overruns:0 frame:0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">TX packets:75295223 errors:0 dropped:0 overruns:0 carrier:0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">collisions:0 txqueuelen:1000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RX bytes:15691124260 &lt;span class="o">(&lt;/span>15.6 GB&lt;span class="o">)&lt;/span> TX bytes:42265387295 &lt;span class="o">(&lt;/span>42.2 GB&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lo Link encap:Local Loopback
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet addr:127.0.0.1 Mask:255.0.0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet6 addr: ::1/128 Scope:Host
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">UP LOOPBACK RUNNING MTU:65536 Metric:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RX packets:6623596 errors:0 dropped:0 overruns:0 frame:0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">TX packets:6623596 errors:0 dropped:0 overruns:0 carrier:0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">collisions:0 txqueuelen:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RX bytes:349206971 &lt;span class="o">(&lt;/span>349.2 MB&lt;span class="o">)&lt;/span> TX bytes:349206971 &lt;span class="o">(&lt;/span>349.2 MB&lt;span class="o">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Ss&lt;/h3>&lt;ul>
&lt;li>socket statistics의 약자로 네트워크 상태를 확인하는 데 사용.&lt;/li>
&lt;li>nestat과 동일. 옵션으로 a, t, u, l, p, n 등이 있다.&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ss -a&lt;/td>
&lt;td>모든 포트 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ss -t&lt;/td>
&lt;td>TCP 포트 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ss -u&lt;/td>
&lt;td>UDP 포트 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ss -l&lt;/td>
&lt;td>LISTEN 상태 포트 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ss -p&lt;/td>
&lt;td>프로세스 표시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ss -n&lt;/td>
&lt;td>호스트, 포트, 사용자명을 숫자로 표시&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>TCP 포트 중 LISTEN 상태인 포트의 번호를 알고 싶을 때 다음과 같이.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ss -tln
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LISTEN &lt;span class="m">0&lt;/span> &lt;span class="m">511&lt;/span> *:443 *:*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LISTEN &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span> 127.0.0.1:8006 *:*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LISTEN &lt;span class="m">0&lt;/span> &lt;span class="m">511&lt;/span> *:80 *:*&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Nc&lt;/h3>&lt;ul>
&lt;li>netcat의 약자로 예전에는 포트가 열렸는지 확인하는 데 사용.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 포트가 오픈됐는지 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ nc IP주소 포트
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 더 자세한 정보가 남음&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ nc -v IP주소 포트
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 현재 서버의 포트를 오픈(방화벽에 해당 포트 번호가 설정 함)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ nc -l 포트&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Which, Whereis, Locate&lt;/h3>&lt;ul>
&lt;li>which는 특정 명령어의 위치를 찾아줌.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ which git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/local/bin/git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># which -a : 검색 가능한 모든 경로에서 명령어를 찾아준다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ which -a git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/local/bin/git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/bin/git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># where : which -a와 같다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ where git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/local/bin/git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/bin/git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># whereis는 실행 파일, 소스, man 페이지의 파일을 찾아준다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ whereis ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh: /usr/bin/ssh /usr/share/man/man1/ssh.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># locate는 파일명을 패턴으로 빠르게 찾아준다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 아래 예제는 .java 파일을 찾아주는 명령.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ locate *.java&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Tail&lt;/h3>&lt;ul>
&lt;li>tail은 파일의 마지막 부분을 보여준다. 이와 반대로 head는 파일의 첫 부분을 보여준다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일의 마지막 라인부터 숫자만큼의 파일의 라인 수를 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tail -n &lt;span class="o">{&lt;/span>숫자&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>파일경로&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 숫자로 지정한 라인부터 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tail -n +&lt;span class="o">{&lt;/span>숫자&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>파일경로&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일의 마지막 라인부터 숫자로 지정한 바이트 수 만큼 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tail -c &lt;span class="o">{&lt;/span>숫자&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>파일경로&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Ctrl + C로 중단하기 전까지 지정한 파일의 마지막에 라인이 추가되면 계속 출력하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tail -f &lt;span class="o">{&lt;/span>파일경로&lt;span class="o">}&lt;/span> :
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일의 마지막 라인부터 지정한 숫자만큼을&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># {초}로 지정한 시간이 지날 때마다 리프레시해서 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tail -n &lt;span class="o">{&lt;/span>숫자&lt;span class="o">}&lt;/span> -s &lt;span class="o">{&lt;/span>초&lt;span class="o">}&lt;/span> -f &lt;span class="o">{&lt;/span>파일경로&lt;span class="o">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Find&lt;/h3>&lt;ul>
&lt;li>find는 명령어의 뜻 그대로 파일이나 디렉터리를 찾는 데 사용하는 명령어.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 확장자 명으로 찾기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -name &lt;span class="s1">&amp;#39;*.bak&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 디렉터리를 지정해 찾기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -path &lt;span class="s1">&amp;#39;**/검색 시 사용하는 디렉터리명/**.*.js&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일명을 패턴으로 찾기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -name &lt;span class="s1">&amp;#39;*패턴*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일명을 패턴으로 찾되 특정 경로는 제외하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -name &lt;span class="s1">&amp;#39;*.py&amp;#39;&lt;/span> -not -path &lt;span class="s1">&amp;#39;*/site-packates/*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일을 찾은 다음 명령어 실행하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -name &lt;span class="s1">&amp;#39;*.ext&amp;#39;&lt;/span> -exec wc -l &lt;span class="o">{}&lt;/span> &lt;span class="se">\;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 최근 7일간 수정된 파일을 찾고 삭제하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -daystart -mtime -7 -delete
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 0바이트인 파일을 찾고 삭제하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -type f -empty -delete&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Ps&lt;/h3>&lt;ul>
&lt;li>현재 실행 중인 프로세스 목록과 상태를 보여준다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 실행 중인 모든 프로세스를 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ps aux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 실행 중인 모든 프로세스를 전체 커맨드를 포함해 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ps auxww
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 특정 문자열과 매칭되는 프로세스 찾기(grep은 바로 다음에 나옵니다)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ps aus &lt;span class="p">|&lt;/span> grep &lt;span class="o">{&lt;/span>패턴&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 메모리 사용량에 따라 정렬하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ps --sort size&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>ps와 grep을 pipe로 사용하여 현재 실행 중인 프로세스 목록중 특정 명칭을 포함하는 프로세스를 찾는 식으로 사용하기도 한다.&lt;/li>
&lt;/ul>
&lt;h3>Grep&lt;/h3>&lt;ul>
&lt;li>grep은 입력에서 패턴에 매칭되는 내용을 찾는 명령어.&lt;/li>
&lt;li>grep이라는 이름은 ed의 명령어인 g/re/p(내용 전체를 정규식으로 찾은 다음 프린트하라: globally search for a regular expression and print matching lines)에서 왔음.&lt;/li>
&lt;li>보통 find, ps 등과 조합해 사용.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일에서 특정 패턴을 만족하는 부분 찾기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ grep &lt;span class="s2">&amp;#34;패턴&amp;#34;&lt;/span> 파일경로
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일명과 라인을 함께 표시하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ grep --with-filename --line-number &lt;span class="s2">&amp;#34;패턴&amp;#34;&lt;/span> 파일경로
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 매칭하지 않는 부분 표시하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ grep --invert-match &lt;span class="s2">&amp;#34;패턴&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># cat과 함께 사용하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cat 파일경로 &lt;span class="p">|&lt;/span> grep &lt;span class="s2">&amp;#34;패턴&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Kill&lt;/h3>&lt;ul>
&lt;li>프로세스를 죽이는 명령어&lt;/li>
&lt;li>프로세스를 죽인다고는 하지만 원리는 프로세스에 중지하라는 시그널을 보내는 것&lt;/li>
&lt;li>SIGKILL, SIGSTOP은 강제 종료이며 나머지는 정상적으로 종료.&lt;/li>
&lt;li>프로세스 아이디는 ps 명령어로 알아낼 수 있다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># kill에서 사용할 수 있는 시그널 표시하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">kill&lt;/span> -l
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 프로세스 죽이기 SIGTERM(terminate)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">kill&lt;/span> 프로세스ID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 백그라운드 잡 종료시키기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">kill&lt;/span> &lt;span class="o">{&lt;/span>잡ID&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 프로세스 강제 종료&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">kill&lt;/span> -9 &lt;span class="p">|&lt;/span> KILL 프로세스ID&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Alias&lt;/h3>&lt;ul>
&lt;li>alias를 사용하면 줄여서 사용할 수 있다&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 모든 alias 표시하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># alias 만들기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 예) alias ll=&amp;#34;ls -al&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> &lt;span class="nv">단어&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;명령&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># cd ../..을 cd …으로 줄여 쓰기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># cd ../../../은 cd ….으로 가능&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> ...&lt;span class="o">=&lt;/span>../..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> ....&lt;span class="o">=&lt;/span>../../..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> .....&lt;span class="o">=&lt;/span>../../../..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> ......&lt;span class="o">=&lt;/span>../../../../..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># alias 삭제하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">unalias&lt;/span> 단어&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Vi / Vim&lt;/h3>&lt;ul>
&lt;li>vi 혹은 vim은 대부분의 리눅스에 기본적으로 설치되어 있는 텍스트 에디터&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vi test.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2>&lt;p>&lt;a href="https://yozm.wishket.com/magazine/detail/2103/" target="_blank" rel="noopener">백엔드 개발자라면 알아야 할 리눅스 필수 명령어 21개&lt;/a>&lt;/p></description></item><item><title>Linux Permission</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-permission/</link><pubDate>Tue, 15 Oct 2024 15:39:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-permission/</guid><description>
&lt;h2>Linux Permission&lt;/h2>&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Linux/linux-permissions.jpg"
alt="Linux Permissions"
loading="lazy" />
&lt;/figure>&lt;br>
&lt;em>source: &lt;a href="https://medium.com/@usamashafique00786/day-4-task-linux-permissions-and-access-control-lists-ef59cebf9324" target="_blank" rel="noopener">https://medium.com/@usamashafique00786/day-4-task-linux-permissions-and-access-control-lists-ef59cebf9324&lt;/a>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>File type: 파일 유형&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>normal file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>d&lt;/td>
&lt;td>directory&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>l&lt;/td>
&lt;td>link&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>p&lt;/td>
&lt;td>named pipe&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>s&lt;/td>
&lt;td>socket&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>c&lt;/td>
&lt;td>character device&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>b&lt;/td>
&lt;td>block device&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>
&lt;p>Permissions: 각 파일에 접근해서 읽거나 쓰거나 실행할 권리를 갖는 소유자 / 그룹 / 다른 사용자로 나눠서 관리&lt;br>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Linux/Files-permissions-and-ownership-basics-in-Linux.png"
alt="Linux Permission"
loading="lazy" />
&lt;/figure>&lt;br>
&lt;em>source: &lt;a href="https://pamirwebhost.com/check-linux-file-permissions-with-ls/" target="_blank" rel="noopener">https://pamirwebhost.com/check-linux-file-permissions-with-ls/&lt;/a>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Permission은 3개로 나눠서 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>User&lt;/td>
&lt;td>파일을 만든 소유주&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Group&lt;/td>
&lt;td>파일을 만든 소유주가 속한 그룹&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Other&lt;/td>
&lt;td>기타 사용자&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Permission은 4가지에 대하여 구분&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">Permission&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">&lt;/td>
&lt;td>파일&lt;/td>
&lt;td>디렉토리&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">r&lt;/td>
&lt;td>파일에 대한 읽기 권한.&lt;/br>열기, 읽기 허용&lt;/td>
&lt;td>디렉토리 내의 파일을 나열할 수 있게 허용&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">w&lt;/td>
&lt;td>파일에 대한 쓰기 권한.&lt;/br>쓰기, 잘라내기 허용.&lt;/br>이름 변경이나 파일 삭제 허용되지 않음. 파일 삭제나 파일 이름 변경 디렉토리 속성에 의해 결정&lt;/td>
&lt;td>디렉토리 내의 파일들을 생성, 삭제, 이름 변경이 가능하도록 허용&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">x&lt;/td>
&lt;td>파일에 대한 실행 권한.&lt;/br>파일이 프로그램으로 처리되고 파일이 실행되도록 허용.&lt;/br>스크립트 언어에서 작성된 프로그램 파일들은 읽기 가능으로 설정 되어 있어야만 실행 가능&lt;/td>
&lt;td>디렉토리 내에서 탐색을 위해 이동할 수 있도록 허용(디렉토리에 들어올 수 있도록 허용)&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">-&lt;/td>
&lt;td>r,w,x에 대한 권한이 없음을 표시&lt;/td>
&lt;td>r,w,x에 대한 권한이 없음을 표시&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>
&lt;p>Permission&lt;br>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Linux/linux-file-permissions.jpg"
alt="Linux File permissions"
loading="lazy" />
&lt;/figure>&lt;br>
&lt;em>source: &lt;a href="https://medium.com/@gumbershruti1119/day-6-file-permissions-and-access-control-lists-2126f994a5b8" target="_blank" rel="noopener">https://medium.com/@gumbershruti1119/day-6-file-permissions-and-access-control-lists-2126f994a5b8&lt;/a>&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>number of hard links&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ownership: 각 파일이나 디렉토리를 소유할 사용자나 그룹을 지정&lt;/p>
&lt;ul>
&lt;li>user(owner) name&lt;/li>
&lt;li>group name&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>size&lt;/p>
&lt;/li>
&lt;li>
&lt;p>date/time last modified&lt;/p>
&lt;/li>
&lt;li>
&lt;p>filename&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Example&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">drwxr-x--- &lt;span class="m">28&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">29&lt;/span> 12:34 ./
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">435&lt;/span> Aug &lt;span class="m">3&lt;/span> 17:05 default-user-config.yaml&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2>&lt;p>&lt;a href="https://m.blog.naver.com/islove8587/221945262618" target="_blank" rel="noopener">islove8587&lt;/a>&lt;br>
&lt;a href="https://hack-cracker.tistory.com/32" target="_blank" rel="noopener">hack-cracker&lt;/a>&lt;br>
&lt;a href="https://twitter.com/alexxubyte/status/1532026886359879681" target="_blank" rel="noopener">alex xu&lt;/a>&lt;br>
&lt;a href="https://yozm.wishket.com/magazine/detail/1668/" target="_blank" rel="noopener">[여기보기] 파일과 디렉토리에는 정확한 소유권과 적당한 권한을 부여하라&lt;/a>&lt;/p></description></item><item><title>Paging vs Segmentation</title><link>https://buenhyden.github.io/til/2024/12/paging-vs-segmentation/</link><pubDate>Thu, 16 Jan 2025 08:24:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/12/paging-vs-segmentation/</guid><description>
&lt;h2>Paging Vs Segmentation&lt;/h2>&lt;p>Paging과 Segmentation은 운영체제의 메모리 관리 기법이다.&lt;/p>
&lt;p>Paging:&lt;/p>
&lt;ul>
&lt;li>프로세스의 주소 공간을 고정 크기의 페이지로 나누어 관리한다.&lt;/li>
&lt;li>물리적 메모리를 같은 크기의 프레임으로 나눈다.&lt;/li>
&lt;li>외부 단편화 문제를 해결하고 메모리 할당을 단순화한다.&lt;/li>
&lt;/ul>
&lt;p>Segmentation:&lt;/p>
&lt;ul>
&lt;li>프로세스를 논리적 단위인 세그먼트로 나누어 관리한다.&lt;/li>
&lt;li>각 세그먼트의 크기는 가변적이다.&lt;/li>
&lt;li>프로그램의 논리적 구조를 반영하여 메모리를 관리한다.&lt;/li>
&lt;/ul>
&lt;h3>Paging과 Segmentation 비교&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Paging&lt;/th>
&lt;th>Segmentation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>분할 단위&lt;/td>
&lt;td>고정 크기 페이지&lt;/td>
&lt;td>가변 크기 세그먼트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주소 변환&lt;/td>
&lt;td>페이지 테이블 사용&lt;/td>
&lt;td>세그먼트 테이블 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>외부 단편화&lt;/td>
&lt;td>없음&lt;/td>
&lt;td>발생 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>내부 단편화&lt;/td>
&lt;td>발생 가능&lt;/td>
&lt;td>거의 없음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 활용&lt;/td>
&lt;td>효율적&lt;/td>
&lt;td>유연함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡도&lt;/td>
&lt;td>상대적으로 간단&lt;/td>
&lt;td>복잡함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>공유와 보호&lt;/td>
&lt;td>페이지 단위&lt;/td>
&lt;td>세그먼트 단위&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용자 관점&lt;/td>
&lt;td>투명함&lt;/td>
&lt;td>프로그램 구조 반영&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>할당/해제 속도&lt;/td>
&lt;td>빠름&lt;/td>
&lt;td>상대적으로 느림&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테이블 크기&lt;/td>
&lt;td>큼&lt;/td>
&lt;td>작음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>프로세스 제어 블록(Process Control Block, PCB)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-control-block/</link><pubDate>Wed, 15 Jan 2025 06:59:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-control-block/</guid><description>
&lt;h2>프로세스 제어 블록(Process Control Block, PCB)&lt;/h2>&lt;p>프로세스 제어 블록(Process Control Block, PCB)은 운영 체제에서 프로세스를 관리하기 위해 사용하는 핵심적인 데이터 구조이다.&lt;br>
PCB는 각 프로세스에 대한 중요한 정보를 저장하고 관리하며, 운영 체제가 프로세스를 효율적으로 제어하고 실행할 수 있게 한다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Process%20Mgmt/process---------control---------block.webp"
alt="Process Control Block"
loading="lazy" />
&lt;/figure>&lt;br>
_Sourece: &lt;a href="https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/&lt;/a> _&lt;/p>
&lt;h3>PCB의 주요 구성 요소&lt;/h3>&lt;ol>
&lt;li>프로세스 식별자(Process ID, PID): 각 프로세스에 할당되는 고유한 식별 번호이다.&lt;/li>
&lt;li>프로세스 상태(Process State): 프로세스의 현재 상태를 나타낸다. 주요 상태로는 생성(new), 준비(ready), 실행(running), 대기(waiting), 종료(terminated) 등이 있다.&lt;/li>
&lt;li>프로그램 카운터(Program Counter): 다음에 실행할 명령어의 주소를 가리킨다.&lt;/li>
&lt;li>CPU 레지스터: 프로세스가 CPU를 사용할 때의 레지스터 정보를 저장한다.&lt;/li>
&lt;li>CPU 스케줄링 정보: 프로세스의 우선순위, CPU 사용 시간 등 스케줄링에 필요한 정보를 포함한다.&lt;/li>
&lt;li>메모리 관리 정보: 프로세스의 메모리 할당 정보, 페이지 테이블 등을 저장한다.&lt;/li>
&lt;li>입출력 상태 정보: 프로세스에 할당된 입출력 장치, 열린 파일 목록 등을 관리한다.&lt;/li>
&lt;li>계정 정보: CPU 사용 시간, 메모리 사용량 등 프로세스의 리소스 사용 정보를 추적한다.&lt;/li>
&lt;/ol>
&lt;h3>PCB의 역할과 중요성&lt;/h3>&lt;ol>
&lt;li>프로세스 관리: PCB는 운영 체제가 프로세스의 생명주기를 관리하는 데 필수적이다.&lt;/li>
&lt;li>컨텍스트 스위칭: PCB는 프로세스 간 전환 시 현재 상태를 저장하고 복원하는 데 사용된다.&lt;/li>
&lt;li>스케줄링: 운영 체제는 PCB의 정보를 바탕으로 프로세스 스케줄링 결정을 내린다.&lt;/li>
&lt;li>리소스 관리: PCB는 프로세스에 할당된 리소스를 추적하고 관리한다.&lt;/li>
&lt;li>동기화 및 통신: 프로세스 간 동기화와 통신에 필요한 정보를 저장한다.&lt;/li>
&lt;/ol>
&lt;h3>PCB의 생명주기&lt;/h3>&lt;ol>
&lt;li>프로세스 생성 시 PCB가 생성되고 초기화된다.&lt;/li>
&lt;li>프로세스 실행 중 PCB 정보가 지속적으로 업데이트된다.&lt;/li>
&lt;li>프로세스 종료 시 PCB가 제거된다.&lt;/li>
&lt;/ol>
&lt;h3>PCB의 구현 및 저장&lt;/h3>&lt;p>PCB는 운영 체제 커널의 보호된 메모리 영역에 저장된다.&lt;br>
일부 운영 체제에서는 PCB를 커널 스택의 시작 부분에 위치시킨다.&lt;/p>
&lt;h3>PCB의 장단점&lt;/h3>&lt;p>장점:&lt;/p>
&lt;ul>
&lt;li>효율적인 프로세스 관리와 스케줄링 가능&lt;/li>
&lt;li>멀티태스킹 지원&lt;/li>
&lt;li>리소스 사용 최적화&lt;/li>
&lt;/ul>
&lt;p>단점:&lt;/p>
&lt;ul>
&lt;li>PCB 관리에 따른 메모리 오버헤드 발생&lt;/li>
&lt;li>잦은 컨텍스트 스위칭 시 성능 저하 가능성&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Context Switching</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/context-switching/</link><pubDate>Wed, 15 Jan 2025 01:00:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/context-switching/</guid><description>
&lt;h2>Context Switching&lt;/h2>&lt;p>Context Switching은 운영 체제에서 매우 중요한 개념으로, 여러 프로세스나 스레드가 단일 CPU 자원을 공유하여 효율적으로 실행될 수 있게 하는 메커니즘이다.&lt;/p>
&lt;p>Context Switching은 CPU가 현재 실행 중인 프로세스나 스레드의 상태를 저장하고, 다른 프로세스나 스레드의 상태를 불러와 실행을 재개하는 과정을 말한다.&lt;br>
이를 통해 여러 작업이 동시에 실행되는 것처럼 보이게 된다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Process%20Mgmt/swapping1.png"
alt="Context Switching"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/context-switch-in-operating-system/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/context-switch-in-operating-system/&lt;/a> _&lt;/p>
&lt;h3>Context Switching의 필요성&lt;/h3>&lt;ol>
&lt;li>멀티태스킹: 여러 프로세스가 동시에 실행되는 것처럼 보이게 하여 시스템 효율성을 높인다.&lt;/li>
&lt;li>인터럽트 처리: 하드웨어 인터럽트나 시스템 호출 등에 신속하게 대응할 수 있다.&lt;/li>
&lt;li>자원 공유: 단일 CPU로 여러 프로세스를 실행할 수 있게 한다.&lt;/li>
&lt;/ol>
&lt;h3>Context Switching의 과정&lt;/h3>&lt;ol>
&lt;li>현재 실행 중인 프로세스의 상태 저장: CPU 레지스터, 프로그램 카운터 등의 정보를 PCB(Process Control Block)에 저장한다.&lt;/li>
&lt;li>새로운 프로세스 선택: 스케줄러가 다음에 실행할 프로세스를 선택한다.&lt;/li>
&lt;li>새 프로세스의 상태 복원: 선택된 프로세스의 PCB에서 상태 정보를 불러와 CPU 레지스터에 복원한다.&lt;/li>
&lt;li>실행 재개: 새 프로세스의 실행을 시작한다.&lt;/li>
&lt;/ol>
&lt;h3>Context Switching의 트리거&lt;/h3>&lt;ol>
&lt;li>인터럽트: 하드웨어나 소프트웨어에서 발생하는 인터럽트.&lt;/li>
&lt;li>시간 할당 종료: 프로세스에 할당된 CPU 시간이 끝났을 때.&lt;/li>
&lt;li>I/O 요청: 프로세스가 I/O 작업을 요청하여 대기 상태로 전환될 때.&lt;/li>
&lt;li>우선순위: 더 높은 우선순위의 프로세스가 실행 준비될 때.&lt;/li>
&lt;/ol>
&lt;h3>Context Switching의 구현 방식&lt;/h3>&lt;ol>
&lt;li>하드웨어 스위칭: 프로세서 코어에 내장된 태스크 상태 세그먼트(TSS)를 사용한다.&lt;/li>
&lt;li>소프트웨어 스위칭: 운영 체제의 커널 루틴과 데이터 구조를 사용하여 구현한다. 더 빠르고 일관성 있는 방식이다.&lt;/li>
&lt;/ol>
&lt;h3>Context Switching의 장단점&lt;/h3>&lt;p>장점:&lt;/p>
&lt;ul>
&lt;li>멀티태스킹 지원: 여러 프로세스를 동시에 실행하는 것처럼 보이게 한다.&lt;/li>
&lt;li>자원 활용 최적화: CPU 사용을 최적화하여 시스템 효율성을 높인다.&lt;/li>
&lt;/ul>
&lt;p>단점:&lt;/p>
&lt;ul>
&lt;li>오버헤드: Context Switching 자체가 CPU 시간을 소모한다.&lt;/li>
&lt;li>캐시 미스: 프로세스 전환 시 캐시 데이터가 무효화될 수 있다.&lt;/li>
&lt;li>지연 시간: 빈번한 Context Switching은 전체적인 시스템 성능을 저하시킬 수 있다.&lt;/li>
&lt;/ul>
&lt;h3>Context Switching 최적화&lt;/h3>&lt;ol>
&lt;li>프로세스 우선순위 조정: 중요한 프로세스에 더 높은 우선순위 부여.&lt;/li>
&lt;li>스레드 사용: 프로세스 내 스레드 사용으로 Context Switching 비용 감소.&lt;/li>
&lt;li>인터럽트 처리 최적화: 효율적인 인터럽트 처리로 불필요한 Context Switching 감소.&lt;/li>
&lt;li>캐시 최적화: 캐시 친화적인 데이터 구조와 알고리즘 사용.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Memory Management Techniques</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/</link><pubDate>Wed, 25 Dec 2024 06:59:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques/</guid><description>
&lt;h2>Memory Management Techniques&lt;/h2>&lt;p>운영체제의 메모리 관리 기법(Memory Management Techniques)은 컴퓨터 시스템의 제한된 메모리 자원을 효율적으로 사용하기 위한 방법들이다.&lt;br>
주요 메모리 관리 기법은 다음과 같다:&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Memory%20Mgmt/Memory%20Mgmt%20Techniques/memory_management_techniques.webp"
alt="Memory Management Techniques"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/memory-management-in-operating-system/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/memory-management-in-operating-system/&lt;/a> _&lt;/p>
&lt;blockquote>
&lt;p>스와핑 (Swapping)&lt;br>
스와핑은 메모리가 부족할 때 실행 중인 프로세스의 일부 또는 전체를 디스크의 특별한 영역(스왑 공간)으로 임시로 내보내고, 필요할 때 다시 메모리로 가져오는 메모리 관리 기법이다.
이는 제한된 메모리를 효율적으로 사용하여 더 많은 프로세스를 동시에 실행할 수 있게 한다.
두 가지의 작동 방식을 가지고 있다:&lt;/p>
&lt;ul>
&lt;li>Swap Out: 프로세스를 RAM에서 하드 디스크로 이동시킨다.&lt;/li>
&lt;li>Swap In: 프로세스를 하드 디스크에서 RAM으로 다시 불러온다.
CPU 활용도를 높이고, 메모리 가용성을 개선한다.
우선순위 기반 스케줄링에 유용하다.
다만, 시스템 성능에 영향을 줄 수 있으며, 디스크 I/O가 증가할 수 있다.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3>연속 메모리 할당 (Contiguous Memory Allocation)&lt;/h3>&lt;p>가장 기본적인 메모리 관리 기법으로, 프로세스에 연속된 메모리 공간을 할당하는 방식이다.&lt;/p>
&lt;ol>
&lt;li>고정 분할 (Fixed Partitioning)
&lt;ul>
&lt;li>메모리를 고정된 크기의 파티션으로 나눈다.&lt;/li>
&lt;li>각 프로세스는 하나의 파티션에 할당된다.&lt;/li>
&lt;li>내부 단편화 문제가 발생할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가변 분할 (Variable Partitioning)&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>프로세스 크기에 따라 동적으로 메모리를 할당한다.&lt;/li>
&lt;li>외부 단편화 문제가 발생할 수 있다.&lt;/li>
&lt;li>최초 적합(First-fit), 최적 적합(Best-fit), 최악 적합(Worst-fit) 등의 할당 알고리즘이 사용된다.&lt;/li>
&lt;/ul>
&lt;h4>할당 알고리즘&lt;/h4>&lt;p>할당 알고리즘인 최초 적합(First Fit), 최적 적합(Best Fit), 최악 적합(Worst Fit)은 메모리 관리에서 프로세스를 메모리의 빈 공간에 할당하는 방법을 결정하는 알고리즘이다.&lt;/p>
&lt;ol>
&lt;li>최초 적합 (First Fit)
&lt;ul>
&lt;li>메모리를 순차적으로 검색하여 프로세스가 들어갈 수 있는 첫 번째 빈 공간에 할당한다.&lt;/li>
&lt;li>가장 간단하고 빠른 방법으로, 대부분의 경우 효율적이다.&lt;/li>
&lt;li>검색을 최소화할 수 있어 빠른 할당이 가능하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>최적 적합 (Best Fit)
&lt;ul>
&lt;li>프로세스 크기와 가장 비슷한 빈 공간을 찾아 할당한다.&lt;/li>
&lt;li>모든 가용 공간을 검색해야 하므로 시간이 더 걸린다.&lt;/li>
&lt;li>외부 단편화를 최소화할 수 있지만, 작은 단편들이 많이 생길 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>최악 적합 (Worst Fit)
&lt;ul>
&lt;li>가장 큰 빈 공간에 프로세스를 할당한다.&lt;/li>
&lt;li>남는 공간을 최대화하여 다른 프로세스들이 사용할 수 있는 여지를 남긴다.&lt;/li>
&lt;li>큰 빈 공간을 빠르게 소진할 수 있어 장기적으로는 비효율적일 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>성능 비교
&lt;ul>
&lt;li>속도: 최초 적합 &amp;gt; 최적 적합 = 최악 적합&lt;/li>
&lt;li>메모리 이용률: 최초 적합 ≈ 최적 적합 &amp;gt; 최악 적합&lt;/li>
&lt;li>구현 복잡성: 최초 적합 &amp;lt; 최적 적합 = 최악 적합&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>각 알고리즘은 상황에 따라 장단점이 있으며, 시스템의 요구사항과 특성에 맞게 선택해야 한다.&lt;br>
일반적으로 최초 적합이 간단하면서도 효율적인 성능을 보이는 경우가 많다.&lt;/p>
&lt;h3>비연속 메모리 할당(Non-Contiguous Memory Allocation)&lt;/h3>&lt;p>프로세스의 메모리를 여러 개의 작은 블록으로 나누어 물리적 메모리의 서로 다른 위치에 할당하는 메모리 관리 기법으로 메모리 사용의 효율성을 높이고 외부 단편화를 줄이는 데 도움이 된다.&lt;/p>
&lt;ol>
&lt;li>페이징 (Paging)&lt;br>
페이징은 물리 메모리를 고정 크기의 프레임으로, 논리 메모리를 같은 크기의 페이지로 나누는 기법이다.&lt;br>
- 외부 단편화 문제를 해결한다.&lt;br>
- 페이지 테이블을 사용하여 논리 주소를 물리 주소로 변환한다.&lt;br>
- 내부 단편화가 발생할 수 있지만, 그 크기는 페이지 크기보다 작다.&lt;/li>
&lt;li>세그멘테이션 (Segmentation)&lt;br>
세그멘테이션은 프로그램을 논리적 단위(세그먼트)로 나누어 관리하는 기법.&lt;br>
- 코드, 데이터, 스택 등 논리적 단위로 메모리를 관리한다.&lt;br>
- 세그먼트 테이블을 사용하여 주소 변환을 수행한다.&lt;br>
- 외부 단편화 문제가 발생할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>가상 메모리 (Virtual Memory)&lt;/h3>&lt;p>가상 메모리는 물리적 메모리 크기의 제약을 극복하기 위한 기법이다.&lt;/p>
&lt;ul>
&lt;li>프로세스의 일부만 메모리에 로드하여 실행한다.&lt;/li>
&lt;li>페이지 교체 알고리즘(LRU, FIFO 등)을 사용하여 필요한 페이지만 메모리에 유지한다.&lt;/li>
&lt;li>페이지 폴트 처리를 통해 필요한 페이지를 메모리로 로드한다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>메모리 보호와 안전 (Memory Protection and Safety)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-protection-and-safety/</link><pubDate>Thu, 19 Dec 2024 08:06:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-protection-and-safety/</guid><description>
&lt;h2>메모리 보호와 안전 (Memory Protection and Safety)&lt;/h2>&lt;p>메모리 보호와 안전은 현대 컴퓨터 시스템에서 매우 중요한 요소이다.&lt;/p>
&lt;p>메모리 보호는 컴퓨터 시스템에서 프로세스가 허가되지 않은 메모리 영역에 접근하는 것을 방지하는 메커니즘이다.&lt;br>
주요 목적은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>프로세스 간 격리 유지&lt;/li>
&lt;li>운영 체제 커널 보호&lt;/li>
&lt;li>버그나 악성 소프트웨어로부터 시스템 보호&lt;/li>
&lt;/ol>
&lt;h3>메모리 보호 기술&lt;/h3>&lt;h4>하드웨어 기반 보호&lt;/h4>&lt;ol>
&lt;li>&lt;strong>메모리 관리 장치 (MMU)&lt;/strong>: 가상 주소를 물리적 주소로 변환하고 접근 권한을 확인한다.&lt;/li>
&lt;li>&lt;strong>보호 키&lt;/strong>: 메모리 영역에 키를 할당하여 접근을 제어한다.&lt;/li>
&lt;li>&lt;strong>보호 링&lt;/strong>: 권한 수준에 따라 메모리 접근을 제어한다.&lt;/li>
&lt;li>&lt;strong>세그먼테이션&lt;/strong>: 메모리를 논리적 세그먼트로 나누어 보호한다.&lt;/li>
&lt;/ol>
&lt;h4>소프트웨어 기반 보호&lt;/h4>&lt;ol>
&lt;li>&lt;strong>가상 메모리&lt;/strong>: 각 프로세스에 독립적인 주소 공간을 제공한다.&lt;/li>
&lt;li>&lt;strong>주소 공간 레이아웃 랜덤화 (ASLR)&lt;/strong>: 메모리 주소를 무작위화하여 공격을 어렵게 한다.&lt;/li>
&lt;li>&lt;strong>데이터 실행 방지 (DEP)&lt;/strong>: 데이터 영역에서 코드 실행을 방지한다.&lt;/li>
&lt;/ol>
&lt;h3>메모리 안전성 (Memory Safety)&lt;/h3>&lt;p>메모리 안전성은 프로그램이 할당된 메모리 범위 내에서만 작동하도록 보장하는 개념이다.&lt;/p>
&lt;p>주요 이슈와 해결책은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>버퍼 오버플로우&lt;/strong>: 할당된 메모리 범위를 벗어나는 쓰기 작업으로 인한 취약점.&lt;/p>
&lt;ul>
&lt;li>해결책: 경계 검사, 안전한 문자열 처리 함수 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>메모리 누수&lt;/strong>: 할당된 메모리를 해제하지 않아 발생하는 문제.&lt;/p>
&lt;ul>
&lt;li>해결책: 자동 메모리 관리 (가비지 컬렉션), 스마트 포인터 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Use-after-free&lt;/strong>: 해제된 메모리에 접근하는 문제.&lt;/p>
&lt;ul>
&lt;li>해결책: 안전한 메모리 할당/해제 패턴 사용, 정적 분석 도구 활용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>최신 트렌드와 기술&lt;/h3>&lt;ol>
&lt;li>&lt;strong>메모리 안전 언어 사용&lt;/strong>: Rust, Go, Swift 등 메모리 안전성을 보장하는 언어의 채택이 증가하고 있다.&lt;/li>
&lt;li>&lt;strong>하드웨어 기반 메모리 보호 강화&lt;/strong>: Intel SGX, ARM TrustZone 등 하드웨어 수준의 보안 기술이 발전하고 있다.&lt;/li>
&lt;li>&lt;strong>동적 테인팅&lt;/strong>: 런타임에 데이터 흐름을 추적하여 메모리 접근을 제어하는 기술이 개발되고 있다.&lt;/li>
&lt;li>&lt;strong>CHERI (Capability Hardware Enhanced RISC Instructions)&lt;/strong>: 하드웨어 수준에서 메모리 보호를 강화하는 새로운 아키텍처가 연구 중이다.&lt;/li>
&lt;li>&lt;strong>멀티팩터 인증 (MFA) 기술의 발전&lt;/strong>: 메모리 보안을 포함한 전반적인 시스템 보안을 강화하는 데 기여하고 있다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>System Call Interface</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/kernel/system-call-interface/</link><pubDate>Wed, 18 Dec 2024 03:21:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/kernel/system-call-interface/</guid><description>
&lt;h2>System Call Interface&lt;/h2>&lt;p>System Call Interface는 사용자 공간의 프로그램과 운영 체제 커널 사이의 중간 계층으로, 프로그램이 운영 체제의 서비스를 요청할 수 있게 해주는 인터페이스이다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Kernel/intro_system_call.webp"
alt="System Call Interface"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.scaler.com/topics/operating-system/system-calls-in-operating-system/" target="_blank" rel="noopener">https://www.scaler.com/topics/operating-system/system-calls-in-operating-system/&lt;/a> _&lt;/p>
&lt;h3>역할&lt;/h3>&lt;ul>
&lt;li>사용자 프로그램과 커널 사이의 추상화 계층 제공&lt;/li>
&lt;li>API 함수 호출을 시스템 콜로 변환&lt;/li>
&lt;li>사용자 모드에서 커널 모드로의 전환 관리&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Kernel/Simplified_Structure_of_the_Linux_Kernel.svg.png"
alt="Simplified illustration of the structure of the Linux kernel"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://ko.m.wikipedia.org/wiki/%ED%8C%8C%EC%9D%BC:Simplified_Structure_of_the_Linux_Kernel.svg" target="_blank" rel="noopener">https://ko.m.wikipedia.org/wiki/%ED%8C%8C%EC%9D%BC:Simplified_Structure_of_the_Linux_Kernel.svg&lt;/a> _&lt;/p>
&lt;h3>주요 유형&lt;/h3>&lt;p>시스템 콜은 기능에 따라 여러 카테고리로 분류된다:&lt;/p>
&lt;ul>
&lt;li>프로세스 제어 (생성, 종료, 일시 중지 등)&lt;/li>
&lt;li>파일 관리 (열기, 읽기, 쓰기, 닫기 등)&lt;/li>
&lt;li>장치 관리 (입출력 작업)&lt;/li>
&lt;li>정보 유지 (시간, 날짜, 시스템 데이터 등)&lt;/li>
&lt;li>통신 (프로세스 간 통신)&lt;/li>
&lt;/ul>
&lt;h3>작동 방식&lt;/h3>&lt;p>시스템 콜 인터페이스의 작동 방식은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>사용자 프로그램이 API 함수를 호출한다.&lt;/li>
&lt;li>시스템 콜 인터페이스가 이 API 함수 호출을 가로채고, 적절한 시스템 콜로 변환한다.&lt;/li>
&lt;li>소프트웨어 인터럽트나 특별한 명령어를 사용하여 사용자 모드에서 커널 모드로 전환한다.&lt;/li>
&lt;li>시스템 콜 번호와 매개변수를 이용해 해당하는 커널 함수를 식별하고 호출한다.&lt;/li>
&lt;li>커널이 요청된 서비스를 수행한다.&lt;/li>
&lt;li>작업이 완료되면 결과값을 준비하고, 사용자 모드로 다시 전환한다.&lt;/li>
&lt;li>시스템 콜 인터페이스가 결과를 사용자 프로그램에 반환한다.&lt;/li>
&lt;/ol>
&lt;p>이 과정을 통해 시스템 콜 인터페이스는 사용자 프로그램과 운영 체제 커널 사이의 안전하고 제어된 상호작용을 가능하게 합니다.&lt;/p>
&lt;h3>보안&lt;/h3>&lt;ul>
&lt;li>사용자 공간과 커널 공간 사이의 보안 경계 역할&lt;/li>
&lt;li>권한 검사 및 접근 제어 수행&lt;/li>
&lt;/ul>
&lt;h3>성능&lt;/h3>&lt;ul>
&lt;li>컨텍스트 스위칭 발생으로 인한 오버헤드 존재&lt;/li>
&lt;li>효율적인 설계로 성능 최적화 필요&lt;/li>
&lt;/ul>
&lt;h3>System Call Interface와 API 차이&lt;/h3>&lt;p>시스템 콜 인터페이스와 API의 주요 차이점은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>추상화 수준:&lt;/p>
&lt;ul>
&lt;li>API는 더 높은 수준의 추상화를 제공하며, 개발자가 사용하기 쉬운 인터페이스를 제공한다.&lt;/li>
&lt;li>시스템 콜 인터페이스는 더 낮은 수준으로, 운영 체제 커널과 직접 상호 작용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>기능:&lt;/p>
&lt;ul>
&lt;li>API는 다양한 기능을 제공하며, 여러 시스템 콜을 조합하여 복잡한 작업을 수행할 수 있다.&lt;/li>
&lt;li>시스템 콜 인터페이스는 운영 체제의 기본적인 서비스에 대한 직접적인 접근을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>구현:&lt;/p>
&lt;ul>
&lt;li>API는 일반적으로 라이브러리 함수로 구현된다.&lt;/li>
&lt;li>시스템 콜 인터페이스는 운영 체제 커널의 일부로 구현된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>호출 방식:&lt;/p>
&lt;ul>
&lt;li>API 함수는 일반적인 함수 호출 방식으로 사용된다.&lt;/li>
&lt;li>시스템 콜은 소프트웨어 인터럽트나 특별한 명령어를 통해 호출된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>실행 모드:&lt;/p>
&lt;ul>
&lt;li>API 함수는 사용자 모드에서 실행된다.&lt;/li>
&lt;li>시스템 콜은 커널 모드로의 전환을 필요로 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>범위:&lt;/p>
&lt;ul>
&lt;li>API는 시스템 콜뿐만 아니라 다른 기능도 포함할 수 있다.&lt;/li>
&lt;li>시스템 콜 인터페이스는 오직 운영 체제 서비스에 대한 접근만을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Thrashing</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/thrashing/</link><pubDate>Wed, 18 Dec 2024 00:08:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/thrashing/</guid><description>
&lt;h2>스래싱 (Thrashing)&lt;/h2>&lt;p>스래싱은 운영체제에서 발생하는 성능 저하 현상으로, 프로세스의 실제 작업 시간보다 페이지 교체(페이징)에 더 많은 시간을 소비하는 현상을 말한다.&lt;/p>
&lt;p>이를 더 쉽게 이해하기 위해 실생활의 예시를 들어보자.&lt;br>
작은 책상에서 여러 개의 큰 책을 동시에 참고하며 공부하는 상황을 상상해보자.&lt;br>
책상이 너무 작아서 한 번에 펼칠 수 있는 책의 수가 제한적이라, 새로운 책을 보기 위해서는 기존에 펼쳐져 있던 책을 닫고 치워야 한다. 만약 연관된 내용을 위해 계속해서 다른 책을 번갈아가며 봐야 한다면, 실제 공부하는 시간보다 책을 꺼내고 넣는 시간이 더 많아질 것이다. 이것이 바로 컴퓨터에서 일어나는 스래싱 현상과 유사하다.&lt;/p>
&lt;h3>스래싱이 발생하는 과정&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시작 단계:&lt;/p>
&lt;ul>
&lt;li>시스템에서 다수의 프로세스가 실행된다.&lt;/li>
&lt;li>각 프로세스는 자신의 페이지를 메모리에 로드하려 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>메모리 부족 발생:&lt;/p>
&lt;ul>
&lt;li>실제 물리 메모리보다 더 많은 페이지가 요구된다.&lt;/li>
&lt;li>운영체제는 페이지 교체를 시작한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>스래싱 발생:&lt;/p>
&lt;ul>
&lt;li>한 프로세스의 페이지를 내보내면, 다른 프로세스가 그 공간을 사용한다.&lt;/li>
&lt;li>하지만 곧 이전 프로세스가 내보낸 페이지가 다시 필요하게 된다.&lt;/li>
&lt;li>이러한 과정이 계속해서 반복된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스래싱의 주요 특징과 영향&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시스템 성능:&lt;/p>
&lt;ul>
&lt;li>CPU 활용률이 급격히 감소합니다.&lt;/li>
&lt;li>디스크 I/O가 급증합니다.&lt;/li>
&lt;li>시스템 응답 시간이 현저히 늘어납니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>사용자 경험:`&lt;/p>
&lt;ul>
&lt;li>프로그램의 실행 속도가 매우 느려집니다.&lt;/li>
&lt;li>시스템이 멈춘 것처럼 보일 수 있습니다.&lt;/li>
&lt;li>전반적인 시스템 반응성이 떨어집니다.&lt;br>
`&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스래싱 해결을 위한 방법들&lt;/h3>&lt;ol>
&lt;li>
&lt;p>예방적 접근:&lt;/p>
&lt;ul>
&lt;li>적절한 메모리 할당 정책 수립&lt;/li>
&lt;li>프로세스 수의 제한&lt;/li>
&lt;li>작업 세트(Working Set) 모델 적용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>대응적 접근:&lt;/p>
&lt;ul>
&lt;li>페이지 부재 빈도(PFF) 모니터링&lt;/li>
&lt;li>로컬 교체 정책 사용&lt;/li>
&lt;li>메모리 증설 고려&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>운영체제 레벨의 해결책:&lt;/p>
&lt;ul>
&lt;li>프로세스 우선순위 조정&lt;/li>
&lt;li>페이지 교체 알고리즘 최적화&lt;/li>
&lt;li>메모리 관리 정책 개선&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스래싱을 모니터링하는 방법&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시스템 지표 관찰:&lt;/p>
&lt;ul>
&lt;li>페이지 폴트(Page Fault) 발생 빈도&lt;/li>
&lt;li>CPU 사용률 변화&lt;/li>
&lt;li>디스크 I/O 활동량&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 모니터링 도구 사용:&lt;/p>
&lt;ul>
&lt;li>운영체제의 성능 모니터&lt;/li>
&lt;li>리소스 모니터링 툴&lt;/li>
&lt;li>시스템 로그 분석&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스래싱 예방을 위한 실용적인 팁&lt;/h3>&lt;ol>
&lt;li>
&lt;p>프로그램 설계 시:&lt;/p>
&lt;ul>
&lt;li>메모리 사용량을 최적화합니다.&lt;/li>
&lt;li>필요한 데이터만 메모리에 로드합니다.&lt;/li>
&lt;li>효율적인 메모리 관리 기법을 사용합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>시스템 운영 시:&lt;/p>
&lt;ul>
&lt;li>적절한 가상 메모리 크기를 설정합니다.&lt;/li>
&lt;li>동시 실행 프로세스 수를 제한합니다.&lt;/li>
&lt;li>주기적인 시스템 모니터링을 수행합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Kernel</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/kernel/</link><pubDate>Sun, 15 Dec 2024 16:06:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/kernel/</guid><description>
&lt;h2>커널 (Kernel)&lt;/h2>&lt;p>운영 체제의 커널은 컴퓨터 시스템의 핵심 구성 요소로, 하드웨어와 소프트웨어 간의 중개자 역할을 수행하며, 시스템의 가장 핵심적인 기능들을 담당한다.&lt;br>
일반 사용자가 직접 접근할 수 없는 커널은 운영체제의 가장 하위 계층에 위치하여 시스템의 안정성과 보안을 보장한다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Kernel/ditaa-12614a4afe93c9e1ae68861a79f14afe4f3e4b3e.png"
alt="Kernel"
loading="lazy" />
&lt;/figure>&lt;br>
&lt;em>Source: &lt;a href="https://linux-kernel-labs.github.io/refs/pull/183/merge/lectures/intro.html" target="_blank" rel="noopener">https://linux-kernel-labs.github.io/refs/pull/183/merge/lectures/intro.html&lt;/a>&lt;/em>&lt;/p>
&lt;p>커널은 운영 체제의 핵심으로, 컴퓨터 시스템의 효율적인 운영과 관리를 담당하는 중요한 구성 요소이다.&lt;br>
현대의 복잡한 컴퓨팅 환경에서 커널의 역할은 더욱 중요해지고 있으며, 지속적인 발전과 최적화가 이루어지고 있다.&lt;/p>
&lt;p>장점:&lt;/p>
&lt;ul>
&lt;li>하드웨어 자원의 효율적 관리&lt;/li>
&lt;li>시스템의 안정성과 보안성 향상&lt;/li>
&lt;li>응용 프로그램 개발의 용이성 제공&lt;/li>
&lt;/ul>
&lt;p>단점:&lt;/p>
&lt;ul>
&lt;li>복잡성으로 인한 개발 및 유지보수의 어려움&lt;/li>
&lt;li>단일형 커널의 경우 한 부분의 오류가 전체 시스템에 영향을 줄 수 있음&lt;/li>
&lt;/ul>
&lt;h3>커널의 정의와 역할&lt;/h3>&lt;p>커널은 운영 체제의 가장 핵심적인 부분으로, 항상 메모리에 상주하며 다음과 같은 역할을 수행한다:&lt;/p>
&lt;ol>
&lt;li>하드웨어 자원 관리: CPU, 메모리, 입출력 장치 등의 하드웨어 자원을 효율적으로 관리한다.&lt;/li>
&lt;li>프로세스 관리: 프로세스의 생성, 실행, 종료 및 스케줄링을 담당한다.&lt;/li>
&lt;li>메모리 관리: 프로세스에 메모리를 할당하고 가상 메모리를 관리한다.&lt;/li>
&lt;li>파일 시스템 관리: 데이터의 저장과 접근을 위한 인터페이스를 제공한다.&lt;/li>
&lt;li>입출력 관리: 다양한 입출력 장치와의 통신을 관리한다.&lt;/li>
&lt;li>프로세스 간 통신 관리: 프로세스 간의 데이터 교환과 동기화를 지원한다.&lt;/li>
&lt;/ol>
&lt;h3>커널의 종류&lt;/h3>&lt;p>커널은 구조에 따라 여러 종류로 나눌 수 있다:&lt;/p>
&lt;ol>
&lt;li>단일형 커널(Monolithic Kernel): 모든 시스템 서비스가 하나의 큰 커널 안에서 동작한다.&lt;br>
예: Linux, Unix&lt;/li>
&lt;li>마이크로커널(Microkernel): 최소한의 기능만 커널에 포함하고, 나머지는 사용자 공간에서 실행된다.&lt;/li>
&lt;li>혼합형 커널(Hybrid Kernel): 단일형과 마이크로커널의 특징을 결합한 형태&lt;/li>
&lt;li>엑소커널(Exokernel): 하드웨어 자원에 대한 최소한의 추상화만 제공한다.&lt;/li>
&lt;/ol>
&lt;h3>커널의 동작 방식&lt;/h3>&lt;p>커널은 다음과 같은 방식으로 동작한다:&lt;/p>
&lt;ol>
&lt;li>시스템 콜 인터페이스: 응용 프로그램이 커널의 기능을 사용할 수 있게 해주는 인터페이스.&lt;/li>
&lt;li>보호 모드: 커널 모드와 사용자 모드로 나누어 시스템 자원을 보호한다.&lt;/li>
&lt;li>하드웨어 추상화: 다양한 하드웨어를 일관된 방식으로 다룰 수 있게 해준다.&lt;/li>
&lt;/ol>
&lt;h3>커널의 보호 메커니즘&lt;/h3>&lt;h4>보호 링(protection ring)&lt;/h4>&lt;p>운영체제에서 시스템 자원과 하드웨어에 대한 접근을 제어하고 보호하기 위한 계층적 보안 메커니즘.&lt;br>
이 메커니즘은 컴퓨터 시스템의 안정성과 보안성을 향상시키는 데 중요한 역할을 한다.&lt;/p>
&lt;p>보호 링은 CPU의 권한 상태를 나타내는 특권 레벨을 동심원 형태로 표현한 것이다.&lt;br>
이 구조는 다음과 같은 목적을 가진다:&lt;/p>
&lt;ol>
&lt;li>시스템 자원에 대한 접근 제어&lt;/li>
&lt;li>컴퓨터 보안 강화&lt;/li>
&lt;li>시스템 안정성 향상&lt;/li>
&lt;li>결함 내성 개선&lt;/li>
&lt;/ol>
&lt;h5>보호 링의 중요성&lt;/h5>&lt;ol>
&lt;li>보안 강화: 악의적인 프로그램이 중요한 시스템 자원에 직접 접근하는 것을 방지한다.&lt;/li>
&lt;li>안정성 향상: 사용자 애플리케이션의 오류가 전체 시스템에 영향을 미치는 것을 막는다.&lt;/li>
&lt;li>자원 관리: 운영체제가 시스템 자원을 효율적으로 관리할 수 있게 한다.&lt;/li>
&lt;li>호환성 유지: 다양한 하드웨어 플랫폼에서 일관된 보안 모델을 제공한다.&lt;/li>
&lt;/ol>
&lt;h5>보호 링의 작동 방식&lt;/h5>&lt;ol>
&lt;li>프로세스 실행 시 특정 링 레벨이 할당된다.&lt;/li>
&lt;li>각 링 레벨에 따라 실행 가능한 명령어와 접근 가능한 자원이 제한된다.&lt;/li>
&lt;li>하위 링에서 상위 링의 자원에 접근하려면 시스템 콜을 통해 요청해야 한다.&lt;/li>
&lt;li>운영체제는 권한 위반 시도를 감지하고 차단한다.&lt;/li>
&lt;/ol>
&lt;h5>보호 링의 구조&lt;/h5>&lt;p>일반적으로 보호 링은 0부터 3까지 4개의 레벨로 구성된다:&lt;/p>
&lt;ul>
&lt;li>Ring 0 (가장 높은 권한)
&lt;ul>
&lt;li>운영체제 커널&lt;/li>
&lt;li>드라이버 관리&lt;/li>
&lt;li>하드웨어 직접 접근&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ring 1
&lt;ul>
&lt;li>장치 드라이버&lt;/li>
&lt;li>일부 시스템 서비스&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ring 2
&lt;ul>
&lt;li>장치 드라이버&lt;/li>
&lt;li>특권 유틸리티&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ring 3 (가장 낮은 권한)
&lt;ul>
&lt;li>사용자 애플리케이션&lt;/li>
&lt;li>일반 프로그램&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>숫자가 낮을수록 더 높은 권한을 가지며, 상위 링은 하위 링의 모든 권한을 포함한다.&lt;/p>
&lt;h4>시스템 호출(system call)&lt;/h4>&lt;p>운영체제의 커널이 제공하는 서비스를 사용자 프로그램이 요청하는 방법.&lt;br>
사용자 프로그램이 직접 수행할 수 없는 보안이 필요한 작업들(파일 접근, 입출력 작업 등)을 운영체제에게 요청하여 수행하는 것이다.&lt;/p>
&lt;h5>중요성&lt;/h5>&lt;p>시스템 콜은 다음과 같은 이유로 중요하다.&lt;/p>
&lt;ol>
&lt;li>보안 강화: 사용자 프로그램의 직접적인 하드웨어 접근을 제한하여 시스템 보안을 강화한다.&lt;/li>
&lt;li>추상화 제공: 복잡한 하드웨어 동작을 간단한 인터페이스로 추상화하여 프로그래밍을 용이하게 한다.&lt;/li>
&lt;li>자원 관리: 운영체제가 시스템 자원을 효율적으로 관리할 수 있게 한다.&lt;/li>
&lt;li>호환성 유지: 다양한 하드웨어 플랫폼에서 일관된 인터페이스를 제공하여 소프트웨어의 호환성을 높인다.&lt;/li>
&lt;/ol>
&lt;h5>목적&lt;/h5>&lt;ol>
&lt;li>하드웨어 자원 접근: 응용 프로그램이 파일 시스템, 네트워크 장치, 기타 하드웨어 등에 안전하게 접근할 수 있도록 한다.&lt;/li>
&lt;li>보안 유지: 사용자 프로그램이 직접 시스템 자원에 접근하는 것을 방지하여 시스템의 안정성과 보안을 유지한다.&lt;/li>
&lt;li>추상화 제공: 복잡한 하드웨어 동작을 간단한 인터페이스로 추상화하여 프로그래머의 작업을 용이하게 한다.&lt;/li>
&lt;/ol>
&lt;h5>작동 방식&lt;/h5>&lt;p>시스템 콜이 호출되면 다음과 같은 과정이 진행된다:&lt;/p>
&lt;ol>
&lt;li>응용 프로그램이 시스템 콜을 호출한다.&lt;/li>
&lt;li>프로세서가 사용자 모드에서 커널 모드로 전환된다.&lt;/li>
&lt;li>커널이 요청된 서비스를 수행한다.&lt;/li>
&lt;li>서비스 완료 후, 프로세서가 다시 사용자 모드로 전환된다.&lt;/li>
&lt;li>응용 프로그램이 실행을 계속한다.&lt;/li>
&lt;/ol>
&lt;h5>주요 시스템 콜 유형&lt;/h5>&lt;p>시스템 콜은 다음과 같은 주요 유형으로 분류될 수 있다:&lt;/p>
&lt;ol>
&lt;li>프로세스 제어: 프로세스 생성, 종료, 대기 등 (예: fork(), exit(), wait())&lt;/li>
&lt;li>파일 관리: 파일 열기, 읽기, 쓰기, 닫기 등 (예: open(), read(), write(), close())&lt;/li>
&lt;li>장치 관리: 장치 연결, 해제, 읽기, 쓰기 등&lt;/li>
&lt;li>정보 유지: 시간, 날짜 설정, 시스템 데이터 획득 등&lt;/li>
&lt;li>통신: 프로세스 간 통신, 네트워크 통신 등&lt;/li>
&lt;/ol>
&lt;h3>커널의 발전과 현대적 특징&lt;/h3>&lt;ol>
&lt;li>
&lt;p>실시간 성능:&lt;br>
현대의 커널들은 실시간 처리 능력을 강화하고 있다.&lt;br>
특히 임베디드 시스템이나 산업용 제어 시스템에서는 이러한 특성이 매우 중요하다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>가상화 지원:&lt;br>
하드웨어 가상화를 지원하여 여러 운영체제를 동시에 실행할 수 있게 한다.&lt;br>
이는 클라우드 컴퓨팅의 기반이 되었다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>전력 관리:&lt;br>
현대의 커널은 CPU 주파수 조절, 디바이스 전원 관리 등을 통해 에너지 효율성을 최적화한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>커널의 발전 방향 커널은 계속해서 진화하고 있으며, 특히 다음과 같은 방향으로 발전하고 있다:&lt;/p>
&lt;ol>
&lt;li>보안 강화: 새로운 보안 위협에 대응하기 위한 기능 강화&lt;/li>
&lt;li>확장성 개선: 더 많은 코어와 더 큰 메모리를 효율적으로 관리&lt;/li>
&lt;li>실시간 성능 향상: 더 빠른 응답 시간과 예측 가능한 성능 제공&lt;/li>
&lt;li>클라우드 최적화: 가상화와 컨테이너 지원 강화&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>동시성 제어 (Concurrency Control)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/concurrency-control/</link><pubDate>Sat, 23 Nov 2024 02:47:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/concurrency-control/</guid><description>
&lt;h2>동시성 제어 (Concurrency Control)&lt;/h2>&lt;p>동시성 제어는 여러 프로세스나 스레드가 동시에 공유 자원에 접근할 때, 데이터의 일관성과 무결성을 보장하기 위한 제어 메커니즘.&lt;br>
다중 사용자 환경에서 필수적으로 지원해야 하는 기능으로, 병행제어라고도 한다.&lt;/p>
&lt;h3>동시성 제어의 중요성&lt;/h3>&lt;p>동시성 제어는 다음과 같은 문제를 방지하여 데이터베이스의 무결성을 유지한다:&lt;/p>
&lt;ul>
&lt;li>갱신 손실: 동시에 수행된 갱신 작업으로 인한 데이터 손실&lt;/li>
&lt;li>모순성: 일관성 없는 데이터 읽기&lt;/li>
&lt;li>연쇄 복귀: 하나의 트랜잭션 실패로 인한 다른 트랜잭션들의 복귀&lt;/li>
&lt;/ul>
&lt;h3>목적&lt;/h3>&lt;ol>
&lt;li>트랜잭션의 직렬성 보장&lt;/li>
&lt;li>데이터의 무결성 및 일관성 유지&lt;/li>
&lt;li>시스템 활용도 최대화 (공유도 최대, 응답 시간 최소, 처리량 최대화)&lt;/li>
&lt;/ol>
&lt;h3>주요 동시성 제어 기법&lt;/h3>&lt;h4>락킹(Locking) 기법&lt;/h4>&lt;p>락킹은 가장 기본적인 동시성 제어 방법으로, 데이터에 접근할 때 잠금을 설정하여 다른 프로세스의 접근을 제한한다.&lt;/p>
&lt;h5>종류&lt;/h5>&lt;p>공유 락(Shared Lock):&lt;/p>
&lt;ul>
&lt;li>읽기 작업을 위한 락&lt;/li>
&lt;li>여러 프로세스가 동시에 획득 가능&lt;/li>
&lt;li>데이터 읽기만 허용됨&lt;/li>
&lt;/ul>
&lt;p>배타적 락(Exclusive Lock):&lt;/p>
&lt;ul>
&lt;li>쓰기 작업을 위한 락&lt;/li>
&lt;li>한 번에 하나의 프로세스만 획득 가능&lt;/li>
&lt;li>데이터 읽기와 쓰기 모두 가능&lt;/li>
&lt;/ul>
&lt;h4>타임스탬프 기반 기법(Timestamp-based Protocol)&lt;/h4>&lt;p>각 트랜잭션에 고유한 타임스탬프를 부여하여 실행 순서를 결정하는 방식.&lt;/p>
&lt;h5>작동 원리&lt;/h5>&lt;ul>
&lt;li>트랜잭션 시작 시 타임스탬프 부여&lt;/li>
&lt;li>읽기/쓰기 타임스탬프 관리&lt;/li>
&lt;li>충돌 발생 시 타임스탬프 비교하여 처리&lt;/li>
&lt;/ul>
&lt;h5>장점&lt;/h5>&lt;ul>
&lt;li>교착상태 발생하지 않음&lt;/li>
&lt;li>우선순위 기반 처리 가능&lt;/li>
&lt;/ul>
&lt;h4>낙관적 병행 제어(Optimistic Concurrency Control)&lt;/h4>&lt;p>충돌이 적을 것이라 가정하고, 검증 단계에서 충돌을 확인하는 방식.&lt;/p>
&lt;h5>처리 단계&lt;/h5>&lt;ul>
&lt;li>읽기 단계: 데이터 읽기와 로컬 복사본 생성&lt;/li>
&lt;li>수행 단계: 로컬 복사본에서 작업 수행&lt;/li>
&lt;li>검증 단계: 충돌 여부 확인&lt;/li>
&lt;li>쓰기 단계: 검증 성공 시 결과 반영&lt;/li>
&lt;/ul>
&lt;h4>다중버전 병행 제어(Multiversion Concurrency Control, MVCC)&lt;/h4>&lt;p>데이터의 여러 버전을 유지하여 읽기 작업의 병행성을 향상시키는 기법.&lt;/p>
&lt;h5>특징&lt;/h5>&lt;ul>
&lt;li>각 쓰기 작업마다 새로운 버전 생성&lt;/li>
&lt;li>읽기 작업은 특정 시점의 버전을 참조&lt;/li>
&lt;li>트랜잭션의 일관성 보장&lt;/li>
&lt;/ul>
&lt;h5>실제 적용 예시&lt;/h5>&lt;p>PostgreSQL이나 Oracle 같은 데이터베이스 시스템에서 MVCC를 사용하여 읽기 작업의 성능을 향상시킨다.&lt;/p>
&lt;h3>동시성 제어의 구현 시 고려사항&lt;/h3>&lt;ol>
&lt;li>
&lt;p>성능과 확장성&lt;/p>
&lt;ul>
&lt;li>락의 세분성 조절&lt;/li>
&lt;li>데드락 방지 메커니즘&lt;/li>
&lt;li>캐시 일관성 유지&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>일관성 수준&lt;/p>
&lt;ul>
&lt;li>직렬성(Serializability)&lt;/li>
&lt;li>스냅샷 격리(Snapshot Isolation)&lt;/li>
&lt;li>읽기 일관성(Read Consistency)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>장애 복구&lt;/p>
&lt;ul>
&lt;li>롤백 메커니즘&lt;/li>
&lt;li>복구 로그 관리&lt;/li>
&lt;li>체크포인트 설정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>동시성 제어의 발전 방향&lt;/h3>&lt;ol>
&lt;li>
&lt;p>분산 시스템에서의 동시성 제어&lt;/p>
&lt;ul>
&lt;li>분산 락 관리&lt;/li>
&lt;li>합의(Consensus) 알고리즘&lt;/li>
&lt;li>최종 일관성(Eventual Consistency)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>새로운 하드웨어 지원&lt;/p>
&lt;ul>
&lt;li>하드웨어 트랜잭션 메모리&lt;/li>
&lt;li>원자적 명령어 활용&lt;/li>
&lt;li>멀티코어 최적화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>인메모리 데이터베이스&lt;/p>
&lt;ul>
&lt;li>락-프리 알고리즘&lt;/li>
&lt;li>비동기 복제&lt;/li>
&lt;li>실시간 동시성 제어&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>실제 구현 시 주의사항&lt;/h3>&lt;ol>
&lt;li>
&lt;p>데드락 예방&lt;/p>
&lt;ul>
&lt;li>타임아웃 설정&lt;/li>
&lt;li>자원 순서화&lt;/li>
&lt;li>데드락 감지 알고리즘 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 최적화&lt;/p>
&lt;ul>
&lt;li>락 경합(Lock Contention) 최소화&lt;/li>
&lt;li>트랜잭션 분할&lt;/li>
&lt;li>캐시 활용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>모니터링과 디버깅&lt;/p>
&lt;ul>
&lt;li>락 획득/해제 로깅&lt;/li>
&lt;li>성능 메트릭 수집&lt;/li>
&lt;li>병목 지점 분석&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>잠금 (Lock)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/lock/</link><pubDate>Mon, 18 Nov 2024 10:54:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/lock/</guid><description>
&lt;h2>잠금 (Lock)&lt;/h2>&lt;p>여러 스레드가 공유 자원에 동시에 접근하는 것을 방지하는 동기화 기본 요소이다.&lt;br>
임계 영역을 보호하고 한 번에 하나의 스레드만 접근할 수 있도록 한다.&lt;/p>
&lt;p>스레드가 임계 영역에 진입하기 전에 lock을 획득(acquire)하고, 임계 영역을 빠져나올 때 lock을 해제(release)한다. 다른 스레드가 이미 lock을 보유하고 있다면, lock을 획득하려는 스레드는 lock이 해제될 때까지 대기한다.&lt;/p>
&lt;p>Lock은 두 가지 상태를 가진다:&lt;/p>
&lt;ul>
&lt;li>잠금 해제 상태 (Unlocked): 다른 프로세스나 스레드가 Lock을 획득할 수 있는 상태&lt;/li>
&lt;li>잠금 상태 (Locked): 이미 한 프로세스나 스레드가 Lock을 보유하고 있는 상태&lt;/li>
&lt;/ul>
&lt;h3>작동 방식&lt;/h3>&lt;ol>
&lt;li>Lock 획득 (acquire): 스레드가 임계 영역에 진입하기 전에 lock을 획득합니다.&lt;/li>
&lt;li>임계 영역 실행: lock을 획득한 스레드만 임계 영역의 코드를 실행할 수 있습니다.&lt;/li>
&lt;li>Lock 해제 (release): 임계 영역을 빠져나올 때 lock을 해제합니다.&lt;/li>
&lt;/ol>
&lt;h3>Lock을 사용할 때 고려해야할 사항&lt;/h3>&lt;ol>
&lt;li>Lock의 범위는 가능한 한 작게 유지하여 성능 저하를 최소화한다.&lt;/li>
&lt;li>Lock을 획득하는 시간을 최소화하여 다른 스레드의 대기 시간을 줄인다.&lt;/li>
&lt;li>데드락을 방지하기 위해 Lock 획득 순서를 일관되게 유지한다.&lt;/li>
&lt;li>예외 상황에서도 Lock이 올바르게 해제되도록 보장한다.&lt;/li>
&lt;/ol>
&lt;h3>사용 예시&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">BankAccount&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># Lock 객체 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">withdraw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Lock을 획득 시도. 이미 잠겨있다면 획득할 때까지 대기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 잔액 확인과 차감이 하나의 원자적 작업으로 수행됨&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_balance&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">amount&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_balance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;출금 성공: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, 잔액: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;잔액 부족&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 예외가 발생하더라도 반드시 Lock을 해제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Lock의 유형&lt;/h3>&lt;h4>공유 락(Shared Lock)과 배타 락(Exclusive Lock)&lt;/h4>&lt;ul>
&lt;li>공유 락(Shared Lock):&lt;br>
여러 스레드가 동시에 리소스를 읽을 수 있지만, 쓰기는 불가능한 락.
&lt;ul>
&lt;li>읽기 작업에 사용되는 락(Lock)&lt;/li>
&lt;li>여러 스레드가 동시에 획득 가능&lt;/li>
&lt;li>쓰기 작업을 차단함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>배타 락(Exclusive Lock):&lt;br>
한 번에 하나의 스레드만 리소스에 접근할 수 있는 락.
&lt;ul>
&lt;li>쓰기 작업에 사용되는 락(Lock).&lt;/li>
&lt;li>다른 세션의 읽기와 쓰기를 모두 막는다.&lt;/li>
&lt;li>데이터 일관성 보장에 유용.&lt;/li>
&lt;li>동시성이 낮음.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Optional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SharedExclusiveLock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_holders&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 공유 락을 보유한 스레드들&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_exclusive_holder&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="c1"># 배타 락을 보유한 스레드&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Condition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire_shared&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;공유 락 획득&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_exclusive_holder&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_holders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thread_id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_count&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release_shared&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;공유 락 해제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">thread_id&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_holders&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;공유 락을 보유하고 있지 않습니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_holders&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thread_id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_count&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_count&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">notify_all&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire_exclusive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;배타 락 획득&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_exclusive_holder&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_shared_count&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_exclusive_holder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release_exclusive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;배타 락 해제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_exclusive_holder&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;배타 락을 보유하고 있지 않습니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_exclusive_holder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">notify_all&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 사용 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">reader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">SharedExclusiveLock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">reader_id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;읽기 작업을 수행하는 스레드&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Reader &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">reader_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 시작&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire_shared&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Reader &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">reader_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 읽기 작업 수행 중…&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release_shared&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Reader &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">reader_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 종료&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">writer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">SharedExclusiveLock&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">writer_id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;쓰기 작업을 수행하는 스레드&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Writer &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">writer_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 시작&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">acquire_exclusive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Writer &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">writer_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 쓰기 작업 수행 중…&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">release_exclusive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Writer &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">writer_id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 종료&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>업데이트 락(Update Lock)과 의도 락(Intent Lock)&lt;/h4>&lt;ul>
&lt;li>업데이트 락(Update Lock):&lt;br>
읽기는 허용하지만, 다른 업데이트 락이나 배타 락의 획득을 방지하는 락(Lock).
&lt;ul>
&lt;li>읽기 작업은 허용하지만 다른 업데이트나 쓰기 작업은 차단.&lt;/li>
&lt;li>읽기-쓰기 전환 시 데드락 방지에 유용하다.&lt;/li>
&lt;li>Conversion Deadlock을 방지하기 위해 사용된다.&lt;/li>
&lt;li>수정을 위해 베타 락(Exclusive Lock)을 걸기 전에 사용하는 락(Lock).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>의도 락(Intent Lock):&lt;br>
상위 레벨 리소스에 대한 락을 설정하기 전에 사용되는 락.
&lt;ul>
&lt;li>계층적 락킹 구조에서 사용.&lt;/li>
&lt;li>다른 트랜잭션에게 락 의도를 알림.&lt;/li>
&lt;li>데이터베이스 시스템에서 주로 사용됨.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">enum&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Enum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">auto&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Dict&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Set&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">LockType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Enum&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">INTENT_SHARED&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">auto&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">INTENT_EXCLUSIVE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">auto&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UPDATE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">auto&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SHARED&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">auto&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">EXCLUSIVE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">auto&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">HierarchicalLock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_holders&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Dict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">LockType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lock_type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">lock_type&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">LockType&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Condition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">_can_acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lock_type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">LockType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">thread_id&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;주어진 락 타입을 획득할 수 있는지 확인&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">lock_type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">LockType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">UPDATE&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 업데이트 락은 공유 락과 호환되지만 다른 업데이트 락과는 호환되지 않음&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_holders&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">LockType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">EXCLUSIVE&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="ow">or&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_holders&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">LockType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">UPDATE&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">lock_type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">LockType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">INTENT_SHARED&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 의도 공유 락은 배타 락과만 충돌&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_holders&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">LockType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">EXCLUSIVE&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># … 다른 락 타입에 대한 호환성 검사 로직 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lock_type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">LockType&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">bool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;락 획득&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_can_acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lock_type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">thread_id&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_holders&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lock_type&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thread_id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lock_type&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">LockType&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;락 해제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">thread_id&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_holders&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lock_type&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">lock_type&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> 락을 보유하고 있지 않습니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_holders&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">lock_type&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">thread_id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">notify_all&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>스핀 락 (Spin Lock)&lt;/h4>&lt;p>락을 획득할 때까지 계속해서 확인하는 바쁜 대기(busy-waiting) 방식의 락.&lt;/p>
&lt;ul>
&lt;li>CPU 사용량이 높지만 컨텍스트 스위칭 비용이 없음&lt;/li>
&lt;li>짧은 대기 시간에 효율적&lt;/li>
&lt;li>멀티코어 시스템에서 유용&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SpinLock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_locked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">max_attempts&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;스핀락 획득 시도&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">attempts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">thread_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">attempts&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">max_attempts&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_locked&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_locked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">thread_id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">attempts&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># CPU를 과도하게 사용하지 않도록 짧은 대기 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.000001&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;스핀락 해제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;잘못된 스레드가 해제를 시도했습니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_locked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>리더-라이터 락(Reader-Writer Lock)&lt;/h4>&lt;p>읽기 작업과 쓰기 작업을 구분하여 관리하는 락.&lt;/p>
&lt;ul>
&lt;li>다수의 읽기 작업 동시 허용&lt;/li>
&lt;li>쓰기 작업은 배타적으로 수행&lt;/li>
&lt;li>읽기 작업이 많은 경우 성능 향상&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Optional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ReaderWriterLock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">prefer_writer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">bool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_readers&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Set&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_writer&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_waiting_writers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_prefer_writer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">prefer_writer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Condition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire_read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;읽기 락 획득&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_writer&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="ow">or&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_prefer_writer&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_waiting_writers&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_readers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release_read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;읽기 락 해제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_readers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_readers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">notify_all&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">acquire_write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;쓰기 락 획득&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_waiting_writers&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_writer&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="kc">None&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_readers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_waiting_writers&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_writer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">release_write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;쓰기 락 해제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_writer&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">RuntimeError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;쓰기 락을 보유하고 있지 않습니다&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_writer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_condition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">notify_all&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>RCU 락 (Read-Copy-Update Lock)&lt;/h4>&lt;p>읽기 작업에 대해 락을 사용하지 않고, 쓰기 작업 시 복사본을 만들어 업데이트하는 동기화 메커니즘.&lt;/p>
&lt;ul>
&lt;li>읽기 작업의 성능이 매우 높음&lt;/li>
&lt;li>쓰기 작업의 오버헤드가 있음&lt;/li>
&lt;li>읽기가 많고 쓰기가 적은 시나리오에 적합&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Dict&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">RCULock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_current_version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Dict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="c1"># 버전별 데이터 저장&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Dict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1"># 버전별 활성 읽기 작업&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">read_lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;읽기 작업 시작&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_current_version&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">set&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">version&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">read_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">version&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;읽기 작업 종료&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_ident&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">del&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 오래된 버전 정리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">old_version&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="p">()):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">old_version&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">old_version&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">del&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">old_version&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">new_data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;데이터 업데이트&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new_version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_current_version&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">new_version&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_current_version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_version&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 더 이상 사용되지 않는 버전 정리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_data&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">keys&lt;/span>&lt;span class="p">()):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">new_version&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_active_readers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">del&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">version&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;특정 버전의 데이터 조회&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h3>참고 및 출처&lt;/h3></description></item><item><title>상호 배제 (Mutual Exclusion)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/mutual-exclusion/</link><pubDate>Sun, 17 Nov 2024 07:50:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/mutual-exclusion/</guid><description>
&lt;h2>상호 배제 (Mutual Exclusion)&lt;/h2>&lt;p>여러 프로세스나 스레드가 공유 자원에 동시에 접근하는 것을 방지하는 동기화 메커니즘.&lt;br>
한 번에 하나의 프로세스나 스레드만 임계 영역(critical section)에 진입할 수 있도록 보장하는 기법이다.&lt;/p>
&lt;p>필요한 이유:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 상호 배제가 없는 경우의 문제점&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">BankAccount&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">withdraw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 다음 세 줄의 작업이 원자적이지 않음&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="c1"># 잔액 읽기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_balance&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">amount&lt;/span> &lt;span class="c1"># 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_balance&lt;/span> &lt;span class="c1"># 결과 저장&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 두 스레드가 동시에 실행되면 문제가 발생할 수 있음&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">account&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BankAccount&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 스레드 1: withdraw(500)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 스레드 2: withdraw(500)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 예상 잔액: 0, 실제 잔액: 500 (잘못된 결과)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>목적&lt;/h3>&lt;ul>
&lt;li>데이터 무결성 유지: 여러 프로세스가 동시에 공유 데이터를 수정하는 것을 방지한다.&lt;/li>
&lt;li>경쟁 조건(Race Condition) 예방: 프로세스 실행 순서에 따른 결과 불일치를 막는다.&lt;/li>
&lt;li>교착 상태(Deadlock)와 기아 상태(Starvation) 방지: 자원 할당의 효율성을 높인다.&lt;/li>
&lt;/ul>
&lt;h3>구현 방법&lt;/h3>&lt;ol>
&lt;li>
&lt;p>잠금(Lock)&lt;br>
가장 기본적인 동기화 메커니즘으로, 한 번에 하나의 스레드만 임계 영역에 접근할 수 있게 한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>세마포어(Semaphores)&lt;br>
여러 스레드가 동시에 접근할 수 있는 자원의 수를 제한한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>모니터(Monitor)&lt;br>
모니터는 객체 지향적인 동기화 메커니즘으로, 데이터와 해당 데이터에 접근하는 메서드들을 하나의 단위로 캡슐화한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>조건 변수(Condition Variable)&lt;br>
스레드가 특정 조건이 만족될 때까지 대기하게 해주는 동기화 메커니즘.&lt;br>
생산자-소비자 패턴에서 자주 사용된다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>원자적 연산 (Atomic Operations)&lt;br>
하드웨어 수준에서 지원하는 원자적 연산을 사용하여 상호 배제를 구현할 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>메시지 패싱 (Message Passing)&lt;br>
프로세스나 스레드 간에 메시지를 주고받아 상호 배제를 구현할 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>비동기 프로그래밍 (Asynchronous Programming)&lt;br>
비동기 프로그래밍을 통해 상호 배제를 구현할 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>피터슨 알고리즘 (Peterson&amp;rsquo;s Algorithm)&lt;br>
두 프로세스 간의 상호 배제를 소프트웨어적으로 구현하는 방법.&lt;br>
플래그와 턴 변수를 사용하여 임계 영역 진입을 제어한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>데커 알고리즘 (Dekker&amp;rsquo;s Algorithm)&lt;br>
피터슨 알고리즘과 비슷하지만 더 복잡한 구조를 가진 상호 배제 알고리즘.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>램포트의 빵집 알고리즘 (Lamport&amp;rsquo;s Bakery Algorithm)&lt;br>
여러 프로세스 간의 상호 배제를 구현할 수 있는 알고리즘.&lt;br>
빵집에서 번호표를 뽑는 것과 같은 방식으로 작동한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>동기화 메커니즘은 서로 다른 상황에서 유용하다:&lt;/p>
&lt;ul>
&lt;li>Lock은 간단한 상호 배제가 필요할 때 사용&lt;/li>
&lt;li>Semaphore는 리소스 풀 관리에 적합&lt;/li>
&lt;li>Monitor는 데이터와 연산을 함께 캡슐화할 때 유용&lt;/li>
&lt;li>Condition Variables는 스레드 간 시그널링이 필요할 때 사용&lt;/li>
&lt;/ul>
&lt;h3>조건&lt;/h3>&lt;ul>
&lt;li>상호 배제: 한 번에 하나의 프로세스만 임계 영역에 진입할 수 있어야 한다.&lt;/li>
&lt;li>진행: 임계 영역 외부의 프로세스가 다른 프로세스의 진입을 방해해서는 안 된다.&lt;/li>
&lt;li>유한 대기: 프로세스는 임계 영역 진입을 무한정 기다리지 않아야 한다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>임계 영역 (Critical Section)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/</link><pubDate>Sun, 17 Nov 2024 07:49:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section/</guid><description>
&lt;h2>임계 영역 (Critical Section)&lt;/h2>&lt;p>운영체제에서 임계 영역(Critical Section)은 여러 프로세스 또는 스레드가 공유하는 자원에 접근하는 코드 영역을 말한다.&lt;br>
이는 병렬 컴퓨팅 환경에서 중요한 개념으로, 데이터의 일관성과 무결성을 보장하기 위해 사용된다.&lt;/p>
&lt;p>여러 프로세스가 동시에 임계 영역에 진입하면 데이터의 일관성이 깨질 수 있다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 임계 영역 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000&lt;/span> &lt;span class="c1"># 공유 자원&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">withdraw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">amount&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">global&lt;/span> &lt;span class="n">balance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 임계 영역 시작&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">balance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">amount&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">balance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 임계 영역 종료&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>임계 영역 문제의 해결 조건&lt;/h3>&lt;ol>
&lt;li>상호 배제(Mutual Exclusion): 한 프로세스가 임계 영역에 있을 때 다른 프로세스는 진입할 수 없다.&lt;/li>
&lt;li>진행(Progress): 임계 영역에 있는 프로세스가 없다면, 진입하려는 프로세스가 들어갈 수 있어야 한다.&lt;/li>
&lt;li>한정된 대기(Bounded Waiting): 프로세스의 임계 영역 진입은 무한정 연기되어서는 안 된다.&lt;/li>
&lt;/ol>
&lt;h3>임계 영역 관련 문제와 해결 방법&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>구분&lt;/th>
&lt;th>데드락(Deadlock)&lt;/th>
&lt;th>경쟁 상태(Race Condition)&lt;/th>
&lt;th>기아 상태(Starvation)&lt;/th>
&lt;th>라이브락(Livelock)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>두 개 이상의 프로세스가 서로의 자원을 기다리며 영구적으로 블록된 상태&lt;/td>
&lt;td>여러 프로세스가 공유 자원에 동시 접근할 때 실행 순서에 따라 결과가 달라지는 상태&lt;/td>
&lt;td>특정 프로세스가 필요한 자원을 계속 할당받지 못하는 상태&lt;/td>
&lt;td>프로세스들이 서로에게 응답하며 상태는 변하지만 실제 진행은 없는 상태&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>발생 원인&lt;/td>
&lt;td>상호 배제, 점유와 대기, 비선점, 순환 대기 조건이 동시 충족&lt;/td>
&lt;td>공유 자원에 대한 동시 접근, 원자성 결여&lt;/td>
&lt;td>부적절한 자원 할당 정책, 우선순위 역전 현상&lt;/td>
&lt;td>프로세스들의 과도한 양보, 재귀적 회피 동작&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결과&lt;/td>
&lt;td>시스템 전체 또는 일부 프로세스의 완전한 정지&lt;/td>
&lt;td>데이터 불일치, 예측 불가능한 결과&lt;/td>
&lt;td>특정 프로세스의 실행 지연 또는 무한 대기&lt;/td>
&lt;td>CPU 자원 소비, 실제 작업 진행 없음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>특징&lt;/td>
&lt;td>프로세스들이 움직이지 않고 완전히 멈춤&lt;/td>
&lt;td>타이밍에 따라 결과가 비결정적&lt;/td>
&lt;td>자원 할당의 불공정성&lt;/td>
&lt;td>프로세스들이 활발히 상태 변경&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>해결 방법&lt;/td>
&lt;td>프로세스 강제 종료, 자원 선점, 데드락 발생 조건 제거&lt;/td>
&lt;td>동기화 메커니즘 사용(뮤텍스, 세마포어 등)&lt;/td>
&lt;td>에이징(Aging) 기법 도입, 공정한 스케줄링&lt;/td>
&lt;td>무작위 대기 시간 도입, 우선순위 조정&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>예방 기법&lt;/td>
&lt;td>자원 할당 그래프 사용, 자원 순서화, 타임아웃 설정&lt;/td>
&lt;td>임계 영역 설정, 원자적 연산 사용&lt;/td>
&lt;td>자원 예약 시스템, 우선순위 조정 메커니즘&lt;/td>
&lt;td>타임아웃 설정, 재시도 횟수 제한&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>탐지 방법&lt;/td>
&lt;td>자원 할당 그래프 분석, 대기 사이클 검출&lt;/td>
&lt;td>데이터 일관성 검사, 로그 분석&lt;/td>
&lt;td>자원 할당 통계 모니터링&lt;/td>
&lt;td>CPU 사용률 분석, 진행률 모니터링&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>영향 범위&lt;/td>
&lt;td>전체 시스템 또는 관련 프로세스 그룹&lt;/td>
&lt;td>공유 자원을 사용하는 프로세스들&lt;/td>
&lt;td>특정 프로세스 또는 프로세스 그룹&lt;/td>
&lt;td>상호 작용하는 프로세스 그룹&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>복구 방법&lt;/td>
&lt;td>프로세스 재시작, 시스템 재부팅&lt;/td>
&lt;td>트랜잭션 롤백, 상태 복원&lt;/td>
&lt;td>우선순위 재조정, 자원 재할당&lt;/td>
&lt;td>프로세스 재시작 또는 동작 패턴 변경&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>모니터링 방법&lt;/td>
&lt;td>시스템 자원 모니터링, 프로세스 상태 감시&lt;/td>
&lt;td>로그 분석, 데이터 정합성 검사&lt;/td>
&lt;td>자원 할당 히스토리 분석&lt;/td>
&lt;td>CPU 사용률 추적, 진행 상태 모니터링&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>해결 방법&lt;/h4>&lt;ol>
&lt;li>
&lt;p>상호 배제(Mutual Exclusion) 구현:&lt;/p>
&lt;ul>
&lt;li>뮤텍스(Mutex): 하나의 공유 자원에 대한 접근을 제어한다.&lt;/li>
&lt;li>세마포어(Semaphore): 여러 개의 공유 자원에 대한 접근을 제어한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>동기화 기법:&lt;/p>
&lt;ul>
&lt;li>피터슨 알고리즘(Peterson&amp;rsquo;s Algorithm): 두 프로세스 간의 상호 배제를 소프트웨어적으로 구현한다.&lt;/li>
&lt;li>베이커리 알고리즘(Bakery Algorithm): 여러 프로세스 간의 상호 배제를 구현한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>하드웨어 지원:&lt;/p>
&lt;ul>
&lt;li>테스트와 설정(Test-and-Set) 명령어: 원자적 연산을 통해 상호 배제를 구현한다.&lt;/li>
&lt;li>비교와 교환(Compare-and-Swap) 명령어: 더 정교한 동기화 제어를 가능하게 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>운영체제 수준의 지원:&lt;/p>
&lt;ul>
&lt;li>모니터(Monitor): 고수준의 동기화 메커니즘으로, 상호 배제를 자동으로 보장한다.&lt;/li>
&lt;li>조건 변수(Condition Variables): 프로세스 간 통신과 동기화를 위해 사용된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>프로그래밍 언어 수준의 지원:&lt;/p>
&lt;ul>
&lt;li>동기화 키워드(예: Java의 synchronized): 임계 영역에 대한 접근을 언어 차원에서 제어한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>락-프리(Lock-Free) 및 대기-프리(Wait-Free) 알고리즘:&lt;/p>
&lt;ul>
&lt;li>락을 사용하지 않고도 동시성을 관리하는 고급 기법.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h5>해결 방법들을 적용할 때 고려해야 할 중요한 원칙&lt;/h5>&lt;ul>
&lt;li>상호 배제(Mutual Exclusion)
&lt;ul>
&lt;li>한 번에 하나의 프로세스만 임계 영역에 진입할 수 있도록 보장&lt;/li>
&lt;li>적절한 동기화 메커니즘 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>진행(Progress)
&lt;ul>
&lt;li>임계 영역에 있는 프로세스가 없다면 진입을 원하는 프로세스가 진입할 수 있어야 함&lt;/li>
&lt;li>기아 상태 방지&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>한정 대기(Bounded Waiting)
&lt;ul>
&lt;li>프로세스의 임계 영역 진입 요청 후 무한정 대기하지 않도록 보장&lt;/li>
&lt;li>공정성 확보&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>원자성(Atomicity)
&lt;ul>
&lt;li>임계 영역의 연산은 중단되지 않고 완전히 수행되어야 함&lt;/li>
&lt;li>트랜잭션 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3>임계 영역 최적화 기법&lt;/h3>&lt;h4>임계 영역 최소화&lt;/h4>&lt;p>임계 영역을 가능한 한 작게 유지하는 것이 중요하다.&lt;br>
이를 통해 동기화로 인한 오버헤드를 줄이고 병렬 처리 효율을 높일 수 있다.&lt;/p>
&lt;ul>
&lt;li>공유 데이터 접근 코드만 임계 영역으로 설정&lt;/li>
&lt;li>계산 로직은 임계 영역 밖으로 이동&lt;/li>
&lt;/ul>
&lt;h4>세밀한 잠금 (Fine-grained Locking)&lt;/h4>&lt;p>큰 임계 영역을 여러 개의 작은 임계 영역으로 나누는 기법.&lt;/p>
&lt;ul>
&lt;li>데이터 구조의 일부분만 잠그도록 설계&lt;/li>
&lt;li>동시성을 높이고 대기 시간을 줄임&lt;/li>
&lt;/ul>
&lt;h4>락-프리 알고리즘 (Lock-free Algorithms)&lt;/h4>&lt;p>락을 사용하지 않고 원자적 연산을 활용하여 동기화를 구현한다.&lt;/p>
&lt;ul>
&lt;li>Compare-and-Swap (CAS) 등의 원자적 연산 사용&lt;/li>
&lt;li>데드락 위험 제거 및 성능 향상&lt;/li>
&lt;/ul>
&lt;h4>읽기-쓰기 락 (Read-Write Locks)&lt;/h4>&lt;p>읽기 작업과 쓰기 작업에 대해 서로 다른 락을 사용한다.&lt;/p>
&lt;ul>
&lt;li>다수의 읽기 작업 동시 허용&lt;/li>
&lt;li>쓰기 작업 시에만 배타적 접근&lt;/li>
&lt;/ul>
&lt;h4>비동기 프로그래밍 (Asynchronous Programming)&lt;/h4>&lt;p>비동기 프로그래밍 모델을 사용하여 임계 영역 접근을 최소화한다.&lt;/p>
&lt;ul>
&lt;li>이벤트 기반 프로그래밍&lt;/li>
&lt;li>콜백 또는 Promise 패턴 활용&lt;/li>
&lt;/ul>
&lt;h4>락 결합 (Lock Coalescing)&lt;/h4>&lt;p>여러 개의 연속된 락 획득과 해제를 하나로 합치는 기법.&lt;/p>
&lt;ul>
&lt;li>락 획득/해제 횟수 감소&lt;/li>
&lt;li>오버헤드 감소 및 성능 향상&lt;/li>
&lt;/ul>
&lt;h4>락 계층화 (Lock Hierarchies)&lt;/h4>&lt;p>락을 계층적으로 구성하여 데드락을 방지하고 성능을 개선한다.&lt;/p>
&lt;ul>
&lt;li>락 획득 순서 강제&lt;/li>
&lt;li>복잡한 동기화 시나리오에서 유용&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>동기화 (Synchronization)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/synchronization/</link><pubDate>Thu, 07 Nov 2024 07:48:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/synchronization/</guid><description>
&lt;h2>동기화 (Synchronization)&lt;/h2>&lt;p>여러 프로세스나 스레드가 공유 자원에 접근할 때 데이터의 일관성과 무결성을 보장하기 위한 메커니즘.&lt;br>
동기화란 프로세스 또는 스레드들이 수행되는 시점을 조절하여 서로가 알고 있는 정보가 일치하도록 하는 것을 의미한다. 이는 여러 작업 간의 실행 순서와 타이밍을 제어하여 데이터의 일관성을 유지하고 경쟁 상태(Race Condition)를 방지하는 것을 목표로 한다.&lt;/p>
&lt;h3>동기화의 필요성&lt;/h3>&lt;p>동기화가 필요한 주요 이유는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>데이터 일관성 유지: 여러 프로세스나 스레드가 동시에 같은 데이터에 접근할 때 발생할 수 있는 불일치를 방지한다.&lt;/li>
&lt;li>경쟁 상태 방지: 둘 이상의 프로세스가 공유 자원에 동시에 접근하려 할 때 발생할 수 있는 예측 불가능한 결과를 방지한다.&lt;/li>
&lt;li>순서 보장: 특정 작업이 다른 작업보다 먼저 실행되어야 하는 경우, 동기화를 통해 실행 순서를 제어할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>동기화 메커니즘&lt;/h3>&lt;p>동기화를 구현하기 위한 주요 메커니즘은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>뮤텍스(Mutex): 상호 배제를 위한 잠금 메커니즘으로, 한 번에 하나의 스레드만 공유 자원에 접근할 수 있도록 한다.&lt;/li>
&lt;li>세마포어(Semaphore): 여러 프로세스나 스레드가 공유 자원에 접근할 수 있는 수를 제한하는 카운팅 메커니즘.&lt;/li>
&lt;li>모니터(Monitor): 공유 자원을 내부적으로 관리하고, 외부에서는 정해진 인터페이스를 통해서만 접근할 수 있도록 하는 고수준의 동기화 구조.&lt;/li>
&lt;li>조건 변수(Condition Variables): 특정 조건이 만족될 때까지 스레드를 대기시키고, 조건이 충족되면 대기 중인 스레드를 깨우는 메커니즘.&lt;/li>
&lt;/ol>
&lt;h3>동기화의 구현&lt;/h3>&lt;p>프로그래밍에서 동기화를 구현할 때는 다음과 같은 방법들이 사용된다:&lt;/p>
&lt;ol>
&lt;li>임계 영역(Critical Section) 설정: 공유 자원에 접근하는 코드 부분을 임계 영역으로 지정하고, 한 번에 하나의 프로세스만 진입할 수 있도록 한다.&lt;/li>
&lt;li>락(Lock) 사용: 공유 자원에 접근하기 전에 락을 획득하고, 작업이 끝나면 락을 해제하는 방식으로 동기화를 구현한다.&lt;/li>
&lt;li>원자적 연산(Atomic Operations) 사용: 분할할 수 없는 단일 연산으로 처리하여 중간 상태를 방지한다.&lt;/li>
&lt;/ol>
&lt;h3>동기화의 주의사항&lt;/h3>&lt;p>동기화를 구현할 때는 다음과 같은 점들을 주의해야 한다:&lt;/p>
&lt;ol>
&lt;li>데드락(Deadlock) 방지: 여러 프로세스가 서로의 자원을 기다리며 영원히 블록되는 상황을 피해야 한다.&lt;/li>
&lt;li>성능 고려: 과도한 동기화는 성능 저하를 초래할 수 있으므로, 필요한 부분에만 적절히 사용해야 한다.&lt;/li>
&lt;li>세밀한 락 사용: 전역 락 대신 세분화된 락을 사용하여 병렬성을 높인다.&lt;/li>
&lt;li>재진입성(Reentrancy) 고려: 동일한 스레드가 이미 획득한 락을 다시 획득할 수 있도록 재진입 가능한 락을 사용해야 할 수 있다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>File System</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/file-system/</link><pubDate>Mon, 28 Oct 2024 08:30:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/file-system/</guid><description>
&lt;h2>File System&lt;/h2>&lt;p>컴퓨터 운영 체제에서 파일과 데이터를 저장, 관리, 검색하는 데 사용되는 구조&lt;br>
파일 시스템은 물리적 저장 장치에서 파일의 물리적 위치를 관리하고, 파일의 이름, 크기, 속성 등을 포함한 메타데이터를 유지한다.&lt;/p>
&lt;p>역할과 필요성:&lt;br>
파일 시스템은 컴퓨터에서 데이터를 체계적으로 저장하고 관리하기 위해 필수적.&lt;br>
초기 컴퓨터에서는 데이터의 양이 적어 파일 시스템이 필요하지 않았지만, 데이터가 증가하면서 효율적인 관리가 필요하게 되었다.&lt;/p>
&lt;h3>기능&lt;/h3>&lt;ul>
&lt;li>&lt;strong>데이터 조직&lt;/strong>: 파일을 디렉터리 구조로 구성하여 쉽게 탐색할 수 있도록 합니다.&lt;/li>
&lt;li>&lt;strong>데이터 접근&lt;/strong>: 특정 파일에 대한 빠르고 효율적인 접근을 지원합니다.&lt;/li>
&lt;li>&lt;strong>저장 공간 관리&lt;/strong>: 디스크 공간을 효율적으로 사용하여 중복을 최소화하고 성능을 최적화합니다.&lt;/li>
&lt;/ul>
&lt;h3>주요 파일 시스템 종류&lt;/h3>&lt;h4>FAT (File Allocation Table)&lt;/h4>&lt;ul>
&lt;li>&lt;strong>특징&lt;/strong>: 오래된 파일 시스템으로 간단한 구조를 가지고 있으며, 호환성이 높아 다양한 운영 체제에서 사용됩니다.&lt;/li>
&lt;li>&lt;strong>제한&lt;/strong>: 단일 파일 크기 제한(4GB) 및 볼륨 크기 제한(2TB)이 있어 대용량 데이터를 처리하는 데는 부적합합니다.&lt;/li>
&lt;/ul>
&lt;h4>NTFS (New Technology File System)&lt;/h4>&lt;ul>
&lt;li>&lt;strong>특징&lt;/strong>: Windows 운영 체제에서 주로 사용되며, 보안, 파일 압축, 대용량 파일 지원 등 고급 기능을 제공합니다.&lt;/li>
&lt;li>&lt;strong>장점&lt;/strong>: 데이터 무결성을 위한 저널링 기능과 향상된 보안 기능을 갖추고 있습니다.&lt;/li>
&lt;/ul>
&lt;h4>ext3/ext4 (Extended Filesystem)&lt;/h4>&lt;ul>
&lt;li>&lt;strong>특징&lt;/strong>: 리눅스에서 주로 사용되며, ext3는 저널링을 도입하여 데이터 무결성을 강화했습니다. ext4는 대용량 스토리지 지원과 성능 향상을 제공합니다.&lt;/li>
&lt;li>&lt;strong>장점&lt;/strong>: 대용량 데이터 처리에 적합하며, 온라인 상태에서 파일 시스템 확장이 가능합니다.&lt;/li>
&lt;/ul>
&lt;h4>HFS+ 및 APFS (Apple File System)&lt;/h4>&lt;ul>
&lt;li>&lt;strong>HFS+&lt;/strong>: macOS에서 사용되며 유니코드 파일명 지원과 대용량 파일 처리를 제공합니다.&lt;/li>
&lt;li>&lt;strong>APFS&lt;/strong>: 최신 macOS 및 iOS 기기에서 사용되며, 저장 공간 관리와 데이터 무결성을 강화한 최신 파일 시스템입니다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>메모리 관리 (Memory Management)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/</link><pubDate>Tue, 15 Oct 2024 17:18:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/</guid><description>
&lt;h2>메모리 관리 (Memory Management)&lt;/h2>&lt;p>운영체제의 핵심 기능 중 하나로, 컴퓨터의 주 메모리를 효율적으로 관리하는 역할을 한다.&lt;/p>
&lt;p>목적:&lt;/p>
&lt;ul>
&lt;li>프로세스 간 메모리 할당 및 해제&lt;/li>
&lt;li>사용 중인 메모리 공간 추적&lt;/li>
&lt;li>메모리 단편화 최소화&lt;/li>
&lt;li>주 메모리의 효율적 활용&lt;/li>
&lt;/ul>
&lt;h3>주요 메모리 관리 기법&lt;/h3>&lt;h4>페이징 (Paging)&lt;/h4>&lt;ul>
&lt;li>물리 메모리를 고정 크기의 블록(페이지)으로 나눔&lt;/li>
&lt;li>프로세스의 가상 주소 공간도 같은 크기의 페이지로 나눔&lt;/li>
&lt;li>장점:&lt;br>
외부 단편화 문제 해결, 가상 메모리 구현 용이&lt;/li>
&lt;li>단점:&lt;br>
내부 단편화 발생 가능&lt;/li>
&lt;/ul>
&lt;h4>세그멘테이션 (Segmentation)&lt;/h4>&lt;ul>
&lt;li>프로세스를 논리적 단위(세그먼트)로 나눔&lt;/li>
&lt;li>각 세그먼트는 서로 다른 크기를 가질 수 있음&lt;/li>
&lt;li>장점:&lt;br>
논리적 분할로 보안성 향상, 공유와 보호 용이&lt;/li>
&lt;li>단점:&lt;br>
외부 단편화 발생 가능&lt;/li>
&lt;/ul>
&lt;h4>가상 메모리 (Virtual Memory)&lt;/h4>&lt;ul>
&lt;li>물리적 메모리보다 큰 주소 공간 제공&lt;/li>
&lt;li>하드 디스크를 RAM의 확장으로 사용&lt;/li>
&lt;li>장점:&lt;br>
더 큰 프로그램 실행 가능, 멀티태스킹 효율 향상&lt;/li>
&lt;li>단점:&lt;br>
물리적 메모리보다 접근 속도 느림&lt;/li>
&lt;/ul>
&lt;h3>메모리 할당 방식&lt;/h3>&lt;ol>
&lt;li>연속 할당: 프로세스에 연속된 메모리 공간 할당&lt;/li>
&lt;li>비연속 할당: 프로세스를 여러 조각으로 나누어 할당 (페이징, 세그멘테이션)&lt;/li>
&lt;/ol>
&lt;h3>메모리 관리의 주요 문제와 해결 방안&lt;/h3>&lt;p>메모리 단편화:&lt;/p>
&lt;ul>
&lt;li>외부 단편화: 프로그램들 사이에 발생하는 작은 빈 공간들&lt;/li>
&lt;li>내부 단편화: 할당된 메모리의 일부가 사용되지 않는 현상&lt;/li>
&lt;li>해결방안: 메모리 압축, 페이징 기법 사용&lt;/li>
&lt;/ul>
&lt;p>페이지 교체: 메모리가 부족할 때 어떤 페이지를 디스크로 내보낼지 결정해야 합니다. 다양한 교체 알고리즘(LRU, FIFO 등)이 사용된다.&lt;/p>
&lt;p>스래싱(Thrashing): 페이지 교체가 너무 빈번하게 일어나 실제 작업보다 페이지 교체에 더 많은 시간을 소요하는 현상. 적절한 메모리 할당과 프로세스 수 조절로 해결할 수 있습니다.&lt;/p>
&lt;p>현대적인 메모리 관리 기술:&lt;/p>
&lt;ul>
&lt;li>메모리 압축: 사용하지 않는 메모리 영역을 압축하여 더 많은 공간을 확보하는 기술입니다.&lt;/li>
&lt;li>대용량 페이지: 더 큰 크기의 페이지를 사용하여 페이지 테이블의 크기를 줄이고 성능을 향상시키는 기술입니다.&lt;/li>
&lt;li>NUMA(Non-Uniform Memory Access): 멀티프로세서 시스템에서 메모리 접근 시간을 최적화하는 기술입니다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Process Scheduling</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-scheduling/</link><pubDate>Sun, 29 Sep 2024 06:21:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-scheduling/</guid><description>
&lt;h2>프로세스 스케쥴링 (Process Scheduling)&lt;/h2>&lt;p>프로세스 스케줄링은 컴퓨터의 CPU 자원을 여러 프로세스에 효율적으로 할당하는 방법을 결정하는 메커니즘.&lt;br>
프로세스 스케줄링도 다양한 요소를 고려하여 최적의 실행 순서를 결정한다.&lt;/p>
&lt;h3>주요 특징&lt;/h3>&lt;ol>
&lt;li>CPU 활용도 극대화: I/O 대기 시간 동안 다른 프로세스에 CPU를 할당하여 유휴 시간을 최소화합니다.&lt;/li>
&lt;li>처리량 증가: 단위 시간당 완료되는 프로세스의 수를 늘립니다.&lt;/li>
&lt;li>응답 시간 최소화: 사용자 요청에 대한 시스템의 반응 속도를 향상시킵니다.&lt;/li>
&lt;li>대기 시간 감소: 프로세스가 준비 큐에서 기다리는 시간을 줄입니다.&lt;/li>
&lt;li>공정성 유지: 모든 프로세스에 적절한 CPU 시간을 할당합니다.&lt;/li>
&lt;/ol>
&lt;h3>스케줄링의 목적&lt;/h3>&lt;ol>
&lt;li>
&lt;p>CPU 활용도 최대화&lt;/p>
&lt;ul>
&lt;li>CPU가 쉬는 시간을 최소화&lt;/li>
&lt;li>가능한 한 많은 작업 처리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>처리량(Throughput) 향상&lt;/p>
&lt;ul>
&lt;li>단위 시간당 완료되는 프로세스 수 증가&lt;/li>
&lt;li>시스템 전체의 효율성 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>응답 시간 최소화&lt;/p>
&lt;ul>
&lt;li>사용자 요청에 대한 빠른 반응&lt;/li>
&lt;li>대화형 시스템에서 특히 중요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>대기 시간 최소화&lt;/p>
&lt;ul>
&lt;li>프로세스가 준비 큐에서 기다리는 시간 감소&lt;/li>
&lt;li>전체적인 시스템 성능 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스케줄링 방식&lt;/h3>&lt;ul>
&lt;li>선점형: 실행 중인 프로세스를 중단하고 다른 프로세스에 CPU를 할당할 수 있다.&lt;/li>
&lt;li>비선점형: 실행 중인 프로세스가 자발적으로 CPU를 반환할 때까지 기다린다.&lt;/li>
&lt;/ul>
&lt;p>PCB(Process Control Block) 는프로세스 스케줄링에 다음과 같은 방식으로 기여한다:&lt;/p>
&lt;ol>
&lt;li>프로세스 상태 관리: PCB는 프로세스의 현재 상태(실행 중, 준비, 대기 등)를 저장한다. 스케줄러는 이 정보를 사용하여 실행 가능한 프로세스를 식별하고 선택한다.&lt;/li>
&lt;li>스케줄링 정보 제공: PCB에는 프로세스의 우선순위, CPU 사용 시간 등 스케줄링에 필요한 정보가 포함되어 있다. 스케줄러는 이 정보를 바탕으로 다음에 실행할 프로세스를 결정한다.&lt;/li>
&lt;li>컨텍스트 스위칭 지원: PCB는 프로세스의 레지스터 값, 프로그램 카운터 등을 저장하여 컨텍스트 스위칭을 가능하게 한다. 이를 통해 스케줄러는 프로세스 간 전환을 효율적으로 수행할 수 있다.&lt;/li>
&lt;li>리소스 할당 정보 저장: PCB는 프로세스에 할당된 메모리, 열린 파일 등의 리소스 정보를 포함한다. 스케줄러는 이 정보를 사용하여 리소스 경쟁을 관리하고 데드락을 방지한다.&lt;/li>
&lt;li>성능 모니터링: PCB에 저장된 CPU 사용 시간, 대기 시간 등의 정보는 스케줄러가 시스템 성능을 모니터링하고 최적화하는 데 사용된다.&lt;/li>
&lt;/ol>
&lt;p>이러한 기여를 통해 PCB는 운영 체제가 효율적인 프로세스 스케줄링을 수행하고, 시스템 자원을 최적화하며, 전반적인 시스템 성능을 향상시키는 데 중요한 역할을 한다.&lt;/p>
&lt;h3>주요 스케줄링 알고리즘&lt;/h3>&lt;h4>선입선출(FCFS, First-Come, First-Served)&lt;/h4>&lt;p>이는 가장 단순한 스케줄링 방식으로, 먼저 도착한 프로세스를 먼저 처리한다.&lt;/p>
&lt;h5>예시&lt;/h5>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># FCFS 스케줄링 시뮬레이션&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">processes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">fcfs_scheduling&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">processes&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">sorted&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">processes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">lambda&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">current_time&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">waiting_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">current_time&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;arrival_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Process &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;id&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">: Waiting Time = &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">waiting_time&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>최단 작업 우선(SJF, Shortest Job First)&lt;/h4>&lt;p>실행 시간이 가장 짧은 프로세스를 우선적으로 처리하는 방식.&lt;/p>
&lt;h5>특징&lt;/h5>&lt;ul>
&lt;li>평균 대기 시간 최소화&lt;/li>
&lt;li>실행 시간 예측 필요&lt;/li>
&lt;li>기아 현상 발생 가능&lt;/li>
&lt;/ul>
&lt;h4>라운드 로빈(Round Robin)&lt;/h4>&lt;p>각 프로세스에 동일한 시간 할당량을 부여하고 순환하며 실행하는 방식.&lt;/p>
&lt;h5>구현 예시&lt;/h5>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">round_robin_scheduling&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">processes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">time_quantum&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ready_queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">processes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">copy&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">ready_queue&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ready_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">time_quantum&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">time_quantum&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">time_quantum&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ready_queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">process&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">current_time&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">process&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;burst_time&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>우선순위 스케줄링(Priority Scheduling)&lt;/h4>&lt;p>각 프로세스에 우선순위를 부여하고, 높은 우선순위의 프로세스를 먼저 실행한다.&lt;/p>
&lt;h5>고려사항&lt;/h5>&lt;ul>
&lt;li>우선순위 결정 기준&lt;/li>
&lt;li>우선순위 역전 현상&lt;/li>
&lt;li>에이징(Aging) 기법 적용&lt;/li>
&lt;/ul>
&lt;h4>다단계 큐(Multilevel Queue)&lt;/h4>&lt;p>프로세스들을 여러 종류의 큐로 분류하여 관리하는 방식.&lt;/p>
&lt;h5>구성&lt;/h5>&lt;ul>
&lt;li>전위큐(Foreground Queue)&lt;/li>
&lt;li>후위큐(Background Queue)&lt;/li>
&lt;li>각 큐별 다른 스케줄링 알고리즘 적용&lt;/li>
&lt;/ul>
&lt;h3>실제 운영체제의 스케줄링&lt;/h3>&lt;ol>
&lt;li>
&lt;p>Linux의 CFS(Completely Fair Scheduler)&lt;/p>
&lt;ul>
&lt;li>프로세스 간 CPU 시간을 공정하게 분배&lt;/li>
&lt;li>레드-블랙 트리 사용&lt;/li>
&lt;li>동적 우선순위 조정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Windows의 다단계 피드백 큐&lt;/p>
&lt;ul>
&lt;li>프로세스의 행동에 따라 우선순위 동적 조정&lt;/li>
&lt;li>I/O 중심과 CPU 중심 프로세스 구분&lt;/li>
&lt;li>응답성과 처리량 균형 조정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스케줄링 성능 평가 지표&lt;/h3>&lt;ol>
&lt;li>
&lt;p>CPU 활용률&lt;/p>
&lt;ul>
&lt;li>CPU가 실제 작업을 처리하는 비율&lt;/li>
&lt;li>높을수록 효율적&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>처리량&lt;/p>
&lt;ul>
&lt;li>단위 시간당 완료되는 프로세스 수&lt;/li>
&lt;li>시스템 성능 지표&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>턴어라운드 타임&lt;/p>
&lt;ul>
&lt;li>프로세스 시작부터 종료까지 걸리는 시간&lt;/li>
&lt;li>전체적인 작업 처리 시간&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>대기 시간&lt;/p>
&lt;ul>
&lt;li>프로세스가 실행을 기다리는 시간&lt;/li>
&lt;li>짧을수록 좋음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>응답 시간&lt;/p>
&lt;ul>
&lt;li>요청부터 첫 응답까지의 시간&lt;/li>
&lt;li>대화형 시스템에서 중요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>스케줄링 고려사항과 최적화&lt;/h3>&lt;ol>
&lt;li>
&lt;p>시스템 특성&lt;/p>
&lt;ul>
&lt;li>배치 시스템&lt;/li>
&lt;li>대화형 시스템&lt;/li>
&lt;li>실시간 시스템&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>프로세스 특성&lt;/p>
&lt;ul>
&lt;li>CPU 중심 vs I/O 중심&lt;/li>
&lt;li>메모리 사용량&lt;/li>
&lt;li>우선순위&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>시스템 부하&lt;/p>
&lt;ul>
&lt;li>현재 실행 중인 프로세스 수&lt;/li>
&lt;li>가용 자원 상태&lt;/li>
&lt;li>시스템 병목 현상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>새로운 트렌드와 발전 방향&lt;/h3>&lt;ol>
&lt;li>
&lt;p>멀티코어 스케줄링&lt;/p>
&lt;ul>
&lt;li>코어 간 로드 밸런싱&lt;/li>
&lt;li>캐시 친화적 스케줄링&lt;/li>
&lt;li>에너지 효율성 고려&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>가상화 환경&lt;/p>
&lt;ul>
&lt;li>가상 머신 간 자원 할당&lt;/li>
&lt;li>호스트-게스트 OS 조정&lt;/li>
&lt;li>실시간 마이그레이션&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>클라우드 환경&lt;/p>
&lt;ul>
&lt;li>탄력적 자원 할당&lt;/li>
&lt;li>서비스 수준 협약(SLA) 준수&lt;/li>
&lt;li>비용 최적화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>프로세스 간 통신 (Inter-Process Communication, IPC)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/</link><pubDate>Sun, 29 Sep 2024 06:20:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/</guid><description>
&lt;h2>프로세스 간 통신 (Inter-Process Communication, IPC)&lt;/h2>&lt;p>프로세스 간 통신은 서로 다른 프로세스들이 데이터를 주고받거나 서로의 동작을 조율하기 위해 사용하는 메커니즘.&lt;br>
한 프로세스의 출력이 다른 프로세스의 입력으로 사용될 수 있다.&lt;br>
이를 통해 프로세스들은 데이터를 교환하고, 작업을 동기화하며, 리소스를 효율적으로 활용할 수 있다.&lt;/p>
&lt;p>프로세스 간 통신(IPC)에 대해 체계적으로 설명해드리겠습니다. 이 개념을 더 쉽게 이해하기 위해, 실제 생활의 예시와 함께 설명을 시작하겠습니다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Process%20Mgmt/IPC/1-76.png"
alt="Shared Memory and Message Passing"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/inter-process-communication-ipc/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/inter-process-communication-ipc/&lt;/a> _&lt;/p>
&lt;h3>장점&lt;/h3>&lt;ul>
&lt;li>프로세스 간 데이터 공유 및 협력 가능&lt;/li>
&lt;li>모듈화 및 유연한 시스템 설계 가능&lt;/li>
&lt;/ul>
&lt;h3>단점&lt;/h3>&lt;ul>
&lt;li>구현 복잡성 증가&lt;/li>
&lt;li>동기화 및 데드락 문제 발생 가능성&lt;/li>
&lt;/ul>
&lt;h3>IPC의 주요 방식&lt;/h3>&lt;h4>파이프(Pipe)&lt;/h4>&lt;p>파이프는 가장 오래되고 간단한 IPC 방식으로, 한 프로세스의 출력이 다른 프로세스의 입력으로 직접 전달된다.&lt;/p>
&lt;ul>
&lt;li>단방향 통신을 위한 간단한 메커니즘&lt;/li>
&lt;li>주로 부모-자식 프로세스 간 통신에 사용&lt;/li>
&lt;/ul>
&lt;h5>종류&lt;/h5>&lt;p>일반 파이프:&lt;/p>
&lt;ul>
&lt;li>부모-자식 프로세스 간 단방향 통신&lt;/li>
&lt;li>표준 입출력 스트림 사용&lt;/li>
&lt;li>예: Unix의 &amp;lsquo;|&amp;rsquo; 연산자&lt;/li>
&lt;/ul>
&lt;p>명명된 파이프(Named Pipe):&lt;/p>
&lt;ul>
&lt;li>서로 관련 없는 프로세스 간 통신 가능&lt;/li>
&lt;li>파일 시스템에 이름을 가진 특별한 파일로 존재&lt;/li>
&lt;li>양방향 통신 지원&lt;/li>
&lt;/ul>
&lt;h4>메시지 큐(Message Queue)&lt;/h4>&lt;p>메시지 형태로 데이터를 주고받는 방식.&lt;/p>
&lt;h5>특징&lt;/h5>&lt;ul>
&lt;li>구조화된 데이터 전송 가능&lt;/li>
&lt;li>비동기 통신 지원&lt;/li>
&lt;li>여러 프로세스가 동시에 사용 가능&lt;/li>
&lt;/ul>
&lt;h5>사용 예&lt;/h5>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 메시지 큐 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">msgid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">msgget&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KEY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IPC_CREAT&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mo">0666&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 메시지 전송
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">msgsnd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msgid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 메시지 수신
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">msgrcv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msgid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>공유 메모리(Shared Memory)&lt;/h4>&lt;p>여러 프로세스가 동일한 메모리 영역을 공유하여 통신하는 방식.&lt;/p>
&lt;h5>장점&lt;/h5>&lt;ul>
&lt;li>가장 빠른 IPC 방식&lt;/li>
&lt;li>대용량 데이터 공유에 효율적&lt;/li>
&lt;li>직접적인 메모리 접근 가능&lt;/li>
&lt;/ul>
&lt;h5>주의사항&lt;/h5>&lt;ul>
&lt;li>동기화 메커니즘 필요&lt;/li>
&lt;li>메모리 관리 주의 필요&lt;/li>
&lt;li>데이터 일관성 유지 중요&lt;/li>
&lt;/ul>
&lt;h4>세마포어(Semaphore)&lt;/h4>&lt;p>공유 자원에 대한 접근을 제어하는 신호 체계.&lt;/p>
&lt;h5>용도&lt;/h5>&lt;ul>
&lt;li>프로세스 동기화&lt;/li>
&lt;li>상호 배제 구현&lt;/li>
&lt;li>리소스 카운팅&lt;/li>
&lt;/ul>
&lt;h5>구현 예&lt;/h5>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 세마포어 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">sem_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">sem_open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;mysem&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">O_CREAT&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mo">0644&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 세마포어 획득
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">sem_wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sem&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 임계 영역 코드
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// …
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 세마포어 해제
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">sem_post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sem&lt;/span>&lt;span class="p">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>소켓(Socket)&lt;/h4>&lt;p>네트워크를 통한 프로세스 간 통신 방식.&lt;/p>
&lt;h5>특징&lt;/h5>&lt;ul>
&lt;li>로컬 및 원격 통신 가능&lt;/li>
&lt;li>다양한 프로토콜 지원&lt;/li>
&lt;li>양방향 통신 가능&lt;/li>
&lt;/ul>
&lt;h5>사용 사례&lt;/h5>&lt;ul>
&lt;li>클라이언트-서버 애플리케이션&lt;/li>
&lt;li>네트워크 서비스&lt;/li>
&lt;li>분산 시스템&lt;/li>
&lt;/ul>
&lt;h4>시그널(Signal)&lt;/h4>&lt;p>비동기적인 이벤트를 처리하기 위한 소프트웨어 인터럽트.&lt;/p>
&lt;h5>주요 시그널&lt;/h5>&lt;ul>
&lt;li>SIGTERM: 종료 요청&lt;/li>
&lt;li>SIGKILL: 강제 종료&lt;/li>
&lt;li>SIGUSR1/2: 사용자 정의 시그널&lt;/li>
&lt;/ul>
&lt;h3>IPC 선택 시 고려사항&lt;/h3>&lt;ol>
&lt;li>
&lt;p>통신 패턴&lt;/p>
&lt;ul>
&lt;li>단방향 vs 양방향&lt;/li>
&lt;li>동기 vs 비동기&lt;/li>
&lt;li>1:1 vs 1:N&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 요구사항&lt;/p>
&lt;ul>
&lt;li>지연 시간&lt;/li>
&lt;li>처리량&lt;/li>
&lt;li>리소스 사용량&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>신뢰성&lt;/p>
&lt;ul>
&lt;li>데이터 손실 가능성&lt;/li>
&lt;li>오류 처리&lt;/li>
&lt;li>복구 메커니즘&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>프로세스 간 통신의 실제 응용&lt;/h3>&lt;ol>
&lt;li>
&lt;p>데이터베이스 시스템&lt;/p>
&lt;ul>
&lt;li>쿼리 프로세서와 저장소 엔진 간 통신&lt;/li>
&lt;li>캐시 관리&lt;/li>
&lt;li>트랜잭션 조정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>웹 서버&lt;/p>
&lt;ul>
&lt;li>워커 프로세스 관리&lt;/li>
&lt;li>로드 밸런싱&lt;/li>
&lt;li>세션 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>운영체제&lt;/p>
&lt;ul>
&lt;li>장치 드라이버 통신&lt;/li>
&lt;li>시스템 서비스 간 조정&lt;/li>
&lt;li>프로세스 스케줄링&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>프로세스 간 통신의 발전 방향&lt;/h3>&lt;ol>
&lt;li>
&lt;p>분산 시스템&lt;/p>
&lt;ul>
&lt;li>클라우드 환경에서의 IPC&lt;/li>
&lt;li>마이크로서비스 아키텍처&lt;/li>
&lt;li>컨테이너 간 통신&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>새로운 하드웨어 지원&lt;/p>
&lt;ul>
&lt;li>RDMA(Remote Direct Memory Access)&lt;/li>
&lt;li>하드웨어 가속&lt;/li>
&lt;li>새로운 버스 아키텍처&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>보안 강화&lt;/p>
&lt;ul>
&lt;li>암호화 통신&lt;/li>
&lt;li>접근 제어&lt;/li>
&lt;li>격리 정책&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Process Synchronization</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/</link><pubDate>Sat, 28 Sep 2024 06:22:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization/</guid><description>
&lt;h2>프로세스 동기화 (Process Synchronization)&lt;/h2>&lt;p>여러 프로세스가 공유하는 자원의 일관성을 유지하기 위한 메커니즘.&lt;br>
컴퓨터 시스템에서 여러 프로세스가 공유 자원에 접근할 때 충돌을 방지하고 데이터의 일관성을 유지하기 위해 동기화가 필요하다.&lt;/p>
&lt;p>다음 두 가지 목적을 가진다:&lt;/p>
&lt;ol>
&lt;li>실행 순서 제어: 프로세스를 올바른 순서대로 실행하기&lt;/li>
&lt;li>상호 배제: 동시에 접근해서는 안 되는 자원에 하나의 프로세스만 접근하게 하기&lt;/li>
&lt;/ol>
&lt;h3>필요성&lt;/h3>&lt;ol>
&lt;li>데이터 일관성 유지: 여러 프로세스가 공유 데이터에 동시 접근할 때 발생할 수 있는 예상치 못한 결과를 방지한다.&lt;/li>
&lt;li>실행 순서 보장: 특정 프로세스의 실행이 다른 프로세스의 결과에 의존하는 경우, 올바른 순서로 실행되도록 한다.&lt;/li>
&lt;/ol>
&lt;h3>임계 영역 문제&lt;/h3>&lt;p>임계 영역(Critical Section)은 여러 프로세스가 공유하는 데이터를 접근하는 코드 영역을 말한다.&lt;br>
예를 들어, 은행 계좌의 잔액을 수정하는 코드가 임계 영역이 될 수 있다.&lt;/p>
&lt;p>임계 영역 문제를 해결하기 위해서는 다음 세 가지 조건을 만족해야 한다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>상호 배제(Mutual Exclusion)&lt;br>
한 번에 하나의 프로세스만 임계 영역에 진입할 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>진행(Progress)&lt;br>
임계 영역에 들어가려는 프로세스의 선택은 무한정 미루어질 수 없다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>한정 대기(Bounded Waiting)&lt;br>
프로세스가 임계 영역에 진입하기 위해 대기하는 시간은 유한해야 한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>주요 동기화 도구들&lt;/h3>&lt;ol>
&lt;li>
&lt;p>뮤텍스(Mutex)&lt;br>
뮤텍스는 가장 기본적인 동기화 도구로, 상호 배제를 보장한다.&lt;br>
다음은 뮤텍스를 사용하는 예시 코드:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">pthread_mutex_t&lt;/span> &lt;span class="n">mutex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PTHREAD_MUTEX_INITIALIZER&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">critical_section&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_mutex_lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 임계 영역 진입 전 잠금
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 임계 영역 코드
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">shared_resource&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 공유 자원 접근
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_mutex_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 임계 영역 종료 후 잠금 해제
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>세마포어(Semaphore)&lt;br>
세마포어는 여러 개의 프로세스가 공유 자원에 접근할 수 있도록 하는 카운팅 메커니즘:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">sem_t&lt;/span> &lt;span class="n">semaphore&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">resource_access&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sem_wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">semaphore&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 세마포어 획득
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 자원 사용
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">use_shared_resource&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sem_post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">semaphore&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 세마포어 반환
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>조건 변수(Condition Variables)&lt;br>
조건 변수는 특정 조건이 만족될 때까지 프로세스를 대기시키는 메커니즘:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">pthread_mutex_t&lt;/span> &lt;span class="n">mutex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PTHREAD_MUTEX_INITIALIZER&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">pthread_cond_t&lt;/span> &lt;span class="n">condition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PTHREAD_COND_INITIALIZER&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">wait_for_condition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_mutex_lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">condition_met&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_cond_wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 조건이 만족된 후의 코드
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_mutex_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>고전적인 동기화 문제들과 해결책&lt;/h3>&lt;ol>
&lt;li>
&lt;p>생산자-소비자 문제&lt;br>
제한된 버퍼를 공유하는 생산자와 소비자 프로세스 간의 동기화 문제:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define BUFFER_SIZE 5
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">sem_t&lt;/span> &lt;span class="n">empty&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">full&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">pthread_mutex_t&lt;/span> &lt;span class="n">mutex&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">producer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">produce_item&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sem_wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 빈 공간 대기
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">pthread_mutex_lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 버퍼에 아이템 추가
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_mutex_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">mutex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">sem_post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">full&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 채워진 공간 신호
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>철학자의 만찬 문제&lt;br>
자원 할당과 교착상태 방지를 다루는 고전적인 문제:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define N 5
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">pthread_mutex_t&lt;/span> &lt;span class="n">chopstick&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">philosopher&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 왼쪽 젓가락 집기
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">pthread_mutex_lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">chopstick&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 오른쪽 젓가락 집기
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">pthread_mutex_lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">chopstick&lt;/span>&lt;span class="p">[(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">eat&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 젓가락 내려놓기
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">pthread_mutex_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">chopstick&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_mutex_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">chopstick&lt;/span>&lt;span class="p">[(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">think&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>읽기-쓰기 문제&lt;br>
여러 읽기 프로세스와 쓰기 프로세스 간의 동기화를 다루는 문제:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">pthread_rwlock_t&lt;/span> &lt;span class="n">rwlock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PTHREAD_RWLOCK_INITIALIZER&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">reader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_rwlock_rdlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rwlock&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 읽기 잠금
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 데이터 읽기
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_rwlock_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rwlock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">writer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_rwlock_wrlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rwlock&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 쓰기 잠금
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 데이터 쓰기
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pthread_rwlock_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rwlock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>동기화 관련 주의사항&lt;/h3>&lt;ol>
&lt;li>
&lt;p>데드락(Deadlock) 방지&lt;/p>
&lt;ul>
&lt;li>자원 할당 순서 정하기&lt;/li>
&lt;li>타임아웃 설정&lt;/li>
&lt;li>데드락 감지 및 복구 메커니즘 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 최적화&lt;/p>
&lt;ul>
&lt;li>락의 범위를 최소화&lt;/li>
&lt;li>세밀한 락킹 전략 사용&lt;/li>
&lt;li>락 프리 알고리즘 고려&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>동기화 오버헤드 관리&lt;/p>
&lt;ul>
&lt;li>적절한 동기화 기법 선택&lt;/li>
&lt;li>불필요한 동기화 제거&lt;/li>
&lt;li>락 경합 최소화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>실제 응용 사례&lt;/h3>&lt;ol>
&lt;li>데이터베이스 시스템&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>트랜잭션 격리 수준 구현&lt;/li>
&lt;li>동시성 제어&lt;/li>
&lt;li>데이터 일관성 유지&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>운영체제&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>프로세스 스케줄링&lt;/li>
&lt;li>메모리 관리&lt;/li>
&lt;li>파일 시스템 접근&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>멀티스레드 애플리케이션&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>GUI 이벤트 처리&lt;/li>
&lt;li>백그라운드 작업 관리&lt;/li>
&lt;li>네트워크 통신&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Process</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process/</link><pubDate>Thu, 26 Sep 2024 23:32:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process/</guid><description>
&lt;h2>Process&lt;/h2>&lt;p>프로세스는 실행 중인 프로그램의 인스턴스.&lt;br>
구체적으로는 운영체제가 관리하는 작업의 단위로, CPU 시간이나 메모리와 같은 시스템 자원을 할당받아 실행되는 프로그램의 동적인 실체를 의미한다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Process%20Mgmt/1_ILkJu8YvpoldbL4kpNL9aA.webp"
alt="This chart displays the hierarchy among Program, Process and Thread"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://blog.devgenius.io/program-process-and-thread-explained-in-one-minute-6016e4fdf4de" target="_blank" rel="noopener">https://blog.devgenius.io/program-process-and-thread-explained-in-one-minute-6016e4fdf4de&lt;/a> _&lt;/p>
&lt;h3>특징&lt;/h3>&lt;ol>
&lt;li>독립성: 각 프로세스는 독립된 메모리 공간을 가진다.&lt;/li>
&lt;li>동시성: 여러 프로세스가 동시에 실행될 수 있다.&lt;/li>
&lt;li>상태 변화: 프로세스는 실행 중 여러 상태를 거친다.&lt;/li>
&lt;/ol>
&lt;h3>기능과 역할&lt;/h3>&lt;p>기능:&lt;/p>
&lt;ul>
&lt;li>작업 단위: 운영체제가 관리하는 작업의 기본 단위입니다.&lt;/li>
&lt;li>프로그램 코드 실행: 프로세스는 프로그램의 명령어들을 순차적으로 실행합니다.&lt;/li>
&lt;li>자원 관리: 할당받은 시스템 자원을 효율적으로 사용하고 관리합니다.&lt;/li>
&lt;li>프로세스 간 통신: 다른 프로세스와 정보를 교환하고 협력합니다.&lt;/li>
&lt;/ul>
&lt;p>역할:&lt;/p>
&lt;ul>
&lt;li>멀티태스킹 지원: 여러 작업을 동시에 실행할 수 있게 합니다.&lt;/li>
&lt;li>시스템 자원 보호: 프로세스 간 독립성을 통해 시스템 안정성을 보장합니다.&lt;/li>
&lt;li>프로그램 실행 관리: 프로그램의 생명주기를 관리합니다.&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>구분&lt;/th>
&lt;th>세부 기능&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>자원 관리&lt;/td>
&lt;td>CPU 사용&lt;/td>
&lt;td>- CPU 시간 할당 및 사용&lt;br>- 명령어 실행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>메모리 관리&lt;/td>
&lt;td>- 메모리 공간 할당/해제&lt;br>- 가상 메모리 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>파일 관리&lt;/td>
&lt;td>- 파일 시스템 접근&lt;br>- 입출력 작업 수행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로그램 실행&lt;/td>
&lt;td>코드 실행&lt;/td>
&lt;td>- 프로그램 코드 로딩&lt;br>- 명령어 해석 및 실행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>데이터 처리&lt;/td>
&lt;td>- 데이터 입출력&lt;br>- 연산 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로세스 통신&lt;/td>
&lt;td>IPC&lt;/td>
&lt;td>- 프로세스 간 통신&lt;br>- 데이터 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>동기화&lt;/td>
&lt;td>- 프로세스 간 실행 순서 조정&lt;br>- 자원 접근 조정&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>보안과 보호&lt;/td>
&lt;td>메모리 보호&lt;/td>
&lt;td>- 메모리 영역 보호&lt;br>- 접근 권한 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>시스템 보호&lt;/td>
&lt;td>- 시스템 자원 보호&lt;br>- 권한 레벨 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>상태 관리&lt;/td>
&lt;td>생명주기 관리&lt;/td>
&lt;td>- 프로세스 생성/종료&lt;br>- 상태 전이 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>스케줄링&lt;/td>
&lt;td>CPU 할당 순서 결정&lt;br>- 우선순위 관리&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>구성 요소&lt;/h3>&lt;h4>메모리 구조 관련 구성 요소&lt;/h4>&lt;h5>코드 영역 (Code Section)&lt;/h5>&lt;p>프로그램의 실행 코드가 위치하는 영역으로, 실행될 명령어를 포함.&lt;/p>
&lt;ul>
&lt;li>특징
&lt;ul>
&lt;li>읽기 전용.&lt;/li>
&lt;li>여러 프로세스가 같은 프로그램을 실행하는 경우 해당 코드 영역을 공유할 수 있다.&lt;/li>
&lt;li>재진입이 가능(Reentrant)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>역할
&lt;ul>
&lt;li>프로그램 명령어 보관&lt;/li>
&lt;li>코드 실행 제공&lt;/li>
&lt;li>명령어 순서 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5>데이터 영역 (Data Section)&lt;/h5>&lt;p>전역 변수 및 정적 변수를 저장하는 영역으로, 프로그램의 실행 내내 유지되는 데이터가 이곳에 저장된다.&lt;/p>
&lt;ul>
&lt;li>구분
&lt;ul>
&lt;li>BSS(Block Started by Symbol) 영역
&lt;ul>
&lt;li>초기화되지 않은 전역/정적 변수를 저장하는 메모리 영역&lt;/li>
&lt;li>프로그램 시작 시 자동으로 0 또는 NULL로 초기화됨.&lt;/li>
&lt;li>실행 파일에 실제 내용을 포함하지 않음&lt;/li>
&lt;li>프로그램 로딩 시 메모리에 할당되고 0으로 초기화됨.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data 영역
&lt;ul>
&lt;li>초기화된 전역/정적 변수를 저장하는 메모리 영역&lt;/li>
&lt;li>명시적으로 초기값이 지정된 변수들을 저장&lt;/li>
&lt;li>실행 파일에 초기값이 포함됨.&lt;/li>
&lt;li>읽기 전용 데이터(상수)와 읽기-쓰기 데이터로 추가 구분될 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>특징
&lt;ul>
&lt;li>프로그램 시작 시 할당&lt;/li>
&lt;li>프로그램 종료 시 해제&lt;/li>
&lt;li>크기가 고정됨.&lt;/li>
&lt;li>모든 스레드가 이 영역을 공유한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>BSS 영역과 Data 영역의 비교&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>BSS 영역&lt;/th>
&lt;th>Data 영역&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>초기화&lt;/td>
&lt;td>자동으로 0 또는 NULL&lt;/td>
&lt;td>명시적 초기값&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실행 파일 포함 여부&lt;/td>
&lt;td>크기 정보만 포함&lt;/td>
&lt;td>초기값 포함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 할당 시점&lt;/td>
&lt;td>프로그램 로딩 시&lt;/td>
&lt;td>프로그램 로딩 시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>파일 크기에 미치는 영향&lt;/td>
&lt;td>영향 없음&lt;/td>
&lt;td>초기값만큼 증가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 용도&lt;/td>
&lt;td>대량의 제로 초기화 데이터&lt;/td>
&lt;td>특정 초기값이 필요한 데이터&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5>힙 (Heap)&lt;/h5>&lt;p>동적으로 할당되는 메모리 영역&lt;/p>
&lt;ul>
&lt;li>특징
&lt;ul>
&lt;li>런타임에 크기가 변경될 수 있다.&lt;/li>
&lt;li>메모리 누수의 주요 원인.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5>스택 (Stack)&lt;/h5>&lt;p>함수 호출과 관련된 데이터 (지역 변수, 매개변수, 리턴 주소 등)를 저장하는 메모리 영역&lt;/p>
&lt;ul>
&lt;li>특징
&lt;ul>
&lt;li>LIFO(Last In First Out)구조&lt;/li>
&lt;li>함수 호출 시 자동으로 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4>프로세스 제어 블록 (Process Control Block, PCB)&lt;/h4>&lt;p>프로세스 관련 정보를 저장한다.&lt;/p>
&lt;ul>
&lt;li>특징
&lt;ul>
&lt;li>운영체제가 관리&lt;/li>
&lt;li>컨텍스트 스위칭 시 중요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>역할
&lt;ul>
&lt;li>프로세스 상태, 우선순위, 메모리 정보 등 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5>구성요소&lt;/h5>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>구성 요소&lt;/th>
&lt;th>포함 정보&lt;/th>
&lt;th>용도&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>식별자 정보&lt;/td>
&lt;td>- 프로세스 ID(PID)&lt;br>- 부모 프로세스 ID&lt;/td>
&lt;td>프로세스 식별 및 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>상태 정보&lt;/td>
&lt;td>- 프로세스 상태&lt;br>- 우선순위&lt;/td>
&lt;td>스케줄링 및 상태 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>제어 정보&lt;/td>
&lt;td>- 프로그램 카운터&lt;br>- 레지스터 값&lt;/td>
&lt;td>CPU 실행 제어&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 정보&lt;/td>
&lt;td>- 메모리 limit/base&lt;br>- 열린 파일 목록&lt;/td>
&lt;td>자원 할당 및 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>계정 정보&lt;/td>
&lt;td>CPU 사용 시간&lt;br>- 실행 시간 제한&lt;/td>
&lt;td>사용량 측정 및 제어&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>프로세스 상태 관리&lt;/h3>&lt;p>운영체제가 프로세스의 생명주기를 효율적으로 관리하는 메커니즘.&lt;br>
운영체제는 이러한 상태들 사이의 전이를 관리하며, 프로세스 제어 블록(Process Control Block, PCB)를 통해 각 프로세스의 현재 상태 정보를 유지한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>상태&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>전이 조건&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>생성(Created)&lt;/td>
&lt;td>프로세스 초기화&lt;/td>
&lt;td>PCB 할당&lt;br>- 메모리 할당&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>준비(Ready)&lt;/td>
&lt;td>CPU 대기 상태&lt;/td>
&lt;td>CPU 스케줄러 대기&lt;br>- 실행 가능 상태&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실행(Running)&lt;/td>
&lt;td>CPU 사용 중&lt;/td>
&lt;td>- 명령어 실행&lt;br>- 시간 할당량 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>대기(Waiting)&lt;/td>
&lt;td>I/O 또는 이벤트 대기&lt;/td>
&lt;td>I/O 작업 중&lt;br>- 이벤트 발생 대기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>종료(Terminated)&lt;/td>
&lt;td>실행 완료&lt;/td>
&lt;td>- 자원 반납&lt;br>PCB 삭제&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>시스템 자원 관리&lt;/h3>&lt;p>프로세스는 시스템 자원을 사용하며, 운영체제는 이를 효율적으로 관리한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>자원 유형&lt;/th>
&lt;th>관리 방식&lt;/th>
&lt;th>특징&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CPU&lt;/td>
&lt;td>시분할 방식&lt;/td>
&lt;td>- 여러 프로세스가 번갈아 사용&lt;br>- 스케줄링 알고리즘 적용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리&lt;/td>
&lt;td>가상 메모리&lt;/td>
&lt;td>- 필요한 부분만 실제 메모리에 로드&lt;br>- 페이징/세그먼테이션&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>파일 시스템&lt;/td>
&lt;td>파일 디스크립터&lt;/td>
&lt;td>- 파일 접근 권한 관리&lt;br>- 입출력 버퍼링&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>I/O 장치&lt;/td>
&lt;td>디바이스 드라이버&lt;/td>
&lt;td>- 장치 독립성 제공&lt;br>- 인터럽트 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로세스 간 통신(IPC)&lt;/td>
&lt;td>파이프(PIPE)&lt;br>명명된 파이프(Named PIPE)&lt;br>메시지 큐&lt;br>공유 메모리&lt;br>세마포어&lt;br>소켓&lt;/td>
&lt;td>- 프로세스간 데이터 교환과 동기화&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>