<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Operating System :: Category :: hyunyoun's Blog</title><link>https://buenhyden.github.io/categories/operating-system.html</link><description/><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Thu, 16 Jan 2025 08:24:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/categories/operating-system/index.xml" rel="self" type="application/rss+xml"/><item><title>Operating System</title><link>https://buenhyden.github.io/posts/computer-system/operating-system.html</link><pubDate>Sun, 22 Sep 2024 17:13:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system.html</guid><description>운영체제는 컴퓨터 하드웨어 자원을 효율적으로 관리하고, 사용자가 컴퓨터를 편리하고 효과적으로 사용할 수 있는 환경을 제공하는 시스템 소프트웨어</description></item><item><title>Linux Basic Command</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-basic-command.html</link><pubDate>Tue, 15 Oct 2024 15:39:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-basic-command.html</guid><description>Linux에서 자주 사용하는 명령어 모음</description></item><item><title>Linux Permission</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-permission.html</link><pubDate>Tue, 15 Oct 2024 15:39:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-permission.html</guid><description>Linux 권한 설정</description></item><item><title>Paging vs Segmentation</title><link>https://buenhyden.github.io/til/2024/12/paging-vs-segmentation.html</link><pubDate>Thu, 16 Jan 2025 08:24:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/til/2024/12/paging-vs-segmentation.html</guid><description>Paging과 Segmentation은 운영체제의 메모리 관리 기법이다.</description></item><item><title>프로세스 제어 블록(Process Control Block, PCB)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-control-block.html</link><pubDate>Wed, 15 Jan 2025 06:59:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-control-block.html</guid><description>프로세스 제어 블록(Process Control Block, PCB)은 운영 체제에서 프로세스를 관리하기 위해 사용하는 핵심적인 데이터 구조이다. PCB는 각 프로세스에 대한 중요한 정보를 저장하고 관리하며, 운영 체제가 프로세스를 효율적으로 제어하고 실행할 수 있게 한다.</description></item><item><title>Context Switching</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/context-switching.html</link><pubDate>Wed, 15 Jan 2025 01:00:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/context-switching.html</guid><description>Context Switching은 운영 체제에서 매우 중요한 개념으로, 여러 프로세스나 스레드가 단일 CPU 자원을 공유하여 효율적으로 실행될 수 있게 하는 메커니즘으로, CPU가 현재 실행 중인 프로세스나 스레드의 상태를 저장하고, 다른 프로세스나 스레드의 상태를 불러와 실행을 재개하는 과정을 말한다. 이를 통해 여러 작업이 동시에 실행되는 것처럼 보이게 된다.</description></item><item><title>Memory Management Techniques</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques.html</link><pubDate>Wed, 25 Dec 2024 06:59:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-mgmt-techniques.html</guid><description>운영체제의 메모리 관리 기법(Memory Management Techniques)은 컴퓨터 시스템의 제한된 메모리 자원을 효율적으로 사용하기 위한 방법들이다.</description></item><item><title>메모리 보호와 안전 (Memory Protection and Safety)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-protection-and-safety.html</link><pubDate>Thu, 19 Dec 2024 08:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/memory-protection-and-safety.html</guid><description>메모리 보호는 컴퓨터 시스템에서 프로세스가 허가되지 않은 메모리 영역에 접근하는 것을 방지하는 메커니즘이다.</description></item><item><title>System Call Interface</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/kernel/system-call-interface.html</link><pubDate>Wed, 18 Dec 2024 03:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/kernel/system-call-interface.html</guid><description>사용자 공간의 프로그램과 운영 체제 커널 사이의 중간 계층으로, 프로그램이 운영 체제의 서비스를 요청할 수 있게 해주는 인터페이스</description></item><item><title>Thrashing</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/thrashing.html</link><pubDate>Wed, 18 Dec 2024 00:08:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/thrashing.html</guid><description>운영체제에서 발생하는 성능 저하 현상으로, 프로세스의 실제 작업 시간보다 페이지 교체(페이징)에 더 많은 시간을 소비하는 현상</description></item><item><title>Kernel</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/kernel.html</link><pubDate>Sun, 15 Dec 2024 16:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/kernel.html</guid><description>운영 체제의 커널은 컴퓨터 시스템의 핵심 구성 요소로, 하드웨어와 소프트웨어 간의 중개자 역할을 수행</description></item><item><title>동시성 제어 (Concurrency Control)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/concurrency-control.html</link><pubDate>Sat, 23 Nov 2024 02:47:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/concurrency-control.html</guid><description>동시성 제어는 여러 프로세스나 스레드가 동시에 공유 자원에 접근할 때, 데이터의 일관성과 무결성을 보장하기 위한 제어 메커니즘</description></item><item><title>잠금 (Lock)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/lock.html</link><pubDate>Mon, 18 Nov 2024 10:54:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/lock.html</guid><description>여러 스레드가 공유 자원에 동시에 접근하는 것을 방지하는 동기화 기본 요소이다. 임계 영역을 보호하고 한 번에 하나의 스레드만 접근할 수 있도록 한다.</description></item><item><title>상호 배제 (Mutual Exclusion)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/mutual-exclusion.html</link><pubDate>Sun, 17 Nov 2024 07:50:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/mutual-exclusion.html</guid><description>여러 프로세스나 스레드가 공유 자원에 동시에 접근하는 것을 방지하는 동기화 메커니</description></item><item><title>임계 영역 (Critical Section)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section.html</link><pubDate>Sun, 17 Nov 2024 07:49:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/critical-section.html</guid><description>여러 프로세스 또는 스레드가 공유하는 자원에 접근하는 코드 영역</description></item><item><title>동기화 (Synchronization)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/synchronization.html</link><pubDate>Thu, 07 Nov 2024 07:48:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/synchronization.html</guid><description>여러 프로세스나 스레드가 공유 자원에 접근할 때 데이터의 일관성과 무결성을 보장하기 위한 메커니즘</description></item><item><title>File System</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/file-system.html</link><pubDate>Mon, 28 Oct 2024 08:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/file-system.html</guid><description>컴퓨터 운영 체제에서 파일과 데이터를 저장, 관리, 검색하는 데 사용되는 구조</description></item><item><title>메모리 관리 (Memory Management)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt.html</link><pubDate>Tue, 15 Oct 2024 17:18:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt.html</guid><description>운영체제의 핵심 기능 중 하나로, 컴퓨터의 주 메모리를 효율적으로 관리하는 역할</description></item><item><title>Process Scheduling</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-scheduling.html</link><pubDate>Sun, 29 Sep 2024 06:21:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process-scheduling.html</guid><description>프로세스 스케줄링은 컴퓨터의 CPU 자원을 여러 프로세스에 효율적으로 할당하는 방법을 결정하는 메커니즘</description></item><item><title>프로세스 간 통신 (Inter-Process Communication, IPC)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc.html</link><pubDate>Sun, 29 Sep 2024 06:20:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc.html</guid><description>서로 독립적으로 실행되는 프로세스들이 데이터를 교환하고 상호작용하기 위한 메커니즘</description></item><item><title>Process Synchronization</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization.html</link><pubDate>Sat, 28 Sep 2024 06:22:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/synchronization-and-concurrency-control/process-synchronization.html</guid><description>여러 프로세스가 공유하는 자원의 일관성을 유지하기 위한 메커니즘</description></item><item><title>Process</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process.html</link><pubDate>Thu, 26 Sep 2024 23:32:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/process.html</guid><description>프로세스는 실행 중인 프로그램의 인스턴스</description></item></channel></rss>