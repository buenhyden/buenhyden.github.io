<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Design Principles on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/design-principles/</link>
    <description>Recent content in Design Principles on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.1</generator>
    <language>en</language>
    <lastBuildDate>Tue, 04 Feb 2025 14:27:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/design-principles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hollywood Principle</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/hollywood-principle/</link>
      <pubDate>Tue, 04 Feb 2025 14:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/hollywood-principle/</guid>
      <description>고수준 컴포넌트가 저수준 컴포넌트를 언제 어떻게 호출할지 제어하되, 저수준 컴포넌트는 고수준 컴포넌트를 직접 호출하지 않도록 하는 것이다</description>
    </item>
    <item>
      <title>Program Against Abstractions</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/program-against-abstractions/</link>
      <pubDate>Tue, 04 Feb 2025 14:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/program-against-abstractions/</guid>
      <description>구체적인 구현보다는 추상적인 인터페이스나 기본 타입에 의존하여 코드를 작성해야 한다는 개념이다.</description>
    </item>
    <item>
      <title>Composition Over Inheritance</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/composition-over-inheritance/</link>
      <pubDate>Tue, 04 Feb 2025 14:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/composition-over-inheritance/</guid>
      <description>상속 대신 객체 조합(Composition)을 우선시함으로써, 시스템의 복잡성을 관리하고 변화에 대응하기 용이한 설계를 가능하게 한다.</description>
    </item>
    <item>
      <title>Encapsulate What Varies</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/encapsulate-what-varies/</link>
      <pubDate>Tue, 04 Feb 2025 14:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/encapsulate-what-varies/</guid>
      <description>변경 가능성이 높은 부분을 식별하고 이를 캡슐화하여 나머지 코드에 미치는 영향을 최소화하는 접근 방식이다.</description>
    </item>
    <item>
      <title>Law of Demeter</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/law-of-demeter/</link>
      <pubDate>Tue, 04 Feb 2025 14:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/law-of-demeter/</guid>
      <description>&amp;#34;객체는 자신과 직접적으로 관련된 객체와만 대화해야 한다.&amp;#34;</description>
    </item>
    <item>
      <title>KISS Principle</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/kiss-principle/</link>
      <pubDate>Mon, 23 Sep 2024 01:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/kiss-principle/</guid>
      <description>시스템이나 코드의 복잡성을 최소화하라.</description>
    </item>
    <item>
      <title>YAGNI Principle</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/yagni-principle/</link>
      <pubDate>Mon, 23 Sep 2024 00:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/yagni-principle/</guid>
      <description>당장 필요하지 않은 기능을 미리 구현하지 마라.</description>
    </item>
    <item>
      <title>DRY Principle</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/dry-principle/</link>
      <pubDate>Mon, 23 Sep 2024 00:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/dry-principle/</guid>
      <description>코드 중복을 피하고 로직을 한 곳에서 관리하도록 권장하는 원칙.</description>
    </item>
    <item>
      <title>SOLID Principles</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/solid-principles/</link>
      <pubDate>Mon, 23 Sep 2024 00:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/design-principles/solid-principles/</guid>
      <description>객체 지향 프로그래밍 및 설계의 다섯 가지 기본 원칙.</description>
    </item>
  </channel>
</rss>
