<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Design Principles on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/design-principles/</link>
    <description>Recent content in Design Principles on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.7</generator>
    <language>en</language>
    <lastBuildDate>Tue, 04 Feb 2025 14:27:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/design-principles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hollywood Principle</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/hollywood-principle/</link>
      <pubDate>Tue, 04 Feb 2025 14:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/hollywood-principle/</guid>
      <description>고수준 컴포넌트가 저수준 컴포넌트를 언제 어떻게 호출할지 제어하되, 저수준 컴포넌트는 고수준 컴포넌트를 직접 호출하지 않도록 하는 것이다</description>
    </item>
    <item>
      <title>Program Against Abstractions</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/program-against-abstractions/</link>
      <pubDate>Tue, 04 Feb 2025 14:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/program-against-abstractions/</guid>
      <description>구체적인 구현보다는 추상적인 인터페이스나 기본 타입에 의존하여 코드를 작성해야 한다는 개념이다.</description>
    </item>
    <item>
      <title>Composition Over Inheritance</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/composition-over-inheritance/</link>
      <pubDate>Tue, 04 Feb 2025 14:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/composition-over-inheritance/</guid>
      <description>&amp;#34;Composition Over Inheritance&amp;#34; 는 객체지향 설계에서 상속 (Inheritance) 보다 컴포지션 (Composition, 구성) 을 우선시하라는 원칙이다. 객체간 &amp;#34;is-a&amp;#34; 관계보다 &amp;#34;has-a&amp;#34; 관계를 통해 코드 재사용과 유연성을 달성하고자 한다. 이는 코드의 유연성과 재사용성을 높이고, 변화에 강한 구조를 만들기 위함이다. 상속의 단점을 보완하며, 다양한 기능을 조합해 객체를 설계할 수 있다.</description>
    </item>
    <item>
      <title>Encapsulate What Varies</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/encapsulate-what-varies/</link>
      <pubDate>Tue, 04 Feb 2025 14:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/encapsulate-what-varies/</guid>
      <description>Encapsulate What Varies(변하는 것을 캡슐화하라) 는 시스템에서 자주 변경되거나 확장될 가능성이 있는 부분을 별도의 모듈, 클래스, 인터페이스 등으로 분리해 관리하는 설계 원칙이다. 이를 통해 코드의 유연성, 유지보수성, 확장성을 효과적으로 높일 수 있다.</description>
    </item>
    <item>
      <title>Law of Demeter</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/law-of-demeter/</link>
      <pubDate>Tue, 04 Feb 2025 14:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/law-of-demeter/</guid>
      <description>&amp;#34;객체는 자신과 직접적으로 관련된 객체와만 대화해야 한다.&amp;#34;</description>
    </item>
    <item>
      <title>KISS Principle</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/kiss/</link>
      <pubDate>Mon, 23 Sep 2024 01:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/kiss/</guid>
      <description>시스템이나 코드의 복잡성을 최소화하라.</description>
    </item>
    <item>
      <title>YAGNI Principle</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/yagni/</link>
      <pubDate>Mon, 23 Sep 2024 00:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/yagni/</guid>
      <description>YAGNI 는 &amp;#34;You Ain&amp;#39;t Gonna Need It&amp;#34; 의 약어로, 실제로 필요하지 않은 기능은 구현하지 말라는 소프트웨어 개발 원칙이다. 이 원칙은 개발 시간을 절약하고 코드의 복잡성을 줄이며, 유지보수를 용이하게 한다.</description>
    </item>
    <item>
      <title>DRY Principle</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/dry/</link>
      <pubDate>Mon, 23 Sep 2024 00:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/dry/</guid>
      <description>DRY 원칙은 &amp;#34; 모든 지식이나 로직은 시스템 내에서 단일하고 명확하며 권위 있는 표현을 가져야 한다 &amp;#34; 는 소프트웨어 개발 원칙이다. 코드 중복을 제거하여 유지보수성과 일관성을 향상시키고, 오류 발생 가능성을 줄이며, 개발 효율성을 높이는 것을 목표로 한다.</description>
    </item>
    <item>
      <title>SOLID Principles</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/solid/</link>
      <pubDate>Mon, 23 Sep 2024 00:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/solid/</guid>
      <description>객체 지향 프로그래밍 및 설계의 다섯 가지 기본 원칙.</description>
    </item>
  </channel>
</rss>
