<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Transactional Messaging on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/transactional-messaging/</link>
    <description>Recent content in Transactional Messaging on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.143.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 19 Nov 2024 11:46:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/transactional-messaging/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Polling publisher</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/transactional-messaging/polling-publisher/</link>
      <pubDate>Tue, 19 Nov 2024 11:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/transactional-messaging/polling-publisher/</guid>
      <description>&lt;h2 id=&#34;polling-publisher&#34;&gt;Polling Publisher&lt;/h2&gt;
&lt;p&gt;Polling publisher는 마이크로서비스 아키텍처(MSA)에서 트랜잭셔널 메시징을 구현하는 방법 중 하나이다.&lt;br&gt;
이 패턴은 Transactional Outbox 패턴과 함께 사용되어 데이터 일관성을 유지하면서 메시지를 안정적으로 발행하는 데 도움을 준다.&lt;/p&gt;
&lt;p&gt;Polling publisher는 특히 소규모 시스템이나 간단한 구현이 필요한 경우에 적합한 방식이다. 그러나 대규모 시스템이나 실시간성이 중요한 경우에는 Transaction Log Tailing과 같은 다른 방식을 고려할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;기본-개념&#34;&gt;기본 개념&lt;/h3&gt;
&lt;p&gt;Outbox 테이블에 저장된 메시지를 주기적으로 조회(polling)하여 메시지 브로커로 발행한다.&lt;br&gt;
데이터베이스 트랜잭션의 일부로 메시지를 Outbox 테이블에 저장한 후, 별도의 프로세스에서 이를 읽어 발행한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Transaction log tailing</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/transactional-messaging/transaction-log-tailing/</link>
      <pubDate>Tue, 19 Nov 2024 11:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/transactional-messaging/transaction-log-tailing/</guid>
      <description>&lt;h2 id=&#34;transaction-log-tailing&#34;&gt;Transaction Log Tailing&lt;/h2&gt;
&lt;p&gt;Transaction log tailing은 마이크로서비스 아키텍처(MSA)에서 Transactional Messaging을 구현하는 방법 중 하나이다.&lt;br&gt;
이 패턴은 데이터베이스의 트랜잭션 로그를 실시간으로 읽어 변경사항을 메시지 브로커에 발행하는 방식이다.&lt;/p&gt;
&lt;p&gt;Transaction log tailing은 Polling publisher 방식과 비교될 수 있다. Polling은 주기적으로 데이터베이스를 조회하는 반면, log tailing은 실시간으로 변경사항을 감지한다. 이로 인해 log tailing이 더 빠르고 효율적이지만, 구현이 더 복잡할 수 있다.&lt;/p&gt;
&lt;p&gt;이 패턴을 사용할 때는 메시지의 중복 발행 가능성을 고려해야 하며, 소비자 측에서 멱등성을 보장하는 방식으로 구현해야 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Transactional Messaging</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/transactional-messaging/</link>
      <pubDate>Tue, 19 Nov 2024 11:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/transactional-messaging/</guid>
      <description>&lt;h2 id=&#34;transactional-messaging&#34;&gt;Transactional Messaging&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Transactional Outbox</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/transactional-messaging/transactional-outbox/</link>
      <pubDate>Tue, 19 Nov 2024 11:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/transactional-messaging/transactional-outbox/</guid>
      <description>&lt;h2 id=&#34;transactional-outbox&#34;&gt;Transactional Outbox&lt;/h2&gt;
&lt;p&gt;Transactional Outbox 패턴은 마이크로서비스 아키텍처(MSA)에서 데이터 일관성과 메시지 전달의 신뢰성을 보장하기 위한 중요한 패턴이다.&lt;/p&gt;
&lt;p&gt;Transactional Outbox 패턴은 데이터베이스 업데이트와 메시지 발행을 원자적으로 처리하기 위한 방법으로, 데이터베이스 트랜잭션과 메시지 발행 사이의 일관성을 보장하는 것을 목적으로 한다.&lt;/p&gt;
&lt;p&gt;Transactional Outbox 패턴은 분산 시스템에서 데이터 일관성과 메시지 전달의 신뢰성을 높이는 효과적인 방법이다. 이 패턴을 통해 개발자는 복잡한 분산 트랜잭션 문제를 해결하고, 시스템의 안정성을 향상시킬 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;작동-방식&#34;&gt;작동 방식&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스 업데이트와 함께 발행할 메시지를 &amp;lsquo;outbox&amp;rsquo; 테이블에 저장한다.&lt;/li&gt;
&lt;li&gt;이 두 작업은 하나의 데이터베이스 트랜잭션으로 처리된다.&lt;/li&gt;
&lt;li&gt;별도의 프로세스(Message Relay)가 outbox 테이블에서 메시지를 읽어 실제 메시지 브로커로 전송한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;주요-구성-요소&#34;&gt;주요 구성 요소&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Outbox 테이블: 발행할 메시지를 임시로 저장하는 데이터베이스 테이블&lt;/li&gt;
&lt;li&gt;Message Relay: outbox 테이블에서 메시지를 읽어 메시지 브로커로 전송하는 프로세스&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;구현-방법&#34;&gt;구현 방법&lt;/h3&gt;
&lt;p&gt;a. Polling Publisher:&lt;br&gt;
- 주기적으로 outbox 테이블을 폴링하여 미발행 메시지를 조회하고 발행한다.&lt;br&gt;
- 구현이 간단하지만 실시간성이 떨어질 수 있다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
