<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Non-Primitive Data Structure :: Category :: hyunyoun's Blog</title><link>https://buenhyden.github.io/categories/non-primitive-data-structure.html</link><description/><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Wed, 08 Jan 2025 15:40:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/categories/non-primitive-data-structure/index.xml" rel="self" type="application/rss+xml"/><item><title>Concurrent Data Structure</title><link>https://buenhyden.github.io/til/2025/01/concurrent-data-structure.html</link><pubDate>Mon, 06 Jan 2025 12:55:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/til/2025/01/concurrent-data-structure.html</guid><description>Concurrent Data Structure는 여러 스레드가 동시에 안전하게 접근하고 조작할 수 있도록 설계된 데이터 구조로, 전통적인 데이터 구조와 달리, 동시성을 고려하여 데이터의 일관성과 무결성을 보장하면서도 높은 성능을 제공하는 것이 특징이다.</description></item><item><title>Suffix Array vs Suffix Tree vs Trie</title><link>https://buenhyden.github.io/til/2025/01/suffix-array-vs-suffix-tree-vs-trie.html</link><pubDate>Wed, 08 Jan 2025 15:40:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/til/2025/01/suffix-array-vs-suffix-tree-vs-trie.html</guid><description>Suffix Array, Suffix Tree, 그리고 Trie는 모두 문자열 처리와 패턴 매칭을 위한 데이터 구조로, 각각 고유한 특성과 용도를 가지고 있다.</description></item><item><title>해시 (Hash)</title><link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based.html</link><pubDate>Sun, 17 Nov 2024 01:33:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/hash-based.html</guid><description>임의의 크기를 가진 데이터를 고정된 크기의 데이터로 변환하는 과정</description></item><item><title>그래프 (Graph)</title><link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/graph.html</link><pubDate>Sat, 09 Nov 2024 05:54:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/graph.html</guid><description>노드(정점)와 엣지(간선)로 구성된 비선형 데이터 구조</description></item><item><title>힙 (Heap)</title><link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/heap.html</link><pubDate>Sat, 09 Nov 2024 05:54:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/heap.html</guid><description>부모 노드와 자식 노드 간의 대소 관계가 일정한 규칙을 따르는 자료구조</description></item><item><title>트리 (Tree)</title><link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree.html</link><pubDate>Sat, 09 Nov 2024 05:53:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/non-linear/tree.html</guid><description>계층적 구조를 가진 비선형 데이터 구조로, 노드들이 부모-자식 관계로 연결되어 있다</description></item><item><title>스택 (Stack)</title><link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/stack.html</link><pubDate>Fri, 08 Nov 2024 05:53:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/stack.html</guid><description>LIFO(Last In First Out) 원칙을 따르는 선형 데이터 구조</description></item><item><title>연결 리스트 (Linked List)</title><link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list.html</link><pubDate>Fri, 08 Nov 2024 05:53:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list.html</guid><description>각 노드가 데이터와 다음 노드에 대한 참조(포인터)를 가지고 있는 선형 데이터 구조</description></item><item><title>큐 (Queue)</title><link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/queue.html</link><pubDate>Fri, 08 Nov 2024 05:53:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/queue.html</guid><description>FIFO(First In First Out) 원칙을 따르는 선형 데이터 구조</description></item><item><title>배열 (Array)</title><link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array.html</link><pubDate>Fri, 08 Nov 2024 05:52:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array.html</guid><description>배열은 동일한 데이터 타입의 요소들을 연속된 메모리 공간에 저장하는 가장 기본적인 데이터 구조.</description></item></channel></rss>