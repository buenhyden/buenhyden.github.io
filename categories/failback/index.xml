<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Failback on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/failback/</link>
    <description>Recent content in Failback on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Sun, 18 May 2025 12:46:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/failback/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Failback vs. Fail Over</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-patterns/resilience-and-reliability/fault-tolerance/failure-recovery/failback-patterns/failback-vs-fail-over/</link>
      <pubDate>Sun, 18 May 2025 12:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-patterns/resilience-and-reliability/fault-tolerance/failure-recovery/failback-patterns/failback-vs-fail-over/</guid>
      <description>Failover 는 주 시스템에 장애 발생 시 대기 시스템으로 자동 전환하여 서비스 연속성을 유지하는 방식이며, Failback 은 주 시스템이 복구된 후 원래 상태로 되돌리는 과정이다. 이 두 메커니즘은 고가용성 시스템에서 다운타임을 최소화하고 비즈니스 연속성을 보장하는 필수적인 재해 복구 전략을 구성한다.</description>
    </item>
  </channel>
</rss>
