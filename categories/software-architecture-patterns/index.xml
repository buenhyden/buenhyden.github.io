<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Architecture Patterns :: Category :: hyunyoun's Blog</title><link>https://buenhyden.github.io/categories/software-architecture-patterns/</link><description/><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Thu, 16 Jan 2025 14:06:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/categories/software-architecture-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Software Architecture Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/</link><pubDate>Sun, 10 Nov 2024 05:46:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/</guid><description>주어진 상황에서의 소프트웨어 아키텍쳐에서 일반적으로 발생하는 문제점들에 대한 일반화되고 재사용 가능한 솔루션이다. 아키텍쳐 패턴은 소프트웨어 디자인 패턴과 유사하지만 더 큰 범주에 속한다.</description></item><item><title>Event-Driven Architecture vs Event Sourcing Pattern vs Publisher-Subscriber Pattern vs Producer-Consumer Pattern</title><link>https://buenhyden.github.io/til/2025/01/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</link><pubDate>Thu, 16 Jan 2025 03:37:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/til/2025/01/event-driven-architecture-vs-event-sourcing-pattern-vs-publisher-subscriber-pattern-vs-producer-consumer-pattern/</guid><description>EDA는 이벤트 중심의 시스템 설계를 위한 상위 수준의 아키텍처 스타일이며, Publisher-Subscriber Pattern과 Producer-Consumer Pattern은 EDA를 구현하는 데 사용되는 구체적인 통신 모델이다. 그리고 Event Sourcing Pattern은 EDA의 한 구현 방식으로 볼 수 있으며, 이벤트를 저장하고 관리하는 방법을 제공한다.</description></item><item><title>멀티 테넌시(Multi-tenancy)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/multi-tenancy/</link><pubDate>Thu, 16 Jan 2025 14:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/multi-tenancy/</guid><description>하나의 소프트웨어 애플리케이션이나 시스템이 여러 고객(테넌트)에게 서비스를 제공하는 아키텍처이다.</description></item><item><title>Producer-Consumer Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/producer-consumer-pattern/</link><pubDate>Thu, 16 Jan 2025 01:12:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/producer-consumer-pattern/</guid><description>이 패턴은 데이터를 생성하는 프로듀서(Producer)와 데이터를 소비하는 컨슈머(Consumer) 사이의 작업을 분리하여 효율적인 데이터 처리를 가능하게 한다.</description></item><item><title>Service-oriented architecture</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/service-oriented-architecture/</link><pubDate>Mon, 13 Jan 2025 09:19:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/service-oriented-architecture/</guid><description>Service-oriented architecture 참고 및 출처</description></item><item><title>Message Queues and Streams</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/message-queues-and-streams/</link><pubDate>Mon, 13 Jan 2025 09:01:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/message-queues-and-streams/</guid><description>Message Queues and Streams 참고 및 출처</description></item><item><title>Circuit Breaker Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/circuit-breaker-pattern/</link><pubDate>Wed, 01 Jan 2025 10:05:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/resilience/circuit-breaker-pattern/</guid><description>Circuit Breaker Pattern 참고 및 출처</description></item><item><title>Broker Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/broker-pattern/</link><pubDate>Fri, 13 Dec 2024 08:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/broker-pattern/</guid><description>분산 시스템에서 컴포넌트들 간의 통신을 조정하고 중개하는 구조적 패턴</description></item><item><title>Event-Bus Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-bus-pattern/</link><pubDate>Fri, 13 Dec 2024 08:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-bus-pattern/</guid><description>소프트웨어 시스템의 컴포넌트 간 통신을 단순화하고 유연성을 높이는 아키텍처 패턴</description></item><item><title>Rate Limiting Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/rate-limiting-pattern/</link><pubDate>Mon, 09 Dec 2024 11:41:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/rate-limiting-pattern/</guid><description>Rate Limiting Pattern 참고 및 출처</description></item><item><title>Retry Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/retry-pattern/</link><pubDate>Mon, 09 Dec 2024 11:31:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/retry-pattern/</guid><description>Retry Pattern 참고 및 출처</description></item><item><title>Serverless Architecture</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/serverless-architecture/</link><pubDate>Tue, 26 Nov 2024 11:41:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/serverless-architecture/</guid><description>Serverless Architecture 참고 및 출처</description></item><item><title>Event-Driven Architecture</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-driven-architecture/</link><pubDate>Sat, 23 Nov 2024 11:38:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-driven-architecture/</guid><description>Event-Driven Architecture (EDA)는 현대 소프트웨어 아키텍처 패턴 중 하나로, 시스템 내에서 발생하는 이벤트를 중심으로 동작하는 설계 방식이다.</description></item><item><title>Monolithic Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/monolithic-pattern/</link><pubDate>Sat, 23 Nov 2024 11:14:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/monolithic-pattern/</guid><description>애플리케이션의 모든 구성 요소가 단일 코드베이스와 단일 실행 단위로 통합된 형태</description></item><item><title>Domain-Driven Design</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/domain-driven-design/</link><pubDate>Fri, 22 Nov 2024 08:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/domain-driven-design/</guid><description>복잡한 소프트웨어 시스템을 개발하기 위한 접근 방식으로, 비즈니스 도메인을 중심으로 소프트웨어를 설계하고 개발하는 방법론</description></item><item><title>Space-Based Architecture</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/space-based-architecture/</link><pubDate>Fri, 22 Nov 2024 08:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/space-based-architecture/</guid><description>분산 컴퓨팅 시스템을 위한 소프트웨어 아키텍처 패턴으로, 복잡성을 증가시키지 않으면서 애플리케이션과 시스템의 확장성을 높이는 것을 목표로 한다.</description></item><item><title>Component-Based Architecture</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/component-based-architecture/</link><pubDate>Thu, 21 Nov 2024 11:48:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/component-based-architecture/</guid><description>Component-Based Architecture 참고 및 출처</description></item><item><title>Model-View-ViewModel-Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/model-view-viewmodel-pattern/</link><pubDate>Thu, 21 Nov 2024 11:26:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/model-view-viewmodel-pattern/</guid><description>Model-View-ViewModel-Pattern 참고 및 출처</description></item><item><title>Microkernel Architecture</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/microkernel-architecture/</link><pubDate>Thu, 21 Nov 2024 08:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/microkernel-architecture/</guid><description>시스템의 핵심 기능을 최소화하고 확장성과 유연성을 극대화하는 설계 방식</description></item><item><title>Hexagonal Architecture</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/hexagonal-architecture/</link><pubDate>Thu, 21 Nov 2024 08:29:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/hexagonal-architecture/</guid><description>애플리케이션의 핵심 비즈니스 로직을 외부 요소로부터 분리하여 유연하고 유지보수가 용이한 시스템을 구축하는 것을 목표로 한다</description></item><item><title>Model-View-Controller Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/model-view-controller-pattern/</link><pubDate>Thu, 21 Nov 2024 08:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/model-view-controller-pattern/</guid><description>애플리케이션을 세 가지 주요 구성 요소로 분리하여 개발의 유연성과 유지보수성을 향상시킨다.</description></item><item><title>Layered Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/layered-pattern/</link><pubDate>Thu, 21 Nov 2024 08:26:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/layered-pattern/</guid><description>애플리케이션의 구성 요소를 수평적 계층으로 조직화하여 각 계층이 특정 기능을 담당하도록 한다.</description></item><item><title>Publisher-Subscriber Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/publisher-subscriber-pattern/</link><pubDate>Wed, 20 Nov 2024 11:40:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/publisher-subscriber-pattern/</guid><description>이 패턴은 메시지를 보내는 발행자(Publisher)와 메시지를 받는 구독자(Subscriber) 사이의 느슨한 결합(Loose Coupling)을 제공하는 메시징 패턴으로, 발행자는 메시지를 특정 주제(Topic)나 채널로 발행하고, 해당 주제를 구독하는 모든 구독자들이 그 메시지를 받게 된다.</description></item><item><title>Event Sourcing Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-sourcing-pattern/</link><pubDate>Wed, 20 Nov 2024 11:17:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/event-sourcing-pattern/</guid><description>Event Sourcing Pattern은 데이터 처리와 저장에 대한 접근 방식을 정의하는 아키텍처 패턴으로, 시스템의 상태 변화를 일련의 이벤트로 기록하고 저장하는 방식을 채택한다.</description></item><item><title>CQRS 패턴 (Command Query Responsibility Segregation)</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/cqrs/</link><pubDate>Wed, 20 Nov 2024 08:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/cqrs/</guid><description>애플리케이션의 명령(Command)과 쿼리(Query)의 책임을 분리하는 소프트웨어 아키텍처 패턴</description></item><item><title>Repository Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/repository-pattern/</link><pubDate>Wed, 20 Nov 2024 08:30:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/repository-pattern/</guid><description>데이터 접근 로직을 추상화하고 캡슐화하여 비즈니스 로직과 데이터 저장소 간의 의존성을 줄이는 소프트웨어 아키텍처 패턴</description></item><item><title>Blackboard Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/blackboard-pattern/</link><pubDate>Wed, 20 Nov 2024 08:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/blackboard-pattern/</guid><description>Blackboard 패턴은 복잡하고 비결정적인 문제를 해결하기 위한 소프트웨어 아키텍처 패턴으로 여러 전문화된 구성 요소(지식 소스 또는 에이전트)가 협력하여 문제를 해결하는 방식을 제공한다.</description></item><item><title>Master-Slave Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/master-slave-pattern/</link><pubDate>Wed, 20 Nov 2024 08:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/master-slave-pattern/</guid><description>하나의 마스터 컴포넌트와 여러 슬레이브 컴포넌트로 구성되어 있으며, 작업을 효율적으로 분배하고 관리하는 데 사용된다</description></item><item><title>Peer-to-Peer Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/peer-to-peer-pattern/</link><pubDate>Wed, 20 Nov 2024 08:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/peer-to-peer-pattern/</guid><description>분산 네트워크 아키텍처의 한 형태로, 각 노드(피어)가 클라이언트와 서버의 역할을 동시에 수행하는 구조</description></item><item><title>Pipe-Filter Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/pipe-filter-pattern/</link><pubDate>Wed, 20 Nov 2024 08:28:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/pipe-filter-pattern/</guid><description>데이터 스트림을 처리하는 시스템에서 사용되는 소프트웨어 아키텍처 패턴</description></item><item><title>Client-Server Pattern</title><link>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/client-server-pattern/</link><pubDate>Wed, 20 Nov 2024 08:27:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-architecture-patterns/client-server-pattern/</guid><description>서비스를 제공하는 서버와 서비스를 요청하는 클라이언트로 구성되는 소프트웨어 아키텍처 패턴</description></item></channel></rss>