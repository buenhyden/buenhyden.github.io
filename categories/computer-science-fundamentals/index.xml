<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Computer Science Fundamentals on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/computer-science-fundamentals/</link>
    <description>Recent content in Computer Science Fundamentals on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Mon, 04 Aug 2025 03:54:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/computer-science-fundamentals/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Structures</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/</link>
      <pubDate>Mon, 07 Oct 2024 06:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/</guid>
      <description>데이터를 효율적으로 저장, 관리, 접근하기 위한 방법</description>
    </item>
    <item>
      <title>Algorithms</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/</link>
      <pubDate>Mon, 14 Oct 2024 08:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/algorithms/</guid>
      <description>문제를 해결하거나 특정 작업을 수행하기 위한 명확하고 단계적인 절차</description>
    </item>
    <item>
      <title>Problem Solving Techniques</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/</link>
      <pubDate>Sun, 13 Oct 2024 05:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/</guid>
      <description>주어진 문제를 효과적으로 분석하고 해결하기 위한 알고리즘 및 자료 구조를 적용하는 방법론</description>
    </item>
    <item>
      <title>Lock</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-fundamentals/basic-concepts/lock/</link>
      <pubDate>Mon, 04 Aug 2025 03:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-fundamentals/basic-concepts/lock/</guid>
      <description>Lock은 멀티스레드 환경에서 공유 자원에 대한 동시 접근을 제어하여 상호 배제(Mutual Exclusion)를 보장하는 동기화 수단이다. 임계 구역 보호를 통해 원자성을 제공하며, 경쟁 조건(Race Condition)을 방지한다. Spin Lock, Mutex, Reentrant Lock 등 다양한 유형이 존재하며, 선택에 따라 성능과 안정성에 영향을 미친다.</description>
    </item>
    <item>
      <title>Synchronization Primitives</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-fundamentals/synchronization-primitives/</link>
      <pubDate>Mon, 04 Aug 2025 03:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-fundamentals/synchronization-primitives/</guid>
      <description></description>
    </item>
    <item>
      <title>Condition Synchronization</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-fundamentals/synchronization-primitives/condition-synchronization/</link>
      <pubDate>Wed, 21 May 2025 05:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-fundamentals/synchronization-primitives/condition-synchronization/</guid>
      <description>조건 동기화는 스레드가 특정 조건이 충족될 때까지 안전하게 대기하고, 조건이 참이면 다른 스레드의 신호를 통해 실행을 재개하는 메커니즘이다. 조건 변수는 뮤텍스와 함께 사용되며, busy-waiting 없이 효율적 동기화를 제공한다. Producer-Consumer 문제 등에서 자주 활용된다.</description>
    </item>
    <item>
      <title>Concurrency Problems</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-fundamentals/concurrency-problems/</link>
      <pubDate>Wed, 21 May 2025 05:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-fundamentals/concurrency-problems/</guid>
      <description>Deadlock, Livelock, Race Condition, Starvation은 동시성 환경에서 발생하는 대표적인 병목 현상이다. 데드락은 자원 상호 점유로 인한 정지, 라이브락은 지속된 상태 변화에도 진전 없음, 레이스 컨디션은 타이밍 의존으로 인한 예측 불가, 기아 상태는 낮은 우선순위로 인한 무한 대기를 초래한다.</description>
    </item>
    <item>
      <title>Concurrency and Parallelism</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-fundamentals/basic-concepts/concurrency-vs-parallelism/</link>
      <pubDate>Sat, 05 Oct 2024 02:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency-fundamentals/basic-concepts/concurrency-vs-parallelism/</guid>
      <description>**동시성(Concurrency)**은 여러 작업을 시간적으로 겹치게 처리해 시스템 응답성과 자원 활용을 높이는 설계 방식이며, **병렬성(Parallelism)**은 여러 작업을 물리적으로 동시에 실행해 처리 성능을 극대화하는 실행 모델이다. 두 개념은 목적과 구현 수준이 다르며, I/O 바운드 작업에는 동시성이, CPU 바운드 작업에는 병렬성이 효과적이다.</description>
    </item>
    <item>
      <title>Memory Management</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems-fundamentals/memory-management-basics/</link>
      <pubDate>Tue, 01 Oct 2024 17:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems-fundamentals/memory-management-basics/</guid>
      <description>메모리 관리는 운영체제가 컴퓨터의 주 메모리 (RAM) 를 효율적으로 할당, 추적, 해제하는 과정이다. 이를 통해 여러 프로세스가 동시에 실행될 수 있도록 하며, 페이징, 세그먼테이션, 가상 메모리와 같은 기법을 사용하여 물리적 메모리 제약을 극복한다. 효과적인 메모리 관리는 시스템 성능, 안정성, 보안을 향상시키며 현대 컴퓨팅의 기반이 된다.</description>
    </item>
  </channel>
</rss>
