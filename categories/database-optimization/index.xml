<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Database Optimization :: Category :: hyunyoun's Blog</title><link>https://buenhyden.github.io/categories/database-optimization.html</link><description/><generator>Hugo</generator><language>en</language><managingEditor>chochyjj@gmail.com (Hyunyoun Jo)</managingEditor><webMaster>chochyjj@gmail.com (Hyunyoun Jo)</webMaster><lastBuildDate>Thu, 05 Dec 2024 06:27:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/categories/database-optimization/index.xml" rel="self" type="application/rss+xml"/><item><title>데이터베이스 파티셔닝 (Database Partitioning)</title><link>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-partitioning.html</link><pubDate>Thu, 05 Dec 2024 06:27:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-partitioning.html</guid><description>파티셔닝은 큰 테이블이나 인덱스를 더 작고 관리하기 쉬운 단위로 나누는 것</description></item><item><title>데이터베이스 정규화 (Database Normalization)</title><link>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-normalization.html</link><pubDate>Thu, 05 Dec 2024 02:06:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-normalization.html</guid><description>관계형 데이터베이스의 설계를 체계화하고 최적화하는 과정</description></item><item><title>데이터베이스 캐싱 (Database Caching)</title><link>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-caching.html</link><pubDate>Wed, 04 Dec 2024 06:25:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-caching.html</guid><description>자주 사용되는 데이터를 빠르게 접근할 수 있는 메모리에 임시로 저장하는 기술</description></item><item><title>데이터베이스 쿼리 최적화 (Database Query Optimization)</title><link>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-query-optimization.html</link><pubDate>Mon, 02 Dec 2024 06:23:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-query-optimization.html</guid><description>데이터베이스 시스템의 성능을 향상시키고 효율성을 높이기 위한 중요한 프로세스</description></item><item><title>데이터베이스 최적화 (Database Optimization)</title><link>https://buenhyden.github.io/posts/backend/database-systems/database-optimization.html</link><pubDate>Mon, 02 Dec 2024 06:12:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/backend/database-systems/database-optimization.html</guid><description>데이터베이스 시스템의 성능을 향상시키고 효율성을 높이기 위한 다양한 기법과 프로세스를 의미한다.</description></item><item><title>데이터베이스 인덱싱 (Database Indexing)</title><link>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-indexing.html</link><pubDate>Mon, 02 Dec 2024 02:11:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/database-indexing.html</guid><description>인덱스는 테이블의 특정 컬럼에 대한 검색을 빠르게 수행할 수 있도록 도와주는 자료 구조</description></item><item><title>Cardinality</title><link>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/cardinality.html</link><pubDate>Mon, 18 Nov 2024 15:08:00 +0000</pubDate><author>chochyjj@gmail.com (Hyunyoun Jo)</author><guid>https://buenhyden.github.io/posts/backend/database-systems/database-optimization/cardinality.html</guid><description>두 엔티티 간의 최대 연관성 혹은 특정 컬럼에 존재하는 고유한 값의 개수를 의미한다.</description></item></channel></rss>