<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – System Execution Models</title><link>https://buenhyden.github.io/categories/system-execution-models/</link><description>Recent content in System Execution Models on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 14 Jan 2025 14:39:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/categories/system-execution-models/index.xml" rel="self" type="application/rss+xml"/><item><title>Multithreading Vs Multiprocessing vs Multitasking</title><link>https://buenhyden.github.io/til/2025/01/multithreading-vs-multiprocessing-vs-multitasking/</link><pubDate>Tue, 14 Jan 2025 14:39:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/multithreading-vs-multiprocessing-vs-multitasking/</guid><description>
&lt;h2>Multithreading Vs Multiprocessing Vs Multitasking&lt;span class="hx-absolute -hx-mt-20" id="multithreading-vs-multiprocessing-vs-multitasking">&lt;/span>
&lt;a href="#multithreading-vs-multiprocessing-vs-multitasking" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Multithreading, Multiprocessing, Multitasking은 컴퓨터 시스템에서 동시성과 병렬성을 구현하는 세 가지 주요 개념이다.&lt;/p>
&lt;p>Multitasking은 단일 CPU에서 여러 작업(프로세스)을 동시에 실행하는 것처럼 보이게 하는 기술이다. 실제로는 CPU가 매우 빠르게 여러 작업 간을 전환하면서 실행한다.&lt;/p>
&lt;ul>
&lt;li>목적: CPU 사용률을 최대화하고 사용자에게 여러 프로그램이 동시에 실행되는 것 같은 환상을 제공한다.&lt;/li>
&lt;li>구현: 시분할(time-sharing) 방식을 사용하여 각 작업에 CPU 시간을 할당한다.&lt;/li>
&lt;/ul>
&lt;p>Multithreading은 하나의 프로세스 내에서 여러 실행 흐름(스레드)을 동시에 처리하는 기술이다.&lt;/p>
&lt;ul>
&lt;li>목적: 단일 프로세스의 성능을 향상시키고 자원을 효율적으로 사용한다.&lt;/li>
&lt;li>특징: 스레드들은 같은 프로세스 내의 메모리와 자원을 공유한다.&lt;/li>
&lt;/ul>
&lt;p>Multiprocessing은 여러 개의 프로세서(또는 코어)를 사용하여 여러 작업을 실제로 동시에 처리하는 기술이다.&lt;/p>
&lt;ul>
&lt;li>목적: 시스템의 전체적인 처리 능력을 향상시킨다.&lt;/li>
&lt;li>특징: 각 프로세서가 독립적으로 작업을 처리하며, 실제 병렬 처리가 가능하다.&lt;/li>
&lt;/ul>
&lt;p>이들의 차이점을 표로 정리하면 다음과 같습니다:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Multitasking&lt;/th>
&lt;th>Multiprocessing&lt;/th>
&lt;th>Multithreading&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>단일 CPU에서 여러 작업을 번갈아 실행&lt;/td>
&lt;td>여러 프로세서에서 여러 작업을 동시에 실행&lt;/td>
&lt;td>단일 프로세스 내에서 여러 실행 흐름을 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실행 단위&lt;/td>
&lt;td>태스크/프로세스&lt;/td>
&lt;td>프로세스&lt;/td>
&lt;td>스레드&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 공유&lt;/td>
&lt;td>각 작업이 독립적인 메모리 공간 사용&lt;/td>
&lt;td>각 프로세스가 독립적인 메모리 공간 사용&lt;/td>
&lt;td>스레드 간 메모리와 자원 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 사용&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>통신 비용&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>컨텍스트 스위칭 비용&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡도&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>안정성&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CPU 활용&lt;/td>
&lt;td>단일 CPU&lt;/td>
&lt;td>여러 CPU/코어&lt;/td>
&lt;td>단일 CPU 또는 여러 CPU&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>장점&lt;/td>
&lt;td>- 자원 격리&lt;br>- 안정성&lt;br>- 구현 용이&lt;/td>
&lt;td>- 진정한 병렬 처리&lt;br>- 높은 성능&lt;br>- 안정성&lt;/td>
&lt;td>- 자원 공유&lt;br>- 빠른 컨텍스트 스위칭&lt;br>- 효율적인 통신&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>단점&lt;/td>
&lt;td>- 높은 리소스 사용&lt;br>- 느린 통신&lt;/td>
&lt;td>- 높은 리소스 사용&lt;br>- 복잡한 구현&lt;br>- 비용 높음&lt;/td>
&lt;td>- 동기화 필요&lt;br>- 디버깅 어려움&lt;br>- 공유 자원 관리 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>적합한 사용 사례&lt;/td>
&lt;td>- 독립적인 작업 실행&lt;br>- 일반적인 데스크톱 환경&lt;/td>
&lt;td>- 대규모 데이터 처리&lt;br>- 고성능 컴퓨팅&lt;/td>
&lt;td>- GUI 애플리케이션&lt;br>- 웹 서버&lt;br>- 게임 엔진&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 기술들은 서로 배타적이지 않으며, 현대의 시스템에서는 이들을 조합하여 사용하는 것이 일반적이다.&lt;br>
예를 들어, 멀티코어 시스템에서 여러 프로세스(멀티프로세싱)가 실행되고, 각 프로세스 내에서는 여러 스레드(멀티스레딩)가 실행되며, 이 모든 것이 멀티태스킹 환경에서 동작하는 것이다.&lt;/p>
&lt;p>Multitasking은 사용자 인터페이스의 반응성을 높이는 데 유용하고, Multithreading은 단일 애플리케이션의 성능을 최적화하는 데 효과적이며, Multiprocessing은 대규모 병렬 처리가 필요한 작업에 적합하다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Process vs Thread</title><link>https://buenhyden.github.io/til/2024/10/process-vs-thread/</link><pubDate>Mon, 14 Oct 2024 08:30:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/10/process-vs-thread/</guid><description>
&lt;h2>Process Vs Thread&lt;span class="hx-absolute -hx-mt-20" id="process-vs-thread">&lt;/span>
&lt;a href="#process-vs-thread" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ol>
&lt;li>
&lt;p>프로세스:&lt;/p>
&lt;ul>
&lt;li>독립적인 실행 단위로, 자체 메모리 공간과 시스템 자원을 가진다.&lt;/li>
&lt;li>다른 프로세스와 완전히 격리되어 있어 안정성이 높다.&lt;/li>
&lt;li>생성과 전환에 많은 비용이 든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>스레드:&lt;/p>
&lt;ul>
&lt;li>프로세스 내부의 실행 단위로, 같은 프로세스의 다른 스레드와 메모리를 공유한다.&lt;/li>
&lt;li>프로세스보다 가볍고, 생성과 전환 비용이 적다.&lt;/li>
&lt;li>동시성을 제공하지만, 동기화 문제에 주의해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>
&lt;img src="../Screenshot-from-2024-02-26-11-48-56-768.png" alt="Single Threaded vs Multi-threaded Process" loading="lazy" />&lt;br>
&lt;em>Source: &lt;a href="https://www.geeksforgeeks.org/thread-in-operating-system/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/thread-in-operating-system/&lt;/a>&lt;/em>&lt;/p>
&lt;h3>Process Vs Thread&lt;span class="hx-absolute -hx-mt-20" id="process-vs-thread-1">&lt;/span>
&lt;a href="#process-vs-thread-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>실행 중인 프로그램의 인스턴스&lt;/td>
&lt;td>프로세스 내에서 실행되는 더 작은 실행 단위&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 공간&lt;/td>
&lt;td>독립적인 메모리 공간 (코드, 데이터, 스택, 힙)&lt;/td>
&lt;td>프로세스의 메모리 공간 공유 (코드, 데이터, 힙), 독립적인 스택&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구성 요소&lt;/td>
&lt;td>- 코드 영역&lt;br>- 데이터 영역&lt;br>- 스택 영역&lt;br>- 힙 영역&lt;/td>
&lt;td>- 스레드 ID&lt;br>- 프로그램 카운터&lt;br>- 레지스터 집합&lt;br>- 스택&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 공유&lt;/td>
&lt;td>다른 프로세스와 자원 공유 안 함&lt;/td>
&lt;td>같은 프로세스 내 스레드 간 자원 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>생성 비용&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>컨텍스트 스위칭&lt;/td>
&lt;td>비용이 큼&lt;/td>
&lt;td>비용이 적음 (같은 프로세스 내에서)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>안정성&lt;/td>
&lt;td>높음 (한 프로세스의 오류가 다른 프로세스에 영향 없음)&lt;/td>
&lt;td>상대적으로 낮음 (한 스레드의 오류가 전체 프로세스에 영향)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>통신&lt;/td>
&lt;td>프로세스 간 통신(IPC) 필요 (복잡하고 오버헤드 큼)&lt;/td>
&lt;td>쉽고 빠른 통신 (공유 메모리 사용)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>병렬 처리&lt;/td>
&lt;td>가능하지만 오버헤드 큼&lt;/td>
&lt;td>효율적인 병렬 처리 가능&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>메모리 구조 비교&lt;span class="hx-absolute -hx-mt-20" id="메모리-구조-비교">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b5%ac%ec%a1%b0-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>메모리 영역&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>코드 영역&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>데이터 영역&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>힙 영역&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>스택 영역&lt;/strong>&lt;/td>
&lt;td>독립적&lt;/td>
&lt;td>각 스레드마다 독립적&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>특성 상세 비교&lt;span class="hx-absolute -hx-mt-20" id="특성-상세-비교">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%84%b1-%ec%83%81%ec%84%b8-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>독립성&lt;/strong>&lt;/td>
&lt;td>완전히 독립적&lt;/td>
&lt;td>부분적으로 독립적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>자원 공유&lt;/strong>&lt;/td>
&lt;td>제한적 (IPC 필요)&lt;/td>
&lt;td>쉽게 공유 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>오류 영향&lt;/strong>&lt;/td>
&lt;td>다른 프로세스에 영향 없음&lt;/td>
&lt;td>같은 프로세스의 모든 스레드에 영향&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>동기화&lt;/strong>&lt;/td>
&lt;td>필요성 낮음&lt;br>- IPC 메커니즘 필요&lt;/td>
&lt;td>공유 자원에 대한 동기화 필요&lt;br>- 뮤텍스, 세마포어 등 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>생성 시간&lt;/strong>&lt;/td>
&lt;td>더 오래 걸림&lt;/td>
&lt;td>더 빠름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>종료 시간&lt;/strong>&lt;/td>
&lt;td>더 오래 걸림&lt;/td>
&lt;td>더 빠름&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>장단점 비교&lt;span class="hx-absolute -hx-mt-20" id="장단점-비교">&lt;/span>
&lt;a href="#%ec%9e%a5%eb%8b%a8%ec%a0%90-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>구분&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>장점&lt;/strong>&lt;/td>
&lt;td>- 높은 안정성&lt;br>- 다른 프로세스의 영향 받지 않음&lt;br>- 보안성이 높음&lt;/td>
&lt;td>- 생성/종료가 빠름&lt;br>- 자원 공유가 쉬움&lt;br>- 통신 비용이 적음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>단점&lt;/strong>&lt;/td>
&lt;td>- 많은 시스템 자원 필요&lt;br>- 프로세스 간 통신이 복잡&lt;br>- 컨텍스트 스위칭 비용이 큼&lt;/td>
&lt;td>- 동기화 문제 발생 가능&lt;br>- 디버깅이 어려움&lt;br>- 하나의 스레드 문제가 전체에 영향&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>사용 사례 비교&lt;span class="hx-absolute -hx-mt-20" id="사용-사례-비교">&lt;/span>
&lt;a href="#%ec%82%ac%ec%9a%a9-%ec%82%ac%eb%a1%80-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>용도&lt;/th>
&lt;th>Process 선호&lt;/th>
&lt;th>Thread 선호&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>웹 서버&lt;/strong>&lt;/td>
&lt;td>안정성이 중요한 경우&lt;/td>
&lt;td>높은 동시성이 필요한 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>GUI 앱&lt;/strong>&lt;/td>
&lt;td>독립적인 작업이 많은 경우&lt;/td>
&lt;td>반응성이 중요한 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>데이터 처리&lt;/strong>&lt;/td>
&lt;td>대용량 병렬 처리&lt;/td>
&lt;td>데이터 공유가 많은 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>시스템 서비스&lt;/strong>&lt;/td>
&lt;td>격리가 필요한 경우&lt;/td>
&lt;td>빈번한 통신이 필요한 경우&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>활용 예&lt;/td>
&lt;td>- 독립적인 애플리케이션 &lt;br>- 웹 브라우저의 각 탭 &lt;br>- 다중 사용자 서버&lt;/td>
&lt;td>- 웹 서버 요청 처리 &lt;br>- 게임 엔진 (렌더링, 물리 연산) &lt;br>- 멀티미디어 애플리케이션&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>동기화 메커니즘 비교&lt;span class="hx-absolute -hx-mt-20" id="동기화-메커니즘-비교">&lt;/span>
&lt;a href="#%eb%8f%99%ea%b8%b0%ed%99%94-%eb%a9%94%ec%bb%a4%eb%8b%88%ec%a6%98-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>메커니즘&lt;/th>
&lt;th>Process&lt;/th>
&lt;th>Thread&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>공유 메모리&lt;/strong>&lt;/td>
&lt;td>명시적으로 설정 필요&lt;/td>
&lt;td>기본적으로 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>뮤텍스&lt;/strong>&lt;/td>
&lt;td>프로세스 간 뮤텍스 필요&lt;/td>
&lt;td>프로세스 내 뮤텍스 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>세마포어&lt;/strong>&lt;/td>
&lt;td>시스템 세마포어 필요&lt;/td>
&lt;td>프로세스 내 세마포어 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메시지 전달&lt;/strong>&lt;/td>
&lt;td>IPC 메커니즘 사용&lt;/td>
&lt;td>직접 메모리 접근&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 차이점들을 이해하고 적절히 활용하면, 상황에 맞는 최적의 실행 단위를 선택할 수 있다.&lt;/p>
&lt;hr>
&lt;h3>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3></description></item><item><title>Multithreading</title><link>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/multithreading/</link><pubDate>Tue, 14 Jan 2025 14:33:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/multithreading/</guid><description>
&lt;h2>멀티 쓰레딩 (Multithreading)&lt;span class="hx-absolute -hx-mt-20" id="멀티-쓰레딩-multithreading">&lt;/span>
&lt;a href="#%eb%a9%80%ed%8b%b0-%ec%93%b0%eb%a0%88%eb%94%a9-multithreading" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Multithreading은 운영 체제에서 프로그램이 여러 작업을 동시에 수행할 수 있게 해주는 기능이다. 즉, 하나의 프로세스 내에서 여러 스레드가 동시에 실행되는 것을 의미하며, 각 스레드는 프로세스의 자원을 공유하면서도 독립적인 실행 경로를 가진다.&lt;br>
이는 단일 프로세스 내에서 여러 실행 흐름(스레드)을 생성하고 관리하며, 현대 컴퓨터 시스템의 성능과 효율성을 크게 향상시킨다.&lt;/p>
&lt;p>
&lt;img src="../thread-1.jpg" alt="Single Threaded Process vs Multi-threaded Process" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/multithreading-in-operating-system/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/multithreading-in-operating-system/&lt;/a> _&lt;/p>
&lt;p>각 스레드는 자신만의 프로그램 카운터, 레지스터 집합, 스택을 가지고 있다.
하지만 같은 프로세스 내의 스레드들은 코드, 데이터 섹션, 파일과 같은 자원을 공유한다.
이는 프로세스보다 스레드의 생성과 컨텍스트 스위칭이 더 가벼운 이유가 된다.&lt;/p>
&lt;p>
&lt;img src="../Multithreading-normal-image00.webp" alt="a single thread and multithreading system" loading="lazy" />&lt;br>
_Source: &lt;a href="https://data-flair.training/blogs/multithreading-in-operating-system/" target="_blank" rel="noopener">https://data-flair.training/blogs/multithreading-in-operating-system/&lt;/a> _&lt;/p>
&lt;h3>Multithreading의 장점&lt;span class="hx-absolute -hx-mt-20" id="multithreading의-장점">&lt;/span>
&lt;a href="#multithreading%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>성능 향상&lt;/strong>: 여러 작업을 병렬로 실행함으로써 전체적인 프로그램 속도가 향상된다.&lt;/li>
&lt;li>&lt;strong>응답성 개선&lt;/strong>: 사용자 인터페이스 스레드와 처리 스레드를 분리하여 애플리케이션의 반응성을 높일 수 있다.&lt;/li>
&lt;li>&lt;strong>자원 활용 최적화&lt;/strong>: CPU와 메모리 등의 시스템 자원을 더 효율적으로 사용할 수 있다.&lt;/li>
&lt;li>&lt;strong>모듈화 설계&lt;/strong>: 복잡한 작업을 독립적인 스레드로 나누어 코드 구조를 단순화할 수 있다.&lt;/li>
&lt;li>&lt;strong>비동기 작업 처리&lt;/strong>: I/O 작업과 같은 대기 시간을 효율적으로 활용할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>Multithreading의 단점&lt;span class="hx-absolute -hx-mt-20" id="multithreading의-단점">&lt;/span>
&lt;a href="#multithreading%ec%9d%98-%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>복잡성 증가&lt;/strong>: 디버깅과 테스트가 더 어려워지며, 동기화 문제 등 새로운 유형의 버그가 발생할 수 있다.&lt;/li>
&lt;li>&lt;strong>동기화 오버헤드&lt;/strong>: 공유 자원에 대한 접근을 관리하기 위한 동기화 메커니즘이 필요하며, 이는 성능 저하를 초래할 수 있다.&lt;/li>
&lt;li>&lt;strong>경쟁 조건(Race Condition)&lt;/strong>: 여러 스레드가 동시에 공유 데이터에 접근할 때 예측할 수 없는 결과가 발생할 수 있다.&lt;/li>
&lt;li>&lt;strong>자원 소비 증가&lt;/strong>: 각 스레드는 시스템 자원을 소비하므로, 과도한 스레드 생성은 시스템 성능을 저하시킬 수 있다. [27].&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>동시성 (Concurrency)</title><link>https://buenhyden.github.io/posts/computer-system/system-execution-models/concurrency/</link><pubDate>Fri, 01 Nov 2024 06:51:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/concurrency/</guid><description>
&lt;h2>동시성 (Concurrency)&lt;span class="hx-absolute -hx-mt-20" id="동시성-concurrency">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1-concurrency" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>동시성 (Concurrency)은 여러 작업이 동시에 실행되는 것처럼 보이지만, 실제로는 매우 빠르게 작업 간 전환을 하면서 처리하는 방식이다. 예를 들어, 하나의 CPU 코어에서 여러 작업을 빠르게 번갈아가며 실행하여 마치 동시에 여러 작업이 처리되는 것처럼 보이게 만든다.&lt;/p>
&lt;p>&lt;img src="Concurrency.gif" alt="Concurrency" loading="lazy" />
_Source: &lt;a href="https://dynamogeeks.com/blog/concurrency-vs-parallelism-a-simplified-explanation" target="_blank" rel="noopener">https://dynamogeeks.com/blog/concurrency-vs-parallelism-a-simplified-explanation&lt;/a> _&lt;/p>
&lt;h3>동시성의 특징&lt;span class="hx-absolute -hx-mt-20" id="동시성의-특징">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1%ec%9d%98-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>논리적 개념&lt;/strong>: 동시성은 물리적으로 동시에 실행되는 것이 아닌, 논리적으로 동시에 실행되는 것처럼 보이게 하는 개념이다.&lt;/li>
&lt;li>&lt;strong>자원 효율성&lt;/strong>: CPU가 유휴 상태로 있지 않고 계속해서 작업을 처리하므로 시스템 자원을 효율적으로 사용할 수 있다.&lt;/li>
&lt;li>&lt;strong>응답성 향상&lt;/strong>: 여러 작업을 번갈아가며 처리하므로 전체적인 시스템의 응답성이 향상된다.&lt;/li>
&lt;/ol>
&lt;h3>동시성의 구현 방법&lt;span class="hx-absolute -hx-mt-20" id="동시성의-구현-방법">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1%ec%9d%98-%ea%b5%ac%ed%98%84-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>멀티스레딩&lt;/strong>: 하나의 프로세스 내에서 여러 스레드를 사용하여 작업을 동시에 처리한다.&lt;/li>
&lt;li>&lt;strong>비동기 프로그래밍&lt;/strong>: 작업을 비동기적으로 처리하여 한 작업이 완료되기를 기다리지 않고 다른 작업을 수행할 수 있게 한다.&lt;/li>
&lt;/ol>
&lt;h3>동시성의 장점&lt;span class="hx-absolute -hx-mt-20" id="동시성의-장점">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>성능 향상&lt;/strong>: 여러 작업을 동시에 처리함으로써 전체적인 처리 속도를 높일 수 있다.&lt;/li>
&lt;li>&lt;strong>자원 활용 최적화&lt;/strong>: CPU와 같은 시스템 자원을 최대한 활용할 수 있다.&lt;/li>
&lt;li>&lt;strong>사용자 경험 개선&lt;/strong>: 특히 UI 애플리케이션에서 동시성을 활용하면 사용자 반응성을 크게 향상시킬 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>동시성의 주의점&lt;span class="hx-absolute -hx-mt-20" id="동시성의-주의점">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1%ec%9d%98-%ec%a3%bc%ec%9d%98%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>복잡성 증가&lt;/strong>: 동시성 프로그래밍은 일반적인 순차적 프로그래밍보다 복잡할 수 있다.&lt;/li>
&lt;li>&lt;strong>동기화 문제&lt;/strong>: 여러 작업이 공유 자원에 동시에 접근할 때 발생할 수 있는 문제를 주의해야 한다.&lt;/li>
&lt;li>&lt;strong>디버깅의 어려움&lt;/strong>: 동시에 실행되는 작업들 간의 상호작용으로 인해 버그를 찾고 수정하기가 어려울 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>동시성의 실제 예시&lt;span class="hx-absolute -hx-mt-20" id="동시성의-실제-예시">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1%ec%9d%98-%ec%8b%a4%ec%a0%9c-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>웹 브라우저&lt;/strong>: 여러 탭을 동시에 열어 각각 다른 웹페이지를 로드하면서 사용자 입력을 받는 것은 동시성의 좋은 예이다.&lt;/li>
&lt;li>&lt;strong>데이터베이스 시스템&lt;/strong>: 여러 사용자의 쿼리를 동시에 처리하는 데이터베이스 시스템도 동시성을 활용한다.&lt;/li>
&lt;/ol>
&lt;p>동시성은 현대 프로그래밍에서 매우 중요한 개념으로, 시스템의 성능을 향상시키고 사용자 경험을 개선하는 데 크게 기여한다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>병렬성 (Parallelism)</title><link>https://buenhyden.github.io/posts/computer-system/system-execution-models/parallelism/</link><pubDate>Fri, 01 Nov 2024 02:35:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/parallelism/</guid><description>
&lt;h2>병렬성 (Parallelism)&lt;span class="hx-absolute -hx-mt-20" id="병렬성-parallelism">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1-parallelism" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>병렬성(Parallelism)은 컴퓨터 프로그래밍에서 여러 작업을 동시에 실행하여 전체적인 처리 속도를 향상시키는 기술을 말한다.&lt;br>
이는 여러 CPU 코어나 프로세서를 활용하여 다양한 작업을 동시에 처리하는 방식이다.&lt;br>
예를 들어, 대규모 데이터베이스의 쿼리 처리나 대용량 파일의 압축 해제 등은 병렬 처리를 통해 성능을 크게 향상시킬 수 있다.&lt;/p>
&lt;p>&lt;img src="Parallelism.gif" alt="Parallelism" loading="lazy" />&lt;br>
_Source: &lt;a href="https://dynamogeeks.com/blog/concurrency-vs-parallelism-a-simplified-explanation" target="_blank" rel="noopener">https://dynamogeeks.com/blog/concurrency-vs-parallelism-a-simplified-explanation&lt;/a> _&lt;/p>
&lt;h3>병렬성의 종류&lt;span class="hx-absolute -hx-mt-20" id="병렬성의-종류">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1%ec%9d%98-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>병렬성은 크게 두 가지 방식으로 구현될 수 있다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>데이터 병렬화 (Data parallelism):&lt;br>
동일한 작업을 여러 데이터 조각에 대해 동시에 수행한다.&lt;br>
예를 들어, 대규모 행렬 연산에서 행렬을 여러 부분으로 나누고, 각 부분을 동시에 처리하여 계산을 가속화할 수 있다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 직렬 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">squared&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">squared&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 병렬 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">multiprocessing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Pool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">num&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">with&lt;/span> &lt;span class="n">Pool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">processes&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">pool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">squared&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">square&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>작업 병렬화 (Task parallelism):&lt;br>
서로 다른 작업을 동시에 수행한다.&lt;br>
예를 들어, 웹 서버가 여러 클라이언트의 요청을 동시에 처리하는 경우이다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 직렬 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">process_data&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">read_file&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process_image&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">update_database&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 병렬 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">read_file&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">process_image&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">update_database&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>병렬성의 장점&lt;span class="hx-absolute -hx-mt-20" id="병렬성의-장점">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>성능 향상: 여러 작업을 동시에 처리함으로써 전체적인 실행 시간을 단축할 수 있다.&lt;/li>
&lt;li>자원 효율성: 여러 프로세서나 코어를 효율적으로 활용할 수 있다.&lt;/li>
&lt;li>확장성: 더 많은 프로세서를 추가함으로써 시스템의 성능을 증가시킬 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>병렬성의 구현 방법&lt;span class="hx-absolute -hx-mt-20" id="병렬성의-구현-방법">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1%ec%9d%98-%ea%b5%ac%ed%98%84-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>병렬성은 주로 다음과 같은 방법으로 구현된다:&lt;/p>
&lt;ol>
&lt;li>멀티스레딩 (Multi-threading): 하나의 프로세스 내에서 여러 스레드를 사용하여 작업을 병렬로 처리한다.&lt;/li>
&lt;li>멀티프로세싱 (Multi-processing): 여러 개의 프로세서를 사용하여 작업을 분산 처리한다.&lt;/li>
&lt;li>분산 컴퓨팅: 여러 컴퓨터를 네트워크로 연결하여 대규모 작업을 분산 처리한다.&lt;/li>
&lt;/ol>
&lt;h3>병렬성 프로그래밍의 주의점&lt;span class="hx-absolute -hx-mt-20" id="병렬성-프로그래밍의-주의점">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%98%eb%b0%8d%ec%9d%98-%ec%a3%bc%ec%9d%98%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>동기화 문제: 여러 작업이 동시에 실행될 때 데이터의 일관성을 유지하기 위한 동기화가 필요하다.&lt;/li>
&lt;li>데드락(Deadlock): 여러 프로세스가 서로의 자원을 기다리며 무한정 대기하는 상황을 방지해야 한다.&lt;/li>
&lt;li>오버헤드: 작업 분배와 결과 취합 과정에서 발생하는 추가적인 비용을 고려해야 한다.&lt;/li>
&lt;/ol>
&lt;h3>병렬성의 실제 적용 사례&lt;span class="hx-absolute -hx-mt-20" id="병렬성의-실제-적용-사례">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1%ec%9d%98-%ec%8b%a4%ec%a0%9c-%ec%a0%81%ec%9a%a9-%ec%82%ac%eb%a1%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>과학 연산: 기후 변화 시뮬레이션, 우주 현상 모델링 등 복잡한 과학적 계산에 활용된다.&lt;/li>
&lt;li>빅데이터 처리: 대량의 데이터를 빠르게 분석하고 처리하는 데 사용된다.&lt;/li>
&lt;li>컴퓨터 그래픽스: 3D 렌더링이나 영상 처리 등에서 병렬 처리를 통해 성능을 향상킨다.&lt;/li>
&lt;/ol>
&lt;p>병렬성은 현대 컴퓨팅에서 매우 중요한 개념으로, 복잡한 문제를 효율적으로 해결하고 시스템의 성능을 극대화하는 데 필수적이다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Thread</title><link>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/thread/</link><pubDate>Thu, 26 Sep 2024 23:32:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/threads-and-multithreading/thread/</guid><description>
&lt;h2>Thread&lt;span class="hx-absolute -hx-mt-20" id="thread">&lt;/span>
&lt;a href="#thread" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Thread는 프로그램 실행의 기본 단위로, 프로세스 내에서 실행되는 독립적인 작업 흐름을 의미한다.&lt;/p>
&lt;p>하나의 프로세스는 여러 개의 Thread를 가질 수 있으며, 이들은 프로세스의 자원을 공유한다.&lt;/p>
&lt;p>
&lt;img src="../1_ILkJu8YvpoldbL4kpNL9aA.webp" alt="This chart displays the hierarchy among Program, Process and Thread" loading="lazy" />&lt;br>
_Source: &lt;a href="https://blog.devgenius.io/program-process-and-thread-explained-in-one-minute-6016e4fdf4de" target="_blank" rel="noopener">https://blog.devgenius.io/program-process-and-thread-explained-in-one-minute-6016e4fdf4de&lt;/a> _&lt;/p>
&lt;h3>Thread의 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="thread의-구성-요소">&lt;/span>
&lt;a href="#thread%ec%9d%98-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Thread는 다음과 같은 구성 요소를 가진다:&lt;/p>
&lt;ol>
&lt;li>프로그램 카운터&lt;/li>
&lt;li>레지스터 집합&lt;/li>
&lt;li>스택 공간&lt;/li>
&lt;li>Thread ID&lt;br>
이러한 요소들은 각 Thread의 독립적인 실행을 가능하게 한다.&lt;/li>
&lt;/ol>
&lt;h3>Thread의 특징&lt;span class="hx-absolute -hx-mt-20" id="thread의-특징">&lt;/span>
&lt;a href="#thread%ec%9d%98-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>경량성: Thread는 프로세스에 비해 생성과 관리가 더 빠르고 효율적이다.&lt;/li>
&lt;li>자원 공유: 같은 프로세스 내의 Thread들은 코드, 데이터, 파일 등의 자원을 공유한다.&lt;/li>
&lt;li>병렬 실행: 멀티코어 시스템에서는 여러 Thread가 실제로 동시에 실행될 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>기능과 역할&lt;span class="hx-absolute -hx-mt-20" id="기능과-역할">&lt;/span>
&lt;a href="#%ea%b8%b0%eb%8a%a5%ea%b3%bc-%ec%97%ad%ed%95%a0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>기능&lt;/th>
&lt;th>역할&lt;/th>
&lt;th>장점&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>병렬 처리&lt;/td>
&lt;td>- 동시에 여러 작업 수행&lt;br>CPU 활용도 증가&lt;/td>
&lt;td>- 성능 향상&lt;br>- 응답성 개선&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 공유&lt;/td>
&lt;td>- 프로세스 자원 공유&lt;br>- 효율적인 메모리 사용&lt;/td>
&lt;td>- 메모리 절약&lt;br>- 통신 비용 감소&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>비동기 처리&lt;/td>
&lt;td>- 독립적인 작업 수행&lt;br>- 이벤트 처리&lt;/td>
&lt;td>- 응답성 향상&lt;br>UI 처리 효율화&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Thread의 종류&lt;span class="hx-absolute -hx-mt-20" id="thread의-종류">&lt;/span>
&lt;a href="#thread%ec%9d%98-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Thread는 크게 두 가지로 나눌 수 있다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>사용자 수준 Thread (User-level Thread)&lt;/p>
&lt;ul>
&lt;li>사용자 공간에서 관리되며, 커널은 이를 인식하지 못한다.&lt;/li>
&lt;li>생성과 관리가 빠르지만, 한 Thread가 블로킹되면 전체 프로세스가 블로킹된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>커널 수준 Thread (Kernel-level Thread)&lt;/p>
&lt;ul>
&lt;li>운영 체제 커널에 의해 관리된다.&lt;/li>
&lt;li>생성과 관리가 상대적으로 느리지만, 한 Thread가 블로킹되어도 다른 Thread는 계속 실행될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>유형&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>사용 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>사용자 수준&lt;/td>
&lt;td>- 사용자 모드에서 관리&lt;br>- 커널 지원 불필요&lt;/td>
&lt;td>- 라이브러리 구현&lt;br>- 응용 프로그램&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>커널 수준&lt;/td>
&lt;td>- 커널에 의해 관리&lt;br>- 운영체제 지원 필요&lt;/td>
&lt;td>- 시스템 서비스&lt;br>- 디바이스 드라이버&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Thread의 장점&lt;span class="hx-absolute -hx-mt-20" id="thread의-장점">&lt;/span>
&lt;a href="#thread%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>응답성 향상: 프로그램의 일부가 블로킹되어도 다른 부분이 계속 실행될 수 있다.&lt;/li>
&lt;li>자원 공유: 같은 프로세스 내의 Thread들은 자원을 효율적으로 공유할 수 있다.&lt;/li>
&lt;li>경제성: Thread 생성은 프로세스 생성보다 비용이 적게 든다.&lt;/li>
&lt;li>확장성: 멀티프로세서 아키텍처의 이점을 활용할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>Thread의 사용 예&lt;span class="hx-absolute -hx-mt-20" id="thread의-사용-예">&lt;/span>
&lt;a href="#thread%ec%9d%98-%ec%82%ac%ec%9a%a9-%ec%98%88" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>웹 브라우저: 여러 탭을 동시에 로드하고 실행할 수 있다.&lt;/li>
&lt;li>워드 프로세서: 문서 편집, 맞춤법 검사, 자동 저장 등을 동시에 수행할 수 있다.&lt;/li>
&lt;li>게임: 그래픽 렌더링, 물리 연산, 사운드 처리 등을 병렬로 처리할 수 있다.&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>분야&lt;/th>
&lt;th>활용 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>웹 서버&lt;/td>
&lt;td>- 클라이언트 요청 처리&lt;br>- 동시 접속 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GUI 응용&lt;/td>
&lt;td>- 이벤트 처리&lt;br>- 화면 갱신&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>게임&lt;/td>
&lt;td>- 물리 엔진&lt;br>AI 처리&lt;br>- 렌더링&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>멀티미디어&lt;/td>
&lt;td>- 영상 처리&lt;br>- 음향 처리&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Thread 상태와 생명주기&lt;span class="hx-absolute -hx-mt-20" id="thread-상태와-생명주기">&lt;/span>
&lt;a href="#thread-%ec%83%81%ed%83%9c%ec%99%80-%ec%83%9d%eb%aa%85%ec%a3%bc%ea%b8%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>상태&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>전이 조건&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>NEW&lt;/td>
&lt;td>스레드 생성&lt;/td>
&lt;td>start() 호출 전&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RUNNABLE&lt;/td>
&lt;td>실행 대기/실행 중&lt;/td>
&lt;td>start() 호출 후&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BLOCKED&lt;/td>
&lt;td>동기화 블록 진입 대기&lt;/td>
&lt;td>모니터 락 대기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>WAITING&lt;/td>
&lt;td>대기 상태&lt;/td>
&lt;td>wait() 호출&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TIMED_WAITING&lt;/td>
&lt;td>일정 시간 대기&lt;/td>
&lt;td>sleep() 호출&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TERMINATED&lt;/td>
&lt;td>종료 상태&lt;/td>
&lt;td>실행 완료&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Thread 동기화 메커니즘&lt;span class="hx-absolute -hx-mt-20" id="thread-동기화-메커니즘">&lt;/span>
&lt;a href="#thread-%eb%8f%99%ea%b8%b0%ed%99%94-%eb%a9%94%ec%bb%a4%eb%8b%88%ec%a6%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>동기화 메커니즘 선택 기준&lt;span class="hx-absolute -hx-mt-20" id="동기화-메커니즘-선택-기준">&lt;/span>
&lt;a href="#%eb%8f%99%ea%b8%b0%ed%99%94-%eb%a9%94%ec%bb%a4%eb%8b%88%ec%a6%98-%ec%84%a0%ed%83%9d-%ea%b8%b0%ec%a4%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>상황&lt;/th>
&lt;th>권장 메커니즘&lt;/th>
&lt;th>이유&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>단순한 임계 영역&lt;/td>
&lt;td>synchronized&lt;/td>
&lt;td>- 구현 간단&lt;br>- 자동 락 해제&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>복잡한 락킹 로직&lt;/td>
&lt;td>Lock&lt;/td>
&lt;td>- 더 많은 제어&lt;br>- 타임아웃 지원&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>리소스 풀 관리&lt;/td>
&lt;td>Semaphore&lt;/td>
&lt;td>- 동시 접근 제어&lt;br>- 카운팅 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>작업 완료 대기&lt;/td>
&lt;td>CountDownLatch&lt;/td>
&lt;td>- 간단한 구현&lt;br>- 명확한 의도&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>반복적 동기화&lt;/td>
&lt;td>CyclicBarrier&lt;/td>
&lt;td>- 재사용 가능&lt;br>- 배리어 동기화&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>유형별 종류&lt;span class="hx-absolute -hx-mt-20" id="유형별-종류">&lt;/span>
&lt;a href="#%ec%9c%a0%ed%98%95%eb%b3%84-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;h5>기본 동기화 메커니즘&lt;span class="hx-absolute -hx-mt-20" id="기본-동기화-메커니즘">&lt;/span>
&lt;a href="#%ea%b8%b0%eb%b3%b8-%eb%8f%99%ea%b8%b0%ed%99%94-%eb%a9%94%ec%bb%a4%eb%8b%88%ec%a6%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>메커니즘&lt;/th>
&lt;th>사용 목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>synchronized&lt;/td>
&lt;td>임계 영역 보호&lt;/td>
&lt;td>- 한 번에 하나의 스레드만 접근&lt;br>- 모니터 락 사용&lt;br>- 자동 락 해제&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>volatile&lt;/td>
&lt;td>변수의 가시성 보장&lt;/td>
&lt;td>- 메인 메모리에서 직접 읽고 쓰기&lt;br>- 캐시 사용 안 함&lt;br>- 단일 변수 동기화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Lock&lt;/td>
&lt;td>명시적 락 제어&lt;/td>
&lt;td>- 더 유연한 락 제어&lt;br>try-finally 사용 권장&lt;br>- 다양한 락 구현체 제공&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5>스레드 간 통신 메커니즘&lt;span class="hx-absolute -hx-mt-20" id="스레드-간-통신-메커니즘">&lt;/span>
&lt;a href="#%ec%8a%a4%eb%a0%88%eb%93%9c-%ea%b0%84-%ed%86%b5%ec%8b%a0-%eb%a9%94%ec%bb%a4%eb%8b%88%ec%a6%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>메커니즘&lt;/th>
&lt;th>사용 목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>wait/notify&lt;/td>
&lt;td>스레드 간 신호 전달&lt;/td>
&lt;td>Object 클래스의 메소드&lt;br>synchronized 블록 내에서 사용&lt;br>- 조건 동기화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Condition&lt;/td>
&lt;td>조건부 스레드 제어&lt;/td>
&lt;td>Lock과 함께 사용&lt;br>- 더 정교한 스레드 제어&lt;br>- 다중 조건 지원&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CountDownLatch&lt;/td>
&lt;td>작업 완료 대기&lt;/td>
&lt;td>- 지정된 수의 이벤트 대기&lt;br>- 일회성 사용&lt;br>- 재사용 불가&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5>세마포어와 뮤텍스&lt;span class="hx-absolute -hx-mt-20" id="세마포어와-뮤텍스">&lt;/span>
&lt;a href="#%ec%84%b8%eb%a7%88%ed%8f%ac%ec%96%b4%ec%99%80-%eb%ae%a4%ed%85%8d%ec%8a%a4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>메커니즘&lt;/th>
&lt;th>사용 목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Semaphore&lt;/td>
&lt;td>리소스 접근 제어&lt;/td>
&lt;td>- 카운팅 세마포어&lt;br>- 여러 스레드 동시 접근&lt;br>- 리소스 풀 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Mutex&lt;/td>
&lt;td>상호 배제&lt;/td>
&lt;td>- 이진 세마포어&lt;br>- 한 번에 하나의 스레드만&lt;br>- 소유권 개념&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5>고급 동기화 도구&lt;span class="hx-absolute -hx-mt-20" id="고급-동기화-도구">&lt;/span>
&lt;a href="#%ea%b3%a0%ea%b8%89-%eb%8f%99%ea%b8%b0%ed%99%94-%eb%8f%84%ea%b5%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>메커니즘&lt;/th>
&lt;th>사용 목적&lt;/th>
&lt;th>특징&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CyclicBarrier&lt;/td>
&lt;td>동기 작업 조정&lt;/td>
&lt;td>- 여러 스레드 동기화&lt;br>- 재사용 가능&lt;br>- 배리어 작업 지원&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Exchanger&lt;/td>
&lt;td>데이터 교환&lt;/td>
&lt;td>- 두 스레드 간 데이터 교환&lt;br>- 랑데부 동기화&lt;br>- 양방향 데이터 전송&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Phaser&lt;/td>
&lt;td>단계별 동기화&lt;/td>
&lt;td>- 유연한 동기화&lt;br>- 단계별 진행&lt;br>- 동적 참여자 수&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>