<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Architecture Styles and Patterns on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/architecture-styles-and-patterns/</link>
    <description>Recent content in Architecture Styles and Patterns on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Mon, 23 Jun 2025 02:56:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/architecture-styles-and-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Messaging-Oriented Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/messaging-oriented/</link>
      <pubDate>Mon, 23 Jun 2025 02:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/messaging-oriented/</guid>
      <description>Messaging-Oriented Styles 는 메시지 기반 통신을 중심으로 하는 소프트웨어 아키텍처 스타일로, 분산 시스템에서 컴포넌트 간 비동기 통신과 느슨한 결합을 실현한다. Message-Oriented Middleware (MOM) 를 통해 구현되며, Publish-Subscribe, Request-Reply, Point-to-Point 등의 패턴을 포함하여 확장 가능하고 신뢰성 있는 엔터프라이즈 통합 솔루션을 제공한다.</description>
    </item>
    <item>
      <title>Data-Centric Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/</link>
      <pubDate>Sun, 22 Jun 2025 08:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-centric/</guid>
      <description>Data-Centric Architecture 는 데이터가 시스템 설계와 운영의 중심에 위치하는 아키텍처 스타일로, 데이터의 일관성, 접근성, 관리 효율성을 극대화하여 데이터 기반 의사결정과 신속한 서비스 제공을 지원한다.</description>
    </item>
    <item>
      <title>Data-Flow Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-flow/</link>
      <pubDate>Sun, 22 Jun 2025 08:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/data-flow/</guid>
      <description>Data-Flow Architecture 는 데이터를 일련의 독립적인 변환 모듈을 통해 순차적으로 처리하는 소프트웨어 아키텍처 스타일이다. 입력 데이터가 각 구성요소를 거치면서 점진적으로 변환되어 최종 출력에 도달하는 구조를 갖는다. 재사용성과 모듈성을 극대화하며 컴파일러, ETL 시스템, 스트림 처리 등에 활용된다.</description>
    </item>
    <item>
      <title>Distributed Architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed/</link>
      <pubDate>Sun, 27 Apr 2025 11:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/distributed/</guid>
      <description>Distributed Architecture 는 하나의 시스템을 여러 네트워크 연결 노드에 분산 배포해 처리 성능, 장애 복원력, 확장성을 확보하는 구조이다. 클라우드, 마이크로서비스, P2P, 브로커, 공유 - 낫싱 등 다양한 패턴이 포함되며, 메시징, 이벤트 기반, RPC, API 게이트웨이 등을 통해 모듈 간 통신을 설계한다.</description>
    </item>
    <item>
      <title>Structural</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/</link>
      <pubDate>Sun, 27 Apr 2025 11:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/structural/</guid>
      <description>Structural 아키텍처 스타일은 클래스, 객체, 모듈 간의 관계와 구조를 정의하여 시스템을 조직화하는 설계 접근법이다. 모듈화, 계층화, 재사용성을 통해 복잡성을 낮추고 확장성과 유지보수성을 향상시킨다.</description>
    </item>
    <item>
      <title>Service-oriented architecture</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/service-oriented-architecture/</link>
      <pubDate>Fri, 27 Sep 2024 09:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/architecture-styles/service-oriented-architecture/</guid>
      <description>**Service-Oriented Architecture(SOA)**는 기업의 복잡한 IT 시스템을 **비즈니스 기능 단위의 서비스**로 모듈화하고, 이를 조합해 유연한 애플리케이션을 구축하는 소프트웨어 설계 패턴이다.</description>
    </item>
  </channel>
</rss>
