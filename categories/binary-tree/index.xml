<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Binary Tree on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/binary-tree/</link>
    <description>Recent content in Binary Tree on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.146.4</generator>
    <language>en</language>
    <lastBuildDate>Fri, 06 Dec 2024 11:54:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/binary-tree/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Preorder Traversal</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/preorder-traversal/</link>
      <pubDate>Fri, 06 Dec 2024 09:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/preorder-traversal/</guid>
      <description>전위 순회는 트리를 탐색하는 깊이 우선 탐색(Depth-First Search, DFS)의 한 형태로, 재귀적으로 수행되며, 루트 노드부터 시작하여 왼쪽 가지를 따라 깊이 내려간 후 오른쪽 가지로 이동한다. 전위 순회의 이름에서 &amp;#34;전위(Pre)&amp;#34;는 부모 노드를 자식 노드보다 먼저(before) 방문한다는 의미를 담고 있다.</description>
    </item>
    <item>
      <title>AVL 트리 (AVL tree)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-search-tree/avl-tree/</link>
      <pubDate>Fri, 11 Oct 2024 12:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-search-tree/avl-tree/</guid>
      <description>AVL 트리는 Adelson-Velsky와 Landis가 1962년에 발명한 자체 균형 이진 검색 트리이다.  각 노드에서 왼쪽과 오른쪽 서브트리의 높이 차이가 최대 1인 균형 잡힌 트리 구조를 유지한다.</description>
    </item>
    <item>
      <title>Inorder Traversal</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/inorder-traversal/</link>
      <pubDate>Fri, 06 Dec 2024 09:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/inorder-traversal/</guid>
      <description>왼쪽 서브트리를 먼저 방문한 후 현재 노드를 방문하고 마지막으로 오른쪽 서브트리를 방문하는 이 방법은 정렬된 데이터가 필요한 다양한 문제에 활용된다.</description>
    </item>
    <item>
      <title>Postorder Traversal</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/postorder-traversal/</link>
      <pubDate>Fri, 06 Dec 2024 09:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/postorder-traversal/</guid>
      <description>후위 순회는 자식 노드를 먼저 방문한 후 부모 노드를 방문하는 트리 순회 방법으로, 상향식 처리가 필요한 다양한 문제 해결에 적합하다.</description>
    </item>
    <item>
      <title>Level Order Traversal</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/level-order-traversal/</link>
      <pubDate>Fri, 06 Dec 2024 09:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/level-order-traversal/</guid>
      <description>레벨 순서 순회(Level Order Traversal)는 트리의 각 레벨을 위에서 아래로, 각 레벨 내에서는 왼쪽에서 오른쪽으로 노드를 방문하는 방식이다.</description>
    </item>
    <item>
      <title>레드-블랙 트리 (red-black tree)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-search-tree/red-black-tree/</link>
      <pubDate>Fri, 11 Oct 2024 12:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-search-tree/red-black-tree/</guid>
      <description>Red-black tree는 각 노드에 추가적인 색상 속성(빨간색 또는 검은색)을 가진 자체 균형 이진 검색 트리로, 트리의 균형을 유지하여 효율적인 검색, 삽입, 삭제 연산을 보장한다.</description>
    </item>
    <item>
      <title>Traversal 방법 비교</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/traversal-%EB%B0%A9%EB%B2%95-%EB%B9%84%EA%B5%90/</link>
      <pubDate>Fri, 06 Dec 2024 11:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/traversal/traversal-%EB%B0%A9%EB%B2%95-%EB%B9%84%EA%B5%90/</guid>
      <description>트리 순회(Tree Traversal)는 트리의 노드를 방문하는 방법으로, 트리 구조에서 데이터를 검색하고 처리하는 기본 개념이다.</description>
    </item>
    <item>
      <title>Splay Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-search-tree/splay-tree/</link>
      <pubDate>Fri, 11 Oct 2024 12:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/binary-search-tree/splay-tree/</guid>
      <description>Splay Tree는 자체 균형 이진 검색 트리의 일종으로, 최근에 접근한 노드를 루트로 이동시키는 &amp;#34;splay&amp;#34; 연산을 통해 자가 조정되는 특징을 가진다.</description>
    </item>
    <item>
      <title>힙 (Heap)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/heap/</link>
      <pubDate>Mon, 07 Oct 2024 05:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/tree/binary-tree/heap/</guid>
      <description>부모 노드와 자식 노드 간의 대소 관계가 일정한 규칙을 따르는 자료구조</description>
    </item>
    <item>
      <title>Segment Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/advanced/segment-tree/</link>
      <pubDate>Fri, 11 Oct 2024 12:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/advanced/segment-tree/</guid>
      <description>세그먼트 트리는 배열의 특정 구간에 대한 정보를 빠르게 구할 수 있도록 설계된 이진 트리 기반의 자료구조</description>
    </item>
    <item>
      <title>K-d Tree</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/k-d-tree/</link>
      <pubDate>Fri, 11 Oct 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/data-structures/complex/k-d-tree/</guid>
      <description>K-d Tree는 k차원 공간에서 점들을 효율적으로 저장하고 검색하기 위한 이진 트리 기반의 공간 분할 데이터 구조로, K-d Tree는 k차원 공간을 재귀적으로 분할하여 표현하는 이진 트리이다.</description>
    </item>
  </channel>
</rss>
