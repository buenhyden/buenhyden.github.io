<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Callback on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/callback/</link>
    <description>Recent content in Callback on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 26 Dec 2024 10:17:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/callback/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Callback</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/</link>
      <pubDate>Sun, 06 Oct 2024 08:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/</guid>
      <description>콜백(Callback)은 다른 함수에 인자로 전달되는 함수를 의미한다.</description>
    </item>
    <item>
      <title>Callback Hell</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/callback-hell/</link>
      <pubDate>Wed, 09 Oct 2024 05:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/callback-hell/</guid>
      <description>콜백 지옥(Callback Hell)은 JavaScript 등의 비동기 프로그래밍 환경에서 중첩된 콜백 함수가 과도하게 사용되어 코드의 가독성과 유지보수성을 크게 저하시키는 현상을 의미한다.</description>
    </item>
    <item>
      <title>Currying vs. Partial Application</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/currying-vs-partial-application/</link>
      <pubDate>Thu, 26 Dec 2024 10:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/currying-vs-partial-application/</guid>
      <description>&lt;h2 id=&#34;currying-vs-partial-application&#34;&gt;Currying vs. Partial Application&lt;/h2&gt;
&lt;p&gt;자바스크립트의 함수형 프로그래밍에서 가장 중요한 개념 중 두 가지는 커링(Currying)과 부분 적용(Partial Application)이다. 이 두 기법은 콜백 함수를 다루는 강력한 패턴으로, 코드의 재사용성과 모듈성을 크게 향상시킨다.&lt;/p&gt;
&lt;p&gt;커링과 부분 적용은 자바스크립트의 콜백 함수를 더 효과적으로 다루기 위한 강력한 기법이다.&lt;br&gt;
두 패턴 모두 함수의 재사용성을 높이고 코드를 더 모듈화하는 데 도움이 된다.&lt;/p&gt;
&lt;p&gt;두 기법의 핵심 차이는 인자 처리 방식과 최종 함수의 구조에 있다.&lt;br&gt;
커링은 항상 단일 인자 함수의 체인을 만들고, 부분 적용은 일부 인자를 고정한 새로운 함수를 만든다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Partial Application</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/partial-application/</link>
      <pubDate>Thu, 26 Dec 2024 09:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/partial-application/</guid>
      <description>부분 적용이란 여러 개의 인자를 받는 함수에 일부 인자를 미리 제공하여, 나머지 인자만 받는 새로운 함수를 생성하는 기법이다.</description>
    </item>
    <item>
      <title>Memoization</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/memoization/</link>
      <pubDate>Thu, 26 Dec 2024 07:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/memoization/</guid>
      <description>&lt;h2 id=&#34;memoization&#34;&gt;Memoization&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Debouncing</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/debouncing/</link>
      <pubDate>Thu, 26 Dec 2024 07:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/debouncing/</guid>
      <description>&lt;h2 id=&#34;debouncing&#34;&gt;Debouncing&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Throttling</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/throttling/</link>
      <pubDate>Thu, 26 Dec 2024 07:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/optimization/throttling/</guid>
      <description>&lt;h2 id=&#34;throttling&#34;&gt;Throttling&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Currying</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/currying/</link>
      <pubDate>Thu, 26 Dec 2024 07:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/fundamentals/asynchronous-javascript/callback/currying/</guid>
      <description>&lt;h2 id=&#34;currying&#34;&gt;Currying&lt;/h2&gt;
&lt;p&gt;커링(Currying)은 함수형 프로그래밍에서 유래한 중요한 개념으로, 여러 개의 인자를 받는 함수를 단일 인자를 받는 일련의 함수들로 변환하는 기법이다.&lt;br&gt;
이 기법은 수학자이자 논리학자인 하스켈 커리(Haskell Curry)의 이름을 따서 명명되었다.&lt;br&gt;
커링은 자바스크립트의 함수형 프로그래밍 패러다임에서 특히 유용하며, 함수 합성과 부분 적용을 가능하게 하는 강력한 도구이다.&lt;/p&gt;
&lt;p&gt;커링은 자바스크립트에서 함수형 프로그래밍을 구현하는 데 중요한 기법 중 하나이다.&lt;br&gt;
이 기법은 코드의 재사용성과 모듈성을 높이고, 함수 조합을 용이하게 하며, 복잡한 로직을 더 작고 관리하기 쉬운 단위로 분해하는 데 도움이 된다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
