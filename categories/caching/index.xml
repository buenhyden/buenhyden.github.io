<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Caching on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/caching/</link>
    <description>Recent content in Caching on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.149.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Oct 2024 06:25:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/caching/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>데이터베이스 캐싱 (Database Caching)</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/query-processing/performance-tuning/caching/</link>
      <pubDate>Tue, 22 Oct 2024 06:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/query-processing/performance-tuning/caching/</guid>
      <description>자주 사용되는 데이터를 빠르게 접근할 수 있는 메모리에 임시로 저장하는 기술</description>
    </item>
    <item>
      <title>Replacement Policy</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-systems/computer-architecture/memory-systems/cache-design/replacement-policies/</link>
      <pubDate>Mon, 30 Sep 2024 10:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-systems/computer-architecture/memory-systems/cache-design/replacement-policies/</guid>
      <description>Cache Replacement Policy(캐시 교체 정책)는 캐시 메모리에서 새로운 데이터를 저장하기 위해 기존의 데이터를 교체할 때 어떤 데이터를 제거할지를 결정하는 규칙이다.</description>
    </item>
    <item>
      <title>Cache Coherence</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-systems/computer-architecture/memory-systems/cache-design/cache-coherence/</link>
      <pubDate>Mon, 30 Sep 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/computer-systems/computer-architecture/memory-systems/cache-design/cache-coherence/</guid>
      <description>Cache Coherence(캐시 일관성)는 컴퓨터 시스템에서 여러 프로세서가 각각의 로컬 캐시를 사용하면서 동일한 메모리 주소를 참조할 때, 데이터의 일관성을 유지하기 위한 메커니즘을 의미한다.</description>
    </item>
    <item>
      <title>Cache Strategies</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/data--state-management/cache/caching-strategies/</link>
      <pubDate>Mon, 30 Sep 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/data--state-management/cache/caching-strategies/</guid>
      <description>Cache Strategy(캐시 전략)는 캐시를 효과적으로 활용하여 시스템 성능을 최적화하고 데이터 일관성을 유지하기 위한 방법론이다.</description>
    </item>
    <item>
      <title>Caching Techniques</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/data--state-management/cache/cache-types/caching-techniques/</link>
      <pubDate>Mon, 30 Sep 2024 02:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/data--state-management/cache/cache-types/caching-techniques/</guid>
      <description>캐싱 기술(Caching Techniques)은 데이터 접근 속도를 높이고 시스템 성능을 개선하기 위해 사용되는 다양한 방법들을 말한다.</description>
    </item>
  </channel>
</rss>
