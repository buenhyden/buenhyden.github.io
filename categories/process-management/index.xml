<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Process Management on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/process-management/</link>
    <description>Recent content in Process Management on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.150.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 20 May 2025 14:45:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/process-management/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Processes</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/system-software/operating-systems/process-management/process-concepts/process/</link>
      <pubDate>Tue, 20 May 2025 14:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/system-software/operating-systems/process-management/process-concepts/process/</guid>
      <description>프로세스는 실행 중인 프로그램으로, 운영체제가 CPU·메모리·입출력 등 자원을 할당·관리하는 기본 단위. 생성, 스케줄링, 동기화, 통신, 종료 과정을 거치며 멀티태스킹 환경에서 효율성과 안정성을 보장한다.</description>
    </item>
    <item>
      <title>Thread Management</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/thread-programming/thread-management/</link>
      <pubDate>Mon, 12 May 2025 03:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/thread-programming/thread-management/</guid>
      <description>스레드 관리는 프로세스 내 여러 실행 흐름을 효율적으로 생성, 스케줄링, 동기화, 종료하는 운영체제의 핵심 기능이다. 이를 통해 CPU 자원 활용도를 높이고, 동시성 및 병렬성을 확보할 수 있다. 동기화와 자원 관리가 중요하다.</description>
    </item>
    <item>
      <title>Threads</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/thread-programming/thread/</link>
      <pubDate>Fri, 04 Oct 2024 23:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/thread-programming/thread/</guid>
      <description>스레드는 프로세스 내에서 실행되는 가장 작은 단위로, 자원을 공유하며 병렬성과 동시성을 구현한다. 사용자 수준/커널 수준 스레드로 나뉘며, 경량 스레드(Java Virtual Thread 등)와 같은 최신 모델도 사용된다. 동기화 문제와 성능 오버헤드 고려가 필수다.</description>
    </item>
    <item>
      <title>프로세스 제어 블록(Process Control Block, PCB)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/system-software/operating-systems/process-management/process-concepts/process-control-block/</link>
      <pubDate>Wed, 02 Oct 2024 06:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/system-software/operating-systems/process-management/process-concepts/process-control-block/</guid>
      <description>PCB(Process Control Block)는 커널이 프로세스의 식별자·상태·레지스터·프로그램 카운터·스택 포인터, 스케줄링·메모리·열린 파일·IPC·회계 정보를 보관하는 핵심 자료구조다. 컨텍스트 스위치 때 이 정보를 저장·복원해 실행을 이어가며, 프로세스 테이블의 커널 메모리에 안전하게 유지된다.</description>
    </item>
    <item>
      <title>Context Switching</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/system-software/operating-systems/process-management/process-concepts/context-switch/context-switching/</link>
      <pubDate>Wed, 02 Oct 2024 01:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/system-software/operating-systems/process-management/process-concepts/context-switch/context-switching/</guid>
      <description>Context Switching은 운영 체제에서 매우 중요한 개념으로, 여러 프로세스나 스레드가 단일 CPU 자원을 공유하여 효율적으로 실행될 수 있게 하는 메커니즘으로, CPU가 현재 실행 중인 프로세스나 스레드의 상태를 저장하고, 다른 프로세스나 스레드의 상태를 불러와 실행을 재개하는 과정을 말한다.  이를 통해 여러 작업이 동시에 실행되는 것처럼 보이게 된다.</description>
    </item>
  </channel>
</rss>
