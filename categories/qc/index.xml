<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – QC</title><link>https://buenhyden.github.io/categories/qc/</link><description>Recent content in QC on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 27 Dec 2024 04:10:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/categories/qc/index.xml" rel="self" type="application/rss+xml"/><item><title>Test</title><link>https://buenhyden.github.io/posts/qa/qc/test/</link><pubDate>Wed, 06 Nov 2024 06:14:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/test/</guid><description>
&lt;h2>테스트 (Test)&lt;/h2>&lt;p>소프트웨어 테스트는 &amp;ldquo;주요 이해관계자들에게 시험 대상 제품 또는 서비스의 품질에 관한 정보를 제공하는 조사 과정&amp;quot;으로 정의된다.&lt;/p>
&lt;p>테스트의 주요 목적은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>결함 발견: 프로그램 내의 오류, 버그, 잠재적 문제를 식별하고 수정&lt;/li>
&lt;li>품질 보증: 안정적이고 신뢰성 있는 소프트웨어 제공&lt;/li>
&lt;li>사용자 만족도 향상: 소프트웨어가 기대한 대로 작동하는지 확인&lt;/li>
&lt;/ol>
&lt;h3>테스트의 중요성&lt;/h3>&lt;p>소프트웨어 테스트는 다음과 같은 이유로 중요하다:&lt;/p>
&lt;ol>
&lt;li>비용 절감: 초기에 결함을 발견하고 수정함으로써 개발 비용을 절감&lt;/li>
&lt;li>신뢰성 확보: 안정적이고 예측 가능한 소프트웨어 제공&lt;/li>
&lt;li>고객 만족도 향상: 품질이 보장된 소프트웨어로 사용자 경험 개선&lt;/li>
&lt;/ol>
&lt;h3>소프트웨어 테스트의 7가지 원칙&lt;/h3>&lt;ol>
&lt;li>결함 발견: 테스트의 주요 목적은 결함을 찾는 것&lt;/li>
&lt;li>완벽한 테스트는 불가능: 모든 경우를 테스트하는 것은 현실적으로 불가능&lt;/li>
&lt;li>초기 테스트: 개발 초기 단계에서 테스트를 시작하는 것이 중요&lt;/li>
&lt;li>결함 집중: 일부 모듈에 결함이 집중되는 경향이 있음&lt;/li>
&lt;li>살충제 패러독스: 동일한 테스트를 반복하면 새로운 결함을 발견하기 어려움&lt;/li>
&lt;li>테스트는 상황에 의존적: 소프트웨어의 용도와 환경에 따라 테스트 방법이 달라짐&lt;/li>
&lt;li>오류 부재의 오해: 결함이 없다고 해서 사용자의 요구를 완전히 만족시키는 것은 아님&lt;/li>
&lt;/ol>
&lt;h3>테스트 프로세스&lt;/h3>&lt;p>소프트웨어 테스트 프로세스는 일반적으로 다음 단계를 포함한다:&lt;/p>
&lt;ol>
&lt;li>테스트 계획&lt;/li>
&lt;li>테스트 설계&lt;/li>
&lt;li>테스트 구현&lt;/li>
&lt;li>테스트 실행&lt;/li>
&lt;li>결과 분석&lt;/li>
&lt;li>재테스트 및 회귀 테스트&lt;/li>
&lt;li>종료 및 보고&lt;/li>
&lt;/ol>
&lt;h3>테스트 방법론&lt;/h3>&lt;h4>테스트 주도 개발(TDD, Test-Driven Development)&lt;/h4>&lt;p>테스트를 먼저 작성하고, 이를 통과하는 코드를 개발하는 방식&lt;/p>
&lt;ul>
&lt;li>TDD의 기본 사이클&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>실패하는 테스트 작성&lt;/li>
&lt;li>테스트를 통과하는 최소한의 코드 작성&lt;/li>
&lt;li>코드 리팩토링&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># TDD 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_calculate_total&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 1. 실패하는 테스트 작성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ShoppingCart&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_item&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Product&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_item&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Product&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;banana&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2000&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">cart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">calculate_total&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">3000&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>행위 주도 개발(BDD, Behavior-Driven Development)&lt;/h4>&lt;p>사용자의 행위를 중심으로 테스트를 작성하는 방법&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gherkin" data-lang="gherkin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Feature:&lt;/span>&lt;span class="nf"> 장바구니 계산
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> &lt;/span>&lt;span class="k">Scenario:&lt;/span>&lt;span class="nf"> 상품 두 개 추가
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">&lt;/span>&lt;span class="k"> Given &lt;/span>&lt;span class="nf">장바구니가 비어있음
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> &lt;/span>&lt;span class="k">When &lt;/span>&lt;span class="nf">사과(&lt;/span>&lt;span class="s">1000&lt;/span>&lt;span class="nf">원)를 추가
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> &lt;/span>&lt;span class="k">And &lt;/span>&lt;span class="nf">바나나(&lt;/span>&lt;span class="s">2000&lt;/span>&lt;span class="nf">원)를 추가
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> &lt;/span>&lt;span class="k">Then &lt;/span>&lt;span class="nf">총액은 &lt;/span>&lt;span class="s">3000&lt;/span>&lt;span class="nf">원이어야 함&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>테스트 자동화&lt;/h3>&lt;p>테스트 자동화는 반복적인 테스트를 효율적으로 수행하기 위해 필수적이다.&lt;/p>
&lt;p>주요 테스트 자동화 도구들은 다음과 같다:&lt;/p>
&lt;ul>
&lt;li>Java: JUnit, TestNG&lt;/li>
&lt;li>Python: pytest, unittest&lt;/li>
&lt;li>JavaScript: Jest, Mocha&lt;/li>
&lt;/ul>
&lt;p>자동화된 테스트의 장점:&lt;/p>
&lt;ul>
&lt;li>빠른 피드백 루프 제공&lt;/li>
&lt;li>회귀 테스트 용이&lt;/li>
&lt;li>지속적 통합/배포(CI/CD) 파이프라인에 통합 가능&lt;/li>
&lt;li>테스트 결과의 일관성 보장&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>전문화된 테스팅 (Specialized Testing)</title><link>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/</link><pubDate>Fri, 27 Dec 2024 04:10:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/test/specialized-testing/</guid><description>
&lt;h2>전문화된 테스팅 (Specialized Testing)&lt;/h2>&lt;p>Specialized Testing은 소프트웨어 테스팅의 한 분야로, 특정 영역이나 기능에 초점을 맞춘 심층적인 테스트 방식이다.&lt;br>
이는 일반적인 테스팅 방법으로는 발견하기 어려운 문제점들을 식별하고 해결하는 데 중점을 둔다.&lt;/p>
&lt;h3>Specialized Testing의 주요 특징&lt;/h3>&lt;ol>
&lt;li>특정 영역 집중: 성능, 보안, 호환성 등 특정 측면에 집중한다.&lt;/li>
&lt;li>심층적 분석: 일반 테스트보다 더 깊이 있는 분석을 수행한다.&lt;/li>
&lt;li>전문 지식 활용: 해당 분야의 전문가들이 테스트를 수행한다.&lt;/li>
&lt;/ol>
&lt;h3>Specialized Testing의 종류&lt;/h3>&lt;ol>
&lt;li>성능 테스팅: 부하 테스트, 스트레스 테스트, 확장성 테스트 등을 포함한다.&lt;/li>
&lt;li>보안 테스팅: 취약점 식별 및 보안 위협에 대한 대응을 테스트한다.&lt;/li>
&lt;li>호환성 테스팅: 다양한 환경에서의 소프트웨어 작동을 확인한다.&lt;/li>
&lt;li>모바일 앱 테스팅: 모바일 기기 특성을 고려한 테스트를 수행한다.&lt;/li>
&lt;li>AI/ML 테스팅: 인공지능과 머신러닝 알고리즘의 정확성을 검증한다.&lt;/li>
&lt;li>IoT 테스팅: 사물인터넷 기기와의 연동을 테스트한다.&lt;/li>
&lt;/ol>
&lt;h3>Specialized Testing의 중요성&lt;/h3>&lt;ol>
&lt;li>품질 향상: 특정 영역에 대한 깊이 있는 테스트로 소프트웨어 품질을 크게 개선한다.&lt;/li>
&lt;li>위험 감소: 초기에 문제를 발견하여 출시 후 발생할 수 있는 문제를 예방한다.&lt;/li>
&lt;li>사용자 만족도 증가: 특정 기능의 완성도를 높여 사용자 경험을 개선한다.&lt;/li>
&lt;/ol>
&lt;h3>Specialized Testing을 효과적으로 수행하기 위한 주요 고려사항들&lt;/h3>&lt;ol>
&lt;li>테스트 환경 구성&lt;br>
실제 환경과 유사한 테스트 환경을 구성하여 정확한 결과를 얻을 수 있도록 한다.&lt;/li>
&lt;li>테스트 데이터 준비&lt;br>
다양한 시나리오를 커버할 수 있는 테스트 데이터를 준비한다.&lt;/li>
&lt;li>모니터링 및 측정&lt;br>
테스트 중 시스템의 다양한 지표를 지속적으로 모니터링하고 측정한다.&lt;/li>
&lt;li>결과 분석 및 개선&lt;br>
테스트 결과를 철저히 분석하고, 발견된 문제점에 대한 개선 방안을 도출한다.&lt;/li>
&lt;/ol>
&lt;h3>전문화된 테스팅 (Specialized Testing)의 유형&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>테스트 유형&lt;/th>
&lt;th>목적&lt;/th>
&lt;th>수행 시점&lt;/th>
&lt;th>핵심 지표&lt;/th>
&lt;th>주요 도구&lt;/th>
&lt;th>테스트 범위&lt;/th>
&lt;th>검증 대상&lt;/th>
&lt;th>자동화 수준&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>성능 테스팅&lt;/td>
&lt;td>성능 병목 현상 식별 및 성능 요구사항 충족 확인&lt;/td>
&lt;td>주요 릴리스 전&lt;/td>
&lt;td>응답 시간, 처리량, 오류율&lt;/td>
&lt;td>JMeter, LoadRunner&lt;/td>
&lt;td>다양한 조건에서 애플리케이션의 속도, 응답성, 안정성 테스트&lt;/td>
&lt;td>기능성, 성능, 확장성&lt;/td>
&lt;td>도구에 따라 완전 또는 부분 자동화 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>보안 테스팅&lt;/td>
&lt;td>소프트웨어 애플리케이션의 취약점 및 보안 약점 발견&lt;/td>
&lt;td>개발 중 및 소프트웨어 수명 주기 전반&lt;/td>
&lt;td>취약점 수, 심각도, 오탐지율, 해결 시간&lt;/td>
&lt;td>SAST, DAST, 침투 테스팅 도구&lt;/td>
&lt;td>애플리케이션, 네트워크, 시스템의 취약점 평가&lt;/td>
&lt;td>데이터의 기밀성, 무결성, 가용성&lt;/td>
&lt;td>도구에 따라 완전 또는 부분 자동화 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>호환성 테스팅&lt;/td>
&lt;td>다양한 플랫폼에서 소프트웨어 정상 작동 확인 및 사용자 만족도 향상&lt;/td>
&lt;td>애플리케이션이 안정화된 소프트웨어 테스팅 단계&lt;/td>
&lt;td>다양한 기기에서의 성능 안정성, 기능성, 응답성&lt;/td>
&lt;td>BrowserStack, LambdaTest&lt;/td>
&lt;td>다양한 운영 체제, 브라우저, 하드웨어 구성, 네트워크 조건에서 테스트&lt;/td>
&lt;td>다양한 환경에서의 기능성, 성능, 사용자 경험&lt;/td>
&lt;td>요구사항에 따라 수동 및 자동화 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용성 테스팅&lt;/td>
&lt;td>사용성 문제 식별 및 제품의 효과성, 효율성, 만족도 평가&lt;/td>
&lt;td>제품 수명 주기의 다양한 단계(초기 개발 및 출시 전 포함)&lt;/td>
&lt;td>성공률, 작업 소요 시간, 오류율, 사용자 만족도&lt;/td>
&lt;td>Maze, UserTesting&lt;/td>
&lt;td>UI 및 전반적인 사용자 경험 평가&lt;/td>
&lt;td>기능성 및 사용자 만족도&lt;/td>
&lt;td>상황에 따라 완전 자동화 또는 수동 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>회귀 테스팅&lt;/td>
&lt;td>의도치 않은 결함 탐지, 안정성 보장, 위험 감소, 지속적 테스팅 촉진&lt;/td>
&lt;td>소프트웨어 개발 수명 주기 전반(특히 코드 변경 또는 버그 수정 후)&lt;/td>
&lt;td>테스트 실행 시간, 테스트 커버리지, 결함 탐지율&lt;/td>
&lt;td>Selenium, Katalon, Tricentis Testim&lt;/td>
&lt;td>기존 기능 검증 및 새로운 기능 테스트&lt;/td>
&lt;td>핵심 기능이 예상대로 작동하는지 확인&lt;/td>
&lt;td>완전 자동화, 부분 자동화 또는 수동 가능&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>System Test vs End-to-End Test</title><link>https://buenhyden.github.io/til/2024/12/system-test-vs-end-to-end-test/</link><pubDate>Fri, 27 Dec 2024 02:11:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/12/system-test-vs-end-to-end-test/</guid><description>
&lt;h2>System Test Vs End-to-End Test&lt;/h2>&lt;p>System Testing과 End-to-End Testing은 소프트웨어 테스팅 과정에서 사용되는 두 가지 중요한 테스트 방법이다.
이 두 방법은 소프트웨어의 품질을 보장하기 위해 사용되지만, 그 범위와 목적에 차이가 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>비교 항목&lt;/th>
&lt;th>System Test&lt;/th>
&lt;th>End-to-End Test&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>전체 시스템이 요구사항 명세서에 따라 정상적으로 동작하는지 검증하는 테스트&lt;/td>
&lt;td>실제 사용자의 시나리오에 따라 처음부터 끝까지의 전체 비즈니스 프로세스를 검증하는 테스트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 범위&lt;/td>
&lt;td>시스템의 기능적/비기능적 요구사항 전체&lt;/td>
&lt;td>사용자 관점에서의 전체 비즈니스 프로세스 흐름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>수행 시점&lt;/td>
&lt;td>통합 테스트 완료 후, 인수 테스트 전&lt;/td>
&lt;td>모든 하위 단계 테스트 완료 후 최종 단계&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 환경&lt;/td>
&lt;td>테스트 환경 (실제 환경과 유사하게 구성)&lt;/td>
&lt;td>실제 운영 환경과 동일한 환경&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 주체&lt;/td>
&lt;td>QA 팀, 테스트 엔지니어&lt;/td>
&lt;td>QA 팀, 비즈니스 분석가, 때로는 실제 최종 사용자&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>검증 대상&lt;/td>
&lt;td>시스템의 모든 기능, 성능, 보안 등&lt;/td>
&lt;td>실제 사용자의 업무 흐름과 시나리오&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 데이터&lt;/td>
&lt;td>테스트용 데이터&lt;/td>
&lt;td>실제 운영 데이터와 유사한 데이터&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 관점&lt;/td>
&lt;td>기술적 관점과 비즈니스 관점 모두 포함&lt;/td>
&lt;td>순수하게 비즈니스 관점, 사용자 경험 중심&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자동화 수준&lt;/td>
&lt;td>중간~높음&lt;/td>
&lt;td>낮음~중간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 케이스 작성 기준&lt;/td>
&lt;td>요구사항 명세서 기반&lt;/td>
&lt;td>사용자 시나리오 기반&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>결함 발견 초점&lt;/td>
&lt;td>시스템 내부의 기술적 결함&lt;/td>
&lt;td>비즈니스 프로세스 상의 결함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 비용&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실행 시간&lt;/td>
&lt;td>비교적 짧음&lt;/td>
&lt;td>길음 (전체 프로세스 수행)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>유지보수 복잡도&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 준비 사항&lt;/td>
&lt;td>테스트 환경, 테스트 데이터, 테스트 케이스&lt;/td>
&lt;td>전체 시스템 구성, 외부 시스템 연동, 실제 데이터&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 목적&lt;/td>
&lt;td>시스템의 완전성과 정확성 검증&lt;/td>
&lt;td>비즈니스 프로세스의 정상 작동 검증&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>피드백 대상&lt;/td>
&lt;td>개발팀, QA 팀&lt;/td>
&lt;td>비즈니스 팀, 최종 사용자&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>커버리지 중점&lt;/td>
&lt;td>기능 커버리지&lt;/td>
&lt;td>비즈니스 프로세스 커버리지&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 차이점들은 각각의 테스트가 서로 다른 목적과 관점에서 수행되면서도 상호 보완적인 역할을 한다는 것을 보여준다.&lt;br>
System Test가 시스템의 기술적인 완성도를 검증하는 데 중점을 둔다면, End-to-End Test는 실제 사용자의 관점에서 전체 비즈니스 프로세스가 정상적으로 작동하는지를 검증하는 데 초점을 맞춘다.&lt;/p>
&lt;p>두 테스트 모두 소프트웨어의 품질을 보장하는 데 중요한 역할을 하며, 프로젝트의 특성과 요구사항에 따라 적절한 비중으로 수행되어야 한다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Security Vulnerability Scanning</title><link>https://buenhyden.github.io/posts/qa/qc/technical-verification/security-vulnerability-scanning/</link><pubDate>Tue, 17 Dec 2024 16:11:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/technical-verification/security-vulnerability-scanning/</guid><description>
&lt;h2>보안 취약점 스캔 (Security Vulnerability Scanning)&lt;/h2>&lt;p>시스템의 모든 진입점과 약점을 체계적으로 검사하는 과정이다.&lt;br>
주로 자동화된 도구를 사용하여 알려진 취약점 패턴을 검사하고, 잠재적인 보안 위험을 식별합니다.&lt;/p>
&lt;h3>주요 목적&lt;/h3>&lt;ul>
&lt;li>잠재적인 보안 취약점 식별&lt;/li>
&lt;li>데이터 유출 및 사이버 공격 위험 감소&lt;/li>
&lt;li>규정 준수 요구사항 충족&lt;/li>
&lt;li>전반적인 보안 태세 강화&lt;/li>
&lt;/ul>
&lt;h3>작동 방식&lt;/h3>&lt;ol>
&lt;li>대상 식별: 스캔할 시스템, 네트워크, 애플리케이션을 정의&lt;/li>
&lt;li>스캔 실행: 자동화된 도구를 사용하여 취약점 검색&lt;/li>
&lt;li>데이터 수집 및 분석: 발견된 취약점에 대한 정보 수집 및 분석&lt;/li>
&lt;li>보고서 생성: 식별된 취약점과 심각도 수준을 포함한 상세 보고서 작성&lt;/li>
&lt;li>결과 평가 및 조치: 우선순위에 따라 취약점 해결 방안 수립&lt;/li>
&lt;/ol>
&lt;h3>주요 스캔 유형&lt;/h3>&lt;ol>
&lt;li>네트워크 취약점 스캔: 방화벽, 라우터 등 네트워크 인프라의 취약점 검사&lt;/li>
&lt;li>웹 애플리케이션 취약점 스캔: SQL 인젝션, XSS 등 웹 관련 취약점 탐지&lt;/li>
&lt;li>데이터베이스 취약점 스캔: 데이터베이스 시스템의 보안 취약점 평가&lt;/li>
&lt;li>호스트 취약점 스캔: 개별 서버나 워크스테이션의 OS 수준 취약점 검사&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;/h3>&lt;ul>
&lt;li>조기 취약점 발견으로 비용 절감&lt;/li>
&lt;li>자동화를 통한 효율적인 보안 관리&lt;/li>
&lt;li>규정 준수 입증 용이&lt;/li>
&lt;li>지속적인 보안 상태 모니터링 가능&lt;/li>
&lt;/ul>
&lt;h3>주의사항&lt;/h3>&lt;ul>
&lt;li>거짓 양성(false positive) 결과 발생 가능성&lt;/li>
&lt;li>모든 취약점을 발견할 수 없음&lt;/li>
&lt;li>스캔 자체가 시스템에 부하를 줄 수 있음&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Peer Review</title><link>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/</link><pubDate>Sat, 14 Dec 2024 15:03:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/</guid><description>
&lt;h2>Peer Review&lt;/h2>&lt;p>Peer Review는 소프트웨어 개발 과정에서 중요한 품질 보증 활동으로, 동료 개발자들이 서로의 코드나 문서를 검토하여 오류를 찾고 개선점을 제시하는 과정이다.&lt;/p>
&lt;p>코드 리뷰가 중요한 이유는 여러 가지가 있다.&lt;/p>
&lt;ol>
&lt;li>버그나 보안 취약점을 조기에 발견할 수 있다.&lt;/li>
&lt;li>코드의 일관성과 유지보수성을 높일 수 있다.&lt;/li>
&lt;li>팀 전체의 기술력 향상에 도움이 된다. 한 명의 실수나 실수를 하기 쉬운 부분을 여러 사람이 검토함으로써, 더 높은 품질의 코드를 만들 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>Peer Review의 목적&lt;/h3>&lt;ol>
&lt;li>오류 가능성 발견 및 해결&lt;/li>
&lt;li>소프트웨어 품질 향상&lt;/li>
&lt;li>개발자 스킬 향상&lt;/li>
&lt;li>팀 내 지식 및 경험 공유&lt;/li>
&lt;/ol>
&lt;h3>Peer Review의 장점&lt;/h3>&lt;ol>
&lt;li>개발 초기 단계에서 실수 발견 및 수정 가능&lt;/li>
&lt;li>전체적인 코드 품질 향상&lt;/li>
&lt;li>팀 내 상호 신뢰 및 동기 부여 증진&lt;/li>
&lt;li>가독성 높은 코드 작성 촉진&lt;/li>
&lt;li>개선된 설계 발견 기회&lt;/li>
&lt;/ol>
&lt;h3>Peer Review 프로세스&lt;/h3>&lt;p>Peer Review는 일반적으로 다음과 같은 단계로 진행된다:&lt;/p>
&lt;ol>
&lt;li>계획 (Planning)&lt;/li>
&lt;li>사전 설명회 (Overview)&lt;/li>
&lt;li>개별 검토 (Preparation)&lt;/li>
&lt;li>Review 미팅 (Meeting)&lt;/li>
&lt;li>재작업 (Rework)&lt;/li>
&lt;li>후속 처리 (Follow-up)&lt;/li>
&lt;/ol>
&lt;h3>Peer Review 참여자 역할&lt;/h3>&lt;ol>
&lt;li>관리자: 전체 프로세스 관리&lt;/li>
&lt;li>중재자: 리뷰 미팅 진행&lt;/li>
&lt;li>작성자: 검토 대상 코드/문서 작성자&lt;/li>
&lt;li>검토자: 실제 리뷰 수행&lt;/li>
&lt;li>기록자: 리뷰 결과 기록&lt;/li>
&lt;li>발표자: 리뷰 대상 설명&lt;/li>
&lt;/ol>
&lt;h3>Peer Review 성공을 위한 요소&lt;/h3>&lt;ol>
&lt;li>회사 차원의 정책적 지원&lt;/li>
&lt;li>개발 일정에 Peer Review 시간 포함&lt;/li>
&lt;li>동료 간 수평적 관계 유지&lt;/li>
&lt;li>자주 짧게 진행하는 리뷰 문화 형성&lt;/li>
&lt;li>리뷰어의 시간을 존중하는 태도&lt;/li>
&lt;li>건설적인 피드백 제공 및 수용&lt;/li>
&lt;/ol>
&lt;h3>Peer Review 시 주의사항&lt;/h3>&lt;ol>
&lt;li>리뷰 대상은 200 LOC 미만으로 유지, 최대 400 LOC를 넘지 않도록 함&lt;/li>
&lt;li>리뷰 시간은 60분 미만으로 유지&lt;/li>
&lt;li>개인 비난이나 공격적인 질문 피하기&lt;/li>
&lt;li>칭찬과 긍정적 피드백 포함하기&lt;/li>
&lt;li>코드 품질 향상에 집중하기&lt;/li>
&lt;/ol>
&lt;h3>Peer Review의 한계&lt;/h3>&lt;ol>
&lt;li>시간과 리소스 소요&lt;/li>
&lt;li>리뷰를 거쳐도 일부 결함을 놓칠 수 있음&lt;/li>
&lt;li>팀 문화와 개인의 태도에 따라 효과성이 달라질 수 있음&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>성능 프로파일링 (Performance Profiling)</title><link>https://buenhyden.github.io/posts/qa/qc/technical-verification/performance-profiling/</link><pubDate>Tue, 03 Dec 2024 16:10:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/technical-verification/performance-profiling/</guid><description>
&lt;h2>성능 프로파일링 (Performance Profiling)&lt;/h2>&lt;p>성능 프로파일링(Performance Profiling)은 소프트웨어의 실행 동작을 분석하여 성능을 측정하고 개선하는 기술이다.&lt;/p>
&lt;p>성능 프로파일링은 소프트웨어 개발 과정에서 중요한 품질 관리 활동으로, 초기 단계부터 지속적으로 수행하여 효율적이고 최적화된 소프트웨어를 개발하는 데 도움을 준다.&lt;/p>
&lt;h3>정의와 목적&lt;/h3>&lt;p>성능 프로파일링은 소프트웨어의 실행 시 동작과 리소스 사용을 분석하는 과정이다.&lt;/p>
&lt;p>주요 목적은 다음과 같다:&lt;/p>
&lt;ul>
&lt;li>코드의 병목 지점 식별&lt;/li>
&lt;li>리소스 사용량 분석 (CPU 시간, 메모리 사용 등)&lt;/li>
&lt;li>실행 시간이 긴 함수나 코드 섹션 파악&lt;/li>
&lt;li>성능 최적화를 위한 개선 지점 도출&lt;/li>
&lt;/ul>
&lt;h3>프로파일링 단계&lt;/h3>&lt;ol>
&lt;li>계획: 분석 대상과 목표 설정&lt;/li>
&lt;li>데이터 수집: 실행 중 성능 데이터 수집&lt;/li>
&lt;li>분석: 수집된 데이터 분석 및 병목 지점 식별&lt;/li>
&lt;li>최적화: 분석 결과를 바탕으로 코드 개선&lt;/li>
&lt;li>검증: 개선 효과 확인&lt;/li>
&lt;/ol>
&lt;h3>주요 프로파일링 유형&lt;/h3>&lt;ol>
&lt;li>CPU 프로파일링: 함수별 CPU 사용 시간 측정&lt;/li>
&lt;li>메모리 프로파일링: 메모리 할당 및 해제 패턴 분석&lt;/li>
&lt;li>I/O 프로파일링: 디스크, 네트워크 등 I/O 작업 분석&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;/h3>&lt;ul>
&lt;li>코드 품질 향상&lt;/li>
&lt;li>소프트웨어 효율성 증대&lt;/li>
&lt;li>리소스 할당 최적화&lt;/li>
&lt;li>사용자 경험 개선&lt;/li>
&lt;li>확장성 향상&lt;/li>
&lt;/ul>
&lt;h3>도구&lt;/h3>&lt;p>다양한 성능 프로파일링 도구가 있으며, 대표적인 것들은 다음과 같다:&lt;/p>
&lt;ul>
&lt;li>perf&lt;/li>
&lt;li>gprof&lt;/li>
&lt;li>Valgrind&lt;/li>
&lt;li>Visual Studio Profiler&lt;/li>
&lt;li>Java Flight Recorder&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>기본 테스팅 (Fundamental Testing)</title><link>https://buenhyden.github.io/posts/qa/qc/test/fundamental-testing/</link><pubDate>Fri, 29 Nov 2024 04:05:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/test/fundamental-testing/</guid><description>
&lt;h2>기본 테스팅 (Fundamental Testing)&lt;/h2>&lt;p>Fundamental testing은 소프트웨어 테스팅의 기본적인 프로세스와 원칙을 의미한다.&lt;br>
이는 소프트웨어의 품질을 보장하기 위한 체계적인 접근 방식을 제공한다.&lt;/p>
&lt;p>Fundamental testing process는 다음과 같은 주요 단계로 구성된다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>계획 및 통제 (Planning and Control)&lt;/p>
&lt;ul>
&lt;li>테스트의 범위, 목표, 위험을 결정한다.&lt;/li>
&lt;li>필요한 리소스를 식별하고 일정을 수립한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>분석 및 설계 (Analysis and Design)&lt;/p>
&lt;ul>
&lt;li>테스트 조건을 식별한다.&lt;/li>
&lt;li>테스트 케이스를 설계한다.&lt;/li>
&lt;li>테스트 환경을 준비한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>구현 및 실행 (Implementation and Execution)&lt;/p>
&lt;ul>
&lt;li>테스트 케이스를 우선순위화하고 실행한다.&lt;/li>
&lt;li>결과를 기록하고 결함을 보고한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>종료 기준 평가 및 보고 (Evaluating Exit Criteria and Reporting)&lt;/p>
&lt;ul>
&lt;li>테스트 목표 달성 여부를 평가한다.&lt;/li>
&lt;li>결과를 이해관계자에게 보고한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>테스트 종료 활동 (Test Closure Activities)&lt;/p>
&lt;ul>
&lt;li>테스트 자산을 문서화하고 보관한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>이러한 프로세스는 소프트웨어 개발 주기 전반에 걸쳐 반복적으로 적용되며, 각 단계는 소프트웨어의 품질을 향상시키는 데 중요한 역할을 한다.&lt;/p>
&lt;h3>Fundamental Testing의 중요한 원칙들&lt;/h3>&lt;ol>
&lt;li>
&lt;p>조기 테스팅 (Early Testing)&lt;br>
가능한 한 일찍 테스트를 시작하여 문제를 조기에 발견하고 수정 비용을 최소화한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>철저한 테스팅 (Exhaustive Testing)&lt;br>
모든 가능한 경우를 테스트하는 것은 불가능하므로, 위험 기반으로 중요한 케이스를 선별하여 테스트한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>테스트 케이스 그룹핑&lt;br>
연관된 테스트 케이스들을 논리적으로 그룹화하여 효율적으로 관리한다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PaymentSystemTests&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">test_valid_payment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 정상적인 결제 테스트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">test_insufficient_funds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 잔액 부족 상황 테스트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">test_network_failure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 네트워크 오류 상황 테스트&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">pass&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>독립적인 테스팅&lt;br>
각 테스트는 다른 테스트의 결과에 영향을 받지 않도록 독립적으로 설계된다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>핵심 구성 요소 비교&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>비교 항목&lt;/th>
&lt;th>Unit Test&lt;/th>
&lt;th>Integration Test&lt;/th>
&lt;th>System Test&lt;/th>
&lt;th>Acceptance Test&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>개별 코드 단위(함수, 메서드, 클래스 등)의 동작을 검증하는 테스트&lt;/td>
&lt;td>여러 모듈이나 컴포넌트 간의 상호작용을 검증하는 테스트&lt;/td>
&lt;td>전체 시스템의 end-to-end 동작을 검증하는 테스트&lt;/td>
&lt;td>사용자 관점에서 시스템이 요구사항을 충족하는지 검증하는 테스트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 범위&lt;/td>
&lt;td>가장 작은 단위 (단일 함수/모듈)&lt;/td>
&lt;td>여러 모듈의 결합&lt;/td>
&lt;td>전체 시스템&lt;/td>
&lt;td>전체 시스템의 비즈니스 요구사항&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>수행 시점&lt;/td>
&lt;td>개발 단계에서 즉시&lt;/td>
&lt;td>모듈 개발 완료 후&lt;/td>
&lt;td>통합 테스트 완료 후&lt;/td>
&lt;td>시스템 테스트 완료 후&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 주체&lt;/td>
&lt;td>개발자&lt;/td>
&lt;td>개발자/테스터&lt;/td>
&lt;td>QA 팀&lt;/td>
&lt;td>최종 사용자/고객&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 환경&lt;/td>
&lt;td>개발 환경&lt;/td>
&lt;td>통합 테스트 환경&lt;/td>
&lt;td>테스트 환경&lt;/td>
&lt;td>실제 운영 환경과 유사한 환경&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>기술 지식 요구&lt;/td>
&lt;td>높음 (코드 레벨)&lt;/td>
&lt;td>중간 (인터페이스 수준)&lt;/td>
&lt;td>낮음 (시스템 수준)&lt;/td>
&lt;td>매우 낮음 (사용자 수준)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자동화 정도&lt;/td>
&lt;td>매우 높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 목적&lt;/td>
&lt;td>코드의 정확성 검증&lt;/td>
&lt;td>컴포넌트 간 통신 검증&lt;/td>
&lt;td>전체 시스템 기능 검증&lt;/td>
&lt;td>비즈니스 요구사항 충족 검증&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>피드백 속도&lt;/td>
&lt;td>즉각적&lt;/td>
&lt;td>빠른 편&lt;/td>
&lt;td>느린 편&lt;/td>
&lt;td>매우 느림&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 비용&lt;/td>
&lt;td>매우 낮음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>매우 높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 데이터&lt;/td>
&lt;td>단순한 테스트 데이터&lt;/td>
&lt;td>통합 테스트용 데이터&lt;/td>
&lt;td>실제와 유사한 데이터&lt;/td>
&lt;td>실제 운영 데이터&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실행 빈도&lt;/td>
&lt;td>매우 자주 (코드 변경시마다)&lt;/td>
&lt;td>자주 (기능 통합시)&lt;/td>
&lt;td>가끔 (주요 릴리즈 전)&lt;/td>
&lt;td>드물게 (최종 승인 전)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>오류 발견 시점&lt;/td>
&lt;td>매우 이른 시점&lt;/td>
&lt;td>이른 시점&lt;/td>
&lt;td>늦은 시점&lt;/td>
&lt;td>매우 늦은 시점&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>수정 비용&lt;/td>
&lt;td>매우 낮음&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>매우 높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 도구 예시&lt;/td>
&lt;td>JUnit, NUnit&lt;/td>
&lt;td>Selenium, Postman&lt;/td>
&lt;td>TestComplete, SoapUI&lt;/td>
&lt;td>Manual Testing Tools&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>추가적인 특징들:&lt;/p>
&lt;ol>
&lt;li>테스트 의존성:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Unit Test: 독립적으로 실행&lt;/li>
&lt;li>Integration Test: 다른 모듈에 의존&lt;/li>
&lt;li>System Test: 전체 시스템에 의존&lt;/li>
&lt;li>Acceptance Test: 전체 시스템과 비즈니스 프로세스에 의존&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>테스트 시나리오 복잡도:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Unit Test: 단순한 시나리오&lt;/li>
&lt;li>Integration Test: 중간 수준의 복잡도&lt;/li>
&lt;li>System Test: 복잡한 시나리오&lt;/li>
&lt;li>Acceptance Test: 실제 사용 시나리오&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>유지보수 용이성:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Unit Test: 매우 쉬움&lt;/li>
&lt;li>Integration Test: 중간&lt;/li>
&lt;li>System Test: 어려움&lt;/li>
&lt;li>Acceptance Test: 매우 어려움&lt;/li>
&lt;/ul>
&lt;p>이러한 테스트들은 서로 보완적인 관계에 있으며, 품질 높은 소프트웨어를 만들기 위해서는 모든 단계의 테스트가 적절히 수행되어야 한다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Validation and Verification</title><link>https://buenhyden.github.io/til/2024/11/validation-and-verification/</link><pubDate>Thu, 28 Nov 2024 08:03:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/11/validation-and-verification/</guid><description>
&lt;h2>Validation and Verification&lt;/h2>&lt;p>소프트웨어 테스팅에서 Validation과 Verification은 서로 다른 관점과 목적을 가지고 있다.&lt;br>
Verification은 &amp;ldquo;제품을 올바르게 만들고 있는가?&amp;ldquo;를 확인하는 과정이고, Validation은 &amp;ldquo;올바른 제품을 만들고 있는가?&amp;ldquo;를 확인하는 과정이다.&lt;br>
이러한 근본적인 차이는 테스트 방법과 접근 방식에 큰 영향을 미친다.&lt;/p>
&lt;h3>Verification&lt;/h3>&lt;p>Verification은 &lt;strong>&amp;ldquo;우리가 제품을 올바르게 만들고 있는가?&amp;rdquo;&lt;/strong> 라는 질문에 답하는 프로세스로, 개발 과정 중에 제품이 명세된 요구사항과 설계 문서에 따라 정확하게 구현되고 있는지를 검증한다.&lt;/p>
&lt;p>개발자와 테스터가 수행하며, 코드 레벨에서의 정확성과 기술적 완성도를 중요시한다.&lt;br>
예를 들어, 특정 함수가 입력값에 대해 정확한 출력값을 반환하는지, 데이터베이스 쿼리가 예상대로 작동하는지 등을 확인한다.&lt;/p>
&lt;h3>Validation&lt;/h3>&lt;p>Validation은 &lt;strong>&amp;ldquo;우리가 올바른 제품을 만들고 있는가?&amp;rdquo;&lt;/strong> 라는 질문에 답하는 프로세스로, 개발된 제품이 실제 사용자의 요구사항과 기대를 충족시키는지 확인하는 과정이다.&lt;/p>
&lt;p>사용자 관점에서의 테스트가 주를 이루며, 실제 운영 환경에서의 적합성과 사용성을 중요시한다.&lt;br>
예를 들어, 사용자가 웹사이트에서 원하는 정보를 쉽게 찾을 수 있는지, 모바일 앱의 인터페이스가 직관적인지 등을 확인한다.&lt;/p>
&lt;h3>프로세스와 방법론의 차이&lt;/h3>&lt;p>Verification은 주로 정적 테스팅 방법을 사용한다.&lt;br>
코드 리뷰, 문서 검토, 정적 분석 등이 여기에 해당한다.&lt;br>
Validation은 동적 테스팅 방법을 주로 사용하며, 실제 시스템을 실행하면서 테스트를 수행한다.&lt;br>
사용자 시나리오 테스트, 성능 테스트, 사용성 테스트 등이 이에 해당한다.&lt;/p>
&lt;h3>품질 보증에서의 역할&lt;/h3>&lt;p>두 테스트 방식은 상호 보완적인 관계에 있다.&lt;br>
Verification이 제품의 기술적 완성도를 보장한다면, Validation은 제품의 실용적 가치를 보장한다.&lt;br>
따라서 효과적인 품질 보증을 위해서는 두 가지 접근 방식을 모두 적절히 활용해야 한다.&lt;/p>
&lt;h3>Validation and Verification&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>비교 기준&lt;/th>
&lt;th>Verification (검증)&lt;/th>
&lt;th>Validation (확인)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>제품을 올바르게 만들고 있는지 검증 (Building the product right)&lt;/td>
&lt;td>올바른 제품을 만들고 있는지 확인 (Building the right product)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>목적&lt;/td>
&lt;td>개발 중인 제품이 명세와 표준을 준수하는지 확인&lt;/td>
&lt;td>개발된 제품이 실제 사용자의 요구사항을 충족하는지 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>수행 시점&lt;/td>
&lt;td>개발 단계에서 지속적으로 수행&lt;/td>
&lt;td>개발 후반부나 완료 단계에서 수행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>수행 주체&lt;/td>
&lt;td>개발팀, QA팀, 테스트 엔지니어&lt;/td>
&lt;td>최종 사용자, 고객, QA팀&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>검증 대상&lt;/td>
&lt;td>코드, 문서, 설계 명세, 기술 표준 준수 여부&lt;/td>
&lt;td>사용자 요구사항, 비즈니스 목표 달성 여부&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 활동&lt;/td>
&lt;td>- 코드 리뷰&lt;br>- 정적 분석&lt;br>- 단위 테스트&lt;br>- 통합 테스트&lt;br>- 기술 명세 검토&lt;/td>
&lt;td>- 시스템 테스트&lt;br>- 인수 테스트&lt;br>- 베타 테스트&lt;br>- 사용성 테스트&lt;br>- 성능 테스트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>테스트 방식&lt;/td>
&lt;td>- 화이트박스 테스팅&lt;br>- 정적 테스팅&lt;br>- 구조 기반 테스팅&lt;/td>
&lt;td>- 블랙박스 테스팅&lt;br>- 동적 테스팅&lt;br>- 행위 기반 테스팅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>평가 기준&lt;/td>
&lt;td>- 코딩 표준 준수&lt;br>- 기술 명세 충족&lt;br>- 설계 요구사항 만족&lt;/td>
&lt;td>- 사용자 요구사항 충족&lt;br>- 비즈니스 목표 달성&lt;br>- 실제 환경에서의 적합성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 산출물&lt;/td>
&lt;td>- 코드 리뷰 보고서&lt;br>- 테스트 결과 문서&lt;br>- 정적 분석 보고서&lt;br>- 기술 검토 문서&lt;/td>
&lt;td>- 사용자 인수 테스트 보고서&lt;br>- 시스템 테스트 결과&lt;br>- 성능 테스트 보고서&lt;br>- 베타 테스트 피드백&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>오류 발견 시점&lt;/td>
&lt;td>개발 초기 단계에서 발견 가능&lt;/td>
&lt;td>개발 후반부나 실제 사용 단계에서 발견&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>비용 영향&lt;/td>
&lt;td>초기에 문제 발견으로 수정 비용 최소화&lt;/td>
&lt;td>후반부 발견으로 수정 비용이 상대적으로 높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>적용 범위&lt;/td>
&lt;td>개별 컴포넌트나 모듈 수준의 검증&lt;/td>
&lt;td>전체 시스템 수준의 검증&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자동화 가능성&lt;/td>
&lt;td>높은 자동화 가능성 (단위 테스트, 정적 분석 등)&lt;/td>
&lt;td>부분적 자동화 가능 (일부 시스템 테스트)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>품질 관점&lt;/td>
&lt;td>내부 품질 (기술적 완성도) 중심&lt;/td>
&lt;td>외부 품질 (사용자 만족도) 중심&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>리스크 관리&lt;/td>
&lt;td>기술적 리스크 감소에 중점&lt;/td>
&lt;td>비즈니스 리스크 감소에 중점&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>정적 코드 분석 (Static Code analysis)</title><link>https://buenhyden.github.io/posts/qa/qc/technical-verification/static-code-analysis/</link><pubDate>Thu, 28 Nov 2024 06:06:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/technical-verification/static-code-analysis/</guid><description>
&lt;h2>정적 코드 분석 (Static Code analysis)&lt;/h2>&lt;p>정적 코드 분석은 프로그램을 실행하지 않고 소스 코드를 분석하여 잠재적인 결함, 취약점, 코딩 표준 위반 등을 찾아내는 기술이다.&lt;br>
이는 마치 건축가가 건물을 짓기 전에 설계도를 검토하는 것과 유사하다.&lt;br>
코드의 품질과 안정성을 조기에 확보할 수 있다는 점에서 매우 중요한 기술이다.&lt;/p>
&lt;h3>특징&lt;/h3>&lt;ol>
&lt;li>실행 없이 분석: 프로그램을 실행하지 않고 소스 코드만을 검사한다.&lt;/li>
&lt;li>자동화: 대부분의 정적 분석 도구는 자동화되어 있어 빠른 분석이 가능하다.&lt;/li>
&lt;li>조기 발견: 개발 초기 단계에서 문제점을 식별할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>분석 기법&lt;/h3>&lt;p>정적 코드 분석에는 다양한 기법이 사용된다:&lt;/p>
&lt;ul>
&lt;li>데이터 흐름 분석&lt;/li>
&lt;li>제어 흐름 분석&lt;/li>
&lt;li>어휘 분석&lt;/li>
&lt;li>구문 분석&lt;/li>
&lt;li>의미 분석&lt;/li>
&lt;/ul>
&lt;h3>정적 코드 분석의 주요 검사 영역&lt;/h3>&lt;ol>
&lt;li>
&lt;p>구문 오류 및 안티 패턴 검사&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 잠재적 문제가 있는 코드 예시&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">ErrorProne&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">riskyMethod&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// null 검사 없이 객체 사용 - 정적 분석기가 경고&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">getStringFromSomewhere&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Potential NPE&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 리소스 누수 가능성 - 정적 분석기가 감지&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">FileInputStream&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fis&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">FileInputStream&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;file.txt&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// try-with-resources 사용 권장&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>코딩 표준 준수 여부&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 코딩 표준 위반 예시&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">StandardViolation&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 변수명 규칙 위반 - 정적 분석기가 경고&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 의미 없는 변수명&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 메서드 길이 초과 - 정적 분석기가 경고&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">veryLongMethod&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 100줄 이상의 코드&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>보안 취약점 분석&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 보안 취약점이 있는 코드 예시&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">SecurityIssue&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">processUserInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// SQL 인젝션 취약점 - 정적 분석기가 경고&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;SELECT * FROM users WHERE id = &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// XSS 취약점 - 정적 분석기가 경고&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getWriter&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&amp;lt;div&amp;gt;&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;&amp;lt;/div&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>정적 분석 도구의 주요 기능&lt;/h3>&lt;ol>
&lt;li>
&lt;p>코드 메트릭스 측정&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">MetricsExample&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 복잡도 측정&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">complexMethod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 중첩 if문으로 인한 높은 순환복잡도&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>의존성 분석&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 의존성 관계 분석 예시&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">DependencyExample&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ServiceA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceA&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 의존성 1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ServiceB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceB&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 의존성 2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 과도한 의존성은 정적 분석기가 경고&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">process&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">serviceA&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">doSomething&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">serviceB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">doSomethingElse&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>정적 분석의 장점과 한계&lt;/h3>&lt;h4>장점&lt;/h4>&lt;ol>
&lt;li>
&lt;p>조기 결함 발견&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 컴파일 전에 발견할 수 있는 문제&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">EarlyDetection&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">example&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 정적 분석기가 미리 발견하는 문제들&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 배열 범위 초과&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Null 참조&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>일관된 코드 품질 유지&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 코드 품질 규칙 적용 예시&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">QualityMaintenance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 명명 규칙 준수&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MAX_RETRY_COUNT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 메서드 길이 제한&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">wellStructuredMethod&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 적절한 길이의 메서드 본문&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h4>한계&lt;/h4>&lt;ol>
&lt;li>
&lt;p>런타임 오류 감지의 한계&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 실행 시에만 발견할 수 있는 문제&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">RuntimeIssue&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">divide&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 정적 분석으로는 실제 실행 시의 b=0 상황을 예측하기 어려움&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>복잡한 로직의 검증 한계&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>도구&lt;/h3>&lt;p>많은 정적 코드 분석 도구가 있으며, 대표적인 것들은 다음과 같다:&lt;/p>
&lt;ul>
&lt;li>SonarQube&lt;/li>
&lt;li>FindBugs&lt;/li>
&lt;li>PMD&lt;/li>
&lt;li>ESLint&lt;/li>
&lt;/ul>
&lt;h3>정적 코드 분석의 효과적인 활용 방법&lt;/h3>&lt;ol>
&lt;li>
&lt;p>CI/CD 파이프라인 통합&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Jenkins 파이프라인 설정 예시&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">pipeline&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">stages&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">stage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">Static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Analysis&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">steps&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// SonarQube 분석 실행&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">withSonarQubeEnv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">SonarQube&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">sh&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">mvn&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sonar&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">sonar&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 분석 결과 확인&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">waitForQualityGate&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>팀 코딩 표준과의 연계&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 팀 표준을 반영한 정적 분석 규칙 예시&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">CodingStandard&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 팀 표준: 메서드는 20줄을 넘지 않음&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">standardCompliantMethod&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 간결한 메서드 구현&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 팀 표준: 모든 public 메서드는 문서화&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 사용자 정보를 처리합니다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param userId 사용자 ID
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @return 처리 결과
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Result&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">processUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Result&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>동적테스트(Dynamic Test)와 정적테스트(Static Test)</title><link>https://buenhyden.github.io/til/2024/11/dynamic-test-and-static-test/</link><pubDate>Thu, 28 Nov 2024 02:35:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/11/dynamic-test-and-static-test/</guid><description>
&lt;h2>동적테스트(Dynamic Test)와 정적테스트(Static Test)&lt;/h2>&lt;p>동적테스트 (Dynamic Test)과 정적테스트(Static Test)&lt;/p>
&lt;p>소프트웨어 테스팅은 프로그램의 품질을 확인하고 오류를 찾아내는 과정.&lt;br>
이는 크게 정적 테스팅과 동적 테스팅으로 나눌 수 있다.&lt;/p>
&lt;p>효과적인 테스팅을 위해서는 두 방식을 적절히 조합하여 사용하는 것이 중요하다.&lt;br>
예를 들어:&lt;/p>
&lt;ol>
&lt;li>개발 초기 단계:
&lt;ul>
&lt;li>정적 테스팅으로 기본적인 문제 해결&lt;/li>
&lt;li>코드 리뷰로 설계 문제 조기 발견&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>개발 중기:
&lt;ul>
&lt;li>단위 테스트로 개별 기능 검증&lt;/li>
&lt;li>통합 테스트로 모듈 간 상호작용 확인&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>개발 후기:
&lt;ul>
&lt;li>시스템 테스트로 전체 기능 검증&lt;/li>
&lt;li>성능 테스트로 실제 환경 적합성 확인&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>동적 테스트 (Dynamic Test)&lt;/h3>&lt;p>소프트웨어 테스트 기법 중 하나로, 프로그램을 실제로 실행하면서 소프트웨어의 동작을 분석하고 평가하는 방법.&lt;br>
소프트웨어의 코드를 직접 실행시키며 수행하는 테스트 유형의 총칭.&lt;br>
소프트웨어의 런타임 동작을 관찰하고 평가하여 기능, 성능, 안정성 등을 검증한다.&lt;/p>
&lt;h4>동적 테스팅의 기본 원리&lt;/h4>&lt;p>동적 테스팅은 실행 시점의 프로그램 행동을 관찰한다.&lt;br>
프로그램이 실제 환경에서 어떻게 동작하는지, 어떤 결과를 출력하는지, 얼마나 빠르게 처리하는지 등을 직접적으로 확인할 수 있다.&lt;br>
예를 들어, 웹 애플리케이션을 테스트할 때 실제 사용자처럼 로그인을 시도하고 데이터를 입력하면서 시스템의 반응을 검증한다.&lt;/p>
&lt;h4>동적 테스팅의 특징&lt;/h4>&lt;ol>
&lt;li>실행 기반: 프로그램을 실제로 실행하여 메모리 사용, 성능, 보안 취약점, 오류 등을 분석한다.&lt;/li>
&lt;li>테스트 환경: 소프트웨어가 실행될 실제 또는 가상 환경에서 분석이 이루어진다.&lt;/li>
&lt;li>런타임 문제 발견: 메모리 누수, 경쟁 조건, 예외 처리 문제 등 실행 중에만 드러나는 문제를 발견할 수 있다.&lt;/li>
&lt;li>실제 사용 환경 반영: 소프트웨어가 실제로 어떻게 동작하는지, 실제 환경에서의 성능과 안정성을 평가할 수 있다.&lt;/li>
&lt;/ol>
&lt;h4>동적 테스팅의 장점&lt;/h4>&lt;ol>
&lt;li>오류 탐색 정확도 높음: 실제 실행 환경에서 테스트하므로 오류를 정확하게 찾아낼 수 있다.&lt;/li>
&lt;li>실제 사용 시나리오 검증: 사용자 관점에서 소프트웨어의 동작을 검증할 수 있다.&lt;/li>
&lt;li>복잡한 버그 발견: 여러 컴포넌트 간의 상호작용에서 발생하는 복잡한 버그를 찾아낼 수 있다.&lt;/li>
&lt;li>성능 및 보안 평가: 실제 운영 환경에서의 성능을 측정하고 보안 취약점을 발견할 수 있다.&lt;/li>
&lt;li>사용자 경험 검증: 실제 사용자 상호작용을 시뮬레이션하여 사용자 경험을 검증할 수 있다.&lt;/li>
&lt;li>조기 피드백: 개발 과정 초기에 문제를 발견하여 효과적인 개선이 가능하다.&lt;/li>
&lt;/ol>
&lt;h4>동적 테스팅 비교 분석&lt;/h4>&lt;p>각 테스트 방법은 소프트웨어 개발 생명주기의 다른 단계에서 중요한 역할을 한다:&lt;/p>
&lt;ol>
&lt;li>단위 테스트는 개발 초기 단계에서 개별 코드 단위의 정확성을 확인한다.&lt;/li>
&lt;li>통합 테스트는 여러 모듈이 결합될 때 정상적으로 작동하는지 검증한다.&lt;/li>
&lt;li>기능 테스트는 소프트웨어의 기능적 요구사항 충족 여부를 확인한다.&lt;/li>
&lt;li>보안 테스트는 시스템의 취약점을 식별하고 보안 위협을 방지한다.&lt;/li>
&lt;li>성능 테스트는 시스템의 속도, 안정성, 확장성 등을 평가한다.&lt;/li>
&lt;li>수용 테스트는 최종 사용자 관점에서 요구사항 충족 여부를 확인한다.&lt;/li>
&lt;li>스모크 테스트는 빌드의 기본적인 안정성을 빠르게 확인한다.&lt;/li>
&lt;li>엔드투엔드 테스트는 전체 시스템의 흐름을 처음부터 끝까지 검증한다.&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>테스트 유형&lt;/th>
&lt;th>주요 목적&lt;/th>
&lt;th>테스트 범위&lt;/th>
&lt;th>수행 시점&lt;/th>
&lt;th>수행 주체&lt;/th>
&lt;th>특징&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>단위테스트&lt;/td>
&lt;td>개별 구성 요소의 정확성 검증&lt;/td>
&lt;td>함수, 메서드, 클래스 단위&lt;/td>
&lt;td>개발 단계&lt;/td>
&lt;td>개발자&lt;/td>
&lt;td>자동화가 용이, 빠른 피드백 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>통합테스트&lt;/td>
&lt;td>모듈 간 상호작용 검증&lt;/td>
&lt;td>여러 모듈의 결합&lt;/td>
&lt;td>단위테스트 이후&lt;/td>
&lt;td>개발자/QA&lt;/td>
&lt;td>모듈 간 인터페이스 검증에 중점&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>기능테스트&lt;/td>
&lt;td>기능적 요구사항 충족 확인&lt;/td>
&lt;td>개별 기능 단위&lt;/td>
&lt;td>개발 완료 후&lt;/td>
&lt;td>QA 팀&lt;/td>
&lt;td>사용자 시나리오 기반 검증&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>보안테스트&lt;/td>
&lt;td>보안 취약점 발견&lt;/td>
&lt;td>전체 시스템&lt;/td>
&lt;td>개발 후반/운영 중&lt;/td>
&lt;td>보안 전문가&lt;/td>
&lt;td>주기적인 수행 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>성능테스트&lt;/td>
&lt;td>시스템 성능 검증&lt;/td>
&lt;td>전체 시스템&lt;/td>
&lt;td>개발 후반&lt;/td>
&lt;td>성능 테스트 전문가&lt;/td>
&lt;td>특수 도구 활용 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>수용테스트&lt;/td>
&lt;td>사용자 요구사항 충족 확인&lt;/td>
&lt;td>전체 시스템&lt;/td>
&lt;td>개발 완료 후&lt;/td>
&lt;td>최종 사용자/고객&lt;/td>
&lt;td>실제 사용자 참여 필수&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>스모크테스트&lt;/td>
&lt;td>기본 기능 동작 확인&lt;/td>
&lt;td>핵심 기능&lt;/td>
&lt;td>빌드 직후&lt;/td>
&lt;td>QA 팀&lt;/td>
&lt;td>빠른 수행, 간단한 검증&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>엔드투엔드테스트&lt;/td>
&lt;td>전체 비즈니스 프로세스 검증&lt;/td>
&lt;td>전체 시스템&lt;/td>
&lt;td>통합 완료 후&lt;/td>
&lt;td>QA 팀&lt;/td>
&lt;td>실제 환경과 유사한 조건에서 수행&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>정적 테스트(Static Test)&lt;/h3>&lt;p>프로그램을 실행하지 않고 수행하는 테스트 방식&lt;br>
소프트웨어 개발 과정에서 생산되는 문서(코드, 설계서, 분석서, 계획서, 표준)에 대한 검토를 통해 오류를 발견하는 비실행 기반 테스트.&lt;/p>
&lt;h4>정적 테스팅의 기본 원리&lt;/h4>&lt;p>정적 테스팅은 소프트웨어의 정적 측면, 즉 실행하지 않고도 확인할 수 있는 특성들을 검사한다.&lt;br>
예를 들어, 코딩 표준 준수 여부, 변수 명명 규칙, 들여쓰기 등의 코드 스타일부터 메모리 누수 가능성이나 보안 취약점과 같은 잠재적 문제까지 다양한 측면을 검토한다.&lt;/p>
&lt;h4>정적 테스팅의 특징&lt;/h4>&lt;ol>
&lt;li>코드 실행 없이 수행: 프로그램을 실행하지 않고 소스 코드나 문서를 검토&lt;/li>
&lt;li>조기 결함 발견: 개발 초기 단계에서 잠재적 문제를 식별&lt;/li>
&lt;li>다양한 검토 대상: 코드, 요구사항 문서, 설계 문서 등 다양한 산출물 검토&lt;/li>
&lt;li>수동 및 자동화 방식: 인력에 의한 리뷰와 도구를 이용한 자동 분석 병행&lt;/li>
&lt;li>코딩 표준 준수 확인: 코딩 규칙, 가이드라인 준수 여부 검사&lt;/li>
&lt;/ol>
&lt;h4>정적 테스팅의 장점&lt;/h4>&lt;ol>
&lt;li>조기 결함 발견: 개발 초기에 문제를 발견하여 수정 비용과 시간 절감&lt;/li>
&lt;li>비용 효율성: 동적 테스팅에 비해 적은 비용으로 결함 발견 가능&lt;/li>
&lt;li>코드 품질 향상: 코딩 표준 준수와 구조적 문제 해결로 전반적인 코드 품질 개선&lt;/li>
&lt;li>보안성 강화: 보안 취약점을 조기에 발견하고 수정 가능&lt;/li>
&lt;li>개발 생산성 향상: 결함의 조기 발견으로 개발 과정의 효율성 증대&lt;/li>
&lt;li>협업 개선: 코드 리뷰를 통한 팀원 간 지식 공유와 의사소통 촉진&lt;/li>
&lt;li>테스트 범위 확대: 동적 테스팅으로 발견하기 어려운 결함 식별 가능&lt;/li>
&lt;/ol>
&lt;h4>정적 테스팅 비교 분석&lt;/h4>&lt;h5>Reviews (리뷰)&lt;/h5>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>분류&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>적용 사례&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Informal Review&lt;/td>
&lt;td>• 공식적인 절차 없이 진행되는 검토 방식&lt;br>• 개발자 간 자유로운 토론과 피드백&lt;/td>
&lt;td>• 절차와 문서화 최소화&lt;br>• 빠른 피드백&lt;br>• 자유로운 의견 교환&lt;/td>
&lt;td>• 즉각적인 피드백 가능&lt;br>• 팀 내 지식 공유 촉진&lt;br>• 낮은 진입 장벽&lt;/td>
&lt;td>• 체계적인 추적이 어려움&lt;br>• 검토 누락 가능성&lt;br>• 품질 보증의 공식적 증거로 부족&lt;/td>
&lt;td>• 일상적인 코드 검토&lt;br>• quick fix 검증&lt;br>• 소규모 변경사항 검토&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Technical Review&lt;/td>
&lt;td>• 기술적 관점에서의 상세 검토&lt;br>• 동료 검토 중심의 체계적 접근&lt;/td>
&lt;td>• 기술적 완성도 중점&lt;br>• 대안 제시&lt;br>• 체크리스트 활용&lt;/td>
&lt;td>• 기술적 결함 조기 발견&lt;br>• 설계 개선 기회 제공&lt;br>• 기술 표준 준수 확인&lt;/td>
&lt;td>• 많은 시간과 자원 소요&lt;br>• 참여자의 전문성 필요&lt;br>• 범위 설정의 어려움&lt;/td>
&lt;td>• 아키텍처 검토&lt;br>• 성능 최적화 검증&lt;br>• 보안 취약점 분석&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Walkthrough&lt;/td>
&lt;td>• 작성자가 주도하는 단계별 검토&lt;br>• 교육적 효과 중시&lt;/td>
&lt;td>• 시나리오 기반 검토&lt;br>• 상호 학습 기회&lt;br>• 단계별 설명&lt;/td>
&lt;td>• 지식 전파 효과적&lt;br>• 팀 이해도 향상&lt;br>• 새로운 관점 발견&lt;/td>
&lt;td>• 작성자 편향 가능성&lt;br>• 시간 소요가 큼&lt;br>• 객관성 확보 어려움&lt;/td>
&lt;td>• 신규 팀원 교육&lt;br>• 복잡한 로직 설명&lt;br>• 프로세스 이해&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Inspection&lt;/td>
&lt;td>• 가장 공식적이고 체계적인 검토&lt;br>• 철저한 문서화와 추적&lt;/td>
&lt;td>• 역할 분담 명확&lt;br>• 체계적 절차&lt;br>• 상세한 문서화&lt;/td>
&lt;td>• 높은 결함 발견율&lt;br>• 품질 보증 증거 확보&lt;br>• 체계적 개선 가능&lt;/td>
&lt;td>• 높은 비용과 시간&lt;br>• 과도한 문서화 부담&lt;br>• 유연성 부족&lt;/td>
&lt;td>• 중요 시스템 검증&lt;br>• 품질 인증 준비&lt;br>• 규제 준수 확인&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5>Static Analysis (정적 분석)&lt;/h5>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>분류&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>적용 사례&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Syntax Analysis&lt;/td>
&lt;td>• 코드의 문법적 오류 검출&lt;br>• 컴파일러 수준의 검사&lt;/td>
&lt;td>• 자동화된 검사&lt;br>• 즉각적 피드백&lt;br>• 기본적 오류 검출&lt;/td>
&lt;td>• 빠른 오류 발견&lt;br>• 개발 생산성 향상&lt;br>• 기본적 품질 보장&lt;/td>
&lt;td>• 의미적 오류 발견 불가&lt;br>• 단순 오류만 검출&lt;br>• 컨텍스트 이해 부족&lt;/td>
&lt;td>• 컴파일 전 검사&lt;br>• IDE 통합 검사&lt;br>• 기본 코드 검증&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Data Flow Analysis&lt;/td>
&lt;td>• 데이터의 흐름과 사용 패턴 분석&lt;br>• 변수 사용의 적절성 검증&lt;/td>
&lt;td>• 변수 추적&lt;br>• 초기화 검사&lt;br>• 사용 패턴 분석&lt;/td>
&lt;td>• 데이터 관련 버그 발견&lt;br>• 메모리 누수 방지&lt;br>• 안정성 향상&lt;/td>
&lt;td>• 분석 비용 높음&lt;br>• 오탐 가능성&lt;br>• 복잡한 패턴 분석 어려움&lt;/td>
&lt;td>• 메모리 관리 검증&lt;br>• 변수 사용 분석&lt;br>• 초기화 오류 검출&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Control Flow Analysis&lt;/td>
&lt;td>• 프로그램 실행 경로 분석&lt;br>• 로직 흐름 검증&lt;/td>
&lt;td>• 경로 분석&lt;br>• 도달성 검사&lt;br>• 순환 복잡도 측정&lt;/td>
&lt;td>• 논리적 오류 발견&lt;br>• 코드 복잡도 관리&lt;br>• 실행 경로 최적화&lt;/td>
&lt;td>• 동적 경로 예측 한계&lt;br>• 복잡한 조건 분석 어려움&lt;br>• 성능 오버헤드&lt;/td>
&lt;td>• 분기문 검증&lt;br>• 데드코드 탐지&lt;br>• 복잡도 측정&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Code Quality Analysis&lt;/td>
&lt;td>• 코딩 표준 준수 여부 검사&lt;br>• 품질 메트릭스 측정&lt;/td>
&lt;td>• 표준 준수 검사&lt;br>• 메트릭스 측정&lt;br>• 품질 지표 산출&lt;/td>
&lt;td>• 일관된 코드 품질&lt;br>• 유지보수성 향상&lt;br>• 객관적 품질 평가&lt;/td>
&lt;td>• 맥락 이해 부족&lt;br>• 과도한 규칙 적용&lt;br>• 거짓 양성 보고&lt;/td>
&lt;td>• 코딩 표준 검증&lt;br>• 품질 지표 측정&lt;br>• 리팩토링 대상 식별&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5>Formal Methods (정형 기법)&lt;/h5>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>분류&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>적용 사례&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Model Checking&lt;/td>
&lt;td>• 시스템 모델의 수학적 검증&lt;br>• 상태 공간 탐색&lt;/td>
&lt;td>• 형식적 검증&lt;br>• 전수 검사&lt;br>• 자동화된 분석&lt;/td>
&lt;td>• 완벽한 검증 가능&lt;br>• 중요 속성 보장&lt;br>• 숨은 오류 발견&lt;/td>
&lt;td>• 높은 복잡도&lt;br>• 전문성 요구&lt;br>• 큰 시스템에 적용 어려움&lt;/td>
&lt;td>• 안전중심 시스템&lt;br>• 프로토콜 검증&lt;br>• 동시성 검사&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Theorem Proving&lt;/td>
&lt;td>• 수학적 증명을 통한 검증&lt;br>• 논리적 정확성 입증&lt;/td>
&lt;td>• 수학적 엄밀성&lt;br>• 형식적 명세&lt;br>• 증명 기반 접근&lt;/td>
&lt;td>• 절대적 정확성&lt;br>• 핵심 속성 보장&lt;br>• 수학적 완전성&lt;/td>
&lt;td>• 매우 높은 비용&lt;br>• 전문가 필요&lt;br>• 실용성 제한적&lt;/td>
&lt;td>• 핵심 알고리즘 검증&lt;br>• 보안 프로토콜&lt;br>• 미션크리티컬 시스템&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>