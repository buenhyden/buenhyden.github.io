<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DevOps and Infrastructure on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/devops-and-infrastructure/</link>
    <description>Recent content in DevOps and Infrastructure on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Thu, 01 May 2025 09:49:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/devops-and-infrastructure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Version Control System Theory</title>
      <link>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/version-control-systems/vcs-theory/</link>
      <pubDate>Thu, 01 May 2025 09:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/version-control-systems/vcs-theory/</guid>
      <description></description>
    </item>
    <item>
      <title>Git Workflow</title>
      <link>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/version-control-systems/git-workflow/</link>
      <pubDate>Mon, 28 Oct 2024 12:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/version-control-systems/git-workflow/</guid>
      <description></description>
    </item>
    <item>
      <title>CI/CD Automation</title>
      <link>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/ci-cd/ci-cd-automation/</link>
      <pubDate>Wed, 02 Oct 2024 08:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/ci-cd/ci-cd-automation/</guid>
      <description>CI/CD Automation 은 소프트웨어 개발 라이프사이클 전반의 빌드, 테스트, 배포 과정을 자동화해 개발 효율성과 품질을 향상시키는 DevOps 핵심 전략이다. 지속적 통합 (CI) 은 개발자들이 코드를 주기적으로 통합하고 검증하는 과정을, 지속적 배포 (CD) 는 검증된 코드를 자동으로 프로덕션 환경에 배포하는 과정을 자동화한다. 이 자동화 시스템은 개발 주기를 단축하고, 코드 품질을 향상시키며, 배포 위험을 줄인다. 효과적인 CI/CD 파이프라인은 빌드 자동화, 포괄적인 테스트, 무중단 배포 전략, 롤백 메커니즘을 갖추고 있다.</description>
    </item>
    <item>
      <title>Version Control Systems</title>
      <link>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/version-control-systems/</link>
      <pubDate>Sat, 28 Sep 2024 15:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/version-control-systems/</guid>
      <description>버전 관리 시스템은 소프트웨어 코드의 변경사항을 추적하고 관리하는 필수적인 도구로, 개발 과정에서 발생하는 변경 이력을 체계적으로 저장하고 여러 개발자 간의 효율적인 협업을 지원한다. 중앙 집중식과 분산식으로 크게 나뉘며, 현대 소프트웨어 개발에서는 Git과 같은 분산형 버전 관리 시스템이 주류를 이루고 있다. 이는 브랜칭과 머징, 변경 이력 추적, 롤백 기능을 통해 코드 품질을 유지하고 개발 워크플로우를 효율화하며, DevOps 환경에서 CI/CD 파이프라인과 긴밀하게 통합되어 현대 소프트웨어 개발의 핵심 인프라 역할을 담당한다.</description>
    </item>
    <item>
      <title>CI/CD</title>
      <link>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/ci-cd/</link>
      <pubDate>Mon, 23 Sep 2024 18:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/ci-cd/</guid>
      <description>CI/CD(지속적 통합/지속적 배포) 는 소프트웨어 개발과 배포 프로세스를 자동화하는 현대적인 방법론으로, 개발자가 코드 변경사항을 자주 통합하고 테스트하여 빠르고 안정적인 소프트웨어 배포를 가능하게 한다. 지속적 통합 (CI) 은 코드를 중앙 저장소에 자주 병합하고 자동 테스트하는 과정이며, 지속적 배포 (CD) 는 검증된 코드를 자동으로 프로덕션 환경에 배포하는 프로세스이다. CI/CD 는 버전 관리 시스템, CI/CD 서버, 빌드 도구, 테스트 프레임워크 등의 구성 요소로 이루어지며, 빠른 피드백 루프, 배포 주기 단축, 버그 감소 등의 장점을 제공한다.</description>
    </item>
    <item>
      <title>Deployment Strategies</title>
      <link>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/ci-cd/deployment-and-operations/deployment-strategies/</link>
      <pubDate>Mon, 23 Sep 2024 02:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/ci-cd/deployment-and-operations/deployment-strategies/</guid>
      <description>배포 전략(Deployment Strategies)은 소프트웨어를 안전하고 효율적으로 업데이트하거나 새로운 버전을 릴리스하는 방법을 말한다.</description>
    </item>
    <item>
      <title>Collaboration</title>
      <link>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/version-control-systems/collaboration/</link>
      <pubDate>Tue, 01 Oct 2024 09:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/version-control-systems/collaboration/</guid>
      <description></description>
    </item>
    <item>
      <title>Repo Hosting Services</title>
      <link>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/version-control-systems/repo-hosting-services/</link>
      <pubDate>Sun, 29 Dec 2024 01:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/version-control-systems/repo-hosting-services/</guid>
      <description>저장소 호스팅 서비스는 개발자와 팀이 소스 코드를 저장, 관리, 공유 및 협업할 수 있는 온라인 플랫폼으로, 코드 저장소의 중앙화된 관리를 제공한다.  GitHub, GitLab, Bitbucket과 같은 주요 서비스들은 단순한 코드 저장을 넘어 코드 검토, 이슈 추적, CI/CD, 보안 스캐닝 등 광범위한 기능을 제공한다. 저장소 호스팅 서비스는 현대적인 소프트웨어 개발 워크플로우의 핵심 요소로, 개발 주기 전반에 걸쳐 코드 품질 관리와 팀 협업을 촉진한다.</description>
    </item>
    <item>
      <title>Observability</title>
      <link>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/monitoring-and-observability/observability/</link>
      <pubDate>Thu, 26 Sep 2024 02:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/monitoring-and-observability/observability/</guid>
      <description>현대 소프트웨어 개발과 운영에서 필수적인 개념으로, 시스템의 외부 출력(메트릭, 로그, 트레이스 등)을 통해 내부 상태를 이해하고 모니터링하는 능력을 의미한다.</description>
    </item>
    <item>
      <title>Enterprise Usage</title>
      <link>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/version-control-systems/enterprise-usage/</link>
      <pubDate>Mon, 30 Sep 2024 06:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/version-control-systems/enterprise-usage/</guid>
      <description></description>
    </item>
    <item>
      <title>Infrastructure as Code (IaC)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/ci-cd/deployment-and-operations/infrastructure-deployment/infrastructure-as-code/</link>
      <pubDate>Thu, 26 Sep 2024 00:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/ci-cd/deployment-and-operations/infrastructure-deployment/infrastructure-as-code/</guid>
      <description>전통적인 수동 인프라 구성 방식에서 벗어나 프로그래밍 언어를 사용하여 IT 인프라를 자동화하고 관리하는 접근법</description>
    </item>
    <item>
      <title>Advanced Topics</title>
      <link>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/version-control-systems/advanced-topics/</link>
      <pubDate>Sat, 26 Oct 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/version-control-systems/advanced-topics/</guid>
      <description></description>
    </item>
    <item>
      <title>Virtualization</title>
      <link>https://buenhyden.github.io/posts/system-design/system-components/platform-and-execution-infrastructure/virtualization/</link>
      <pubDate>Mon, 11 Nov 2024 13:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/system-components/platform-and-execution-infrastructure/virtualization/</guid>
      <description>컴퓨터 리소스의 추상화를 가능하게 하는 기술</description>
    </item>
    <item>
      <title>Observability vs. Monitoring</title>
      <link>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/monitoring-and-observability/observability-vs-monitoring/</link>
      <pubDate>Sat, 28 Sep 2024 08:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/devops-and-platform-engineering/monitoring-and-observability/observability-vs-monitoring/</guid>
      <description>Observability는 시스템의 내부 상태를 외부 출력을 통해 이해하고 추론할 수 있는 능력을 말하고, Monitoring은 시스템의 동작과 성능을 지속적으로 관찰하고 추적하는 활동을 말한다.</description>
    </item>
  </channel>
</rss>
