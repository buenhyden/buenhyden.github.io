<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Design and Architecture on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/design-and-architecture/</link>
    <description>Recent content in Design and Architecture on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.1</generator>
    <language>en</language>
    <lastBuildDate>Tue, 24 Jun 2025 13:23:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/design-and-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Principles</title>
      <link>https://buenhyden.github.io/posts/software-engineering/principles/</link>
      <pubDate>Tue, 27 May 2025 07:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/principles/</guid>
      <description>시스템 아키텍처와 소프트웨어 아키텍처 원칙들은 견고하고 유지보수 가능하며 확장 가능한 소프트웨어 시스템을 설계하기 위한 핵심 지침들로, SOLID 원칙, 관심사의 분리, 의존성 역전 등의 기본 원칙을 바탕으로 계층화 아키텍처, 클린 아키텍처, 마이크로서비스 아키텍처 등 다양한 패턴을 통해 복잡한 시스템의 설계와 구현을 체계적으로 지원한다.</description>
    </item>
    <item>
      <title>Performance Optimization</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/performance-optimization/</link>
      <pubDate>Tue, 24 Jun 2025 13:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/performance-optimization/</guid>
      <description>&lt;h2 id=&#34;performance-optimization&#34;&gt;Performance Optimization&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;용어-정리&#34;&gt;용어 정리&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;용어&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;
&lt;hr&gt;</description>
    </item>
    <item>
      <title>Architecture Styles and Patterns</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/</link>
      <pubDate>Sat, 14 Jun 2025 07:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/architecture-styles-and-patterns/</guid>
      <description>Architecture Styles and Patterns은 시스템의 고수준 구조를 정의하고 컴포넌트 간 상호작용을 조직화하는 재사용 가능한 설계 솔루션이다. Architecture Style 은 시스템 전체 구조와 상호작용 원칙을 정의하며, Architecture Pattern 은 특정 구조적 문제에 대한 재사용 가능한 해결책을 제공한다. 다양한 패턴이 존재하며, 각각 특정 문제를 해결하고 확장성, 유지보수성, 테스트 용이성을 향상시킨다.</description>
    </item>
    <item>
      <title>Design Methodology</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-methodology/</link>
      <pubDate>Fri, 06 Jun 2025 16:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-methodology/</guid>
      <description>설계 방법론은 소프트웨어 시스템의 구조, 아키텍처, 개발 프로세스를 체계화하여 효율적이고 유지보수 가능한 소프트웨어를 개발하기 위한 원칙, 패턴, 실무 기법의 집합이다.</description>
    </item>
    <item>
      <title>POSA(Pattern-Oriented Software Architecture)</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/posa/</link>
      <pubDate>Sat, 05 Apr 2025 01:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/posa/</guid>
      <description>POSA(패턴 지향 소프트웨어 아키텍처) 는 복잡한 소프트웨어 시스템 설계 문제에 대한 검증된 해결책을 패턴 형태로 제공하는 아키텍처 접근 방식이다. 다양한 수준의 추상화에서 재사용 가능한 디자인 패턴을 체계적으로 적용하여 소프트웨어의 품질, 유지보수성 및 확장성을 향상시키는 방법론을 제시한다.</description>
    </item>
    <item>
      <title>Domain-Driven Design</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-methodology/domain-driven-design/</link>
      <pubDate>Thu, 26 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/design-methodology/domain-driven-design/</guid>
      <description>Domain-Driven Design (DDD, 도메인 주도 설계) 는 복잡한 비즈니스 도메인을 중심으로 소프트웨어를 설계하는 방법론으로, 도메인 전문가와 개발자가 유비쿼터스 언어 (Ubiquitous Language) 를 통해 협력하여 도메인 모델을 구축하고, 바운디드 컨텍스트 (Bounded Context) 로 복잡성을 관리하며, 전략적 설계와 전술적 설계를 통해 유지보수 가능한 소프트웨어를 개발하는 접근법이다.</description>
    </item>
    <item>
      <title>GoF</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/</link>
      <pubDate>Wed, 25 Sep 2024 01:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/</guid>
      <description>GoF 디자인 패턴은 객체 생성, 구조 조합, 행동 관리를 체계화한 23 가지 솔루션이다. 재사용 가능한 코드 작성을 통해 **유지보수성**과 **확장성**을 높이며, Singleton, Adapter, Observer 등이 대표적이다. 이 패턴들은 복잡한 시스템에서 발생하는 공통 문제를 해결하기 위해 필수적으로 활용된다.</description>
    </item>
  </channel>
</rss>
