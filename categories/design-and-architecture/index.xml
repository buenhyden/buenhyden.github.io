<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Design and Architecture on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/design-and-architecture/</link>
    <description>Recent content in Design and Architecture on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Tue, 29 Jul 2025 12:24:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/design-and-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Software Design Patterns</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/</link>
      <pubDate>Sat, 21 Dec 2024 05:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/</guid>
      <description>디자인 패턴과 원칙은 소프트웨어 개발에서 반복되는 설계 문제에 대한 검증된 해결책과 지침으로, GoF (Gang of Four) 의 23 가지 패턴 (생성/구조/행위) 과 SOLID, DRY, KISS 등의 설계 원칙을 통해 코드의 재사용성, 유지보수성, 확장성을 향상시키는 소프트웨어 아키텍처의 핵심 요소이다.</description>
    </item>
    <item>
      <title>Specialized Architectures</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-styles/specialized-architectures/</link>
      <pubDate>Tue, 29 Jul 2025 12:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-styles/specialized-architectures/</guid>
      <description></description>
    </item>
    <item>
      <title>Messaging-Oriented Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/messaging-oriented-architecture/</link>
      <pubDate>Mon, 23 Jun 2025 02:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/messaging-oriented-architecture/</guid>
      <description>Messaging-Oriented Styles 는 메시지 기반 통신을 중심으로 하는 소프트웨어 아키텍처 스타일로, 분산 시스템에서 컴포넌트 간 비동기 통신과 느슨한 결합을 실현한다. Message-Oriented Middleware (MOM) 를 통해 구현되며, Publish-Subscribe, Request-Reply, Point-to-Point 등의 패턴을 포함하여 확장 가능하고 신뢰성 있는 엔터프라이즈 통합 솔루션을 제공한다.</description>
    </item>
    <item>
      <title>Data-Centric Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/data-architecture/data-centric-architecture/</link>
      <pubDate>Sun, 22 Jun 2025 08:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/data-architecture/data-centric-architecture/</guid>
      <description>Data-Centric Architecture 는 데이터가 시스템 설계와 운영의 중심에 위치하는 아키텍처 스타일로, 데이터의 일관성, 접근성, 관리 효율성을 극대화하여 데이터 기반 의사결정과 신속한 서비스 제공을 지원한다.</description>
    </item>
    <item>
      <title>Data-Flow Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/data-architecture/data-flow-architecture/</link>
      <pubDate>Sun, 22 Jun 2025 08:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/data-architecture/data-flow-architecture/</guid>
      <description>Data-Flow Architecture 는 데이터를 일련의 독립적인 변환 모듈을 통해 순차적으로 처리하는 소프트웨어 아키텍처 스타일이다. 입력 데이터가 각 구성요소를 거치면서 점진적으로 변환되어 최종 출력에 도달하는 구조를 갖는다. 재사용성과 모듈성을 극대화하며 컴파일러, ETL 시스템, 스트림 처리 등에 활용된다.</description>
    </item>
    <item>
      <title>Architecture Styles and Patterns</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-styles-and-patterns/</link>
      <pubDate>Sat, 14 Jun 2025 07:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-styles-and-patterns/</guid>
      <description>Architecture Styles and Patterns은 시스템의 고수준 구조를 정의하고 컴포넌트 간 상호작용을 조직화하는 재사용 가능한 설계 솔루션이다. Architecture Style 은 시스템 전체 구조와 상호작용 원칙을 정의하며, Architecture Pattern 은 특정 구조적 문제에 대한 재사용 가능한 해결책을 제공한다. 다양한 패턴이 존재하며, 각각 특정 문제를 해결하고 확장성, 유지보수성, 테스트 용이성을 향상시킨다.</description>
    </item>
    <item>
      <title>Design Methodology</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/design-methodology/</link>
      <pubDate>Fri, 06 Jun 2025 16:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/design-methodology/</guid>
      <description>설계 방법론은 소프트웨어 시스템의 구조, 아키텍처, 개발 프로세스를 체계화하여 효율적이고 유지보수 가능한 소프트웨어를 개발하기 위한 원칙, 패턴, 실무 기법의 집합이다.</description>
    </item>
    <item>
      <title>Layered Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-styles/layered-architecture/</link>
      <pubDate>Wed, 30 Apr 2025 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-styles/layered-architecture/</guid>
      <description>전통적인 Layered Architecture 는 Presentation‑Business‑Data 계층으로 책임 분리해 단순성과 유지보수성을 확보하지만, 계층 간 강한 결합과 확장성 한계가 존재한다. 현대적 Layered Architecture(예: Hexagonal, Clean, Onion) 는 포트‑어댑터, 의존성 반전과 같은 원칙을 통해 내부 코어와 인프라 외부 라이브러리를 엄격히 분리하며, 테스트 가능성과 유연성을 크게 개선한다.</description>
    </item>
    <item>
      <title>Distributed Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/distributed-architectures/</link>
      <pubDate>Sun, 27 Apr 2025 11:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/distributed-architectures/</guid>
      <description>Distributed Architecture 는 하나의 시스템을 여러 네트워크 연결 노드에 분산 배포해 처리 성능, 장애 복원력, 확장성을 확보하는 구조이다. 클라우드, 마이크로서비스, P2P, 브로커, 공유 - 낫싱 등 다양한 패턴이 포함되며, 메시징, 이벤트 기반, RPC, API 게이트웨이 등을 통해 모듈 간 통신을 설계한다.</description>
    </item>
    <item>
      <title>POSA(Pattern-Oriented Software Architecture)</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/classic-design-patterns/posa/</link>
      <pubDate>Sat, 05 Apr 2025 01:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/classic-design-patterns/posa/</guid>
      <description>POSA(패턴 지향 소프트웨어 아키텍처) 는 복잡한 소프트웨어 시스템 설계 문제에 대한 검증된 해결책을 패턴 형태로 제공하는 아키텍처 접근 방식이다. 다양한 수준의 추상화에서 재사용 가능한 디자인 패턴을 체계적으로 적용하여 소프트웨어의 품질, 유지보수성 및 확장성을 향상시키는 방법론을 제시한다.</description>
    </item>
    <item>
      <title>Monolithic Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-styles/monolithic-architecture/</link>
      <pubDate>Fri, 27 Sep 2024 11:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-styles/monolithic-architecture/</guid>
      <description>모놀리식 아키텍처 (Monolithic Architecture) 는 모든 기능과 컴포넌트가 하나의 코드베이스와 프로세스에서 동작하는 전통적인 소프트웨어 아키텍처다. 초기 시스템의 빠른 개발과 관리가 쉽지만, 대규모 확장, 유지보수, 배포의 비효율성 등의 한계도 내포한다.</description>
    </item>
    <item>
      <title>Component-Based Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-styles/component-based-architecture/</link>
      <pubDate>Thu, 26 Sep 2024 11:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-styles/component-based-architecture/</guid>
      <description>컴포넌트 기반 아키텍처 (Component-Based Architecture) 는 소프트웨어 시스템을 독립적이고 재사용 가능한 컴포넌트 (구성 요소) 단위로 분할하여, 변화에 유연하며 유지보수가 용이한 구조를 지향한다. 인터페이스를 통한 결합으로 확장성과 재사용성이 뛰어나다.</description>
    </item>
    <item>
      <title>Domain-Driven Design</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/design-methodology/domain-driven-design/</link>
      <pubDate>Thu, 26 Sep 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/design-methodology/domain-driven-design/</guid>
      <description>Domain-Driven Design (DDD, 도메인 주도 설계) 는 복잡한 비즈니스 도메인을 중심으로 소프트웨어를 설계하는 방법론으로, 도메인 전문가와 개발자가 유비쿼터스 언어 (Ubiquitous Language) 를 통해 협력하여 도메인 모델을 구축하고, 바운디드 컨텍스트 (Bounded Context) 로 복잡성을 관리하며, 전략적 설계와 전술적 설계를 통해 유지보수 가능한 소프트웨어를 개발하는 접근법이다.</description>
    </item>
    <item>
      <title>GoF</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/classic-design-patterns/gof/</link>
      <pubDate>Wed, 25 Sep 2024 01:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/classic-design-patterns/gof/</guid>
      <description>GoF 디자인 패턴은 객체 생성, 구조 조합, 행동 관리를 체계화한 23 가지 솔루션이다. 재사용 가능한 코드 작성을 통해 **유지보수성**과 **확장성**을 높이며, Singleton, Adapter, Observer 등이 대표적이다. 이 패턴들은 복잡한 시스템에서 발생하는 공통 문제를 해결하기 위해 필수적으로 활용된다.</description>
    </item>
  </channel>
</rss>
