<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Software Development Lifecycle on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/software-development-lifecycle/</link>
    <description>Recent content in Software Development Lifecycle on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Sat, 21 Sep 2024 00:48:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/software-development-lifecycle/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. 계획 (Planning)</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/sdlc/sdlc-phases/planning/</link>
      <pubDate>Fri, 20 Sep 2024 00:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/sdlc/sdlc-phases/planning/</guid>
      <description>프로젝트의 방향성과 범위를 설정하고, 자원과 일정을 계획하며, 위험 요소를 식별하고 관리 전략을 수립한다.</description>
    </item>
    <item>
      <title>2. 요구사항 수집 및 분석 (Requirements Gathering and Analysis)</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/sdlc/sdlc-phases/requirements-gathering-and-analysis/</link>
      <pubDate>Fri, 20 Sep 2024 00:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/sdlc/sdlc-phases/requirements-gathering-and-analysis/</guid>
      <description>이해관계자의 요구사항을 수집하고 분석하여 시스템 요구사항을 정의하는 단계</description>
    </item>
    <item>
      <title>3. 설계 (Design)</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/sdlc/sdlc-phases/design/</link>
      <pubDate>Fri, 20 Sep 2024 00:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/sdlc/sdlc-phases/design/</guid>
      <description>요구사항을 바탕으로 시스템의 구조와 세부 사항을 설계하는 단계</description>
    </item>
    <item>
      <title>4. 구현 (Implementation)</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/sdlc/sdlc-phases/implementation/</link>
      <pubDate>Fri, 20 Sep 2024 00:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/sdlc/sdlc-phases/implementation/</guid>
      <description>설계를 바탕으로 실제 코드를 작성하는 단계</description>
    </item>
    <item>
      <title>5. 테스트 (Testing)</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/sdlc/sdlc-phases/testing/</link>
      <pubDate>Fri, 20 Sep 2024 00:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/sdlc/sdlc-phases/testing/</guid>
      <description>개발된 소프트웨어의 품질을 검증하고 결함을 식별하는 단계</description>
    </item>
    <item>
      <title>6. 배포 (Deployment)</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/sdlc/sdlc-phases/deployment/</link>
      <pubDate>Fri, 20 Sep 2024 00:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/sdlc/sdlc-phases/deployment/</guid>
      <description>완성된 소프트웨어를 실제 운영 환경에 설치하고 사용자에게 제공하는 단계</description>
    </item>
    <item>
      <title>7. 유지보수 (Maintenance)</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/sdlc/sdlc-phases/maintenance/</link>
      <pubDate>Fri, 20 Sep 2024 00:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/sdlc/sdlc-phases/maintenance/</guid>
      <description>배포된 소프트웨어를 지속적으로 관리하고 개선하는 단계</description>
    </item>
    <item>
      <title>Rapid Application Development</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/methodologies/hybrid-and-modern/rad/</link>
      <pubDate>Sat, 21 Sep 2024 00:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/methodologies/hybrid-and-modern/rad/</guid>
      <description>빠른 프로토타이핑과 반복적인 개발을 통해 신속하게 애플리케이션을 구축하는 접근 방식</description>
    </item>
    <item>
      <title>V Model</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/methodologies/traditional/v-model/</link>
      <pubDate>Sat, 21 Sep 2024 00:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/sdlc--methodologies/methodologies/traditional/v-model/</guid>
      <description>개발 단계와 테스트 단계를 병행하여 진행하는 검증(Verification)과 확인(Validation) 중심의 접근 방식이다.</description>
    </item>
  </channel>
</rss>
