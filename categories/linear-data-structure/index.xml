<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linear Data Structure on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/linear-data-structure/</link>
    <description>Recent content in Linear Data Structure on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.143.0</generator>
    <language>en</language>
    <lastBuildDate>Wed, 09 Oct 2024 13:22:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/linear-data-structure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lock-free Stack</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/stack/lock-free-stack/</link>
      <pubDate>Wed, 09 Oct 2024 13:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/stack/lock-free-stack/</guid>
      <description>Lock-free Stack은 락(lock)을 사용하지 않고 동시성을 제공하는 LIFO(Last-In-First-Out) 자료구조.</description>
    </item>
    <item>
      <title>스택 (Stack)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/stack/</link>
      <pubDate>Wed, 09 Oct 2024 05:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/stack/</guid>
      <description>LIFO(Last In First Out) 원칙을 따르는 선형 데이터 구조</description>
    </item>
    <item>
      <title>Concurrent Skip List</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/concurrent-skip-list/</link>
      <pubDate>Tue, 08 Oct 2024 13:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/concurrent-skip-list/</guid>
      <description>Concurrent Skip List는 Skip List 자료구조를 기반으로 하여 멀티스레드 환경에서 동시에 삽입, 삭제, 검색 작업을 수행할 수 있도록 구현된 동시성 자료구조이다.</description>
    </item>
    <item>
      <title>Read-Copy-Update List</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/read-copy-update-list/</link>
      <pubDate>Tue, 08 Oct 2024 13:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/read-copy-update-list/</guid>
      <description>RCU List는 Read-Copy-Update 메커니즘을 사용하여 구현된 동시성 연결 리스트로 읽기 작업에 대해 락을 사용하지 않으면서도 동시에 업데이트를 수행할 수 있게 해준다.</description>
    </item>
    <item>
      <title>Lock-free Queue</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/lock-free-queue/</link>
      <pubDate>Tue, 08 Oct 2024 13:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/lock-free-queue/</guid>
      <description>Lock-free Queue는 락(lock)을 사용하지 않고 동시성을 제공하는 FIFO(First-In-First-Out) 자료구조이다.</description>
    </item>
    <item>
      <title>Suffix Array</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array/suffix-array/</link>
      <pubDate>Tue, 08 Oct 2024 13:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array/suffix-array/</guid>
      <description>Suffix Array는 문자열의 모든 접미사를 효율적으로 저장하고 관리하는 특수한 배열 구조로, 문자열 처리와 패턴 매칭을 위해 사용되는 고급 데이터 구조이다.</description>
    </item>
    <item>
      <title>Circular Linked List</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/circular-linked-list/</link>
      <pubDate>Tue, 08 Oct 2024 12:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/circular-linked-list/</guid>
      <description>Circular Linked List(원형 연결 리스트)는 마지막 노드가 첫 번째 노드를 가리키는 연결 리스트의 변형이다.</description>
    </item>
    <item>
      <title>Circular Queue</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/circular-queue/</link>
      <pubDate>Tue, 08 Oct 2024 12:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/circular-queue/</guid>
      <description>Circular Queue는 마지막 요소가 첫 번째 요소와 연결되어 원형 구조를 형성하는 큐 데이터 구조이다.</description>
    </item>
    <item>
      <title>Doubly Linked List</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/doubly-linked-list/</link>
      <pubDate>Tue, 08 Oct 2024 12:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/doubly-linked-list/</guid>
      <description>Doubly Linked List는 노드들이 양방향으로 연결된 선형 데이터 구조로, 각 노드가 데이터와 이전 노드, 다음 노드를 가리키는 포인터를 포함하고 있다.</description>
    </item>
    <item>
      <title>Skip List</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/skip-list/</link>
      <pubDate>Tue, 08 Oct 2024 12:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/skip-list/</guid>
      <description>Skip List는 정렬된 연결 리스트를 기반으로 하여 빠른 검색, 삽입, 삭제 연산을 지원하는 확률적 데이터 구조이다</description>
    </item>
    <item>
      <title>Deque</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/deque/</link>
      <pubDate>Tue, 08 Oct 2024 12:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/deque/</guid>
      <description>Deque는 양쪽 끝에서 삽입과 삭제가 가능한 선형 데이터 구조로, 큐와 스택의 특성을 모두 가지고 있다.</description>
    </item>
    <item>
      <title>동적 배열 (Dynamic Array)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array/dynamic-array/</link>
      <pubDate>Tue, 08 Oct 2024 07:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array/dynamic-array/</guid>
      <description>동적 배열은 크기가 가변적인 배열 형태의 데이터 구조이다.</description>
    </item>
    <item>
      <title>연결 리스트 (Linked List)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/</link>
      <pubDate>Mon, 07 Oct 2024 05:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/linked-list/</guid>
      <description>각 노드가 데이터와 다음 노드에 대한 참조(포인터)를 가지고 있는 선형 데이터 구조</description>
    </item>
    <item>
      <title>큐 (Queue)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/</link>
      <pubDate>Mon, 07 Oct 2024 05:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/queue/</guid>
      <description>FIFO(First In First Out) 원칙을 따르는 선형 데이터 구조</description>
    </item>
    <item>
      <title>배열 (Array)</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array/</link>
      <pubDate>Mon, 07 Oct 2024 05:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/non-primitive/linear/array/</guid>
      <description>배열은 동일한 데이터 타입의 요소들을 연속된 메모리 공간에 저장하는 가장 기본적인 데이터 구조.</description>
    </item>
  </channel>
</rss>
