<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Transaction Isolation Levels on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/transaction-isolation-levels/</link>
    <description>Recent content in Transaction Isolation Levels on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.150.1</generator>
    <language>en</language>
    <lastBuildDate>Fri, 12 Sep 2025 03:47:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/transaction-isolation-levels/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Serializable</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/serializable/</link>
      <pubDate>Fri, 12 Sep 2025 03:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/serializable/</guid>
      <description>Serializable은 트랜잭션 동시 실행 결과가 어떤 순차적 실행 결과와 동일하도록 보장하는 최고 격리 수준이다. 팬텀·쓰기 스큐 등 무결성 위협을 차단하지만, 락·검증·충돌 재시도로 성능 저하 및 재시도 비용이 증가하므로 핵심 업무에 선별 적용해야 한다.</description>
    </item>
    <item>
      <title>Read Committed</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/read-committed/</link>
      <pubDate>Fri, 12 Sep 2025 03:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/read-committed/</guid>
      <description>Read Committed은 트랜잭션이 커밋된 데이터만 읽도록 보장해 Dirty Read를 방지하는 표준 격리 수준이다. 다만 동일 트랜잭션 내 반복 조회에서 값이 달라지는 Non-Repeatable Read와 레코드 추가/삭제로 인한 Phantom은 허용한다. 구현은 락 기반과 MVCC 기반으로 달라지므로 적용 전 엔진 동작·재현 테스트·보완 패턴(재검증, FOR UPDATE, 상향 격리)을 설계해야 한다.</description>
    </item>
    <item>
      <title>Read Uncommitted</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/read-uncommitted/</link>
      <pubDate>Fri, 12 Sep 2025 03:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/read-uncommitted/</guid>
      <description>Read Uncommitted는 SQL 표준의 최저 격리 수준으로 다른 트랜잭션의 커밋되지 않은 변경을 읽을 수 있게 허용한다. 락·스냅샷 오버헤드를 줄여 읽기 지연은 낮지만, Dirty Read·Non-repeatable Read·Phantom 같은 심각한 정합성 이상을 초래할 수 있다. 실제 영향은 DB 엔진(MVCC 여부 등)에 따라 달라지므로 사용 전 엔진 동작 확인과 재현 테스트가 필요하다.</description>
    </item>
    <item>
      <title>Repeatable Read</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/repeatable-read/</link>
      <pubDate>Fri, 12 Sep 2025 03:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/transaction/transaction-isolation/transaction-isolation-levels/repeatable-read/</guid>
      <description>Repeatable Read는 트랜잭션 안에서 동일 쿼리의 결과가 반복되도록 보장해 Non-repeatable Read를 막는 격리 수준이다. 구현은 락(범위/next-key)과 MVCC(스냅샷) 방식으로 나뉘며, Phantom 억제 여부는 DBMS별 차이가 있어 실무 적용 전 벤더 동작과 성능 영향을 검증해야 한다.</description>
    </item>
  </channel>
</rss>
