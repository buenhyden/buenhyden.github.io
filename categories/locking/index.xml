<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Locking on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/locking/</link>
    <description>Recent content in Locking on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.150.1</generator>
    <language>en</language>
    <lastBuildDate>Tue, 23 Sep 2025 03:56:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/locking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lock Duration</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-duration/</link>
      <pubDate>Tue, 23 Sep 2025 03:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-duration/</guid>
      <description>락 지속시간은 트랜잭션이 특정 자원 락을 획득한 시점부터 해제·커밋으로 풀릴 때까지의 보유 기간이다. 격리수준, 2PL(Strict/Rigorous 여부), MVCC와 키-범위락, 락 에스컬레이션·타임아웃, 애플리케이션 로직이 이를 좌우한다. 지속시간은 동시성, 지연, 데드락 확률, 로그·복구 비용에 직접 영향을 준다.</description>
    </item>
    <item>
      <title>Intent Modes</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-modes/intent-modes/</link>
      <pubDate>Mon, 22 Sep 2025 08:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-modes/intent-modes/</guid>
      <description>의도 모드는 테이블–페이지–행 등 계층에서 하위 자원에 둘 S/X 잠금 계획을 상위에 신호해 충돌을 빠르게 판정하는 메커니즘이다. IS·IX·SIX로 탐색과 갱신이 뒤섞인 상황을 조율하고, 다중 그라뉼러리티·호환성 표·에스컬레이션과 결합해 동시성과 일관성을 높인다.</description>
    </item>
    <item>
      <title>Lock Compatibility Matrix</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-modes/lock-compatibility-matrix/</link>
      <pubDate>Mon, 22 Sep 2025 08:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-modes/lock-compatibility-matrix/</guid>
      <description>락 호환성 매트릭스는 DB 트랜잭션이 동일 자원에 대해 요청하는 잠금 모드의 동시 허용·차단 관계를 표로 정리한 것. S/X/U와 의도 잠금(IS/IX/SIX), 키-범위 잠금과 함께 사용되어 충돌 최소화, 팬텀 방지, 일관성과 성능의 균형 설계의 기준이 된다.</description>
    </item>
    <item>
      <title>Locking Protocols</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/locking-protocols/</link>
      <pubDate>Mon, 22 Sep 2025 04:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/locking-protocols/</guid>
      <description>락 프로토콜은 트랜잭션의 동시 접근을 제어해 일관성과 직렬성을 보장하는 규칙 집합이다. 대표적으로 Two-Phase Locking(공유·배타·업데이트·의도 락)과 범위 락이 있으며, MVCC·낙관적 기법과의 혼용으로 성능·무결성 간 트레이드오프를 관리한다.</description>
    </item>
    <item>
      <title>Lock Modes</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-modes/</link>
      <pubDate>Wed, 27 Aug 2025 06:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-modes/</guid>
      <description>락 모드는 자원 접근의 허용 범위를 규정해 일관성과 동시성을 관리한다. S/X/U와 Intent 계열은 계층적 락 조정에, gap/next-key/predicate 등 범위형 락은 팬텀을 방지한다. DBMS별 용어·정책 차이를 확인하고 트랜잭션 패턴에 맞춰 레벨·격리·인덱스를 조정하면 성능과 일관성 균형을 맞출 수 있다.</description>
    </item>
    <item>
      <title>Lock Granularity</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-granularity/</link>
      <pubDate>Tue, 12 Aug 2025 09:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-operations/transaction-management/concurrency-control/locking/lock-granularity/</guid>
      <description>잠금 세분성은 잠금을 적용하는 단위를 정의해 동시성 및 관리 오버헤드의 균형을 결정하는 핵심 설계 요소다. 세분화는 동시성을 높이나 메타데이터·추적 비용을 증가시키며, 의도잠금·계층적 잠금·에스컬레이션과 워크로드 기반 튜닝으로 실무적 트레이드오프를 관리한다.</description>
    </item>
  </channel>
</rss>
