<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Computer Architecture on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/computer-architecture/</link>
    <description>Recent content in Computer Architecture on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 30 Sep 2024 14:14:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/computer-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Computer Architecture</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/</link>
      <pubDate>Sun, 29 Sep 2024 21:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/</guid>
      <description>컴퓨터 시스템의 구조와 설계를 정의하는 기본적인 프레임워크.</description>
    </item>
    <item>
      <title>캐싱 (Caching)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/</link>
      <pubDate>Mon, 30 Sep 2024 14:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/</guid>
      <description>캐싱은 자주 사용되는 데이터나 계산 결과를 빠르게 접근할 수 있는 위치에 임시로 저장하는 기술</description>
    </item>
    <item>
      <title>Byte Addressable Memory vs Word Addressable Memory</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/byte-addressable-memory-vs-word-addressable-memory/</link>
      <pubDate>Mon, 30 Sep 2024 11:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/byte-addressable-memory-vs-word-addressable-memory/</guid>
      <description>컴퓨터 메모리의 주소 지정 방식을 설명하는 개념</description>
    </item>
    <item>
      <title>Cache Memory</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/cache-memory/</link>
      <pubDate>Mon, 30 Sep 2024 11:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/cache-memory/</guid>
      <description>캐시 메모리(Cache Memory)는 컴퓨터 아키텍처에서 중요한 역할을 하는 CPU와 주 메모리(RAM) 사이에 위치한 소규모의 고속 메모리이다.</description>
    </item>
    <item>
      <title>메모리 접근 방법 (Memory Access Methods)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-access-methods/</link>
      <pubDate>Mon, 30 Sep 2024 08:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-access-methods/</guid>
      <description>메모리 접근 방식 (Memory Access Methods)은 컴퓨터 시스템에서 메모리에 접근하는 방식을 말한다.</description>
    </item>
    <item>
      <title>메모리 주소 지정 방식 (Memory Address Modes)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-address-modes/</link>
      <pubDate>Mon, 30 Sep 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-address-modes/</guid>
      <description>메모리 주소 지정 방식(Memory Address Modes)은 CPU가 메모리의 특정 위치에 어떻게 접근하는지를 나타내는 방법이다.</description>
    </item>
    <item>
      <title>메모리의 계층 구조 (Memory Hierarchy)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-hierarchy/</link>
      <pubDate>Mon, 30 Sep 2024 03:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-hierarchy/</guid>
      <description>컴퓨터 시스템에서 데이터 접근의 효율성을 극대화하고 전체 시스템 성능을 향상시키기 위해 설계된 구조</description>
    </item>
    <item>
      <title>컴퓨터 구성 요소 (Components of Computer Architecture)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/components-of-computer-architecture/</link>
      <pubDate>Sun, 29 Sep 2024 16:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/components-of-computer-architecture/</guid>
      <description>이 구성 요소들의 상호작용을 통해 컴퓨터가 작동하게 된다.</description>
    </item>
    <item>
      <title>CPU</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/cpu/</link>
      <pubDate>Sun, 29 Sep 2024 16:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/cpu/</guid>
      <description>컴퓨터 시스템의 핵심 구성요소로, 프로그램의 명령어를 해석하고 실행하는 역할을 한다.</description>
    </item>
    <item>
      <title>I/O Systems</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/</link>
      <pubDate>Sun, 29 Sep 2024 15:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/</guid>
      <description>&lt;h2 id=&#34;io-systems&#34;&gt;I/O Systems&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>인터럽트 (Interrupt)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/interrupt/</link>
      <pubDate>Sun, 29 Sep 2024 06:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/interrupt/</guid>
      <description>프로세서에게 현재 실행 중인 코드를 중단하고 특정 이벤트를 처리하도록 요청하는 신호</description>
    </item>
    <item>
      <title>System Bus</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/system-bus/</link>
      <pubDate>Sun, 29 Sep 2024 02:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/system-bus/</guid>
      <description>System Bus는 컴퓨터 아키텍처에서 주요 구성 요소들을 연결하는 중요한 통신 경로로, 컴퓨터의 혈관과 같은 역할을 한다.</description>
    </item>
  </channel>
</rss>
