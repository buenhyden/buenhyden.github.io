<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Computer Architecture</title><link>https://buenhyden.github.io/categories/computer-architecture/</link><description>Recent content in Computer Architecture on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 14 Jan 2025 02:17:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/categories/computer-architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Computer Architecture</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/</link><pubDate>Sat, 21 Sep 2024 21:24:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/</guid><description>
&lt;h2>Computer Architecture&lt;span class="hx-absolute -hx-mt-20" id="computer-architecture">&lt;/span>
&lt;a href="#computer-architecture" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>컴퓨터 시스템의 구조와 설계를 정의하는 기본적인 프레임워크.&lt;br>
이는 컴퓨터 하드웨어와 소프트웨어의 설계 원칙과 기능을 포괄하며, 작업을 효율적이고 효과적으로 실행할 수 있도록 한다.&lt;/p>
&lt;p>&lt;img src="Computer_architecture_block_diagram.png" alt="Computer Architecture" loading="lazy" />&lt;br>
_Source: &lt;a href="https://en.wikipedia.org/wiki/Computer_architecture" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Computer_architecture&lt;/a> _&lt;/p>
&lt;h3>주요 구성요소&lt;span class="hx-absolute -hx-mt-20" id="주요-구성요소">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ea%b5%ac%ec%84%b1%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>중앙 처리 장치 (CPU)&lt;br>
CPU는 컴퓨터의 &amp;lsquo;두뇌&amp;rsquo;로, 명령을 실행하는 역할을 한다.&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>; CPU 내부 동작 예시
MOV AX, 5 ; 레지스터에 값 저장
ADD AX, 3 ; 산술 연산 수행
MOV [BX], AX ; 메모리에 결과 저장&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>A. 제어 장치 (Control Unit):&lt;/p>
&lt;ul>
&lt;li>명령어 해석 및 실행 순서 제어&lt;/li>
&lt;li>각 하드웨어 구성요소 간의 데이터 흐름 조정&lt;/li>
&lt;li>파이프라이닝과 같은 고급 실행 기법 관리&lt;br>
B. 산술논리장치 (ALU):&lt;/li>
&lt;li>덧셈, 뺄셈 등의 산술 연산 수행&lt;/li>
&lt;li>AND, OR 등의 논리 연산 처리&lt;/li>
&lt;li>비교 연산 수행&lt;br>
C. 레지스터:&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>; 레지스터 사용 예시
MOV EAX, [memory] ; 데이터 레지스터
MOV EIP, label ; 프로그램 카운터
PUSH EBP ; 스택 포인터&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="2">
&lt;li>메모리&lt;br>
메모리는 데이터와 명령어를 저장하는 공간.&lt;br>
주요 유형은 다음과 같다:
&lt;ul>
&lt;li>주 메모리 (Primary Memory): RAM, 캐시 등&lt;/li>
&lt;li>보조 메모리 (Secondary Memory): 하드 드라이브, SSD 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>메모리는 계층적 구조로 이루어져 있으며, 각 층마다 특징이 다르다:&lt;/p>
&lt;p>A. 캐시 메모리:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 캐시 메모리 구조 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">CacheEntry&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">valid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">dirty&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">tag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">CACHE_LINE_SIZE&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>L1 캐시: CPU에 가장 가까운 고속 캐시&lt;/li>
&lt;li>L2 캐시: L1보다 크고 느린 중간 계층&lt;/li>
&lt;li>L3 캐시: 가장 큰 용량의 마지막 레벨 캐시&lt;/li>
&lt;/ul>
&lt;p>B. 주 메모리 (RAM):&lt;/p>
&lt;ul>
&lt;li>프로그램과 데이터의 실행 시 저장소&lt;/li>
&lt;li>휘발성 메모리로 전원이 꺼지면 데이터 소실&lt;/li>
&lt;/ul>
&lt;p>C. 가상 메모리:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 페이지 테이블 엔트리 구조
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">PageTableEntry&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">physicalPageNumber&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">present&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">readWrite&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">userSupervisor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">accessed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">dirty&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="3">
&lt;li>
&lt;p>입출력 장치&lt;br>
키보드, 모니터, 프린터, 네트워크 인터페이스 등이 포함된다.&lt;/p>
&lt;p>입출력 시스템은 다음과 같은 메커니즘으로 작동한다:&lt;/p>
&lt;p>A. 인터럽트 기반 I/O:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 인터럽트 핸들러 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">interruptHandler&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 인터럽트 플래그 저장
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">saveInterruptState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 인터럽트 처리
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">handleInterrupt&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 상태 복원
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">restoreInterruptState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>B. DMA (Direct Memory Access):&lt;/p>
&lt;ul>
&lt;li>CPU 개입 없이 직접 메모리 접근&lt;/li>
&lt;li>대용량 데이터 전송 시 효율적&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>버스 시스템&lt;br>
다양한 구성 요소를 연결하는 통신 경로로, 데이터 버스, 주소 버스, 제어 버스로 구성된다.
&lt;ul>
&lt;li>주소 버스: 메모리 주소 전달&lt;/li>
&lt;li>데이터 버스: 실제 데이터 전송&lt;/li>
&lt;li>제어 버스: 제어 신호 전달&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>컴퓨터 아키텍처의 주요 개념&lt;span class="hx-absolute -hx-mt-20" id="컴퓨터-아키텍처의-주요-개념">&lt;/span>
&lt;a href="#%ec%bb%b4%ed%93%a8%ed%84%b0-%ec%95%84%ed%82%a4%ed%85%8d%ec%b2%98%ec%9d%98-%ec%a3%bc%ec%9a%94-%ea%b0%9c%eb%85%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>명령어 세트 아키텍처 (Instruction Set Architecture, ISA)&lt;br>
프로세서가 실행할 수 있는 명령어 집합을 정의한다.&lt;br>
이는 소프트웨어와 하드웨어 사이의 인터페이스 역할을 한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>마이크로아키텍처&lt;br>
ISA가 하드웨어 수준에서 어떻게 구현되는지를 설명한다.&lt;br>
이는 프로세서의 내부 설계와 관련이 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>파이프라이닝&lt;br>
여러 명령어를 동시에 실행하여 CPU 효율성을 높이는 기술.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>캐시 메모리&lt;br>
CPU 근처에 위치한 고속 메모리로, 자주 접근하는 데이터를 저장한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>멀티프로세싱&lt;br>
여러 프로세서를 사용하여 작업을 동시에 수행하는 기술.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>주요 컴퓨터 아키텍처 유형&lt;span class="hx-absolute -hx-mt-20" id="주요-컴퓨터-아키텍처-유형">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ec%bb%b4%ed%93%a8%ed%84%b0-%ec%95%84%ed%82%a4%ed%85%8d%ec%b2%98-%ec%9c%a0%ed%98%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>폰 노이만 아키텍처&lt;/p>
&lt;ul>
&lt;li>명령어와 데이터가 같은 메모리 공간을 공유한다.&lt;/li>
&lt;li>단일 데이터 버스와 주소 버스를 사용한다.&lt;/li>
&lt;li>순차적 실행 모델을 따른다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>하버드 아키텍처&lt;/p>
&lt;ul>
&lt;li>명령어와 데이터를 위한 별도의 저장 장치와 경로를 가진다.&lt;/li>
&lt;li>동시에 명령어와 데이터에 접근할 수 있어 성능이 향상된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>수정된 하버드 아키텍처&lt;/p>
&lt;ul>
&lt;li>명령어와 데이터를 위한 별도의 캐시를 사용한다.&lt;/li>
&lt;li>주 메모리는 공유하여 설계를 단순화하고 비용을 절감한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>RISC 및 CISC 아키텍처&lt;/p>
&lt;ul>
&lt;li>RISC (Reduced Instruction Set Computing): 간단한 명령어 세트를 사용하여 빠른 실행을 목표로 한다.&lt;/li>
&lt;li>CISC (Complex Instruction Set Computing): 복잡한 명령어 세트를 사용하여 다양한 기능을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>System Bus</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/system-bus/</link><pubDate>Tue, 14 Jan 2025 02:17:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/system-bus/</guid><description>
&lt;h2>System Bus&lt;span class="hx-absolute -hx-mt-20" id="system-bus">&lt;/span>
&lt;a href="#system-bus" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>System Bus는 컴퓨터 아키텍처에서 주요 구성 요소들을 연결하는 중요한 통신 경로로, 컴퓨터의 혈관과 같은 역할을 한다. CPU, 메모리, 입출력 장치 등 컴퓨터의 주요 구성 요소들 사이에서 데이터와 신호를 전달한다.&lt;/p>
&lt;p>
&lt;img src="../system-bus.png" alt="System Bus (Internal and Intra)" loading="lazy" />&lt;br>
_Source: &lt;a href="https://witscad.com/course/computer-architecture/chapter/io-communication-io-controller" target="_blank" rel="noopener">https://witscad.com/course/computer-architecture/chapter/io-communication-io-controller&lt;/a> _&lt;/p>
&lt;h3>시스템 버스의 주요 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="시스템-버스의-주요-구성-요소">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%eb%b2%84%ec%8a%a4%ec%9d%98-%ec%a3%bc%ec%9a%94-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>시스템 버스는 세 가지 주요 버스로 구성된다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>데이터 버스 (Data Bus):&lt;/p>
&lt;ul>
&lt;li>양방향 버스로, 시스템 구성 요소들 사이에서 실제 데이터를 전송한다.&lt;/li>
&lt;li>예를 들어, CPU가 메모리에서 데이터를 읽거나 쓸 때 사용된다.&lt;/li>
&lt;li>버스의 폭(width)은 한 번에 전송할 수 있는 데이터의 양을 결정한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>// 예시: 32비트 데이터 버스의 데이터 전송
DataBus.transfer(0x1234ABCD); // 32비트 데이터를 한 번에 전송&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>주소 버스 (Address Bus):&lt;/p>
&lt;ul>
&lt;li>단방향 버스로, 메모리나 I/O 장치의 주소를 지정한다.&lt;/li>
&lt;li>CPU가 접근하고자 하는 메모리 위치를 지정할 때 사용된다.&lt;/li>
&lt;li>버스의 폭은 시스템이 접근할 수 있는 메모리의 최대 크기를 결정한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>// 예시: 메모리 주소 지정
AddressBus.select(0x1000); // 메모리 주소 0x1000 선택&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>제어 버스 (Control Bus):&lt;/p>
&lt;ul>
&lt;li>양방향 버스로, 시스템의 동작을 제어하는 신호를 전달한다.&lt;/li>
&lt;li>읽기/쓰기 신호, 인터럽트 신호, 클록 신호 등을 전달한다.&lt;/li>
&lt;li>데이터 전송의 타이밍과 방향을 조정한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>// 예시: 제어 신호 전송
ControlBus.sendSignal(READ); // 읽기 신호 전송
ControlBus.sendSignal(WRITE); // 쓰기 신호 전송&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>시스템 버스의 동작 방식&lt;span class="hx-absolute -hx-mt-20" id="시스템-버스의-동작-방식">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%eb%b2%84%ec%8a%a4%ec%9d%98-%eb%8f%99%ec%9e%91-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>시스템 버스의 기본적인 동작 과정은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>메모리 읽기 연산:
&lt;ol>
&lt;li>CPU가 주소 버스에 메모리 주소 전송&lt;/li>
&lt;li>제어 버스를 통해 읽기 신호 전송&lt;/li>
&lt;li>메모리가 데이터 버스를 통해 데이터 전송&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>메모리 쓰기 연산:
&lt;ol>
&lt;li>CPU가 주소 버스에 메모리 주소 전송&lt;/li>
&lt;li>데이터 버스에 쓸 데이터 전송&lt;/li>
&lt;li>제어 버스를 통해 쓰기 신호 전송&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3>기능&lt;span class="hx-absolute -hx-mt-20" id="기능">&lt;/span>
&lt;a href="#%ea%b8%b0%eb%8a%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>데이터 전송: 구성 요소 간 정보 교환&lt;/li>
&lt;li>주소 지정: 메모리 위치나 I/O 장치 식별&lt;/li>
&lt;li>제어 신호 전달: 읽기/쓰기 작업 등의 동작 제어&lt;/li>
&lt;/ul>
&lt;h3>시스템 버스의 특성&lt;span class="hx-absolute -hx-mt-20" id="시스템-버스의-특성">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%eb%b2%84%ec%8a%a4%ec%9d%98-%ed%8a%b9%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>동기화 (Synchronization):&lt;/p>
&lt;ul>
&lt;li>버스 클록이 모든 데이터 전송을 동기화한다.&lt;/li>
&lt;li>클록 속도는 버스의 성능을 결정하는 주요 요소이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>중재 (Arbitration):&lt;/p>
&lt;ul>
&lt;li>여러 장치가 동시에 버스를 사용하려 할 때의 충돌을 방지한다.&lt;/li>
&lt;li>우선순위에 따라 버스 사용 권한을 할당한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">BusArbiter&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">request_bus_access&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">device&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_bus_available&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">grant_access&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">device&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_to_queue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">device&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>멀티플렉싱 (Multiplexing):&lt;/p>
&lt;ul>
&lt;li>한정된 버스 라인을 효율적으로 사용하기 위해 시분할 방식을 사용한다.&lt;/li>
&lt;li>주소와 데이터를 같은 라인으로 전송할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>시스템 버스의 성능 향상 기법&lt;span class="hx-absolute -hx-mt-20" id="시스템-버스의-성능-향상-기법">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%eb%b2%84%ec%8a%a4%ec%9d%98-%ec%84%b1%eb%8a%a5-%ed%96%a5%ec%83%81-%ea%b8%b0%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>버스 폭 확장:&lt;/p>
&lt;ul>
&lt;li>더 넓은 데이터 버스를 사용하여 한 번에 더 많은 데이터를 전송한다.&lt;/li>
&lt;li>32비트에서 64비트, 128비트로 확장하는 방식이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>계층적 버스 구조:&lt;/p>
&lt;ul>
&lt;li>여러 종류의 버스를 계층적으로 구성하여 성능을 최적화한다.&lt;/li>
&lt;li>예: CPU 버스, 메모리 버스, I/O 버스 등의 분리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>버스 파이프라이닝:&lt;/p>
&lt;ul>
&lt;li>여러 버스 작업을 중첩하여 처리함으로써 성능을 향상시킨다.&lt;/li>
&lt;li>한 작업이 완료되기 전에 다음 작업을 시작할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>성능 영향&lt;span class="hx-absolute -hx-mt-20" id="성능-영향">&lt;/span>
&lt;a href="#%ec%84%b1%eb%8a%a5-%ec%98%81%ed%96%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>버스 속도: 데이터 전송 속도에 직접적 영향&lt;/li>
&lt;li>버스 폭: 한 번에 전송할 수 있는 데이터 양 결정&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Byte Addressable Memory vs Word Addressable Memory</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/byte-addressable-memory-vs-word-addressable-memory/</link><pubDate>Thu, 19 Dec 2024 11:38:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/byte-addressable-memory-vs-word-addressable-memory/</guid><description>
&lt;h2>Byte Addressable Memory Vs Word Addressable Memory&lt;span class="hx-absolute -hx-mt-20" id="byte-addressable-memory-vs-word-addressable-memory">&lt;/span>
&lt;a href="#byte-addressable-memory-vs-word-addressable-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Byte Addressable Memory와 Word Addressable Memory는 컴퓨터 메모리의 주소 지정 방식을 설명하는 개념이다.&lt;br>
이 두 가지 방식은 메모리의 구조와 데이터 접근 방법에 중요한 차이를 나타낸다.&lt;/p>
&lt;p>
&lt;img src="../fig_a.jpg.webp" alt="Byte Addressable Memory Vs Word Addressable Memory" loading="lazy" />&lt;br>
_Sourece: &lt;a href="https://examradar.com/memory-organisation/" target="_blank" rel="noopener">https://examradar.com/memory-organisation/&lt;/a> _&lt;/p>
&lt;h3>Byte Addressable Memory&lt;span class="hx-absolute -hx-mt-20" id="byte-addressable-memory">&lt;/span>
&lt;a href="#byte-addressable-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Byte Addressable Memory는 각 바이트(8비트)마다 고유한 주소가 할당되어 개별적으로 접근할 수 있는 메모리 구조이다.&lt;/p>
&lt;p>가장 작은 주소 지정 단위(smallest addressable unit)는 1바이트(8비트)이며, 이를 통해 메모리의 각 바이트에 직접 접근할 수 있다.&lt;br>
CPU는 개별 바이트 단위로 메모리에 접근할 수 있으며, 워드(일반적으로 4바이트 또는 8바이트) 단위의 접근도 가능하다.&lt;br>
32비트 시스템에서는 2^32개의 주소를 가질 수 있어 최대 4GB의 메모리를 지원하며, 64비트 시스템에서는 훨씬 더 큰 주소 공간을 제공한다.&lt;/p>
&lt;p>세밀한 메모리 조작이 가능하며 다양한 데이터 타입을 효율적으로 저장할 수 있으며, 문자열 처리 등 바이트 단위 연산에 유리하다.&lt;/p>
&lt;blockquote>
&lt;p>엔디안(Endianness)&lt;/p>
&lt;ul>
&lt;li>메모리에 다중 바이트 데이터를 저장하는 순서를 나타낸다.&lt;/li>
&lt;li>주요 엔디안(Endianness)는 다음과 같다.
&lt;ul>
&lt;li>빅 엔디안(Big Endian):
&lt;ul>
&lt;li>가장 중요한 바이트(Most Significant Byte, MSB)가 가장 낮은 메모리 주소에 저장된다.&lt;/li>
&lt;li>사람이 숫자를 읽는 방식과 유사하여 직관적이다.&lt;/li>
&lt;li>주로 네트워크 프로토콜에서 사용되며, &amp;ldquo;네트워크 바이트 순서&amp;quot;라고도 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>리틀 엔디안(Little Endian):
&lt;ul>
&lt;li>가장 덜 중요한 바이트(Least Significant Byte, LSB)가 가장 낮은 메모리 주소에 저장된다.&lt;/li>
&lt;li>Intel x86, x64 프로세서 등 많은 현대 컴퓨터 시스템에서 사용된다.&lt;/li>
&lt;li>일부 수학적 연산에서 효율적일 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>예를 들어, 32비트 정수 0x11223344를 메모리에 저장할 때:
&lt;ul>
&lt;li>빅 엔디안: 11 22 33 44&lt;/li>
&lt;li>리틀 엔디안: 44 33 22 11&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>엔디안은 다중 바이트 데이터 처리에만 영향을 미치며, 단일 바이트 데이터(예: ASCII 문자)는 영향을 받지 않는다.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3>Word Addressable Memory&lt;span class="hx-absolute -hx-mt-20" id="word-addressable-memory">&lt;/span>
&lt;a href="#word-addressable-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Word Addressable Memory는 메모리의 각 워드(word)마다 고유한 주소가 할당되는 메모리 구조로, 여기서 워드는 프로세서가 한 번에 처리할 수 있는 데이터의 기본 단위를 의미한다. 일반적으로 워드 크기는 32비트(4바이트) 또는 64비트(8바이트)이다.&lt;br>
워드 단위로만 메모리에 접근할 수 있으며, 개별 바이트에 직접 접근할 수 없다.&lt;br>
바이트 주소 지정 방식에 비해 더 적은 주소로 더 큰 메모리 공간을 관리할 수 있으며, 워드 크기의 데이터 처리에 효율적이다. 또한, 작은 크기의 데이터 처리에는 비효율적일 수 있다.&lt;/p>
&lt;p>워드 크기에 따라 주소 지정 가능한 메모리 용량이 달라진다.&lt;br>
예를 들어:&lt;/p>
&lt;ul>
&lt;li>16비트 주소와 32비트 워드 시스템: 2^16 * 4바이트 = 256KB&lt;/li>
&lt;li>32비트 주소와 64비트 워드 시스템: 2^32 * 8바이트 = 32GB&lt;/li>
&lt;/ul>
&lt;p>큰 데이터 처리에 효율적이며, 주소 공간을 효율적으로 사용할 수 있다.&lt;br>
하지만, 작은 데이터 처리에 비효율적이며, 바이트 단위 조작이 어렵다.&lt;/p>
&lt;h3>비교 분석 표&lt;span class="hx-absolute -hx-mt-20" id="비교-분석-표">&lt;/span>
&lt;a href="#%eb%b9%84%ea%b5%90-%eb%b6%84%ec%84%9d-%ed%91%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Byte Addressable Memory&lt;/th>
&lt;th>Word Addressable Memory&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>주소 단위&lt;/strong>&lt;/td>
&lt;td>1 바이트&lt;/td>
&lt;td>1 워드 (보통 4바이트 또는 8바이트)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 접근&lt;/strong>&lt;/td>
&lt;td>바이트 단위로 가능&lt;/td>
&lt;td>워드 단위로만 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주소 공간&lt;/strong>&lt;/td>
&lt;td>더 많은 주소 필요&lt;/td>
&lt;td>더 적은 주소 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>유연성&lt;/strong>&lt;/td>
&lt;td>높음 (바이트 단위 조작 가능)&lt;/td>
&lt;td>제한적 (워드 단위로만 조작)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>메모리 효율&lt;/strong>&lt;/td>
&lt;td>세밀한 메모리 관리 가능&lt;/td>
&lt;td>워드 크기 미만의 데이터도 워드 전체 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>구현 복잡도&lt;/strong>&lt;/td>
&lt;td>상대적으로 복잡&lt;/td>
&lt;td>상대적으로 단순&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주요 용도&lt;/strong>&lt;/td>
&lt;td>범용 컴퓨팅 시스템&lt;/td>
&lt;td>특수 목적 프로세서, 일부 임베디드 시스템&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>데이터 정렬&lt;/strong>&lt;/td>
&lt;td>바이트 단위 정렬 가능&lt;/td>
&lt;td>워드 경계에 정렬 필요&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>세부 특성 비교&lt;span class="hx-absolute -hx-mt-20" id="세부-특성-비교">&lt;/span>
&lt;a href="#%ec%84%b8%eb%b6%80-%ed%8a%b9%ec%84%b1-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>메모리 접근 패턴&lt;span class="hx-absolute -hx-mt-20" id="메모리-접근-패턴">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ec%a0%91%ea%b7%bc-%ed%8c%a8%ed%84%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Byte Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">access_byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">memory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1"># 직접 바이트 접근&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Word Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">access_word&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">word_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">address&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">WORD_SIZE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">memory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">word_address&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1"># 워드 단위 접근&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>메모리 사용 효율&lt;span class="hx-absolute -hx-mt-20" id="메모리-사용-효율">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ec%82%ac%ec%9a%a9-%ed%9a%a8%ec%9c%a8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Byte Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">char&lt;/span> &lt;span class="n">small_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># 1바이트만 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Word Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">word&lt;/span> &lt;span class="n">small_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># 전체 워드(4바이트) 사용&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>주소 계산&lt;span class="hx-absolute -hx-mt-20" id="주소-계산">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%86%8c-%ea%b3%84%ec%82%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Byte Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">byte_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Word Addressable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">word_address&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">base_address&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="n">WORD_SIZE&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>시스템 수준 영향&lt;span class="hx-absolute -hx-mt-20" id="시스템-수준-영향">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%ec%88%98%ec%a4%80-%ec%98%81%ed%96%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>영향 분야&lt;/th>
&lt;th>Byte Addressable&lt;/th>
&lt;th>Word Addressable&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>메모리 관리&lt;/strong>&lt;/td>
&lt;td>더 복잡하지만 유연함&lt;/td>
&lt;td>단순하지만 제한적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>캐시 구성&lt;/strong>&lt;/td>
&lt;td>바이트 단위 접근 지원 필요&lt;/td>
&lt;td>워드 단위로 단순화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>버스 대역폭&lt;/strong>&lt;/td>
&lt;td>바이트 단위 전송 지원&lt;/td>
&lt;td>워드 단위 전송에 최적화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>명령어 세트&lt;/strong>&lt;/td>
&lt;td>바이트 조작 명령어 포함&lt;/td>
&lt;td>워드 단위 명령어 중심&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>성능 특성&lt;/strong>&lt;/td>
&lt;td>세밀한 조작 가능하나 오버헤드 있음&lt;/td>
&lt;td>단순하고 효율적이나 제한적&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 차이점들을 이해하는 것은 시스템 설계와 최적화에 중요합니다. 특히 저수준 프로그래밍이나 시스템 프로그래밍을 할 때 이러한 특성들을 고려해야 한다.&lt;/p>
&lt;hr>
&lt;h3>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3></description></item><item><title>메모리 접근 방법 (Memory Access Methods)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-access-methods/</link><pubDate>Wed, 18 Dec 2024 08:05:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-access-methods/</guid><description>
&lt;h2>메모리 접근 방식 (Memory Access Methods)&lt;span class="hx-absolute -hx-mt-20" id="메모리-접근-방식-memory-access-methods">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ec%a0%91%ea%b7%bc-%eb%b0%a9%ec%8b%9d-memory-access-methods" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>컴퓨터 시스템에서 메모리에 접근하는 주요 방식은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>순차적 접근 (Sequential Access)&lt;/p>
&lt;ul>
&lt;li>메모리를 선형적인 순서로 접근하는 방식.&lt;/li>
&lt;li>데이터를 처음부터 순서대로 읽거나 쓰며, 특정 위치에 접근하려면 그 앞의 모든 데이터를 거쳐야 한다.&lt;/li>
&lt;li>주로 자기 테이프와 같은 저장 장치에서 사용된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>직접 접근 (Direct Access)&lt;/p>
&lt;ul>
&lt;li>각 메모리 블록이 고유한 주소를 가지고 있어 직접 접근이 가능하다.&lt;/li>
&lt;li>일반적인 위치로 직접 접근한 후, 순차적 검색을 통해 최종 목적지에 도달한다.&lt;/li>
&lt;li>하드 디스크와 같은 저장 장치에서 주로 사용된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>랜덤 접근 (Random Access)&lt;/p>
&lt;ul>
&lt;li>메모리의 어떤 위치든 동일한 시간 내에 직접 접근할 수 있는 방식.&lt;/li>
&lt;li>물리적 위치에 관계없이 데이터에 빠르게 접근할 수 있다.&lt;/li>
&lt;li>RAM(Random Access Memory)이 대표적인 예시.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>연관 접근 (Associative Access)&lt;/p>
&lt;ul>
&lt;li>데이터의 내용을 기반으로 메모리에 접근하는 방식.&lt;/li>
&lt;li>특정 패턴이나 값을 가진 데이터를 빠르게 찾을 수 있다.&lt;/li>
&lt;li>캐시 메모리에서 주로 사용되며, 병렬 검색이 가능하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>기타 메모리 접근 방식&lt;span class="hx-absolute -hx-mt-20" id="기타-메모리-접근-방식">&lt;/span>
&lt;a href="#%ea%b8%b0%ed%83%80-%eb%a9%94%eb%aa%a8%eb%a6%ac-%ec%a0%91%ea%b7%bc-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>기본적인 메모리 접근 방식(순차적, 직접, 랜덤, 연관)을 기반으로 하되, 특정 목적이나 최적화를 위해 확장되거나 변형된 형태의 메모리 접근 방식이 있다.&lt;br>
이들은 메모리 접근 방식의 범주에 포함되며, 기본적인 접근 방식들과 밀접한 관련이 있다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>가상 메모리 접근 (Virtual Memory Access):&lt;br>
가상 메모리는 물리적 메모리의 한계를 극복하기 위한 기술로, 주로 페이징이나 세그멘테이션을 사용하여 구현된다.&lt;br>
이는 랜덤 접근 방식을 기반으로 하지만, 추가적인 주소 변환 과정을 포함한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>캐시 메모리 접근 (Cache Memory Access):&lt;br>
캐시 메모리는 주로 랜덤 접근 방식을 사용하며, 데이터 지역성 원리를 활용하여 빠른 접근을 제공한다.&lt;br>
이는 기본적인 랜덤 접근 방식을 최적화한 형태로 볼 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>메모리 매핑된 입출력 (Memory-Mapped I/O):&lt;br>
이 방식은 입출력 장치를 메모리의 일부로 취급하여 접근한다.&lt;br>
이는 직접 접근 방식의 확장으로 볼 수 있으며, 파일이나 장치에 대한 접근을 메모리 접근과 동일하게 처리한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>세그먼트 기반 접근 (Segment-Based Access):&lt;br>
세그멘테이션은 메모리를 논리적 단위로 나누어 관리하는 기법으로, 직접 접근과 랜덤 접근의 특성을 모두 가지고 있습다. 이는 기본적인 메모리 접근 방식을 프로그램의 논리적 구조에 맞게 확장한 것으로 볼 수 있다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>메모리 주소 지정 방식 (Memory Address Modes)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-address-modes/</link><pubDate>Wed, 18 Dec 2024 08:04:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-address-modes/</guid><description>
&lt;h2>메모리 주소 지정 방식 (Memory Address Modes)&lt;span class="hx-absolute -hx-mt-20" id="메모리-주소-지정-방식-memory-address-modes">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ec%a3%bc%ec%86%8c-%ec%a7%80%ec%a0%95-%eb%b0%a9%ec%8b%9d-memory-address-modes" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>메모리 주소 지정 방식(Memory Address Modes)은 CPU가 메모리의 특정 위치에 어떻게 접근하는지를 나타내는 방법이다.&lt;/p>
&lt;h3>유형&lt;span class="hx-absolute -hx-mt-20" id="유형">&lt;/span>
&lt;a href="#%ec%9c%a0%ed%98%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>즉시 주소 지정 방식 (Immediate Addressing):&lt;/p>
&lt;ul>
&lt;li>데이터가 명령어 자체에 포함되어 있다.&lt;/li>
&lt;li>예: &amp;ldquo;5를 더해라&amp;rdquo; 라고 직접 지시하는 것과 같다.&lt;/li>
&lt;li>가장 빠르지만, 큰 데이터를 다루기 어렵다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>직접 주소 지정 방식 (Direct Addressing):&lt;/p>
&lt;ul>
&lt;li>명령어에 데이터가 있는 메모리 주소를 직접 지정한다.&lt;/li>
&lt;li>예: &amp;ldquo;주소 100번에 있는 값을 가져와라&amp;rdquo; 라고 지시하는 것과 같다.&lt;/li>
&lt;li>간단하고 이해하기 쉽다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>간접 주소 지정 방식 (Indirect Addressing):&lt;/p>
&lt;ul>
&lt;li>명령어에 주소를 담고 있는 메모리 위치를 지정한다.&lt;/li>
&lt;li>예: &amp;ldquo;주소 100번에 적힌 주소로 가서 그 값을 가져와라&amp;rdquo; 라고 지시하는 것과 같다.&lt;/li>
&lt;li>더 많은 메모리 위치에 접근할 수 있지만, 약간 복잡하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>인덱스 주소 지정 방식 (Indexed Addressing):&lt;/p>
&lt;ul>
&lt;li>기본 주소에 인덱스를 더해 실제 주소를 계산한다.&lt;/li>
&lt;li>예: &amp;ldquo;주소 100번부터 시작해서 3번째 위치의 값을 가져와라&amp;rdquo; 라고 지시하는 것과 같다.&lt;/li>
&lt;li>배열이나 리스트 같은 데이터 구조를 다룰 때 유용하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>인터럽트 (Interrupt)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/interrupt/</link><pubDate>Fri, 06 Dec 2024 06:50:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/i-o-systems/interrupt/</guid><description>
&lt;h2>인터럽트 (Interrupt)&lt;span class="hx-absolute -hx-mt-20" id="인터럽트-interrupt">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8-interrupt" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>CPU가 프로그램을 실행하고 있을 때, 예상치 못한 상황이나 특정 이벤트가 발생하여 처리가 필요한 경우 CPU에게 알려 처리할 수 있도록 하는 메커니즘.&lt;br>
하드웨어나 소프트웨어에 의해 발생할 수 있으며, 운영 체제가 다양한 이벤트에 효율적으로 대응할 수 있게 해준다.&lt;/p>
&lt;p>인터럽트는 프로세서에게 현재 실행 중인 코드를 중단하고 특정 이벤트를 처리하도록 요청하는 신호이다.&lt;/p>
&lt;p>이를 통해 운영 체제는 다음과 같은 목적을 달성할 수 있다:&lt;/p>
&lt;ol>
&lt;li>비동기적 이벤트 처리&lt;/li>
&lt;li>시스템 자원의 효율적 관리&lt;/li>
&lt;li>실시간 응답성 향상&lt;/li>
&lt;li>멀티태스킹 지원&lt;/li>
&lt;/ol>
&lt;h3>인터럽트 관련 주요 개념&lt;span class="hx-absolute -hx-mt-20" id="인터럽트-관련-주요-개념">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8-%ea%b4%80%eb%a0%a8-%ec%a3%bc%ec%9a%94-%ea%b0%9c%eb%85%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>인터럽트 벡터: 각 인터럽트 유형별로 실행될 처리 루틴의 주소를 담고 있는 테이블.&lt;/li>
&lt;li>인터럽트 마스킹: 특정 인터럽트를 일시적으로 무시하도록 설정하는 기능. 중요한 작업 수행 중에 방해받지 않기 위해 사용된다.&lt;/li>
&lt;li>인터럽트 지연: 우선순위가 높은 인터럽트 처리를 위해 현재 처리 중인 인터럽트를 지연시키는 것.&lt;/li>
&lt;li>인터럽트 핸들러(ISR): 인터럽트 발생 시 실행되는 특별한 코드 블록으로 다음과 같은 역할을 수행한다.&lt;br>
1. 인터럽트 처리: 인터럽트의 원인을 파악하고 적절한 대응을 수행한다.&lt;br>
2. 신속한 대응: 시간에 민감한 이벤트를 즉각적으로 처리하여 시스템의 반응성을 유지한다.&lt;br>
3. 컨텍스트 전환: 현재 실행 중인 프로세스의 상태를 저장하고, 인터럽트 처리 후 원래 상태로 복원한다.&lt;br>
4. 하드웨어 상태 관리: 인터럽트 플래그를 적절히 설정하여 하드웨어 상태를 관리한다.&lt;/li>
&lt;/ul>
&lt;h3>인터럽트의 중요성&lt;span class="hx-absolute -hx-mt-20" id="인터럽트의-중요성">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8%ec%9d%98-%ec%a4%91%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>인터럽트는 다음과 같은 이유로 운영 체제에서 중요한 역할을 한다:&lt;/p>
&lt;ol>
&lt;li>실시간 이벤트 처리: 외부 장치의 요청에 신속하게 대응할 수 있다.&lt;/li>
&lt;li>시스템 효율성 향상: 폴링 방식에 비해 CPU 자원을 효율적으로 사용할 수 있다.&lt;/li>
&lt;li>멀티태스킹 지원: 여러 프로세스 간의 빠른 전환을 가능하게 한다.&lt;/li>
&lt;li>예외 상황 처리: 시스템 오류나 예외 상황에 대응할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>인터럽트 처리 과정&lt;span class="hx-absolute -hx-mt-20" id="인터럽트-처리-과정">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8-%ec%b2%98%eb%a6%ac-%ea%b3%bc%ec%a0%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>인터럽트가 발생하면 다음과 같은 순서로 처리된다.&lt;/p>
&lt;ol>
&lt;li>인터럽트 발생 시 CPU는 현재 작업을 중단한다.&lt;/li>
&lt;li>현재 프로세스의 상태를 PCB(Process Control Block)에 저장한다.&lt;/li>
&lt;li>프로세서 모드를 커널 모드로 전환&lt;/li>
&lt;li>인터럽트 벡터 테이블을 참조하여 적절한 인터럽트 서비스 루틴(ISR: Interrupt Service Routine) 위치 확인&lt;/li>
&lt;li>인터럽트 서비스 루틴(ISR: Interrupt Service Routine) 실행&lt;/li>
&lt;li>인터럽트 처리 완료 후 원래 프로세스로 복귀&lt;/li>
&lt;/ol>
&lt;h3>인터럽트의 종류&lt;span class="hx-absolute -hx-mt-20" id="인터럽트의-종류">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8%ec%9d%98-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>인터럽트는 크게 두 가지로 분류된다.&lt;/p>
&lt;h4>하드웨어 인터럽트&lt;span class="hx-absolute -hx-mt-20" id="하드웨어-인터럽트">&lt;/span>
&lt;a href="#%ed%95%98%eb%93%9c%ec%9b%a8%ec%96%b4-%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>외부 장치에 의해 발생하는 인터럽트로, 다음과 같은 예가 있다:&lt;/p>
&lt;ul>
&lt;li>키보드 입력&lt;/li>
&lt;li>마우스 움직임&lt;/li>
&lt;li>타이머 인터럽트&lt;/li>
&lt;li>I/O 장치의 데이터 전송 완료&lt;/li>
&lt;/ul>
&lt;p>하드웨어 인터럽트는 다시 마스크 가능 인터럽트와 마스크 불가능 인터럽트로 나뉜다.&lt;/p>
&lt;h4>소프트웨어 인터럽트&lt;span class="hx-absolute -hx-mt-20" id="소프트웨어-인터럽트">&lt;/span>
&lt;a href="#%ec%86%8c%ed%94%84%ed%8a%b8%ec%9b%a8%ec%96%b4-%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>프로그램 실행 중 발생하는 인터럽트로, 다음과 같은 경우에 발생한다:&lt;/p>
&lt;ul>
&lt;li>시스템 호출(system call)&lt;/li>
&lt;li>0으로 나누기 등의 예외 상황&lt;/li>
&lt;li>프로그램 오류&lt;/li>
&lt;li>특정 명령어 실행 (예: 인터럽트 명령어)&lt;/li>
&lt;/ul>
&lt;h3>인터럽트 우선순위&lt;span class="hx-absolute -hx-mt-20" id="인터럽트-우선순위">&lt;/span>
&lt;a href="#%ec%9d%b8%ed%84%b0%eb%9f%bd%ed%8a%b8-%ec%9a%b0%ec%84%a0%ec%88%9c%ec%9c%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>모든 인터럽트가 동일한 중요도를 가지지 않는다.&lt;/p>
&lt;p>일반적인 우선순위는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>전원 이상 인터럽트 (가장 높음)&lt;/li>
&lt;li>기계 착오 인터럽트&lt;/li>
&lt;li>외부 인터럽트&lt;/li>
&lt;li>입출력 인터럽트&lt;/li>
&lt;li>프로그램 검사 인터럽트 (가장 낮음)&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>캐싱 (Caching)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/</link><pubDate>Sat, 19 Oct 2024 14:14:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/</guid><description>
&lt;h2>캐싱 (Caching)&lt;span class="hx-absolute -hx-mt-20" id="캐싱-caching">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%b1-caching" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>캐싱은 자주 사용되는 데이터나 계산 결과를 빠르게 접근할 수 있는 위치에 임시로 저장하는 기술이다.&lt;br>
이는 데이터를 다시 계산하거나 원래 위치에서 다시 가져올 필요 없이 빠르게 접근할 수 있게 해준다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 캐싱의 기본 프로세스를 보여주는 예제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">CachingProcess&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">storage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1"># 캐시 저장소&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stats&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;hits&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;misses&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="c1"># 캐싱 효율성 측정&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 1. 캐시 확인 단계&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">storage&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stats&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;hits&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_handle_cache_hit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 2. 캐시 미스 처리 단계&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stats&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;misses&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_fetch_from_source&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 3. 캐시 저장 단계&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">_store_in_cache&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">_handle_cache_hit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 캐시 히트 시의 처리 로직&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">storage&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">_fetch_from_source&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 원본 소스에서 데이터를 가져오는 로직&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Data for &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">_store_in_cache&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 캐시 저장 로직&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">storage&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>캐싱의 목적&lt;span class="hx-absolute -hx-mt-20" id="캐싱의-목적">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%b1%ec%9d%98-%eb%aa%a9%ec%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>성능 향상: 데이터 접근 속도를 높여 전체적인 시스템 성능을 개선한다.&lt;/li>
&lt;li>서버 부하 감소: 반복적인 요청을 줄여 서버의 작업량을 감소시킨다.&lt;/li>
&lt;li>네트워크 대역폭 절약: 데이터 전송량을 줄여 네트워크 리소스를 절약한다.&lt;/li>
&lt;/ol>
&lt;h3>캐싱(Caching)의 주요 요소&lt;span class="hx-absolute -hx-mt-20" id="캐싱caching의-주요-요소">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%b1caching%ec%9d%98-%ec%a3%bc%ec%9a%94-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>캐시(Cache): 데이터를 임시 저장하는 공간&lt;/li>
&lt;li>캐시 정책(Cache Policy): 데이터를 저장하고 관리하는 규칙&lt;/li>
&lt;li>캐시 전략(Cache Strategy): 캐시를 효율적으로 활용하는 방법&lt;/li>
&lt;li>캐시 무효화(Cache Invalidation): 원본 데이터와 캐시된 데이터의 동기화&lt;/li>
&lt;li>캐시 일관성(Cache Coherence)&lt;/li>
&lt;/ol>
&lt;h3>캐싱의 작동 원리&lt;span class="hx-absolute -hx-mt-20" id="캐싱의-작동-원리">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%b1%ec%9d%98-%ec%9e%91%eb%8f%99-%ec%9b%90%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>데이터 요청: 프로그램이 데이터를 요청한다.&lt;/li>
&lt;li>캐시 확인: 시스템은 먼저 캐시에서 해당 데이터를 찾는다.&lt;/li>
&lt;li>캐시 히트(Cache Hit): 데이터가 캐시에 있으면 즉시 반환한다.&lt;/li>
&lt;li>캐시 미스(Cache Miss): 데이터가 캐시에 없으면 원본 소스에서 가져와 캐시에 저장한 후 반환한다.&lt;/li>
&lt;/ol>
&lt;h3>캐싱의 적용 분야&lt;span class="hx-absolute -hx-mt-20" id="캐싱의-적용-분야">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%b1%ec%9d%98-%ec%a0%81%ec%9a%a9-%eb%b6%84%ec%95%bc" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>웹 페이지 캐싱: 정적 콘텐츠를 저장하여 빠르게 제공한다.&lt;/li>
&lt;li>데이터베이스 캐싱: 쿼리 결과를 저장하여 반복적인 요청에 대한 응답 시간을 단축한다.&lt;/li>
&lt;li>CDN(Content Delivery Network): 전 세계에 분산된 서버에 콘텐츠를 캐싱하여 빠른 로딩 속도를 제공한다.&lt;/li>
&lt;/ol>
&lt;h3>캐싱의 장점&lt;span class="hx-absolute -hx-mt-20" id="캐싱의-장점">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%b1%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>빠른 응답 시간: 사용자 경험을 개선한다.&lt;/li>
&lt;li>서버 부하 감소: 시스템의 확장성과 안정성을 향상시킨다.&lt;/li>
&lt;li>비용 절감: 데이터 전송 및 처리 비용을 줄인다.&lt;/li>
&lt;/ol>
&lt;h3>캐싱 구현 시 고려사항&lt;span class="hx-absolute -hx-mt-20" id="캐싱-구현-시-고려사항">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%b1-%ea%b5%ac%ed%98%84-%ec%8b%9c-%ea%b3%a0%eb%a0%a4%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>캐시 크기: 너무 작으면 효과가 적고, 너무 크면 메모리 낭비가 됩니다.&lt;/li>
&lt;li>캐시 갱신 정책: 데이터 일관성을 유지하기 위해 적절한 갱신 전략이 필요합니다.&lt;/li>
&lt;li>캐시 교체 알고리즘: LRU, LFU, FIFO 등 상황에 맞는 알고리즘을 선택해야 한다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Cache Memory</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/cache-memory/</link><pubDate>Sat, 19 Oct 2024 11:36:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/cache-memory/</guid><description>
&lt;h2>Cache Memory&lt;span class="hx-absolute -hx-mt-20" id="cache-memory">&lt;/span>
&lt;a href="#cache-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>캐시 메모리(Cache Memory)는 컴퓨터 아키텍처에서 중요한 역할을 하는 CPU와 주 메모리(RAM) 사이에 위치한 소규모의 고속 메모리이다.&lt;br>
주요 목적은 자주 사용되는 데이터와 명령어를 CPU 가까이에 저장하여 접근 시간을 줄이고 전체 시스템 성능을 향상시키는 것이다.&lt;/p>
&lt;h3>특징&lt;span class="hx-absolute -hx-mt-20" id="특징">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>속도: RAM보다 10-100배 빠르며, 응답 시간은 몇 나노초에 불과하다.&lt;/li>
&lt;li>용량: RAM보다 작지만 더 빠른 SRAM을 사용한다.&lt;/li>
&lt;li>비용: 단위 용량당 RAM보다 비싸지만 성능이 월등히 높다.&lt;/li>
&lt;li>위치: CPU 칩 내부 또는 매우 가까운 곳에 위치한다.&lt;/li>
&lt;/ol>
&lt;h3>작동 원리&lt;span class="hx-absolute -hx-mt-20" id="작동-원리">&lt;/span>
&lt;a href="#%ec%9e%91%eb%8f%99-%ec%9b%90%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>지역성 원리: 최근 접근한 데이터나 명령어는 가까운 미래에 다시 사용될 가능성이 높다는 원리를 활용한다.&lt;/li>
&lt;li>캐시 히트와 미스: CPU가 데이터를 요청할 때 캐시에서 찾으면 &amp;lsquo;캐시 히트&amp;rsquo;, 찾지 못하면 &amp;lsquo;캐시 미스&amp;rsquo;가 발생한다.&lt;/li>
&lt;li>캐시 정책: 어떤 데이터를 캐시에 유지할지 결정하는 정책으로, LRU(Least Recently Used)나 MRU(Most Recently Used) 등이 있다.&lt;/li>
&lt;/ol>
&lt;h3>캐시 레벨&lt;span class="hx-absolute -hx-mt-20" id="캐시-레벨">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%9c-%eb%a0%88%eb%b2%a8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>L1 캐시: CPU에 가장 가까운 최소, 최고속 캐시로, 보통 명령어용(L1i)과 데이터용(L1d)으로 나뉜다.&lt;/li>
&lt;li>L2 캐시: L1보다 크고 느리지만 여전히 고속인 캐시이다.&lt;/li>
&lt;li>L3 캐시: 더 큰 용량을 제공하며, 여러 코어가 공유할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>캐시 매핑 기법&lt;span class="hx-absolute -hx-mt-20" id="캐시-매핑-기법">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%9c-%eb%a7%a4%ed%95%91-%ea%b8%b0%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>직접 매핑: 각 메모리 블록이 특정 캐시 라인에 매핑된다.&lt;/li>
&lt;li>완전 연관 매핑: 메모리 블록이 어느 캐시 라인에나 로드될 수 있다.&lt;/li>
&lt;li>집합 연관 매핑: 직접과 완전 연관의 절충안으로, 메모리 블록이 특정 집합 내 어느 라인에나 로드될 수 있다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>컴퓨터 구성 요소 (Components of Computer Architecture)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/components-of-computer-architecture/</link><pubDate>Mon, 23 Sep 2024 16:50:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/components-of-computer-architecture/</guid><description>
&lt;h2>컴퓨터 구성 요소 (Components of Computer Architecture)&lt;span class="hx-absolute -hx-mt-20" id="컴퓨터-구성-요소-components-of-computer-architecture">&lt;/span>
&lt;a href="#%ec%bb%b4%ed%93%a8%ed%84%b0-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c-components-of-computer-architecture" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>이 구성 요소들의 상호작용을 통해 컴퓨터가 작동하게 된다.&lt;/p>
&lt;h3>하드웨어&lt;span class="hx-absolute -hx-mt-20" id="하드웨어">&lt;/span>
&lt;a href="#%ed%95%98%eb%93%9c%ec%9b%a8%ec%96%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>CPU (중앙처리장치)&lt;span class="hx-absolute -hx-mt-20" id="cpu-중앙처리장치">&lt;/span>
&lt;a href="#cpu-%ec%a4%91%ec%95%99%ec%b2%98%eb%a6%ac%ec%9e%a5%ec%b9%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>CPU는 컴퓨터의 &amp;lsquo;두뇌&amp;rsquo; 역할을 하는 핵심 부품.&lt;br>
CPU의 성능은 처리 속도(클럭 속도)와 코어의 개수로 측정되며, 이는 컴퓨터의 전반적인 성능에 직접적인 영향을 미친다.&lt;/p>
&lt;p>주요 기능:&lt;/p>
&lt;ul>
&lt;li>메모리에서 명령어를 읽어들이고 해석하여 실행&lt;/li>
&lt;li>데이터 처리 및 연산 수행&lt;/li>
&lt;li>다른 하드웨어 구성 요소 제어&lt;/li>
&lt;/ul>
&lt;p>구성 요소:&lt;/p>
&lt;ul>
&lt;li>ALU (산술논리연산장치): 산술 연산과 논리 연산을 수행&lt;/li>
&lt;li>제어장치: 명령어를 해석하고 실행을 제어&lt;/li>
&lt;li>레지스터: 데이터와 명령어를 임시로 저장하는 고속 메모리&lt;/li>
&lt;/ul>
&lt;h4>메인보드(마더보드)&lt;span class="hx-absolute -hx-mt-20" id="메인보드마더보드">&lt;/span>
&lt;a href="#%eb%a9%94%ec%9d%b8%eb%b3%b4%eb%93%9c%eb%a7%88%eb%8d%94%eb%b3%b4%eb%93%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>모든 부품들을 연결하고 통신을 가능하게 하는 &amp;lsquo;중앙 통로&amp;rsquo; 역할을 한다.&lt;br>
CPU, RAM, 그래픽카드 등 주요 부품들이 메인보드에 장착되며, 각 부품 간의 데이터 전송을 관리한다.&lt;br>
마더보드에는 다양한 확장 슬롯과 포트가 있어 추가 부품을 장착할 수 있다.&lt;br>
컴퓨터 시스템의 성능, 안정성, 확장성을 결정짓는 중요한 요소가 된다.&lt;/p>
&lt;p>주요 특징:&lt;/p>
&lt;ul>
&lt;li>하드웨어 통합 및 연결: 메인보드는 CPU, RAM, 그래픽 카드, 저장 장치 등 다양한 하드웨어 구성 요소를 연결하고 통합한다. 이를 통해 각 구성 요소 간의 원활한 통신과 상호작용을 가능하게 한다.&lt;/li>
&lt;li>확장성 제공: 메인보드는 PCIe 슬롯, RAM 슬롯, SATA 포트 등 다양한 확장 슬롯과 포트를 제공하여 시스템의 확장성을 보장한다. 이를 통해 사용자는 필요에 따라 추가적인 하드웨어를 설치하거나 업그레이드할 수 있다.&lt;/li>
&lt;li>칩셋 기능: 메인보드에 탑재된 칩셋은 다음과 같은 중요한 기능을 수행한다:
&lt;ul>
&lt;li>시스템 버스 관리&lt;/li>
&lt;li>PCI Express 컨트롤&lt;/li>
&lt;li>USB 및 SATA 포트 제어&lt;/li>
&lt;li>메모리 관리&lt;/li>
&lt;li>오버클럭과 전원 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>BIOS/UEFI 제공: 메인보드는 BIOS 또는 UEFI를 통해 하드웨어 초기화와 부팅 과정을 관리한다. 이를 통해 사용자는 시스템 설정을 조정하고 하드웨어를 최적화할 수 있다.&lt;/li>
&lt;li>전원 관리: 메인보드는 컴퓨터 전원 공급 장치로부터 전기를 받아 CPU, 칩셋, 메인 메모리, 확장 카드에 적절히 분배한다. 이를 통해 시스템의 안정적인 작동을 보장한다.&lt;/li>
&lt;li>폼 팩터: 메인보드는 ATX, micro-ATX, mini-ITX 등 다양한 폼 팩터로 제공되어 다양한 케이스와 사용 환경에 적합하게 선택할 수 있다.&lt;/li>
&lt;li>온보드 기능: 최근의 메인보드는 사운드 카드, 네트워크 카드 등을 내장하고 있어 추가적인 확장 카드 없이도 기본적인 기능을 제공한다.&lt;/li>
&lt;/ul>
&lt;h4>전원공급장치(PSU)&lt;span class="hx-absolute -hx-mt-20" id="전원공급장치psu">&lt;/span>
&lt;a href="#%ec%a0%84%ec%9b%90%ea%b3%b5%ea%b8%89%ec%9e%a5%ec%b9%98psu" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>컴퓨터의 모든 부품에 적절한 전력을 공급하는 장치.&lt;br>
가정용 교류전원(AC)를 컴퓨터 부품이 사용할 수 있는 직류전원(DC)으로 변환하며, 각 부품에 맞는 전압으로 안정적인 전원을 공급한다.&lt;/p>
&lt;h4>그래픽카드(GPU)&lt;span class="hx-absolute -hx-mt-20" id="그래픽카드gpu">&lt;/span>
&lt;a href="#%ea%b7%b8%eb%9e%98%ed%94%bd%ec%b9%b4%eb%93%9cgpu" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>화면 출력과 관련된 모든 연산을 처리하는 전문 프로세서.&lt;br>
특히 3D 그래픽이나 동영상 처리에서 중요한 역할을 한다. 최근에는 인공지능 연산에도 많이 활용되고 있다.&lt;/p>
&lt;p>주요 특징:&lt;/p>
&lt;ul>
&lt;li>병렬 처리 능력: GPU의 가장 큰 특징은 수천 개의 작은 프로세싱 코어를 가지고 있어 대량의 데이터를 동시에 처리할 수 있다. 이러한 구조는 단순하지만 많은 연산을 병렬로 수행하는 데 최적화되어 있다.&lt;/li>
&lt;li>그래픽 처리 특화: GPU는 원래 그래픽 연산을 빠르게 처리하기 위해 설계됨. 특히 3D 그래픽에서 필요한 행렬 연산과 같은 복잡한 수학적 계산을 효율적으로 수행할 수 있다.&lt;/li>
&lt;li>전용 메모리 (VRAM): GPU는 자체적인 고속 메모리인 VRAM을 갖추고 있어 텍스처, 셰이더 및 기타 그래픽 데이터를 빠르게 처리할 수 있. VRAM의 용량은 그래픽 카드의 성능에 중요한 영향을 미친다.&lt;/li>
&lt;li>다양한 응용 분야: GPU는 그래픽 처리 외에도 머신러닝, 암호화폐 채굴, 과학 연산 등 다양한 분야에서 활용되고 있다. 이는 GPU의 병렬 처리 능력이 이러한 작업에 매우 적합하기 때문이다.&lt;/li>
&lt;li>아키텍처의 중요성: GPU의 아키텍처는 성능을 결정하는 중요한 요소. 최신 아키텍처일수록 효율성, 명령어 세트, 그래픽 처리 기능 등이 향상되어 더 나은 성능을 제공한다.&lt;/li>
&lt;li>전력 효율성: 최신 GPU는 높은 성능을 제공하면서도 전력 효율성을 고려하여 설계된다. 특히 노트북용 GPU의 경우 전력 소비와 열 관리가 중요한 고려 사항.&lt;/li>
&lt;li>확장성: 일부 시스템에서는 여러 개의 GPU를 동시에 사용할 수 있어 더 높은 성능을 얻을 수 있다. 이를 SLI(NVIDIA) 또는 CrossFire(AMD)라고 한다.&lt;/li>
&lt;/ul>
&lt;h4>메모리 (주기억장치)&lt;span class="hx-absolute -hx-mt-20" id="메모리-주기억장치">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ec%a3%bc%ea%b8%b0%ec%96%b5%ec%9e%a5%ec%b9%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>메모리는 현재 실행 중인 프로그램의 명령어와 데이터를 저장하는 역할을 한다.&lt;/p>
&lt;p>주요 특징:&lt;/p>
&lt;ul>
&lt;li>RAM (Random Access Memory)이 주로 사용됨&lt;/li>
&lt;li>CPU가 직접 접근 가능한 고속 저장 장치&lt;/li>
&lt;li>전원이 꺼지면 저장된 정보가 사라지는 휘발성 메모리&lt;/li>
&lt;/ul>
&lt;h4>보조기억장치&lt;span class="hx-absolute -hx-mt-20" id="보조기억장치">&lt;/span>
&lt;a href="#%eb%b3%b4%ec%a1%b0%ea%b8%b0%ec%96%b5%ec%9e%a5%ec%b9%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>보조기억장치는 대용량의 데이터와 프로그램을 영구적으로 저장하는 역할을 한다.&lt;/p>
&lt;p>주요 특징:&lt;/p>
&lt;ul>
&lt;li>HDD, SSD, USB 메모리 등이 해당&lt;/li>
&lt;li>비휘발성 저장 장치로, 전원이 꺼져도 데이터 유지&lt;/li>
&lt;li>메모리에 비해 접근 속도가 느리지만 대용량 저장 가능&lt;/li>
&lt;/ul>
&lt;h4>입출력장치&lt;span class="hx-absolute -hx-mt-20" id="입출력장치">&lt;/span>
&lt;a href="#%ec%9e%85%ec%b6%9c%eb%a0%a5%ec%9e%a5%ec%b9%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>입출력장치는 컴퓨터와 외부 세계를 연결하는 인터페이스 역할을 한다.&lt;/p>
&lt;p>입력장치&lt;br>
컴퓨터에 정보를 입력하는 모든 장치.&lt;br>
가장 기본적인 것이 키보드와 마우스이며, 이 외에도 마이크, 웹캠, 스캐너 등이 있다.&lt;br>
이러한 장치들은 사용자의 명령이나 데이터를 컴퓨터가 이해할 수 있는 디지털 신호로 변환하는 역할을 한다.&lt;br>
출력장치&lt;br>
컴퓨터에서 처리된 정보를 사용자가 이해할 수 있는 형태로 보여주는 장치.&lt;br>
모니터가 가장 대표적이며, 스피커, 프린터 등이 여기에 속한다.&lt;br>
이러한 장치들은 디지털 신호를 우리가 인식할 수 있는 형태(시각, 청각 등)로 변환한다.&lt;/p>
&lt;h4>시스템 버스&lt;span class="hx-absolute -hx-mt-20" id="시스템-버스">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%eb%b2%84%ec%8a%a4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>컴퓨터 내부의 다양한 구성 요소들 간에 데이터와 제어 신호를 전송하는 통로 역할을 한다.&lt;/p>
&lt;p>주요 기능:&lt;/p>
&lt;ol>
&lt;li>데이터 전송: CPU, 메모리, 주변 장치 간의 데이터 교환을 가능하게 합니다.&lt;/li>
&lt;li>통신 경로 제공: 컴퓨터의 여러 부품들이 서로 통신할 수 있는 표준화된 경로를 제공합니다.&lt;/li>
&lt;li>성능 향상: 효율적인 데이터 전송을 통해 전체 시스템의 성능을 향상시킵니다.&lt;/li>
&lt;li>확장성 지원: 새로운 하드웨어 구성 요소를 쉽게 추가할 수 있게 합니다.&lt;/li>
&lt;/ol>
&lt;p>유형:&lt;/p>
&lt;ul>
&lt;li>데이터 버스: 실제 데이터를 전송합니다. 양방향으로 작동합니다.&lt;/li>
&lt;li>주소 버스: 데이터의 출발지와 목적지 주소를 지정합니다. 단방향으로 작동합니다.&lt;/li>
&lt;li>제어 버스: 데이터 전송을 제어하는 신호를 전달합니다. 양방향으로 작동합니다&lt;/li>
&lt;/ul>
&lt;h2>소프트웨어&lt;span class="hx-absolute -hx-mt-20" id="소프트웨어">&lt;/span>
&lt;a href="#%ec%86%8c%ed%94%84%ed%8a%b8%ec%9b%a8%ec%96%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>운영체제(OS)&lt;span class="hx-absolute -hx-mt-20" id="운영체제os">&lt;/span>
&lt;a href="#%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9cos" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>하드웨어와 소프트웨어를 관리하고 제어하는 기본 소프트웨어.&lt;br>
Windows, macOS, Linux 등이 대표적.&lt;br>
운영체제는 하드웨어 자원을 효율적으로 관리하고, 사용자가 컴퓨터를 쉽게 사용할 수 있도록 인터페이스를 제공한다.&lt;/p>
&lt;h3>응용프로그램&lt;span class="hx-absolute -hx-mt-20" id="응용프로그램">&lt;/span>
&lt;a href="#%ec%9d%91%ec%9a%a9%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%a8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>특정 작업을 수행하기 위한 소프트웨어.&lt;br>
워드프로세서, 웹브라우저, 게임 등이 여기에 속한다.&lt;br>
이러한 프로그램들은 운영체제 위에서 실행되며, 운영체제가 제공하는 서비스를 활용한다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>CPU</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/cpu/</link><pubDate>Mon, 23 Sep 2024 16:44:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/cpu/</guid><description>
&lt;h2>CPU&lt;span class="hx-absolute -hx-mt-20" id="cpu">&lt;/span>
&lt;a href="#cpu" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>CPU(중앙처리장치)는 컴퓨터 시스템의 핵심 구성요소로, 프로그램의 명령어를 해석하고 실행하는 역할을 한다.&lt;/p>
&lt;h3>CPU의 주요 구성요소&lt;span class="hx-absolute -hx-mt-20" id="cpu의-주요-구성요소">&lt;/span>
&lt;a href="#cpu%ec%9d%98-%ec%a3%bc%ec%9a%94-%ea%b5%ac%ec%84%b1%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>CPU는 크게 세 가지 주요 구성요소로 이루어져 있다&lt;/p>
&lt;ol>
&lt;li>제어장치 (Control Unit, CU)&lt;/li>
&lt;li>산술논리장치 (Arithmetic Logic Unit, ALU)&lt;/li>
&lt;li>레지스터 (Registers)&lt;/li>
&lt;/ol>
&lt;h4>제어장치 (Control Unit)&lt;span class="hx-absolute -hx-mt-20" id="제어장치-control-unit">&lt;/span>
&lt;a href="#%ec%a0%9c%ec%96%b4%ec%9e%a5%ec%b9%98-control-unit" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>제어장치는 CPU의 &amp;lsquo;교통 경찰&amp;rsquo; 역할을 한다.&lt;/p>
&lt;p>주요 기능:&lt;/p>
&lt;ul>
&lt;li>명령어를 순서대로 실행할 수 있도록 제어&lt;/li>
&lt;li>주기억장치로부터 프로그램 명령을 순차적으로 가져와 해독&lt;/li>
&lt;li>명령어 실행에 필요한 제어 신호를 기억장치, 연산장치, 입출력 장치 등으로 전송&lt;/li>
&lt;/ul>
&lt;h4>산술논리장치 (ALU)&lt;span class="hx-absolute -hx-mt-20" id="산술논리장치-alu">&lt;/span>
&lt;a href="#%ec%82%b0%ec%88%a0%eb%85%bc%eb%a6%ac%ec%9e%a5%ec%b9%98-alu" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>ALU는 CPU 내에서 실제 연산을 수행하는 부분&lt;/p>
&lt;p>주요 기능:&lt;/p>
&lt;ul>
&lt;li>산술 연산 (덧셈, 뺄셈, 곱셈, 나눗셈)&lt;/li>
&lt;li>논리 연산 (AND, OR, NOT 등)&lt;/li>
&lt;li>비교 연산&lt;/li>
&lt;/ul>
&lt;h4>레지스터 (Registers)&lt;span class="hx-absolute -hx-mt-20" id="레지스터-registers">&lt;/span>
&lt;a href="#%eb%a0%88%ec%a7%80%ec%8a%a4%ed%84%b0-registers" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>레지스터는 CPU 내부의 고속 소규모 기억장치&lt;/p>
&lt;p>주요 특징:&lt;/p>
&lt;ul>
&lt;li>명령어 주소, 코드, 연산에 필요한 데이터, 연산 결과 등을 임시로 저장&lt;/li>
&lt;li>메모리 계층의 최상위에 위치하며 가장 빠른 속도로 접근 가능&lt;/li>
&lt;li>용도에 따라 범용 레지스터와 특수 목적 레지스터로 구분&lt;/li>
&lt;/ul>
&lt;h3>CPU의 작동 과정&lt;span class="hx-absolute -hx-mt-20" id="cpu의-작동-과정">&lt;/span>
&lt;a href="#cpu%ec%9d%98-%ec%9e%91%eb%8f%99-%ea%b3%bc%ec%a0%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>CPU의 작동 과정은 크게 명령어 사이클(Instruction Cycle)로 설명할 수 있다.&lt;br>
이 사이클은 다음과 같은 단계로 구성된다.:&lt;/p>
&lt;ol>
&lt;li>인출 (Fetch)&lt;/li>
&lt;li>해독 (Decode)&lt;/li>
&lt;li>실행 (Execute)&lt;/li>
&lt;li>쓰기 (Write-back)&lt;/li>
&lt;/ol>
&lt;h4>1. 인출 (Fetch)&lt;span class="hx-absolute -hx-mt-20" id="1-인출-fetch">&lt;/span>
&lt;a href="#1-%ec%9d%b8%ec%b6%9c-fetch" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>프로그램 카운터(PC)에 저장된 주소를 메모리 주소 레지스터(MAR)로 전달&lt;/li>
&lt;li>MAR에 저장된 주소를 이용해 주기억장치에서 명령어를 가져옴&lt;/li>
&lt;li>가져온 명령어를 메모리 버퍼 레지스터(MBR)에 저장&lt;/li>
&lt;li>다음 명령어를 위해 PC 값을 증가시킴&lt;/li>
&lt;li>MBR의 내용을 명령어 레지스터(IR)로 전달&lt;/li>
&lt;/ul>
&lt;h4>2. 해독 (Decode)&lt;span class="hx-absolute -hx-mt-20" id="2-해독-decode">&lt;/span>
&lt;a href="#2-%ed%95%b4%eb%8f%85-decode" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>제어장치가 IR에 저장된 명령어를 해석하여 수행해야 할 작업을 결정한다.&lt;/p>
&lt;h4>3. 실행 (Execute)&lt;span class="hx-absolute -hx-mt-20" id="3-실행-execute">&lt;/span>
&lt;a href="#3-%ec%8b%a4%ed%96%89-execute" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>해독된 명령어에 따라 ALU나 다른 CPU 구성요소가 실제 연산을 수행한다.&lt;/p>
&lt;h4>4. 쓰기 (Write-back)&lt;span class="hx-absolute -hx-mt-20" id="4-쓰기-write-back">&lt;/span>
&lt;a href="#4-%ec%93%b0%ea%b8%b0-write-back" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>연산 결과를 메모리나 레지스터에 저장한다.&lt;/p>
&lt;h3>고급 CPU 기능&lt;span class="hx-absolute -hx-mt-20" id="고급-cpu-기능">&lt;/span>
&lt;a href="#%ea%b3%a0%ea%b8%89-cpu-%ea%b8%b0%eb%8a%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>현대의 CPU는 성능 향상을 위해 다양한 기술을 사용한다.&lt;/p>
&lt;ol>
&lt;li>캐시 메모리&lt;br>
CPU는 자주 사용되는 데이터와 명령어를 캐시에 저장하여 접근 속도를 높인다.&lt;/li>
&lt;li>명령어 파이프라이닝&lt;br>
CPU는 여러 명령어를 동시에 처리하기 위해 파이프라이닝 기법을 사용한다.&lt;br>
한 명령어가 해독 단계에 있을 때 다른 명령어의 인출을 시작하는 방식으로 작동한다.&lt;/li>
&lt;li>인터럽트 처리&lt;br>
CPU는 키보드나 마우스 같은 주변 장치로부터의 입력을 처리하기 위해 인터럽트 메커니즘을 사용한다.&lt;br>
인터럽트가 발생하면 CPU는 현재 작업을 일시 중단하고 인터럽트를 처리한 후 원래 작업으로 돌아간다.&lt;br>
이러한 복잡한 메커니즘을 통해 CPU는 초당 수십억 개의 명령어를 처리할 수 있으며, 이는 현대 컴퓨터 시스템의 핵심 성능을 결정짓는 요소가 된다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>메모리의 계층 구조 (Memory Hierarchy)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-hierarchy/</link><pubDate>Mon, 23 Sep 2024 03:33:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-hierarchy/</guid><description>
&lt;h2>메모리의 계층 구조 (Memory Hierarchy)&lt;span class="hx-absolute -hx-mt-20" id="메모리의-계층-구조-memory-hierarchy">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac%ec%9d%98-%ea%b3%84%ec%b8%b5-%ea%b5%ac%ec%a1%b0-memory-hierarchy" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>메모리 계층 구조는 컴퓨터 시스템에서 데이터 접근의 효율성을 극대화하고 전체 시스템 성능을 향상시키기 위해 설계된 구조.&lt;br>
이 구조는 속도, 용량, 비용 간의 균형을 고려하여 여러 종류의 메모리를 계층적으로 배치한다.&lt;/p>
&lt;p>메모리 계층 구조의 각 레벨은 위로 올라갈수록 다음과 같은 특성을 가진다.&lt;/p>
&lt;ul>
&lt;li>접근 속도가 빨라짐&lt;/li>
&lt;li>용량이 작아짐&lt;/li>
&lt;li>비트당 가격이 높아짐&lt;/li>
&lt;li>CPU에 의한 접근 빈도가 증가함&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">계층 구조 (위에서 아래로):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">레지스터
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">캐시 (L1 → L2 → L3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">메인 메모리 (RAM)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">보조 기억 장치 (SSD/HDD)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>이러한 계층 구조는 &amp;lsquo;참조 지역성(Locality of Reference)&amp;rsquo; 원리를 활용하여 전체 시스템의 성능을 최적화한다.&lt;br>
자주 사용되는 데이터를 빠른 상위 계층에 유지함으로써, 평균 데이터 접근 시간을 줄이고 전체적인 시스템 성능을 향상시킨다.&lt;/p>
&lt;blockquote>
&lt;p>참조 지역성(Locality of Reference)&lt;br>
컴퓨터 프로그램이 메모리에 접근하는 패턴에 관한 원리로, 프로그램이 일정 기간 동안 특정한 메모리 위치 집합에 집중적으로 접근하는 경향.&lt;/p>
&lt;ul>
&lt;li>중요성
&lt;ul>
&lt;li>캐시 메모리 최적화: 참조 지역성 원리를 활용하여 캐시 메모리에 자주 사용되는 데이터를 저장함으로써 캐시 적중률(hit rate)을 높일 수 있다&lt;/li>
&lt;li>시스템 성능 향상: 캐시 적중률이 높아지면 메모리 접근 시간이 줄어들어 전체적인 시스템 성능이 향상된다.&lt;/li>
&lt;li>프로그램 최적화: 개발자가 참조 지역성을 고려하여 코드를 작성하면 프로그램의 실행 속도를 크게 개선할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>유형
&lt;ul>
&lt;li>시간적 지역성 (Temporal Locality): 최근에 참조된 메모리 위치가 가까운 미래에 다시 참조될 가능성이 높다.
&lt;ul>
&lt;li>반복문에서 같은 변수를 여러 번 사용하는 경우&lt;/li>
&lt;li>자주 호출되는 함수나 서브루틴&lt;/li>
&lt;li>스택에 저장된 지역 변수에 대한 반복적인 접근&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>공간적 지역성 (Spatial Locality): 특정 메모리 위치가 참조되면, 그 주변의 메모리 위치들도 곧 참조될 가능성이 높다.
&lt;ul>
&lt;li>배열의 요소를 순차적으로 접근하는 경우&lt;/li>
&lt;li>구조체의 멤버 변수들에 연속적으로 접근하는 경우&lt;/li>
&lt;li>명령어들이 메모리에 연속적으로 저장되어 있는 경우&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>
&lt;img src="../memory-hierarchy-design.webp" alt="Memory Hierarchy Design" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.scaler.com/topics/memory-hierarchy/" target="_blank" rel="noopener">https://www.scaler.com/topics/memory-hierarchy/&lt;/a> _&lt;/p>
&lt;h3>레지스터 (Register)&lt;span class="hx-absolute -hx-mt-20" id="레지스터-register">&lt;/span>
&lt;a href="#%eb%a0%88%ec%a7%80%ec%8a%a4%ed%84%b0-register" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>레지스터는 메모리 계층 구조의 최상위에 위치하며, CPU 내부에 존재한다.&lt;/p>
&lt;p>특징:&lt;/p>
&lt;ul>
&lt;li>가장 빠른 접근 속도를 제공&lt;/li>
&lt;li>매우 작은 용량 (일반적으로 32비트 또는 64비트)&lt;/li>
&lt;li>CPU가 직접 사용할 수 있는 데이터를 저장&lt;/li>
&lt;li>비용이 가장 높음&lt;/li>
&lt;/ul>
&lt;h3>캐시 메모리 (Cache Memory)&lt;span class="hx-absolute -hx-mt-20" id="캐시-메모리-cache-memory">&lt;/span>
&lt;a href="#%ec%ba%90%ec%8b%9c-%eb%a9%94%eb%aa%a8%eb%a6%ac-cache-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>캐시 메모리는 CPU와 주 메모리 사이에 위치하며, 자주 사용되는 데이터와 명령어를 저장한다.&lt;/p>
&lt;p>종류:&lt;/p>
&lt;ul>
&lt;li>L1 캐시: CPU 코어에 가장 가까이 위치, 가장 빠르지만 용량이 작음 (보통 8~64KB)&lt;/li>
&lt;li>L2 캐시: L1보다 느리지만 더 큰 용량 (64KB~4MB)&lt;/li>
&lt;li>L3 캐시: 일부 프로세서에서 사용, L2보다 더 큰 용량&lt;/li>
&lt;/ul>
&lt;p>캐시 메모리는 SRAM(Static RAM)으로 구성되며, 빠른 접근 속도를 제공한다.&lt;/p>
&lt;h3>주 메모리 (Main Memory)&lt;span class="hx-absolute -hx-mt-20" id="주-메모리-main-memory">&lt;/span>
&lt;a href="#%ec%a3%bc-%eb%a9%94%eb%aa%a8%eb%a6%ac-main-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>주 메모리는 일반적으로 RAM(Random Access Memory)을 의미한다.&lt;/p>
&lt;p>특징:&lt;/p>
&lt;ul>
&lt;li>CPU가 직접 접근할 수 있는 가장 큰 메모리&lt;/li>
&lt;li>주로 DRAM(Dynamic RAM)으로 구성&lt;/li>
&lt;li>캐시보다 느리지만 더 큰 용량 제공&lt;/li>
&lt;li>휘발성 메모리 (전원이 꺼지면 데이터 손실)&lt;/li>
&lt;/ul>
&lt;h3>보조 기억 장치 (Secondary Storage)&lt;span class="hx-absolute -hx-mt-20" id="보조-기억-장치-secondary-storage">&lt;/span>
&lt;a href="#%eb%b3%b4%ec%a1%b0-%ea%b8%b0%ec%96%b5-%ec%9e%a5%ec%b9%98-secondary-storage" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>보조 기억 장치는 메모리 계층 구조의 가장 하위에 위치한다.&lt;/p>
&lt;p>특징:&lt;/p>
&lt;ul>
&lt;li>하드 디스크 드라이브(HDD)나 솔리드 스테이트 드라이브(SSD) 등이 포함&lt;/li>
&lt;li>가장 큰 용량을 제공&lt;/li>
&lt;li>비휘발성 (전원이 꺼져도 데이터 유지)&lt;/li>
&lt;li>접근 속도가 가장 느림&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>