<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Data Structure on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/data-structure/</link>
    <description>Recent content in Data Structure on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.141.0</generator>
    <language>en</language>
    <lastBuildDate>Wed, 08 Jan 2025 15:40:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/data-structure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Structure</title>
      <link>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/</link>
      <pubDate>Sun, 27 Oct 2024 06:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structure-and-algorithm/data-structure/</guid>
      <description>데이터를 효율적으로 저장, 관리, 접근하기 위한 방법</description>
    </item>
    <item>
      <title>Concurrent Data Structure</title>
      <link>https://buenhyden.github.io/til/2025/01/concurrent-data-structure/</link>
      <pubDate>Mon, 06 Jan 2025 12:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2025/01/concurrent-data-structure/</guid>
      <description>Concurrent Data Structure는 여러 스레드가 동시에 안전하게 접근하고 조작할 수 있도록 설계된 데이터 구조로, 전통적인 데이터 구조와 달리, 동시성을 고려하여 데이터의 일관성과 무결성을 보장하면서도 높은 성능을 제공하는 것이 특징이다.</description>
    </item>
    <item>
      <title>Suffix Array vs Suffix Tree vs Trie</title>
      <link>https://buenhyden.github.io/til/2025/01/suffix-array-vs-suffix-tree-vs-trie/</link>
      <pubDate>Wed, 08 Jan 2025 15:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2025/01/suffix-array-vs-suffix-tree-vs-trie/</guid>
      <description>Suffix Array, Suffix Tree, 그리고 Trie는 모두 문자열 처리와 패턴 매칭을 위한 데이터 구조로, 각각 고유한 특성과 용도를 가지고 있다.</description>
    </item>
    <item>
      <title>Linear Data Structure vs Non-Linear Data Structure</title>
      <link>https://buenhyden.github.io/til/2024/11/linear-data-structure-vs-non-linear-data-structure/</link>
      <pubDate>Wed, 06 Nov 2024 11:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/11/linear-data-structure-vs-non-linear-data-structure/</guid>
      <description>Linear Data Structure Vs Non-Linear Data Structure</description>
    </item>
    <item>
      <title>Primitive data structure vs Non-Primitive data structure</title>
      <link>https://buenhyden.github.io/til/2024/11/primitive-data-structure-vs-non-primitive-data-structure/</link>
      <pubDate>Wed, 06 Nov 2024 08:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/11/primitive-data-structure-vs-non-primitive-data-structure/</guid>
      <description>Primitive data structure는 프로그래밍 언어에 내장된 가장 단순하고 기본적인 데이터 타입이며, Non-primitive data structure(비원시 자료구조)는 원시 자료형을 기반으로 만들어진 더 복잡하고 고급화된 자료구조를 의미한다.</description>
    </item>
  </channel>
</rss>
