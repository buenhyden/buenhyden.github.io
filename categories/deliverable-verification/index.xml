<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Deliverable Verification</title><link>https://buenhyden.github.io/categories/deliverable-verification/</link><description>Recent content in Deliverable Verification on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 15 Dec 2024 05:30:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/categories/deliverable-verification/index.xml" rel="self" type="application/rss+xml"/><item><title>Formal Review and Informal Review</title><link>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/formal-review-and-informal-review/</link><pubDate>Sun, 15 Dec 2024 05:30:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/formal-review-and-informal-review/</guid><description>
&lt;h2>Formal Review and Informal Review&lt;span class="hx-absolute -hx-mt-20" id="formal-review-and-informal-review">&lt;/span>
&lt;a href="#formal-review-and-informal-review" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>소프트웨어 개발 과정에서 품질 보증을 위해 사용되는 두 가지 주요 검토 방식이다.
이 두 방식은 소프트웨어 제품의 품질을 향상시키고 결함을 조기에 발견하기 위한 목적으로 사용되지만, 그 접근 방식과 특징에 차이가 있다.&lt;/p>
&lt;h3>Formal Review&lt;span class="hx-absolute -hx-mt-20" id="formal-review">&lt;/span>
&lt;a href="#formal-review" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Formal Review는 구조화된 프로세스를 따르며, 훈련된 중재자가 이끄는 공식적인 검토 방식이다.&lt;br>
아래와 같은 특징을 가진다:&lt;/p>
&lt;ul>
&lt;li>문서화된 엄격한 프로세스 준수&lt;/li>
&lt;li>정의된 역할과 책임&lt;/li>
&lt;li>사전 준비 강조&lt;/li>
&lt;li>공식적인 결함 기록 및 보고서 작성&lt;/li>
&lt;li>메트릭 수집 및 분석&lt;/li>
&lt;/ul>
&lt;h3>Informal Review&lt;span class="hx-absolute -hx-mt-20" id="informal-review">&lt;/span>
&lt;a href="#informal-review" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Informal Review는 덜 구조화되고 유연한 검토 방식이다.&lt;br>
아래와 같은 특징을 가진다:&lt;/p>
&lt;ul>
&lt;li>중재자 없이 진행&lt;/li>
&lt;li>구조화되지 않은 프로세스&lt;/li>
&lt;li>개인적인 요청에 의해 수행되는 경우가 많음&lt;/li>
&lt;li>기록이나 메트릭 수집이 없거나 최소화됨&lt;/li>
&lt;/ul>
&lt;h3>Formal Review and Informal Review 방법&lt;span class="hx-absolute -hx-mt-20" id="formal-review-and-informal-review-방법">&lt;/span>
&lt;a href="#formal-review-and-informal-review-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>분류&lt;/th>
&lt;th>검토 유형&lt;/th>
&lt;th>주요 특징&lt;/th>
&lt;th>참여자&lt;/th>
&lt;th>목적&lt;/th>
&lt;th>형식성 수준&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Formal Review&lt;/td>
&lt;td>Inspection(검사)&lt;/td>
&lt;td>가장 공식적이고 체계적인 검토 방식&lt;br>상세한 체크리스트 사용&lt;br>철저한 문서화&lt;/td>
&lt;td>검사자(Inspector)&lt;br>작성자&lt;br>사회자&lt;br>서기&lt;/td>
&lt;td>결함 발견&lt;br>품질 보증&lt;br>프로세스 개선&lt;/td>
&lt;td>매우 높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Formal Review&lt;/td>
&lt;td>Audit(감사)&lt;/td>
&lt;td>독립적인 전문가에 의한 검토&lt;br>규정 준수 여부 확인&lt;br>객관적 평가&lt;/td>
&lt;td>감사자&lt;br>피감사자&lt;br>이해관계자&lt;/td>
&lt;td>규정 준수 확인&lt;br>품질 보증&lt;br>리스크 관리&lt;/td>
&lt;td>높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Formal Review&lt;/td>
&lt;td>Technical Review(기술 검토)&lt;/td>
&lt;td>기술적 내용에 중점&lt;br>동료 전문가에 의한 검토&lt;br>기술적 대안 제시&lt;/td>
&lt;td>기술 전문가&lt;br>개발자&lt;br>설계자&lt;/td>
&lt;td>기술적 완성도 검증&lt;br>대안 평가&lt;br>품질 향상&lt;/td>
&lt;td>중상&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Formal Review&lt;/td>
&lt;td>Management Review(관리 검토)&lt;/td>
&lt;td>진행 상황과 계획 검토&lt;br>의사결정 중심&lt;br>프로젝트 관리 관점&lt;/td>
&lt;td>관리자&lt;br>팀 리더&lt;br>이해관계자&lt;/td>
&lt;td>진행상황 확인&lt;br>의사결정&lt;br>리스크 관리&lt;/td>
&lt;td>중상&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Informal Review&lt;/td>
&lt;td>Code Review(코드 리뷰)&lt;/td>
&lt;td>개발자 간 코드 검토&lt;br>자유로운 의견 교환&lt;br>즉각적 피드백&lt;/td>
&lt;td>개발자&lt;br>리뷰어&lt;/td>
&lt;td>코드 품질 향상&lt;br>지식 공유&lt;br>버그 발견&lt;/td>
&lt;td>중&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Informal Review&lt;/td>
&lt;td>Pair Programming(페어 프로그래밍)&lt;/td>
&lt;td>두 명이 함께 코딩&lt;br>실시간 리뷰&lt;br>즉각적 피드백&lt;/td>
&lt;td>드라이버&lt;br>네비게이터&lt;/td>
&lt;td>품질 향상&lt;br>지식 공유&lt;br>실시간 오류 수정&lt;/td>
&lt;td>중하&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Informal Review&lt;/td>
&lt;td>Walkthrough(워크스루)&lt;/td>
&lt;td>작성자가 코드 설명&lt;br>비형식적 미팅&lt;br>교육적 성격&lt;/td>
&lt;td>발표자&lt;br>참가자들&lt;/td>
&lt;td>이해도 향상&lt;br>피드백 수집&lt;br>지식 공유&lt;/td>
&lt;td>중하&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Informal Review&lt;/td>
&lt;td>Pass Around(패스어라운드)&lt;/td>
&lt;td>순차적 검토&lt;br>유연한 일정&lt;br>문서 기반 검토&lt;/td>
&lt;td>여러 리뷰어&lt;br>작성자&lt;/td>
&lt;td>다양한 관점 수집&lt;br>편의성&lt;br>시간 효율성&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Informal Review&lt;/td>
&lt;td>Desk Check(데스크 체크)&lt;/td>
&lt;td>개발자 자체 검토&lt;br>즉각적 수행&lt;br>기본적 검증&lt;/td>
&lt;td>개발자 본인&lt;/td>
&lt;td>기본 오류 검출&lt;br>품질 향상&lt;br>시간 절약&lt;/td>
&lt;td>매우 낮음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 다양한 검토 방식들은 각각의 장단점과 적합한 상황이 있으며, 프로젝트의 특성과 상황에 따라 적절히 선택하여 적용하는 것이 중요하다.&lt;br>
특히 형식적 검토와 비형식적 검토를 적절히 조합하여 사용함으로써, 효과적인 품질 관리와 개발 프로세스 개선을 달성할 수 있다.&lt;/p>
&lt;p>또한 각 검토 방식의 특성을 이해하고, 프로젝트의 규모, 중요도, 시간 제약, 팀의 문화 등을 고려하여 가장 적합한 검토 방식을 선택하는 것이 중요하다.&lt;br>
이를 통해 효율적인 품질 관리와 지속적인 개선이 가능해진다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Peer Review</title><link>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/</link><pubDate>Sat, 14 Dec 2024 15:03:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/deliverable-verification/peer-review/</guid><description>
&lt;h2>Peer Review&lt;span class="hx-absolute -hx-mt-20" id="peer-review">&lt;/span>
&lt;a href="#peer-review" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Peer Review는 소프트웨어 개발 과정에서 중요한 품질 보증 활동으로, 동료 개발자들이 서로의 코드나 문서를 검토하여 오류를 찾고 개선점을 제시하는 과정이다.&lt;/p>
&lt;p>코드 리뷰가 중요한 이유는 여러 가지가 있다.&lt;/p>
&lt;ol>
&lt;li>버그나 보안 취약점을 조기에 발견할 수 있다.&lt;/li>
&lt;li>코드의 일관성과 유지보수성을 높일 수 있다.&lt;/li>
&lt;li>팀 전체의 기술력 향상에 도움이 된다. 한 명의 실수나 실수를 하기 쉬운 부분을 여러 사람이 검토함으로써, 더 높은 품질의 코드를 만들 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>Peer Review의 목적&lt;span class="hx-absolute -hx-mt-20" id="peer-review의-목적">&lt;/span>
&lt;a href="#peer-review%ec%9d%98-%eb%aa%a9%ec%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>오류 가능성 발견 및 해결&lt;/li>
&lt;li>소프트웨어 품질 향상&lt;/li>
&lt;li>개발자 스킬 향상&lt;/li>
&lt;li>팀 내 지식 및 경험 공유&lt;/li>
&lt;/ol>
&lt;h3>Peer Review의 장점&lt;span class="hx-absolute -hx-mt-20" id="peer-review의-장점">&lt;/span>
&lt;a href="#peer-review%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>개발 초기 단계에서 실수 발견 및 수정 가능&lt;/li>
&lt;li>전체적인 코드 품질 향상&lt;/li>
&lt;li>팀 내 상호 신뢰 및 동기 부여 증진&lt;/li>
&lt;li>가독성 높은 코드 작성 촉진&lt;/li>
&lt;li>개선된 설계 발견 기회&lt;/li>
&lt;/ol>
&lt;h3>Peer Review 프로세스&lt;span class="hx-absolute -hx-mt-20" id="peer-review-프로세스">&lt;/span>
&lt;a href="#peer-review-%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Peer Review는 일반적으로 다음과 같은 단계로 진행된다:&lt;/p>
&lt;ol>
&lt;li>계획 (Planning)&lt;/li>
&lt;li>사전 설명회 (Overview)&lt;/li>
&lt;li>개별 검토 (Preparation)&lt;/li>
&lt;li>Review 미팅 (Meeting)&lt;/li>
&lt;li>재작업 (Rework)&lt;/li>
&lt;li>후속 처리 (Follow-up)&lt;/li>
&lt;/ol>
&lt;h3>Peer Review 참여자 역할&lt;span class="hx-absolute -hx-mt-20" id="peer-review-참여자-역할">&lt;/span>
&lt;a href="#peer-review-%ec%b0%b8%ec%97%ac%ec%9e%90-%ec%97%ad%ed%95%a0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>관리자: 전체 프로세스 관리&lt;/li>
&lt;li>중재자: 리뷰 미팅 진행&lt;/li>
&lt;li>작성자: 검토 대상 코드/문서 작성자&lt;/li>
&lt;li>검토자: 실제 리뷰 수행&lt;/li>
&lt;li>기록자: 리뷰 결과 기록&lt;/li>
&lt;li>발표자: 리뷰 대상 설명&lt;/li>
&lt;/ol>
&lt;h3>Peer Review 성공을 위한 요소&lt;span class="hx-absolute -hx-mt-20" id="peer-review-성공을-위한-요소">&lt;/span>
&lt;a href="#peer-review-%ec%84%b1%ea%b3%b5%ec%9d%84-%ec%9c%84%ed%95%9c-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>회사 차원의 정책적 지원&lt;/li>
&lt;li>개발 일정에 Peer Review 시간 포함&lt;/li>
&lt;li>동료 간 수평적 관계 유지&lt;/li>
&lt;li>자주 짧게 진행하는 리뷰 문화 형성&lt;/li>
&lt;li>리뷰어의 시간을 존중하는 태도&lt;/li>
&lt;li>건설적인 피드백 제공 및 수용&lt;/li>
&lt;/ol>
&lt;h3>Peer Review 시 주의사항&lt;span class="hx-absolute -hx-mt-20" id="peer-review-시-주의사항">&lt;/span>
&lt;a href="#peer-review-%ec%8b%9c-%ec%a3%bc%ec%9d%98%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>리뷰 대상은 200 LOC 미만으로 유지, 최대 400 LOC를 넘지 않도록 함&lt;/li>
&lt;li>리뷰 시간은 60분 미만으로 유지&lt;/li>
&lt;li>개인 비난이나 공격적인 질문 피하기&lt;/li>
&lt;li>칭찬과 긍정적 피드백 포함하기&lt;/li>
&lt;li>코드 품질 향상에 집중하기&lt;/li>
&lt;/ol>
&lt;h3>Peer Review의 한계&lt;span class="hx-absolute -hx-mt-20" id="peer-review의-한계">&lt;/span>
&lt;a href="#peer-review%ec%9d%98-%ed%95%9c%ea%b3%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>시간과 리소스 소요&lt;/li>
&lt;li>리뷰를 거쳐도 일부 결함을 놓칠 수 있음&lt;/li>
&lt;li>팀 문화와 개인의 태도에 따라 효과성이 달라질 수 있음&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>