<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Fundamentals on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/fundamentals/</link>
    <description>Recent content in Fundamentals on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Apr 2025 02:20:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/fundamentals/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>인접 행렬(Adjacency Matrix)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/graph/fundamentals/representation/adjacency-matrix/</link>
      <pubDate>Sat, 07 Dec 2024 03:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/graph/fundamentals/representation/adjacency-matrix/</guid>
      <description>수학적 행렬을 사용하여 그래프의 정점들 간의 연결 관계를 나타낸다.  행렬의 각 원소는 두 정점 사이의 간선 존재 여부나 가중치를 표시한다.</description>
    </item>
    <item>
      <title>Algorithmic Complexity</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/fundamentals/computational-theory/algorithmic-complexity/</link>
      <pubDate>Fri, 06 Dec 2024 11:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/fundamentals/computational-theory/algorithmic-complexity/</guid>
      <description>알고리즘 복잡도는 프로그램이나 알고리즘이 문제를 해결할 때 소요하는 시간과 공간, 즉 컴퓨팅 자원의 사용량을 입력 크기에 따라 수학적으로 분석하는 방법이다.</description>
    </item>
    <item>
      <title>Preorder Traversal</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/tree/fundamentals/traversal/preorder-traversal/</link>
      <pubDate>Fri, 06 Dec 2024 09:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/tree/fundamentals/traversal/preorder-traversal/</guid>
      <description>전위 순회는 트리를 탐색하는 깊이 우선 탐색(Depth-First Search, DFS)의 한 형태로, 재귀적으로 수행되며, 루트 노드부터 시작하여 왼쪽 가지를 따라 깊이 내려간 후 오른쪽 가지로 이동한다. 전위 순회의 이름에서 &amp;#34;전위(Pre)&amp;#34;는 부모 노드를 자식 노드보다 먼저(before) 방문한다는 의미를 담고 있다.</description>
    </item>
    <item>
      <title>Traversal</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/tree/fundamentals/traversal/</link>
      <pubDate>Fri, 06 Dec 2024 03:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/tree/fundamentals/traversal/</guid>
      <description>트리 순회(Tree Traversal)는 트리 자료구조에서 각 노드를 체계적으로 방문하는 과정을 의미한다.</description>
    </item>
    <item>
      <title>어셈블러(Assembler)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/assembler/</link>
      <pubDate>Thu, 05 Dec 2024 03:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/assembler/</guid>
      <description>Assembler는 어셈블리 언어로 작성된 소스 코드를 컴퓨터가 직접 실행할 수 있는 기계어 코드로 변환하는 번역 도구</description>
    </item>
    <item>
      <title>Control Structures</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/control-structures/</link>
      <pubDate>Thu, 05 Dec 2024 03:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/control-structures/</guid>
      <description>Control Structures는 프로그램 내에서 실행 흐름을 제어하는 기본적이고 필수적인 구성 요소이다.  이 구조들은 코드의 순차적 실행, 조건에 따른 분기 처리, 그리고 반복문 실행을 통해 프로그램이 동적으로 동작할 수 있도록 돕는다.</description>
    </item>
    <item>
      <title>TCPIP 4 Layers vs. OSI 7 Layers</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/tcp-ip-4layers/tcpip-4-layers-vs-osi-7-layers/</link>
      <pubDate>Sat, 19 Oct 2024 02:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/tcp-ip-4layers/tcpip-4-layers-vs-osi-7-layers/</guid>
      <description>OSI 7계층은 네트워크 통신의 표준 참조 모델이며, TCP/IP 4계층은 이를 바탕으로 구현된 실제 인터넷 통신의 기반이 된다.</description>
    </item>
    <item>
      <title>TCP/IP 4 Layers - 1. Network Access Layer</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/tcp-ip-4layers/network-access-layer/</link>
      <pubDate>Thu, 17 Oct 2024 05:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/tcp-ip-4layers/network-access-layer/</guid>
      <description>데이터를 전송 매체에 맞게 포맷팅하고 물리적 하드웨어 주소를 기반으로 데이터를 주소 지정한다</description>
    </item>
    <item>
      <title>OSI 7 Layers - 1. Physical Layer</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/osi-7layers/physical-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/osi-7layers/physical-layer/</guid>
      <description>OSI 7계층의 가장 첫 번째 계층으로, 실제 데이터가 전기 신호나 빛으로 변환되어 전송되는 곳</description>
    </item>
    <item>
      <title>튜링 기계 (Turing Machine)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/theoretical-foundations/turing-machine/</link>
      <pubDate>Sun, 13 Oct 2024 10:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/theoretical-foundations/turing-machine/</guid>
      <description>튜링 기계는 1936년 앨런 튜링이 제안한 추상적인 계산 모델로, 알고리즘의 개념을 수학적으로 정형화한 것으로, 현대 컴퓨터의 이론적 기초가 되었다.</description>
    </item>
    <item>
      <title>Language Syntax</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/</link>
      <pubDate>Fri, 04 Oct 2024 03:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/</guid>
      <description>프로그래밍 언어의 구문(Language Syntax)은 코드의 구조와 형식을 결정하는 규칙 집합으로, 코드가 올바르게 실행되기 위한 기초 역할을 한다.</description>
    </item>
    <item>
      <title>인접 리스트 (Adjacency List)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/graph/fundamentals/representation/adjacency-list/</link>
      <pubDate>Sat, 07 Dec 2024 03:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/graph/fundamentals/representation/adjacency-list/</guid>
      <description>인접 리스트는 그래프 표현 방법 중 하나로, 각 정점(vertex)에 연결된 인접 정점들을 리스트 형태로 저장하는 방식이다.</description>
    </item>
    <item>
      <title>Inorder Traversal</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/tree/fundamentals/traversal/inorder-traversal/</link>
      <pubDate>Fri, 06 Dec 2024 09:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/tree/fundamentals/traversal/inorder-traversal/</guid>
      <description>왼쪽 서브트리를 먼저 방문한 후 현재 노드를 방문하고 마지막으로 오른쪽 서브트리를 방문하는 이 방법은 정렬된 데이터가 필요한 다양한 문제에 활용된다.</description>
    </item>
    <item>
      <title>Low-Level Virtual Machine</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/compiler/low-level-virtual-machine/</link>
      <pubDate>Thu, 05 Dec 2024 03:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/compiler/low-level-virtual-machine/</guid>
      <description>LLVM은 소스 코드를 최적화하고 대상 플랫폼에 맞는 기계어로 변환하는 모듈식 컴파일러 프레임워크</description>
    </item>
    <item>
      <title>Functions</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/functions/</link>
      <pubDate>Thu, 05 Dec 2024 01:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/language-syntax/functions/</guid>
      <description>함수는 프로그래밍의 핵심 구성 요소로, 특정 작업을 수행하는 독립적이고 재사용 가능한 코드 블록이다.</description>
    </item>
    <item>
      <title>라이브러리 (Library)와 프레임워크 (Framework)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/library-and-framework/</link>
      <pubDate>Wed, 20 Nov 2024 06:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/library-and-framework/</guid>
      <description>라이브러리(Library)는 특정 기능을 수행하는 코드의 모음이고, 프레임워크(Framework)는 애플리케이션 개발의 기본 구조를 제공한다.</description>
    </item>
    <item>
      <title>TCP/IP 4계층 - 2. Internet Layer</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/tcp-ip-4layers/internet-layer/</link>
      <pubDate>Thu, 17 Oct 2024 05:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/tcp-ip-4layers/internet-layer/</guid>
      <description>인터넷 계층은 TCP/IP 프로토콜 스택에서 네트워크 간의 통신을 담당하는 핵심 계층으로, 네트워크 간 데이터 전송을 담당하며, 데이터 패킷이 출발지에서 목적지까지 효율적으로 전달되도록 라우팅과 주소 지정(Addressing)을 수행한다.</description>
    </item>
    <item>
      <title>OSI 7 Layers - 2. DataLink Layer</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/osi-7layers/datalink-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/osi-7layers/datalink-layer/</guid>
      <description>OSI 7계층에서 두 번째 계층으로, 직접 연결된 두 장치 간의 안전한 데이터 전송을 담당</description>
    </item>
    <item>
      <title>OSI 7Layers</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/osi-7layers/</link>
      <pubDate>Wed, 16 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/osi-7layers/</guid>
      <description>표준 프로토콜을 사용하여 다양한 통신 시스템이 통신할 수 있도록 국제표준화기구(ISO)에서 만든 개념 모델</description>
    </item>
    <item>
      <title>복잡도 클래스(Complexity Classes)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/theoretical-foundations/computational-complexity/complexity-classes/</link>
      <pubDate>Sun, 13 Oct 2024 09:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/theoretical-foundations/computational-complexity/complexity-classes/</guid>
      <description>계산 복잡도 이론에서 비슷한 복잡도를 가진 문제들의 집합을 나타낸다.</description>
    </item>
    <item>
      <title>컴파일러(Compiler)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/compiler/</link>
      <pubDate>Sun, 06 Oct 2024 05:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/compiler/</guid>
      <description>우리가 작성한 프로그래밍 언어(고급 언어)를 컴퓨터가 이해할 수 있는 기계어(저급 언어)로 번역해주는 특별한 프로그램</description>
    </item>
    <item>
      <title>Adjacency Matrix vs Adjacency List</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/graph/fundamentals/representation/adjacency-matrix/adjacency-matrix-vs-adjacency-list/</link>
      <pubDate>Sat, 07 Dec 2024 15:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/graph/fundamentals/representation/adjacency-matrix/adjacency-matrix-vs-adjacency-list/</guid>
      <description>간선이 적은 희소 그래프의 경우 인접 리스트가 메모리와 성능 면에서 우수하며 간선이 많은 밀집 그래프나 정점 간 연결 여부를 빠르게 확인해야 하는 경우에는 인접 행렬이 적합하다.</description>
    </item>
    <item>
      <title>Postorder Traversal</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/tree/fundamentals/traversal/postorder-traversal/</link>
      <pubDate>Fri, 06 Dec 2024 09:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/tree/fundamentals/traversal/postorder-traversal/</guid>
      <description>후위 순회는 자식 노드를 먼저 방문한 후 부모 노드를 방문하는 트리 순회 방법으로, 상향식 처리가 필요한 다양한 문제 해결에 적합하다.</description>
    </item>
    <item>
      <title>CSR vs SSR</title>
      <link>https://buenhyden.github.io/posts/frontend-development/rendering-strategies/client-side-rendering/csr-vs-ssr/</link>
      <pubDate>Mon, 02 Dec 2024 12:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/frontend-development/rendering-strategies/client-side-rendering/csr-vs-ssr/</guid>
      <description>Client Side Rendering (CSR)은 브라우저에서 JavaScript를 실행하여 콘텐츠를 렌더링하며, Server Side Rendering (SSR)은 서버에서 HTML을 생성하여 클라이언트에 전달한다.</description>
    </item>
    <item>
      <title>Event Brokers</title>
      <link>https://buenhyden.github.io/posts/backend-development/event-and-message-brokers/fundamentals/event-brokers/</link>
      <pubDate>Mon, 21 Oct 2024 06:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/event-and-message-brokers/fundamentals/event-brokers/</guid>
      <description>Event Broker는 이벤트 생성자(Producer)와 이벤트 소비자(Consumer) 사이에서 중개자 역할을 수행한다.</description>
    </item>
    <item>
      <title>TCP/IP 4계층 - 3. Transport Layer</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/tcp-ip-4layers/transport-layer/</link>
      <pubDate>Thu, 17 Oct 2024 05:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/tcp-ip-4layers/transport-layer/</guid>
      <description>전송 계층은 서로 다른 호스트에서 동작하는 애플리케이션 프로세스 간의 논리적 통신을 제공한다.</description>
    </item>
    <item>
      <title>TCP/IP 4Layers</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/tcp-ip-4layers/</link>
      <pubDate>Thu, 17 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/tcp-ip-4layers/</guid>
      <description>인터넷 프로토콜 스위트의 구조를 설명하는 계층화된 모델.</description>
    </item>
    <item>
      <title>OSI 7 Layers - 3. Network Layer</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/osi-7layers/network-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/osi-7layers/network-layer/</guid>
      <description>3계층으로, 서로 다른 네트워크 간의 데이터 전송을 담당</description>
    </item>
    <item>
      <title>인터프리터(Interpreter)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/interpreter/</link>
      <pubDate>Sun, 06 Oct 2024 05:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/interpreter/</guid>
      <description>프로그래밍 언어의 소스 코드를 직접 실행하는 프로그램 또는 환경</description>
    </item>
    <item>
      <title>Level Order Traversal</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/tree/fundamentals/traversal/level-order-traversal/</link>
      <pubDate>Fri, 06 Dec 2024 09:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/tree/fundamentals/traversal/level-order-traversal/</guid>
      <description>레벨 순서 순회(Level Order Traversal)는 트리의 각 레벨을 위에서 아래로, 각 레벨 내에서는 왼쪽에서 오른쪽으로 노드를 방문하는 방식이다.</description>
    </item>
    <item>
      <title>Compiler vs Interpreter vs Assembler</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/compiler-vs-interpreter-vs-assembler/</link>
      <pubDate>Thu, 05 Dec 2024 03:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/compiler-vs-interpreter-vs-assembler/</guid>
      <description>컴파일러, 인터프리터, 어셈블러는 소스 코드를 기계가 이해할 수 있는 형태로 변환하는 서로 다른 언어 처리 도구이다.</description>
    </item>
    <item>
      <title>의사코드(Pseudocode)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/pseudo-code/</link>
      <pubDate>Thu, 05 Dec 2024 01:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/pseudo-code/</guid>
      <description>의사코드(Pseudocode)는 알고리즘을 설명하기 위한 비공식적이고 고수준의 표현 방식으로, 특정 프로그래밍 언어의 문법에 얽매이지 않고 간단한 텍스트 형태로 작성된다.</description>
    </item>
    <item>
      <title>TCP/IP 4계층 - 4. Application Layer</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/tcp-ip-4layers/application-layer/</link>
      <pubDate>Thu, 17 Oct 2024 05:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/tcp-ip-4layers/application-layer/</guid>
      <description>TCP/IP 프로토콜 스택에서 가장 상위 계층으로, 사용자와 가장 가까운 계층으로 이메일, 웹 서핑, 파일 전송 등의 서비스를 위한 프로토콜들이 모여 있는 계층이다.</description>
    </item>
    <item>
      <title>OSI 7 Layers - 4. Transport Layer</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/osi-7layers/transport-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/osi-7layers/transport-layer/</guid>
      <description>4번째 계층으로, 데이터 전송의 신뢰성과 효율성을 담당하는 중요한 역할을 한다</description>
    </item>
    <item>
      <title>Network Traffic</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/network-infrastructure/network-traffic/</link>
      <pubDate>Wed, 16 Oct 2024 02:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/network-infrastructure/network-traffic/</guid>
      <description>네트워크 트래픽은 컴퓨터 네트워크를 통해 이동하는 데이터의 양을 의미한다.</description>
    </item>
    <item>
      <title>Native Compiler vs Cross Compiler</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/compiler/native-compiler-vs-cross-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 03:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/compiler/native-compiler-vs-cross-compiler/</guid>
      <description>Native Compiler와 Cross Compiler는 모두 프로그래밍 언어로 작성된 소스 코드를 기계어 또는 실행 가능한 바이너리로 변환하는 컴파일 도구이지만, 그들이 생성하는 산출물이 실행되는 대상이 서로 다르다는 점에서 구분된다.</description>
    </item>
    <item>
      <title>Traversal 방법 비교</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/tree/fundamentals/traversal/traversal-%EB%B0%A9%EB%B2%95-%EB%B9%84%EA%B5%90/</link>
      <pubDate>Fri, 06 Dec 2024 11:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/data-structures/non-linear/tree/fundamentals/traversal/traversal-%EB%B0%A9%EB%B2%95-%EB%B9%84%EA%B5%90/</guid>
      <description>트리 순회(Tree Traversal)는 트리의 노드를 방문하는 방법으로, 트리 구조에서 데이터를 검색하고 처리하는 기본 개념이다.</description>
    </item>
    <item>
      <title>Runtime</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/runtime/</link>
      <pubDate>Thu, 05 Dec 2024 04:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/runtime/</guid>
      <description>컴퓨터 과학에서 **런타임(runtime)** 은 프로그램이 실제로 실행되는 기간과 그 실행 환경 전체를 의미한다.</description>
    </item>
    <item>
      <title>OSI 7 Layers - 5. Session Layer</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/osi-7layers/session-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/osi-7layers/session-layer/</guid>
      <description>세션 계층은 OSI 모델의 5번째 계층으로, 통신 세션을 구성하는 계층으로 응용 프로그램 간의 대화를 유지하기 위한 구조를 제공하고, 프로세스들의 논리적인 연결을 담당한다.</description>
    </item>
    <item>
      <title>JIT Compiler vs AOT Compiler</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/compiler/jit-compiler-vs-aot-compiler/</link>
      <pubDate>Mon, 14 Oct 2024 18:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/compiler/jit-compiler-vs-aot-compiler/</guid>
      <description>JIT 컴파일러와 AOT 컴파일러는 모두 소스 코드 또는 중간 표현(바이트코드)을 기계어 코드로 변환한다는 공통점을 가지지만, 언제 그리고 어떻게 컴파일하는지에 큰 차이가 있다</description>
    </item>
    <item>
      <title>AOT vs. JIT vs. Interpreter</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/aot-vs-jit-vs-interpreter/</link>
      <pubDate>Mon, 14 Oct 2024 00:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/aot-vs-jit-vs-interpreter/</guid>
      <description>AOT, JIT, 그리고 인터프리터는 모두 소스 코드를 실행 가능한 형태로 변환하는 언어 처리 방식이지만, 언제 어떻게 변환이 이루어지는지에 따라 큰 차이가 있다.</description>
    </item>
    <item>
      <title>언어 프로세서(Language Processor)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/</link>
      <pubDate>Thu, 05 Dec 2024 03:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/compilers-and-programming-language-theory/language-processor/</guid>
      <description>소스 코드나 어셈블리어 등 인간이 이해하기 편한 언어로 작성된 코드를 컴퓨터가 실행할 수 있는 기계어나 그에 가까운 형태로 변환하는 역할을 한다.</description>
    </item>
    <item>
      <title>OSI 7 Layers - 6. Presentation Layer</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/osi-7layers/presentation-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/osi-7layers/presentation-layer/</guid>
      <description>OSI 7계층 모델에서 6번째 계층으로, 데이터의 표현과 암호화를 담당하는 중요한 역할을 한다.</description>
    </item>
    <item>
      <title>OSI 7 Layers - 7. Application Layer</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/osi-7layers/application-layer/</link>
      <pubDate>Wed, 16 Oct 2024 07:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/osi-7layers/application-layer/</guid>
      <description>OSI 7계층 모델에서 최상위 계층으로, 사용자와 네트워크 간의 직접적인 상호작용을 담당한다</description>
    </item>
    <item>
      <title>가비지 컬렉션 (Garbage Collection, GC)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/</link>
      <pubDate>Sun, 06 Oct 2024 10:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/garbage-collection/</guid>
      <description>프로그래밍 언어의 메모리 관리 기법 중 하나로, 프로그램이 동적으로 할당했던 메모리 영역 중에서 더 이상 사용하지 않는 영역을 자동으로 찾아내어 해제하는 기능</description>
    </item>
    <item>
      <title>JSON vs. XML vs. Protobuf vs. MessagePack vs. Parquet</title>
      <link>https://buenhyden.github.io/posts/backend-development/backend-fundamentals/data-exchange/</link>
      <pubDate>Sat, 26 Oct 2024 11:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/backend-fundamentals/data-exchange/</guid>
      <description>데이터 직렬화 형식은 애플리케이션 간 데이터 교환의 핵심 요소이다.</description>
    </item>
    <item>
      <title>Encoding and Decoding</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/encoding-and-decoding/</link>
      <pubDate>Sat, 26 Oct 2024 07:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/encoding-and-decoding/</guid>
      <description>인코딩(Encoding)은 데이터를 특정 형식으로 변환하는 과정이고, 디코딩(Decoding)은 인코딩의 반대 과정으로, 변환된 데이터를 원래의 형식으로 되돌리는 과정</description>
    </item>
    <item>
      <title>Blocking vs Non-Blocking</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/blocking-vs-non-blocking/</link>
      <pubDate>Sun, 06 Oct 2024 12:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/blocking-vs-non-blocking/</guid>
      <description>프로그래밍에서 작업 처리 방식에 따라 프로그램의 실행 흐름이 어떻게 영향을 받는지를 설명하는 개념.</description>
    </item>
    <item>
      <title>Poetry vs uv vs Rye</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/poetry-vs-uv-vs-rye/</link>
      <pubDate>Wed, 27 Nov 2024 06:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/poetry-vs-uv-vs-rye/</guid>
      <description>파이썬 프로젝트 관리와 패키지 설치를 위한 도구들</description>
    </item>
    <item>
      <title>Streaming vs Polling</title>
      <link>https://buenhyden.github.io/posts/backend-development/backend-fundamentals/backend-basics/request-response-cycle/streaming/streaming-vs-polling/</link>
      <pubDate>Sun, 20 Oct 2024 08:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/backend-fundamentals/backend-basics/request-response-cycle/streaming/streaming-vs-polling/</guid>
      <description>Streaming과 polling은 실시간 데이터 전송을 위해 사용되는 두 가지 주요 기술</description>
    </item>
    <item>
      <title>동기(Synchronous) vs. 비동기(Asynchronous) and Blocking vs. Non-Blocking</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/synchronous-and-asynchronous-and-blocking-and-non-blocking/</link>
      <pubDate>Sun, 06 Oct 2024 12:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/synchronous-and-asynchronous-and-blocking-and-non-blocking/</guid>
      <description>동기(Synchronous)와 비동기(Asynchronous) 그리고 Blocking와 Non-Blocking</description>
    </item>
    <item>
      <title>setup.cfg vs pyproject.toml</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/configuration/setup.cfg-vs-pyproject.toml/</link>
      <pubDate>Wed, 27 Nov 2024 14:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/configuration/setup.cfg-vs-pyproject.toml/</guid>
      <description>Python 프로젝트의 구성과 메타데이터를 정의하는 파일 형식이다.</description>
    </item>
    <item>
      <title>Connection Pool</title>
      <link>https://buenhyden.github.io/posts/backend-development/databases/database-integration/connection-pool/</link>
      <pubDate>Fri, 25 Oct 2024 06:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/databases/database-integration/connection-pool/</guid>
      <description>Connection pool은 데이터베이스 연결을 재사용 가능한 형태로 캐시하는 메커니즘이다.  이는 애플리케이션이 데이터베이스에 연결할 때마다 새로운 연결을 생성하는 대신, 미리 생성된 연결을 사용할 수 있게 해준다.</description>
    </item>
    <item>
      <title>ER(Entity-Relationship) 모델링</title>
      <link>https://buenhyden.github.io/posts/backend-development/databases/fundamentals/data-modeling/entity-relationship/entity-relationship-modeling/</link>
      <pubDate>Fri, 25 Oct 2024 02:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/databases/fundamentals/data-modeling/entity-relationship/entity-relationship-modeling/</guid>
      <description>실제 세계의 데이터를 개체(Entity), 관계(Relationship), 속성(Attribute)으로 표현하여 데이터베이스를 설계하는 방법</description>
    </item>
    <item>
      <title>DNS</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/fundamentals/internet/dns/</link>
      <pubDate>Tue, 01 Apr 2025 02:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/fundamentals/internet/dns/</guid>
      <description>DNS(Domain Name System)는 인터넷의 전화번호부와 같은 역할을 한다. 사람이 읽고 이해할 수 있는 도메인 이름(예: www.example.com)을 컴퓨터가 이해할 수 있는 IP 주소(예: 192.0.2.1)로 변환해주는 시스템이다.</description>
    </item>
    <item>
      <title>Domain Name</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/fundamentals/internet/domain-name/</link>
      <pubDate>Tue, 01 Apr 2025 02:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/fundamentals/internet/domain-name/</guid>
      <description>도메인 이름은 인터넷에서 특정 위치를 식별하는 사람이 읽을 수 있는 주소이다.</description>
    </item>
    <item>
      <title>Hosting</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/fundamentals/internet/hosting/</link>
      <pubDate>Mon, 31 Mar 2025 23:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/fundamentals/internet/hosting/</guid>
      <description>호스팅은 API, 웹사이트, 애플리케이션과 같은 디지털 자산을 인터넷을 통해 사용자에게 제공하기 위해 서버 공간과 자원을 제공하는 서비스이다.</description>
    </item>
    <item>
      <title>Base64</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/encoding-and-decoding/base64/</link>
      <pubDate>Wed, 12 Mar 2025 13:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/encoding-and-decoding/base64/</guid>
      <description>Base64는 바이너리 데이터를 텍스트 형식으로 안전하게 변환하기 위한 인코딩 시스템이다.</description>
    </item>
    <item>
      <title>API First Design</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-fundamentals/api-first-design/</link>
      <pubDate>Thu, 27 Feb 2025 13:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-fundamentals/api-first-design/</guid>
      <description>API를 먼저 설계하고 이를 중심으로 개발을 진행함으로써, 다양한 클라이언트 플랫폼을 지원하고 개발 효율성을 높일 수 있다. 단순히 기술적 측면뿐만 아니라 비즈니스 민첩성, 개발자 경험, 제품 품질 등 여러 측면에서 이점을 제공한다. 올바르게 적용하기 위해서는 명확한 설계 표준, 적절한 도구, 그리고 팀 문화의 변화가 필요하다. 마이크로서비스 아키텍처, 클라우드 네이티브 애플리케이션, 그리고 다양한 디지털 채널을 통합해야 하는 현대 비즈니스 환경에서 그 중요성이 더욱 부각되고 있다.</description>
    </item>
    <item>
      <title>Pagination</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-performance/pagination/</link>
      <pubDate>Thu, 27 Feb 2025 02:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-performance/pagination/</guid>
      <description>페이지네이션을 통해 서버는 데이터를 작은 &amp;#34;페이지&amp;#34; 단위로 나누어 전달하여 성능, 사용자 경험, 리소스 사용을 모두 최적화할 수 있다.</description>
    </item>
    <item>
      <title>URI Design</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-fundamentals/uri-design/</link>
      <pubDate>Thu, 27 Feb 2025 02:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-fundamentals/uri-design/</guid>
      <description>잘 설계된 URI는 API의 직관성을 높이고, 학습 곡선을 완화하며, 리소스의 구조와 관계를 명확히 보여준다.</description>
    </item>
    <item>
      <title>Versioning Strategies</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-lifecycle-management/versioning/</link>
      <pubDate>Thu, 27 Feb 2025 02:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-lifecycle-management/versioning/</guid>
      <description>API 버전 관리는 현대 소프트웨어 개발의 핵심 요소로, 기존 클라이언트의 호환성을 유지하면서 API를 발전시키는 방법이다.</description>
    </item>
    <item>
      <title>AI Engineer vs. ML Engineer</title>
      <link>https://buenhyden.github.io/posts/ai/ai-engineering/fundamentals/ai-engineer-vs-ml-engineer/</link>
      <pubDate>Tue, 25 Feb 2025 14:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/ai/ai-engineering/fundamentals/ai-engineer-vs-ml-engineer/</guid>
      <description>AI Engineer는 NLP, Computer Vision 등을 포함한 복합적인 AI 시스템을 개발하고 ML Engineer는 데이터 기반 ML 모델 구축 및 최적화를 수행한다.</description>
    </item>
    <item>
      <title>AI vs. AGI</title>
      <link>https://buenhyden.github.io/posts/ai/fundamentals/ai-vs-agi/</link>
      <pubDate>Tue, 25 Feb 2025 14:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/ai/fundamentals/ai-vs-agi/</guid>
      <description>AI (Artificial Intelligence)는 특정 작업을 수행하기 위해 인간의 지능을 모방하는 기술이며 AGI (Artificial General Intelligence)는 모든 지적 작업에서 인간 수준의 인지 능력을 갖춘 이론적 시스템을 말한다.</description>
    </item>
    <item>
      <title>Hashing</title>
      <link>https://buenhyden.github.io/posts/security-engineering/cryptography/hashing/</link>
      <pubDate>Thu, 02 Jan 2025 01:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/cryptography/hashing/</guid>
      <description>해싱(Hashing)은 임의의 크기를 가진 데이터를 고정된 크기의 값으로 변환하는 과정이다.</description>
    </item>
    <item>
      <title>Deterministic vs. Nondeterministic computation</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/fundamentals/computational-theory/deterministic-vs-nondeterministic-computation/</link>
      <pubDate>Fri, 27 Dec 2024 08:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/fundamentals/computational-theory/deterministic-vs-nondeterministic-computation/</guid>
      <description>결정론적 계산은 현대 컴퓨터의 기반이 되는 예측 가능하고 명확한 모델을 제공하는 반면, 비결정론적 계산은 이론적으로 더 강력한 계산 모델의 가능성을 탐구한다.</description>
    </item>
    <item>
      <title>P vs NP problem</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/theoretical-foundations/computational-complexity/p-vs-np-problem/</link>
      <pubDate>Fri, 27 Dec 2024 08:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/theoretical-foundations/computational-complexity/p-vs-np-problem/</guid>
      <description>P vs NP 문제는 컴퓨터 과학, 특히 계산 복잡도 이론에서 가장 중요한 미해결 문제 중 하나이다</description>
    </item>
    <item>
      <title>Event Loop</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript-and-typescript/runtime-environments/nodejs/fundamentals/async-programming/event-loop/</link>
      <pubDate>Thu, 26 Dec 2024 14:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript-and-typescript/runtime-environments/nodejs/fundamentals/async-programming/event-loop/</guid>
      <description>Node.js의 이벤트 루프는 Node.js 애플리케이션의 핵심 작동 원리로, 비동기 I/O 작업을 효율적으로 처리하는 메커니즘이다.</description>
    </item>
    <item>
      <title>지연 초기화(Lazy Initialization)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/fundamentals/lazy-initialization/</link>
      <pubDate>Wed, 18 Dec 2024 10:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/fundamentals/lazy-initialization/</guid>
      <description>지연 초기화(Lazy Initialization)는 객체 생성, 값 계산, 또는 기타 비용이 많이 드는 프로세스를 실제로 필요할 때까지 연기하는 프로그래밍 기법</description>
    </item>
    <item>
      <title>UML</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architecture-documentation-and-modeling/uml-modeling/uml/</link>
      <pubDate>Mon, 16 Dec 2024 12:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architecture-documentation-and-modeling/uml-modeling/uml/</guid>
      <description>UML(Unified Modeling Language)은 시스템, 소프트웨어, 비즈니스 프로세스를 시각적으로 모델링하기 위한 표준화된 범용 모델링 언어이다.</description>
    </item>
    <item>
      <title>Format</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/format/</link>
      <pubDate>Mon, 16 Dec 2024 12:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/format/</guid>
      <description>데이터 포맷은 정보를 구조화하고, 저장하며, 교환하는 표준화된 방식이다.</description>
    </item>
    <item>
      <title>Bitwise Operators</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/binary-representation/bitwise-operations/</link>
      <pubDate>Sat, 14 Dec 2024 12:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/binary-representation/bitwise-operations/</guid>
      <description>비트와이즈 연산자는 비트 수준에서 작동하는 연산자로, 데이터를 효율적으로 다루는 데 필수적인 도구</description>
    </item>
    <item>
      <title>Little Endian</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/binary-representation/endianness/little-endian/</link>
      <pubDate>Fri, 13 Dec 2024 16:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/binary-representation/endianness/little-endian/</guid>
      <description>리틀 엔디안은 낮은 자리의 바이트가 낮은 메모리 주소에 먼저 저장되는 방식이다. 즉, 데이터의 &amp;#34;작은&amp;#34; 부분(Least Significant Byte)이 메모리의 작은 주소에 위치한다.</description>
    </item>
    <item>
      <title>Big Endian</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/binary-representation/endianness/big-endian/</link>
      <pubDate>Fri, 13 Dec 2024 16:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/binary-representation/endianness/big-endian/</guid>
      <description>빅 엔디안은 가장 중요한 바이트(Most Significant Byte, MSB)를 먼저 저장하는 방식이다. 즉, 높은 자리의 바이트가 낮은 메모리 주소에 위치한다.</description>
    </item>
    <item>
      <title>Endianness</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/binary-representation/endianness/</link>
      <pubDate>Fri, 13 Dec 2024 16:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/binary-representation/endianness/</guid>
      <description>Endianness(엔디안)는 컴퓨터 메모리에서 데이터를 저장하는 바이트 순서를 의미한다.</description>
    </item>
    <item>
      <title>Floating Point Numbers</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/binary-representation/floating-point/</link>
      <pubDate>Fri, 13 Dec 2024 16:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/binary-representation/floating-point/</guid>
      <description>부동소수점 수는 컴퓨터에서 실수를 표현하는 핵심적인 방식</description>
    </item>
    <item>
      <title>문자 인코딩(Character Encodings)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/encoding-and-decoding/character/</link>
      <pubDate>Fri, 13 Dec 2024 12:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/encoding-and-decoding/character/</guid>
      <description>문자 인코딩은 인간이 읽을 수 있는 텍스트를 컴퓨터가 이해할 수 있는 이진 형식으로 변환하는 방법을 정의한다.</description>
    </item>
    <item>
      <title>Asymptotic Notation</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/fundamentals/computational-theory/asymptotic-notation/</link>
      <pubDate>Fri, 06 Dec 2024 10:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/fundamentals/computational-theory/asymptotic-notation/</guid>
      <description>점근적 표기법은 알고리즘의 효율성을 수학적으로 표현하는 방법으로, 입력 크기가 무한히 커질 때 알고리즘의 성능이 어떻게 변화하는지를 나타낸다.</description>
    </item>
    <item>
      <title>CSR</title>
      <link>https://buenhyden.github.io/posts/frontend-development/rendering-strategies/client-side-rendering/</link>
      <pubDate>Mon, 02 Dec 2024 03:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/frontend-development/rendering-strategies/client-side-rendering/</guid>
      <description>웹 애플리케이션에서 클라이언트 측, 즉 사용자의 웹 브라우저에서 JavaScript를 사용하여 웹 페이지를 렌더링하는 방식</description>
    </item>
    <item>
      <title>setup.cfg</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/configuration/setup.cfg/</link>
      <pubDate>Wed, 27 Nov 2024 14:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/configuration/setup.cfg/</guid>
      <description>파이썬 프로젝트의 설정을 관리하는 구성 파일</description>
    </item>
    <item>
      <title>Poetry</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/poetry/</link>
      <pubDate>Wed, 27 Nov 2024 13:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/poetry/</guid>
      <description>Python 프로젝트의 의존성 관리와 패키징을 위한 도구</description>
    </item>
    <item>
      <title>The pyproject.toml file</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/configuration/the-pyproject.toml-file/</link>
      <pubDate>Wed, 27 Nov 2024 06:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/configuration/the-pyproject.toml-file/</guid>
      <description>Python 프로젝트의 구성 정보와 빌드 시스템 요구 사항을 정의하는 표준화된 구성 파일</description>
    </item>
    <item>
      <title>Rye</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/rye/</link>
      <pubDate>Wed, 27 Nov 2024 04:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/rye/</guid>
      <description>Rye는 파이썬 프로젝트와 패키지 관리를 위한 통합 솔루션으로, 2022년 11월에 Pynecone이라는 이름으로 처음 공개되었으나, 2023년 6월에 Rye로 이름이 변경되었다.</description>
    </item>
    <item>
      <title>uv</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/uv/</link>
      <pubDate>Wed, 27 Nov 2024 04:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/fundamentals/package-managers/uv/</guid>
      <description>Rust로 작성된 UV는 기존의 pip, pip-tools, virtualenv 등을 대체할 수 있는 초고속 파이썬 패키지 설치 및 의존성 해결 도구이다.</description>
    </item>
    <item>
      <title>Python Keywords</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/keywords/</link>
      <pubDate>Sun, 24 Nov 2024 10:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/keywords/</guid>
      <description>파이썬에서 이미 예약되어있는 문자열</description>
    </item>
    <item>
      <title>Generator and Iterator</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/generator-and-iterator/</link>
      <pubDate>Sun, 24 Nov 2024 10:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/generator-and-iterator/</guid>
      <description>이터레이터는 값을 차례대로 반환하는 객체로, `__iter__()`와 `__next__()` 메서드를 구현한다.  제너레이터는 `yield` 키워드를 사용하여 값을 하나씩 반환하는 함수로, 이터레이터를 생성한다.</description>
    </item>
    <item>
      <title>Java Keywords</title>
      <link>https://buenhyden.github.io/posts/programming-languages/java/fundamentals/keywords/</link>
      <pubDate>Wed, 20 Nov 2024 02:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/java/fundamentals/keywords/</guid>
      <description>키워드들은 Java 언어의 기본 구성 요소이며, 각각이 특정한 프로그래밍 목적을 위해 설계되었다.  변수, 메서드, 클래스, 제어문 등 다양한 요소를 정의하고 제어하는 데 필수적인 역할을 한다.</description>
    </item>
    <item>
      <title>비대칭키 암호화 (Asymmetric Encryption)</title>
      <link>https://buenhyden.github.io/posts/security-engineering/cryptography/encryption/asymmetric-encryption/</link>
      <pubDate>Sat, 09 Nov 2024 21:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/cryptography/encryption/asymmetric-encryption/</guid>
      <description>공개키 암호화라고도 불리며, 암호화와 복호화에 서로 다른 두 개의 키를 사용하는 암호화 방식</description>
    </item>
    <item>
      <title>대칭키 암호화 (Symmetric Encryption)</title>
      <link>https://buenhyden.github.io/posts/security-engineering/cryptography/encryption/symmetric-encryption/</link>
      <pubDate>Sat, 09 Nov 2024 21:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/cryptography/encryption/symmetric-encryption/</guid>
      <description>동일한 키를 사용하여 데이터를 암호화하고 복호화하는 방식</description>
    </item>
    <item>
      <title>동형 암호화(Homomorphic Encryption)</title>
      <link>https://buenhyden.github.io/posts/security-engineering/cryptography/encryption/homomorphic-encryption/</link>
      <pubDate>Sat, 09 Nov 2024 13:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/cryptography/encryption/homomorphic-encryption/</guid>
      <description>동형 암호화는 암호화된 데이터를 복호화하지 않은 상태에서 연산을 수행할 수 있게 해주는 암호화 기술</description>
    </item>
    <item>
      <title>양자 암호화(quantum cryptography)</title>
      <link>https://buenhyden.github.io/posts/security-engineering/cryptography/quantum-cryptography/</link>
      <pubDate>Sat, 09 Nov 2024 13:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/cryptography/quantum-cryptography/</guid>
      <description>양자역학의 원리를 활용하여 완벽한 보안을 실현하는 암호화 기술</description>
    </item>
    <item>
      <title>영지식 증명(Zero-Knowledge Proof, ZKP)</title>
      <link>https://buenhyden.github.io/posts/security-engineering/cryptography/zero-knowledge-proof/</link>
      <pubDate>Sat, 09 Nov 2024 13:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/cryptography/zero-knowledge-proof/</guid>
      <description>영지식 증명은 어떤 명제가 참이라는 것을 증명하면서도, 그 명제에 대한 구체적인 정보는 전혀 공개하지 않는 암호학적 방법.</description>
    </item>
    <item>
      <title>OWASP Top 10</title>
      <link>https://buenhyden.github.io/posts/security-engineering/fundamentals/owasp-top-10/</link>
      <pubDate>Sat, 09 Nov 2024 11:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/fundamentals/owasp-top-10/</guid>
      <description>웹 애플리케이션의 가장 심각한 보안 위험 10가지를 정리한 보고서</description>
    </item>
    <item>
      <title>디지털 서명 (digital signature)</title>
      <link>https://buenhyden.github.io/posts/security-engineering/cryptography/authentication/digital-signature/</link>
      <pubDate>Sat, 09 Nov 2024 06:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/cryptography/authentication/digital-signature/</guid>
      <description>전자 문서나 메시지의 진위성, 무결성, 그리고 부인 방지를 보장하기 위해 사용되는 암호화 기술</description>
    </item>
    <item>
      <title>제로 트러스트 (Zero Trust)</title>
      <link>https://buenhyden.github.io/posts/security-engineering/fundamentals/zero-trust/</link>
      <pubDate>Sat, 09 Nov 2024 01:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/fundamentals/zero-trust/</guid>
      <description> &amp;#34;절대 신뢰하지 말고, 항상 검증하라(Never trust, always verify)&amp;#34;라는 보안 철학에 기반을 둔 현대적인 보안 접근 방식</description>
    </item>
    <item>
      <title>Message Authentication Code</title>
      <link>https://buenhyden.github.io/posts/security-engineering/cryptography/authentication/message-authentication-code/</link>
      <pubDate>Fri, 08 Nov 2024 13:10:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security-engineering/cryptography/authentication/message-authentication-code/</guid>
      <description>Message Authentication Code는 메시지의 무결성(integrity)과 출처 인증(authentication)을 동시에 보장하기 위한 암호학적 도구로, 메시지와 비밀키를 입력으로 받아 고정된 길이의 값을 생성하며, 이 값은 메시지에 대한 일종의 디지털 지문 역할을 한다.</description>
    </item>
    <item>
      <title>Black-box Test and White-box Test</title>
      <link>https://buenhyden.github.io/posts/quality-assurance/testing-approaches/black-box-test-and-white-box-test/</link>
      <pubDate>Tue, 05 Nov 2024 02:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/quality-assurance/testing-approaches/black-box-test-and-white-box-test/</guid>
      <description>Black-box Testing(블랙박스 테스팅)은 소프트웨어의 내부 구조나 동작 원리를 모르는 상태에서 진행하는 테스트 방식이다. 반면 White-box Testing(화이트박스 테스팅)은 소프트웨어의 내부 로직을 알고 있는 상태에서 진행하는 테스트이다.</description>
    </item>
    <item>
      <title>Fakes</title>
      <link>https://buenhyden.github.io/posts/quality-assurance/test-double/fakes/</link>
      <pubDate>Fri, 01 Nov 2024 21:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/quality-assurance/test-double/fakes/</guid>
      <description>실제 객체의 간단한 구현을 제공하는 테스트용 객체</description>
    </item>
    <item>
      <title>Dummy Objects</title>
      <link>https://buenhyden.github.io/posts/quality-assurance/test-double/dummy-objects/</link>
      <pubDate>Fri, 01 Nov 2024 21:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/quality-assurance/test-double/dummy-objects/</guid>
      <description>테스트 과정에서 실제로는 사용되지 않지만 메서드의 파라미터를 채우기 위해 전달되는 객체</description>
    </item>
    <item>
      <title>Spies</title>
      <link>https://buenhyden.github.io/posts/quality-assurance/test-double/spies/</link>
      <pubDate>Fri, 01 Nov 2024 21:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/quality-assurance/test-double/spies/</guid>
      <description>실제 객체의 메서드 호출을 추적하고 기록하는 데 사용</description>
    </item>
    <item>
      <title>Test Double</title>
      <link>https://buenhyden.github.io/posts/quality-assurance/test-double/</link>
      <pubDate>Fri, 01 Nov 2024 21:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/quality-assurance/test-double/</guid>
      <description>소프트웨어 테스트에서 실제 객체를 대신하여 사용되는 테스트용 객체</description>
    </item>
    <item>
      <title>Stubs</title>
      <link>https://buenhyden.github.io/posts/quality-assurance/test-double/stubs/</link>
      <pubDate>Fri, 01 Nov 2024 09:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/quality-assurance/test-double/stubs/</guid>
      <description>테스트에서 사용되는 기법으로, 실제 객체나 아직 구현되지 않은 코드를 대신하여 미리 정의된 응답을 제공하는 메커니즘</description>
    </item>
    <item>
      <title>코드 크기 메트릭(Lines of Code, LOC)</title>
      <link>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/lines-of-code/</link>
      <pubDate>Mon, 28 Oct 2024 10:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/lines-of-code/</guid>
      <description>이 메트릭은 프로그램의 크기를 코드 라인 수로 표현하며, 소프트웨어 개발 프로젝트의 규모 추정, 생산성 측정, 품질 관리 등에 활용된다</description>
    </item>
    <item>
      <title>유지보수성 지수 (Maintainability Index)</title>
      <link>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/maintainability-index/</link>
      <pubDate>Mon, 28 Oct 2024 09:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/maintainability-index/</guid>
      <description>유지보수성 지수는 코드를 얼마나 쉽게 유지보수할 수 있는지를 나타내는 0에서 100 사이의 수치로 높을수록 코드의 유지보수가 더 쉽다는 것을 의미한다.</description>
    </item>
    <item>
      <title>응집도(Cohesion)</title>
      <link>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/cohesion/</link>
      <pubDate>Mon, 28 Oct 2024 09:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/cohesion/</guid>
      <description>하나의 모듈이 얼마나 단일한 목적에 집중되어 있는지를 나타낸다.</description>
    </item>
    <item>
      <title>코드 중복도 (Code Duplication)</title>
      <link>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/code-duplication/</link>
      <pubDate>Mon, 28 Oct 2024 09:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/code-duplication/</guid>
      <description>코드 중복도는 소프트웨어 내에서 동일하거나 유사한 코드가 반복되는 정도를 나타낸다</description>
    </item>
    <item>
      <title>결합도 (Coupling)</title>
      <link>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/coupling/</link>
      <pubDate>Mon, 28 Oct 2024 09:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/coupling/</guid>
      <description>서로 다른 모듈 간의 상호 의존성이나 연관성을 측정하는 지표</description>
    </item>
    <item>
      <title>테스트 커버리지 (Test Coverage)</title>
      <link>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/test-coverage/</link>
      <pubDate>Mon, 28 Oct 2024 09:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/test-coverage/</guid>
      <description>테스트 커버리지는 테스트 대상 시스템이나 소프트웨어에 대해 얼마나 충분한 테스트가 수행되었는지를 나타내는 척도</description>
    </item>
    <item>
      <title>Halstead Complexity</title>
      <link>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/halstead-complexity/</link>
      <pubDate>Mon, 28 Oct 2024 09:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/halstead-complexity/</guid>
      <description>프로그램의 복잡성을 연산자(operators)와 피연산자(operands)의 수를 기반으로 측정한다</description>
    </item>
    <item>
      <title>순환 복잡도 (Cyclomatic Complexity)</title>
      <link>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/cyclomatic-complexity/</link>
      <pubDate>Mon, 28 Oct 2024 07:12:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/cyclomatic-complexity/</guid>
      <description>프로그램의 논리적 복잡성을 정량적으로 측정하는 지표</description>
    </item>
    <item>
      <title>품질 메트릭 (Quality Metric)</title>
      <link>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/</link>
      <pubDate>Mon, 28 Oct 2024 05:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/quality-assurance/fundamentals/quality-metric/</guid>
      <description>소프트웨어 개발 프로세스, 제품, 테스트 활동의 품질과 효과성을 평가하고 측정하는 데 사용되는 정량적 지표이다</description>
    </item>
    <item>
      <title>Serialization and Deserialization</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/serialization-and-deserialization/</link>
      <pubDate>Sat, 26 Oct 2024 09:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/fundamentals/serialization-and-deserialization/</guid>
      <description>직렬화(Serialization)는 데이터 구조나 객체 상태를 저장하거나 전송할 수 있는 형식으로 변환하는 과정이다. 역직렬화(Deserialization)는 직렬화의 반대 과정으로, 저장되거나 전송된 바이트 스트림이나 텍스트를 원래의 객체 구조로 다시 변환하는 작업이다.</description>
    </item>
    <item>
      <title>데이터 불일치 (Data Inconsistency)</title>
      <link>https://buenhyden.github.io/posts/backend-development/databases/fundamentals/data-inconsistency/</link>
      <pubDate>Fri, 25 Oct 2024 07:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/databases/fundamentals/data-inconsistency/</guid>
      <description>동일한 데이터가 데이터베이스 내의 여러 위치에서 서로 다른 형식이나 값으로 존재하는 상황</description>
    </item>
    <item>
      <title>Cloud Networking</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/fundamentals/cloud-networking/</link>
      <pubDate>Sun, 20 Oct 2024 17:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/fundamentals/cloud-networking/</guid>
      <description>클라우드 네트워킹은 클라우드 컴퓨팅 환경에서 리소스들을 연결하고 통신할 수 있게 해주는 인프라를 의미한다.</description>
    </item>
    <item>
      <title>Data Transmission</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/fundamentals/data-transmission/</link>
      <pubDate>Sun, 20 Oct 2024 09:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/fundamentals/data-transmission/</guid>
      <description>데이터 전송 및 처리 방식은 다양한 기준에 따라 분류되며, 각 방식은 특정한 통신 환경과 요구 사항에 맞게 선택된다.</description>
    </item>
    <item>
      <title>스트리밍 (Streaming)</title>
      <link>https://buenhyden.github.io/posts/backend-development/backend-fundamentals/backend-basics/request-response-cycle/streaming/</link>
      <pubDate>Sun, 20 Oct 2024 06:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/backend-fundamentals/backend-basics/request-response-cycle/streaming/</guid>
      <description>스트리밍은 인터넷을 통해 오디오, 비디오 및 기타 콘텐츠를 실시간으로 전송하고 재생하는 기술</description>
    </item>
    <item>
      <title>네트워크 기능 가상화(Network Functions Virtualization, NFV)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/evolved-architectures/sdn-nfv-architecture/network-functions-virtualization/</link>
      <pubDate>Sun, 20 Oct 2024 02:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/evolved-architectures/sdn-nfv-architecture/network-functions-virtualization/</guid>
      <description>NFV는 전통적으로 전용 하드웨어 장비에서 실행되던 네트워크 기능들을 가상화하여 소프트웨어로 구현하는 네트워크 아키텍처 개념이다.</description>
    </item>
    <item>
      <title>소프트웨어 정의 네트워킹 (Software-Defined Networking, SDN)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/evolved-architectures/sdn-nfv-architecture/software-defined-networking/</link>
      <pubDate>Sun, 20 Oct 2024 02:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/evolved-architectures/sdn-nfv-architecture/software-defined-networking/</guid>
      <description>네트워크의 제어 기능을 네트워크 장비에서 분리하여 소프트웨어 기반 컨트롤러로 중앙집중화하는 네트워크 아키텍처.</description>
    </item>
    <item>
      <title>RDMA</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/fundamentals/rdma/</link>
      <pubDate>Sun, 20 Oct 2024 01:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/fundamentals/rdma/</guid>
      <description>네트워크 상의 한 컴퓨터에서 다른 컴퓨터의 메모리에 직접 접근할 수 있게 해주는 기술로, CPU의 개입 없이 데이터를 전송할 수 있는 고성능 네트워크 기술</description>
    </item>
    <item>
      <title>Media Access Control Address (MAC Address)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/cross-layer-functions/addressing-schemes/physical/mac-address/</link>
      <pubDate>Wed, 16 Oct 2024 12:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/layered-network-models/cross-layer-functions/addressing-schemes/physical/mac-address/</guid>
      <description>네트워크 장비를 식별하기 위한 고유한 하드웨어 주소</description>
    </item>
    <item>
      <title>Network Devices</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/network-devices/</link>
      <pubDate>Wed, 16 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/networking-knowledge/network-devices/</guid>
      <description>컴퓨터 네트워크와 통신 시스템에서 데이터를 전송, 수신, 처리하는데 사용되는 하드웨어 장치.</description>
    </item>
    <item>
      <title>환원 가능성 (Reducibility)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/theoretical-foundations/computational-complexity/complexity-classes/reducibility/</link>
      <pubDate>Sun, 13 Oct 2024 12:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/theoretical-foundations/computational-complexity/complexity-classes/reducibility/</guid>
      <description>환원 가능성은 하나의 문제를 다른 문제로 &amp;#34;변환&amp;#34;할 수 있는 능력을 의미한다.</description>
    </item>
    <item>
      <title>비결정성 (Non-determinism)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/fundamentals/computational-theory/non-determinism/</link>
      <pubDate>Sun, 13 Oct 2024 09:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/data-structures-and-algorithms/fundamentals/computational-theory/non-determinism/</guid>
      <description>알고리즘이나 시스템에서 동일한 입력에 대해 매번 다른 과정을 거쳐 다른 결과를 도출할 수 있는 특성</description>
    </item>
    <item>
      <title>비결정성 (Non-determinism)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/theoretical-foundations/non-determinism/</link>
      <pubDate>Sun, 13 Oct 2024 09:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/theoretical-foundations/non-determinism/</guid>
      <description>알고리즘이나 시스템에서 동일한 입력에 대해 매번 다른 과정을 거쳐 다른 결과를 도출할 수 있는 특성</description>
    </item>
    <item>
      <title>임계 영역 (Critical Section)</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/critical-section/</link>
      <pubDate>Thu, 03 Oct 2024 07:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/operating-systems/process-management/concurrency-and-parallelism/critical-section/</guid>
      <description>여러 프로세스 또는 스레드가 공유하는 자원에 접근하는 코드 영역</description>
    </item>
    <item>
      <title>Client Server Architecture</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/distributed/client-server-architecture/</link>
      <pubDate>Thu, 26 Sep 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architectural-styles/distributed/client-server-architecture/</guid>
      <description>클라이언트-서버 아키텍처는 네트워크 환경에서 **클라이언트**와 **서버**가 역할을 분담하여 상호작용하는 모델이다. 클라이언트(Client)가 요청(Request)을 보내고, 서버(Server)가 요청을 처리하여 응답(Response)한다.</description>
    </item>
  </channel>
</rss>
