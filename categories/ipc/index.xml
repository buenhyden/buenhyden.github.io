<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – IPC</title><link>https://buenhyden.github.io/categories/ipc/</link><description>Recent content in IPC on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 13 Jan 2025 12:03:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/categories/ipc/index.xml" rel="self" type="application/rss+xml"/><item><title>Message Queue</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/message-queue/</link><pubDate>Mon, 13 Jan 2025 12:03:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/message-queue/</guid><description>
&lt;h2>메시지 큐(Message Queue)&lt;/h2>&lt;p>프로세스 간 통신(IPC)의 메시지 큐(Message Queue)는 프로세스 간에 데이터를 교환하는 메커니즘이다.&lt;/p>
&lt;p>메시지 큐는 커널 내에 저장된 메시지의 연결 리스트로, 고유한 식별자로 구분된다.&lt;br>
이는 프로세스들이 비동기적으로 통신할 수 있게 해주는 IPC 메커니즘이다.&lt;/p>
&lt;p>메시지 크기 제한과 시스템 리소스 사용 등의 단점도 고려해야 한다.&lt;br>
적절한 사용 시나리오를 파악하고 효과적으로 활용하는 것이 중요하다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Process%20Mgmt/IPC/ipc-using-message-queues2.png"
alt="IPC - Message Queue"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.javatpoint.com/ipc-using-message-queues" target="_blank" rel="noopener">https://www.javatpoint.com/ipc-using-message-queues&lt;/a> _&lt;/p>
&lt;h3>메시지 큐의 특징&lt;/h3>&lt;ol>
&lt;li>&lt;strong>커널 관리&lt;/strong>: 메시지 큐는 커널에 의해 관리되어 안정성이 높고 동기화가 용이하다.&lt;/li>
&lt;li>&lt;strong>FIFO 순서&lt;/strong>: 메시지는 일반적으로 선입선출(FIFO) 순서로 처리된다.&lt;/li>
&lt;li>&lt;strong>비동기 통신&lt;/strong>: 송신 프로세스와 수신 프로세스가 동시에 활성화될 필요가 없다.&lt;/li>
&lt;li>&lt;strong>메시지 구조&lt;/strong>: 각 메시지는 타입 필드, 길이, 실제 데이터로 구성된다.&lt;/li>
&lt;li>&lt;strong>프로세스 분리&lt;/strong>: 메시지 큐를 사용하면 프로세스들이 서로 직접 연결되지 않아도 된다.&lt;/li>
&lt;/ol>
&lt;h3>메시지 큐의 주요 시스템 호출&lt;/h3>&lt;ol>
&lt;li>&lt;strong>ftok()&lt;/strong>: 고유한 키를 생성한다.&lt;/li>
&lt;li>&lt;strong>msgget()&lt;/strong>: 메시지 큐를 생성하거나 기존 큐의 식별자를 반환한다.&lt;/li>
&lt;li>&lt;strong>msgsnd()&lt;/strong>: 메시지를 큐에 추가한다.&lt;/li>
&lt;li>&lt;strong>msgrcv()&lt;/strong>: 큐에서 메시지를 검색한다.&lt;/li>
&lt;li>&lt;strong>msgctl()&lt;/strong>: 큐에 대한 다양한 작업을 수행한다.&lt;/li>
&lt;/ol>
&lt;h3>메시지 큐 사용 방법&lt;/h3>&lt;p>메시지 큐 생성:&lt;/p>
&lt;ol>
&lt;li>msgget() 시스템 콜을 사용하여 새로운 메시지 큐를 생성하거나 기존 큐에 접근한다.&lt;/li>
&lt;li>큐 생성 시 접근 권한을 지정할 수 있어 보안을 관리할 수 있다.&lt;/li>
&lt;/ol>
&lt;p>메시지 송신:&lt;/p>
&lt;ol>
&lt;li>msgsnd() 시스템 콜을 사용하여 메시지를 큐에 추가한다.&lt;/li>
&lt;li>메시지는 타입과 데이터로 구성된다.&lt;/li>
&lt;li>큐가 가득 찬 경우, 송신자는 대기하거나 에러를 반환받을 수 있다.&lt;/li>
&lt;/ol>
&lt;p>메시지 수신:&lt;/p>
&lt;ol>
&lt;li>msgrcv() 시스템 콜을 사용하여 메시지를 큐에서 가져온다.&lt;/li>
&lt;li>특정 타입의 메시지만 선택적으로 수신할 수 있다.&lt;/li>
&lt;li>큐가 비어있는 경우, 수신자는 대기하거나 에러를 반환받을 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>메시지 큐의 장단점&lt;/h3>&lt;h4>장점&lt;/h4>&lt;ul>
&lt;li>커널 관리로 인한 높은 안정성&lt;/li>
&lt;li>비동기 통신 가능&lt;/li>
&lt;li>프로세스 간 느슨한 결합 제공&lt;/li>
&lt;/ul>
&lt;h4>단점&lt;/h4>&lt;ul>
&lt;li>메시지 크기 제한&lt;/li>
&lt;li>시스템 리소스 사용&lt;/li>
&lt;li>복잡한 에러 처리 필요&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Shared Memory</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/shared-memory/</link><pubDate>Mon, 13 Jan 2025 12:03:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/shared-memory/</guid><description>
&lt;h2>공유 메모리(Shared Memory)&lt;/h2>&lt;p>공유 메모리(Shared Memory)는 운영체제의 프로세스 간 통신(IPC) 기법 중 하나로, 여러 프로세스가 동시에 접근할 수 있는 메모리 영역이며, 커널에 의해 생성되고 관리되는 공통 메모리 공간이다.&lt;br>
이는 여러 프로세스가 동일한 물리적 메모리 영역에 접근할 수 있게 해주며, IPC 메커니즘 중에서 가장 빠른 통신 방법을 제공한다.&lt;/p>
&lt;p>
&lt;figure class="image-figure">
&lt;img src="https://buenhyden.github.io/posts/Computer%20System/Operating%20System/Process%20Mgmt/IPC/share_memory.webp"
alt="Shared Memory"
loading="lazy" />
&lt;/figure>&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/ipc-shared-memory/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/ipc-shared-memory/&lt;/a> _&lt;/p>
&lt;h3>작동 원리&lt;/h3>&lt;ul>
&lt;li>프로세스가 커널에 공유 메모리 할당을 요청&lt;/li>
&lt;li>커널이 해당 프로세스에 메모리 공간을 할당&lt;/li>
&lt;li>이후 다른 프로세스들도 해당 메모리 영역에 접근 가능&lt;/li>
&lt;/ul>
&lt;h3>공유 메모리의 생성과 관리&lt;/h3>&lt;p>공유 메모리를 사용하는 일반적인 단계는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>공유 메모리 세그먼트 생성&lt;/li>
&lt;li>공유 메모리 접근 및 데이터 교환&lt;/li>
&lt;/ol>
&lt;h3>장점&lt;/h3>&lt;ul>
&lt;li>높은 성능: 커널의 개입 없이 직접 메모리에 접근하여 빠른 IPC 가능&lt;/li>
&lt;li>효율성: 불필요한 데이터 복사를 방지하여 오버헤드 감소&lt;/li>
&lt;li>유연성: 프로그램 레벨에서 자유로운 통신 가능&lt;/li>
&lt;/ul>
&lt;h3>주의사항&lt;/h3>&lt;ul>
&lt;li>동기화 이슈: 여러 프로세스가 동시에 접근할 수 있어 데이터 일관성 문제 발생 가능&lt;/li>
&lt;li>세마포어 등의 동기화 메커니즘과 함께 사용 필요&lt;/li>
&lt;/ul>
&lt;h4>공유 메모리의 동기화&lt;/h4>&lt;p>여러 프로세스가 동시에 공유 메모리에 접근할 때 발생할 수 있는 문제를 해결하기 위해 동기화가 필요하다:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SynchronizedSharedMemory&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_memory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create_shared_memory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">safe_write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;동기화된 쓰기 연산&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_to_shared_memory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_memory&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">safe_read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;동기화된 읽기 연산&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lock&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_from_shared_memory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_memory&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>실제 활용 예시&lt;/h3>&lt;ol>
&lt;li>
&lt;p>데이터베이스 캐싱:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">SharedCache&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 1MB 캐시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_memory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mmap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mmap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1"># 캐시 인덱스&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">cache_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;데이터를 캐시에 저장&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">position&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_memory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_memory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">get_cached_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;캐시된 데이터 조회&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">position&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_memory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">seek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_memory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">None&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>실시간 데이터 처리:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">RealTimeDataProcessor&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shared_buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">create_shared_memory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_position&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_position&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">process_data_stream&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;실시간 데이터 스트림 처리&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 데이터 쓰기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_to_buffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 다른 프로세스에서 데이터 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">processed_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_from_buffer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">processed_data&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>구현&lt;/h3>&lt;ul>
&lt;li>공유 메모리 생성 및 접근을 위한 시스템 콜 사용 (예: shmget, shmat)&lt;/li>
&lt;li>프로세스 간 공유 메모리 식별자를 통한 접근&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Pipe</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/pipe/</link><pubDate>Mon, 13 Jan 2025 12:02:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/pipe/</guid><description>
&lt;h2>파이프(Pipe)&lt;/h2>&lt;p>파이프(Pipe)는 프로세스 간 통신(IPC)의 한 방법으로, 단방향 데이터 흐름을 제공하는 가장 오래된 IPC(프로세스 간 통신) 메커니즘 중 하나이다. 파이프는 한쪽 끝에서 데이터를 쓰고 다른 쪽 끝에서 데이터를 읽을 수 있게 해준다.&lt;/p>
&lt;h3>종류&lt;/h3>&lt;ol>
&lt;li>
&lt;p>익명 파이프 (Anonymous Pipe): 부모-자식 프로세스 간 통신에 사용&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">create_anonymous_pipe&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;익명 파이프 생성 예제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">read_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">write_fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pipe&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fork&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1"># 프로세스 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 부모 프로세스&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">read_fd&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 읽기 끝 닫기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">write_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Hello from parent&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">write_fd&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 자식 프로세스&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">write_fd&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 쓰기 끝 닫기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">read_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;Child received: &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">read_fd&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>이름 있는 파이프 (Named Pipe 또는 FIFO): 관련 없는 프로세스 간 통신에 사용&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">create_named_pipe&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;이름 있는 파이프 생성 예제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pipe_path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;/tmp/my_pipe&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 파이프 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipe_path&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mkfifo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipe_path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 파이프 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pipe_path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;w&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">pipe_write&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pipe_write&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello through named pipe&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>파이프의 구현과 사용&lt;/h3>&lt;p>기본적인 파이프 통신 구현:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">PipeCommunication&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pipe&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">parent_process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;부모 프로세스의 파이프 사용&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_fd&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 읽기 끝 닫기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_fd&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">child_process&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;자식 프로세스의 파이프 사용&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write_fd&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 쓰기 끝 닫기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">message&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_fd&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>특징&lt;/h3>&lt;ul>
&lt;li>단방향 통신(Half-Duplex)&lt;/li>
&lt;li>양방향 통신을 위해서는 두 개의 파이프가 필요&lt;/li>
&lt;li>커널 영역에서 관리되는 버퍼를 통해 데이터 전송&lt;/li>
&lt;/ul>
&lt;h3>구현&lt;/h3>&lt;ul>
&lt;li>Unix/Linux에서 pipe() 시스템 콜을 사용하여 생성&lt;/li>
&lt;li>파일 디스크립터를 통해 접근 (읽기용, 쓰기용)&lt;/li>
&lt;/ul>
&lt;h3>장점&lt;/h3>&lt;ul>
&lt;li>간단한 구현&lt;/li>
&lt;li>동기화 문제 해결 (커널에서 관리)&lt;/li>
&lt;/ul>
&lt;h3>제한사항&lt;/h3>&lt;ul>
&lt;li>익명 파이프는 관련 프로세스 간에만 사용 가능&lt;/li>
&lt;li>네트워크를 통한 통신 불가 (동일 시스템 내에서만 사용)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>소켓(Socket)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/socket/</link><pubDate>Sun, 05 Jan 2025 16:30:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/process-mgmt/ipc/socket/</guid><description>
&lt;h2>소켓(Socket)&lt;/h2>&lt;p>소켓은 네트워크 상에서 수행되는 두 프로그램 간의 양방향 통신 링크의 한쪽 끝 단을 의미한다.&lt;br>
소켓은 프로세스가 네트워크를 통해 데이터를 송수신하기 위한 실제적인 창구 역할을 한다.&lt;br>
운영체제는 소켓을 통해 네트워크 통신을 위한 인터페이스를 제공한다.&lt;/p>
&lt;h3>소켓의 구성 요소&lt;/h3>&lt;p>소켓은 다음 세 가지 요소로 구성된다:&lt;/p>
&lt;ol>
&lt;li>프로토콜: 데이터 전송을 위한 표준 집합 규칙 (예: TCP/IP, UDP/IP)&lt;/li>
&lt;li>IP 주소: 서버 또는 클라이언트의 주소&lt;/li>
&lt;li>포트 번호: 통신을 사용하는 애플리케이션을 식별하는 번호&lt;/li>
&lt;/ol>
&lt;h3>소켓의 특징&lt;/h3>&lt;ul>
&lt;li>프로토콜, IP 주소, 포트 번호로 정의된다.&lt;/li>
&lt;li>서버 소켓과 클라이언트 소켓으로 구분된다.&lt;/li>
&lt;li>실시간 데이터 전송에 적합하다.&lt;/li>
&lt;/ul>
&lt;h3>소켓 통신의 장점&lt;/h3>&lt;ul>
&lt;li>실시간 양방향 통신이 가능하다.&lt;/li>
&lt;li>서버와 클라이언트 간 지속적인 연결을 유지할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3>소켓 통신의 단점&lt;/h3>&lt;ul>
&lt;li>HTTP 통신에 비해 구현이 복잡할 수 있다.&lt;/li>
&lt;li>지속적인 연결 유지로 인한 리소스 소비가 있을 수 있다.&lt;/li>
&lt;/ul>
&lt;h3>소켓의 종류&lt;/h3>&lt;p>소켓은 크게 두 가지 유형으로 나눌 수 있다:&lt;/p>
&lt;ol>
&lt;li>스트림 소켓(SOCK_STREAM)
&lt;ul>
&lt;li>TCP를 사용하는 연결 지향형 소켓&lt;/li>
&lt;li>연결 지향적이며 양방향으로 바이트 스트림을 전송한다.&lt;/li>
&lt;li>오류 수정, 전송 처리, 흐름 제어를 보장한다.&lt;/li>
&lt;li>데이터의 경계가 없는 바이트 스트림 서비스를 제공한다.&lt;/li>
&lt;li>웹 서버, 데이터베이스 연결 등에 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터그램 소켓(SOCK_DGRAM)
&lt;ul>
&lt;li>UDP를 사용하는 비연결형 소켓&lt;/li>
&lt;li>비연결형 소켓이다.&lt;/li>
&lt;li>데이터의 크기에 제한이 있으며, 전달이 보장되지 않는다.&lt;/li>
&lt;li>데이터 경계를 구분하는 데이터그램 서비스를 제공한다.&lt;/li>
&lt;li>실시간 스트리밍, 게임 등에 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>소켓 통신의 기본 흐름&lt;/h3>&lt;ul>
&lt;li>서버와 클라이언트 간의 연결이 성립되면 양방향으로 데이터 통신이 가능하다.&lt;/li>
&lt;li>TCP 연결의 경우, 연결 요청 시 3-way handshake 과정이 진행된다.&lt;/li>
&lt;li>서버는 여러 클라이언트의 연결 요청을 처리하기 위해 대기열(queue)을 만들어 관리한다.&lt;/li>
&lt;li>실제 데이터 송수신은 accept() 함수로 생성된 새로운 소켓을 통해 이루어진다.&lt;/li>
&lt;/ul>
&lt;p>이러한 기본 흐름을 통해 소켓은 네트워크 상에서 프로세스 간 통신의 종착점 역할을 하며, 전송 계층과 응용 프로그램 사이의 인터페이스로 작동한다.&lt;/p>
&lt;p>소켓 통신의 기본 흐름은 서버와 클라이언트 간의 상호작용으로 이루어진다. :&lt;/p>
&lt;ul>
&lt;li>
&lt;p>서버 측 흐름&lt;/p>
&lt;ol>
&lt;li>소켓 생성: socket() 함수를 사용하여 소켓을 생성한다.&lt;/li>
&lt;li>바인딩: bind() 함수로 소켓에 IP 주소와 포트 번호를 할당한다.&lt;/li>
&lt;li>연결 대기: listen() 함수를 호출하여 클라이언트의 연결 요청을 기다린다.&lt;/li>
&lt;li>연결 수락: accept() 함수로 클라이언트의 연결 요청을 수락한다. 이 때 새로운 소켓이 생성되어 클라이언트와의 통신에 사용된다.&lt;/li>
&lt;li>데이터 송수신: send()/recv() 함수를 사용하여 클라이언트와 데이터를 주고받는다.&lt;/li>
&lt;li>연결 종료: close() 함수로 소켓을 닫는다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>클라이언트 측 흐름&lt;/p>
&lt;ol>
&lt;li>소켓 생성: socket() 함수를 사용하여 소켓을 생성한다.&lt;/li>
&lt;li>연결 요청: connect() 함수를 호출하여 서버에 연결을 요청한다.&lt;/li>
&lt;li>데이터 송수신: send()/recv() 함수를 사용하여 서버와 데이터를 주고받는다.&lt;/li>
&lt;li>연결 종료: close() 함수로 소켓을 닫는다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>TCP 소켓의 경우:&lt;/p>
&lt;ol>
&lt;li>서버 소켓 생성&lt;/li>
&lt;li>서버 소켓 바인딩 (IP주소와 포트번호 할당)&lt;/li>
&lt;li>연결 대기 (Listen)&lt;/li>
&lt;li>클라이언트의 연결 요청 수락 (Accept)&lt;/li>
&lt;li>데이터 송수신&lt;/li>
&lt;li>연결 종료&lt;/li>
&lt;/ol>
&lt;p>UDP 소켓의 경우:&lt;/p>
&lt;ol>
&lt;li>소켓 생성&lt;/li>
&lt;li>소켓 바인딩&lt;/li>
&lt;li>데이터 송수신&lt;/li>
&lt;li>소켓 종료&lt;/li>
&lt;/ol>
&lt;h3>주요 소켓 함수&lt;/h3>&lt;p>소켓의 작동 방식에서 각 함수는 다음과 같은 역할을 수행한다:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>서버 측 함수&lt;/p>
&lt;ol>
&lt;li>socket(): 소켓을 생성한다. 통신의 첫 단계로, 네트워크 통신을 위한 엔드포인트를 만든다.&lt;/li>
&lt;li>bind(): 생성된 소켓에 IP 주소와 포트 번호를 할당한다. 이를 통해 특정 주소와 포트에서 들어오는 연결을 수신할 수 있게 된다.&lt;/li>
&lt;li>listen(): 클라이언트의 연결 요청을 대기하는 상태로 소켓을 변경한다. 연결 요청을 수신할 준비가 되었음을 나타낸다.&lt;/li>
&lt;li>accept(): 클라이언트의 연결 요청을 수락한다. 새로운 소켓을 생성하여 클라이언트와의 통신에 사용한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>클라이언트 측 함수&lt;/p>
&lt;ol>
&lt;li>socket(): 서버와 마찬가지로 소켓을 생성한다.&lt;/li>
&lt;li>connect(): 서버에 연결을 요청한다. 서버의 IP 주소와 포트 번호를 지정하여 연결을 시도한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>공통 함수&lt;/p>
&lt;ol>
&lt;li>send()/recv(): 데이터를 송수신한다. 연결된 소켓을 통해 실제 데이터 통신이 이루어진다.&lt;/li>
&lt;li>close(): 소켓을 닫는다. 통신이 완료되면 소켓을 종료하여 리소스를 해제한다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>이러한 함수들의 호출 순서와 역할을 통해 소켓은 네트워크 상에서 두 프로그램 간의 양방향 통신을 가능하게 한다.&lt;br>
서버는 연결을 수신하고 관리하는 역할을, 클라이언트는 연결을 요청하고 데이터를 교환하는 역할을 수행한다.&lt;/p>
&lt;h4>소켓의 작동 방식과 함수 호출 과정&lt;/h4>&lt;p>호출 과정:&lt;/p>
&lt;ol>
&lt;li>서버는 socket() → bind() → listen() 순으로 초기화&lt;/li>
&lt;li>클라이언트는 socket() → connect() 로 연결 시도&lt;/li>
&lt;li>서버는 accept()로 연결 수락&lt;/li>
&lt;li>send()/recv() 를 통한 양방향 통신&lt;/li>
&lt;li>close()로 연결 종료&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item></channel></rss>