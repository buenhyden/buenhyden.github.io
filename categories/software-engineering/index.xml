<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Software Engineering on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/software-engineering/</link>
    <description>Recent content in Software Engineering on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Sat, 14 Jun 2025 07:18:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/software-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Software Design Patterns</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/</link>
      <pubDate>Sat, 21 Dec 2024 05:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/</guid>
      <description>디자인 패턴과 원칙은 소프트웨어 개발에서 반복되는 설계 문제에 대한 검증된 해결책과 지침으로, GoF (Gang of Four) 의 23 가지 패턴 (생성/구조/행위) 과 SOLID, DRY, KISS 등의 설계 원칙을 통해 코드의 재사용성, 유지보수성, 확장성을 향상시키는 소프트웨어 아키텍처의 핵심 요소이다.</description>
    </item>
    <item>
      <title>Software Engineering Overview</title>
      <link>https://buenhyden.github.io/posts/software-engineering/</link>
      <pubDate>Thu, 19 Sep 2024 10:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/</guid>
      <description>소프트웨어 공학은 **요구분석, 설계, 구현, 테스트, 유지보수**까지 전체 개발주기를 아우르며, **품질**, **생산성**, **유지보수성**을 높이기 위한 구조화된 접근이다. SDLC 방법론과 설계 원칙을 바탕으로 확장 가능하고 신뢰성 있는 소프트웨어 시스템을 구축한다.</description>
    </item>
    <item>
      <title>Programming Paradigms</title>
      <link>https://buenhyden.github.io/posts/programming-languages/programming-paradigms/</link>
      <pubDate>Sun, 22 Sep 2024 04:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/programming-paradigms/</guid>
      <description>코드를 효율적이고 유지보수가 용이하게 작성하기 위한 다양한 접근 방식</description>
    </item>
    <item>
      <title>System Design</title>
      <link>https://buenhyden.github.io/posts/system-design/</link>
      <pubDate>Tue, 27 May 2025 08:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/</guid>
      <description>System Design 은 사용자의 요구사항을 바탕으로 시스템의 전반적인 아키텍처를 설계하는 작업으로, 컴포넌트 간의 인터페이스, 데이터 흐름, 확장성, 성능, 가용성, 유지보수를 고려한 설계이다. 이 과정은 견고한 시스템 구축 및 운영 효율성 확보에 필수적이다.</description>
    </item>
    <item>
      <title>System Design Overview</title>
      <link>https://buenhyden.github.io/posts/system-design/overview/</link>
      <pubDate>Tue, 27 May 2025 08:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/overview/</guid>
      <description>System Design 은 사용자의 요구사항을 바탕으로 시스템의 전반적인 아키텍처를 설계하는 작업으로, 컴포넌트 간의 인터페이스, 데이터 흐름, 확장성, 성능, 가용성, 유지보수를 고려한 설계이다. 이 과정은 견고한 시스템 구축 및 운영 효율성 확보에 필수적이다.</description>
    </item>
    <item>
      <title>Architecture Styles and Patterns</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-styles-and-patterns/</link>
      <pubDate>Sat, 14 Jun 2025 07:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/architecture/architecture-styles-and-patterns/</guid>
      <description>Architecture Styles and Patterns은 시스템의 고수준 구조를 정의하고 컴포넌트 간 상호작용을 조직화하는 재사용 가능한 설계 솔루션이다. Architecture Style 은 시스템 전체 구조와 상호작용 원칙을 정의하며, Architecture Pattern 은 특정 구조적 문제에 대한 재사용 가능한 해결책을 제공한다. 다양한 패턴이 존재하며, 각각 특정 문제를 해결하고 확장성, 유지보수성, 테스트 용이성을 향상시킨다.</description>
    </item>
    <item>
      <title>Design Methodology</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/design-methodology/</link>
      <pubDate>Fri, 06 Jun 2025 16:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/design-methodology/</guid>
      <description>설계 방법론은 소프트웨어 시스템의 구조, 아키텍처, 개발 프로세스를 체계화하여 효율적이고 유지보수 가능한 소프트웨어를 개발하기 위한 원칙, 패턴, 실무 기법의 집합이다.</description>
    </item>
  </channel>
</rss>
