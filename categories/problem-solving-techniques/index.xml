<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Problem Solving Techniques on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/problem-solving-techniques/</link>
    <description>Recent content in Problem Solving Techniques on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 10 Mar 2025 07:59:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/problem-solving-techniques/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Algorithmic Thinking</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/algorithmic-thinking/</link>
      <pubDate>Fri, 27 Dec 2024 07:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/algorithmic-thinking/</guid>
      <description>알고리즘적 사고란 문제를 일련의 명확하고 실행 가능한 단계들로 분해하여 해결하는 사고 과정.</description>
    </item>
    <item>
      <title>Branch and Bound vs. Backtracking</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/branch-and-bound/branch-and-bound-vs-backtracking/</link>
      <pubDate>Fri, 10 Jan 2025 04:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/branch-and-bound/branch-and-bound-vs-backtracking/</guid>
      <description>백트래킹(Backtracking)과 분기한정법(Branch and Bound)은 조합 최적화 문제를 해결하기 위한 두 가지 중요한 알고리즘 설계 패러다임이다.  두 기법 모두 모든 가능한 해결책을 체계적으로 탐색하지만, 그 접근 방식과 최적화 전략에는 중요한 차이가 있다.</description>
    </item>
    <item>
      <title>Hashing</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/hashing/</link>
      <pubDate>Mon, 16 Dec 2024 09:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/hashing/</guid>
      <description>해싱은 임의의 크기를 가진 데이터를 고정된 크기의 값으로 변환하는 과정이다.</description>
    </item>
    <item>
      <title>Recursion vs. Iteration</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/recursion/recursion-vs-iteration/</link>
      <pubDate>Sun, 06 Oct 2024 11:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/recursion/recursion-vs-iteration/</guid>
      <description>Iteration과 Recursion은 프로그래밍에서 반복적인 작업을 수행하는 두 가지 주요 방식이다.</description>
    </item>
    <item>
      <title>Branch and Bound vs. A star Algorithm</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/branch-and-bound/branch-and-bound-vs-a-star-algorithm/</link>
      <pubDate>Fri, 10 Jan 2025 04:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/branch-and-bound/branch-and-bound-vs-a-star-algorithm/</guid>
      <description>&lt;h2 id=&#34;branch-and-bound-vs-a-star-algorithm&#34;&gt;Branch and Bound vs. A star Algorithm&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Back Tracking vs. Brute Force</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/back-tracking/back-tracking-vs-brute-force/</link>
      <pubDate>Sun, 29 Dec 2024 14:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/back-tracking/back-tracking-vs-brute-force/</guid>
      <description>브루트 포스는 구현이 단순하고 모든 가능성을 확인하지만, 문제 크기가 커질수록 비효율적이다. 반면, 백트래킹은 유망성 테스트와 가지치기를 통해 불필요한 탐색을 줄여 효율성을 높이지만, 구현이 더 복잡하다.</description>
    </item>
    <item>
      <title>Recursion</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/recursion/</link>
      <pubDate>Mon, 14 Oct 2024 13:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/recursion/</guid>
      <description>재귀(Recursion)는 컴퓨터 프로그래밍에서 함수가 자기 자신을 호출하여 문제를 해결하는 방식으로, 큰 문제를 동일한 형태의 작은 문제로 나누어 해결하는 방법이다.</description>
    </item>
    <item>
      <title>Back Tracking vs. Traversal</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/back-tracking/back-tracking-vs-traversal/</link>
      <pubDate>Mon, 09 Dec 2024 14:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/back-tracking/back-tracking-vs-traversal/</guid>
      <description>백트래킹과 트래버설은 유사한 점이 있지만, 목적, 동작 방식, 응용 분야에서 중요한 차이점을 가지고 있다.</description>
    </item>
    <item>
      <title>브루트 포스 (Brute Force)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/brute-force/</link>
      <pubDate>Sun, 13 Oct 2024 07:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/brute-force/</guid>
      <description>브루트 포스는 &amp;#34;무식한 힘&amp;#34;이라는 뜻으로, 가능한 모든 경우의 수를 전부 탐색하여 문제를 해결하는 방법이다.</description>
    </item>
    <item>
      <title>Back Tracking vs. Depth-First Search</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/back-tracking/back-tracking-vs-depth-first-search/</link>
      <pubDate>Sun, 29 Dec 2024 13:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/back-tracking/back-tracking-vs-depth-first-search/</guid>
      <description>DFS는 그래프의 모든 노드를 방문하는 데 중점을 두는 반면, 백트래킹은 제약 조건을 만족하는 해결책을 효율적으로 찾는 데 초점을 맞춘다.</description>
    </item>
    <item>
      <title>백트래킹 (Backtracking)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/back-tracking/</link>
      <pubDate>Sun, 13 Oct 2024 05:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/back-tracking/</guid>
      <description>백트래킹은 가능한 모든 방법을 탐색하면서 문제를 해결하는 알고리즘으로, 현재의 선택이 잘못되었다고 판단되면 이전 단계로 돌아가서 다른 선택을 시도한다.</description>
    </item>
    <item>
      <title>분기 한정법 (Branch and Bound)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/branch-and-bound/</link>
      <pubDate>Sun, 13 Oct 2024 05:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/branch-and-bound/</guid>
      <description>분기 한정법은 복잡한 최적화 문제를 해결하기 위해 문제를 더 작은 하위 문제로 나누고(분기), 각 하위 문제의 해의 범위를 추정(한정)하여 최적해를 찾는 방법이다.</description>
    </item>
    <item>
      <title>분할 정복 (Divide and Conquer)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/divide-and-conquer/</link>
      <pubDate>Sun, 13 Oct 2024 05:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/divide-and-conquer/</guid>
      <description>분할 정복(Divide and Conquer)은 복잡한 문제를 더 작고 관리하기 쉬운 하위 문제로 나누어 해결하는 알고리즘 설계 기법이다.</description>
    </item>
    <item>
      <title>동적 계획법 (Dynamic Programming)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/dynamic-programming/</link>
      <pubDate>Sun, 13 Oct 2024 05:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/dynamic-programming/</guid>
      <description>동적 계획법(Dynamic Programming, DP)은 복잡한 문제를 더 작고 간단한 하위 문제로 나누어 해결하는 알고리즘 설계 기법으로, 큰 문제를 작은 하위 문제로 나누고 각 하위 문제의 해결책을 저장해 두었다가 재사용하는 방식으로 전체 문제를 해결하는 방법이다.</description>
    </item>
    <item>
      <title>근사 알고리즘 (Approximation algorithm)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/approximation-algorithm/</link>
      <pubDate>Sun, 13 Oct 2024 05:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/approximation-algorithm/</guid>
      <description>근사 알고리즘(Approximation algorithm)은 최적해(가장 좋은 해답)를 찾는 대신, 최적해에 &amp;#39;충분히 가까운&amp;#39; 해답을 찾는 알고리즘이다.</description>
    </item>
    <item>
      <title>탐욕 알고리즘 (Greedy Algorithm)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/greedy-algorithm/</link>
      <pubDate>Sun, 13 Oct 2024 05:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/greedy-algorithm/</guid>
      <description>문제를 해결하는 과정에서 매 순간 현재 상황에서 가장 좋아 보이는 선택을 하는 방법이다. 즉, &amp;#39;탐욕적&amp;#39;으로 각 단계에서 최적이라고 생각되는 해를 선택하여 최종적인 해답에 도달하는 알고리즘이다.</description>
    </item>
    <item>
      <title>랜덤화 알고리즘 (Randomized Algorithm)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/randomized-algorithm/</link>
      <pubDate>Sun, 13 Oct 2024 05:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/randomized-algorithm/</guid>
      <description>랜덤화 알고리즘(Randomized Algorithm)은 문제 해결 과정에서 무작위성을 활용하는 알고리즘 설계 기법이다. 난수 생성기를 사용하여 실행 과정에서 무작위적인 선택을 하는 알고리즘이다.</description>
    </item>
    <item>
      <title>Metaheuristic</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/metaheuristic/</link>
      <pubDate>Thu, 09 Jan 2025 10:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/metaheuristic/</guid>
      <description>메타휴리스틱은 여러 휴리스틱 방법들을 체계적으로 활용하거나 관리하는 상위 수준의 전략이라고 볼 수 있다.</description>
    </item>
    <item>
      <title>Two Pointer Technique</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/two-pointer-technique/</link>
      <pubDate>Fri, 24 Jan 2025 00:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/two-pointer-technique/</guid>
      <description>&lt;h2 id=&#34;투-포인터-기법-two-pointer-technique&#34;&gt;투 포인터 기법 (Two Pointer Technique)&lt;/h2&gt;
&lt;p&gt;투 포인터 기법은 배열이나 문자열과 같은 선형 데이터 구조에서 효율적으로 문제를 해결하기 위한 알고리즘 패러다임이다. 이 기법은 두 개의 포인터를 사용하여 데이터를 순회하면서 시간 복잡도를 줄이는 방법으로, 특히 검색, 정렬, 부분 배열 연산 등에서 자주 활용된다.&lt;/p&gt;
&lt;p&gt;투 포인터 기법은 배열, 문자열, 연결 리스트와 같은 선형 데이터 구조에서 효율적인 알고리즘을 설계하기 위한 강력한 도구이다.&lt;br&gt;
이 기법은 중첩된 반복문을 사용하는 O(n²) 해법을 O(n) 시간 복잡도로 최적화할 수 있게 해준다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>슬라이딩 윈도우 기법 (Sliding Window Technique)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/sliding-window-technique/</link>
      <pubDate>Fri, 24 Jan 2025 00:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/sliding-window-technique/</guid>
      <description>슬라이딩 윈도우 기법은 배열이나 문자열의 연속적인 부분집합(부분 배열 또는 부분 문자열)을 고정 크기 또는 가변 크기의 윈도우로 표현하고, 이 윈도우를 왼쪽에서 오른쪽으로 &amp;#34;슬라이딩&amp;#34;하면서 문제를 해결한다.</description>
    </item>
    <item>
      <title>Dynamic Programming vs. Back tracking</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/dynamic-programming/dynamic-programming-vs-back-tracking/</link>
      <pubDate>Mon, 10 Mar 2025 07:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/dynamic-programming/dynamic-programming-vs-back-tracking/</guid>
      <description>&lt;h2 id=&#34;dynamic-programming-vs-back-tracking&#34;&gt;Dynamic Programming vs. Back tracking&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Divide and Conquer vs. Brute Force</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/divide-and-conquer/divide-and-conquer-vs-brute-force/</link>
      <pubDate>Fri, 24 Jan 2025 07:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/divide-and-conquer/divide-and-conquer-vs-brute-force/</guid>
      <description>Divide and Conquer vs. Brute Force 비교 분석</description>
    </item>
    <item>
      <title>Divide and Conquer vs. Branch and Bound</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/divide-and-conquer/divide-and-conquer-vs-branch-and-bound/</link>
      <pubDate>Fri, 24 Jan 2025 02:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/divide-and-conquer/divide-and-conquer-vs-branch-and-bound/</guid>
      <description>분할 정복은 문제를 작은 하위 문제로 나누어 해결하는 일반적인 방법인 반면, 분기 한정은 최적화 문제에서 효율적으로 최적해를 찾기 위한 전문화된 방법이다.</description>
    </item>
    <item>
      <title>Two Pointer Technique vs. Sliding Window Technique</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/two-pointer-technique/two-pointer-technique-vs-sliding-window-technique/</link>
      <pubDate>Fri, 24 Jan 2025 00:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/two-pointer-technique/two-pointer-technique-vs-sliding-window-technique/</guid>
      <description>&lt;h2 id=&#34;투-포인터two-pointer와-슬라이딩-윈도우sliding-window&#34;&gt;투 포인터(Two Pointer)와 슬라이딩 윈도우(Sliding Window)&lt;/h2&gt;
&lt;p&gt;투 포인터와 슬라이딩 윈도우 기법은 모두 배열이나 문자열과 같은 선형 데이터 구조에서 효율적인 탐색과 연산을 가능하게 하는 강력한 알고리즘 패러다임이다.&lt;br&gt;
이 두 기법은 중첩된 반복문을 사용하는 O(n²) 해법을 O(n) 시간 복잡도로 최적화할 수 있게 해주어, 성능이 중요한 애플리케이션에서 필수적인 도구가 된다.&lt;/p&gt;
&lt;p&gt;투 포인터 기법은 더 일반적이고 유연한 접근 방식으로, 두 포인터가 독립적으로 이동할 수 있어 다양한 문제 유형에 적용 가능하다. 반면, 슬라이딩 윈도우 기법은 연속된 요소들의 집합을 효율적으로 처리하는 데 특화되어 있으며, 투 포인터의 특수한 형태로 볼 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hash Collision</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/hashing/hash-collision/</link>
      <pubDate>Thu, 23 Jan 2025 14:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/hashing/hash-collision/</guid>
      <description>&lt;h2 id=&#34;hash-collision&#34;&gt;Hash Collision&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Greedy Algorithm vs. Back tracking</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/greedy-algorithm/greedy-algorithm-vs-back-tracking/</link>
      <pubDate>Tue, 21 Jan 2025 14:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/greedy-algorithm/greedy-algorithm-vs-back-tracking/</guid>
      <description>&lt;h2 id=&#34;greedy-algorithm-vs-back-tracking&#34;&gt;Greedy Algorithm vs. Back tracking&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Greedy Algorithm vs. Dynamic Programming</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/greedy-algorithm/greedy-algorithm-vs-dynamic-programming/</link>
      <pubDate>Tue, 21 Jan 2025 10:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/greedy-algorithm/greedy-algorithm-vs-dynamic-programming/</guid>
      <description>&lt;h2 id=&#34;greedy-algorithm-vs-dynamic-programming&#34;&gt;Greedy Algorithm vs. Dynamic Programming&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Approximation-Preserving Reductions</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/approximation-algorithm/approximation-preserving-reductions/</link>
      <pubDate>Thu, 09 Jan 2025 06:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/approximation-algorithm/approximation-preserving-reductions/</guid>
      <description>&lt;h2 id=&#34;approximation-preserving-reductions&#34;&gt;Approximation-Preserving Reductions&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Approximation Schemes</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/approximation-algorithm/approximation-schemes/</link>
      <pubDate>Thu, 09 Jan 2025 06:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/approximation-algorithm/approximation-schemes/</guid>
      <description>&lt;h2 id=&#34;approximation-schemes&#34;&gt;Approximation Schemes&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Dynamic Programming vs. Branch and Bound</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/dynamic-programming/dynamic-programming-vs-branch-and-bound/</link>
      <pubDate>Fri, 03 Jan 2025 02:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/dynamic-programming/dynamic-programming-vs-branch-and-bound/</guid>
      <description>&lt;h2 id=&#34;dynamic-programming-vs-branch-and-bound&#34;&gt;Dynamic Programming vs. Branch and Bound&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Heuristic</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/metaheuristic/heuristic/</link>
      <pubDate>Sun, 29 Dec 2024 08:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/metaheuristic/heuristic/</guid>
      <description>&lt;h2 id=&#34;heuristic&#34;&gt;Heuristic&lt;/h2&gt;
&lt;h3 id=&#34;1-휴리스틱이란-무엇인가&#34;&gt;1. 휴리스틱이란 무엇인가?&lt;/h3&gt;
&lt;p&gt;휴리스틱(Heuristic)은 완벽하거나 최적의 해결책을 보장하지는 않지만, 합리적인 시간 내에 충분히 좋은 해결책을 찾기 위한 문제 해결 방법이나 접근 방식이다.&lt;br&gt;
&amp;lsquo;휴리스틱&amp;rsquo;이라는 단어는 그리스어 &amp;lsquo;heuriskein(발견하다)&amp;lsquo;에서 유래했으며, 이는 발견법이나 경험적 방법을 의미한다.&lt;/p&gt;
&lt;p&gt;알고리즘과 컴퓨터 과학의 맥락에서 휴리스틱은 시간이나 공간 복잡성을 줄이기 위해 정확성, 완전성, 최적성을 일부 희생하면서 실용적인 해결책을 찾는 방법이다. 휴리스틱은 특히 NP-난해(NP-hard) 문제와 같이 계산적으로 복잡한 문제를 다룰 때 유용하다.&lt;/p&gt;
&lt;p&gt;쉽게 설명하자면, 휴리스틱은 모든 가능한 방법을 시도하기보다는 &amp;lsquo;현명한 추측&amp;rsquo;을 통해 해결책을 찾는 방법이다. 마치 서울에서 부산까지 가는 모든 가능한 경로를 탐색하는 대신, &amp;lsquo;대체로 남쪽으로 향하는 큰 도로를 따라가면 부산에 도착할 것&amp;rsquo;이라고 추측하는 것과 유사하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Greedy Algorithm vs. Divide and Conquer</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/greedy-algorithm/greedy-algorithm-vs-divide-and-conquer/</link>
      <pubDate>Sat, 28 Dec 2024 10:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/greedy-algorithm/greedy-algorithm-vs-divide-and-conquer/</guid>
      <description>분할 정복은 문제를 더 작은 하위 문제로 나누어 해결하는 체계적인 접근 방식인 반면, 탐욕 알고리즘은 각 단계에서 지역적 최적 선택을 통해 문제를 해결하는 직관적인 접근 방식이다.</description>
    </item>
    <item>
      <title>Fully Polynomial-Time Approximation Scheme</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/approximation-algorithm/types/fully-polynomial-time-approximation-scheme/</link>
      <pubDate>Sat, 28 Dec 2024 06:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/approximation-algorithm/types/fully-polynomial-time-approximation-scheme/</guid>
      <description>&lt;h2 id=&#34;완전-다항-시간-근사-방식-fully-polynomial-time-approximation-scheme-fptas&#34;&gt;완전 다항 시간 근사 방식 (Fully Polynomial-Time Approximation Scheme, FPTAS)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Polynomial-Time Approximation Scheme</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/approximation-algorithm/types/polynomial-time-approximation-scheme/</link>
      <pubDate>Sat, 28 Dec 2024 06:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/approximation-algorithm/types/polynomial-time-approximation-scheme/</guid>
      <description>&lt;h2 id=&#34;다항-시간-근사-방식-polynomial-time-approximation-scheme-ptas&#34;&gt;다항 시간 근사 방식 (Polynomial-Time Approximation Scheme, PTAS)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Probabilistic Approximation Algorithm</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/approximation-algorithm/types/probabilistic-approximation-algorithm/</link>
      <pubDate>Sat, 28 Dec 2024 06:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/approximation-algorithm/types/probabilistic-approximation-algorithm/</guid>
      <description>&lt;h2 id=&#34;확률적-근사-알고리즘-probabilistic-approximation-algorithm&#34;&gt;확률적 근사 알고리즘 (Probabilistic Approximation Algorithm)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>결정론적 근사 알고리즘 (Deterministic Approximation Algorithm)</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/approximation-algorithm/types/deterministic-approximation-algorithm/</link>
      <pubDate>Sat, 28 Dec 2024 06:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/approximation-algorithm/types/deterministic-approximation-algorithm/</guid>
      <description>&lt;h2 id=&#34;결정론적-근사-알고리즘-deterministic-approximation-algorithm&#34;&gt;결정론적 근사 알고리즘 (Deterministic Approximation Algorithm)&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Greedy Algorithm vs. Approximation algorithm</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/greedy-algorithm/greedy-algorithm-vs-approximation-algorithm/</link>
      <pubDate>Mon, 09 Dec 2024 10:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/greedy-algorithm/greedy-algorithm-vs-approximation-algorithm/</guid>
      <description>&lt;h2 id=&#34;greedy-algorithm-vs-approximation-algorithm&#34;&gt;Greedy Algorithm vs. Approximation algorithm&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Dynamic Programming vs. Divide and Conquer</title>
      <link>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/dynamic-programming/dynamic-programming-vs-divide-and-conquer/</link>
      <pubDate>Mon, 09 Dec 2024 05:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data-structures-and-algorithms/problem-solving-techniques/dynamic-programming/dynamic-programming-vs-divide-and-conquer/</guid>
      <description>Divide and Conquer&amp;#34;와 &amp;#34;Dynamic Programming&amp;#34;은 모두 복잡한 문제를 더 작은 부분으로 나누어 해결하는 전략이지만, 접근 방식과 적용 상황에서 중요한 차이가 있다.</description>
    </item>
  </channel>
</rss>
