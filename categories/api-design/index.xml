<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>API Design on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/api-design/</link>
    <description>Recent content in API Design on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Apr 2025 02:23:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/api-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>API Styles</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/</link>
      <pubDate>Wed, 26 Feb 2025 06:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/</guid>
      <description>API 스타일은 소프트웨어 아키텍처에서 중요한 설계 요소로, 다양한 시스템과 장치가 서로 쉽게 통신할 수 있도록 디지털 방식으로 연결하는 역할을 한다.</description>
    </item>
    <item>
      <title>API Performance</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/performance-management/</link>
      <pubDate>Wed, 26 Feb 2025 06:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/performance-management/</guid>
      <description>API 성능은 백엔드 시스템 설계에서 핵심적인 요소로, 최종 사용자 경험과 시스템 효율성에 직접적인 영향을 미친다.</description>
    </item>
    <item>
      <title>JSON vs. XML vs. Protobuf vs. MessagePack vs. Parquet</title>
      <link>https://buenhyden.github.io/posts/backend/fundamentals/data-exchange/</link>
      <pubDate>Sat, 26 Oct 2024 11:42:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/fundamentals/data-exchange/</guid>
      <description>데이터 직렬화 형식은 애플리케이션 간 데이터 교환의 핵심 요소이다.</description>
    </item>
    <item>
      <title>Real-time APIs</title>
      <link>https://buenhyden.github.io/posts/computer-science/networking-knowledge/real-time-apis/</link>
      <pubDate>Fri, 31 Jan 2025 15:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/networking-knowledge/real-time-apis/</guid>
      <description>실시간 API(Real-time API)는 클라이언트와 서버 간에 지속적인 연결을 유지하면서 데이터가 생성되거나 변경되는 즉시 자동으로 전송하는 API이다.</description>
    </item>
    <item>
      <title>Synchronous vs Asynchronous APIs</title>
      <link>https://buenhyden.github.io/posts/backend/fundamentals/backend-basics/request-response-cycle/synchronous-vs-asynchronous-apis/</link>
      <pubDate>Sun, 06 Oct 2024 00:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/fundamentals/backend-basics/request-response-cycle/synchronous-vs-asynchronous-apis/</guid>
      <description>프로그래밍에서 작업을 처리하는 두 가지 주요 방식</description>
    </item>
    <item>
      <title>API Gateways</title>
      <link>https://buenhyden.github.io/posts/backend/web-infrastructure/api-gateways/</link>
      <pubDate>Sun, 20 Oct 2024 09:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/web-infrastructure/api-gateways/</guid>
      <description>클라이언트와 백엔드 서비스 사이에서 중개자 역할을 하는 서버로, 여러 마이크로서비스나 백엔드 시스템에 대한 단일 진입점을 제공하는 중요한 컴포넌트</description>
    </item>
    <item>
      <title>HIPAA</title>
      <link>https://buenhyden.github.io/posts/security/governance-and-management/compliance-and-regulations/hipaa/</link>
      <pubDate>Tue, 01 Apr 2025 02:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/governance-and-management/compliance-and-regulations/hipaa/</guid>
      <description>HIPAA는 1996년 미국에서 제정된 법률로, 의료 정보의 보호와 의료보험의 이식성을 보장하기 위한 규정을 제공한다.</description>
    </item>
    <item>
      <title>Basic Authentication</title>
      <link>https://buenhyden.github.io/posts/security/access-control/authentication/protocols/basic-authentication/</link>
      <pubDate>Tue, 11 Mar 2025 13:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/access-control/authentication/protocols/basic-authentication/</guid>
      <description>HTTP 프로토콜에서 가장 단순한 형태의 인증 방식으로, 클라이언트가 서버에 요청을 보낼 때 사용자의 ID와 비밀번호를 Base64로 인코딩하여 전송하는 방식</description>
    </item>
    <item>
      <title>SAML</title>
      <link>https://buenhyden.github.io/posts/security/access-control/authentication/protocols/saml/</link>
      <pubDate>Tue, 11 Mar 2025 13:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/access-control/authentication/protocols/saml/</guid>
      <description>SAML(Security Assertion Markup Language)은 기업과 조직에서 단일 로그인(SSO, Single Sign-On)과 신원 연합(Identity Federation)을 구현하기 위한 XML 기반 표준 프레임워크이다.</description>
    </item>
    <item>
      <title>Token Authentication</title>
      <link>https://buenhyden.github.io/posts/security/access-control/authentication/implementations/token-based-authentication/</link>
      <pubDate>Tue, 11 Mar 2025 13:01:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/access-control/authentication/implementations/token-based-authentication/</guid>
      <description>토큰 기반 인증은 사용자가 자신의 자격 증명(일반적으로 사용자 이름과 비밀번호)을 인증 서버에 제출하면, 서버가 이를 검증한 후 디지털 토큰을 발급하는 방식이다.</description>
    </item>
    <item>
      <title>OpenID</title>
      <link>https://buenhyden.github.io/posts/security/access-control/authentication/protocols/openid/</link>
      <pubDate>Tue, 11 Mar 2025 13:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/access-control/authentication/protocols/openid/</guid>
      <description>OpenID는 사용자가 여러 웹사이트와 애플리케이션에 단일 자격 증명으로 로그인할 수 있게 해주는 분산형 인증 표준이다.</description>
    </item>
    <item>
      <title>OAuth</title>
      <link>https://buenhyden.github.io/posts/security/access-control/authentication/protocols/oauth/</link>
      <pubDate>Tue, 11 Mar 2025 12:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/access-control/authentication/protocols/oauth/</guid>
      <description>OAuth는 현대 웹과 모바일 애플리케이션의 인증 및 권한 부여 방식을 근본적으로 변화시킨 오픈 표준 프로토콜이다.</description>
    </item>
    <item>
      <title>API Testing</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/testing/</link>
      <pubDate>Mon, 10 Mar 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/testing/</guid>
      <description>API 테스팅은 애플리케이션 프로그래밍 인터페이스(API)의 기능성, 신뢰성, 성능 및 보안을 확인하는 프로세스이다.</description>
    </item>
    <item>
      <title>Unit Testing</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/testing/unit-testing/</link>
      <pubDate>Mon, 10 Mar 2025 02:53:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/testing/unit-testing/</guid>
      <description>단위 테스팅은 API 설계 과정에서 개별 컴포넌트나 함수를 독립적으로 테스트하여 각 부분이 올바르게 작동하는지 확인하는 과정이다.</description>
    </item>
    <item>
      <title>Contract Testing</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/testing/contract-testing/</link>
      <pubDate>Mon, 10 Mar 2025 02:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/testing/contract-testing/</guid>
      <description>계약 테스트(Contract Testing)는 서비스 간 상호작용이 명시된 계약을 준수하는지 확인하는 테스트 방법론이다.</description>
    </item>
    <item>
      <title>Functional Testing</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/testing/functional-testing/</link>
      <pubDate>Mon, 10 Mar 2025 02:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/testing/functional-testing/</guid>
      <description>API 기능 테스트는 API가 의도한 모든 기능을 올바르게 수행하는지 검증하는 과정이다.</description>
    </item>
    <item>
      <title>Integration Testing</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/testing/integration-testing/</link>
      <pubDate>Mon, 10 Mar 2025 02:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/testing/integration-testing/</guid>
      <description>API 통합 테스트는 API 개발 및 설계에서 필수적인 단계로, 개별 컴포넌트들이 서로 올바르게 상호작용하는지 검증하는 프로세스이다.</description>
    </item>
    <item>
      <title>Load Testing</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/testing/load-testing/</link>
      <pubDate>Mon, 10 Mar 2025 02:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/testing/load-testing/</guid>
      <description>API 부하 테스트는 API가 예상된 사용자 부하와 그 이상의 상황에서 어떻게 동작하는지 검증하는 중요한 성능 테스트 유형이다.</description>
    </item>
    <item>
      <title>Session-based Auth</title>
      <link>https://buenhyden.github.io/posts/security/access-control/authentication/implementations/session-based-authentication/</link>
      <pubDate>Sun, 09 Mar 2025 15:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/access-control/authentication/implementations/session-based-authentication/</guid>
      <description>세션 기반 인증은 서버 측에서 사용자의 상태를 유지하는 인증 방식이다.</description>
    </item>
    <item>
      <title>Cookie-Based Auth</title>
      <link>https://buenhyden.github.io/posts/security/access-control/authentication/implementations/cookie-based-authentication/</link>
      <pubDate>Sun, 09 Mar 2025 15:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/access-control/authentication/implementations/cookie-based-authentication/</guid>
      <description>HTTP 프로토콜의 무상태(stateless) 특성을 극복하고 사용자의 로그인 상태를 유지하기 위한 메커니즘으로, 오랜 시간 동안 웹의 핵심 인증 기술로 자리잡아 왔다.</description>
    </item>
    <item>
      <title>GraphQL API</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/query-style/graphql/graphql-apis/</link>
      <pubDate>Mon, 03 Mar 2025 05:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/query-style/graphql/graphql-apis/</guid>
      <description>GraphQL은 API를 위한 쿼리 언어이자 서버 측에서 이러한 쿼리를 실행하기 위한 런타임이다</description>
    </item>
    <item>
      <title>Pagination</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/fundamentals/pagination/</link>
      <pubDate>Thu, 27 Feb 2025 02:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/fundamentals/pagination/</guid>
      <description>페이지네이션을 통해 서버는 데이터를 작은 &amp;#34;페이지&amp;#34; 단위로 나누어 전달하여 성능, 사용자 경험, 리소스 사용을 모두 최적화할 수 있다.</description>
    </item>
    <item>
      <title>URI Design</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/fundamentals/uri-design/</link>
      <pubDate>Thu, 27 Feb 2025 02:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/fundamentals/uri-design/</guid>
      <description>잘 설계된 URI는 API의 직관성을 높이고, 학습 곡선을 완화하며, 리소스의 구조와 관계를 명확히 보여준다.</description>
    </item>
    <item>
      <title>Versioning Strategies</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/versioning/</link>
      <pubDate>Thu, 27 Feb 2025 02:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/versioning/</guid>
      <description>API 버전 관리는 현대 소프트웨어 개발의 핵심 요소로, 기존 클라이언트의 호환성을 유지하면서 API를 발전시키는 방법이다.</description>
    </item>
    <item>
      <title>Rate Limiting vs. Throttling</title>
      <link>https://buenhyden.github.io/posts/backend/performance-optimization/rate-limiting-and-throttling/</link>
      <pubDate>Tue, 25 Feb 2025 13:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/performance-optimization/rate-limiting-and-throttling/</guid>
      <description>Rate Limiting은 특정 시간 프레임 내에 클라이언트가 API에 보낼 수 있는 요청 수를 제한하는 기술이며 Throttling은 요청 속도를 조절하여 제한에 도달했을 때 요청을 지연시키거나 대기열에 넣는다.</description>
    </item>
    <item>
      <title>Types of Real-time APIs</title>
      <link>https://buenhyden.github.io/posts/computer-science/networking-knowledge/real-time-apis/types-of-real-time-apis/</link>
      <pubDate>Sat, 15 Feb 2025 01:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science/networking-knowledge/real-time-apis/types-of-real-time-apis/</guid>
      <description>Real-time API는 클라이언트와 서버 간의 데이터를 거의 즉각적으로 주고받을 수 있는 API로, 실시간 데이터 교환을 가능하게 한다.</description>
    </item>
    <item>
      <title>Profiling and Monitoring</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/monitoring-and-analytics/profiling-and-monitoring/</link>
      <pubDate>Fri, 14 Feb 2025 01:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/monitoring-and-analytics/profiling-and-monitoring/</guid>
      <description>프로파일링은 API의 행동과 성능을 분석하여 최적화할 수 있는 영역을 파악하는 과정이며 모니터링은 API의 상태와 성능을 지속적으로 관찰하고 문제가 발생했을 때 신속하게 대응하는 과정이다.</description>
    </item>
    <item>
      <title>Error Handling and Retries</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/performance-management/error-handling-and-retries/</link>
      <pubDate>Thu, 13 Feb 2025 01:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/performance-management/error-handling-and-retries/</guid>
      <description>효과적인 오류 처리와 재시도 메커니즘은 안정적인 API 설계의 핵심 요소이다.</description>
    </item>
    <item>
      <title>Caching Strategies</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/performance-management/caching-strategies/</link>
      <pubDate>Thu, 13 Feb 2025 01:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/performance-management/caching-strategies/</guid>
      <description>캐싱은 API 설계에서 성능을 최적화하는 핵심 전략이다. 자주 요청되는 데이터를 임시 저장소에 저장함으로써 반복적인 계산, 데이터베이스 쿼리, 네트워크 요청을 줄이고 응답 시간을 대폭 향상시킬 수 있다.</description>
    </item>
    <item>
      <title>Load Balancing</title>
      <link>https://buenhyden.github.io/posts/backend/performance-optimization/load-balancing/</link>
      <pubDate>Thu, 13 Feb 2025 01:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/performance-optimization/load-balancing/</guid>
      <description>API 로드 밸런싱은 현대 웹 아키텍처와 분산 시스템의 필수적인 구성 요소로, 트래픽을 여러 서버에 효율적으로 분산하여 성능, 가용성, 안정성을 극대화한다.</description>
    </item>
    <item>
      <title>Performance Metrics</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/monitoring-and-analytics/performance-metrics/</link>
      <pubDate>Thu, 13 Feb 2025 01:28:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/monitoring-and-analytics/performance-metrics/</guid>
      <description>API 성능 메트릭스는 API의 효율성, 안정성, 그리고 전반적인 품질을 측정하는 중요한 지표이다.</description>
    </item>
    <item>
      <title>API Documentation</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/api-documentation/</link>
      <pubDate>Wed, 12 Feb 2025 01:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/api-documentation/</guid>
      <description>API 문서화란 API의 기능, 사용 방법, 엔드포인트, 매개변수, 응답 형식 등을 설명하는 기술 문서를 말한다.</description>
    </item>
    <item>
      <title>Mocking APIs</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/testing/mocking-apis/</link>
      <pubDate>Wed, 05 Feb 2025 04:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/testing/mocking-apis/</guid>
      <description>목 API는 소프트웨어 개발 과정에서 실제 API를 대체하여 테스트, 개발, 디버깅을 용이하게 하는 가상의 API이다.</description>
    </item>
    <item>
      <title>Personal Identifiable Information (PII)</title>
      <link>https://buenhyden.github.io/posts/security/fundamentals/pii/</link>
      <pubDate>Sun, 02 Feb 2025 03:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/fundamentals/pii/</guid>
      <description>개인 식별 정보(Personal Identifiable Information, PII)는 개인의 신원을 식별하거나 추적하는 데 사용될 수 있는 정보를 의미한다.</description>
    </item>
    <item>
      <title>API Lifecycle Management</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/</link>
      <pubDate>Sun, 02 Feb 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-lifecycle-management/</guid>
      <description>API 라이프사이클 관리는 API의 계획 단계부터 폐기 단계까지 전체 수명주기를 체계적으로 관리하는 프로세스이다</description>
    </item>
    <item>
      <title>API Keys and Management</title>
      <link>https://buenhyden.github.io/posts/security/application-security/api-security/api-keys-and-management/</link>
      <pubDate>Sat, 01 Feb 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/application-security/api-security/api-keys-and-management/</guid>
      <description>API 키는 API에 접근하려는 클라이언트를 식별하고 인증하는 데 사용되는 고유한 문자열</description>
    </item>
    <item>
      <title>Messaging Queues</title>
      <link>https://buenhyden.github.io/posts/backend/event-and-message-brokers/messaging-systems/message-queues/</link>
      <pubDate>Sat, 01 Feb 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/event-and-message-brokers/messaging-systems/message-queues/</guid>
      <description>메시징 큐는 비동기 통신을 가능하게 하는 중간 저장소로, 메시지 생산자(Producer)와 소비자(Consumer) 사이에서 데이터를 버퍼링하는 역할을 한다.</description>
    </item>
    <item>
      <title>Microservices Architecture</title>
      <link>https://buenhyden.github.io/posts/system-design/microservices-architecture/</link>
      <pubDate>Sat, 01 Feb 2025 03:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/microservices-architecture/</guid>
      <description>마이크로서비스 아키텍처는 단일 애플리케이션을 작고 독립적인 서비스 집합으로 개발하는 접근 방식이다.</description>
    </item>
    <item>
      <title>Batch Processing</title>
      <link>https://buenhyden.github.io/posts/backend/background-jobs/batch-processing/</link>
      <pubDate>Sat, 01 Feb 2025 03:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/background-jobs/batch-processing/</guid>
      <description>배치 처리는 여러 개별 API 요청을 하나의 그룹으로 묶어 단일 요청으로 처리하는 방식이다. 이는 여러 개의 개별 API 호출을 하는 대신, 다수의 작업을 포함한 하나의 요청을 보내는 것이다.</description>
    </item>
    <item>
      <title>Event Driven Architecture</title>
      <link>https://buenhyden.github.io/posts/system-design/event-driven-architecture/</link>
      <pubDate>Sat, 01 Feb 2025 03:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/event-driven-architecture/</guid>
      <description>이벤트 기반 아키텍처는 시스템 내에서 발생하는 상태 변화나 중요한 사건을 &amp;#39;이벤트&amp;#39;로 정의하고, 이러한 이벤트의 생성, 전송, 처리를 중심으로 시스템을 구성하는 방식이다.</description>
    </item>
    <item>
      <title>Webhooks vs. Polling</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/event-based-style/webhook/webhooks-vs-polling/</link>
      <pubDate>Fri, 31 Jan 2025 15:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/event-based-style/webhook/webhooks-vs-polling/</guid>
      <description>웹 애플리케이션에서 외부 시스템과 통신하거나 상태 변화를 감지하는 방식에는 대표적으로 웹훅(Webhooks)과 폴링(Polling)이 있다.</description>
    </item>
    <item>
      <title>DAC</title>
      <link>https://buenhyden.github.io/posts/security/access-control/authorization/authorization-models/dac/</link>
      <pubDate>Wed, 06 Nov 2024 23:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/access-control/authorization/authorization-models/dac/</guid>
      <description>리소스의 소유자가 해당 리소스에 대한다른  사용자들의 접근 권한을 직접 제어할 수 있는 접근 제어 방식</description>
    </item>
    <item>
      <title>MAC</title>
      <link>https://buenhyden.github.io/posts/security/access-control/authorization/authorization-models/mac/</link>
      <pubDate>Wed, 06 Nov 2024 23:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/access-control/authorization/authorization-models/mac/</guid>
      <description>시스템 전체에 걸쳐 중앙에서 정의된 보안 정책에 따라 접근 권한을 강제로 적용하는 접근 제어 방식.</description>
    </item>
    <item>
      <title>PBAC</title>
      <link>https://buenhyden.github.io/posts/security/access-control/authorization/authorization-models/pbac/</link>
      <pubDate>Wed, 06 Nov 2024 23:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/access-control/authorization/authorization-models/pbac/</guid>
      <description>중앙에서 정의된 정책들을 기반으로 접근 권한을 결정하는 접근 제어 방식.  각 정책은 &amp;#34;누가&amp;#34;, &amp;#34;무엇을&amp;#34;, &amp;#34;어떤 조건에서&amp;#34; 할 수 있는지를 정의하며, 이러한 정책들은 프로그래밍 방식으로 표현되고 평가된다.</description>
    </item>
    <item>
      <title>ABAC</title>
      <link>https://buenhyden.github.io/posts/security/access-control/authorization/authorization-models/abac/</link>
      <pubDate>Wed, 06 Nov 2024 23:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/access-control/authorization/authorization-models/abac/</guid>
      <description>ABAC는 주체(사용자), 객체(리소스), 작업, 환경 조건의 속성을 조합하여 접근 제어 정책을 정의한다.</description>
    </item>
    <item>
      <title>RBAC</title>
      <link>https://buenhyden.github.io/posts/security/access-control/authorization/authorization-models/rbac/</link>
      <pubDate>Wed, 06 Nov 2024 23:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/access-control/authorization/authorization-models/rbac/</guid>
      <description>RBAC는 &amp;#34;만약 ~라면 ~할 수 있다&amp;#34;와 같은 형태의 규칙들을 사용하여 접근 권한을 제어한다. 각 규칙은 조건부와 결과부로 구성되며, 시스템은 이러한 규칙들을 순차적으로 평가하여 접근 허용 여부를 결정한다.</description>
    </item>
    <item>
      <title>Authorization Models</title>
      <link>https://buenhyden.github.io/posts/security/access-control/authorization/authorization-models/</link>
      <pubDate>Wed, 06 Nov 2024 11:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/access-control/authorization/authorization-models/</guid>
      <description>API 권한 부여(Authorization)는 인증(Authentication)이 완료된 후, 사용자가 어떤 리소스에 접근할 수 있는지를 결정하는 중요한 보안 메커니즘이다.</description>
    </item>
    <item>
      <title>JWT</title>
      <link>https://buenhyden.github.io/posts/security/access-control/authentication/implementations/token-based-authentication/jwt/</link>
      <pubDate>Wed, 06 Nov 2024 11:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/access-control/authentication/implementations/token-based-authentication/jwt/</guid>
      <description>JSON Web Token(JWT)은 웹 애플리케이션과 서비스 간에 안전하게 정보를 전송하기 위한 개방형 표준(RFC 7519)이다.</description>
    </item>
    <item>
      <title>Authentication Methods</title>
      <link>https://buenhyden.github.io/posts/security/access-control/authentication/</link>
      <pubDate>Wed, 06 Nov 2024 05:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/access-control/authentication/</guid>
      <description>API 인증은 API를 사용하는 클라이언트의 신원을 확인하고 승인된 사용자만 API 리소스에 접근할 수 있도록 보장하는 핵심 보안 메커니즘이다.</description>
    </item>
    <item>
      <title>Payment Card Industry Data Security Standard (PCI DSS)</title>
      <link>https://buenhyden.github.io/posts/security/governance-and-management/compliance-and-regulations/pci-dss/</link>
      <pubDate>Sun, 27 Oct 2024 13:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/security/governance-and-management/compliance-and-regulations/pci-dss/</guid>
      <description>PCI DSS(Payment Card Industry Data Security Standard)는 신용카드 결제 과정에서 카드 소유자의 데이터를 안전하게 보호하기 위해 주요 글로벌 카드 브랜드(Visa, MasterCard, American Express, Discover, JCB)가 공동으로 제정한 국제 보안 표준이다.</description>
    </item>
    <item>
      <title>gRPC API</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/tunnel-style/rpc-based/grpc/</link>
      <pubDate>Sat, 19 Oct 2024 03:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/tunnel-style/rpc-based/grpc/</guid>
      <description>gRPC는 Google에서 개발한 고성능, 오픈소스 RPC(Remote Procedure Call) 프레임워크이다.</description>
    </item>
    <item>
      <title>RESTful API</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/resource-style/rest/</link>
      <pubDate>Sat, 19 Oct 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/resource-style/rest/</guid>
      <description>REST는 네트워크 시스템, 특히 웹에서 자원을 정의하고 접근하는 방법을 제공한다. 그 이름에서 알 수 있듯이 핵심은 &amp;#34;표현(Representation)&amp;#34;과 &amp;#34;상태 전이(State Transfer)&amp;#34;이다.</description>
    </item>
    <item>
      <title>SOAP API</title>
      <link>https://buenhyden.github.io/posts/backend/api-design/api-styles/tunnel-style/soap/</link>
      <pubDate>Sat, 19 Oct 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend/api-design/api-styles/tunnel-style/soap/</guid>
      <description>SOAP(Simple Object Access Protocol)은 네트워크를 통해 구조화된 정보를 교환하기 위한 메시지 프로토콜이다.</description>
    </item>
  </channel>
</rss>
