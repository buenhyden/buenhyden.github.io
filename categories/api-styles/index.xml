<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>API Styles on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/api-styles/</link>
    <description>Recent content in API Styles on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.3</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Apr 2025 03:18:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/api-styles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SOAP API vs. SOAP</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/tunnel-style/soap/soap-api-vs-soap/</link>
      <pubDate>Tue, 01 Apr 2025 03:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/tunnel-style/soap/soap-api-vs-soap/</guid>
      <description>SOAP는 메시지 교환 프로토콜이고, SOAP API는 이 프로토콜을 사용하여 구현된 웹 서비스이다.</description>
    </item>
    <item>
      <title>Error Handling</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/tunnel-style/rpc-based/grpc/error-handling/</link>
      <pubDate>Mon, 31 Mar 2025 08:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/tunnel-style/rpc-based/grpc/error-handling/</guid>
      <description>gRPC는 이러한 다양한 오류 상황을 일관되고 체계적으로 처리하기 위한 포괄적인 오류 처리 메커니즘을 제공한다.</description>
    </item>
    <item>
      <title>GraphQL API</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/query-style/graphql/graphql-apis/</link>
      <pubDate>Mon, 03 Mar 2025 05:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/query-style/graphql/graphql-apis/</guid>
      <description>GraphQL은 API를 위한 쿼리 언어이자 서버 측에서 이러한 쿼리를 실행하기 위한 런타임이다</description>
    </item>
    <item>
      <title>Protocol Buffers</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/tunnel-style/rpc-based/grpc/protocol-buffers/</link>
      <pubDate>Fri, 28 Feb 2025 04:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/tunnel-style/rpc-based/grpc/protocol-buffers/</guid>
      <description>Protocol Buffers(이하 protobuf)는 Google에서 개발한 언어 중립적, 플랫폼 중립적, 확장 가능한 구조화된 데이터 직렬화 메커니즘이다.</description>
    </item>
    <item>
      <title>Push Notification</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/event-based-style/push-notification/</link>
      <pubDate>Fri, 28 Feb 2025 03:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/event-based-style/push-notification/</guid>
      <description>이벤트 기반 스타일의 푸시 알림은 사용자에게 실시간으로 정보를 전달하는 비동기 통신 메커니즘이다.</description>
    </item>
    <item>
      <title>gRPC API vs. gRPC</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/tunnel-style/rpc-based/grpc/grpc-api-vs-grpc/</link>
      <pubDate>Fri, 28 Feb 2025 03:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/tunnel-style/rpc-based/grpc/grpc-api-vs-grpc/</guid>
      <description>gRPC는 기술적 프레임워크이고, gRPC API는 이 프레임워크를 사용하여 구축된 실제 응용 프로그램 인터페이스이다.</description>
    </item>
    <item>
      <title>GraphQL API vs. GraphQL</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/query-style/graphql/graphql-apis/graphql-api-vs-graphql/</link>
      <pubDate>Thu, 27 Feb 2025 11:11:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/query-style/graphql/graphql-apis/graphql-api-vs-graphql/</guid>
      <description>GraphQL은 페이스북이 2012년에 개발하고 2015년에 오픈소스로 공개한 쿼리 언어와 서버 측 런타임 사양(specification)이다. 반면 GraphQL API는 이 GraphQL 사양을 구현한 실제 API 인터페이스를 의미한다.</description>
    </item>
    <item>
      <title>Error Handling</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/query-style/graphql/error-handling/</link>
      <pubDate>Thu, 27 Feb 2025 08:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/query-style/graphql/error-handling/</guid>
      <description>GraphQL에서의 오류 처리는 REST API와는 다른 접근 방식을 취한다. GraphQL은 단일 엔드포인트로 여러 리소스에 접근할 수 있기 때문에, 오류 처리도 더 복잡하고 구조화되어 있다.</description>
    </item>
    <item>
      <title>Handling CRUD Operations</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/resource-style/rest/handling-crud-operations/</link>
      <pubDate>Wed, 26 Feb 2025 02:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/resource-style/rest/handling-crud-operations/</guid>
      <description>CRUD는 데이터 중심 애플리케이션에서 가장 기본적인 네 가지 작업인 생성(Create), 읽기(Read), 업데이트(Update), 삭제(Delete)를 의미한다.</description>
    </item>
    <item>
      <title>Error Handling</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/resource-style/rest/error-handling/</link>
      <pubDate>Wed, 26 Feb 2025 02:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/resource-style/rest/error-handling/</guid>
      <description>RESTful API의.오류 처리는 개발자 경험과 시스템 안정성에 중요한 영향을 미치는 핵심 요소이다.  오류 상황을 어떻게 다루고 전달하는지에 따라 API의 품질이 크게 달라질 수 있다.</description>
    </item>
    <item>
      <title>HATEOAS (Hypermedia As The Engine Of Application State)</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/hypermedia-style/hateoas/</link>
      <pubDate>Sat, 19 Oct 2024 07:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/hypermedia-style/hateoas/</guid>
      <description>RESTful API 설계의 중요한 개념으로, 클라이언트와 서버 간의 동적이고 유연한 상호작용을 가능하게 하는 방식.</description>
    </item>
    <item>
      <title>gRPC API</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/tunnel-style/rpc-based/grpc/</link>
      <pubDate>Sat, 19 Oct 2024 03:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/tunnel-style/rpc-based/grpc/</guid>
      <description>gRPC는 Google에서 개발한 고성능, 오픈소스 RPC(Remote Procedure Call) 프레임워크이다.</description>
    </item>
    <item>
      <title>RESTful API</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/resource-style/rest/</link>
      <pubDate>Sat, 19 Oct 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/resource-style/rest/</guid>
      <description>REST는 네트워크 시스템, 특히 웹에서 자원을 정의하고 접근하는 방법을 제공한다. 그 이름에서 알 수 있듯이 핵심은 &amp;#34;표현(Representation)&amp;#34;과 &amp;#34;상태 전이(State Transfer)&amp;#34;이다.</description>
    </item>
    <item>
      <title>SOAP API</title>
      <link>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/tunnel-style/soap/soap-apis/</link>
      <pubDate>Sat, 19 Oct 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/backend-development/api-design-and-implementation/api-styles/tunnel-style/soap/soap-apis/</guid>
      <description>SOAP(Simple Object Access Protocol)은 네트워크를 통해 구조화된 정보를 교환하기 위한 메시지 프로토콜이다.</description>
    </item>
  </channel>
</rss>
