<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Software Level on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/software-level/</link>
    <description>Recent content in Software Level on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.149.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 20 May 2025 14:46:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/software-level/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Critical Section</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/basic-concepts/critical-section/</link>
      <pubDate>Tue, 20 May 2025 14:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/basic-concepts/critical-section/</guid>
      <description>**Critical Section**은 여러 실행 흐름이 동시에 공유 자원에 접근하는 것을 방지하기 위해 **오직 하나만 진입**할 수 있도록 설계된 코드 영역입니다. **Mutual Exclusion**을 통해 **데이터 일관성**과 **Race Condition 방지**를 보장하며, **mutex, semaphore, monitor, atomic operation** 등의 동기화 기법으로 제어합니다.</description>
    </item>
    <item>
      <title>Mutex</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/synchronization-primitives/mutexes-and-locks/mutex/</link>
      <pubDate>Fri, 04 Oct 2024 11:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/synchronization-primitives/mutexes-and-locks/mutex/</guid>
      <description>Mutex는 상호 배제(Mutual Exclusion)를 구현하는 동기화 도구로, 여러 스레드 또는 프로세스가 공유 자원에 동시에 접근하지 못하도록 제어한다. 임계 구역 보호를 통해 레이스 컨디션과 데이터 불일치를 방지하며, 락(lock)과 언락(unlock)을 통해 자원 접근을 순차적으로 보장한다. 스핀락, 블로킹, 재귀적 락 등 다양한 구현 기법과 우선순위 제어 정책이 존재한다.</description>
    </item>
    <item>
      <title>Monitor</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/synchronization-primitives/monitor/</link>
      <pubDate>Thu, 03 Oct 2024 10:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/synchronization-primitives/monitor/</guid>
      <description>모니터는 공유 데이터와 해당 데이터를 조작하는 연산을 하나의 모듈로 캡슐화하여, 다중 스레드 환경에서의 경쟁 조건(Race Condition)을 방지한다.</description>
    </item>
    <item>
      <title>Semaphore</title>
      <link>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/synchronization-primitives/semaphores/</link>
      <pubDate>Thu, 03 Oct 2024 10:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-science-fundamentals/concurrency--parallel-computing/concurrency-fundamentals/synchronization-primitives/semaphores/</guid>
      <description>세마포어(Semaphore)는 멀티스레드·멀티프로세스 환경에서 공유 자원 접근을 제어하는 동기화 원시로, 카운터와 원자적 P(wait)·V(signal) 연산을 기반으로 동작한다. 이진·카운팅 방식이 있으며, 데드락·경쟁 조건 방지와 IPC, 임계 구역 관리 등 OS와 병렬 프로그래밍에서 폭넓게 활용된다.</description>
    </item>
  </channel>
</rss>
