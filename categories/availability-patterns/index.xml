<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Availability Patterns on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/availability-patterns/</link>
    <description>Recent content in Availability Patterns on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Sun, 18 May 2025 12:46:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/availability-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Failback vs. Fail Over</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-recovery/failback-patterns/failback-vs-fail-over/</link>
      <pubDate>Sun, 18 May 2025 12:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-recovery/failback-patterns/failback-vs-fail-over/</guid>
      <description>Failover 는 주 시스템에 장애 발생 시 대기 시스템으로 자동 전환하여 서비스 연속성을 유지하는 방식이며, Failback 은 주 시스템이 복구된 후 원래 상태로 되돌리는 과정이다. 이 두 메커니즘은 고가용성 시스템에서 다운타임을 최소화하고 비즈니스 연속성을 보장하는 필수적인 재해 복구 전략을 구성한다.</description>
    </item>
    <item>
      <title>Failback</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-recovery/failback-patterns/</link>
      <pubDate>Sun, 18 May 2025 12:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-recovery/failback-patterns/</guid>
      <description>Failback 은 장애 발생 시 예비 시스템으로 전환된 (Failover) 서비스를 원본 시스템으로 복구하는 프로세스이다. 데이터 동기화, 서비스 재개, 자원 재배치 등을 통해 시스템의 정상 운영 상태를 복원하며, 계획된 유지보수나 비상 복구 시나리오에서 필수적으로 적용된다.</description>
    </item>
    <item>
      <title>Availability in Numbers</title>
      <link>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/quality-attribute/quality-attributes/run-time-reliability-and-efficiency/availability/availability-in-numbers/</link>
      <pubDate>Thu, 15 May 2025 05:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/system-design-fundamentals/quality-attribute/quality-attributes/run-time-reliability-and-efficiency/availability/availability-in-numbers/</guid>
      <description>시스템 설계에서 &amp;#34;Availability in Numbers&amp;#34; 는 시스템이 정상적으로 작동하는 시간의 비율을 수치화하여 가용성을 측정하는 개념이다. 일반적으로 &amp;#39;9 의 개수 &amp;#39; 로 표현되며, 시스템의 중요도에 따라 다양한 가용성 수준 (99%, 99.9%, 99.999% 등) 을 목표로 한다. 이를 달성하기 위해 중복성, 장애 감지 및 복구 메커니즘 등 다양한 패턴과 전략이 적용되며, 비즈니스 요구사항과 비용 사이의 균형을 고려해 설계한다.</description>
    </item>
    <item>
      <title>Fail Over</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-recovery/failover-patterns/</link>
      <pubDate>Tue, 18 Feb 2025 05:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/resilience-and-reliability/fault-tolerance/failure-recovery/failover-patterns/</guid>
      <description>페일오버(Failover)는 시스템의 주요 구성 요소가 실패했을 때 자동으로 대체 구성 요소로 전환하여 서비스 연속성을 보장하는 고가용성 아키텍처 패턴으로 장애 감지, 전환 메커니즘, 데이터 동기화가 핵심 요소이다. 단일 장애점을 해결하기 위해 중복성을 도입하고, 액티브 - 패시브, 액티브 - 액티브, N&#43;1 등 다양한 구현 방식을 통해 시스템 다운타임을 최소화하고 비즈니스 연속성을 유지한다.  현대 IT 환경에서는 클라우드 기반 페일오버, 컨테이너화된 환경의 자동화된 페일오버, AI 기반 사전 예측 페일오버 등으로 진화하고 있으며, 비즈니스 연속성과 사용자 경험 보장에 필수적이다.</description>
    </item>
  </channel>
</rss>
