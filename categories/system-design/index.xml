<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>System Design on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/system-design/</link>
    <description>Recent content in System Design on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.150.0</generator>
    <language>en</language>
    <lastBuildDate>Sun, 27 Jul 2025 03:30:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/system-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Performance vs Scalability</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/quality-attributes-tradeoffs/general-architecture/performance-vs-scalability/</link>
      <pubDate>Tue, 18 Feb 2025 05:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/quality-attributes-tradeoffs/general-architecture/performance-vs-scalability/</guid>
      <description>성능 (Performance) 과 확장성 (Scalability) 은 시스템 설계에서 상호 보완적이면서도 때로는 상충하는 핵심 속성이다.  성능은 단일 작업을 얼마나 빠르게 처리할 수 있는지를 나타내는 반면, 확장성은 부하가 증가할 때 시스템이 이를 효과적으로 처리할 수 있는 능력을 의미한다.  성능이 좋은 시스템이 반드시 확장성이 좋은 것은 아니며, 그 반대도 마찬가지이다. 이 두 특성의 균형을 맞추는 것은 현대 시스템 설계의 핵심 과제로, 분산 시스템, 로드 밸런싱, 캐싱, 데이터베이스 샤딩 등의 기술을 통해 해결할 수 있다.</description>
    </item>
    <item>
      <title>Latency vs Throughput</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/quality-attributes-tradeoffs/distributed-systems/latency-vs-throughput/</link>
      <pubDate>Tue, 18 Feb 2025 05:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/quality-attributes-tradeoffs/distributed-systems/latency-vs-throughput/</guid>
      <description>지연시간 (Latency) 은 요청이 시작된 시점부터 응답을 받을 때까지 걸리는 시간을 의미하며, 처리량 (Throughput) 은 시스템이 단위 시간당 처리할 수 있는 작업의 양을 나타낸다. 이 두 개념은 시스템 성능의 핵심 지표로, 서로 상충관계 (trade-off) 를 가지며 시스템 설계에서 균형 있는 최적화가 중요하다. 적절한 지연시간과 처리량 관리는 효율적인 시스템 설계의 기반이 된다.</description>
    </item>
    <item>
      <title>Availability vs. Consistency</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/quality-attributes-tradeoffs/distributed-systems/availability-vs-consistency/</link>
      <pubDate>Tue, 18 Feb 2025 05:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/design-fundamentals/quality-attributes-tradeoffs/distributed-systems/availability-vs-consistency/</guid>
      <description>가용성과 일관성은 분산 시스템 설계에서 핵심적인 특성으로, CAP 정리에 따라 네트워크 분할이 발생할 때 둘 중 하나만 완벽하게 보장할 수 있다. 가용성은 모든 요청이 성공 또는 실패 응답을 받을 수 있도록 하는 특성인 반면, 일관성은 모든 노드가 동일한 시점에 동일한 데이터를 볼 수 있도록 보장한다. 시스템 설계자는 비즈니스 요구사항에 따라 두 특성 간의 균형을 찾아야 하며, 이는 데이터베이스 선택부터 아키텍처 설계까지 전반적인 결정에 영향을 미친다.</description>
    </item>
    <item>
      <title>Architecture</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/overview/architecture/</link>
      <pubDate>Sun, 25 May 2025 09:46:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/overview/architecture/</guid>
      <description>소프트웨어 아키텍처는 시스템의 구성 요소, 구조, 상호작용, 기술 선택, 품질 속성 등을 정의하는 설계의 청사진이다. 이는 유지보수성, 확장성, 성능, 보안 등 비기능 요구사항을 충족시키며, 시스템의 성공적 개발과 장기적 진화를 이끄는 핵심 역할을 한다.</description>
    </item>
    <item>
      <title>Cloud Native Platforms</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-native-platforms/</link>
      <pubDate>Thu, 08 May 2025 04:31:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-native-platforms/</guid>
      <description>클라우드 네이티브 플랫폼은 컨테이너, 오케스트레이션, 마이크로서비스 등 최신 기술을 활용해 클라우드 환경에서 애플리케이션을 유연하고 확장성 있게 운영하는 구조이다.  자동화, 복원력, 보안이 주요 특징이며, DevOps 와 긴밀히 통합되어 빠른 배포와 운영을 지원한다.</description>
    </item>
    <item>
      <title>분산 시스템(Distributed Systems)</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/</link>
      <pubDate>Mon, 11 Nov 2024 02:51:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/</guid>
      <description>분산 시스템은 여러 독립적인 컴퓨터 (노드) 가 네트워크를 통해 상호작용하며, 하나의 통합된 시스템처럼 동작하도록 설계된 구조이다. 확장성, 장애 허용성, 자원 효율성, 고가용성 등 현대 IT 인프라의 핵심 요구사항을 충족한다.</description>
    </item>
    <item>
      <title>Infrastructure</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/overview/infrastructure/</link>
      <pubDate>Sun, 10 Nov 2024 01:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/overview/infrastructure/</guid>
      <description>Infrastructure(인프라스트럭처)는 조직의 IT 환경을 지원하고 운영하는 데 필요한 기본적인 구성 요소들의 집합이다. 이는 하드웨어, 소프트웨어, 네트워크 리소스 및 서비스를 포함한다.</description>
    </item>
    <item>
      <title>Consistency Models</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/consistency-models/</link>
      <pubDate>Wed, 09 Oct 2024 00:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/data-consistency/consistency-models/</guid>
      <description>분산 시스템에서 **일관성 패턴**은 시스템의 요구사항, 성능, 가용성, 지연 시간 간의 균형을 맞추기 위한 핵심 전략이다. 대표적인 패턴으로는 **Strong, Eventual, Causal, Weak Consistency** 등이 있으며, 시스템 요구 사항에 따라 다르게 적용되며 서로 다른 트레이드오프를 제공한다. 실무에서는 하이브리드 일관성 모델을 활용하거나, 동적으로 일관성을 조정하는 구조가 확대되고 있다. 2025 년에는 AI 기반 예측, Adaptive Consistency, 규제 대응 설계 전략 등이 주목받고 있다.</description>
    </item>
    <item>
      <title>System Design and Architecture</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/overview/</link>
      <pubDate>Thu, 19 Sep 2024 21:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/overview/</guid>
      <description>시스템 디자인은 복잡한 소프트웨어 시스템의 구조와 구성 요소를 정의하여 안정적이고 확장 가능한 시스템을 구축하는 과정이다. 사용자 요구사항을 분석하고, 구조적 설계를 통해 시스템 구성요소와 인터페이스를 정의하며, 성능, 보안, 유지보수성을 고려하여 최적의 아키텍처를 구축한다. 현대 소프트웨어 개발에서 필수적인 역할을 수행한다.</description>
    </item>
    <item>
      <title>Database Systems and Data Management</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/overview/database-systems-and-data-management/</link>
      <pubDate>Sun, 08 Jun 2025 05:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/overview/database-systems-and-data-management/</guid>
      <description>데이터베이스 시스템 및 데이터 관리는 구조화된 데이터의 저장, 검색, 수정, 관리를 효율적으로 수행하는 컴퓨터 시스템으로, DBMS (Database Management System) 를 통해 ACID 속성을 보장하며 다양한 데이터 모델과 아키텍처를 제공하여 현대 정보 시스템의 핵심 기반 기술 역할을 담당한다.</description>
    </item>
    <item>
      <title>Web Application Server</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/application--execution-core/web-application-servers/</link>
      <pubDate>Mon, 21 Oct 2024 15:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/application--execution-core/web-application-servers/</guid>
      <description>웹 애플리케이션 서버(Web Application Server, WAS)는 웹 애플리케이션의 실행 환경을 제공하고, 동적인 콘텐츠를 처리하며, 데이터베이스와의 연동을 지원하는 소프트웨어 프레임워크이다.</description>
    </item>
    <item>
      <title>Availability Patterns</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/performance--scalability/quality-attributes/reliability-attributes/availability/availability-patterns/</link>
      <pubDate>Wed, 09 Oct 2024 00:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/performance--scalability/quality-attributes/reliability-attributes/availability/availability-patterns/</guid>
      <description>가용성 패턴은 분산 시스템과 클라우드 환경에서 서비스의 안정적인 운영을 보장하기 위한 설계 패턴이다. 이 패턴들은 시스템의 일부가 실패하더라도 전체 시스템의 가용성을 유지하고, 장애에 대한 복원력을 제공하며, 사용자에게 지속적인 서비스를 제공하는 것을 목표로 한다. 서킷 브레이커, 벌크헤드, 헬스 엔드포인트 모니터링 등 다양한 패턴을 포함한다.</description>
    </item>
    <item>
      <title>Search Engines</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/application--execution-core/search-engines/</link>
      <pubDate>Mon, 21 Oct 2024 05:55:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/application--execution-core/search-engines/</guid>
      <description>방대한 양의 정보에서 필요한 데이터를 효율적으로 찾아내는 특화된 시스템이다. 단순한 키워드 매칭을 넘어서, 오늘날의 검색 엔진은 복잡한 데이터 분석과 실시간 처리를 위한 고도화된 기술을 구현하고 있다.</description>
    </item>
    <item>
      <title>Cloud vs. On-Premise</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-fundamentals/cloud-vs-on-premise/</link>
      <pubDate>Sun, 10 Nov 2024 10:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-fundamentals/cloud-vs-on-premise/</guid>
      <description>Cloud와 On-Premise는 기업의 IT 인프라를 구축하고 관리하는 두 가지 주요 방식을 설명하는 개념이다.</description>
    </item>
    <item>
      <title>Multi-tenancy</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/multi-tenancy/</link>
      <pubDate>Sun, 27 Jul 2025 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/multi-tenancy/</guid>
      <description>**멀티테넌시(Multi-tenancy)**는 단일 소프트웨어 인스턴스가 다수의 테넌트를 논리적으로 분리된 구조로 서비스하는 아키텍처로, 리소스를 공유하면서도 데이터 격리를 보장한다. 비용 절감, 확장성, 운영 효율성이 강점이며, 보안, 성능 격리, 커스터마이즈 관리가 도전 과제이다.</description>
    </item>
    <item>
      <title>Distributed Locking</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/distribution-fundamentals/coordination/distributed-locking/</link>
      <pubDate>Sun, 13 Jul 2025 04:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/distribution-fundamentals/coordination/distributed-locking/</guid>
      <description>분산 락킹(Distributed Locking)은 분산 시스템에서 여러 노드가 공유 자원에 동시에 접근하지 못하도록 상호 배제를 보장하는 메커니즘입니다. 데이터 일관성과 무결성을 확보하며, Redlock, ZooKeeper, Etcd 등 다양한 방식으로 구현되고, 리더 선출, 중복 실행 방지, 트랜잭션 제어 등 실무에서 활용됩니다.</description>
    </item>
    <item>
      <title>Distributed Coordination</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/distribution-fundamentals/coordination/</link>
      <pubDate>Mon, 07 Jul 2025 14:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/distributed-systems/distribution-fundamentals/coordination/</guid>
      <description>Distributed Coordination 은 다중 노드 환경에서 **합의 (consensus)**, **리더 선출 (leader election)**, **락 (locking)**, **상태 동기화 (state synchronization)** 등을 통해 **일관성과 안정성**을 보장하는 필수 메커니즘으로, Paxos·Raft·2PC 같은 프로토콜을 기반으로 구성된다.</description>
    </item>
    <item>
      <title>Container-Based Architecture</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/container-based/</link>
      <pubDate>Sat, 05 Jul 2025 05:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/container-based/</guid>
      <description>Container-Based Architecture는 애플리케이션과 종속성을 격리된 컨테이너 단위로 패키징하여 일관성 있는 실행 환경을 제공하는 아키텍처 패턴이다. 마이크로서비스, 클라우드 네이티브 환경에서 확장성, 이식성, 자동화를 실현하며 현대적 소프트웨어 배포의 핵심 기반이 된다.</description>
    </item>
    <item>
      <title>Cloud Computing</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-fundamentals/cloud-computing/</link>
      <pubDate>Sun, 15 Jun 2025 07:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/architecture-styles/cloud-native-architecture/cloud-fundamentals/cloud-computing/</guid>
      <description>클라우드 컴퓨팅은 가상화된 서버, 스토리지, 네트워킹, 데이터베이스, 분석 툴 등을 온디맨드 방식으로 서비스 형태로 제공하는 모델이다. 이를 통해 기업은 초기 투자 없이 빠르게 확장 가능하며, 글로벌 접근성, 비용 효율성과 혁신 가속화가 가능하다.</description>
    </item>
    <item>
      <title>Load Balancing</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/performance-optimization/traffic-management/load-balancing/</link>
      <pubDate>Thu, 13 Feb 2025 01:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/performance-optimization/traffic-management/load-balancing/</guid>
      <description>API 로드 밸런싱은 현대 웹 아키텍처와 분산 시스템의 필수적인 구성 요소로, 트래픽을 여러 서버에 효율적으로 분산하여 성능, 가용성, 안정성을 극대화한다.</description>
    </item>
    <item>
      <title>Cloud Providers</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/engineering-operations/infrastructure-management/cloud-platforms/cloud-providers/</link>
      <pubDate>Sun, 10 Nov 2024 10:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/engineering-operations/infrastructure-management/cloud-platforms/cloud-providers/</guid>
      <description>네이버 클라우드 플랫폼(NCP)과 AWS, Azure, Google Cloud Platform(GCP)의 주요 서비스를 비교하여 설명</description>
    </item>
    <item>
      <title>캐시 (Cache)</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/data--state-management/cache/</link>
      <pubDate>Mon, 30 Sep 2024 13:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/data--state-management/cache/</guid>
      <description>캐시 (Cache) 는 자주 접근하는 데이터를 빠른 저장소에 임시 보관하여 시스템 성능을 향상시키는 하드웨어 또는 소프트웨어 구성 요소이다. CPU 캐시부터 웹 캐시까지 다양한 계층에서 활용되며, 지역성 원리를 기반으로 데이터 접근 속도를 대폭 개선한다.</description>
    </item>
  </channel>
</rss>
