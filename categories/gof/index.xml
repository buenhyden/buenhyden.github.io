<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GoF on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/gof/</link>
    <description>Recent content in GoF on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.9</generator>
    <language>en</language>
    <lastBuildDate>Wed, 25 Sep 2024 18:21:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/gof/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creational</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/</link>
      <pubDate>Wed, 25 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/</guid>
      <description>Creational Design Patterns(생성 디자인 패턴) 는 객체 생성 메커니즘을 다루는 디자인 패턴 분류로, 시스템이 객체를 생성, 구성, 표현하는 방식에 독립성을 제공한다. GoF 에서 정의한 5 가지 패턴 (Singleton, Factory Method, Abstract Factory, Builder, Prototype) 을 포함하며, 객체 생성의 복잡성을 캡슐화하고 유연성을 향상시켜 재사용 가능하고 유지보수가 용이한 소프트웨어 시스템 구축을 지원한다.</description>
    </item>
    <item>
      <title>Structural</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/</link>
      <pubDate>Wed, 25 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/</guid>
      <description>&lt;h2 id=&#34;structural&#34;&gt;Structural&lt;/h2&gt;
&lt;p&gt;아래는 &amp;ldquo;Structural(구조 패턴)&amp;rdquo; 에 대한 체계적인 조사, 분석 및 정리 결과입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-주제에-대한-태그&#34;&gt;1. 주제에 대한 태그&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Structural-Pattern&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Object-Composition&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Class-Relationship&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GoF-Design-Patterns&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-태그-영문---사용&#34;&gt;1. 태그 (영문, &amp;lsquo;-&amp;rsquo; 사용)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Structural-Patterns&lt;/li&gt;
&lt;li&gt;Object-Composition&lt;/li&gt;
&lt;li&gt;Interface-Adapter&lt;/li&gt;
&lt;li&gt;GoF-Structural&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-카테고리-계층-구조-분석&#34;&gt;2. 카테고리 계층 구조 분석&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Structural&amp;rdquo; 패턴은 &lt;code&gt;Software Design Patterns &amp;gt; GoF &amp;gt; Structural&lt;/code&gt; 하위에 적합합니다.&lt;br&gt;
&lt;strong&gt;근거&lt;/strong&gt;: GoF 분류 체계에서는 &lt;strong&gt;Structural Patterns&lt;/strong&gt;가 객체와 클래스 간의 조합과 관계에 초점을 맞춘 별도의 범주로 정의되며, Adapter, Facade, Bridge, Composite, Decorator, Proxy, Flyweight 등이 여기에 속합니다 (&lt;a href=&#34;https://www.geeksforgeeks.org/system-design/gang-of-four-gof-design-patterns/?utm_source=chatgpt.com&#34; title=&#34;Gang of Four (GOF) Design Patterns - GeeksforGeeks&#34;&gt;geeksforgeeks.org&lt;/a&gt;, &lt;a href=&#34;https://refactoring.guru/design-patterns/go?utm_source=chatgpt.com&#34; title=&#34;Design Patterns in Go - Refactoring.Guru&#34;&gt;refactoring.guru&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Behavioral</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/</link>
      <pubDate>Tue, 24 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/</guid>
      <description>Behavioral Design Patterns 는 객체 및 클래스 간의 상호작용과 책임 분산에 집중한 디자인 패턴군으로, 복잡한 시스템에서 객체들의 행위를 유연하게 조정하고 기능 확장 및 유지보수를 용이하게 만든다. 실무에서 프로그램의 확장성과 코드 품질 향상을 위해 필수적으로 활용된다.</description>
    </item>
    <item>
      <title>Mediator Pattern vs Observer Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/mediator-pattern-vs-observer-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 00:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/mediator-pattern-vs-observer-pattern/</guid>
      <description>Mediator 패턴과 Observer 패턴은 객체 간 통신을 관리하는 디자인 패턴이지만, 그 접근 방식과 용도에 차이가 있다.</description>
    </item>
    <item>
      <title>Factory Method Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/factory-method-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 18:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/factory-method-pattern/</guid>
      <description>Factory Method Pattern 은 객체 생성을 위한 인터페이스를 정의하되, 어떤 클래스를 인스턴스화할지는 서브클래스가 결정하도록 하는 생성 패턴이다. 클라이언트 코드와 구체적인 제품 클래스 간의 결합도를 낮추고, 상속을 통해 객체 생성의 책임을 서브클래스에 위임하여 확장성과 유지보수성을 향상시킨다.</description>
    </item>
    <item>
      <title>Singleton Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/singleton-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 18:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/singleton-pattern/</guid>
      <description>클래스의 인스턴스가 프로그램 전체에서 오직 하나만 생성되도록 보장하는 소프트웨어 디자인 패턴.</description>
    </item>
    <item>
      <title>Flyweight Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/flyweight-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 08:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/flyweight-pattern/</guid>
      <description>플라이웨이트 패턴은 재사용 가능한 객체 인스턴스를 공유하여 메모리 사용량을 최소화하는 구조 패턴이다.  간단히 말하면 캐시(Cache) 개념을 코드로 패턴화한 것으로, 자주 변화하는 속성(extrinsic)과 변하지 않는 속성(intrinsic)을 분리하고 변하지 않는 속성을 캐시하여 재사용함으로써 메모리 사용을 줄이는 방식이다.</description>
    </item>
    <item>
      <title>Composite Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/composite-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 08:24:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/composite-pattern/</guid>
      <description>Composite Pattern은 구조적 디자인 패턴 중 하나로, 객체들을 트리 구조로 구성하여 부분-전체 계층을 표현하는 패턴이다.</description>
    </item>
    <item>
      <title>Decorator Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/decorator-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/decorator-pattern/</guid>
      <description>객체에 동적으로 새로운 책임을 추가할 수 있게 해주는 구조적 디자인 패턴</description>
    </item>
    <item>
      <title>Adapter Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/adapter-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/structural/adapter-pattern/</guid>
      <description>호환되지 않는 인터페이스를 가진 객체들이 협력할 수 있도록 하는 구조적 디자인 패턴</description>
    </item>
    <item>
      <title>Abstract Factory Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/abstract-factory-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/abstract-factory-pattern/</guid>
      <description>Abstract Factory Pattern 은 관련된 객체들의 패밀리를 구체적인 클래스를 명시하지 않고 생성할 수 있게 하는 생성형 디자인 패턴이다. 제품군의 일관성을 보장하며, 시스템의 독립성과 확장성을 제공하여 다양한 플랫폼이나 환경에서 동일한 인터페이스로 서로 다른 구현체를 생성할 수 있게 한다.</description>
    </item>
    <item>
      <title>Builder Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/builder-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/builder-pattern/</guid>
      <description>빌더 패턴은 복잡한 객체를 단계별로 생성하며, 생성 과정과 표현 방법을 분리해 다양한 조합의 객체 생성을 유연하게 지원하는 생성 패턴이다. 매개변수가 많거나 생성 절차가 복잡한 객체에 효과적이며, 코드 가독성, 유지보수성, 불변성 보장에 유리하다.</description>
    </item>
    <item>
      <title>Prototype Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/prototype-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/creational/prototype-pattern/</guid>
      <description>기존 객체를 복제하여 새로운 객체를 생성하는 생성 패턴</description>
    </item>
    <item>
      <title>Interpreter Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/interpreter-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/interpreter-pattern/</guid>
      <description>Interpreter 패턴은 행동 디자인 패턴의 하나로, 특정 언어의 문법을 해석하고 실행하는 방법을 정의한다.</description>
    </item>
    <item>
      <title>Visitor Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/visitor-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/visitor-pattern/</guid>
      <description>Visitor Pattern은 객체 구조와 알고리즘을 분리하는 행위 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Chain of Responsibility</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/chain-of-responsibility/</link>
      <pubDate>Tue, 24 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/chain-of-responsibility/</guid>
      <description>Chain of Responsibility 패턴은 요청을 보내는 객체와 이를 처리하는 객체들 간의 결합도를 낮추기 위한 행위 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Mediator Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/mediator-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/mediator-pattern/</guid>
      <description>Mediator Pattern(중재자 패턴)은 소프트웨어 디자인 패턴 중 하나로, 객체 간의 상호작용을 캡슐화하여 서로 직접 통신하지 않고 중재자 객체를 통해서만 소통하도록 설계된 행동 패턴이다.</description>
    </item>
    <item>
      <title>Memento Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/memento-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/memento-pattern/</guid>
      <description>Mediator 패턴은 객체 지향 소프트웨어 디자인 패턴 중 하나로, 객체들 간의 복잡한 상호작용을 캡슐화하여 객체 간 결합도를 낮추는 행위 패턴이다.</description>
    </item>
    <item>
      <title>Command Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/command-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/command-pattern/</guid>
      <description>요청을 객체의 형태로 캡슐화하여 나중에 사용할 수 있도록 하는 행동 디자인 패턴</description>
    </item>
    <item>
      <title>State Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/state-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/state-pattern/</guid>
      <description>객체의 내부 상태가 변경될 때 객체의 행동이 변경되도록 하는 행동 디자인 패턴</description>
    </item>
    <item>
      <title>Template Method Pattern</title>
      <link>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/template-method-pattern/</link>
      <pubDate>Tue, 24 Sep 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-engineering/design-and-architecture/software-design-patterns/gof/behavioral/template-method-pattern/</guid>
      <description>알고리즘의 구조를 정의하고 일부 단계를 서브클래스에서 구현할 수 있도록 하는 행동 디자인 패턴</description>
    </item>
  </channel>
</rss>
