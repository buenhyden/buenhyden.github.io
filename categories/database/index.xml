<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Database on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/database/</link>
    <description>Recent content in Database on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.143.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 12 Nov 2024 11:22:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shared Database vs Shared Database Per Service</title>
      <link>https://buenhyden.github.io/til/2024/11/12/shared-database-vs-shared-database-per-service/</link>
      <pubDate>Tue, 12 Nov 2024 08:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/11/12/shared-database-vs-shared-database-per-service/</guid>
      <description>&lt;h2 id=&#34;shared-database-vs-shared-database-per-service&#34;&gt;Shared Database Vs Shared Database Per Service&lt;/h2&gt;
&lt;p&gt;MSA(Microservices Architecture)에서 &lt;strong&gt;Shared Database&lt;/strong&gt;와 &lt;strong&gt;Shared Database Per Service&lt;/strong&gt; 패턴은 데이터 관리 전략의 일환으로 활용되며, 각각의 특징과 적용 시나리오가 뚜렷하게 구분된다.&lt;/p&gt;
&lt;p&gt;두 패턴 모두 &lt;strong&gt;단일 데이터베이스 의존성&lt;/strong&gt;으로 인한 리스크가 존재하므로, 장기적 관점에서는 &lt;strong&gt;Database Per Service&lt;/strong&gt;로의 전환을 고려해야 한다. 특히 클라우드 환경(AWS RDS, Aurora)에서는 논리적 분리가 용이하나, &lt;strong&gt;트랜잭션 격리&lt;/strong&gt;와 &lt;strong&gt;확장성&lt;/strong&gt; 측면에서 trade-off를 신중히 평가해야 한다.&lt;/p&gt;
&lt;h3 id=&#34;shared-database-패턴&#34;&gt;Shared Database 패턴&lt;/h3&gt;
&lt;h4 id=&#34;정의-및-특징&#34;&gt;정의 및 특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;여러 마이크로서비스가 단일 데이터베이스를 공유&lt;/strong&gt;하며, 서비스 간 자유로운 테이블 접근 허용.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;직접적인 ACID 트랜잭션&lt;/strong&gt;을 통해 데이터 일관성 유지.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;간단한 아키텍처&lt;/strong&gt;로 시작 단계에서 빠른 개발 가능.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;동작-방식&#34;&gt;동작 방식&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-1&#34;&gt;1&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-2&#34;&gt;2&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-3&#34;&gt;3&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-4&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-4&#34;&gt;4&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-0-5&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-0-5&#34;&gt;5&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;-- OrderService가 CustomerService의 테이블 직접 접근 예시
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BEGIN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TRANSACTION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CREDIT_LIMIT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CUSTOMERS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CUSTOMER_ID&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;INSERT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;INTO&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ORDERS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CUSTOMER_ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AMOUNT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;VALUES&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;50000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COMMIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;서비스 간 &lt;strong&gt;스키마 변경 시 협업 필요&lt;/strong&gt; (예: &lt;code&gt;Customer&lt;/code&gt; 테이블 컬럼 추가 → &lt;code&gt;OrderService&lt;/code&gt; 코드 수정).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;장단점&#34;&gt;장단점&lt;/h4&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;- 복잡한 분산 트랜잭션 불필요&lt;/td&gt;
          &lt;td&gt;- 서비스 간 &lt;strong&gt;강한 결합성&lt;/strong&gt; 발생&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;- 데이터 조인 및 통합 쿼리 용이&lt;/td&gt;
          &lt;td&gt;- 단일 데이터베이스 병목 현상 (SPOF)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;- 기존 모놀리식 시스템 전환 용이&lt;/td&gt;
          &lt;td&gt;- 스키마 변경 시 전체 서비스 영향도 검토 필요&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;적합한-시나리오&#34;&gt;적합한 시나리오&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;소규모 팀&lt;/strong&gt;에서 신속한 프로토타이핑 필요 시.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;레거시 시스템&lt;/strong&gt;을 MSA로 점진적 전환하는 과정에서 임시 활용.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;강한 ACID 트랜잭션&lt;/strong&gt; 요구사항이 있는 금융/결제 시스템.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;shared-database-per-service-패턴&#34;&gt;Shared Database Per Service 패턴&lt;/h3&gt;
&lt;h4 id=&#34;정의-및-특징-1&#34;&gt;정의 및 특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;단일 물리적 데이터베이스 인스턴스를 공유&lt;/strong&gt;하지만, &lt;strong&gt;서비스별 논리적 분리&lt;/strong&gt; (스키마/테이블 격리).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;핫 테이블(Hot Table) 방지&lt;/strong&gt;를 통해 성능 저하 최소화.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;하위 호환성 유지&lt;/strong&gt;가 필수적이며, 스키마 변경 시 모든 서비스 영향도 검토.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;동작-방식-1&#34;&gt;동작 방식&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-1&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-1&#34;&gt;1&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-2&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-2&#34;&gt;2&lt;/a&gt;
&lt;/span&gt;&lt;span class=&#34;lnt&#34; id=&#34;hl-1-3&#34;&gt;&lt;a class=&#34;lnlinks&#34; href=&#34;#hl-1-3&#34;&gt;3&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;-- Sales 서비스: sales_db.sales_table
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;-- Customer 서비스: sales_db.customer_table (논리적 분리)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;GRANT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;INSERT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sales_db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;customer_table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;TO&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;customer_service&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IAM 정책&lt;/strong&gt; 또는 &lt;strong&gt;DB 권한 제어&lt;/strong&gt;를 통해 서비스별 접근 범위 제한.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;장단점-1&#34;&gt;&lt;strong&gt;장단점&lt;/strong&gt;&lt;/h4&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;- 물리적 인프라 비용 절감&lt;/td&gt;
          &lt;td&gt;- 여전히 &lt;strong&gt;런타임 결합성&lt;/strong&gt; 존재&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;- 부분적 스키마 독립성 보장&lt;/td&gt;
          &lt;td&gt;- 장기적 유지보수 복잡성 증가&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;- 데이터 중복 최소화&lt;/td&gt;
          &lt;td&gt;- 확장성 제약 (CPU/IO 리소스 경쟁)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;적합한-시나리오-1&#34;&gt;&lt;strong&gt;적합한 시나리오&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;제한된 리소스&lt;/strong&gt; 환경에서 다중 서비스 운영 필요 시.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;기존 데이터 레이어&lt;/strong&gt; 재설계 없이 MSA 도입 시.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;규제 준수&lt;/strong&gt; 요구사항으로 단일 데이터베이스 유지해야 하는 경우.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;비교-분석표&#34;&gt;비교 분석표&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;항목&lt;/th&gt;
          &lt;th&gt;공유 데이터베이스 (Shared Database)&lt;/th&gt;
          &lt;th&gt;서비스별 전용 데이터베이스 (Database per Service)&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;데이터 격리 수준&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;테이블 수준 공유&lt;/td&gt;
          &lt;td&gt;스키마/테이블 논리적 분리&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;데이터 일관성 유지&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;ACID 트랜잭션을 통해 데이터 일관성을 쉽게 유지할 수 있습니다.&lt;/td&gt;
          &lt;td&gt;분산된 데이터로 인해 데이터 일관성 유지가 복잡해질 수 있으며, 이를 위해 사가(Saga) 패턴 등의 사용이 필요할 수 있습니다.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;스키마 변경 영향도&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;모든 서비스 영향&lt;/td&gt;
          &lt;td&gt;관련 서비스만 영향&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;결합도&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;높음 (직접 테이블 접근)&lt;/td&gt;
          &lt;td&gt;중간 (권한 제어를 통한 제한적 접근)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;서비스 독립성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;데이터베이스 스키마 변경 시 여러 서비스 간 조율이 필요하여 서비스 간 결합도가 높아집니다.&lt;/td&gt;
          &lt;td&gt;각 서비스가 독립적인 데이터베이스를 소유하므로 서비스 간 결합도가 낮아 독립적인 개발, 배포, 확장이 가능합니다.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;데이터베이스 선택&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;모든 서비스가 동일한 데이터베이스를 사용하므로 개별 서비스의 특수한 데이터 저장 요구 사항을 충족하기 어렵습니다.&lt;/td&gt;
          &lt;td&gt;각 서비스는 자신의 요구에 맞는 데이터베이스 유형을 선택할 수 있어 폴리글랏 퍼시스턴스(Polyglot Persistence)를 구현할 수 있습니다.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;운영 복잡성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;단일 데이터베이스를 관리하므로 운영이 단순합니다.&lt;/td&gt;
          &lt;td&gt;여러 개의 데이터베이스를 관리해야 하므로 운영 복잡성이 증가합니다.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;트랜잭션 관리&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;로컬 ACID 트랜잭션 가능.&lt;br&gt;단일 데이터베이스 내에서 트랜잭션을 관리하므로 구현이 용이합니다.&lt;/td&gt;
          &lt;td&gt;로컬 ACID 트랜잭션 가능.&lt;br&gt;분산 트랜잭션 관리가 필요할 수 있으며, 이는 구현의 복잡성을 증가시킵니다.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;확장성&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;단일 데이터베이스의 확장에 한계가 있을 수 있으며, 특정 서비스의 확장이 다른 서비스에 영향을 미칠 수 있습니다.&lt;/td&gt;
          &lt;td&gt;각 서비스가 독립적으로 확장 가능하므로 시스템 전체의 확장성이 향상됩니다.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;보안&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;모든 서비스가 전체 데이터 접근 가능&lt;/td&gt;
          &lt;td&gt;권한 제어로 접근 범위 제한&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;패턴-선택-가이드&#34;&gt;패턴 선택 가이드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shared Database 선택 시&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;개발 초기 단계에서 빠른 출시를 목표로 할 때.&lt;/li&gt;
&lt;li&gt;팀 규모가 작고 데이터 복잡도가 낮은 경우.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shared Database Per Service 선택 시&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;기존 모놀리식 DB를 유지하며 MSA를 도입해야 할 때.&lt;/li&gt;
&lt;li&gt;데이터 중복을 최소화해야 하지만 완전 분리가 어려운 경우.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Database Per Service 권장 시&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;대규모 시스템에서 &lt;strong&gt;완전한 독립성&lt;/strong&gt;과 &lt;strong&gt;확장성&lt;/strong&gt;이 필요할 때.&lt;/li&gt;
&lt;li&gt;서비스별 &lt;strong&gt;폴리글랏 퍼시스턴스&lt;/strong&gt; 적용이 필요한 경우.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Database</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/</link>
      <pubDate>Tue, 12 Nov 2024 11:22:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/</guid>
      <description>&lt;h2 id=&#34;database&#34;&gt;Database&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Database per Service Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/database-per-service/</link>
      <pubDate>Tue, 12 Nov 2024 10:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/database-per-service/</guid>
      <description>Database per Service Pattern은 각 마이크로서비스가 자체적인 독립된 데이터베이스를 가지는 구조를 말한다.  이는 서비스 간의 느슨한 결합을 촉진하고, 각 서비스의 자율성을 높이는 것을 목표로 한다.</description>
    </item>
    <item>
      <title>Shared Database</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/shared-database/</link>
      <pubDate>Tue, 12 Nov 2024 07:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/msa-patterns/database/shared-database/</guid>
      <description>&lt;h2 id=&#34;shared-database&#34;&gt;Shared Database&lt;/h2&gt;
&lt;p&gt;마이크로서비스 아키텍처(MSA)에서 &amp;ldquo;Shared Database&amp;rdquo; 패턴은 여러 마이크로서비스가 단일 데이터베이스를 공유하는 접근 방식이다.&lt;/p&gt;
&lt;p&gt;Shared Database 패턴은 여러 마이크로서비스가 동일한 데이터베이스 인스턴스를 사용하여 데이터를 저장하고 접근하는 방식이다. 각 서비스는 자유롭게 다른 서비스가 소유한 데이터에 접근할 수 있으며, 로컬 ACID 트랜잭션을 사용하여 데이터 일관성을 유지한다.&lt;/p&gt;
&lt;p&gt;Shared Database 패턴은 마이크로서비스 아키텍처의 일반적인 원칙과는 다소 배치되지만, 특정 상황에서는 유용할 수 있다. 그러나 장기적으로는 서비스 간 결합도를 낮추고 확장성을 높이기 위해 Database per Service 패턴으로의 전환을 고려해야 할 수 있다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
