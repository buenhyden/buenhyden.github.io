<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Data-Flow on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/data-flow/</link>
    <description>Recent content in Data-Flow on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.150.1</generator>
    <language>en</language>
    <lastBuildDate>Mon, 14 Jul 2025 04:17:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/data-flow/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Styles</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-architecture/data-processing-architecture/data-flow-styles/</link>
      <pubDate>Mon, 14 Jul 2025 04:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-architecture/data-processing-architecture/data-flow-styles/</guid>
      <description>데이터 플로우 아키텍처의 세 가지 주요 스타일로, Batch Sequential 은 순차적 배치 처리, Pipe and Filter 는 스트림 기반 동시 처리, Process Control 은 피드백 루프 기반 제어 처리를 특징으로 하며, 각각 다른 데이터 처리 요구사항과 성능 특성을 가진다.</description>
    </item>
    <item>
      <title>Architectures</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-architecture/data-processing-architecture/</link>
      <pubDate>Mon, 14 Jul 2025 04:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-architecture/data-processing-architecture/</guid>
      <description>Lambda Architecture(람다 아키텍처) 와 Kappa Architecture(카파 아키텍처) 는 대규모 데이터 처리와 실시간 분석을 위한 아키텍처 스타일이다.  Lambda 는 배치와 실시간 경로를 결합하여 정확성과 신속성을 모두 추구하고, Kappa 는 단일 스트림 처리 경로로 단순성과 유지보수성을 강조한다.</description>
    </item>
    <item>
      <title>Processing Types</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-architecture/processing-paradigms/</link>
      <pubDate>Mon, 14 Jul 2025 04:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-architecture/processing-paradigms/</guid>
      <description>Batch Processing(배치 처리), Hybrid Processing(하이브리드 처리), Stream Processing(스트림 처리) 은 데이터 처리의 대표적인 방식이다. 배치 처리는 대용량 데이터를 일괄 처리하며, 스트림 처리는 실시간 데이터를 즉시 처리한다. 하이브리드 처리는 두 방식을 결합해 실시간성과 정확성을 동시에 추구한다.</description>
    </item>
    <item>
      <title>Batch Sequential</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-architecture/data-processing-architecture/data-flow-styles/batch-sequential/</link>
      <pubDate>Sat, 12 Jul 2025 10:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-architecture/data-processing-architecture/data-flow-styles/batch-sequential/</guid>
      <description>Batch Sequential 은 일정 단위로 모은 데이터를 순차적 단계로 처리하는 전통적 배치 아키텍처로, 모듈화와 안정성은 우수하지만 지연과 리소스 제약이 있다. 체크포인트, 파티셔닝, 하이브리드 스트림 보강, 워크플로우 도구를 통해 한계점을 보완할 수 있다.</description>
    </item>
    <item>
      <title>Process Control</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-architecture/data-processing-architecture/data-flow-styles/process-control/</link>
      <pubDate>Sat, 12 Jul 2025 10:15:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-architecture/data-processing-architecture/data-flow-styles/process-control/</guid>
      <description>프로세스 제어는 배치 처리 및 데이터 플로우 아키텍처에서 각 처리 단계의 실행, 상태 관리, 오류 감지 및 복구, 흐름 제어 등을 담당하는 핵심 기능으로, 대규모 데이터 처리 시스템의 신뢰성과 효율성을 보장한다.</description>
    </item>
    <item>
      <title>Stream Processing</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-architecture/processing-paradigms/stream-processing/</link>
      <pubDate>Sat, 12 Jul 2025 06:20:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-architecture/processing-paradigms/stream-processing/</guid>
      <description>스트림 처리 (Stream Processing) 는 변화하는 데이터를 실시간으로 연속적으로 분석·처리하는 기술로, 이벤트 기반 시스템에서 높은 처리량·낮은 지연을 달성한다. 실시간 모니터링, 이상탐지, 알림, 데이터 파이프라인 방식으로 활용되며, Kafka, Flink, Spark Streaming 등이 주요 구현체이다.</description>
    </item>
    <item>
      <title>Pipe-and-Filter</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-architecture/data-processing-architecture/data-flow-styles/pipe-and-filter/</link>
      <pubDate>Tue, 08 Jul 2025 14:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-architecture/data-processing-architecture/data-flow-styles/pipe-and-filter/</guid>
      <description>Pipe-and-Filter 는 데이터를 여러 독립적인 처리 단계 (필터) 로 분할하고, 각 필터를 파이프를 통해 연결하여 데이터가 연속적으로 흐르며 가공되는 구조이다. 높은 모듈성, 재사용성, 확장성을 갖추어 데이터 처리 파이프라인, 컴파일러, ETL 등 다양한 분야에서 활용된다.</description>
    </item>
    <item>
      <title>Kappa Architecture</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-architecture/data-processing-architecture/kappa-architecture/</link>
      <pubDate>Sun, 06 Jul 2025 10:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-architecture/data-processing-architecture/kappa-architecture/</guid>
      <description>Kappa 아키텍처는 배치와 스트림 분리 없이 &amp;#34;모든 데이터를 스트림으로 처리&amp;#34; 하는 단일 레이어 방식이다. 단순성, 코드 통일성, 실시간 응답성을 확보하고 이벤트 재처리 방식으로 유연하게 대응하지만, 이력 분석 및 리플레이 처리 비용 등의 trade-off 가 존재한다.</description>
    </item>
    <item>
      <title>Lambda Architecture</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-architecture/data-processing-architecture/lambda-architecture/</link>
      <pubDate>Sun, 06 Jul 2025 10:13:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-architecture/data-processing-architecture/lambda-architecture/</guid>
      <description>Lambda Architecture 는 배치 처리 (Batch Processing) 와 실시간 스트림 처리 (Real-time Stream Processing) 를 결합하여 대용량 데이터를 효과적으로 처리하는 하이브리드 아키텍처 패턴이다. 배치 레이어 (Batch Layer), 스피드 레이어 (Speed Layer), 서빙 레이어 (Serving Layer) 세 계층으로 구성되어 높은 처리량과 낮은 지연시간을 동시에 제공한다.</description>
    </item>
    <item>
      <title>Batch Processing</title>
      <link>https://buenhyden.github.io/posts/data--database-systems/data-architecture/processing-paradigms/batch-processing/</link>
      <pubDate>Sat, 01 Feb 2025 03:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/data--database-systems/data-architecture/processing-paradigms/batch-processing/</guid>
      <description>배치 처리 (Batch Processing) 는 대량의 데이터를 일정한 주기나 조건에 따라 일괄적으로 처리하는 방식이다.  실시간성이 요구되지 않는 데이터 집계, 변환, 보고서 생성 등에서 주로 활용되며, 처리 효율성과 자동화, 신뢰성을 높이는 핵심 데이터 처리 패턴이다.</description>
    </item>
  </channel>
</rss>
