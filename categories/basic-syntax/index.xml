<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Basic Syntax on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/basic-syntax/</link>
    <description>Recent content in Basic Syntax on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 07 Mar 2025 04:02:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/basic-syntax/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Variables</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/</link>
      <pubDate>Wed, 25 Dec 2024 01:58:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/</guid>
      <description>자바스크립트 변수는 프로그램 내에서 데이터를 효과적으로 저장하고 관리하는 기본 도구이다.</description>
    </item>
    <item>
      <title>Type Casting</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/type-casting/</link>
      <pubDate>Tue, 04 Mar 2025 10:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/type-casting/</guid>
      <description>&lt;h2 id=&#34;type-casting&#34;&gt;Type Casting&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Data Structures</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-structures/</link>
      <pubDate>Mon, 23 Dec 2024 01:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-structures/</guid>
      <description>&lt;h2 id=&#34;data-structures&#34;&gt;Data Structures&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Equality Comparisons</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/equality-comparisons/</link>
      <pubDate>Mon, 23 Dec 2024 01:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/equality-comparisons/</guid>
      <description>&lt;h2 id=&#34;equality-comparisons&#34;&gt;Equality Comparisons&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Loops and Iterations</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/loops-and-iterations/</link>
      <pubDate>Mon, 23 Dec 2024 01:59:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/loops-and-iterations/</guid>
      <description>&lt;h2 id=&#34;loops-and-iterations&#34;&gt;Loops and Iterations&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Control Flow</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/control-flow/</link>
      <pubDate>Mon, 23 Dec 2024 02:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/control-flow/</guid>
      <description>&lt;h2 id=&#34;control-flow&#34;&gt;Control Flow&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Expressions and Operators</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/expressions-and-operators/</link>
      <pubDate>Mon, 23 Dec 2024 02:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/expressions-and-operators/</guid>
      <description>&lt;h2 id=&#34;expressions-and-operators&#34;&gt;Expressions and Operators&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Classes</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/classes/</link>
      <pubDate>Mon, 23 Dec 2024 02:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/classes/</guid>
      <description>&lt;h2 id=&#34;classes&#34;&gt;Classes&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Javascript Iterators and Generators</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/javascript-iterators-and-generators/</link>
      <pubDate>Mon, 23 Dec 2024 02:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/javascript-iterators-and-generators/</guid>
      <description>&lt;h2 id=&#34;javascript-iterators-and-generators&#34;&gt;Javascript Iterators and Generators&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>import vs require</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/modules/import-vs-require/</link>
      <pubDate>Sat, 23 Nov 2024 03:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/modules/import-vs-require/</guid>
      <description>`require`는 Node.js에서 사용되는 CommonJS 모듈 시스템의 키워드로, 동기적으로 모듈을 로드하며 프로그램의 어느 지점에서나 호출할 수 있다. 반면에 `import`는 ES6에서 도입된 모듈 시스템의 키워드로, 코드 실행 전에 모듈을 미리 로드하며 파일의 시작 부분에서만 사용할 수 있다.</description>
    </item>
    <item>
      <title>Object</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-types/object/</link>
      <pubDate>Fri, 07 Mar 2025 04:02:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-types/object/</guid>
      <description>&lt;h2 id=&#34;object&#34;&gt;Object&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Temporal Dead Zone</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/temporal-dead-zone/</link>
      <pubDate>Wed, 25 Dec 2024 15:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/temporal-dead-zone/</guid>
      <description>일시적 사각지대(Temporal Dead Zone, TDZ)는 JavaScript에서 변수가 선언되었지만 아직 초기화되지 않은 상태로 존재하는 코드 영역을 의미한다.</description>
    </item>
    <item>
      <title>Hoisting</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/hoisting/</link>
      <pubDate>Wed, 25 Dec 2024 14:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/hoisting/</guid>
      <description>JavaScript 엔진이 코드를 실행하기 전에 변수, 함수, 클래스 또는 임포트의 선언부를 스코프의 최상단으로 끌어올리는 것처럼 동작하는 JavaScript의 메커니즘으로, 이름 그대로 &amp;#39;끌어올린다(hoist)&amp;#39;는 의미를 가진다.</description>
    </item>
    <item>
      <title>Variable Declarations</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/variable-declarations/</link>
      <pubDate>Wed, 25 Dec 2024 14:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/variable-declarations/</guid>
      <description>프로그램에서 데이터를 저장하고 참조하는 데 사용되는 중요한 개념이다. 변수 선언 방식에 따라 변수의 **유효 범위(Scope)**와 **재할당 가능 여부** 등이 결정된다.</description>
    </item>
    <item>
      <title>변수 명명 규칙(Variable Naming Rules)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/naming-rules/</link>
      <pubDate>Wed, 25 Dec 2024 14:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/naming-rules/</guid>
      <description>JavaScript의 변수 명명 규칙(Variable Naming Rules)</description>
    </item>
    <item>
      <title>Primitive Types</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-types/primitive-types/</link>
      <pubDate>Wed, 25 Dec 2024 01:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/data-types/primitive-types/</guid>
      <description>&lt;h2 id=&#34;primitive-types&#34;&gt;Primitive Types&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>scopes</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/scopes/</link>
      <pubDate>Wed, 25 Dec 2024 00:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/variables/scopes/</guid>
      <description>JavaScript의 스코프는 변수와 함수의 접근성과 생존 기간을 결정하는 중요한 개념으로, 변수나 함수가 **유효하게 접근할 수 있는 범위**를 의미한다.</description>
    </item>
    <item>
      <title>Type Casting</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/data-types/type-casting/</link>
      <pubDate>Tue, 24 Dec 2024 13:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/data-types/type-casting/</guid>
      <description>파이썬에서는 다양한 내장 함수를 사용하여 데이터 타입을 변환할 수 있다.</description>
    </item>
    <item>
      <title>Data Types</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/data-types/</link>
      <pubDate>Tue, 24 Dec 2024 11:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/data-types/</guid>
      <description>Python은 동적 타입 언어로, 변수를 선언할 때 명시적으로 타입을 지정할 필요가 없다.  하지만 각 데이터 타입을 이해하는 것은 효율적인 코딩과 디버깅에 필수적이다.</description>
    </item>
    <item>
      <title>ES Modules Vs CommonJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/modules/es-modules-vs-commonjs/</link>
      <pubDate>Sun, 22 Dec 2024 04:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/modules/es-modules-vs-commonjs/</guid>
      <description>ES Modules(ESM)과 CommonJS(CJS)는 JavaScript에서 사용되는 두 가지 주요 모듈 시스템이다.</description>
    </item>
    <item>
      <title>CommonJS</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/modules/commonjs/</link>
      <pubDate>Sun, 22 Dec 2024 04:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/modules/commonjs/</guid>
      <description>자바스크립트를 브라우저 외부 환경, 특히 서버 사이드에서 사용하기 위해 만들어진 모듈 시스템</description>
    </item>
    <item>
      <title>ES Modules</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/modules/es-modules/</link>
      <pubDate>Sun, 22 Dec 2024 04:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/modules/es-modules/</guid>
      <description>JavaScript 코드를 모듈 단위로 구성하고 관리할 수 있게 해주는 공식 표준 모듈 시스템이다.  이 시스템은 ECMAScript 2015(ES6)에서 처음 도입되었으며, 코드의 재사용성, 유지보수성, 그리고 의존성 관리를 크게 향상시켰다</description>
    </item>
    <item>
      <title>Python-Special Methods</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/special-methods/</link>
      <pubDate>Mon, 25 Nov 2024 23:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/special-methods/</guid>
      <description>클래스에 특별한 기능을 부여하는 특수한 메소드</description>
    </item>
    <item>
      <title>Python - Iterators</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/iterators/</link>
      <pubDate>Mon, 25 Nov 2024 17:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/iterators/</guid>
      <description>데이터 컬렉션의 요소들을 순차적으로 접근할 수 있게 해주는 객체</description>
    </item>
    <item>
      <title>Structural Pattern Matching</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/conditionals/structural-pattern-matching/</link>
      <pubDate>Mon, 25 Nov 2024 14:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/conditionals/structural-pattern-matching/</guid>
      <description>Python 3.10부터 도입된 **구조적 패턴 매칭(Structural Pattern Matching)** 은 데이터의 구조와 값을 기반으로 코드의 흐름을 제어한다.</description>
    </item>
    <item>
      <title>Classes</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/</link>
      <pubDate>Mon, 25 Nov 2024 12:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/</guid>
      <description>Python의 클래스(class)는 객체 지향 프로그래밍의 핵심 개념으로, 데이터와 그 데이터를 조작하는 메서드를 하나의 단위로 묶는 틀이다.</description>
    </item>
    <item>
      <title>name mangling</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/name-mangling/</link>
      <pubDate>Mon, 25 Nov 2024 09:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/name-mangling/</guid>
      <description>파이썬에서 &amp;#34;name mangling&amp;#34;은 클래스 내부의 속성이나 메서드의 이름을 변경하는 기능이다.  이 기능은 주로 정보 은닉과 캡슐화를 위해 사용된다.</description>
    </item>
    <item>
      <title>Python Super</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/super/</link>
      <pubDate>Mon, 25 Nov 2024 02:00:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/super/</guid>
      <description>super()는 상속 관계에서 부모 클래스의 메서드를 호출하는 데 사용되는 중요한 도구.</description>
    </item>
    <item>
      <title>Method Resolution Order (MRO)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/method-resolution-order/</link>
      <pubDate>Mon, 25 Nov 2024 01:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/classes/method-resolution-order/</guid>
      <description>파이썬에서 클래스의 상속 관계에서 메서드를 찾는 순서를 정의하는 규칙</description>
    </item>
    <item>
      <title>Decorators</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/decorators/</link>
      <pubDate>Sun, 24 Nov 2024 18:40:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/decorators/</guid>
      <description>&lt;h2 id=&#34;decorators&#34;&gt;Decorators&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Conditionals</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/conditionals/</link>
      <pubDate>Sun, 24 Nov 2024 12:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/conditionals/</guid>
      <description>Python의 조건문(Conditional Statements)은 프로그램의 흐름을 제어하는 데 사용된다.</description>
    </item>
    <item>
      <title>classmethod and staticmethod</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/decorators/classmethod-and-staticmethod/</link>
      <pubDate>Sun, 24 Nov 2024 12:39:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/decorators/classmethod-and-staticmethod/</guid>
      <description>Python의 클래스에서 사용되는 두 가지 다른 종류의 메서드 데코레이터</description>
    </item>
    <item>
      <title>Comments</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/comments/</link>
      <pubDate>Sun, 24 Nov 2024 11:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/comments/</guid>
      <description>주석은 코드에 대한 설명이나 메모를 추가하는 데 사용되는 텍스트</description>
    </item>
    <item>
      <title>Lambdas</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/functions/lambdas/</link>
      <pubDate>Sun, 24 Nov 2024 11:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/functions/lambdas/</guid>
      <description>익명 함수를 생성하는 강력한 도구</description>
    </item>
    <item>
      <title>Python Keywords</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/keywords/</link>
      <pubDate>Sun, 24 Nov 2024 10:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/keywords/</guid>
      <description>파이썬에서 이미 예약되어있는 문자열</description>
    </item>
    <item>
      <title>Generator and Iterator</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/generator-and-iterator/</link>
      <pubDate>Sun, 24 Nov 2024 10:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/generator-and-iterator/</guid>
      <description>이터레이터는 값을 차례대로 반환하는 객체로, `__iter__()`와 `__next__()` 메서드를 구현한다.  제너레이터는 `yield` 키워드를 사용하여 값을 하나씩 반환하는 함수로, 이터레이터를 생성한다.</description>
    </item>
    <item>
      <title>Python - Generators</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/functions/generators/</link>
      <pubDate>Sun, 24 Nov 2024 08:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/functions/generators/</guid>
      <description>반복 가능한 객체를 생성하는 강력한 도구</description>
    </item>
    <item>
      <title>내장 데코레이터 (Built-in Decorator)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/decorators/built-in-decorators/</link>
      <pubDate>Sun, 24 Nov 2024 07:49:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/decorators/built-in-decorators/</guid>
      <description>파이썬에는 다양한 내장 데코레이터가 있으며, 이들은 코드를 최적화하고 기능을 확장하는 데 중요한 역할을 한다.</description>
    </item>
    <item>
      <title>Docstring</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/comments/docstring/</link>
      <pubDate>Sun, 24 Nov 2024 03:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/comments/docstring/</guid>
      <description>python에서 함수, 클래스, 모듈에 대한 문서화를 위해 사용되는 문자열</description>
    </item>
    <item>
      <title>연산자(Operators)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/operations/operators/</link>
      <pubDate>Sun, 24 Nov 2024 00:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/basic-syntax/operations/operators/</guid>
      <description>연산자는 프로그래밍의 기본적인 구성 요소로, 데이터를 조작하고 계산하는 데 사용된다.</description>
    </item>
    <item>
      <title>Keywords</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/keywords/</link>
      <pubDate>Thu, 21 Nov 2024 03:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/basic-syntax/keywords/</guid>
      <description>키워드들은 JavaScript 프로그래밍의 기본 구성 요소이며, ECMAScript 표준의 일부이다.  각 키워드는 특정한 프로그래밍 목적을 위해 설계되었으며, 이들을 올바르게 이해하고 사용하는 것이 효과적인 JavaScript 프로그래밍의 기초가 된다.</description>
    </item>
  </channel>
</rss>
