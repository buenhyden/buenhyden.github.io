<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Performance Patterns on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/performance-patterns/</link>
    <description>Recent content in Performance Patterns on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.148.2</generator>
    <language>en</language>
    <lastBuildDate>Fri, 04 Apr 2025 02:45:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/performance-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Connection Pooling</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/performance--scalability/performance-design/data-access-optimization/connection-pooling/</link>
      <pubDate>Fri, 25 Oct 2024 06:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/performance--scalability/performance-design/data-access-optimization/connection-pooling/</guid>
      <description>Connection Pooling은 데이터베이스 연결을 재사용 가능한 형태로 캐시하는 메커니즘이다.  이는 애플리케이션이 데이터베이스에 연결할 때마다 새로운 연결을 생성하는 대신, 미리 생성된 연결을 사용할 수 있게 해준다.</description>
    </item>
    <item>
      <title>Load Shifting vs. Load Balancing</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/performance-optimization/traffic-management/load-shifting/load-shifting-vs-load-balancing/</link>
      <pubDate>Fri, 04 Apr 2025 02:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/performance-optimization/traffic-management/load-shifting/load-shifting-vs-load-balancing/</guid>
      <description>로드 시프팅과 로드 밸런싱은 자주 혼동되지만 실제로는 매우 다른 개념과 목적을 가지고 있다. 두 기술 모두 시스템 자원을 최적화하는 데 사용되지만, 접근 방식과 적용 시나리오가 다르다.</description>
    </item>
    <item>
      <title>Load shifting vs. autoscaling</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/performance-optimization/traffic-management/load-shifting/load-shifting-vs-autoscaling/</link>
      <pubDate>Wed, 02 Apr 2025 15:29:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/performance-optimization/traffic-management/load-shifting/load-shifting-vs-autoscaling/</guid>
      <description>**Load Shifting**과 **Autoscaling**은 백엔드 시스템에서 리소스를 효율적으로 관리하기 위한 두 가지 전략이다</description>
    </item>
    <item>
      <title>Load Shifting</title>
      <link>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/performance-optimization/traffic-management/load-shifting/</link>
      <pubDate>Tue, 01 Apr 2025 15:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking--protocols/advanced-networking/performance-optimization/traffic-management/load-shifting/</guid>
      <description>로드 시프팅은 시스템 부하를 효율적으로 관리하는 전략으로, 피크 시간대의 작업 부하를 비피크 시간대로 이동시켜 자원 활용을 최적화하는 방법이다.</description>
    </item>
    <item>
      <title>Caching</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/data--state-management/cache/caching/</link>
      <pubDate>Mon, 30 Sep 2024 14:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/data--state-management/cache/caching/</guid>
      <description>캐싱 (Caching) 은 데이터/결과/요청을 임시로 저장함으로써 반복적인 연산, 입출력, 네트워크 요청에 필요한 시간과 비용을 대폭 줄여주는 핵심 시스템 설계 기법이다. 메모리, 디스크, 분산 환경 등 다양한 계층에서 적용되며, 성능 개선과 응답속도 향상, 시스템 부하 분산에 매우 효과적이다.</description>
    </item>
    <item>
      <title>Cache Strategies</title>
      <link>https://buenhyden.github.io/posts/system-architecture--design/system-components/data--state-management/cache/caching-strategies/</link>
      <pubDate>Mon, 30 Sep 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-architecture--design/system-components/data--state-management/cache/caching-strategies/</guid>
      <description>Cache Strategy(캐시 전략)는 캐시를 효과적으로 활용하여 시스템 성능을 최적화하고 데이터 일관성을 유지하기 위한 방법론이다.</description>
    </item>
  </channel>
</rss>
