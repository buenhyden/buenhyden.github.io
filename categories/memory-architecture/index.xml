<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Memory Architecture on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/memory-architecture/</link>
    <description>Recent content in Memory Architecture on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 19 Dec 2024 11:38:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/memory-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Byte Addressable Memory vs Word Addressable Memory</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/byte-addressable-memory-vs-word-addressable-memory/</link>
      <pubDate>Thu, 19 Dec 2024 11:38:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/byte-addressable-memory-vs-word-addressable-memory/</guid>
      <description>컴퓨터 메모리의 주소 지정 방식을 설명하는 개념</description>
    </item>
    <item>
      <title>메모리 접근 방법 (Memory Access Methods)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-access-methods/</link>
      <pubDate>Wed, 18 Dec 2024 08:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-access-methods/</guid>
      <description>메모리 접근 방식 (Memory Access Methods)은 컴퓨터 시스템에서 메모리에 접근하는 방식을 말한다.</description>
    </item>
    <item>
      <title>메모리 주소 지정 방식 (Memory Address Modes)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-address-modes/</link>
      <pubDate>Wed, 18 Dec 2024 08:04:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-address-modes/</guid>
      <description>메모리 주소 지정 방식(Memory Address Modes)은 CPU가 메모리의 특정 위치에 어떻게 접근하는지를 나타내는 방법이다.</description>
    </item>
    <item>
      <title>캐싱 (Caching)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/</link>
      <pubDate>Sat, 19 Oct 2024 14:14:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/</guid>
      <description>캐싱은 자주 사용되는 데이터나 계산 결과를 빠르게 접근할 수 있는 위치에 임시로 저장하는 기술</description>
    </item>
    <item>
      <title>캐시 (Cache)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache/</link>
      <pubDate>Sat, 19 Oct 2024 13:25:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache/</guid>
      <description>캐시(Cache)는 컴퓨터 과학에서 데이터나 값을 미리 복사해 놓는 임시 저장소를 의미한다.</description>
    </item>
    <item>
      <title>Cache Memory</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/cache-memory/</link>
      <pubDate>Sat, 19 Oct 2024 11:36:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/cache-memory/</guid>
      <description>캐시 메모리(Cache Memory)는 컴퓨터 아키텍처에서 중요한 역할을 하는 CPU와 주 메모리(RAM) 사이에 위치한 소규모의 고속 메모리이다.</description>
    </item>
    <item>
      <title>Cache Coherence</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-coherence/</link>
      <pubDate>Sat, 19 Oct 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-coherence/</guid>
      <description>&lt;h2 id=&#34;cache-coherence&#34;&gt;Cache Coherence&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Cache Invalidation</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-invalidation/</link>
      <pubDate>Sat, 19 Oct 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-invalidation/</guid>
      <description>&lt;h2 id=&#34;cache-invalidation&#34;&gt;Cache Invalidation&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Cache Policy</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy/</link>
      <pubDate>Sat, 19 Oct 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-policy/</guid>
      <description>&lt;h2 id=&#34;cache-policy&#34;&gt;Cache Policy&lt;/h2&gt;
&lt;h3 id=&#34;cache-consistent-policies&#34;&gt;Cache Consistent Policies&lt;/h3&gt;
&lt;h3 id=&#34;cache-replacement-policies&#34;&gt;Cache Replacement Policies&lt;/h3&gt;
&lt;p&gt;LRU (Least Recently Used), LFU (Least Frequently Used), FIFO (First In First Out) 캐시 전략은 각각 다른 방식으로 캐시 공간을 관리합니다. 이들의 주요 차이점은 다음과 같습니다&lt;/p&gt;
&lt;p&gt;LRU (Least Recently Used)&lt;br&gt;
LFU (Least Frequently Used)&lt;br&gt;
FIFO (First In First Out)&lt;br&gt;
MRU (Most Recently Used)&lt;br&gt;
Random Replacement&lt;/p&gt;
&lt;h3 id=&#34;lru-least-recently-used&#34;&gt;LRU (Least Recently Used)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;가장 오랫동안 사용되지 않은 항목을 제거합니다.&lt;/li&gt;
&lt;li&gt;최근 접근 시간을 기준으로 항목을 관리합니다.&lt;/li&gt;
&lt;li&gt;시간적 지역성(temporal locality)이 있는 워크로드에 효과적입니다.&lt;/li&gt;
&lt;li&gt;구현이 비교적 간단하고 적응성이 좋습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lfu-least-frequently-used&#34;&gt;LFU (Least Frequently Used)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;가장 적게 사용된 항목을 제거합니다.&lt;/li&gt;
&lt;li&gt;각 항목의 접근 빈도를 추적하여 관리합니다.&lt;/li&gt;
&lt;li&gt;장기적인 인기도를 반영하는 데 효과적입니다.&lt;/li&gt;
&lt;li&gt;구현이 복잡하고 변화하는 접근 패턴에 적응하는 데 시간이 걸릴 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fifo-first-in-first-out&#34;&gt;FIFO (First In First Out)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;가장 먼저 추가된 항목을 제거합니다.&lt;/li&gt;
&lt;li&gt;항목이 추가된 순서만을 고려합니다.&lt;/li&gt;
&lt;li&gt;구현이 매우 간단하고 오버헤드가 낮습니다.&lt;/li&gt;
&lt;li&gt;접근 빈도나 최근 사용을 고려하지 않아 성능이 떨어질 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각 전략의 특성을 비교하면:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cache Strategy</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-strategy/</link>
      <pubDate>Sat, 19 Oct 2024 03:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/cache-strategy/</guid>
      <description>&lt;h2 id=&#34;cache-strategy&#34;&gt;Cache Strategy&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Caching Techniques</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/caching-techniques/</link>
      <pubDate>Sat, 19 Oct 2024 02:37:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/caching/caching-techniques/</guid>
      <description>&lt;h2 id=&#34;caching-techniques&#34;&gt;Caching Techniques&lt;/h2&gt;
&lt;p&gt;캐싱 기법
Memoization (함수 결과 캐싱)
Write-Through Caching
Write-Back Caching
Write-Around Caching
Read-Through Caching&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>메모리의 계층 구조 (Memory Hierarchy)</title>
      <link>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-hierarchy/</link>
      <pubDate>Mon, 23 Sep 2024 03:33:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/memory-architecture/memory-hierarchy/</guid>
      <description>컴퓨터 시스템에서 데이터 접근의 효율성을 극대화하고 전체 시스템 성능을 향상시키기 위해 설계된 구조</description>
    </item>
  </channel>
</rss>
