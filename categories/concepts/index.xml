<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Concepts on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/concepts/</link>
    <description>Recent content in Concepts on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.141.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 17 Jan 2025 09:07:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/concepts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Iteration vs Recursion</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/iteration-vs-recursion/</link>
      <pubDate>Mon, 13 Jan 2025 11:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/iteration-vs-recursion/</guid>
      <description>Iteration과 Recursion은 프로그래밍에서 반복적인 작업을 수행하는 두 가지 주요 방식이다.</description>
    </item>
    <item>
      <title>Process vs Thread vs Coroutine</title>
      <link>https://buenhyden.github.io/til/2024/10/process-vs-thread-vs-coroutine/</link>
      <pubDate>Mon, 14 Oct 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/process-vs-thread-vs-coroutine/</guid>
      <description>Process란 실행 중인 프로그램의 인스턴스를 이야기하며, Thread란 프로세스 내에서 실행되는 더 작은 실행 단위를 말한다.</description>
    </item>
    <item>
      <title>Callback vs Promise vs Async/Await</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/concepts/callback-vs-promise-vs-async-await/</link>
      <pubDate>Fri, 17 Jan 2025 09:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/concepts/callback-vs-promise-vs-async-await/</guid>
      <description>JavaScript의 비동기 처리 방식</description>
    </item>
    <item>
      <title>프록시(Proxy)</title>
      <link>https://buenhyden.github.io/posts/networking-and-communications/concepts/proxy/</link>
      <pubDate>Tue, 14 Jan 2025 08:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-and-communications/concepts/proxy/</guid>
      <description>프록시 서버는 클라이언트의 요청을 받아 대신 서버에 접속하여 데이터를 주고받는 중개자 역할을 한다.</description>
    </item>
    <item>
      <title>Exception Handling</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/exception-handling/</link>
      <pubDate>Sat, 11 Jan 2025 15:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/exception-handling/</guid>
      <description>예외 처리(Exception Handling)는 프로그램 실행 중 발생할 수 있는 예기치 못한 상황을 관리하는 중요한 프로그래밍 개념이다.</description>
    </item>
    <item>
      <title>조건문 (Conditional Statements)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/conditional-statements/</link>
      <pubDate>Sat, 11 Jan 2025 15:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/conditional-statements/</guid>
      <description>조건문(Conditional Statements)은 프로그램의 흐름을 제어하는 중요한 구조이다.</description>
    </item>
    <item>
      <title>폴링(Polling)</title>
      <link>https://buenhyden.github.io/posts/networking-and-communications/concepts/polling/</link>
      <pubDate>Wed, 25 Dec 2024 16:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-and-communications/concepts/polling/</guid>
      <description>폴링(Polling)은 소프트웨어 개발에서 중요한 통신 기법으로, 클라이언트가 주기적으로 서버에 데이터나 상태 변경을 요청하는 방식이다.</description>
    </item>
    <item>
      <title>스트리밍 (Streaming)</title>
      <link>https://buenhyden.github.io/posts/networking-and-communications/concepts/streaming/</link>
      <pubDate>Fri, 20 Dec 2024 06:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-and-communications/concepts/streaming/</guid>
      <description>스트리밍은 인터넷을 통해 오디오, 비디오 및 기타 콘텐츠를 실시간으로 전송하고 재생하는 기술</description>
    </item>
    <item>
      <title>Event Loop</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/concepts/event-loop/</link>
      <pubDate>Tue, 17 Dec 2024 12:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/concepts/event-loop/</guid>
      <description>이벤트 루프(Event Loop)는 자바스크립트의 비동기 작업을 관리하고 실행하는 핵심 메커니즘으로, 싱글 스레드 언어인 자바스크립트가 비동기적으로 동작할 수 있게 해주는 중요한 요소이다.</description>
    </item>
    <item>
      <title>로드밸런싱 (LoadBalancing)</title>
      <link>https://buenhyden.github.io/posts/networking-and-communications/concepts/loadbalancing/</link>
      <pubDate>Tue, 10 Dec 2024 02:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-and-communications/concepts/loadbalancing/</guid>
      <description>여러 서버나 네트워크 리소스에 작업량을 분산시켜주는 방법으로 이를 통해 특정 서버에 부하가 집중되는 것을 방지하고, 전체 시스템의 안정성과 가용성을 높일 수 있다.</description>
    </item>
    <item>
      <title>jsdoc</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/concepts/jsdoc/</link>
      <pubDate>Mon, 02 Dec 2024 11:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/concepts/jsdoc/</guid>
      <description>JSDoc은 JavaScript 소스 코드에 대한 API 문서를 생성하기 위한 마크업 언어.</description>
    </item>
    <item>
      <title>가비지 컬렉션 (Garbage Collection, GC)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/garbage-collection/</link>
      <pubDate>Sun, 01 Dec 2024 10:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/garbage-collection/</guid>
      <description>프로그래밍 언어의 메모리 관리 기법 중 하나로, 프로그램이 동적으로 할당했던 메모리 영역 중에서 더 이상 사용하지 않는 영역을 자동으로 찾아내어 해제하는 기능</description>
    </item>
    <item>
      <title>반복문(Iteration)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/iteration/</link>
      <pubDate>Tue, 12 Nov 2024 15:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/iteration/</guid>
      <description>특정 코드 블록을 여러 번 실행하는 제어 구조이다.</description>
    </item>
    <item>
      <title>재귀 (Recursion)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/recursion/</link>
      <pubDate>Tue, 12 Nov 2024 15:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/recursion/</guid>
      <description>재귀(Recursion)는 컴퓨터 프로그래밍에서 함수가 자기 자신을 호출하여 문제를 해결하는 방식으로, 큰 문제를 동일한 형태의 작은 문제로 나누어 해결하는 방법이다.</description>
    </item>
    <item>
      <title>프로미스(Promise)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/concepts/promise/</link>
      <pubDate>Tue, 12 Nov 2024 14:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/concepts/promise/</guid>
      <description>자바스크립트에서 비동기 처리를 위해 사용되는 객체</description>
    </item>
    <item>
      <title>Callback Function (콜백 함수)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/callback-function/</link>
      <pubDate>Tue, 12 Nov 2024 12:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/callback-function/</guid>
      <description>프로그래밍에서 다른 함수의 인수로 전달되어 특정 작업이 완료된 후 호출되는 함수</description>
    </item>
    <item>
      <title>동기(Synchronous)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/synchronous/</link>
      <pubDate>Tue, 12 Nov 2024 00:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/synchronous/</guid>
      <description>프로그래밍에서 작업을 처리하는 두 가지 주요 방식</description>
    </item>
    <item>
      <title>비동기(Asynchronous)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/asynchronous/</link>
      <pubDate>Tue, 12 Nov 2024 00:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/asynchronous/</guid>
      <description>프로그래밍에서 작업을 처리하는 두 가지 주요 방식</description>
    </item>
    <item>
      <title>Data Transmission</title>
      <link>https://buenhyden.github.io/posts/networking-and-communications/concepts/data-transmission/</link>
      <pubDate>Tue, 29 Oct 2024 09:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-and-communications/concepts/data-transmission/</guid>
      <description>데이터 전송 및 처리 방식은 다양한 기준에 따라 분류되며, 각 방식은 특정한 통신 환경과 요구 사항에 맞게 선택된다.</description>
    </item>
    <item>
      <title>Docstring</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/concepts/docstring/</link>
      <pubDate>Tue, 29 Oct 2024 03:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/concepts/docstring/</guid>
      <description>python에서 함수, 클래스, 모듈에 대한 문서화를 위해 사용되는 문자열</description>
    </item>
    <item>
      <title>Generator and Iterator</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/concepts/generator-and-iterator/</link>
      <pubDate>Thu, 24 Oct 2024 10:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/concepts/generator-and-iterator/</guid>
      <description>이터레이터는 값을 차례대로 반환하는 객체로, `__iter__()`와 `__next__()` 메서드를 구현한다.  제너레이터는 `yield` 키워드를 사용하여 값을 하나씩 반환하는 함수로, 이터레이터를 생성한다.</description>
    </item>
    <item>
      <title>Python GIL</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/concepts/python-gil/</link>
      <pubDate>Mon, 21 Oct 2024 08:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/concepts/python-gil/</guid>
      <description>Python 객체에 대한 접근을 제어하는 뮤텍스(mutex)로, 한 번에 하나의 스레드만 Python 바이트코드를 실행할 수 있도록 보장</description>
    </item>
    <item>
      <title>코루틴(Coroutine)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/coroutine/</link>
      <pubDate>Mon, 14 Oct 2024 06:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/coroutine/</guid>
      <description>코루틴은 &amp;#34;협력적인 루틴&amp;#34;이라는 의미로, 여러 작업이 협력하여 실행되는 방식을 말한다. 일반 함수와 달리, 코루틴은 실행 중간에 일시 중단되었다가 나중에 다시 재개될 수 있다.</description>
    </item>
    <item>
      <title>encapsulation and decapsulation</title>
      <link>https://buenhyden.github.io/posts/networking-and-communications/concepts/encapsulation-and-decapsulation/</link>
      <pubDate>Sun, 06 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-and-communications/concepts/encapsulation-and-decapsulation/</guid>
      <description>데이터에 헤더 (Header) 를 붙이고 아래 계층에 보내는 것을 캡슐화 (Encapsulation), 데이터에 헤더를 제거하고 위 계층에 보내는 것을 역캡슐화 (Decapsulation)</description>
    </item>
    <item>
      <title>인터프리터(Interpreter)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/interpreter/</link>
      <pubDate>Sat, 28 Sep 2024 05:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/interpreter/</guid>
      <description>프로그래밍 언어의 소스 코드를 직접 실행하는 프로그램 또는 환경</description>
    </item>
    <item>
      <title>컴파일러(Compiler)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/compiler/</link>
      <pubDate>Sat, 28 Sep 2024 05:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/compiler/</guid>
      <description>우리가 작성한 프로그래밍 언어(고급 언어)를 컴퓨터가 이해할 수 있는 기계어(저급 언어)로 번역해주는 특별한 프로그램</description>
    </item>
  </channel>
</rss>
