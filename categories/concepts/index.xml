<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Concepts on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/concepts/</link>
    <description>Recent content in Concepts on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Wed, 29 Jan 2025 03:18:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/concepts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Iteration vs Recursion</title>
      <link>https://buenhyden.github.io/til/2024/09/28/iteration-vs-recursion/</link>
      <pubDate>Sat, 28 Sep 2024 11:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/09/28/iteration-vs-recursion/</guid>
      <description>Iteration과 Recursion은 프로그래밍에서 반복적인 작업을 수행하는 두 가지 주요 방식이다.</description>
    </item>
    <item>
      <title>Process vs Thread vs Coroutine</title>
      <link>https://buenhyden.github.io/til/2024/10/18/process-vs-thread-vs-coroutine/</link>
      <pubDate>Fri, 18 Oct 2024 08:30:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/18/process-vs-thread-vs-coroutine/</guid>
      <description>Process란 실행 중인 프로그램의 인스턴스를 이야기하며, Thread란 프로세스 내에서 실행되는 더 작은 실행 단위를 말한다.</description>
    </item>
    <item>
      <title>Callback vs Promise vs Async/Await</title>
      <link>https://buenhyden.github.io/til/2024/11/08/callback-vs-promise-vs-async-await/</link>
      <pubDate>Fri, 08 Nov 2024 09:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/11/08/callback-vs-promise-vs-async-await/</guid>
      <description>JavaScript의 비동기 처리 방식</description>
    </item>
    <item>
      <title>Keywords</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/concepts/keywords/</link>
      <pubDate>Wed, 29 Jan 2025 03:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/concepts/keywords/</guid>
      <description>&lt;h2 id=&#34;keywords&#34;&gt;Keywords&lt;/h2&gt;
&lt;p&gt;키워드들은 JavaScript 프로그래밍의 기본 구성 요소이며, ECMAScript 표준의 일부이다.&lt;br&gt;
각 키워드는 특정한 프로그래밍 목적을 위해 설계되었으며, 이들을 올바르게 이해하고 사용하는 것이 효과적인 JavaScript 프로그래밍의 기초가 된다.&lt;/p&gt;
&lt;h3 id=&#34;선언-관련-키워드&#34;&gt;선언 관련 키워드&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;키워드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
          &lt;th&gt;예시&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;var&lt;/td&gt;
          &lt;td&gt;변수 선언 (함수 스코프)&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;var name = &amp;quot;John&amp;quot;;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;let&lt;/td&gt;
          &lt;td&gt;변수 선언 (블록 스코프)&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;let age = 25;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;const&lt;/td&gt;
          &lt;td&gt;상수 선언 (재할당 불가)&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;const PI = 3.14;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;function&lt;/td&gt;
          &lt;td&gt;함수 선언&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;function add(a, b) { return a + b; }&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;class&lt;/td&gt;
          &lt;td&gt;클래스 선언&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;class Person { constructor() {} }&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;조건문-및-반복문-키워드&#34;&gt;조건문 및 반복문 키워드&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;키워드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
          &lt;th&gt;예시&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;if&lt;/td&gt;
          &lt;td&gt;조건문&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;if (age &amp;gt; 18) { console.log(&amp;quot;Adult&amp;quot;); }&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;else&lt;/td&gt;
          &lt;td&gt;if문의 대안 조건&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;else { console.log(&amp;quot;Minor&amp;quot;); }&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;switch&lt;/td&gt;
          &lt;td&gt;다중 분기 조건문&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;switch (value) { case 1: break; }&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;case&lt;/td&gt;
          &lt;td&gt;switch문의 각 경우&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;case &amp;quot;A&amp;quot;: return &amp;quot;Excellent&amp;quot;;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;default&lt;/td&gt;
          &lt;td&gt;switch문의 기본 경우&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;default: return &amp;quot;Invalid&amp;quot;;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;for&lt;/td&gt;
          &lt;td&gt;반복문&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;for (let i = 0; i &amp;lt; 5; i++) {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;while&lt;/td&gt;
          &lt;td&gt;조건기반 반복문&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;while (count &amp;lt; 10) {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;do&lt;/td&gt;
          &lt;td&gt;최소 한번 실행되는 반복문&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;do { count++; } while (count &amp;lt; 5);&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;제어-흐름-키워드&#34;&gt;제어 흐름 키워드&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;키워드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
          &lt;th&gt;예시&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;break&lt;/td&gt;
          &lt;td&gt;반복문/switch문 탈출&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;break;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;continue&lt;/td&gt;
          &lt;td&gt;현재 반복 건너뛰기&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;continue;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;return&lt;/td&gt;
          &lt;td&gt;함수에서 값 반환&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;return result;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;throw&lt;/td&gt;
          &lt;td&gt;예외 발생&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;throw new Error(&amp;quot;Invalid input&amp;quot;);&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;try&lt;/td&gt;
          &lt;td&gt;예외처리 시도 블록&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;try { riskyOperation(); }&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;catch&lt;/td&gt;
          &lt;td&gt;예외처리 블록&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;catch (error) { handleError(error); }&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;finally&lt;/td&gt;
          &lt;td&gt;예외 발생 여부와 관계없이 실행&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;finally { cleanup(); }&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;객체-지향-프로그래밍-키워드&#34;&gt;객체 지향 프로그래밍 키워드&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;키워드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
          &lt;th&gt;예시&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;this&lt;/td&gt;
          &lt;td&gt;현재 객체 참조&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;this.name = name;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;super&lt;/td&gt;
          &lt;td&gt;부모 클래스 참조&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;super(name);&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;new&lt;/td&gt;
          &lt;td&gt;객체 생성&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;new Date();&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;extends&lt;/td&gt;
          &lt;td&gt;클래스 상속&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;class Student extends Person {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;static&lt;/td&gt;
          &lt;td&gt;클래스 레벨 멤버 정의&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;static count = 0;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;get&lt;/td&gt;
          &lt;td&gt;getter 메서드 정의&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;get name() { return this._name; }&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;set&lt;/td&gt;
          &lt;td&gt;setter 메서드 정의&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;set name(value) { this._name = value; }&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;모듈-및-패키지-키워드&#34;&gt;모듈 및 패키지 키워드&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;키워드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
          &lt;th&gt;예시&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;import&lt;/td&gt;
          &lt;td&gt;모듈 가져오기&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;import { useState } from &#39;react&#39;;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;export&lt;/td&gt;
          &lt;td&gt;모듈 내보내기&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;export default class MyComponent {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;from&lt;/td&gt;
          &lt;td&gt;모듈 출처 지정&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;import React from &#39;react&#39;;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;as&lt;/td&gt;
          &lt;td&gt;모듈 별칭 지정&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;import * as utils from &#39;./utils&#39;;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;기타-키워드&#34;&gt;기타 키워드&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;키워드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
          &lt;th&gt;예시&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;typeof&lt;/td&gt;
          &lt;td&gt;데이터 타입 확인&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;typeof value === &amp;quot;string&amp;quot;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;instanceof&lt;/td&gt;
          &lt;td&gt;객체 타입 확인&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;obj instanceof Array&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;void&lt;/td&gt;
          &lt;td&gt;undefined 값 반환&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;void function() {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;delete&lt;/td&gt;
          &lt;td&gt;객체 프로퍼티 삭제&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;delete object.property&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;in&lt;/td&gt;
          &lt;td&gt;프로퍼티 존재 확인&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;&amp;quot;name&amp;quot; in object&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;debugger&lt;/td&gt;
          &lt;td&gt;디버깅 중단점&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;debugger;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;예약된-리터럴&#34;&gt;예약된 리터럴&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;키워드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
          &lt;th&gt;예시&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;true&lt;/td&gt;
          &lt;td&gt;논리 참 값&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;let isActive = true;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;false&lt;/td&gt;
          &lt;td&gt;논리 거짓 값&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;let isDisabled = false;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;null&lt;/td&gt;
          &lt;td&gt;값이 없음을 나타내는 객체&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;let value = null;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;undefined&lt;/td&gt;
          &lt;td&gt;정의되지 않은 값&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;let value = undefined;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;엄격-모드-키워드&#34;&gt;엄격 모드 키워드&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;키워드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
          &lt;th&gt;예시&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;ldquo;use strict&amp;rdquo;&lt;/td&gt;
          &lt;td&gt;엄격 모드 선언&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;&amp;quot;use strict&amp;quot;; // 코드의 시작 부분&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Java Keywords</title>
      <link>https://buenhyden.github.io/posts/programming-languages/java/concepts/keywords/</link>
      <pubDate>Wed, 29 Jan 2025 02:56:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/java/concepts/keywords/</guid>
      <description>&lt;h2 id=&#34;keyword&#34;&gt;Keyword&lt;/h2&gt;
&lt;p&gt;키워드들은 Java 언어의 기본 구성 요소이며, 각각이 특정한 프로그래밍 목적을 위해 설계되었다.&lt;br&gt;
변수, 메서드, 클래스, 제어문 등 다양한 요소를 정의하고 제어하는 데 필수적인 역할을 한다.&lt;br&gt;
이들을 올바르게 이해하고 사용하는 것이 효과적인 Java 프로그래밍의 기초가 된다.&lt;/p&gt;
&lt;p&gt;각 키워드의 특징과 주의사항:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;모든 키워드는 소문자로만 작성된다.&lt;/li&gt;
&lt;li&gt;키워드는 식별자(변수명, 메서드명 등)로 사용할 수 없다.&lt;/li&gt;
&lt;li&gt;일부 키워드는 특정 컨텍스트에서만 의미를 가진다.&lt;/li&gt;
&lt;li&gt;예약어 중 일부는 현재 사용되지 않지만 향후 사용을 위해 예약되어 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;데이터-타입-키워드&#34;&gt;데이터 타입 키워드&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;키워드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
          &lt;th&gt;예시&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;byte&lt;/td&gt;
          &lt;td&gt;8비트 정수형 (-128 ~ 127)&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;byte b = 100;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;short&lt;/td&gt;
          &lt;td&gt;16비트 정수형 (-32,768 ~ 32,767)&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;short s = 1000;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;int&lt;/td&gt;
          &lt;td&gt;32비트 정수형&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;int i = 10000;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;long&lt;/td&gt;
          &lt;td&gt;64비트 정수형&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;long l = 100000L;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;float&lt;/td&gt;
          &lt;td&gt;32비트 단정도 실수형&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;float f = 3.14f;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;double&lt;/td&gt;
          &lt;td&gt;64비트 배정도 실수형&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;double d = 3.14159;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;boolean&lt;/td&gt;
          &lt;td&gt;논리형 (true/false)&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;boolean flag = true;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;char&lt;/td&gt;
          &lt;td&gt;16비트 유니코드 문자&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;char c = &#39;A&#39;;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;void&lt;/td&gt;
          &lt;td&gt;반환값이 없음을 나타냄&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;void method() {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;제어문-키워드&#34;&gt;제어문 키워드&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;키워드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
          &lt;th&gt;예시&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;if&lt;/td&gt;
          &lt;td&gt;조건문 시작&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;if (x &amp;gt; 0) {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;else&lt;/td&gt;
          &lt;td&gt;if문의 대안 경로&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;else {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;switch&lt;/td&gt;
          &lt;td&gt;다중 분기문 시작&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;switch(value) {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;case&lt;/td&gt;
          &lt;td&gt;switch문의 각 경우&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;case 1:&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;default&lt;/td&gt;
          &lt;td&gt;switch문의 기본 경우&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;default:&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;for&lt;/td&gt;
          &lt;td&gt;반복문&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;for (int i = 0; i &amp;lt; n; i++)&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;while&lt;/td&gt;
          &lt;td&gt;조건 기반 반복문&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;while (condition)&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;do&lt;/td&gt;
          &lt;td&gt;do-while 반복문 시작&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;do {} while();&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;break&lt;/td&gt;
          &lt;td&gt;반복문/switch문 탈출&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;break;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;continue&lt;/td&gt;
          &lt;td&gt;현재 반복 건너뛰기&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;continue;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;return&lt;/td&gt;
          &lt;td&gt;메소드에서 값 반환/종료&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;return value;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;클래스-관련-키워드&#34;&gt;클래스 관련 키워드&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;키워드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
          &lt;th&gt;예시&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;class&lt;/td&gt;
          &lt;td&gt;클래스 정의&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;public class MyClass {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;interface&lt;/td&gt;
          &lt;td&gt;인터페이스 정의&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;interface MyInterface {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;extends&lt;/td&gt;
          &lt;td&gt;클래스/인터페이스 상속&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;class Child extends Parent {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;implements&lt;/td&gt;
          &lt;td&gt;인터페이스 구현&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;class MyClass implements Interface {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;enum&lt;/td&gt;
          &lt;td&gt;열거형 정의&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;enum Direction {NORTH, SOUTH}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;this&lt;/td&gt;
          &lt;td&gt;현재 인스턴스 참조&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;this.value = value;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;super&lt;/td&gt;
          &lt;td&gt;상위 클래스 참조&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;super.method();&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;new&lt;/td&gt;
          &lt;td&gt;객체 생성&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;new Object();&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;instanceof&lt;/td&gt;
          &lt;td&gt;객체 타입 검사&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;obj instanceof String&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;접근-제어-키워드&#34;&gt;접근 제어 키워드&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;키워드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
          &lt;th&gt;예시&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;public&lt;/td&gt;
          &lt;td&gt;전체 접근 허용&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;public class Public {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;private&lt;/td&gt;
          &lt;td&gt;클래스 내부만 접근 가능&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;private int value;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;protected&lt;/td&gt;
          &lt;td&gt;패키지와 자식 클래스 접근 가능&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;protected void method() {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;default&lt;/td&gt;
          &lt;td&gt;패키지 내부만 접근 가능&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;int value;&lt;/code&gt; (키워드 생략)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;제어자-키워드&#34;&gt;제어자 키워드&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;키워드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
          &lt;th&gt;예시&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;static&lt;/td&gt;
          &lt;td&gt;클래스 레벨 멤버 정의&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;static int count;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;final&lt;/td&gt;
          &lt;td&gt;변경 불가 선언&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;final int MAX = 100;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;abstract&lt;/td&gt;
          &lt;td&gt;추상 클래스/메소드 선언&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;abstract class Abstract {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;synchronized&lt;/td&gt;
          &lt;td&gt;스레드 동기화&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;synchronized void method() {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;volatile&lt;/td&gt;
          &lt;td&gt;메모리 직접 접근 변수&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;volatile boolean flag;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;transient&lt;/td&gt;
          &lt;td&gt;직렬화 제외 필드&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;transient int temp;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;native&lt;/td&gt;
          &lt;td&gt;네이티브 메소드 선언&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;native void method();&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;strictfp&lt;/td&gt;
          &lt;td&gt;엄격한 부동소수점 연산&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;strictfp class Math {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;예외-처리-키워드&#34;&gt;예외 처리 키워드&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;키워드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
          &lt;th&gt;예시&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;try&lt;/td&gt;
          &lt;td&gt;예외 발생 가능 블록&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;try {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;catch&lt;/td&gt;
          &lt;td&gt;예외 처리 블록&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;catch (Exception e) {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;finally&lt;/td&gt;
          &lt;td&gt;항상 실행되는 블록&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;finally {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;throw&lt;/td&gt;
          &lt;td&gt;예외 발생&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;throw new Exception();&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;throws&lt;/td&gt;
          &lt;td&gt;예외 선언&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;void method() throws Exception {}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;assert&lt;/td&gt;
          &lt;td&gt;조건 검증&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;assert x &amp;gt; 0;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;패키지-관련-키워드&#34;&gt;패키지 관련 키워드&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;키워드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
          &lt;th&gt;예시&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;package&lt;/td&gt;
          &lt;td&gt;패키지 선언&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;package com.example;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;import&lt;/td&gt;
          &lt;td&gt;클래스 임포트&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;import java.util.List;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;리터럴-키워드&#34;&gt;리터럴 키워드&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;키워드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
          &lt;th&gt;예시&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;true&lt;/td&gt;
          &lt;td&gt;논리 참 값&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;boolean t = true;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;false&lt;/td&gt;
          &lt;td&gt;논리 거짓 값&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;boolean f = false;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;null&lt;/td&gt;
          &lt;td&gt;참조 없음&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;Object obj = null;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;예약된-키워드-미사용&#34;&gt;예약된 키워드 (미사용)&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;키워드&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;const&lt;/td&gt;
          &lt;td&gt;상수 (사용되지 않음)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;goto&lt;/td&gt;
          &lt;td&gt;이동 (사용되지 않음)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>프로미스(Promise)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/concepts/promise/</link>
      <pubDate>Tue, 05 Nov 2024 14:54:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/concepts/promise/</guid>
      <description>자바스크립트에서 비동기 처리를 위해 사용되는 객체</description>
    </item>
    <item>
      <title>Event Loop</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/concepts/event-loop/</link>
      <pubDate>Tue, 05 Nov 2024 12:44:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/concepts/event-loop/</guid>
      <description>이벤트 루프(Event Loop)는 자바스크립트의 비동기 작업을 관리하고 실행하는 핵심 메커니즘으로, 싱글 스레드 언어인 자바스크립트가 비동기적으로 동작할 수 있게 해주는 중요한 요소이다.</description>
    </item>
    <item>
      <title>jsdoc</title>
      <link>https://buenhyden.github.io/posts/programming-languages/javascript/concepts/jsdoc/</link>
      <pubDate>Tue, 05 Nov 2024 11:41:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/javascript/concepts/jsdoc/</guid>
      <description>JSDoc은 JavaScript 소스 코드에 대한 API 문서를 생성하기 위한 마크업 언어.</description>
    </item>
    <item>
      <title>Generator and Iterator</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/concepts/generator-and-iterator/</link>
      <pubDate>Sat, 02 Nov 2024 10:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/concepts/generator-and-iterator/</guid>
      <description>이터레이터는 값을 차례대로 반환하는 객체로, `__iter__()`와 `__next__()` 메서드를 구현한다.  제너레이터는 `yield` 키워드를 사용하여 값을 하나씩 반환하는 함수로, 이터레이터를 생성한다.</description>
    </item>
    <item>
      <title>Python GIL</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/concepts/python-gil/</link>
      <pubDate>Sat, 02 Nov 2024 08:18:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/concepts/python-gil/</guid>
      <description>Python 객체에 대한 접근을 제어하는 뮤텍스(mutex)로, 한 번에 하나의 스레드만 Python 바이트코드를 실행할 수 있도록 보장</description>
    </item>
    <item>
      <title>Docstring</title>
      <link>https://buenhyden.github.io/posts/programming-languages/python/concepts/docstring/</link>
      <pubDate>Sat, 02 Nov 2024 03:07:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/python/concepts/docstring/</guid>
      <description>python에서 함수, 클래스, 모듈에 대한 문서화를 위해 사용되는 문자열</description>
    </item>
    <item>
      <title>폴링(Polling)</title>
      <link>https://buenhyden.github.io/til/2024/10/26/polling/</link>
      <pubDate>Sat, 26 Oct 2024 16:50:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/26/polling/</guid>
      <description>폴링(Polling)은 소프트웨어 개발에서 중요한 통신 기법으로, 클라이언트가 주기적으로 서버에 데이터나 상태 변경을 요청하는 방식이다.</description>
    </item>
    <item>
      <title>Data Transmission</title>
      <link>https://buenhyden.github.io/til/2024/10/26/data-transmission/</link>
      <pubDate>Sat, 26 Oct 2024 09:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/26/data-transmission/</guid>
      <description>데이터 전송 및 처리 방식은 다양한 기준에 따라 분류되며, 각 방식은 특정한 통신 환경과 요구 사항에 맞게 선택된다.</description>
    </item>
    <item>
      <title>스트리밍 (Streaming)</title>
      <link>https://buenhyden.github.io/til/2024/10/26/streaming/</link>
      <pubDate>Sat, 26 Oct 2024 06:48:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/26/streaming/</guid>
      <description>스트리밍은 인터넷을 통해 오디오, 비디오 및 기타 콘텐츠를 실시간으로 전송하고 재생하는 기술</description>
    </item>
    <item>
      <title>프록시(Proxy)</title>
      <link>https://buenhyden.github.io/posts/networking-and-communications/concepts/proxy/</link>
      <pubDate>Tue, 22 Oct 2024 08:47:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-and-communications/concepts/proxy/</guid>
      <description>프록시 서버는 클라이언트의 요청을 받아 대신 서버에 접속하여 데이터를 주고받는 중개자 역할을 한다.</description>
    </item>
    <item>
      <title>로드밸런싱 (LoadBalancing)</title>
      <link>https://buenhyden.github.io/posts/networking-and-communications/concepts/loadbalancing/</link>
      <pubDate>Tue, 22 Oct 2024 02:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-and-communications/concepts/loadbalancing/</guid>
      <description>여러 서버나 네트워크 리소스에 작업량을 분산시켜주는 방법으로 이를 통해 특정 서버에 부하가 집중되는 것을 방지하고, 전체 시스템의 안정성과 가용성을 높일 수 있다.</description>
    </item>
    <item>
      <title>encapsulation and decapsulation</title>
      <link>https://buenhyden.github.io/posts/networking-and-communications/concepts/encapsulation-and-decapsulation/</link>
      <pubDate>Tue, 22 Oct 2024 02:03:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/networking-and-communications/concepts/encapsulation-and-decapsulation/</guid>
      <description>데이터에 헤더 (Header) 를 붙이고 아래 계층에 보내는 것을 캡슐화 (Encapsulation), 데이터에 헤더를 제거하고 위 계층에 보내는 것을 역캡슐화 (Decapsulation)</description>
    </item>
    <item>
      <title>Callback Function (콜백 함수)</title>
      <link>https://buenhyden.github.io/til/2024/10/18/callback-function/</link>
      <pubDate>Fri, 18 Oct 2024 12:45:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/18/callback-function/</guid>
      <description>프로그래밍에서 다른 함수의 인수로 전달되어 특정 작업이 완료된 후 호출되는 함수</description>
    </item>
    <item>
      <title>코루틴(Coroutine)</title>
      <link>https://buenhyden.github.io/til/2024/10/18/coroutine/</link>
      <pubDate>Fri, 18 Oct 2024 06:52:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/18/coroutine/</guid>
      <description>코루틴은 &amp;#34;협력적인 루틴&amp;#34;이라는 의미로, 여러 작업이 협력하여 실행되는 방식을 말한다. 일반 함수와 달리, 코루틴은 실행 중간에 일시 중단되었다가 나중에 다시 재개될 수 있다.</description>
    </item>
    <item>
      <title>동기(Synchronous)</title>
      <link>https://buenhyden.github.io/til/2024/10/18/synchronous/</link>
      <pubDate>Fri, 18 Oct 2024 00:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/18/synchronous/</guid>
      <description>프로그래밍에서 작업을 처리하는 두 가지 주요 방식</description>
    </item>
    <item>
      <title>비동기(Asynchronous)</title>
      <link>https://buenhyden.github.io/til/2024/10/18/asynchronous/</link>
      <pubDate>Fri, 18 Oct 2024 00:57:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/til/2024/10/18/asynchronous/</guid>
      <description>프로그래밍에서 작업을 처리하는 두 가지 주요 방식</description>
    </item>
    <item>
      <title>Exception Handling</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/exception-handling/</link>
      <pubDate>Sat, 28 Sep 2024 15:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/exception-handling/</guid>
      <description>예외 처리(Exception Handling)는 프로그램 실행 중 발생할 수 있는 예기치 못한 상황을 관리하는 중요한 프로그래밍 개념이다.</description>
    </item>
    <item>
      <title>조건문 (Conditional Statements)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/conditional-statements/</link>
      <pubDate>Sat, 28 Sep 2024 15:08:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/conditional-statements/</guid>
      <description>조건문(Conditional Statements)은 프로그램의 흐름을 제어하는 중요한 구조이다.</description>
    </item>
    <item>
      <title>반복문(Iteration)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/iteration/</link>
      <pubDate>Sat, 28 Sep 2024 15:06:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/iteration/</guid>
      <description>특정 코드 블록을 여러 번 실행하는 제어 구조이다.</description>
    </item>
    <item>
      <title>재귀 (Recursion)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/recursion/</link>
      <pubDate>Sat, 28 Sep 2024 15:05:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/recursion/</guid>
      <description>재귀(Recursion)는 컴퓨터 프로그래밍에서 함수가 자기 자신을 호출하여 문제를 해결하는 방식으로, 큰 문제를 동일한 형태의 작은 문제로 나누어 해결하는 방법이다.</description>
    </item>
    <item>
      <title>가비지 컬렉션 (Garbage Collection, GC)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/garbage-collection/</link>
      <pubDate>Sat, 28 Sep 2024 10:19:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/garbage-collection/</guid>
      <description>프로그래밍 언어의 메모리 관리 기법 중 하나로, 프로그램이 동적으로 할당했던 메모리 영역 중에서 더 이상 사용하지 않는 영역을 자동으로 찾아내어 해제하는 기능</description>
    </item>
    <item>
      <title>인터프리터(Interpreter)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/interpreter/</link>
      <pubDate>Sat, 28 Sep 2024 05:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/interpreter/</guid>
      <description>프로그래밍 언어의 소스 코드를 직접 실행하는 프로그램 또는 환경</description>
    </item>
    <item>
      <title>컴파일러(Compiler)</title>
      <link>https://buenhyden.github.io/posts/programming-languages/concepts/compiler/</link>
      <pubDate>Sat, 28 Sep 2024 05:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/programming-languages/concepts/compiler/</guid>
      <description>우리가 작성한 프로그래밍 언어(고급 언어)를 컴퓨터가 이해할 수 있는 기계어(저급 언어)로 번역해주는 특별한 프로그램</description>
    </item>
  </channel>
</rss>
