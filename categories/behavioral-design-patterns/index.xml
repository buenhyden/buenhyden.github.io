<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Behavioral Design Patterns on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/behavioral-design-patterns/</link>
    <description>Recent content in Behavioral Design Patterns on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.142.0</generator>
    <language>en</language>
    <lastBuildDate>Tue, 17 Dec 2024 08:27:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/behavioral-design-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Interpreter Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/interpreter-pattern/</link>
      <pubDate>Tue, 17 Dec 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/interpreter-pattern/</guid>
      <description>&lt;h2 id=&#34;interpreter-pattern&#34;&gt;Interpreter Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Visitor Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/visitor-pattern/</link>
      <pubDate>Tue, 17 Dec 2024 08:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/visitor-pattern/</guid>
      <description>Visitor Pattern은 객체 구조와 알고리즘을 분리하는 행위 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Chain of Responsibility</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/chain-of-responsibility/</link>
      <pubDate>Tue, 17 Dec 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/chain-of-responsibility/</guid>
      <description>Chain of Responsibility 패턴은 요청을 보내는 객체와 이를 처리하는 객체들 간의 결합도를 낮추기 위한 행위 디자인 패턴이다.</description>
    </item>
    <item>
      <title>Mediator Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/mediator-pattern/</link>
      <pubDate>Tue, 17 Dec 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/mediator-pattern/</guid>
      <description>&lt;h2 id=&#34;mediator-pattern&#34;&gt;Mediator Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Memento Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/memento-pattern/</link>
      <pubDate>Tue, 17 Dec 2024 08:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/memento-pattern/</guid>
      <description>&lt;h2 id=&#34;memento-pattern&#34;&gt;Memento Pattern&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참고-및-출처&#34;&gt;참고 및 출처&lt;/h2&gt;</description>
    </item>
    <item>
      <title>Command Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/command-pattern/</link>
      <pubDate>Sun, 13 Oct 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/command-pattern/</guid>
      <description>요청을 객체의 형태로 캡슐화하여 나중에 사용할 수 있도록 하는 행동 디자인 패턴</description>
    </item>
    <item>
      <title>State Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/state-pattern/</link>
      <pubDate>Sun, 13 Oct 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/state-pattern/</guid>
      <description>객체의 내부 상태가 변경될 때 객체의 행동이 변경되도록 하는 행동 디자인 패턴</description>
    </item>
    <item>
      <title>Strategy Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/strategy-pattern/</link>
      <pubDate>Sun, 13 Oct 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/strategy-pattern/</guid>
      <description>알고리즘의 집합을 정의하고, 각각을 캡슐화하여 교환 가능하게 만드는 행동 디자인 패턴</description>
    </item>
    <item>
      <title>Template Method Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/template-method-pattern/</link>
      <pubDate>Sun, 13 Oct 2024 06:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/template-method-pattern/</guid>
      <description>알고리즘의 구조를 정의하고 일부 단계를 서브클래스에서 구현할 수 있도록 하는 행동 디자인 패턴</description>
    </item>
    <item>
      <title>Observer Pattern</title>
      <link>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/observer-pattern/</link>
      <pubDate>Sun, 13 Oct 2024 06:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-design-and-architecture/software-design-patterns/behavioral-design-patterns/observer-pattern/</guid>
      <description>객체의 상태 변화를 관찰하는 관찰자들, 즉 옵저버들의 목록을 객체에 등록하여 상태 변화가 있을 때마다 메서드 등을 통해 객체가 직접 목록의 각 옵저버에게 통지하도록 하는 디자인 패턴</description>
    </item>
  </channel>
</rss>
