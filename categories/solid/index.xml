<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Solid on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/solid/</link>
    <description>Recent content in Solid on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.147.7</generator>
    <language>en</language>
    <lastBuildDate>Tue, 03 Jun 2025 05:43:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/solid/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Liskov Substitution Principle</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/solid/liskov-substitution-principle/</link>
      <pubDate>Tue, 03 Jun 2025 05:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/solid/liskov-substitution-principle/</guid>
      <description>Liskov Substitution Principle(리스코프 치환 원칙, LSP)은 상위 타입의 객체를 하위 타입의 객체로 치환해도 프로그램의 동작과 정확성이 변하지 않아야 한다는 원칙이다. 이는 상속과 다형성에서 하위 클래스가 상위 클래스의 계약과 기대를 반드시 준수해야 함을 의미하며, 안정적이고 확장 가능한 설계를 가능하게 한다.</description>
    </item>
    <item>
      <title>Open/Closed Principle</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/solid/open-closed-principle/</link>
      <pubDate>Tue, 03 Jun 2025 05:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/solid/open-closed-principle/</guid>
      <description>Open/Closed Principle 은 소프트웨어 구성 요소가 **확장에는 열려 (Open)** 있고, **수정에는 닫혀 (Closed)** 있어야 한다는 설계 원칙으로, 기존 코드를 변경하지 않고 새로운 기능을 추가할 수 있도록 유연한 구조를 지향한다.</description>
    </item>
    <item>
      <title>Single Responsibility Principle</title>
      <link>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/solid/single-responsibility-principle/</link>
      <pubDate>Tue, 03 Jun 2025 05:43:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-and-software-architecture/principles/design-principles/solid/single-responsibility-principle/</guid>
      <description>Single Responsibility Principle(SRP) 는 클래스나 모듈이 하나의 책임만을 가져야 한다는 객체 지향 설계 원칙이다. 이는 변경 이유를 하나로 제한하여 코드의 응집도를 높이고 유지보수를 용이하게 한다.</description>
    </item>
  </channel>
</rss>
