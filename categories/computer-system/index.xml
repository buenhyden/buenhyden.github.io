<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – Computer System</title><link>https://buenhyden.github.io/categories/computer-system/</link><description>Recent content in Computer System on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 14 Jan 2025 14:39:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/categories/computer-system/index.xml" rel="self" type="application/rss+xml"/><item><title>Computer Architecture</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/</link><pubDate>Sat, 21 Sep 2024 21:24:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/</guid><description>
&lt;h2>Computer Architecture&lt;span class="hx-absolute -hx-mt-20" id="computer-architecture">&lt;/span>
&lt;a href="#computer-architecture" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>컴퓨터 시스템의 구조와 설계를 정의하는 기본적인 프레임워크.&lt;br>
이는 컴퓨터 하드웨어와 소프트웨어의 설계 원칙과 기능을 포괄하며, 작업을 효율적이고 효과적으로 실행할 수 있도록 한다.&lt;/p>
&lt;p>&lt;img src="Computer_architecture_block_diagram.png" alt="" loading="lazy" />&lt;br>
_Source: &lt;a href="https://en.wikipedia.org/wiki/Computer_architecture" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Computer_architecture&lt;/a> _&lt;/p>
&lt;h3>주요 구성요소&lt;span class="hx-absolute -hx-mt-20" id="주요-구성요소">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ea%b5%ac%ec%84%b1%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>중앙 처리 장치 (CPU)&lt;br>
CPU는 컴퓨터의 &amp;lsquo;두뇌&amp;rsquo;로, 명령을 실행하는 역할을 한다.&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>; CPU 내부 동작 예시
MOV AX, 5 ; 레지스터에 값 저장
ADD AX, 3 ; 산술 연산 수행
MOV [BX], AX ; 메모리에 결과 저장&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>A. 제어 장치 (Control Unit):&lt;/p>
&lt;ul>
&lt;li>명령어 해석 및 실행 순서 제어&lt;/li>
&lt;li>각 하드웨어 구성요소 간의 데이터 흐름 조정&lt;/li>
&lt;li>파이프라이닝과 같은 고급 실행 기법 관리&lt;br>
B. 산술논리장치 (ALU):&lt;/li>
&lt;li>덧셈, 뺄셈 등의 산술 연산 수행&lt;/li>
&lt;li>AND, OR 등의 논리 연산 처리&lt;/li>
&lt;li>비교 연산 수행&lt;br>
C. 레지스터:&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>; 레지스터 사용 예시
MOV EAX, [memory] ; 데이터 레지스터
MOV EIP, label ; 프로그램 카운터
PUSH EBP ; 스택 포인터&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="2">
&lt;li>메모리&lt;br>
메모리는 데이터와 명령어를 저장하는 공간.&lt;br>
주요 유형은 다음과 같다:
&lt;ul>
&lt;li>주 메모리 (Primary Memory): RAM, 캐시 등&lt;/li>
&lt;li>보조 메모리 (Secondary Memory): 하드 드라이브, SSD 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>메모리는 계층적 구조로 이루어져 있으며, 각 층마다 특징이 다르다:&lt;/p>
&lt;p>A. 캐시 메모리:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 캐시 메모리 구조 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">CacheEntry&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">valid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">dirty&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">tag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">CACHE_LINE_SIZE&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>L1 캐시: CPU에 가장 가까운 고속 캐시&lt;/li>
&lt;li>L2 캐시: L1보다 크고 느린 중간 계층&lt;/li>
&lt;li>L3 캐시: 가장 큰 용량의 마지막 레벨 캐시&lt;/li>
&lt;/ul>
&lt;p>B. 주 메모리 (RAM):&lt;/p>
&lt;ul>
&lt;li>프로그램과 데이터의 실행 시 저장소&lt;/li>
&lt;li>휘발성 메모리로 전원이 꺼지면 데이터 소실&lt;/li>
&lt;/ul>
&lt;p>C. 가상 메모리:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 페이지 테이블 엔트리 구조
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">PageTableEntry&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">physicalPageNumber&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">present&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">readWrite&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">userSupervisor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">accessed&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">dirty&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="3">
&lt;li>
&lt;p>입출력 장치&lt;br>
키보드, 모니터, 프린터, 네트워크 인터페이스 등이 포함된다.&lt;/p>
&lt;p>입출력 시스템은 다음과 같은 메커니즘으로 작동한다:&lt;/p>
&lt;p>A. 인터럽트 기반 I/O:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 인터럽트 핸들러 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">interruptHandler&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 인터럽트 플래그 저장
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">saveInterruptState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 인터럽트 처리
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">handleInterrupt&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 상태 복원
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">restoreInterruptState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>B. DMA (Direct Memory Access):&lt;/p>
&lt;ul>
&lt;li>CPU 개입 없이 직접 메모리 접근&lt;/li>
&lt;li>대용량 데이터 전송 시 효율적&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>버스 시스템&lt;br>
다양한 구성 요소를 연결하는 통신 경로로, 데이터 버스, 주소 버스, 제어 버스로 구성된다.
&lt;ul>
&lt;li>주소 버스: 메모리 주소 전달&lt;/li>
&lt;li>데이터 버스: 실제 데이터 전송&lt;/li>
&lt;li>제어 버스: 제어 신호 전달&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>컴퓨터 아키텍처의 주요 개념&lt;span class="hx-absolute -hx-mt-20" id="컴퓨터-아키텍처의-주요-개념">&lt;/span>
&lt;a href="#%ec%bb%b4%ed%93%a8%ed%84%b0-%ec%95%84%ed%82%a4%ed%85%8d%ec%b2%98%ec%9d%98-%ec%a3%bc%ec%9a%94-%ea%b0%9c%eb%85%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>명령어 세트 아키텍처 (Instruction Set Architecture, ISA)&lt;br>
프로세서가 실행할 수 있는 명령어 집합을 정의한다.&lt;br>
이는 소프트웨어와 하드웨어 사이의 인터페이스 역할을 한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>마이크로아키텍처&lt;br>
ISA가 하드웨어 수준에서 어떻게 구현되는지를 설명한다.&lt;br>
이는 프로세서의 내부 설계와 관련이 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>파이프라이닝&lt;br>
여러 명령어를 동시에 실행하여 CPU 효율성을 높이는 기술.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>캐시 메모리&lt;br>
CPU 근처에 위치한 고속 메모리로, 자주 접근하는 데이터를 저장한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>멀티프로세싱&lt;br>
여러 프로세서를 사용하여 작업을 동시에 수행하는 기술.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>주요 컴퓨터 아키텍처 유형&lt;span class="hx-absolute -hx-mt-20" id="주요-컴퓨터-아키텍처-유형">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ec%bb%b4%ed%93%a8%ed%84%b0-%ec%95%84%ed%82%a4%ed%85%8d%ec%b2%98-%ec%9c%a0%ed%98%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>폰 노이만 아키텍처&lt;/p>
&lt;ul>
&lt;li>명령어와 데이터가 같은 메모리 공간을 공유한다.&lt;/li>
&lt;li>단일 데이터 버스와 주소 버스를 사용한다.&lt;/li>
&lt;li>순차적 실행 모델을 따른다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>하버드 아키텍처&lt;/p>
&lt;ul>
&lt;li>명령어와 데이터를 위한 별도의 저장 장치와 경로를 가진다.&lt;/li>
&lt;li>동시에 명령어와 데이터에 접근할 수 있어 성능이 향상된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>수정된 하버드 아키텍처&lt;/p>
&lt;ul>
&lt;li>명령어와 데이터를 위한 별도의 캐시를 사용한다.&lt;/li>
&lt;li>주 메모리는 공유하여 설계를 단순화하고 비용을 절감한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>RISC 및 CISC 아키텍처&lt;/p>
&lt;ul>
&lt;li>RISC (Reduced Instruction Set Computing): 간단한 명령어 세트를 사용하여 빠른 실행을 목표로 한다.&lt;/li>
&lt;li>CISC (Complex Instruction Set Computing): 복잡한 명령어 세트를 사용하여 다양한 기능을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Operating System</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/</link><pubDate>Sun, 22 Sep 2024 17:13:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/</guid><description>
&lt;h2>Operating System&lt;span class="hx-absolute -hx-mt-20" id="operating-system">&lt;/span>
&lt;a href="#operating-system" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>컴퓨터 하드웨어와 소프트웨어 자원을 관리하고 다양한 서비스를 제공하는 소프트웨어.&lt;/p>
&lt;p>&lt;img src="conceptual_view.jpg" alt="Operating System" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.tutorialspoint.com/operating_system/os_overview.htm" target="_blank" rel="noopener">https://www.tutorialspoint.com/operating_system/os_overview.htm&lt;/a> _&lt;/p>
&lt;h3>특성&lt;span class="hx-absolute -hx-mt-20" id="특성">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>동시성: 여러 작업을 동시에 처리할 수 있음&lt;/li>
&lt;li>하드웨어 추상화: 하드웨어 세부사항을 숨기고 일관된 인터페이스 제공&lt;/li>
&lt;li>자원 할당: 시스템 자원을 효율적으로 관리하고 할당&lt;/li>
&lt;li>가상화: 가상 메모리와 가상 CPU 생성&lt;/li>
&lt;li>보안: 무단 접근 방지 및 데이터 보호&lt;/li>
&lt;li>결함 허용: 하드웨어 및 소프트웨어 오류 처리&lt;/li>
&lt;/ul>
&lt;h3>주요 기능&lt;span class="hx-absolute -hx-mt-20" id="주요-기능">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ea%b8%b0%eb%8a%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>프로세스 관리: 프로세스 생성, 실행, 종료 관리하며 프로세스 간 통신을 지원&lt;/li>
&lt;li>메모리 관리: 메모리 할당 및 해제를 관리하고 가상 메모리를 구현&lt;/li>
&lt;li>파일 시스템 관리: 파일 저장, 검색, 조직화&lt;/li>
&lt;li>장치 관리: 입출력 장치 제어 및 드라이버 관리&lt;/li>
&lt;li>사용자 인터페이스 제공: GUI 또는 CLI 제공&lt;/li>
&lt;li>보안 및 보호: 데이터 및 시스템 보호&lt;/li>
&lt;li>네트워킹: 네트워크 통신 지원&lt;/li>
&lt;/ul>
&lt;h3>운영체제의 목적&lt;span class="hx-absolute -hx-mt-20" id="운영체제의-목적">&lt;/span>
&lt;a href="#%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9c%ec%9d%98-%eb%aa%a9%ec%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>운영체제는 다음과 같은 주요 목적을 가지고 있다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>사용자 편의성 제공&lt;/strong>: 복잡한 하드웨어를 추상화하여 사용하기 쉽게 만든다.&lt;/li>
&lt;li>&lt;strong>자원 효율성 최대화&lt;/strong>: 시스템 자원을 효율적으로 관리하고 할당한다.&lt;/li>
&lt;li>&lt;strong>시스템 신뢰성 보장&lt;/strong>: 안정적인 시스템 운영을 보장한다.&lt;/li>
&lt;/ol>
&lt;h3>계층적 디자인&lt;span class="hx-absolute -hx-mt-20" id="계층적-디자인">&lt;/span>
&lt;a href="#%ea%b3%84%ec%b8%b5%ec%a0%81-%eb%94%94%ec%9e%90%ec%9d%b8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>운영체제는 다음과 같은 계층 구조로 설계되어 있다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>하드웨어 계층&lt;/strong>: CPU, 메모리, 디스크 등 물리적 자원&lt;/li>
&lt;li>&lt;strong>커널 계층&lt;/strong>: 운영체제의 핵심 기능을 수행&lt;/li>
&lt;li>&lt;strong>시스템 콜 계층&lt;/strong>: 사용자 프로그램과 커널 간의 인터페이스&lt;/li>
&lt;li>&lt;strong>사용자 계층&lt;/strong>: 응용 프로그램과 사용자 인터페이스&lt;/li>
&lt;/ol>
&lt;h3>구성 요소&lt;span class="hx-absolute -hx-mt-20" id="구성-요소">&lt;/span>
&lt;a href="#%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>운영체제의 주요 구성 요소는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>커널(Kernel)&lt;/strong>: 운영체제의 핵심 부분으로, 자원 관리와 하드웨어 제어를 담당.&lt;/li>
&lt;li>&lt;strong>쉘(Shell)&lt;/strong>: 사용자와 커널 사이의 인터페이스를 제공.&lt;/li>
&lt;li>&lt;strong>파일 시스템&lt;/strong>: 데이터의 저장과 관리를 담당.&lt;/li>
&lt;li>&lt;strong>장치 드라이버&lt;/strong>: 하드웨어 장치와의 통신을 담당.&lt;/li>
&lt;/ol>
&lt;h3>운영체제의 유형&lt;span class="hx-absolute -hx-mt-20" id="운영체제의-유형">&lt;/span>
&lt;a href="#%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9c%ec%9d%98-%ec%9c%a0%ed%98%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>배치 처리 시스템 (Batch Operating System)&lt;br>
초기 컴퓨터 시스템에서 사용된 이 방식은 유사한 작업들을 그룹으로 모아서 연속적으로 처리한다.&lt;br>
예를 들어, 급여 계산이나 재고 관리와 같은 대량의 반복적인 작업을 처리할 때 효율적이다.&lt;br>
사용자와의 상호작용은 최소화되어 있으며, 작업이 시작되면 중간에 개입할 수 없다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>멀티프로그래밍 시스템 (Multiprogramming Operating System)&lt;br>
CPU 사용률을 최대화하기 위해 여러 프로그램을 메모리에 동시에 유지하면서 실행하는 시스템.&lt;br>
한 프로그램이 I/O 작업을 수행할 때 다른 프로그램이 CPU를 사용할 수 있게 하여 자원 활용도를 높인다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>멀티프로세싱 시스템 (Multiprocessing Operating System)&lt;br>
두 개 이상의 프로세서를 사용하여 병렬 처리를 수행하는 시스템.&lt;br>
현대의 대부분의 컴퓨터가 이 방식을 사용하며, 하나의 프로세서가 실패하더라도 시스템이 계속 동작할 수 있는 장점이 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>멀티태스킹 시스템 (Multitasking Operating System)&lt;br>
여러 작업을 동시에 수행하는 것처럼 보이게 하는 시스템.&lt;br>
실제로는 CPU가 매우 빠른 속도로 작업들을 번갈아가며 실행한다.&lt;br>
현대의 Windows, macOS, Linux가 이에 해당한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>시분할 시스템 (Time-Sharing Operating System)&lt;br>
여러 사용자가 동시에 컴퓨터를 사용할 수 있게 하는 시스템.&lt;br>
CPU 시간을 작은 단위로 나누어 각 사용자에게 할당한다.&lt;br>
초기 메인프레임 컴퓨터에서 많이 사용되었다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>분산 운영체제 (Distributed Operating System)&lt;br>
여러 컴퓨터의 자원을 네트워크로 연결하여 하나의 시스템처럼 사용할 수 있게 하는 시스템.&lt;br>
클라우드 컴퓨팅 환경에서 많이 사용된다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>네트워크 운영체제 (Network Operating System)&lt;br>
네트워크로 연결된 다른 컴퓨터의 자원을 사용할 수 있게 해주는 시스템.&lt;br>
서버-클라이언트 모델을 기반으로 동작한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>실시간 운영체제 (Real-Time Operating System)&lt;br>
정해진 시간 내에 작업 완료를 보장하는 시스템.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4>운영체제 유형 비교&lt;span class="hx-absolute -hx-mt-20" id="운영체제-유형-비교">&lt;/span>
&lt;a href="#%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9c-%ec%9c%a0%ed%98%95-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>운영 체제 유형&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>주요 특징&lt;/th>
&lt;th>장점&lt;/th>
&lt;th>단점&lt;/th>
&lt;th>사용 예시&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>배치 운영 체제&lt;/td>
&lt;td>유사한 작업을 그룹화하여 일괄 처리하는 시스템&lt;/td>
&lt;td>• 작업 그룹화&lt;br>• 순차적 실행&lt;br>• 운영자 개입 최소화&lt;/td>
&lt;td>• 자원 효율성 높음&lt;br>• 대량 작업 처리에 적합&lt;/td>
&lt;td>• 상호작용 부족&lt;br>• 긴 대기 시간&lt;/td>
&lt;td>• 급여 시스템&lt;br>• 은행 거래 명세서 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>다중 프로그래밍 운영 체제&lt;/td>
&lt;td>여러 프로그램을 메모리에 동시에 로드하여 실행하는 시스템&lt;/td>
&lt;td>• 동시 프로그램 실행&lt;br>• CPU 활용도 최적화&lt;/td>
&lt;td>• 처리량 증가&lt;br>• 자원 활용도 향상&lt;/td>
&lt;td>• 복잡한 메모리 관리&lt;br>• 프로세스 간 간섭 가능성&lt;/td>
&lt;td>• 서버 환경&lt;br>• 대형 컴퓨터 시스템&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>다중 처리 운영 체제&lt;/td>
&lt;td>여러 프로세서를 사용하여 작업을 병렬 처리하는 시스템&lt;/td>
&lt;td>• 병렬 처리&lt;br>• 부하 분산&lt;/td>
&lt;td>• 성능 향상&lt;br>• 신뢰성 증가&lt;/td>
&lt;td>• 복잡한 설계&lt;br>• 높은 구현 비용&lt;/td>
&lt;td>• 슈퍼컴퓨터&lt;br>• 고성능 서버&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>다중 작업 운영 체제&lt;/td>
&lt;td>여러 작업을 동시에 실행하는 시스템&lt;/td>
&lt;td>• 작업 전환&lt;br>• 시분할&lt;/td>
&lt;td>• 사용자 반응성 향상&lt;br>• 자원 공유 효율화&lt;/td>
&lt;td>• 컨텍스트 전환 오버헤드&lt;br>• 복잡한 스케줄링&lt;/td>
&lt;td>• 데스크톱 컴퓨터&lt;br>• 워크스테이션&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>시분할 운영 체제&lt;/td>
&lt;td>CPU 시간을 여러 사용자나 작업에 분할하여 할당하는 시스템&lt;/td>
&lt;td>• 빠른 응답 시간&lt;br>• 대화형 컴퓨팅&lt;/td>
&lt;td>• 다중 사용자 지원&lt;br>• 자원 공유 효율성&lt;/td>
&lt;td>• 보안 위험&lt;br>• 성능 저하 가능성&lt;/td>
&lt;td>• 클라우드 컴퓨팅 환경&lt;br>• 대학 컴퓨터 실습실&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>분산 운영 체제&lt;/td>
&lt;td>네트워크로 연결된 여러 컴퓨터에서 작동하는 시스템&lt;/td>
&lt;td>• 자원 공유&lt;br>• 확장성&lt;/td>
&lt;td>• 높은 신뢰성&lt;br>• 성능 향상&lt;/td>
&lt;td>• 복잡한 구현&lt;br>• 네트워크 의존성&lt;/td>
&lt;td>• 클러스터 컴퓨팅&lt;br>• 그리드 컴퓨팅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>네트워크 운영 체제&lt;/td>
&lt;td>네트워크 자원 관리에 특화된 시스템&lt;/td>
&lt;td>• 네트워크 프로토콜 지원&lt;br>• 원격 접속 기능&lt;/td>
&lt;td>• 자원 공유 용이&lt;br>• 중앙 관리 효율성&lt;/td>
&lt;td>• 네트워크 의존성&lt;br>• 보안 취약점&lt;/td>
&lt;td>• 기업 네트워크&lt;br>• 파일 서버&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실시간 운영 체제&lt;/td>
&lt;td>시간 제약이 엄격한 작업을 처리하는 시스템&lt;/td>
&lt;td>• 빠른 응답 시간&lt;br>• 예측 가능한 동작&lt;/td>
&lt;td>• 높은 신뢰성&lt;br>• 정확한 타이밍&lt;/td>
&lt;td>• 제한된 기능&lt;br>• 복잡한 설계&lt;/td>
&lt;td>• 로봇 제어 시스템&lt;br>• 의료 기기&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3></description></item><item><title>Multithreading Vs Multiprocessing vs Multitasking</title><link>https://buenhyden.github.io/til/2025/01/multithreading-vs-multiprocessing-vs-multitasking/</link><pubDate>Tue, 14 Jan 2025 14:39:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2025/01/multithreading-vs-multiprocessing-vs-multitasking/</guid><description>
&lt;h2>Multithreading Vs Multiprocessing Vs Multitasking&lt;span class="hx-absolute -hx-mt-20" id="multithreading-vs-multiprocessing-vs-multitasking">&lt;/span>
&lt;a href="#multithreading-vs-multiprocessing-vs-multitasking" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Multithreading, Multiprocessing, Multitasking은 컴퓨터 시스템에서 동시성과 병렬성을 구현하는 세 가지 주요 개념이다.&lt;/p>
&lt;p>Multitasking은 단일 CPU에서 여러 작업(프로세스)을 동시에 실행하는 것처럼 보이게 하는 기술이다. 실제로는 CPU가 매우 빠르게 여러 작업 간을 전환하면서 실행한다.&lt;/p>
&lt;ul>
&lt;li>목적: CPU 사용률을 최대화하고 사용자에게 여러 프로그램이 동시에 실행되는 것 같은 환상을 제공한다.&lt;/li>
&lt;li>구현: 시분할(time-sharing) 방식을 사용하여 각 작업에 CPU 시간을 할당한다.&lt;/li>
&lt;/ul>
&lt;p>Multithreading은 하나의 프로세스 내에서 여러 실행 흐름(스레드)을 동시에 처리하는 기술이다.&lt;/p>
&lt;ul>
&lt;li>목적: 단일 프로세스의 성능을 향상시키고 자원을 효율적으로 사용한다.&lt;/li>
&lt;li>특징: 스레드들은 같은 프로세스 내의 메모리와 자원을 공유한다.&lt;/li>
&lt;/ul>
&lt;p>Multiprocessing은 여러 개의 프로세서(또는 코어)를 사용하여 여러 작업을 실제로 동시에 처리하는 기술이다.&lt;/p>
&lt;ul>
&lt;li>목적: 시스템의 전체적인 처리 능력을 향상시킨다.&lt;/li>
&lt;li>특징: 각 프로세서가 독립적으로 작업을 처리하며, 실제 병렬 처리가 가능하다.&lt;/li>
&lt;/ul>
&lt;p>이들의 차이점을 표로 정리하면 다음과 같습니다:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>Multitasking&lt;/th>
&lt;th>Multiprocessing&lt;/th>
&lt;th>Multithreading&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>단일 CPU에서 여러 작업을 번갈아 실행&lt;/td>
&lt;td>여러 프로세서에서 여러 작업을 동시에 실행&lt;/td>
&lt;td>단일 프로세스 내에서 여러 실행 흐름을 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실행 단위&lt;/td>
&lt;td>태스크/프로세스&lt;/td>
&lt;td>프로세스&lt;/td>
&lt;td>스레드&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 공유&lt;/td>
&lt;td>각 작업이 독립적인 메모리 공간 사용&lt;/td>
&lt;td>각 프로세스가 독립적인 메모리 공간 사용&lt;/td>
&lt;td>스레드 간 메모리와 자원 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 사용&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>통신 비용&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>컨텍스트 스위칭 비용&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 복잡도&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>안정성&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>중간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CPU 활용&lt;/td>
&lt;td>단일 CPU&lt;/td>
&lt;td>여러 CPU/코어&lt;/td>
&lt;td>단일 CPU 또는 여러 CPU&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>장점&lt;/td>
&lt;td>- 자원 격리&lt;br>- 안정성&lt;br>- 구현 용이&lt;/td>
&lt;td>- 진정한 병렬 처리&lt;br>- 높은 성능&lt;br>- 안정성&lt;/td>
&lt;td>- 자원 공유&lt;br>- 빠른 컨텍스트 스위칭&lt;br>- 효율적인 통신&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>단점&lt;/td>
&lt;td>- 높은 리소스 사용&lt;br>- 느린 통신&lt;/td>
&lt;td>- 높은 리소스 사용&lt;br>- 복잡한 구현&lt;br>- 비용 높음&lt;/td>
&lt;td>- 동기화 필요&lt;br>- 디버깅 어려움&lt;br>- 공유 자원 관리 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>적합한 사용 사례&lt;/td>
&lt;td>- 독립적인 작업 실행&lt;br>- 일반적인 데스크톱 환경&lt;/td>
&lt;td>- 대규모 데이터 처리&lt;br>- 고성능 컴퓨팅&lt;/td>
&lt;td>- GUI 애플리케이션&lt;br>- 웹 서버&lt;br>- 게임 엔진&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 기술들은 서로 배타적이지 않으며, 현대의 시스템에서는 이들을 조합하여 사용하는 것이 일반적이다.&lt;br>
예를 들어, 멀티코어 시스템에서 여러 프로세스(멀티프로세싱)가 실행되고, 각 프로세스 내에서는 여러 스레드(멀티스레딩)가 실행되며, 이 모든 것이 멀티태스킹 환경에서 동작하는 것이다.&lt;/p>
&lt;p>Multitasking은 사용자 인터페이스의 반응성을 높이는 데 유용하고, Multithreading은 단일 애플리케이션의 성능을 최적화하는 데 효과적이며, Multiprocessing은 대규모 병렬 처리가 필요한 작업에 적합하다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Linux Basic Command</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-basic-command/</link><pubDate>Tue, 15 Oct 2024 15:39:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-basic-command/</guid><description>
&lt;h2>Linux Command&lt;span class="hx-absolute -hx-mt-20" id="linux-command">&lt;/span>
&lt;a href="#linux-command" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Command&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>pwd&lt;/td>
&lt;td>현재 위치 출력&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>ls&lt;/td>
&lt;td>현재 디렉터리 내의 파일과 디렉터리 출력&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>cd&lt;/td>
&lt;td>디렉터리 이동&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>mkdir&lt;/td>
&lt;td>디렉터리 생성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>cp&lt;/td>
&lt;td>파일 또는 디렉터리 복사&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>mv&lt;/td>
&lt;td>파일 또는 디렉터리 이동&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>rm&lt;/td>
&lt;td>파일 또는 디렉터리 삭제&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>cat&lt;/td>
&lt;td>파일 내용을 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9&lt;/td>
&lt;td>touch&lt;/td>
&lt;td>빈 파일을 생성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10&lt;/td>
&lt;td>echo&lt;/td>
&lt;td>문자열 화면에 표시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>11&lt;/td>
&lt;td>ip addr/ifconfig&lt;/td>
&lt;td>IP 정보 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>12&lt;/td>
&lt;td>ss&lt;/td>
&lt;td>네트워크 상태 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>13&lt;/td>
&lt;td>nc&lt;/td>
&lt;td>서버의 포트 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>14&lt;/td>
&lt;td>which, whereis, locate&lt;/td>
&lt;td>명령어 위치 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>15&lt;/td>
&lt;td>tail&lt;/td>
&lt;td>파일의 마지막 부분 확인하기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16&lt;/td>
&lt;td>find&lt;/td>
&lt;td>파일이나 디렉터리 찾기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>17&lt;/td>
&lt;td>ps&lt;/td>
&lt;td>현재 실행 중인 프로세스 목록과 상태 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>18&lt;/td>
&lt;td>grep&lt;/td>
&lt;td>주어진 입력값에서 패턴에 맞는 값 출력&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>19&lt;/td>
&lt;td>kill&lt;/td>
&lt;td>프로세스 종료&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>20&lt;/td>
&lt;td>alias&lt;/td>
&lt;td>명령어 별칭 만들기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>21&lt;/td>
&lt;td>vi / vim&lt;/td>
&lt;td>편집기&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Pwd&lt;span class="hx-absolute -hx-mt-20" id="pwd">&lt;/span>
&lt;a href="#pwd" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>work directory의 약자로 작업 중인 디렉터리를 보여줌&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">pwd&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/Users/hyden&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Ls&lt;span class="hx-absolute -hx-mt-20" id="ls">&lt;/span>
&lt;a href="#ls" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>list segments의 약자로 현재 디렉터리의 파일과 디렉터리를 보여준다.&lt;/li>
&lt;li>보통 단독으로 잘 사용하지 않고 a,l 등의 옵션과 함께 사용&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ls -l&lt;/td>
&lt;td>파일들의 상세 정보를 보여줌&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ls -a&lt;/td>
&lt;td>숨김 파일 표시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ls -t&lt;/td>
&lt;td>최신 파일부터 표시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ls -rt&lt;/td>
&lt;td>오래된 파일부터 표시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ls -F&lt;/td>
&lt;td>파일을 표시할 때 파일의 타입을 나타내는 문자열을 표시(/ 디렉터리, * 실행파일, @심볼릭 링크)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ls -R&lt;/td>
&lt;td>하위 디렉터리의 내용까지 표시&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>보통은 위 옵셥들을 조합해 ls -al, ls -alt, ls -altF 등으로 사용&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ls -altF
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">total &lt;span class="m">95340&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-x--- &lt;span class="m">28&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">29&lt;/span> 12:34 ./
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">326035&lt;/span> Oct &lt;span class="m">29&lt;/span> 12:34 .zsh_history
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwx------ &lt;span class="m">8&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">29&lt;/span> 12:34 .cache/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">33&lt;/span> Oct &lt;span class="m">27&lt;/span> 16:40 .lesshst
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">25052&lt;/span> Oct &lt;span class="m">27&lt;/span> 16:39 .bash_history
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">38160&lt;/span> Oct &lt;span class="m">27&lt;/span> 16:32 .viminfo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwx------ &lt;span class="m">6&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">27&lt;/span> 15:50 .config/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwx------ &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">27&lt;/span> 15:36 .ssh/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">287&lt;/span> Oct &lt;span class="m">27&lt;/span> 13:34 .wget-hsts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r--r--r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">117120&lt;/span> Oct &lt;span class="m">27&lt;/span> 12:31 .zcompdump-devserver-5.8.1.zwc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">50720&lt;/span> Oct &lt;span class="m">27&lt;/span> 12:31 .zcompdump-devserver-5.8.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">49203&lt;/span> Oct &lt;span class="m">27&lt;/span> 12:31 .zcompdump
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-x--- &lt;span class="m">6&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">26&lt;/span> 16:20 istio-1.18.2/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x &lt;span class="m">12&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">26&lt;/span> 14:30 .oh-my-zsh/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">4789&lt;/span> Oct &lt;span class="m">26&lt;/span> 14:30 .zshrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x &lt;span class="m">9&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">23&lt;/span> 13:01 .minikube/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-r--r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">3919&lt;/span> Oct &lt;span class="m">20&lt;/span> 17:47 .bashrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">2313&lt;/span> Oct &lt;span class="m">5&lt;/span> 12:49 kubeconfig.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">19&lt;/span> 12:52 lang_test/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">18&lt;/span> 20:27 .ncloud/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x &lt;span class="m">5&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">11&lt;/span> 19:06 pybind11/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">8&lt;/span> 16:25 data/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw------- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">151&lt;/span> Sep &lt;span class="m">8&lt;/span> 15:59 .python_history
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">1452216&lt;/span> Sep &lt;span class="m">7&lt;/span> 18:59 libboost_regex.so.1.58.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">6&lt;/span> 14:35 test/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">4&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Sep &lt;span class="m">6&lt;/span> 14:28 ffmpeg/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">2&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Aug &lt;span class="m">30&lt;/span> 16:00 dockerbuild/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-xr-x &lt;span class="m">8&lt;/span> root root &lt;span class="m">4096&lt;/span> Aug &lt;span class="m">30&lt;/span> 10:50 ../
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">435&lt;/span> Aug &lt;span class="m">3&lt;/span> 17:05 default-user-config.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxr-x--- &lt;span class="m">3&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Aug &lt;span class="m">3&lt;/span> 15:30 .kube/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drwxrwxr-x &lt;span class="m">5&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Aug &lt;span class="m">3&lt;/span> 14:47 manage_kubernetes/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">84&lt;/span> Aug &lt;span class="m">2&lt;/span> 18:54 .bash_profile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">508&lt;/span> Aug &lt;span class="m">2&lt;/span> 18:53 ncp-iam-authenticator.sha256
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rwxrwxr-x &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">11665408&lt;/span> Aug &lt;span class="m">2&lt;/span> 18:53 ncp-iam-authenticator*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rwx------ &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">11345&lt;/span> Aug &lt;span class="m">2&lt;/span> 10:13 get_helm.sh*&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>심볼릭 링크(symbolic link): 원본 파일을 가리키도록 링크만 연결. 윈도우의 바로가기 링크와 같은 개념&lt;/li>
&lt;/ul>
&lt;h3>Cd&lt;span class="hx-absolute -hx-mt-20" id="cd">&lt;/span>
&lt;a href="#cd" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>change directory의 약자로 디렉터리 이동시 사용하는 명령어&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>cd ~&lt;/td>
&lt;td>홈 디렉터리로 이동&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cd..&lt;/td>
&lt;td>상위 디렉터리로 이동. cd../../ 같은 식으로 여러 단계를 한 번에 이동 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cd /dir&lt;/td>
&lt;td>절대 경로를 지정해 이동 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cd -&lt;/td>
&lt;td>바로 전의 디렉터리로 이동&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>Mkdir&lt;span class="hx-absolute -hx-mt-20" id="mkdir">&lt;/span>
&lt;a href="#mkdir" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>make directory의 약자로 디렉터리를 만들 때 사용&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># &amp;lt;이름&amp;gt;의 디렉터리를 현재 디렉터리에 만든다&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mkdir &amp;lt;이름&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>절대 경로를 지정하여 만들 수도 있다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># &amp;lt;이름&amp;gt;의 디렉터리를 절대 경로의 디렉터리에 만든다&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mkdir /home/hyden/&amp;lt;이름&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>-p 옵션으로 하위 디렉터리까지 한 번에 생성할 수 있다&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mkdir -p &amp;lt;디렉터리명&amp;gt;/&amp;lt;하위 디렉터리명&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Cp&lt;span class="hx-absolute -hx-mt-20" id="cp">&lt;/span>
&lt;a href="#cp" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>copy의 약자로 파일 또는 디렉터리를 복사할 때 사용&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># source를 target으로 복사&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cp &lt;span class="nb">source&lt;/span> target
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># target 파일의 이미 있는 경우 덮어쓰기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cp -f &lt;span class="nb">source&lt;/span> target
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 디렉터리를 복사할 때 사용. 하위 디렉터리도 모두 복사하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cp -R sourceDir targetDir&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Mv&lt;span class="hx-absolute -hx-mt-20" id="mv">&lt;/span>
&lt;a href="#mv" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>move의 약자로 파일 또는 디렉터리의 위치를 옮길 때 사용. 혹은 이름을 변경할 때도 사용&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile 이름을 bfile로 변경&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mv afile bfile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile을 상위 디렉터리로 옮김&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mv afile ../
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile을 /opt 이하 디렉터리로 옮김&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mv afile /opt/&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Rm&lt;span class="hx-absolute -hx-mt-20" id="rm">&lt;/span>
&lt;a href="#rm" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>remove의 약자로 파일 또는 디렉터리를 삭제할 때 사용&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile을 삭제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ rm afile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 디렉터리 adir을 삭제. 삭제 시 확인을 함&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ rm -r adir
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 디렉터리 adir을 삭제. 삭제 시 확인 안 함&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ rm -rf adir
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># txt로 끝나는 모든 파일을 삭제할지 물어보면서 삭제&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ rm -i *.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Cat&lt;span class="hx-absolute -hx-mt-20" id="cat">&lt;/span>
&lt;a href="#cat" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>catenate의 약자로 파일의 내용을 확인할 때 사용.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># test.txt 파일의 내용을 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cat test.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Touch&lt;span class="hx-absolute -hx-mt-20" id="touch">&lt;/span>
&lt;a href="#touch" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>touch는 빈 파일을 생성. 혹은 파일의 날짜와 시간을 수정할 때 사용한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile을 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ touch afile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># afile의 시간을 현재 시간으로 갱신&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ touch -c afile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># bfile의 날짜 정보를 afile의 정보와 동일하게 변경&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ touch -r afile bfile&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Echo&lt;span class="hx-absolute -hx-mt-20" id="echo">&lt;/span>
&lt;a href="#echo" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>echo는 어떤 문자열을 화면에 보여줄 때 사용. echo와 리다이렉션을 사용해 파일을 생성, 추가하는 작업을 많이 한다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># helloworld 출력&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;helloworld&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 패스로 지정된 문자열을 출력&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$PATH&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 이스케이프 문자열을 해석&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> -e 문자열
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 개행을 표시할 수 있음&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;안녕하세요\n이렇게 하면\n새 줄이생겨요&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ls와 유사하게 현재 디렉터리의 파일과 폴더를 출력&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 리다이렉션 &amp;#39;&amp;gt;&amp;#39;을 사용해 hello.txt 파일 생성. 파일 내용에는 echo로 표시되는 내용이 들어감&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> hello redirection &amp;gt; hello.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 추가 연산자 &amp;gt;&amp;gt;를 사용해 기존 파일에 문자열 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> hello2 &amp;gt;&amp;gt; hello.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Ip addr/ifconfig&lt;span class="hx-absolute -hx-mt-20" id="ip-addrifconfig">&lt;/span>
&lt;a href="#ip-addrifconfig" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>접속한 리눅스의 IP 정보를 알아낼 때 사용.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ip addr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span class="m">65536&lt;/span> qdisc noqueue state UNKNOWN group default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">qlen &lt;span class="m">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet 127.0.0.1/8 scope host lo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">valid_lft forever preferred_lft forever
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class="m">1500&lt;/span> qdisc pfifo_fast state UP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">group default qlen &lt;span class="m">50000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">link/ether fa:16:3e:5d:0b:d7 brd ff:ff:ff:ff:ff:ff
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet 10.201.1.10/16 brd 10.202.255.255 scope global eth0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">valid_lft forever preferred_lft forever&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>ip addr이 설치되어 있지 않은 경우에는 ifconfig를 사용.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ifconfig
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">eth0 Link encap:Ethernet HWaddr 06:4d:de:ae:a8:50
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet addr:172.31.27.212 Bcast:172.31.31.255 Mask:255.255.240.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet6 addr: fe80::44d:deff:feae:a850/64 Scope:Link
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">UP BROADCAST RUNNING MULTICAST MTU:9001 Metric:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RX packets:68903966 errors:0 dropped:0 overruns:0 frame:0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">TX packets:75295223 errors:0 dropped:0 overruns:0 carrier:0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">collisions:0 txqueuelen:1000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RX bytes:15691124260 &lt;span class="o">(&lt;/span>15.6 GB&lt;span class="o">)&lt;/span> TX bytes:42265387295 &lt;span class="o">(&lt;/span>42.2 GB&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lo Link encap:Local Loopback
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet addr:127.0.0.1 Mask:255.0.0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inet6 addr: ::1/128 Scope:Host
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">UP LOOPBACK RUNNING MTU:65536 Metric:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RX packets:6623596 errors:0 dropped:0 overruns:0 frame:0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">TX packets:6623596 errors:0 dropped:0 overruns:0 carrier:0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">collisions:0 txqueuelen:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RX bytes:349206971 &lt;span class="o">(&lt;/span>349.2 MB&lt;span class="o">)&lt;/span> TX bytes:349206971 &lt;span class="o">(&lt;/span>349.2 MB&lt;span class="o">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Ss&lt;span class="hx-absolute -hx-mt-20" id="ss">&lt;/span>
&lt;a href="#ss" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>socket statistics의 약자로 네트워크 상태를 확인하는 데 사용.&lt;/li>
&lt;li>nestat과 동일. 옵션으로 a, t, u, l, p, n 등이 있다.&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ss -a&lt;/td>
&lt;td>모든 포트 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ss -t&lt;/td>
&lt;td>TCP 포트 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ss -u&lt;/td>
&lt;td>UDP 포트 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ss -l&lt;/td>
&lt;td>LISTEN 상태 포트 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ss -p&lt;/td>
&lt;td>프로세스 표시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ss -n&lt;/td>
&lt;td>호스트, 포트, 사용자명을 숫자로 표시&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>TCP 포트 중 LISTEN 상태인 포트의 번호를 알고 싶을 때 다음과 같이.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ss -tln
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LISTEN &lt;span class="m">0&lt;/span> &lt;span class="m">511&lt;/span> *:443 *:*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LISTEN &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span> 127.0.0.1:8006 *:*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LISTEN &lt;span class="m">0&lt;/span> &lt;span class="m">511&lt;/span> *:80 *:*&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Nc&lt;span class="hx-absolute -hx-mt-20" id="nc">&lt;/span>
&lt;a href="#nc" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>netcat의 약자로 예전에는 포트가 열렸는지 확인하는 데 사용.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 포트가 오픈됐는지 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ nc IP주소 포트
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 더 자세한 정보가 남음&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ nc -v IP주소 포트
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 현재 서버의 포트를 오픈(방화벽에 해당 포트 번호가 설정 함)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ nc -l 포트&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Which, Whereis, Locate&lt;span class="hx-absolute -hx-mt-20" id="which-whereis-locate">&lt;/span>
&lt;a href="#which-whereis-locate" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>which는 특정 명령어의 위치를 찾아줌.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ which git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/local/bin/git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># which -a : 검색 가능한 모든 경로에서 명령어를 찾아준다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ which -a git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/local/bin/git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/bin/git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># where : which -a와 같다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ where git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/local/bin/git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/bin/git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># whereis는 실행 파일, 소스, man 페이지의 파일을 찾아준다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ whereis ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh: /usr/bin/ssh /usr/share/man/man1/ssh.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># locate는 파일명을 패턴으로 빠르게 찾아준다.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 아래 예제는 .java 파일을 찾아주는 명령.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ locate *.java&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Tail&lt;span class="hx-absolute -hx-mt-20" id="tail">&lt;/span>
&lt;a href="#tail" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>tail은 파일의 마지막 부분을 보여준다. 이와 반대로 head는 파일의 첫 부분을 보여준다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일의 마지막 라인부터 숫자만큼의 파일의 라인 수를 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tail -n &lt;span class="o">{&lt;/span>숫자&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>파일경로&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 숫자로 지정한 라인부터 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tail -n +&lt;span class="o">{&lt;/span>숫자&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>파일경로&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일의 마지막 라인부터 숫자로 지정한 바이트 수 만큼 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tail -c &lt;span class="o">{&lt;/span>숫자&lt;span class="o">}&lt;/span> &lt;span class="o">{&lt;/span>파일경로&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Ctrl + C로 중단하기 전까지 지정한 파일의 마지막에 라인이 추가되면 계속 출력하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tail -f &lt;span class="o">{&lt;/span>파일경로&lt;span class="o">}&lt;/span> :
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일의 마지막 라인부터 지정한 숫자만큼을&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># {초}로 지정한 시간이 지날 때마다 리프레시해서 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tail -n &lt;span class="o">{&lt;/span>숫자&lt;span class="o">}&lt;/span> -s &lt;span class="o">{&lt;/span>초&lt;span class="o">}&lt;/span> -f &lt;span class="o">{&lt;/span>파일경로&lt;span class="o">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Find&lt;span class="hx-absolute -hx-mt-20" id="find">&lt;/span>
&lt;a href="#find" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>find는 명령어의 뜻 그대로 파일이나 디렉터리를 찾는 데 사용하는 명령어.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 확장자 명으로 찾기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -name &lt;span class="s1">&amp;#39;*.bak&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 디렉터리를 지정해 찾기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -path &lt;span class="s1">&amp;#39;**/검색 시 사용하는 디렉터리명/**.*.js&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일명을 패턴으로 찾기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -name &lt;span class="s1">&amp;#39;*패턴*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일명을 패턴으로 찾되 특정 경로는 제외하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -name &lt;span class="s1">&amp;#39;*.py&amp;#39;&lt;/span> -not -path &lt;span class="s1">&amp;#39;*/site-packates/*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일을 찾은 다음 명령어 실행하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -name &lt;span class="s1">&amp;#39;*.ext&amp;#39;&lt;/span> -exec wc -l &lt;span class="o">{}&lt;/span> &lt;span class="se">\;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 최근 7일간 수정된 파일을 찾고 삭제하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -daystart -mtime -7 -delete
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 0바이트인 파일을 찾고 삭제하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ find &lt;span class="o">{&lt;/span>디렉터리&lt;span class="o">}&lt;/span> -type f -empty -delete&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Ps&lt;span class="hx-absolute -hx-mt-20" id="ps">&lt;/span>
&lt;a href="#ps" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>현재 실행 중인 프로세스 목록과 상태를 보여준다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 실행 중인 모든 프로세스를 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ps aux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 실행 중인 모든 프로세스를 전체 커맨드를 포함해 보여주기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ps auxww
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 특정 문자열과 매칭되는 프로세스 찾기(grep은 바로 다음에 나옵니다)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ps aus &lt;span class="p">|&lt;/span> grep &lt;span class="o">{&lt;/span>패턴&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 메모리 사용량에 따라 정렬하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ps --sort size&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>ps와 grep을 pipe로 사용하여 현재 실행 중인 프로세스 목록중 특정 명칭을 포함하는 프로세스를 찾는 식으로 사용하기도 한다.&lt;/li>
&lt;/ul>
&lt;h3>Grep&lt;span class="hx-absolute -hx-mt-20" id="grep">&lt;/span>
&lt;a href="#grep" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>grep은 입력에서 패턴에 매칭되는 내용을 찾는 명령어.&lt;/li>
&lt;li>grep이라는 이름은 ed의 명령어인 g/re/p(내용 전체를 정규식으로 찾은 다음 프린트하라: globally search for a regular expression and print matching lines)에서 왔음.&lt;/li>
&lt;li>보통 find, ps 등과 조합해 사용.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일에서 특정 패턴을 만족하는 부분 찾기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ grep &lt;span class="s2">&amp;#34;패턴&amp;#34;&lt;/span> 파일경로
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 파일명과 라인을 함께 표시하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ grep --with-filename --line-number &lt;span class="s2">&amp;#34;패턴&amp;#34;&lt;/span> 파일경로
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 매칭하지 않는 부분 표시하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ grep --invert-match &lt;span class="s2">&amp;#34;패턴&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># cat과 함께 사용하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cat 파일경로 &lt;span class="p">|&lt;/span> grep &lt;span class="s2">&amp;#34;패턴&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Kill&lt;span class="hx-absolute -hx-mt-20" id="kill">&lt;/span>
&lt;a href="#kill" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>프로세스를 죽이는 명령어&lt;/li>
&lt;li>프로세스를 죽인다고는 하지만 원리는 프로세스에 중지하라는 시그널을 보내는 것&lt;/li>
&lt;li>SIGKILL, SIGSTOP은 강제 종료이며 나머지는 정상적으로 종료.&lt;/li>
&lt;li>프로세스 아이디는 ps 명령어로 알아낼 수 있다.&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># kill에서 사용할 수 있는 시그널 표시하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">kill&lt;/span> -l
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 프로세스 죽이기 SIGTERM(terminate)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">kill&lt;/span> 프로세스ID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 백그라운드 잡 종료시키기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">kill&lt;/span> &lt;span class="o">{&lt;/span>잡ID&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 프로세스 강제 종료&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">kill&lt;/span> -9 &lt;span class="p">|&lt;/span> KILL 프로세스ID&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Alias&lt;span class="hx-absolute -hx-mt-20" id="alias">&lt;/span>
&lt;a href="#alias" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>alias를 사용하면 줄여서 사용할 수 있다&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 모든 alias 표시하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># alias 만들기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 예) alias ll=&amp;#34;ls -al&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> &lt;span class="nv">단어&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;명령&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># cd ../..을 cd …으로 줄여 쓰기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># cd ../../../은 cd ….으로 가능&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> ...&lt;span class="o">=&lt;/span>../..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> ....&lt;span class="o">=&lt;/span>../../..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> .....&lt;span class="o">=&lt;/span>../../../..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> ......&lt;span class="o">=&lt;/span>../../../../..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># alias 삭제하기&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">unalias&lt;/span> 단어&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>Vi / Vim&lt;span class="hx-absolute -hx-mt-20" id="vi--vim">&lt;/span>
&lt;a href="#vi--vim" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>vi 혹은 vim은 대부분의 리눅스에 기본적으로 설치되어 있는 텍스트 에디터&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">vi test.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;a href="https://yozm.wishket.com/magazine/detail/2103/" target="_blank" rel="noopener">백엔드 개발자라면 알아야 할 리눅스 필수 명령어 21개&lt;/a>&lt;/p></description></item><item><title>Linux Permission</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-permission/</link><pubDate>Tue, 15 Oct 2024 15:39:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/linux/linux-permission/</guid><description>
&lt;h2>Linux Permission&lt;span class="hx-absolute -hx-mt-20" id="linux-permission">&lt;/span>
&lt;a href="#linux-permission" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>
&lt;img src="../linux-permissions.jpg" alt="Linux Permissions" loading="lazy" />&lt;br>
&lt;em>source: &lt;a href="https://medium.com/@usamashafique00786/day-4-task-linux-permissions-and-access-control-lists-ef59cebf9324" target="_blank" rel="noopener">https://medium.com/@usamashafique00786/day-4-task-linux-permissions-and-access-control-lists-ef59cebf9324&lt;/a>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>File type: 파일 유형&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>normal file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>d&lt;/td>
&lt;td>directory&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>l&lt;/td>
&lt;td>link&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>p&lt;/td>
&lt;td>named pipe&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>s&lt;/td>
&lt;td>socket&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>c&lt;/td>
&lt;td>character device&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>b&lt;/td>
&lt;td>block device&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>
&lt;p>Permissions: 각 파일에 접근해서 읽거나 쓰거나 실행할 권리를 갖는 소유자 / 그룹 / 다른 사용자로 나눠서 관리&lt;br>
&lt;img src="../Files-permissions-and-ownership-basics-in-Linux.png" alt="Linux Permission" loading="lazy" />&lt;br>
&lt;em>source: &lt;a href="https://pamirwebhost.com/check-linux-file-permissions-with-ls/" target="_blank" rel="noopener">https://pamirwebhost.com/check-linux-file-permissions-with-ls/&lt;/a>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Permission은 3개로 나눠서 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>User&lt;/td>
&lt;td>파일을 만든 소유주&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Group&lt;/td>
&lt;td>파일을 만든 소유주가 속한 그룹&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Other&lt;/td>
&lt;td>기타 사용자&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Permission은 4가지에 대하여 구분&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">Permission&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">&lt;/td>
&lt;td>파일&lt;/td>
&lt;td>디렉토리&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">r&lt;/td>
&lt;td>파일에 대한 읽기 권한.&lt;/br>열기, 읽기 허용&lt;/td>
&lt;td>디렉토리 내의 파일을 나열할 수 있게 허용&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">w&lt;/td>
&lt;td>파일에 대한 쓰기 권한.&lt;/br>쓰기, 잘라내기 허용.&lt;/br>이름 변경이나 파일 삭제 허용되지 않음. 파일 삭제나 파일 이름 변경 디렉토리 속성에 의해 결정&lt;/td>
&lt;td>디렉토리 내의 파일들을 생성, 삭제, 이름 변경이 가능하도록 허용&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">x&lt;/td>
&lt;td>파일에 대한 실행 권한.&lt;/br>파일이 프로그램으로 처리되고 파일이 실행되도록 허용.&lt;/br>스크립트 언어에서 작성된 프로그램 파일들은 읽기 가능으로 설정 되어 있어야만 실행 가능&lt;/td>
&lt;td>디렉토리 내에서 탐색을 위해 이동할 수 있도록 허용(디렉토리에 들어올 수 있도록 허용)&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">-&lt;/td>
&lt;td>r,w,x에 대한 권한이 없음을 표시&lt;/td>
&lt;td>r,w,x에 대한 권한이 없음을 표시&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>
&lt;p>Permission&lt;br>
&lt;img src="../linux-file-permissions.jpg" alt="Linux File permissions" loading="lazy" />&lt;br>
&lt;em>source: &lt;a href="https://medium.com/@gumbershruti1119/day-6-file-permissions-and-access-control-lists-2126f994a5b8" target="_blank" rel="noopener">https://medium.com/@gumbershruti1119/day-6-file-permissions-and-access-control-lists-2126f994a5b8&lt;/a>&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>number of hard links&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ownership: 각 파일이나 디렉토리를 소유할 사용자나 그룹을 지정&lt;/p>
&lt;ul>
&lt;li>user(owner) name&lt;/li>
&lt;li>group name&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>size&lt;/p>
&lt;/li>
&lt;li>
&lt;p>date/time last modified&lt;/p>
&lt;/li>
&lt;li>
&lt;p>filename&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Example&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">drwxr-x--- &lt;span class="m">28&lt;/span> hyden hyden &lt;span class="m">4096&lt;/span> Oct &lt;span class="m">29&lt;/span> 12:34 ./
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-rw-rw-r-- &lt;span class="m">1&lt;/span> hyden hyden &lt;span class="m">435&lt;/span> Aug &lt;span class="m">3&lt;/span> 17:05 default-user-config.yaml&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>&lt;a href="https://m.blog.naver.com/islove8587/221945262618" target="_blank" rel="noopener">islove8587&lt;/a>&lt;br>
&lt;a href="https://hack-cracker.tistory.com/32" target="_blank" rel="noopener">hack-cracker&lt;/a>&lt;br>
&lt;a href="https://twitter.com/alexxubyte/status/1532026886359879681" target="_blank" rel="noopener">alex xu&lt;/a>&lt;br>
&lt;a href="https://yozm.wishket.com/magazine/detail/1668/" target="_blank" rel="noopener">[여기보기] 파일과 디렉토리에는 정확한 소유권과 적당한 권한을 부여하라&lt;/a>&lt;/p></description></item><item><title>파이프라이닝 (Pipelining)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/pipelining/</link><pubDate>Tue, 14 Jan 2025 02:20:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/pipelining/</guid><description>
&lt;h2>파이프라이닝 (Pipelining)&lt;span class="hx-absolute -hx-mt-20" id="파이프라이닝-pipelining">&lt;/span>
&lt;a href="#%ed%8c%8c%ec%9d%b4%ed%94%84%eb%9d%bc%ec%9d%b4%eb%8b%9d-pipelining" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>프로세서 아키텍처에서의 파이프라이닝(Pipelining)은 CPU의 성능을 향상시키는 중요한 기술이다.&lt;/p>
&lt;p>파이프라이닝은 여러 명령어의 실행 단계를 중첩시켜 전체적인 처리량을 향상시키는 기술로, 여러 단계를 동시에 처리함으로써 효율성을 높인다.&lt;/p>
&lt;p>현대 프로세서 설계에서 필수적인 기술이며, 대부분의 현대 CPU는 최소 2단계에서 최대 30-40단계의 파이프라인을 사용한다.&lt;br>
이 기술을 통해 프로세서의 전체적인 성능을 크게 향상시킬 수 있지만, 효과적인 구현을 위해서는 복잡한 설계 고려사항들을 신중히 관리해야 한다.&lt;/p>
&lt;p>
&lt;img src="../Untitled-Diagram-618.png" alt="Structure of a Pipeline Processor" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/pipelined-architecture-with-its-diagram/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/pipelined-architecture-with-its-diagram/&lt;/a> _&lt;/p>
&lt;h3>파이프라이닝의 작동 원리&lt;span class="hx-absolute -hx-mt-20" id="파이프라이닝의-작동-원리">&lt;/span>
&lt;a href="#%ed%8c%8c%ec%9d%b4%ed%94%84%eb%9d%bc%ec%9d%b4%eb%8b%9d%ec%9d%98-%ec%9e%91%eb%8f%99-%ec%9b%90%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>파이프라이닝은 명령어 실행 과정을 여러 단계로 나누어 처리한다.&lt;br>
일반적인 파이프라인 단계는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>명령어 인출 (Instruction Fetch, IF)&lt;/li>
&lt;li>명령어 해독 (Instruction Decode, ID)&lt;/li>
&lt;li>실행 (Execution, EX)&lt;/li>
&lt;li>메모리 접근 (Memory Access, MEM)&lt;/li>
&lt;li>레지스터 쓰기 (Write Back, WB)&lt;br>
각 단계는 동시에 다른 명령어를 처리할 수 있어, 전체적인 처리 속도가 향상된다.&lt;/li>
&lt;/ol>
&lt;h3>파이프라이닝의 장점&lt;span class="hx-absolute -hx-mt-20" id="파이프라이닝의-장점">&lt;/span>
&lt;a href="#%ed%8c%8c%ec%9d%b4%ed%94%84%eb%9d%bc%ec%9d%b4%eb%8b%9d%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>처리량 증가&lt;/strong>: 여러 명령어를 동시에 처리하여 전체적인 처리량이 증가한다.&lt;/li>
&lt;li>&lt;strong>CPU 활용도 향상&lt;/strong>: 파이프라이닝을 통해 CPU의 각 부분이 지속적으로 활용되어 유휴 시간이 줄어든다.&lt;/li>
&lt;li>&lt;strong>클록 주파수 향상&lt;/strong>: 파이프라이닝을 사용하면 CPU의 산술 논리 장치를 더 빠르게 설계할 수 있다.&lt;/li>
&lt;li>&lt;strong>반복적 작업에서의 성능 향상&lt;/strong>: 특히 반복적인 작업에서 파이프라이닝의 효과가 두드러진다.&lt;/li>
&lt;/ol>
&lt;h3>파이프라이닝의 단점&lt;span class="hx-absolute -hx-mt-20" id="파이프라이닝의-단점">&lt;/span>
&lt;a href="#%ed%8c%8c%ec%9d%b4%ed%94%84%eb%9d%bc%ec%9d%b4%eb%8b%9d%ec%9d%98-%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>설계 복잡성&lt;/strong>: 파이프라인 프로세서의 설계가 더 복잡하고 제조 비용이 높다.&lt;/li>
&lt;li>&lt;strong>파이프라인 해저드&lt;/strong>: 데이터 의존성, 제어 흐름 변경, 자원 충돌 등으로 인한 파이프라인 해저드가 발생할 수 있다.&lt;/li>
&lt;li>&lt;strong>분기 예측의 어려움&lt;/strong>: 분기 명령어로 인해 파이프라인이 비워져야 할 때 성능 저하가 발생할 수 있다.&lt;/li>
&lt;li>&lt;strong>레이턴시 증가&lt;/strong>: 파이프라인 단계 사이에 플립플롭을 삽입함으로써 개별 명령어의 레이턴시가 증가할 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>파이프라이닝의 구현&lt;span class="hx-absolute -hx-mt-20" id="파이프라이닝의-구현">&lt;/span>
&lt;a href="#%ed%8c%8c%ec%9d%b4%ed%94%84%eb%9d%bc%ec%9d%b4%eb%8b%9d%ec%9d%98-%ea%b5%ac%ed%98%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>파이프라이닝을 구현할 때는 다음과 같은 요소들을 고려해야 한다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>파이프라인 깊이&lt;/strong>: 파이프라인 단계의 수를 결정한다. 더 많은 단계는 더 높은 처리량을 제공할 수 있지만, 해저드 관리가 더 복잡해진다.&lt;/li>
&lt;li>&lt;strong>해저드 관리&lt;/strong>: 데이터 의존성, 제어 흐름 변경, 자원 충돌 등의 해저드를 효과적으로 관리해야 한다.&lt;/li>
&lt;li>&lt;strong>분기 예측&lt;/strong>: 분기 명령어로 인한 성능 저하를 최소화하기 위해 효과적인 분기 예측 기법을 사용한다.&lt;/li>
&lt;li>&lt;strong>클록 주파수 최적화&lt;/strong>: 파이프라인 단계를 균형있게 설계하여 최적의 클록 주파수를 달성한다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>명령어 집합 구조 (Instruction Set Architecture)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/instruction-set-architecture/</link><pubDate>Tue, 14 Jan 2025 02:18:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/instruction-set-architecture/</guid><description>
&lt;h2>명령어 집합 구조 (Instruction Set Architecture)&lt;span class="hx-absolute -hx-mt-20" id="명령어-집합-구조-instruction-set-architecture">&lt;/span>
&lt;a href="#%eb%aa%85%eb%a0%b9%ec%96%b4-%ec%a7%91%ed%95%a9-%ea%b5%ac%ec%a1%b0-instruction-set-architecture" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>명령어 집합 구조(Instruction Set Architecture, ISA)는 프로세서 아키텍처의 핵심 요소로, 하드웨어와 소프트웨어 간의 인터페이스 역할을 한다.&lt;br>
ISA는 프로세서가 실행할 수 있는 명령어들의 집합을 정의하며, 프로그래머와 컴파일러 작성자에게 중요한 추상화 계층을 제공한다.&lt;/p>
&lt;p>
&lt;img src="../Untitled-Diagram1-1.png" alt="Instruction Set Architecture" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/microarchitecture-and-instruction-set-architecture/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/microarchitecture-and-instruction-set-architecture/&lt;/a> _&lt;/p>
&lt;h3>ISA의 주요 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="isa의-주요-구성-요소">&lt;/span>
&lt;a href="#isa%ec%9d%98-%ec%a3%bc%ec%9a%94-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>명령어 세트&lt;/p>
&lt;ul>
&lt;li>&lt;strong>연산 유형&lt;/strong>: 산술 연산, 논리 연산, 데이터 이동, 제어 흐름 등&lt;/li>
&lt;li>&lt;strong>명령어 형식&lt;/strong>: 각 명령어의 비트 구조와 인코딩 방식&lt;/li>
&lt;li>&lt;strong>주소 지정 모드&lt;/strong>: 직접 주소 지정, 간접 주소 지정, 즉시 주소 지정 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>레지스터&lt;/p>
&lt;ul>
&lt;li>&lt;strong>범용 레지스터&lt;/strong>: 데이터 처리와 임시 저장에 사용&lt;/li>
&lt;li>&lt;strong>특수 목적 레지스터&lt;/strong>: 프로그램 카운터(PC), 스택 포인터(SP) 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>메모리 모델&lt;span class="hx-absolute -hx-mt-20" id="메모리-모델">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%eb%aa%a8%eb%8d%b8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>주소 공간&lt;/strong>: 물리적/가상 메모리 주소 체계&lt;/li>
&lt;li>&lt;strong>정렬 요구사항&lt;/strong>: 데이터 접근 시 정렬 규칙&lt;/li>
&lt;/ul>
&lt;h3>데이터 타입&lt;span class="hx-absolute -hx-mt-20" id="데이터-타입">&lt;/span>
&lt;a href="#%eb%8d%b0%ec%9d%b4%ed%84%b0-%ed%83%80%ec%9e%85" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>기본 데이터 타입&lt;/strong>: 정수, 부동 소수점, 문자 등&lt;/li>
&lt;li>&lt;strong>벡터 데이터 타입&lt;/strong>: SIMD 연산을 위한 데이터 구조&lt;/li>
&lt;/ul>
&lt;h3>ISA의 분류&lt;span class="hx-absolute -hx-mt-20" id="isa의-분류">&lt;/span>
&lt;a href="#isa%ec%9d%98-%eb%b6%84%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>CISC (Complex Instruction Set Computing)&lt;/p>
&lt;ul>
&lt;li>&lt;strong>특징&lt;/strong>: 복잡하고 특화된 명령어들을 포함&lt;/li>
&lt;li>&lt;strong>장점&lt;/strong>: 강력한 단일 명령어로 복잡한 작업 수행 가능&lt;/li>
&lt;li>&lt;strong>예시&lt;/strong>: x86, x86-64&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>RISC (Reduced Instruction Set Computing)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;strong>특징&lt;/strong>: 단순하고 일반적인 명령어들로 구성&lt;/li>
&lt;li>&lt;strong>장점&lt;/strong>: 파이프라이닝과 병렬 처리에 유리
&lt;ul>
&lt;li>&lt;strong>예시&lt;/strong>: ARM, RISC-V, MIPS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3>ISA의 중요성&lt;span class="hx-absolute -hx-mt-20" id="isa의-중요성">&lt;/span>
&lt;a href="#isa%ec%9d%98-%ec%a4%91%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>소프트웨어 호환성&lt;/strong>: 동일한 ISA를 사용하는 프로세서들 간에 소프트웨어 호환성 보장&lt;/li>
&lt;li>&lt;strong>성능 최적화&lt;/strong>: ISA 설계는 프로세서의 성능과 효율성에 직접적인 영향을 미침&lt;/li>
&lt;li>&lt;strong>확장성&lt;/strong>: 새로운 기능이나 명령어를 추가하여 ISA를 확장할 수 있음&lt;/li>
&lt;li>&lt;strong>전력 효율성&lt;/strong>: 적절한 ISA 설계로 전력 소비를 최적화할 수 있음&lt;/li>
&lt;/ol>
&lt;h3>ISA 설계 시 고려사항&lt;span class="hx-absolute -hx-mt-20" id="isa-설계-시-고려사항">&lt;/span>
&lt;a href="#isa-%ec%84%a4%ea%b3%84-%ec%8b%9c-%ea%b3%a0%eb%a0%a4%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>명령어 길이&lt;/strong>: 고정 길이 vs. 가변 길이&lt;/li>
&lt;li>&lt;strong>엔디안(Endianness)&lt;/strong>: 데이터 저장 방식 (빅 엔디안 vs. 리틀 엔디안)&lt;/li>
&lt;li>&lt;strong>확장성&lt;/strong>: 향후 기능 추가를 위한 여유 공간 확보&lt;/li>
&lt;li>&lt;strong>메모리 일관성 모델&lt;/strong>: 멀티코어 시스템에서의 데이터 동기화 방식&lt;/li>
&lt;/ul>
&lt;h3>최신 ISA 동향&lt;span class="hx-absolute -hx-mt-20" id="최신-isa-동향">&lt;/span>
&lt;a href="#%ec%b5%9c%ec%8b%a0-isa-%eb%8f%99%ed%96%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>RISC-V&lt;/strong>: 오픈 소스 ISA로, 사용자 정의 확장이 가능한 모듈식 설계&lt;/li>
&lt;li>&lt;strong>벡터 연산 지원&lt;/strong>: AI와 머신 러닝 워크로드를 위한 벡터 연산 명령어 추가&lt;/li>
&lt;li>&lt;strong>보안 기능&lt;/strong>: 하드웨어 수준의 보안 기능 통합 (예: ARM의 TrustZone)&lt;/li>
&lt;li>&lt;strong>특화된 명령어&lt;/strong>: 특정 도메인(예: 암호화, 신호 처리)을 위한 전용 명령어 추가&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Harvard Architecture</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/harvard-architecture/</link><pubDate>Tue, 14 Jan 2025 01:51:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/harvard-architecture/</guid><description>
&lt;h2>Harvard Architecture&lt;span class="hx-absolute -hx-mt-20" id="harvard-architecture">&lt;/span>
&lt;a href="#harvard-architecture" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Von Neumann architecture</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/von-neumann-architecture/</link><pubDate>Tue, 14 Jan 2025 01:51:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/processor-architecture/von-neumann-architecture/</guid><description>
&lt;h2>Von Neumann Architecture&lt;span class="hx-absolute -hx-mt-20" id="von-neumann-architecture">&lt;/span>
&lt;a href="#von-neumann-architecture" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Von Neumann architecture는 1945년 John von Neumann이 제안한 컴퓨터 아키텍처로, 현대 대부분의 컴퓨터 시스템의 기본이 되는 설계이다.&lt;/p>
&lt;p>
&lt;img src="../Von_Neumann_architecture_basic_structure.png" alt="" loading="lazy" />&lt;/p>
&lt;h3>특징&lt;span class="hx-absolute -hx-mt-20" id="특징">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>순차적 실행:&lt;/p>
&lt;ul>
&lt;li>명령어를 메모리에서 한 번에 하나씩 순차적으로 가져와 실행&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>레지스터:&lt;/p>
&lt;ul>
&lt;li>프로그램 카운터 (PC): 다음 실행할 명령어의 주소 저장&lt;/li>
&lt;li>명령어 레지스터 (CIR): 현재 실행 중인 명령어 저장&lt;/li>
&lt;li>메모리 주소 레지스터 (MAR): 접근할 메모리 주소 저장&lt;/li>
&lt;li>메모리 데이터 레지스터 (MDR): 메모리와 주고받는 데이터 저장&lt;/li>
&lt;li>누산기 (Accumulator): 연산 결과 임시 저장&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>버스 시스템:&lt;/p>
&lt;ul>
&lt;li>데이터 버스: CPU와 메모리, 입출력 장치 간 데이터 전송&lt;/li>
&lt;li>주소 버스: 메모리 주소 전송&lt;/li>
&lt;li>제어 버스: 제어 신호 전송&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Fetch-Decode-Execute 사이클:&lt;/p>
&lt;ul>
&lt;li>명령어 인출 (Fetch)&lt;/li>
&lt;li>명령어 해독 (Decode)&lt;/li>
&lt;li>명령어 실행 (Execute)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>핵심 구성 요소&lt;span class="hx-absolute -hx-mt-20" id="핵심-구성-요소">&lt;/span>
&lt;a href="#%ed%95%b5%ec%8b%ac-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>제어 장치 (Control Unit):&lt;/p>
&lt;ul>
&lt;li>프로그램의 명령어를 해석하고 실행을 제어한다.&lt;/li>
&lt;li>다른 모든 구성 요소들의 동작을 조정한다.&lt;/li>
&lt;li>마치 오케스트라의 지휘자와 같은 역할을 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>산술 논리 장치 (Arithmetic Logic Unit, ALU):&lt;/p>
&lt;ul>
&lt;li>실제 계산과 논리 연산을 수행한다.&lt;/li>
&lt;li>덧셈, 뺄셈, 곱셈, 나눗셈과 같은 수학적 연산을 처리한다.&lt;/li>
&lt;li>AND, OR, NOT과 같은 논리 연산도 수행한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>메모리 (Memory):&lt;/p>
&lt;ul>
&lt;li>프로그램과 데이터를 모두 저장한다.&lt;/li>
&lt;li>각 메모리 위치는 고유한 주소를 가진다.&lt;/li>
&lt;li>현대 컴퓨터에서는 RAM이 이 역할을 담당한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>입력 장치 (Input Devices):&lt;/p>
&lt;ul>
&lt;li>외부로부터 데이터를 받아들인다.&lt;/li>
&lt;li>키보드, 마우스, 스캐너 등이 해당된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>출력 장치 (Output Devices):&lt;/p>
&lt;ul>
&lt;li>처리된 결과를 외부로 전달한다.&lt;/li>
&lt;li>모니터, 프린터, 스피커 등이 해당된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>작동 방식&lt;span class="hx-absolute -hx-mt-20" id="작동-방식">&lt;/span>
&lt;a href="#%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>폰 노이만 아키텍처의 작동 과정을 단계별로 살펴보자:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>명령어 인출 (Fetch):&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>Program Counter → Memory Address
Memory → Instruction Register&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>프로그램 카운터가 가리키는 메모리 주소에서 다음 실행할 명령어를 가져온다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>명령어 해석 (Decode):&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>Control Unit analyzes instruction:
- Operation to perform
- Data locations
- Next instruction&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>제어 장치가 명령어를 해석하여 수행할 작업을 결정한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>실행 (Execute):&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>ALU performs operation:
IF addition:
result = operand1 &amp;#43; operand2
ELSE IF comparison:
result = compare(operand1, operand2)
…&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>ALU나 다른 하드웨어 구성 요소가 명령어를 실행한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>저장 (Store):&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>IF result needs storing:
Memory[destination] = result
Program Counter &amp;#43;= instruction_length&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>결과를 메모리에 저장하고 다음 명령어로 이동한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>폰 노이만 아키텍처의 특징과 장단점&lt;span class="hx-absolute -hx-mt-20" id="폰-노이만-아키텍처의-특징과-장단점">&lt;/span>
&lt;a href="#%ed%8f%b0-%eb%85%b8%ec%9d%b4%eb%a7%8c-%ec%95%84%ed%82%a4%ed%85%8d%ec%b2%98%ec%9d%98-%ed%8a%b9%ec%a7%95%ea%b3%bc-%ec%9e%a5%eb%8b%a8%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>장점:&lt;/p>
&lt;ol>
&lt;li>단순성: 명확한 구조로 인해 설계와 구현이 비교적 단순하다.&lt;/li>
&lt;li>유연성: 프로그램을 쉽게 수정하고 업데이트할 수 있다.&lt;/li>
&lt;li>범용성: 다양한 종류의 프로그램을 실행할 수 있다.&lt;/li>
&lt;/ol>
&lt;p>단점:&lt;/p>
&lt;ol>
&lt;li>폰 노이만 병목 현상: 메모리와 처리 장치 사이의 단일 통로로 인한 성능 제한이 있다.&lt;/li>
&lt;li>순차적 실행: 명령어가 순차적으로 실행되어 병렬 처리가 제한된다.&lt;/li>
&lt;li>저장 프로그램 개념:
&lt;ul>
&lt;li>프로그램과 데이터를 동일한 메모리에 저장&lt;/li>
&lt;li>이로 인해 프로그램의 수정과 실행이 용이해짐&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>현대적 발전과 적용&lt;span class="hx-absolute -hx-mt-20" id="현대적-발전과-적용">&lt;/span>
&lt;a href="#%ed%98%84%eb%8c%80%ec%a0%81-%eb%b0%9c%ec%a0%84%ea%b3%bc-%ec%a0%81%ec%9a%a9" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>현대 컴퓨터는 기본적으로 폰 노이만 아키텍처를 따르지만, 여러 가지 개선 사항을 도입했다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>캐시 메모리:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>Memory Hierarchy:
L1 Cache (Fastest, Smallest)
L2 Cache
L3 Cache
RAM (Main Memory)
Hard Drive (Storage)&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>파이프라이닝:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>Instruction Pipeline:
Fetch → Decode → Execute → Store
Fetch → Decode → Execute → Store
Fetch → Decode → Execute → Store&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>병렬 처리:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;pre>&lt;code>Multiple Cores:
Core 1: Instruction Stream 1
Core 2: Instruction Stream 2
Core N: Instruction Stream N&lt;/code>&lt;/pre>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Kernel</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/kernel/</link><pubDate>Sun, 15 Dec 2024 16:06:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/kernel/</guid><description>
&lt;h2>커널 (Kernel)&lt;span class="hx-absolute -hx-mt-20" id="커널-kernel">&lt;/span>
&lt;a href="#%ec%bb%a4%eb%84%90-kernel" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>운영 체제의 커널은 컴퓨터 시스템의 핵심 구성 요소로, 하드웨어와 소프트웨어 간의 중개자 역할을 수행하며, 시스템의 가장 핵심적인 기능들을 담당한다.&lt;br>
일반 사용자가 직접 접근할 수 없는 커널은 운영체제의 가장 하위 계층에 위치하여 시스템의 안정성과 보안을 보장한다.&lt;/p>
&lt;p>&lt;img src="ditaa-12614a4afe93c9e1ae68861a79f14afe4f3e4b3e.png" alt="Kernel" loading="lazy" />&lt;br>
&lt;em>Source: &lt;a href="https://linux-kernel-labs.github.io/refs/pull/183/merge/lectures/intro.html" target="_blank" rel="noopener">https://linux-kernel-labs.github.io/refs/pull/183/merge/lectures/intro.html&lt;/a>&lt;/em>&lt;/p>
&lt;p>커널은 운영 체제의 핵심으로, 컴퓨터 시스템의 효율적인 운영과 관리를 담당하는 중요한 구성 요소이다.&lt;br>
현대의 복잡한 컴퓨팅 환경에서 커널의 역할은 더욱 중요해지고 있으며, 지속적인 발전과 최적화가 이루어지고 있다.&lt;/p>
&lt;p>장점:&lt;/p>
&lt;ul>
&lt;li>하드웨어 자원의 효율적 관리&lt;/li>
&lt;li>시스템의 안정성과 보안성 향상&lt;/li>
&lt;li>응용 프로그램 개발의 용이성 제공&lt;/li>
&lt;/ul>
&lt;p>단점:&lt;/p>
&lt;ul>
&lt;li>복잡성으로 인한 개발 및 유지보수의 어려움&lt;/li>
&lt;li>단일형 커널의 경우 한 부분의 오류가 전체 시스템에 영향을 줄 수 있음&lt;/li>
&lt;/ul>
&lt;h3>커널의 정의와 역할&lt;span class="hx-absolute -hx-mt-20" id="커널의-정의와-역할">&lt;/span>
&lt;a href="#%ec%bb%a4%eb%84%90%ec%9d%98-%ec%a0%95%ec%9d%98%ec%99%80-%ec%97%ad%ed%95%a0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>커널은 운영 체제의 가장 핵심적인 부분으로, 항상 메모리에 상주하며 다음과 같은 역할을 수행한다:&lt;/p>
&lt;ol>
&lt;li>하드웨어 자원 관리: CPU, 메모리, 입출력 장치 등의 하드웨어 자원을 효율적으로 관리한다.&lt;/li>
&lt;li>프로세스 관리: 프로세스의 생성, 실행, 종료 및 스케줄링을 담당한다.&lt;/li>
&lt;li>메모리 관리: 프로세스에 메모리를 할당하고 가상 메모리를 관리한다.&lt;/li>
&lt;li>파일 시스템 관리: 데이터의 저장과 접근을 위한 인터페이스를 제공한다.&lt;/li>
&lt;li>입출력 관리: 다양한 입출력 장치와의 통신을 관리한다.&lt;/li>
&lt;li>프로세스 간 통신 관리: 프로세스 간의 데이터 교환과 동기화를 지원한다.&lt;/li>
&lt;/ol>
&lt;h3>커널의 종류&lt;span class="hx-absolute -hx-mt-20" id="커널의-종류">&lt;/span>
&lt;a href="#%ec%bb%a4%eb%84%90%ec%9d%98-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>커널은 구조에 따라 여러 종류로 나눌 수 있다:&lt;/p>
&lt;ol>
&lt;li>단일형 커널(Monolithic Kernel): 모든 시스템 서비스가 하나의 큰 커널 안에서 동작한다.&lt;br>
예: Linux, Unix&lt;/li>
&lt;li>마이크로커널(Microkernel): 최소한의 기능만 커널에 포함하고, 나머지는 사용자 공간에서 실행된다.&lt;/li>
&lt;li>혼합형 커널(Hybrid Kernel): 단일형과 마이크로커널의 특징을 결합한 형태&lt;/li>
&lt;li>엑소커널(Exokernel): 하드웨어 자원에 대한 최소한의 추상화만 제공한다.&lt;/li>
&lt;/ol>
&lt;h3>커널의 동작 방식&lt;span class="hx-absolute -hx-mt-20" id="커널의-동작-방식">&lt;/span>
&lt;a href="#%ec%bb%a4%eb%84%90%ec%9d%98-%eb%8f%99%ec%9e%91-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>커널은 다음과 같은 방식으로 동작한다:&lt;/p>
&lt;ol>
&lt;li>시스템 콜 인터페이스: 응용 프로그램이 커널의 기능을 사용할 수 있게 해주는 인터페이스.&lt;/li>
&lt;li>보호 모드: 커널 모드와 사용자 모드로 나누어 시스템 자원을 보호한다.&lt;/li>
&lt;li>하드웨어 추상화: 다양한 하드웨어를 일관된 방식으로 다룰 수 있게 해준다.&lt;/li>
&lt;/ol>
&lt;h3>커널의 보호 메커니즘&lt;span class="hx-absolute -hx-mt-20" id="커널의-보호-메커니즘">&lt;/span>
&lt;a href="#%ec%bb%a4%eb%84%90%ec%9d%98-%eb%b3%b4%ed%98%b8-%eb%a9%94%ec%bb%a4%eb%8b%88%ec%a6%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>보호 링(protection ring)&lt;span class="hx-absolute -hx-mt-20" id="보호-링protection-ring">&lt;/span>
&lt;a href="#%eb%b3%b4%ed%98%b8-%eb%a7%81protection-ring" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>운영체제에서 시스템 자원과 하드웨어에 대한 접근을 제어하고 보호하기 위한 계층적 보안 메커니즘.&lt;br>
이 메커니즘은 컴퓨터 시스템의 안정성과 보안성을 향상시키는 데 중요한 역할을 한다.&lt;/p>
&lt;p>보호 링은 CPU의 권한 상태를 나타내는 특권 레벨을 동심원 형태로 표현한 것이다.&lt;br>
이 구조는 다음과 같은 목적을 가진다:&lt;/p>
&lt;ol>
&lt;li>시스템 자원에 대한 접근 제어&lt;/li>
&lt;li>컴퓨터 보안 강화&lt;/li>
&lt;li>시스템 안정성 향상&lt;/li>
&lt;li>결함 내성 개선&lt;/li>
&lt;/ol>
&lt;h5>보호 링의 중요성&lt;span class="hx-absolute -hx-mt-20" id="보호-링의-중요성">&lt;/span>
&lt;a href="#%eb%b3%b4%ed%98%b8-%eb%a7%81%ec%9d%98-%ec%a4%91%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;ol>
&lt;li>보안 강화: 악의적인 프로그램이 중요한 시스템 자원에 직접 접근하는 것을 방지한다.&lt;/li>
&lt;li>안정성 향상: 사용자 애플리케이션의 오류가 전체 시스템에 영향을 미치는 것을 막는다.&lt;/li>
&lt;li>자원 관리: 운영체제가 시스템 자원을 효율적으로 관리할 수 있게 한다.&lt;/li>
&lt;li>호환성 유지: 다양한 하드웨어 플랫폼에서 일관된 보안 모델을 제공한다.&lt;/li>
&lt;/ol>
&lt;h5>보호 링의 작동 방식&lt;span class="hx-absolute -hx-mt-20" id="보호-링의-작동-방식">&lt;/span>
&lt;a href="#%eb%b3%b4%ed%98%b8-%eb%a7%81%ec%9d%98-%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;ol>
&lt;li>프로세스 실행 시 특정 링 레벨이 할당된다.&lt;/li>
&lt;li>각 링 레벨에 따라 실행 가능한 명령어와 접근 가능한 자원이 제한된다.&lt;/li>
&lt;li>하위 링에서 상위 링의 자원에 접근하려면 시스템 콜을 통해 요청해야 한다.&lt;/li>
&lt;li>운영체제는 권한 위반 시도를 감지하고 차단한다.&lt;/li>
&lt;/ol>
&lt;h5>보호 링의 구조&lt;span class="hx-absolute -hx-mt-20" id="보호-링의-구조">&lt;/span>
&lt;a href="#%eb%b3%b4%ed%98%b8-%eb%a7%81%ec%9d%98-%ea%b5%ac%ec%a1%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>일반적으로 보호 링은 0부터 3까지 4개의 레벨로 구성된다:&lt;/p>
&lt;ul>
&lt;li>Ring 0 (가장 높은 권한)
&lt;ul>
&lt;li>운영체제 커널&lt;/li>
&lt;li>드라이버 관리&lt;/li>
&lt;li>하드웨어 직접 접근&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ring 1
&lt;ul>
&lt;li>장치 드라이버&lt;/li>
&lt;li>일부 시스템 서비스&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ring 2
&lt;ul>
&lt;li>장치 드라이버&lt;/li>
&lt;li>특권 유틸리티&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ring 3 (가장 낮은 권한)
&lt;ul>
&lt;li>사용자 애플리케이션&lt;/li>
&lt;li>일반 프로그램&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>숫자가 낮을수록 더 높은 권한을 가지며, 상위 링은 하위 링의 모든 권한을 포함한다.&lt;/p>
&lt;h4>시스템 호출(system call)&lt;span class="hx-absolute -hx-mt-20" id="시스템-호출system-call">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%ed%98%b8%ec%b6%9csystem-call" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>운영체제의 커널이 제공하는 서비스를 사용자 프로그램이 요청하는 방법.&lt;br>
사용자 프로그램이 직접 수행할 수 없는 보안이 필요한 작업들(파일 접근, 입출력 작업 등)을 운영체제에게 요청하여 수행하는 것이다.&lt;/p>
&lt;h5>중요성&lt;span class="hx-absolute -hx-mt-20" id="중요성">&lt;/span>
&lt;a href="#%ec%a4%91%ec%9a%94%ec%84%b1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>시스템 콜은 다음과 같은 이유로 중요하다.&lt;/p>
&lt;ol>
&lt;li>보안 강화: 사용자 프로그램의 직접적인 하드웨어 접근을 제한하여 시스템 보안을 강화한다.&lt;/li>
&lt;li>추상화 제공: 복잡한 하드웨어 동작을 간단한 인터페이스로 추상화하여 프로그래밍을 용이하게 한다.&lt;/li>
&lt;li>자원 관리: 운영체제가 시스템 자원을 효율적으로 관리할 수 있게 한다.&lt;/li>
&lt;li>호환성 유지: 다양한 하드웨어 플랫폼에서 일관된 인터페이스를 제공하여 소프트웨어의 호환성을 높인다.&lt;/li>
&lt;/ol>
&lt;h5>목적&lt;span class="hx-absolute -hx-mt-20" id="목적">&lt;/span>
&lt;a href="#%eb%aa%a9%ec%a0%81" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;ol>
&lt;li>하드웨어 자원 접근: 응용 프로그램이 파일 시스템, 네트워크 장치, 기타 하드웨어 등에 안전하게 접근할 수 있도록 한다.&lt;/li>
&lt;li>보안 유지: 사용자 프로그램이 직접 시스템 자원에 접근하는 것을 방지하여 시스템의 안정성과 보안을 유지한다.&lt;/li>
&lt;li>추상화 제공: 복잡한 하드웨어 동작을 간단한 인터페이스로 추상화하여 프로그래머의 작업을 용이하게 한다.&lt;/li>
&lt;/ol>
&lt;h5>작동 방식&lt;span class="hx-absolute -hx-mt-20" id="작동-방식">&lt;/span>
&lt;a href="#%ec%9e%91%eb%8f%99-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>시스템 콜이 호출되면 다음과 같은 과정이 진행된다:&lt;/p>
&lt;ol>
&lt;li>응용 프로그램이 시스템 콜을 호출한다.&lt;/li>
&lt;li>프로세서가 사용자 모드에서 커널 모드로 전환된다.&lt;/li>
&lt;li>커널이 요청된 서비스를 수행한다.&lt;/li>
&lt;li>서비스 완료 후, 프로세서가 다시 사용자 모드로 전환된다.&lt;/li>
&lt;li>응용 프로그램이 실행을 계속한다.&lt;/li>
&lt;/ol>
&lt;h5>주요 시스템 콜 유형&lt;span class="hx-absolute -hx-mt-20" id="주요-시스템-콜-유형">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ec%8b%9c%ec%8a%a4%ed%85%9c-%ec%bd%9c-%ec%9c%a0%ed%98%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h5>&lt;p>시스템 콜은 다음과 같은 주요 유형으로 분류될 수 있다:&lt;/p>
&lt;ol>
&lt;li>프로세스 제어: 프로세스 생성, 종료, 대기 등 (예: fork(), exit(), wait())&lt;/li>
&lt;li>파일 관리: 파일 열기, 읽기, 쓰기, 닫기 등 (예: open(), read(), write(), close())&lt;/li>
&lt;li>장치 관리: 장치 연결, 해제, 읽기, 쓰기 등&lt;/li>
&lt;li>정보 유지: 시간, 날짜 설정, 시스템 데이터 획득 등&lt;/li>
&lt;li>통신: 프로세스 간 통신, 네트워크 통신 등&lt;/li>
&lt;/ol>
&lt;h3>커널의 발전과 현대적 특징&lt;span class="hx-absolute -hx-mt-20" id="커널의-발전과-현대적-특징">&lt;/span>
&lt;a href="#%ec%bb%a4%eb%84%90%ec%9d%98-%eb%b0%9c%ec%a0%84%ea%b3%bc-%ed%98%84%eb%8c%80%ec%a0%81-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>실시간 성능:&lt;br>
현대의 커널들은 실시간 처리 능력을 강화하고 있다.&lt;br>
특히 임베디드 시스템이나 산업용 제어 시스템에서는 이러한 특성이 매우 중요하다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>가상화 지원:&lt;br>
하드웨어 가상화를 지원하여 여러 운영체제를 동시에 실행할 수 있게 한다.&lt;br>
이는 클라우드 컴퓨팅의 기반이 되었다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>전력 관리:&lt;br>
현대의 커널은 CPU 주파수 조절, 디바이스 전원 관리 등을 통해 에너지 효율성을 최적화한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>커널의 발전 방향 커널은 계속해서 진화하고 있으며, 특히 다음과 같은 방향으로 발전하고 있다:&lt;/p>
&lt;ol>
&lt;li>보안 강화: 새로운 보안 위협에 대응하기 위한 기능 강화&lt;/li>
&lt;li>확장성 개선: 더 많은 코어와 더 큰 메모리를 효율적으로 관리&lt;/li>
&lt;li>실시간 성능 향상: 더 빠른 응답 시간과 예측 가능한 성능 제공&lt;/li>
&lt;li>클라우드 최적화: 가상화와 컨테이너 지원 강화&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>동기(Synchronous)와 비동기(Asynchronous) 그리고 Blocking와 Non-Blocking</title><link>https://buenhyden.github.io/til/2024/11/synchronous-and-asynchronous-and-blocking-and-non-blocking/</link><pubDate>Sun, 17 Nov 2024 12:30:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/11/synchronous-and-asynchronous-and-blocking-and-non-blocking/</guid><description>
&lt;h2>동기(Synchronous)와 비동기(Asynchronous) 그리고 Blocking와 Non-Blocking&lt;span class="hx-absolute -hx-mt-20" id="동기synchronous와-비동기asynchronous-그리고-blocking와-non-blocking">&lt;/span>
&lt;a href="#%eb%8f%99%ea%b8%b0synchronous%ec%99%80-%eb%b9%84%eb%8f%99%ea%b8%b0asynchronous-%ea%b7%b8%eb%a6%ac%ea%b3%a0-blocking%ec%99%80-non-blocking" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>카테고리&lt;/th>
&lt;th>동기(Synchronous)&lt;/th>
&lt;th>비동기(Asynchronous)&lt;/th>
&lt;th>Blocking&lt;/th>
&lt;th>Non-Blocking&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>핵심 개념&lt;/strong>&lt;/td>
&lt;td>작업이 순차적으로 실행되며, 이전 작업이 완료될 때까지 다음 작업을 시작하지 않음&lt;/td>
&lt;td>작업들이 독립적으로 실행되며, 이전 작업의 완료를 기다리지 않고 다음 작업 수행 가능&lt;/td>
&lt;td>호출된 함수가 작업을 완료할 때까지 제어권을 반환하지 않음&lt;/td>
&lt;td>호출된 함수가 작업 완료 여부와 관계없이 즉시 제어권을 반환함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>작업 처리 방식&lt;/strong>&lt;/td>
&lt;td>순차적으로 작업을 처리하며, 각 작업이 완료된 후 다음 작업 시작&lt;/td>
&lt;td>여러 작업이 동시에 처리될 수 있으며, 작업 완료 순서는 불확실할 수 있음&lt;/td>
&lt;td>호출한 함수는 작업이 완료될 때까지 대기 상태 유지&lt;/td>
&lt;td>호출한 함수는 작업 진행 중에도 다른 작업 수행 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>제어 흐름&lt;/strong>&lt;/td>
&lt;td>프로그램의 제어 흐름이 순차적이고 예측 가능함&lt;/td>
&lt;td>제어 흐름이 비선형적이며, 콜백이나 이벤트로 처리&lt;/td>
&lt;td>제어권이 호출된 함수에 완전히 넘어감&lt;/td>
&lt;td>제어권이 호출한 함수에 즉시 반환됨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>결과 처리&lt;/strong>&lt;/td>
&lt;td>작업 완료 후 바로 결과를 반환받아 처리&lt;/td>
&lt;td>콜백 함수, Promise, async/await 등을 통해 결과 처리&lt;/td>
&lt;td>결과를 직접 반환받아 처리&lt;/td>
&lt;td>상태 확인이나 콜백을 통해 결과 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주요 특징&lt;/strong>&lt;/td>
&lt;td>- 코드의 실행 순서가 명확함&lt;br>- 직관적인 코드 흐름&lt;br>- 단순한 구현&lt;/td>
&lt;td>- 작업의 병렬 처리 가능&lt;br>- 복잡한 이벤트 처리&lt;br>- 높은 확장성&lt;/td>
&lt;td>- 자원을 점유하며 대기&lt;br>- 단순한 구현&lt;br>- 예측 가능한 실행&lt;/td>
&lt;td>- 자원의 효율적 활용&lt;br>- 복잡한 구현&lt;br>- 높은 동시성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>에러 처리&lt;/strong>&lt;/td>
&lt;td>try-catch 블록으로 즉시 에러 처리 가능&lt;/td>
&lt;td>Promise의 catch나 async/await의 try-catch로 처리&lt;/td>
&lt;td>동기적 에러 처리 가능&lt;/td>
&lt;td>비동기적 에러 처리 메커니즘 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>성능 특성&lt;/strong>&lt;/td>
&lt;td>- 단순 작업에서 오버헤드 적음&lt;br>- 순차 처리로 인한 대기 시간 발생&lt;/td>
&lt;td>- 동시 처리로 인한 전체 처리 시간 감소&lt;br>- 컨텍스트 스위칭 오버헤드&lt;/td>
&lt;td>- I/O 작업에서 성능 저하&lt;br>- 리소스 독점&lt;/td>
&lt;td>- 리소스 효율적 활용&lt;br>- 높은 처리량&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>적합한 사용 사례&lt;/strong>&lt;/td>
&lt;td>- 간단한 계산 작업&lt;br>- 메모리 내 데이터 처리&lt;br>- 순차적 처리 필요 작업&lt;/td>
&lt;td>- 네트워크 요청&lt;br>- 대용량 파일 처리&lt;br>- 독립적 실행 가능 작업&lt;/td>
&lt;td>- CPU 연산 작업&lt;br>- 간단한 파일 작업&lt;br>- 메모리 작업&lt;/td>
&lt;td>- I/O 작업&lt;br>- 네트워크 통신&lt;br>- 대용량 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>실행 순서&lt;/strong>&lt;/td>
&lt;td>코드 작성 순서와 실행 순서가 동일&lt;/td>
&lt;td>실행 순서가 코드 작성 순서와 다를 수 있음&lt;/td>
&lt;td>작업 완료 순서가 예측 가능&lt;/td>
&lt;td>작업 완료 순서가 불확실&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>자원 활용&lt;/strong>&lt;/td>
&lt;td>단일 자원을 순차적으로 사용&lt;/td>
&lt;td>여러 자원을 동시에 효율적으로 활용&lt;/td>
&lt;td>자원을 독점적으로 사용&lt;/td>
&lt;td>자원을 공유하여 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>응답성&lt;/strong>&lt;/td>
&lt;td>작업 완료 전까지 다른 작업 불가&lt;/td>
&lt;td>여러 작업의 동시 처리로 높은 응답성&lt;/td>
&lt;td>대기 시간 동안 응답 불가&lt;/td>
&lt;td>지속적인 응답 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>디버깅&lt;/strong>&lt;/td>
&lt;td>코드 흐름 추적이 용이함&lt;/td>
&lt;td>비동기 로직으로 인한 디버깅 어려움&lt;/td>
&lt;td>문제 발생 지점 파악 쉬움&lt;/td>
&lt;td>문제 발생 지점 추적 어려움&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>확장성&lt;/strong>&lt;/td>
&lt;td>수직적 확장에 제한적&lt;/td>
&lt;td>수평적/수직적 확장 용이&lt;/td>
&lt;td>동시 처리 능력 제한적&lt;/td>
&lt;td>높은 동시성 처리 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>데이터 일관성&lt;/strong>&lt;/td>
&lt;td>데이터 일관성 보장이 쉬움&lt;/td>
&lt;td>경쟁 조건 고려 필요&lt;/td>
&lt;td>순차적 처리로 일관성 보장&lt;/td>
&lt;td>동시성 제어 메커니즘 필요&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>추가적인 고려사항:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>시스템 설계 시 고려사항:&lt;/p>
&lt;ul>
&lt;li>시스템의 목적과 요구사항&lt;/li>
&lt;li>예상되는 부하와 처리량&lt;/li>
&lt;li>확장성 요구사항&lt;/li>
&lt;li>유지보수 용이성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 최적화:&lt;/p>
&lt;ul>
&lt;li>작업의 특성에 따른 적절한 방식 선택&lt;/li>
&lt;li>리소스 사용량 모니터링&lt;/li>
&lt;li>병목 현상 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>개발 복잡도:&lt;/p>
&lt;ul>
&lt;li>팀의 기술적 역량&lt;/li>
&lt;li>유지보수 가능성&lt;/li>
&lt;li>디버깅 용이성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>주요 차이점 분석&lt;span class="hx-absolute -hx-mt-20" id="주요-차이점-분석">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ec%b0%a8%ec%9d%b4%ec%a0%90-%eb%b6%84%ec%84%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>제어 흐름의 관점&lt;span class="hx-absolute -hx-mt-20" id="제어-흐름의-관점">&lt;/span>
&lt;a href="#%ec%a0%9c%ec%96%b4-%ed%9d%90%eb%a6%84%ec%9d%98-%ea%b4%80%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>동기/비동기는 &lt;strong>작업의 실행 순서와 완료 시점&lt;/strong>에 관한 것.&lt;br>
반면 Blocking/Non-Blocking은 제어권의 반환 시점에 관한 것이다.&lt;/p>
&lt;h4>성능과 자원 활용&lt;span class="hx-absolute -hx-mt-20" id="성능과-자원-활용">&lt;/span>
&lt;a href="#%ec%84%b1%eb%8a%a5%ea%b3%bc-%ec%9e%90%ec%9b%90-%ed%99%9c%ec%9a%a9" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>&lt;strong>동기&lt;/strong>: 순차적 실행으로 자원 사용이 효율적이지 않을 수 있다.&lt;/li>
&lt;li>&lt;strong>비동기&lt;/strong>: 병렬 처리로 자원을 효율적으로 활용할 수 있다.&lt;/li>
&lt;li>&lt;strong>Blocking&lt;/strong>: 대기 시간 동안 자원이 낭비될 수 있다.&lt;/li>
&lt;li>&lt;strong>Non-Blocking&lt;/strong>: 대기 시간을 다른 작업에 활용할 수 있다.&lt;/li>
&lt;/ul>
&lt;h4>구현 복잡도&lt;span class="hx-absolute -hx-mt-20" id="구현-복잡도">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84-%eb%b3%b5%ec%9e%a1%eb%8f%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>동기와 Blocking 방식은 구현이 상대적으로 단순한 반면, 비동기와 Non-Blocking 방식은 콜백이나 이벤트 처리 등으로 인해 구현이 복잡할 수 있다.&lt;/p>
&lt;h3>조합별 비교 및 예시&lt;span class="hx-absolute -hx-mt-20" id="조합별-비교-및-예시">&lt;/span>
&lt;a href="#%ec%a1%b0%ed%95%a9%eb%b3%84-%eb%b9%84%ea%b5%90-%eb%b0%8f-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>구분&lt;/th>
&lt;th>동기 + Blocking&lt;/th>
&lt;th>동기 + Non-Blocking&lt;/th>
&lt;th>비동기 + Blocking&lt;/th>
&lt;th>비동기 + Non-Blocking&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>특징&lt;/strong>&lt;/td>
&lt;td>- 가장 단순한 실행 모델&lt;br>- 직관적인 코드 흐름&lt;br>- 순차적 실행 보장&lt;/td>
&lt;td>- 동기적 실행 흐름 유지&lt;br>- 리소스 점유 최소화&lt;br>Polling 방식 사용&lt;/td>
&lt;td>- Promise나 async/await 사용&lt;br>- 실행 순서 보장&lt;br>- 비동기 작업 대기&lt;/td>
&lt;td>- 가장 유연한 실행 모델&lt;br>- 높은 리소스 활용도&lt;br>- 이벤트 기반 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>장점&lt;/strong>&lt;/td>
&lt;td>- 구현이 단순&lt;br>- 디버깅 용이&lt;br>- 결과 예측 쉬움&lt;/td>
&lt;td>- 리소스 효율성&lt;br>- 응답성 유지&lt;br>- 동기 코드 장점 유지&lt;/td>
&lt;td>- 비동기 코드의 동기적 처리&lt;br>- 에러 처리 용이&lt;br>- 코드 가독성 좋음&lt;/td>
&lt;td>- 최고의 성능&lt;br>- 높은 확장성&lt;br>- 리소스 효율적 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>단점&lt;/strong>&lt;/td>
&lt;td>- 리소스 비효율적&lt;br>- 성능 저하&lt;br>- 응답성 저하&lt;/td>
&lt;td>- 구현 복잡도 증가&lt;br>CPU 사용률 증가&lt;br>Polling 오버헤드&lt;/td>
&lt;td>- 스레드 블로킹&lt;br>- 병렬 처리 제한&lt;br>- 성능 제약&lt;/td>
&lt;td>- 복잡한 에러 처리&lt;br>- 디버깅 어려움&lt;br>- 콜백 지옥 가능성&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>적합한 시나리오&lt;/strong>&lt;/td>
&lt;td>- 단순한 계산 작업&lt;br>- 메모리 내 연산&lt;br>- 설정 파일 로딩&lt;/td>
&lt;td>- 주기적 상태 확인&lt;br>- 실시간 모니터링&lt;br>- 센서 데이터 처리&lt;/td>
&lt;td>- 순차적 API 호출&lt;br>- 데이터베이스 트랜잭션&lt;br>- 의존적 비동기 작업&lt;/td>
&lt;td>- 웹 서버&lt;br>- 실시간 애플리케이션&lt;br>- 대용량 I/O 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>주의사항&lt;/strong>&lt;/td>
&lt;td>- 긴 작업 시 시스템 블로킹&lt;br>- 타임아웃 처리 필요&lt;br>- 리소스 고려&lt;/td>
&lt;td>- 무한 루프 주의&lt;br>CPU 사용량 모니터링&lt;br>- 폴링 간격 최적화&lt;/td>
&lt;td>- 데드락 가능성&lt;br>- 메모리 누수 주의&lt;br>- 타임아웃 설정&lt;/td>
&lt;td>- 상태 관리 복잡성&lt;br>- 동시성 제어&lt;br>- 메모리 관리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>동작 방식&lt;/strong>&lt;/td>
&lt;td>- 순차적 실행&lt;br>- 작업 완료까지 대기&lt;br>- 직접 결과 반환&lt;/td>
&lt;td>- 상태 확인 루프&lt;br>- 작업 병행 처리&lt;br>- 폴링 기반 결과 확인&lt;/td>
&lt;td>- 비동기 호출 후 대기&lt;br>Promise 기반 처리&lt;br>await 사용&lt;/td>
&lt;td>- 이벤트 루프 활용&lt;br>- 콜백 기반 처리&lt;br>- 비동기 이벤트 처리&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>추가적인 구현 시 고려사항:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>에러 처리:&lt;/p>
&lt;ul>
&lt;li>동기 + Blocking: try-catch 직접 사용&lt;/li>
&lt;li>동기 + Non-Blocking: 상태 확인 시 에러 체크&lt;/li>
&lt;li>비동기 + Blocking: try-catch와 async/await 사용&lt;/li>
&lt;li>비동기 + Non-Blocking: 콜백의 에러 파라미터 처리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>성능 최적화:&lt;/p>
&lt;ul>
&lt;li>동기 + Blocking: 작업 크기 최소화&lt;/li>
&lt;li>동기 + Non-Blocking: 폴링 간격 최적화&lt;/li>
&lt;li>비동기 + Blocking: 병렬 처리 가능성 검토&lt;/li>
&lt;li>비동기 + Non-Blocking: 이벤트 루프 최적화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>리소스 관리:&lt;/p>
&lt;ul>
&lt;li>동기 + Blocking: 타임아웃 설정&lt;/li>
&lt;li>동기 + Non-Blocking: CPU 사용량 모니터링&lt;/li>
&lt;li>비동기 + Blocking: 메모리 누수 방지&lt;/li>
&lt;li>비동기 + Non-Blocking: 동시성 제어&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>각 조합의 선택은 애플리케이션의 요구사항, 성능 목표, 개발 팀의 역량 등을 종합적으로 고려하여 결정해야 한다.&lt;/p>
&lt;h4>예시&lt;span class="hx-absolute -hx-mt-20" id="예시">&lt;/span>
&lt;a href="#%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ol>
&lt;li>동기(Synchronous) + Blocking&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 동기 + Blocking 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">syncBlockingExample&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;1. 작업 시작&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 동기적으로 실행되며, 작업이 완료될 때까지 블로킹됨
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFileSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;utf8&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 파일 읽기가 완료된 후에만 실행됨
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2. 파일 내용:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 순차적으로 실행됨
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;3. 작업 완료&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="2">
&lt;li>동기(Synchronous) + Non-Blocking&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 동기 + Non-Blocking 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">syncNonBlockingExample&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;1. 작업 시작&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 동기적이지만 블로킹하지 않음
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 작업 상태 확인 (polling)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">checkOperationStatus&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 다른 작업 수행 가능
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">doOtherWork&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2. 결과:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;3. 작업 완료&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="3">
&lt;li>비동기(Asynchronous) + Blocking&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 비동기 + Blocking 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">asyncBlockingExample&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;1. 작업 시작&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 비동기 호출이지만 결과를 기다림 (블로킹)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resolve&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 비동기 작업 수행
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;작업 결과&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 블로킹되어 기다린 후 실행
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2. 결과:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;3. 작업 완료&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;ol start="4">
&lt;li>비동기(Asynchronous) + Non-Blocking&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 비동기 + Non-Blocking 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">asyncNonBlockingExample&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;1. 작업 시작&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 비동기 호출 후 즉시 반환
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;utf8&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;에러 발생:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 작업 완료 시 콜백으로 처리
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;3. 파일 내용:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 파일 읽기 작업과 독립적으로 실행됨
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2. 다른 작업 실행&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>적용 가이드라인&lt;span class="hx-absolute -hx-mt-20" id="적용-가이드라인">&lt;/span>
&lt;a href="#%ec%a0%81%ec%9a%a9-%ea%b0%80%ec%9d%b4%eb%93%9c%eb%9d%bc%ec%9d%b8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>동기 방식이 적합한 경우:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>작업의 순서가 중요한 경우&lt;/li>
&lt;li>데이터의 정합성이 중요한 경우&lt;/li>
&lt;li>간단한 스크립트나 배치 작업&lt;/li>
&lt;li>즉각적인 결과가 필요한 경우&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>비동기 방식이 적합한 경우:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>다중 사용자 처리가 필요한 경우&lt;/li>
&lt;li>긴 작업 시간이 예상되는 경우&lt;/li>
&lt;li>높은 처리량이 요구되는 경우&lt;/li>
&lt;li>실시간 데이터 처리가 필요한 경우&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>Blocking이 적합한 경우:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>간단한 I/O 작업&lt;/li>
&lt;li>리소스 사용량이 적은 경우&lt;/li>
&lt;li>즉각적인 응답이 필요한 경우&lt;/li>
&lt;li>단일 사용자 시스템&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>Non-Blocking이 적합한 경우:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>높은 동시성이 요구되는 경우&lt;/li>
&lt;li>대규모 I/O 작업 처리&lt;/li>
&lt;li>실시간 네트워크 애플리케이션&lt;/li>
&lt;li>고성능이 요구되는 서버&lt;/li>
&lt;/ul>
&lt;h3>최적화 전략&lt;span class="hx-absolute -hx-mt-20" id="최적화-전략">&lt;/span>
&lt;a href="#%ec%b5%9c%ec%a0%81%ed%99%94-%ec%a0%84%eb%9e%b5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>성능 최적화&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>작업의 특성에 따른 적절한 방식 선택&lt;/li>
&lt;li>리소스 사용량 모니터링&lt;/li>
&lt;li>타임아웃 설정&lt;/li>
&lt;li>에러 처리 메커니즘 구축&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>리소스 관리&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>메모리 사용량 관리&lt;/li>
&lt;li>스레드 풀 최적화&lt;/li>
&lt;li>커넥션 풀 관리&lt;/li>
&lt;li>캐시 활용&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Blocking vs Non-Blocking</title><link>https://buenhyden.github.io/til/2024/11/blocking-vs-non-blocking/</link><pubDate>Tue, 12 Nov 2024 12:36:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/11/blocking-vs-non-blocking/</guid><description>
&lt;h2>Blocking and Non-Blocking&lt;span class="hx-absolute -hx-mt-20" id="blocking-and-non-blocking">&lt;/span>
&lt;a href="#blocking-and-non-blocking" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Blocking과 Non-Blocking은 프로그램의 제어 흐름을 다루는 두 가지 주요 방식이다.&lt;br>
이 개념들은 I/O 작업, 프로세스 간 통신, 네트워크 통신 등 다양한 컴퓨팅 상황에서 중요한 역할을 한다.&lt;/p>
&lt;p>Blocking과 Non-Blocking의 주요 차이점은 제어권의 반환 시점이다.&lt;br>
Blocking은 작업이 완료될 때까지 제어권을 반환하지 않지만, Non-Blocking은 즉시 제어권을 반환한다.&lt;/p>
&lt;h3>Blocking&lt;span class="hx-absolute -hx-mt-20" id="blocking">&lt;/span>
&lt;a href="#blocking" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Blocking은 특정 작업이 완료될 때까지 프로그램의 제어권을 붙잡고 있는 상태를 의미한다.&lt;br>
해당 작업이 완료되기 전까지는 다음 작업으로 진행할 수 없다.&lt;/p>
&lt;h4>동작 방식&lt;span class="hx-absolute -hx-mt-20" id="동작-방식">&lt;/span>
&lt;a href="#%eb%8f%99%ec%9e%91-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ol>
&lt;li>프로세스가 특정 작업을 요청한다.&lt;/li>
&lt;li>해당 작업이 완료될 때까지 프로세스는 대기 상태에 들어간다.&lt;/li>
&lt;li>작업이 완료되면 프로세스는 다시 실행 상태로 전환된다.&lt;/li>
&lt;li>그동안 다른 작업은 수행될 수 없다.&lt;/li>
&lt;/ol>
&lt;h4>특징&lt;span class="hx-absolute -hx-mt-20" id="특징">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>프로그램의 실행 흐름이 순차적이고 예측 가능하다.&lt;/li>
&lt;li>리소스 사용이 일시적으로 중단된다.&lt;/li>
&lt;li>응답을 즉시 받을 수 있다.&lt;/li>
&lt;li>프로그램 구조가 단순하고 직관적이다.&lt;/li>
&lt;/ul>
&lt;h4>실제 예시&lt;span class="hx-absolute -hx-mt-20" id="실제-예시">&lt;/span>
&lt;a href="#%ec%8b%a4%ec%a0%9c-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Blocking I/O의 예시&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">File&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">File&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;example.txt&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">FileInputStream&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">FileInputStream&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1024&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bytesRead&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 이 지점에서 Blocking 발생&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">파일&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">읽기가&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">완료될&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">때까지&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">다음&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">코드로&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">진행하지&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">않음&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>성능 측면&lt;span class="hx-absolute -hx-mt-20" id="성능-측면">&lt;/span>
&lt;a href="#%ec%84%b1%eb%8a%a5-%ec%b8%a1%eb%a9%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>단일 작업의 처리 시간이 예측 가능하다.&lt;/li>
&lt;li>리소스 사용이 일시적으로 중단된다.&lt;/li>
&lt;li>대기 시간이 발생한다.&lt;/li>
&lt;/ul>
&lt;h4>구현 복잡도&lt;span class="hx-absolute -hx-mt-20" id="구현-복잡도">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84-%eb%b3%b5%ec%9e%a1%eb%8f%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>구현이 단순하다.&lt;/li>
&lt;li>디버깅이 쉽다.&lt;/li>
&lt;li>코드 흐름이 직관적이다.&lt;/li>
&lt;/ul>
&lt;h4>적합한 사례&lt;span class="hx-absolute -hx-mt-20" id="적합한-사례">&lt;/span>
&lt;a href="#%ec%a0%81%ed%95%a9%ed%95%9c-%ec%82%ac%eb%a1%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>간단한 스크립트 작성&lt;/li>
&lt;li>순차적 데이터 처리&lt;/li>
&lt;li>즉각적인 응답이 필요한 경우&lt;/li>
&lt;li>작은 규모의 애플리케이션&lt;/li>
&lt;/ul>
&lt;h3>Non-Blocking&lt;span class="hx-absolute -hx-mt-20" id="non-blocking">&lt;/span>
&lt;a href="#non-blocking" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>Non-Blocking은 작업의 완료 여부와 관계없이 프로그램이 계속 실행될 수 있는 상태를 의미한다.&lt;br>
작업의 완료를 기다리는 동안에도 다른 작업을 수행할 수 있다.&lt;/p>
&lt;h4>동작 방식&lt;span class="hx-absolute -hx-mt-20" id="동작-방식-1">&lt;/span>
&lt;a href="#%eb%8f%99%ec%9e%91-%eb%b0%a9%ec%8b%9d-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ol>
&lt;li>프로세스가 작업을 요청한다.&lt;/li>
&lt;li>작업의 완료 여부와 관계없이 즉시 제어권을 반환받는다.&lt;/li>
&lt;li>다른 작업을 계속 수행할 수 있다.&lt;/li>
&lt;li>작업이 완료되면 이벤트나 콜백을 통해 알림을 받는다.&lt;/li>
&lt;/ol>
&lt;h4>특징&lt;span class="hx-absolute -hx-mt-20" id="특징-1">&lt;/span>
&lt;a href="#%ed%8a%b9%ec%a7%95-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>프로그램의 실행이 중단되지 않는다.&lt;/li>
&lt;li>리소스를 효율적으로 사용할 수 있다.&lt;/li>
&lt;li>높은 동시성을 제공한다.&lt;/li>
&lt;li>복잡한 프로그램 구조가 필요할 수 있다.&lt;/li>
&lt;/ul>
&lt;h4>실제 예시&lt;span class="hx-absolute -hx-mt-20" id="실제-예시-1">&lt;/span>
&lt;a href="#%ec%8b%a4%ec%a0%9c-%ec%98%88%ec%8b%9c-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Non-Blocking I/O의 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 파일을 읽는 동안에도 다음 코드가 실행됨
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;파일 읽기를 요청했습니다.&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>성능 측면&lt;span class="hx-absolute -hx-mt-20" id="성능-측면-1">&lt;/span>
&lt;a href="#%ec%84%b1%eb%8a%a5-%ec%b8%a1%eb%a9%b4-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>전체적인 처리량이 향상된다.&lt;/li>
&lt;li>리소스를 지속적으로 활용할 수 있다.&lt;/li>
&lt;li>대기 시간을 다른 작업으로 활용한다.&lt;/li>
&lt;/ul>
&lt;h4>구현 복잡도&lt;span class="hx-absolute -hx-mt-20" id="구현-복잡도-1">&lt;/span>
&lt;a href="#%ea%b5%ac%ed%98%84-%eb%b3%b5%ec%9e%a1%eb%8f%84-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>구현이 복잡할 수 있다.&lt;/li>
&lt;li>디버깅이 어려울 수 있다.&lt;/li>
&lt;li>콜백이나 이벤트 핸들링이 필요하다.&lt;/li>
&lt;/ul>
&lt;h4>적합한 사례&lt;span class="hx-absolute -hx-mt-20" id="적합한-사례-1">&lt;/span>
&lt;a href="#%ec%a0%81%ed%95%a9%ed%95%9c-%ec%82%ac%eb%a1%80-1" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>대규모 네트워크 애플리케이션&lt;/li>
&lt;li>실시간 데이터 처리 시스템&lt;/li>
&lt;li>높은 동시성이 요구되는 서버&lt;/li>
&lt;li>사용자 인터페이스가 있는 애플리케이션&lt;/li>
&lt;/ul>
&lt;h3>Blocking과 Non-Blocking의 비교&lt;span class="hx-absolute -hx-mt-20" id="blocking과-non-blocking의-비교">&lt;/span>
&lt;a href="#blocking%ea%b3%bc-non-blocking%ec%9d%98-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>카테고리&lt;/th>
&lt;th>Blocking&lt;/th>
&lt;th>Non-Blocking&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>기본 개념&lt;/strong>&lt;/td>
&lt;td>- 호출된 함수가 자신의 작업을 완료할 때까지 제어권을 가지고 있음&lt;/td>
&lt;td>- 호출된 함수가 즉시 제어권을 반환함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 호출한 함수는 작업 완료까지 대기&lt;/td>
&lt;td>- 호출한 함수는 다른 작업을 계속 수행 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 실행 순서가 명확하고 예측 가능&lt;/td>
&lt;td>- 실행 순서가 비결정적일 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>제어권 처리&lt;/strong>&lt;/td>
&lt;td>- 제어권이 호출된 함수에 완전히 넘어감&lt;/td>
&lt;td>- 제어권이 호출한 함수에 즉시 반환됨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 작업 완료 전까지 제어권 반환 없음&lt;/td>
&lt;td>- 작업 상태는 별도로 확인 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 호출 스택이 차단됨&lt;/td>
&lt;td>- 호출 스택이 차단되지 않음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>리소스 관리&lt;/strong>&lt;/td>
&lt;td>- 작업 중 시스템 리소스를 독점&lt;/td>
&lt;td>- 리소스를 효율적으로 공유&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 메모리 사용량이 예측 가능&lt;/td>
&lt;td>- 동시성으로 인한 메모리 사용량 변동 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 리소스 해제가 명확함&lt;/td>
&lt;td>- 리소스 해제 시점 관리 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>성능 특성&lt;/strong>&lt;/td>
&lt;td>- 단순 작업에서는 오버헤드가 적음&lt;/td>
&lt;td>- 문맥 교환으로 인한 오버헤드 발생 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- I/O 작업에서 성능 저하&lt;/td>
&lt;td>- I/O 작업에서 높은 성능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 동시성 처리에 제한적&lt;/td>
&lt;td>- 높은 동시성 처리 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>에러 처리&lt;/strong>&lt;/td>
&lt;td>- 동기적 에러 처리 가능&lt;/td>
&lt;td>- 비동기적 에러 처리 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- try-catch로 직접적인 처리&lt;/td>
&lt;td>- 콜백이나 Promise로 에러 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 스택 트레이스가 명확함&lt;/td>
&lt;td>- 스택 트레이스 추적이 복잡할 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>적합한 사용 사례&lt;/strong>&lt;/td>
&lt;td>- 빠른 CPU 연산 작업&lt;/td>
&lt;td>- 네트워크 통신&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 간단한 파일 읽기/쓰기&lt;/td>
&lt;td>- 대용량 파일 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 메모리 내 데이터 처리&lt;/td>
&lt;td>- 데이터베이스 쿼리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 동기화가 필요한 작업&lt;/td>
&lt;td>- 독립적인 병렬 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>프로그래밍 모델&lt;/strong>&lt;/td>
&lt;td>- 절차적 프로그래밍에 적합&lt;/td>
&lt;td>- 이벤트 기반 프로그래밍에 적합&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 코드 흐름이 직관적&lt;/td>
&lt;td>- 콜백이나 Promise 기반&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 디버깅이 상대적으로 쉬움&lt;/td>
&lt;td>- 복잡한 비동기 패턴 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>시스템 확장성&lt;/strong>&lt;/td>
&lt;td>- 수직적 확장에 제한적&lt;/td>
&lt;td>- 수평적/수직적 확장 용이&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 동시 처리 능력 제한&lt;/td>
&lt;td>- 높은 동시성 지원&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 시스템 리소스 제약&lt;/td>
&lt;td>- 효율적인 리소스 활용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>개발 복잡도&lt;/strong>&lt;/td>
&lt;td>- 구현이 단순하고 직관적&lt;/td>
&lt;td>- 상태 관리가 필요함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 코드 흐름 추적이 쉬움&lt;/td>
&lt;td>- 비동기 로직으로 인한 복잡도 증가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 유지보수가 상대적으로 용이&lt;/td>
&lt;td>- 디버깅과 테스트가 어려울 수 있음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>실제 애플리케이션 개발에서는 각 작업의 특성과 요구사항을 고려하여 적절한 방식을 선택해야 한다.&lt;br>
특히:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>시스템의 응답성이 중요한 경우:&lt;/p>
&lt;ul>
&lt;li>Non-Blocking 방식이 더 적합할 수 있다.&lt;/li>
&lt;li>사용자 인터페이스의 반응성을 유지할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>정확성과 순서가 중요한 경우:&lt;/p>
&lt;ul>
&lt;li>Blocking 방식이 더 적합할 수 있다.&lt;/li>
&lt;li>작업의 순서와 결과를 정확히 제어할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>리소스 활용이 중요한 경우:&lt;/p>
&lt;ul>
&lt;li>Non-Blocking 방식이 시스템 리소스를 더 효율적으로 활용할 수 있다.&lt;/li>
&lt;li>높은 처리량이 필요한 시스템에 적합하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>이러한 특성들을 잘 이해하고 적절히 조합하여 사용하는 것이 현대 애플리케이션 개발에서 매우 중요하다.&lt;/p>
&lt;h3>최신 트렌드 및 발전 방향&lt;span class="hx-absolute -hx-mt-20" id="최신-트렌드-및-발전-방향">&lt;/span>
&lt;a href="#%ec%b5%9c%ec%8b%a0-%ed%8a%b8%eb%a0%8c%eb%93%9c-%eb%b0%8f-%eb%b0%9c%ec%a0%84-%eb%b0%a9%ed%96%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>시스템 설계 측면&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>하이브리드 접근 방식의 증가&lt;/li>
&lt;li>마이크로서비스 아키텍처에서의 활용&lt;/li>
&lt;li>클라우드 네이티브 환경에서의 최적화&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>프로그래밍 언어 측면&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>비동기 프로그래밍 지원 강화&lt;/li>
&lt;li>새로운 동시성 모델 도입&lt;/li>
&lt;li>효율적인 리소스 관리 메커니즘 개발&lt;/li>
&lt;/ul>
&lt;h3>실제 구현 시 고려사항&lt;span class="hx-absolute -hx-mt-20" id="실제-구현-시-고려사항">&lt;/span>
&lt;a href="#%ec%8b%a4%ec%a0%9c-%ea%b5%ac%ed%98%84-%ec%8b%9c-%ea%b3%a0%eb%a0%a4%ec%82%ac%ed%95%ad" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>시스템 설계 시 고려사항&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>작업의 특성과 요구사항 분석&lt;/li>
&lt;li>리소스 사용량 예측&lt;/li>
&lt;li>확장성 고려&lt;/li>
&lt;li>에러 처리 메커니즘 설계&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>성능 최적화&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>적절한 타임아웃 설정&lt;/li>
&lt;li>버퍼 크기 조정&lt;/li>
&lt;li>스레드 풀 관리&lt;/li>
&lt;li>메모리 사용량 모니터링&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>동기(Synchronous)와 비동기(Asynchronous)</title><link>https://buenhyden.github.io/til/2024/11/synchronous-and-asynchronous/</link><pubDate>Tue, 12 Nov 2024 00:57:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/11/synchronous-and-asynchronous/</guid><description>
&lt;h2>동기(Synchronous)와 비동기(Asynchronous)&lt;span class="hx-absolute -hx-mt-20" id="동기synchronous와-비동기asynchronous">&lt;/span>
&lt;a href="#%eb%8f%99%ea%b8%b0synchronous%ec%99%80-%eb%b9%84%eb%8f%99%ea%b8%b0asynchronous" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>카테고리&lt;/th>
&lt;th>동기(Synchronous)&lt;/th>
&lt;th>비동기(Asynchronous)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>기본 개념&lt;/strong>&lt;/td>
&lt;td>- 작업이 순차적으로 실행됨&lt;/td>
&lt;td>- 작업이 독립적으로 실행됨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 이전 작업이 완료될 때까지 다음 작업 대기&lt;/td>
&lt;td>- 작업의 완료를 기다리지 않고 다음 작업 진행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 실행 순서가 보장됨&lt;/td>
&lt;td>- 실행 순서가 보장되지 않음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>처리 방식&lt;/strong>&lt;/td>
&lt;td>- 단일 스레드에서 순차적 처리&lt;/td>
&lt;td>- 멀티 스레드 또는 이벤트 루프 기반 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 작업 완료까지 대기&lt;/td>
&lt;td>- 작업 완료 시 콜백/Promise/async-await 등으로 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 직관적인 코드 흐름&lt;/td>
&lt;td>- 비선형적 코드 흐름&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>장점&lt;/strong>&lt;/td>
&lt;td>- 코드의 가독성이 좋음&lt;/td>
&lt;td>- 시스템 자원의 효율적 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 디버깅이 용이함&lt;/td>
&lt;td>- 더 나은 사용자 경험 제공&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 에러 처리가 간단함&lt;/td>
&lt;td>- 높은 처리량(Throughput)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>단점&lt;/strong>&lt;/td>
&lt;td>- 시스템 자원 비효율적 사용&lt;/td>
&lt;td>- 코드의 복잡성 증가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 응답 시간이 길어질 수 있음&lt;/td>
&lt;td>- 디버깅이 어려움&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 사용자 경험 저하 가능성&lt;/td>
&lt;td>- 에러 처리가 복잡함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>적합한 사용 사례&lt;/strong>&lt;/td>
&lt;td>- 간단한 계산 작업&lt;/td>
&lt;td>- 네트워크 요청&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 메모리 내 데이터 처리&lt;/td>
&lt;td>- 파일 입출력&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 작은 크기의 데이터 처리&lt;/td>
&lt;td>- 대용량 데이터 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 순차적 처리가 필요한 작업&lt;/td>
&lt;td>- 독립적으로 실행 가능한 작업&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>에러 처리&lt;/strong>&lt;/td>
&lt;td>- try-catch 블록으로 직접 처리&lt;/td>
&lt;td>- Promise의 catch 또는 try-catch와 async-await 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 즉시 에러 감지 및 처리&lt;/td>
&lt;td>- 에러 처리가 비동기적으로 발생&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 스택 트레이스 추적이 용이&lt;/td>
&lt;td>- 에러 발생 지점 추적이 복잡할 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>성능 특성&lt;/strong>&lt;/td>
&lt;td>- CPU 집약적 작업에 유리&lt;/td>
&lt;td>- I/O 집약적 작업에 유리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 메모리 사용량이 예측 가능&lt;/td>
&lt;td>- 동시 처리로 인한 메모리 사용량 변동&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 단일 작업 처리 시간이 빠름&lt;/td>
&lt;td>- 전체 처리량 최적화에 유리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>코드 관리&lt;/strong>&lt;/td>
&lt;td>- 코드 구조가 단순함&lt;/td>
&lt;td>- 상태 관리가 필요함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 유지보수가 상대적으로 쉬움&lt;/td>
&lt;td>- 비동기 패턴에 대한 이해 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 테스트 작성이 용이함&lt;/td>
&lt;td>- 테스트 시나리오가 복잡할 수 있음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>리소스 활용&lt;/strong>&lt;/td>
&lt;td>- 단일 리소스 점유&lt;/td>
&lt;td>- 리소스의 효율적 분배&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 대기 시간 동안 블로킹&lt;/td>
&lt;td>- 대기 시간 동안 다른 작업 수행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>- 시스템 부하가 예측 가능&lt;/td>
&lt;td>- 동시성으로 인한 부하 변동 가능&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>최신 트렌드 및 발전 방향&lt;span class="hx-absolute -hx-mt-20" id="최신-트렌드-및-발전-방향">&lt;/span>
&lt;a href="#%ec%b5%9c%ec%8b%a0-%ed%8a%b8%eb%a0%8c%eb%93%9c-%eb%b0%8f-%eb%b0%9c%ec%a0%84-%eb%b0%a9%ed%96%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>동기 프로그래밍의 발전&lt;span class="hx-absolute -hx-mt-20" id="동기-프로그래밍의-발전">&lt;/span>
&lt;a href="#%eb%8f%99%ea%b8%b0-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%98%eb%b0%8d%ec%9d%98-%eb%b0%9c%ec%a0%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>코루틴(Coroutine) 도입&lt;/li>
&lt;li>제너레이터(Generator) 함수 활용&lt;/li>
&lt;li>구조적 동시성(Structured Concurrency) 개념 도입&lt;/li>
&lt;/ul>
&lt;h4>비동기 프로그래밍의 발전&lt;span class="hx-absolute -hx-mt-20" id="비동기-프로그래밍의-발전">&lt;/span>
&lt;a href="#%eb%b9%84%eb%8f%99%ea%b8%b0-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%98%eb%b0%8d%ec%9d%98-%eb%b0%9c%ec%a0%84" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>Promise와 async/await의 보편화&lt;/li>
&lt;li>반응형 프로그래밍(Reactive Programming)의 확산&lt;/li>
&lt;li>이벤트 기반 아키텍처의 발전&lt;/li>
&lt;li>비동기 스트림 처리 기술의 발전&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>동시성 (Concurrency)</title><link>https://buenhyden.github.io/posts/computer-system/system-execution-models/concurrency/</link><pubDate>Fri, 01 Nov 2024 06:51:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/concurrency/</guid><description>
&lt;h2>동시성 (Concurrency)&lt;span class="hx-absolute -hx-mt-20" id="동시성-concurrency">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1-concurrency" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>동시성 (Concurrency)은 여러 작업이 동시에 실행되는 것처럼 보이지만, 실제로는 매우 빠르게 작업 간 전환을 하면서 처리하는 방식이다. 예를 들어, 하나의 CPU 코어에서 여러 작업을 빠르게 번갈아가며 실행하여 마치 동시에 여러 작업이 처리되는 것처럼 보이게 만든다.&lt;/p>
&lt;p>&lt;img src="Concurrency.gif" alt="Concurrency" loading="lazy" />
_Source: &lt;a href="https://dynamogeeks.com/blog/concurrency-vs-parallelism-a-simplified-explanation" target="_blank" rel="noopener">https://dynamogeeks.com/blog/concurrency-vs-parallelism-a-simplified-explanation&lt;/a> _&lt;/p>
&lt;h3>동시성의 특징&lt;span class="hx-absolute -hx-mt-20" id="동시성의-특징">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1%ec%9d%98-%ed%8a%b9%ec%a7%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>논리적 개념&lt;/strong>: 동시성은 물리적으로 동시에 실행되는 것이 아닌, 논리적으로 동시에 실행되는 것처럼 보이게 하는 개념이다.&lt;/li>
&lt;li>&lt;strong>자원 효율성&lt;/strong>: CPU가 유휴 상태로 있지 않고 계속해서 작업을 처리하므로 시스템 자원을 효율적으로 사용할 수 있다.&lt;/li>
&lt;li>&lt;strong>응답성 향상&lt;/strong>: 여러 작업을 번갈아가며 처리하므로 전체적인 시스템의 응답성이 향상된다.&lt;/li>
&lt;/ol>
&lt;h3>동시성의 구현 방법&lt;span class="hx-absolute -hx-mt-20" id="동시성의-구현-방법">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1%ec%9d%98-%ea%b5%ac%ed%98%84-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>멀티스레딩&lt;/strong>: 하나의 프로세스 내에서 여러 스레드를 사용하여 작업을 동시에 처리한다.&lt;/li>
&lt;li>&lt;strong>비동기 프로그래밍&lt;/strong>: 작업을 비동기적으로 처리하여 한 작업이 완료되기를 기다리지 않고 다른 작업을 수행할 수 있게 한다.&lt;/li>
&lt;/ol>
&lt;h3>동시성의 장점&lt;span class="hx-absolute -hx-mt-20" id="동시성의-장점">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>성능 향상&lt;/strong>: 여러 작업을 동시에 처리함으로써 전체적인 처리 속도를 높일 수 있다.&lt;/li>
&lt;li>&lt;strong>자원 활용 최적화&lt;/strong>: CPU와 같은 시스템 자원을 최대한 활용할 수 있다.&lt;/li>
&lt;li>&lt;strong>사용자 경험 개선&lt;/strong>: 특히 UI 애플리케이션에서 동시성을 활용하면 사용자 반응성을 크게 향상시킬 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>동시성의 주의점&lt;span class="hx-absolute -hx-mt-20" id="동시성의-주의점">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1%ec%9d%98-%ec%a3%bc%ec%9d%98%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>복잡성 증가&lt;/strong>: 동시성 프로그래밍은 일반적인 순차적 프로그래밍보다 복잡할 수 있다.&lt;/li>
&lt;li>&lt;strong>동기화 문제&lt;/strong>: 여러 작업이 공유 자원에 동시에 접근할 때 발생할 수 있는 문제를 주의해야 한다.&lt;/li>
&lt;li>&lt;strong>디버깅의 어려움&lt;/strong>: 동시에 실행되는 작업들 간의 상호작용으로 인해 버그를 찾고 수정하기가 어려울 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>동시성의 실제 예시&lt;span class="hx-absolute -hx-mt-20" id="동시성의-실제-예시">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1%ec%9d%98-%ec%8b%a4%ec%a0%9c-%ec%98%88%ec%8b%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>&lt;strong>웹 브라우저&lt;/strong>: 여러 탭을 동시에 열어 각각 다른 웹페이지를 로드하면서 사용자 입력을 받는 것은 동시성의 좋은 예이다.&lt;/li>
&lt;li>&lt;strong>데이터베이스 시스템&lt;/strong>: 여러 사용자의 쿼리를 동시에 처리하는 데이터베이스 시스템도 동시성을 활용한다.&lt;/li>
&lt;/ol>
&lt;p>동시성은 현대 프로그래밍에서 매우 중요한 개념으로, 시스템의 성능을 향상시키고 사용자 경험을 개선하는 데 크게 기여한다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Concurrency vs Parallelism</title><link>https://buenhyden.github.io/til/2024/11/concurrency-vs-parallelism/</link><pubDate>Fri, 01 Nov 2024 02:38:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/11/concurrency-vs-parallelism/</guid><description>
&lt;h2>동시성 (Concurrency) Vs 병렬성 (Parallelism)&lt;span class="hx-absolute -hx-mt-20" id="동시성-concurrency-vs-병렬성-parallelism">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1-concurrency-vs-%eb%b3%91%eb%a0%ac%ec%84%b1-parallelism" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>동시성과 병렬성은 모두 여러 작업을 효율적으로 처리하기 위한 방법이지만, 그 접근 방식과 목적이 다르다.&lt;br>
동시성은 작업 관리와 응답성 향상에 중점을 두고, 병렬성은 전체적인 처리 속도 향상에 초점을 맞춘다.&lt;br>
실제 프로그래밍에서는 두 개념을 적절히 조합하여 사용하는 것이 효과적이다.&lt;/p>
&lt;p>
&lt;img src="../8e925d68-4f47-4ef9-8d51-6a39f19c75d2.jpg" alt="Concurrent vs Parallel" loading="lazy" />{: width=&amp;ldquo;700&amp;rdquo; height=&amp;ldquo;400&amp;rdquo; }&lt;br>
&lt;em>Source: &lt;a href="https://www.codeproject.com/Articles/1267757/Concurrency-vs-Parallelism" target="_blank" rel="noopener">https://www.codeproject.com/Articles/1267757/Concurrency-vs-Parallelism&lt;/a>&lt;/em>&lt;/p>
&lt;p>동시성(Concurrency)은 여러 작업이 동시에 진행되는 것처럼 보이게 하는 개념으로, 단일 코어에서도 구현이 가능하며, 실제로는 작업들을 빠르게 전환하며 실행한다. 그래서, 실제로는 동시에 실행되지 않지만, 동시에 실행되는 것처럼 보인다.&lt;br>
이러한 작업들은 CPU가 여러 작업들을 빠르게 번갈아가며 처리하며, 이를 &amp;ldquo;컨텍스트 스위칭(Context Switching)&amp;ldquo;이라고 한다.&lt;/p>
&lt;p>병렬성(Parallelism)은 여러 작업을 실제로 동시에 처리하는 개념으로, 여러 코어나 프로세서가 필요하며, 실제로 동시에 실행된다. 이로 인해 전체적인 처리 속도를 향상시킬 수 있다.&lt;br>
이러한 작업들은 여러 코어나 프로세서가 각각 독립적인 작업을 동시에 처리하며 각 작업은 서로 다른 하드웨어 자원을 사용한다.&lt;/p>
&lt;h3>동시성(Concurrency)과 병렬성(Parallelism) 비교&lt;span class="hx-absolute -hx-mt-20" id="동시성concurrency과-병렬성parallelism-비교">&lt;/span>
&lt;a href="#%eb%8f%99%ec%8b%9c%ec%84%b1concurrency%ea%b3%bc-%eb%b3%91%eb%a0%ac%ec%84%b1parallelism-%eb%b9%84%ea%b5%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>특성&lt;/th>
&lt;th>동시성 (Concurrency)&lt;/th>
&lt;th>병렬성 (Parallelism)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>여러 작업을 번갈아가며 실행하여 동시에 처리되는 것처럼 보이게 함&lt;/td>
&lt;td>여러 작업을 실제로 동시에 처리함&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실행 방식&lt;/td>
&lt;td>작업 간 빠른 전환 (Context Switching)&lt;/td>
&lt;td>실제 동시 실행&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>하드웨어 요구사항&lt;/td>
&lt;td>단일 코어로도 가능&lt;/td>
&lt;td>다중 코어 또는 프로세서 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>목적&lt;/td>
&lt;td>응답성 향상, 자원 효율성 증대&lt;/td>
&lt;td>전체 처리 속도 향상&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>성능 특성&lt;/td>
&lt;td>I/O 대기 시간 최소화&lt;/td>
&lt;td>CPU 처리량 최대화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>복잡성&lt;/td>
&lt;td>작업 간 전환과 자원 공유로 인해 복잡할 수 있음&lt;/td>
&lt;td>작업 분할과 결과 통합 과정이 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>적용 사례&lt;/td>
&lt;td>웹 서버, 사용자 인터페이스, 멀티태스킹 OS&lt;/td>
&lt;td>대규모 데이터 처리, 과학 계산, 그래픽 렌더링&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 방법&lt;/td>
&lt;td>멀티스레딩, 비동기 프로그래밍&lt;/td>
&lt;td>멀티프로세싱, GPU 병렬 처리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 관리&lt;/td>
&lt;td>자원 공유와 동기화 필요&lt;/td>
&lt;td>각 작업이 독립적인 자원 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 공유&lt;/td>
&lt;td>쉬움 (공유 메모리)&lt;/td>
&lt;td>어려움 (프로세스 간 통신 필요)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>리소스 효율성&lt;/td>
&lt;td>대기 시간 활용으로 효율적&lt;/td>
&lt;td>CPU 자원 최대 활용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 사용&lt;/td>
&lt;td>공유 메모리 사용&lt;/td>
&lt;td>독립적인 메모리 공간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>적합한 작업&lt;/td>
&lt;td>I/O 바운드 작업&lt;br>(파일, 네트워크, DB 작업)&lt;/td>
&lt;td>CPU 바운드 작업&lt;br>(복잡한 계산, 데이터 처리)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>확장성&lt;/td>
&lt;td>단일 시스템 내에서 제한적&lt;br>I/O 작업에 대해 좋은 확장성&lt;/td>
&lt;td>여러 시스템으로 확장 가능&lt;br>CPU 코어 수에 비례하여 확장&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>성능 향상&lt;/td>
&lt;td>응답 시간 개선에 중점&lt;/td>
&lt;td>처리량 증가에 중점&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>에러 처리&lt;/td>
&lt;td>상대적으로 단순&lt;/td>
&lt;td>복잡한 동기화 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>디버깅 난이도&lt;/td>
&lt;td>상대적으로 어려움 (타이밍 이슈)&lt;/td>
&lt;td>매우 어려움 (동시성 문제 + 분산 시스템 이슈)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>프로그래밍 모델&lt;/td>
&lt;td>이벤트 기반, 콜백, Promises 등&lt;/td>
&lt;td>MapReduce, 데이터 병렬화 등&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>선택 기준표&lt;span class="hx-absolute -hx-mt-20" id="선택-기준표">&lt;/span>
&lt;a href="#%ec%84%a0%ed%83%9d-%ea%b8%b0%ec%a4%80%ed%91%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>상황&lt;/th>
&lt;th>권장 방식&lt;/th>
&lt;th>이유&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>웹 서버 개발&lt;/td>
&lt;td>동시성&lt;/td>
&lt;td>대부분 I/O 작업 위주&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>이미지 처리&lt;/td>
&lt;td>병렬성&lt;/td>
&lt;td>CPU 집약적 작업&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>사용자 인터페이스&lt;/td>
&lt;td>동시성&lt;/td>
&lt;td>반응성 향상 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>대규모 데이터 분석&lt;/td>
&lt;td>병렬성&lt;/td>
&lt;td>독립적인 데이터 처리 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실시간 스트리밍&lt;/td>
&lt;td>동시성&lt;/td>
&lt;td>지속적인 I/O 처리 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>과학적 계산&lt;/td>
&lt;td>병렬성&lt;/td>
&lt;td>복잡한 계산 작업 분할 가능&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4>성능 비교표&lt;span class="hx-absolute -hx-mt-20" id="성능-비교표">&lt;/span>
&lt;a href="#%ec%84%b1%eb%8a%a5-%eb%b9%84%ea%b5%90%ed%91%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>작업 유형&lt;/th>
&lt;th>동시성 성능&lt;/th>
&lt;th>병렬성 성능&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>I/O 작업&lt;/td>
&lt;td>매우 좋음&lt;/td>
&lt;td>보통&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CPU 작업&lt;/td>
&lt;td>보통&lt;/td>
&lt;td>매우 좋음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리 사용&lt;/td>
&lt;td>효율적&lt;/td>
&lt;td>많은 사용&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>응답 시간&lt;/td>
&lt;td>일관적&lt;/td>
&lt;td>변동 가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>처리량&lt;/td>
&lt;td>중간&lt;/td>
&lt;td>높음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>자원 활용&lt;/td>
&lt;td>효율적&lt;/td>
&lt;td>최대화&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3></description></item><item><title>병렬성 (Parallelism)</title><link>https://buenhyden.github.io/posts/computer-system/system-execution-models/parallelism/</link><pubDate>Fri, 01 Nov 2024 02:35:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/system-execution-models/parallelism/</guid><description>
&lt;h2>병렬성 (Parallelism)&lt;span class="hx-absolute -hx-mt-20" id="병렬성-parallelism">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1-parallelism" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>병렬성(Parallelism)은 컴퓨터 프로그래밍에서 여러 작업을 동시에 실행하여 전체적인 처리 속도를 향상시키는 기술을 말한다.&lt;br>
이는 여러 CPU 코어나 프로세서를 활용하여 다양한 작업을 동시에 처리하는 방식이다.&lt;br>
예를 들어, 대규모 데이터베이스의 쿼리 처리나 대용량 파일의 압축 해제 등은 병렬 처리를 통해 성능을 크게 향상시킬 수 있다.&lt;/p>
&lt;p>&lt;img src="Parallelism.gif" alt="Parallelism" loading="lazy" />&lt;br>
_Source: &lt;a href="https://dynamogeeks.com/blog/concurrency-vs-parallelism-a-simplified-explanation" target="_blank" rel="noopener">https://dynamogeeks.com/blog/concurrency-vs-parallelism-a-simplified-explanation&lt;/a> _&lt;/p>
&lt;h3>병렬성의 종류&lt;span class="hx-absolute -hx-mt-20" id="병렬성의-종류">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1%ec%9d%98-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>병렬성은 크게 두 가지 방식으로 구현될 수 있다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>데이터 병렬화 (Data parallelism):&lt;br>
동일한 작업을 여러 데이터 조각에 대해 동시에 수행한다.&lt;br>
예를 들어, 대규모 행렬 연산에서 행렬을 여러 부분으로 나누고, 각 부분을 동시에 처리하여 계산을 가속화할 수 있다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 직렬 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">squared&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">squared&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 병렬 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">multiprocessing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Pool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">square&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">num&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">with&lt;/span> &lt;span class="n">Pool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">processes&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">pool&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">squared&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">square&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>작업 병렬화 (Task parallelism):&lt;br>
서로 다른 작업을 동시에 수행한다.&lt;br>
예를 들어, 웹 서버가 여러 클라이언트의 요청을 동시에 처리하는 경우이다.&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 직렬 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">process_data&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">read_file&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">process_image&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">update_database&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 병렬 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">read_file&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">process_image&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threading&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">update_database&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">t3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">()&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;/li>
&lt;/ol>
&lt;h3>병렬성의 장점&lt;span class="hx-absolute -hx-mt-20" id="병렬성의-장점">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1%ec%9d%98-%ec%9e%a5%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>성능 향상: 여러 작업을 동시에 처리함으로써 전체적인 실행 시간을 단축할 수 있다.&lt;/li>
&lt;li>자원 효율성: 여러 프로세서나 코어를 효율적으로 활용할 수 있다.&lt;/li>
&lt;li>확장성: 더 많은 프로세서를 추가함으로써 시스템의 성능을 증가시킬 수 있다.&lt;/li>
&lt;/ol>
&lt;h3>병렬성의 구현 방법&lt;span class="hx-absolute -hx-mt-20" id="병렬성의-구현-방법">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1%ec%9d%98-%ea%b5%ac%ed%98%84-%eb%b0%a9%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>병렬성은 주로 다음과 같은 방법으로 구현된다:&lt;/p>
&lt;ol>
&lt;li>멀티스레딩 (Multi-threading): 하나의 프로세스 내에서 여러 스레드를 사용하여 작업을 병렬로 처리한다.&lt;/li>
&lt;li>멀티프로세싱 (Multi-processing): 여러 개의 프로세서를 사용하여 작업을 분산 처리한다.&lt;/li>
&lt;li>분산 컴퓨팅: 여러 컴퓨터를 네트워크로 연결하여 대규모 작업을 분산 처리한다.&lt;/li>
&lt;/ol>
&lt;h3>병렬성 프로그래밍의 주의점&lt;span class="hx-absolute -hx-mt-20" id="병렬성-프로그래밍의-주의점">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%98%eb%b0%8d%ec%9d%98-%ec%a3%bc%ec%9d%98%ec%a0%90" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>동기화 문제: 여러 작업이 동시에 실행될 때 데이터의 일관성을 유지하기 위한 동기화가 필요하다.&lt;/li>
&lt;li>데드락(Deadlock): 여러 프로세스가 서로의 자원을 기다리며 무한정 대기하는 상황을 방지해야 한다.&lt;/li>
&lt;li>오버헤드: 작업 분배와 결과 취합 과정에서 발생하는 추가적인 비용을 고려해야 한다.&lt;/li>
&lt;/ol>
&lt;h3>병렬성의 실제 적용 사례&lt;span class="hx-absolute -hx-mt-20" id="병렬성의-실제-적용-사례">&lt;/span>
&lt;a href="#%eb%b3%91%eb%a0%ac%ec%84%b1%ec%9d%98-%ec%8b%a4%ec%a0%9c-%ec%a0%81%ec%9a%a9-%ec%82%ac%eb%a1%80" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>과학 연산: 기후 변화 시뮬레이션, 우주 현상 모델링 등 복잡한 과학적 계산에 활용된다.&lt;/li>
&lt;li>빅데이터 처리: 대량의 데이터를 빠르게 분석하고 처리하는 데 사용된다.&lt;/li>
&lt;li>컴퓨터 그래픽스: 3D 렌더링이나 영상 처리 등에서 병렬 처리를 통해 성능을 향상킨다.&lt;/li>
&lt;/ol>
&lt;p>병렬성은 현대 컴퓨팅에서 매우 중요한 개념으로, 복잡한 문제를 효율적으로 해결하고 시스템의 성능을 극대화하는 데 필수적이다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>File System</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/file-system/</link><pubDate>Mon, 28 Oct 2024 08:30:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/file-system/</guid><description>
&lt;h2>File System&lt;span class="hx-absolute -hx-mt-20" id="file-system">&lt;/span>
&lt;a href="#file-system" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>컴퓨터 운영 체제에서 파일과 데이터를 저장, 관리, 검색하는 데 사용되는 구조&lt;br>
파일 시스템은 물리적 저장 장치에서 파일의 물리적 위치를 관리하고, 파일의 이름, 크기, 속성 등을 포함한 메타데이터를 유지한다.&lt;/p>
&lt;p>역할과 필요성:&lt;br>
파일 시스템은 컴퓨터에서 데이터를 체계적으로 저장하고 관리하기 위해 필수적.&lt;br>
초기 컴퓨터에서는 데이터의 양이 적어 파일 시스템이 필요하지 않았지만, 데이터가 증가하면서 효율적인 관리가 필요하게 되었다.&lt;/p>
&lt;h3>기능&lt;span class="hx-absolute -hx-mt-20" id="기능">&lt;/span>
&lt;a href="#%ea%b8%b0%eb%8a%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;strong>데이터 조직&lt;/strong>: 파일을 디렉터리 구조로 구성하여 쉽게 탐색할 수 있도록 합니다.&lt;/li>
&lt;li>&lt;strong>데이터 접근&lt;/strong>: 특정 파일에 대한 빠르고 효율적인 접근을 지원합니다.&lt;/li>
&lt;li>&lt;strong>저장 공간 관리&lt;/strong>: 디스크 공간을 효율적으로 사용하여 중복을 최소화하고 성능을 최적화합니다.&lt;/li>
&lt;/ul>
&lt;h3>주요 파일 시스템 종류&lt;span class="hx-absolute -hx-mt-20" id="주요-파일-시스템-종류">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%ed%8c%8c%ec%9d%bc-%ec%8b%9c%ec%8a%a4%ed%85%9c-%ec%a2%85%eb%a5%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>FAT (File Allocation Table)&lt;span class="hx-absolute -hx-mt-20" id="fat-file-allocation-table">&lt;/span>
&lt;a href="#fat-file-allocation-table" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>&lt;strong>특징&lt;/strong>: 오래된 파일 시스템으로 간단한 구조를 가지고 있으며, 호환성이 높아 다양한 운영 체제에서 사용됩니다.&lt;/li>
&lt;li>&lt;strong>제한&lt;/strong>: 단일 파일 크기 제한(4GB) 및 볼륨 크기 제한(2TB)이 있어 대용량 데이터를 처리하는 데는 부적합합니다.&lt;/li>
&lt;/ul>
&lt;h4>NTFS (New Technology File System)&lt;span class="hx-absolute -hx-mt-20" id="ntfs-new-technology-file-system">&lt;/span>
&lt;a href="#ntfs-new-technology-file-system" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>&lt;strong>특징&lt;/strong>: Windows 운영 체제에서 주로 사용되며, 보안, 파일 압축, 대용량 파일 지원 등 고급 기능을 제공합니다.&lt;/li>
&lt;li>&lt;strong>장점&lt;/strong>: 데이터 무결성을 위한 저널링 기능과 향상된 보안 기능을 갖추고 있습니다.&lt;/li>
&lt;/ul>
&lt;h4>ext3/ext4 (Extended Filesystem)&lt;span class="hx-absolute -hx-mt-20" id="ext3ext4-extended-filesystem">&lt;/span>
&lt;a href="#ext3ext4-extended-filesystem" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>&lt;strong>특징&lt;/strong>: 리눅스에서 주로 사용되며, ext3는 저널링을 도입하여 데이터 무결성을 강화했습니다. ext4는 대용량 스토리지 지원과 성능 향상을 제공합니다.&lt;/li>
&lt;li>&lt;strong>장점&lt;/strong>: 대용량 데이터 처리에 적합하며, 온라인 상태에서 파일 시스템 확장이 가능합니다.&lt;/li>
&lt;/ul>
&lt;h4>HFS+ 및 APFS (Apple File System)&lt;span class="hx-absolute -hx-mt-20" id="hfs-및-apfs-apple-file-system">&lt;/span>
&lt;a href="#hfs-%eb%b0%8f-apfs-apple-file-system" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>&lt;strong>HFS+&lt;/strong>: macOS에서 사용되며 유니코드 파일명 지원과 대용량 파일 처리를 제공합니다.&lt;/li>
&lt;li>&lt;strong>APFS&lt;/strong>: 최신 macOS 및 iOS 기기에서 사용되며, 저장 공간 관리와 데이터 무결성을 강화한 최신 파일 시스템입니다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>메모리 관리 (Memory Management)</title><link>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/</link><pubDate>Tue, 15 Oct 2024 17:18:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/operating-system/memory-mgmt/</guid><description>
&lt;h2>메모리 관리 (Memory Management)&lt;span class="hx-absolute -hx-mt-20" id="메모리-관리-memory-management">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b4%80%eb%a6%ac-memory-management" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>운영체제의 핵심 기능 중 하나로, 컴퓨터의 주 메모리를 효율적으로 관리하는 역할을 한다.&lt;/p>
&lt;p>목적:&lt;/p>
&lt;ul>
&lt;li>프로세스 간 메모리 할당 및 해제&lt;/li>
&lt;li>사용 중인 메모리 공간 추적&lt;/li>
&lt;li>메모리 단편화 최소화&lt;/li>
&lt;li>주 메모리의 효율적 활용&lt;/li>
&lt;/ul>
&lt;h3>주요 메모리 관리 기법&lt;span class="hx-absolute -hx-mt-20" id="주요-메모리-관리-기법">&lt;/span>
&lt;a href="#%ec%a3%bc%ec%9a%94-%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b4%80%eb%a6%ac-%ea%b8%b0%eb%b2%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>페이징 (Paging)&lt;span class="hx-absolute -hx-mt-20" id="페이징-paging">&lt;/span>
&lt;a href="#%ed%8e%98%ec%9d%b4%ec%a7%95-paging" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>물리 메모리를 고정 크기의 블록(페이지)으로 나눔&lt;/li>
&lt;li>프로세스의 가상 주소 공간도 같은 크기의 페이지로 나눔&lt;/li>
&lt;li>장점:&lt;br>
외부 단편화 문제 해결, 가상 메모리 구현 용이&lt;/li>
&lt;li>단점:&lt;br>
내부 단편화 발생 가능&lt;/li>
&lt;/ul>
&lt;h4>세그멘테이션 (Segmentation)&lt;span class="hx-absolute -hx-mt-20" id="세그멘테이션-segmentation">&lt;/span>
&lt;a href="#%ec%84%b8%ea%b7%b8%eb%a9%98%ed%85%8c%ec%9d%b4%ec%85%98-segmentation" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>프로세스를 논리적 단위(세그먼트)로 나눔&lt;/li>
&lt;li>각 세그먼트는 서로 다른 크기를 가질 수 있음&lt;/li>
&lt;li>장점:&lt;br>
논리적 분할로 보안성 향상, 공유와 보호 용이&lt;/li>
&lt;li>단점:&lt;br>
외부 단편화 발생 가능&lt;/li>
&lt;/ul>
&lt;h4>가상 메모리 (Virtual Memory)&lt;span class="hx-absolute -hx-mt-20" id="가상-메모리-virtual-memory">&lt;/span>
&lt;a href="#%ea%b0%80%ec%83%81-%eb%a9%94%eb%aa%a8%eb%a6%ac-virtual-memory" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>물리적 메모리보다 큰 주소 공간 제공&lt;/li>
&lt;li>하드 디스크를 RAM의 확장으로 사용&lt;/li>
&lt;li>장점:&lt;br>
더 큰 프로그램 실행 가능, 멀티태스킹 효율 향상&lt;/li>
&lt;li>단점:&lt;br>
물리적 메모리보다 접근 속도 느림&lt;/li>
&lt;/ul>
&lt;h3>메모리 할당 방식&lt;span class="hx-absolute -hx-mt-20" id="메모리-할당-방식">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ed%95%a0%eb%8b%b9-%eb%b0%a9%ec%8b%9d" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>연속 할당: 프로세스에 연속된 메모리 공간 할당&lt;/li>
&lt;li>비연속 할당: 프로세스를 여러 조각으로 나누어 할당 (페이징, 세그멘테이션)&lt;/li>
&lt;/ol>
&lt;h3>메모리 관리의 주요 문제와 해결 방안&lt;span class="hx-absolute -hx-mt-20" id="메모리-관리의-주요-문제와-해결-방안">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b4%80%eb%a6%ac%ec%9d%98-%ec%a3%bc%ec%9a%94-%eb%ac%b8%ec%a0%9c%ec%99%80-%ed%95%b4%ea%b2%b0-%eb%b0%a9%ec%95%88" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>메모리 단편화:&lt;/p>
&lt;ul>
&lt;li>외부 단편화: 프로그램들 사이에 발생하는 작은 빈 공간들&lt;/li>
&lt;li>내부 단편화: 할당된 메모리의 일부가 사용되지 않는 현상&lt;/li>
&lt;li>해결방안: 메모리 압축, 페이징 기법 사용&lt;/li>
&lt;/ul>
&lt;p>페이지 교체: 메모리가 부족할 때 어떤 페이지를 디스크로 내보낼지 결정해야 합니다. 다양한 교체 알고리즘(LRU, FIFO 등)이 사용된다.&lt;/p>
&lt;p>스래싱(Thrashing): 페이지 교체가 너무 빈번하게 일어나 실제 작업보다 페이지 교체에 더 많은 시간을 소요하는 현상. 적절한 메모리 할당과 프로세스 수 조절로 해결할 수 있습니다.&lt;/p>
&lt;p>현대적인 메모리 관리 기술:&lt;/p>
&lt;ul>
&lt;li>메모리 압축: 사용하지 않는 메모리 영역을 압축하여 더 많은 공간을 확보하는 기술입니다.&lt;/li>
&lt;li>대용량 페이지: 더 큰 크기의 페이지를 사용하여 페이지 테이블의 크기를 줄이고 성능을 향상시키는 기술입니다.&lt;/li>
&lt;li>NUMA(Non-Uniform Memory Access): 멀티프로세서 시스템에서 메모리 접근 시간을 최적화하는 기술입니다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>컴퓨터 구성 요소 (Components of Computer Architecture)</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/components-of-computer-architecture/</link><pubDate>Mon, 23 Sep 2024 16:50:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/components-of-computer-architecture/</guid><description>
&lt;h2>컴퓨터 구성 요소 (Components of Computer Architecture)&lt;span class="hx-absolute -hx-mt-20" id="컴퓨터-구성-요소-components-of-computer-architecture">&lt;/span>
&lt;a href="#%ec%bb%b4%ed%93%a8%ed%84%b0-%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c-components-of-computer-architecture" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>이 구성 요소들의 상호작용을 통해 컴퓨터가 작동하게 된다.&lt;/p>
&lt;h3>하드웨어&lt;span class="hx-absolute -hx-mt-20" id="하드웨어">&lt;/span>
&lt;a href="#%ed%95%98%eb%93%9c%ec%9b%a8%ec%96%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>CPU (중앙처리장치)&lt;span class="hx-absolute -hx-mt-20" id="cpu-중앙처리장치">&lt;/span>
&lt;a href="#cpu-%ec%a4%91%ec%95%99%ec%b2%98%eb%a6%ac%ec%9e%a5%ec%b9%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>CPU는 컴퓨터의 &amp;lsquo;두뇌&amp;rsquo; 역할을 하는 핵심 부품.&lt;br>
CPU의 성능은 처리 속도(클럭 속도)와 코어의 개수로 측정되며, 이는 컴퓨터의 전반적인 성능에 직접적인 영향을 미친다.&lt;/p>
&lt;p>주요 기능:&lt;/p>
&lt;ul>
&lt;li>메모리에서 명령어를 읽어들이고 해석하여 실행&lt;/li>
&lt;li>데이터 처리 및 연산 수행&lt;/li>
&lt;li>다른 하드웨어 구성 요소 제어&lt;/li>
&lt;/ul>
&lt;p>구성 요소:&lt;/p>
&lt;ul>
&lt;li>ALU (산술논리연산장치): 산술 연산과 논리 연산을 수행&lt;/li>
&lt;li>제어장치: 명령어를 해석하고 실행을 제어&lt;/li>
&lt;li>레지스터: 데이터와 명령어를 임시로 저장하는 고속 메모리&lt;/li>
&lt;/ul>
&lt;h4>메인보드(마더보드)&lt;span class="hx-absolute -hx-mt-20" id="메인보드마더보드">&lt;/span>
&lt;a href="#%eb%a9%94%ec%9d%b8%eb%b3%b4%eb%93%9c%eb%a7%88%eb%8d%94%eb%b3%b4%eb%93%9c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>모든 부품들을 연결하고 통신을 가능하게 하는 &amp;lsquo;중앙 통로&amp;rsquo; 역할을 한다.&lt;br>
CPU, RAM, 그래픽카드 등 주요 부품들이 메인보드에 장착되며, 각 부품 간의 데이터 전송을 관리한다.&lt;br>
마더보드에는 다양한 확장 슬롯과 포트가 있어 추가 부품을 장착할 수 있다.&lt;br>
컴퓨터 시스템의 성능, 안정성, 확장성을 결정짓는 중요한 요소가 된다.&lt;/p>
&lt;p>주요 특징:&lt;/p>
&lt;ul>
&lt;li>하드웨어 통합 및 연결: 메인보드는 CPU, RAM, 그래픽 카드, 저장 장치 등 다양한 하드웨어 구성 요소를 연결하고 통합한다. 이를 통해 각 구성 요소 간의 원활한 통신과 상호작용을 가능하게 한다.&lt;/li>
&lt;li>확장성 제공: 메인보드는 PCIe 슬롯, RAM 슬롯, SATA 포트 등 다양한 확장 슬롯과 포트를 제공하여 시스템의 확장성을 보장한다. 이를 통해 사용자는 필요에 따라 추가적인 하드웨어를 설치하거나 업그레이드할 수 있다.&lt;/li>
&lt;li>칩셋 기능: 메인보드에 탑재된 칩셋은 다음과 같은 중요한 기능을 수행한다:
&lt;ul>
&lt;li>시스템 버스 관리&lt;/li>
&lt;li>PCI Express 컨트롤&lt;/li>
&lt;li>USB 및 SATA 포트 제어&lt;/li>
&lt;li>메모리 관리&lt;/li>
&lt;li>오버클럭과 전원 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>BIOS/UEFI 제공: 메인보드는 BIOS 또는 UEFI를 통해 하드웨어 초기화와 부팅 과정을 관리한다. 이를 통해 사용자는 시스템 설정을 조정하고 하드웨어를 최적화할 수 있다.&lt;/li>
&lt;li>전원 관리: 메인보드는 컴퓨터 전원 공급 장치로부터 전기를 받아 CPU, 칩셋, 메인 메모리, 확장 카드에 적절히 분배한다. 이를 통해 시스템의 안정적인 작동을 보장한다.&lt;/li>
&lt;li>폼 팩터: 메인보드는 ATX, micro-ATX, mini-ITX 등 다양한 폼 팩터로 제공되어 다양한 케이스와 사용 환경에 적합하게 선택할 수 있다.&lt;/li>
&lt;li>온보드 기능: 최근의 메인보드는 사운드 카드, 네트워크 카드 등을 내장하고 있어 추가적인 확장 카드 없이도 기본적인 기능을 제공한다.&lt;/li>
&lt;/ul>
&lt;h4>전원공급장치(PSU)&lt;span class="hx-absolute -hx-mt-20" id="전원공급장치psu">&lt;/span>
&lt;a href="#%ec%a0%84%ec%9b%90%ea%b3%b5%ea%b8%89%ec%9e%a5%ec%b9%98psu" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>컴퓨터의 모든 부품에 적절한 전력을 공급하는 장치.&lt;br>
가정용 교류전원(AC)를 컴퓨터 부품이 사용할 수 있는 직류전원(DC)으로 변환하며, 각 부품에 맞는 전압으로 안정적인 전원을 공급한다.&lt;/p>
&lt;h4>그래픽카드(GPU)&lt;span class="hx-absolute -hx-mt-20" id="그래픽카드gpu">&lt;/span>
&lt;a href="#%ea%b7%b8%eb%9e%98%ed%94%bd%ec%b9%b4%eb%93%9cgpu" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>화면 출력과 관련된 모든 연산을 처리하는 전문 프로세서.&lt;br>
특히 3D 그래픽이나 동영상 처리에서 중요한 역할을 한다. 최근에는 인공지능 연산에도 많이 활용되고 있다.&lt;/p>
&lt;p>주요 특징:&lt;/p>
&lt;ul>
&lt;li>병렬 처리 능력: GPU의 가장 큰 특징은 수천 개의 작은 프로세싱 코어를 가지고 있어 대량의 데이터를 동시에 처리할 수 있다. 이러한 구조는 단순하지만 많은 연산을 병렬로 수행하는 데 최적화되어 있다.&lt;/li>
&lt;li>그래픽 처리 특화: GPU는 원래 그래픽 연산을 빠르게 처리하기 위해 설계됨. 특히 3D 그래픽에서 필요한 행렬 연산과 같은 복잡한 수학적 계산을 효율적으로 수행할 수 있다.&lt;/li>
&lt;li>전용 메모리 (VRAM): GPU는 자체적인 고속 메모리인 VRAM을 갖추고 있어 텍스처, 셰이더 및 기타 그래픽 데이터를 빠르게 처리할 수 있. VRAM의 용량은 그래픽 카드의 성능에 중요한 영향을 미친다.&lt;/li>
&lt;li>다양한 응용 분야: GPU는 그래픽 처리 외에도 머신러닝, 암호화폐 채굴, 과학 연산 등 다양한 분야에서 활용되고 있다. 이는 GPU의 병렬 처리 능력이 이러한 작업에 매우 적합하기 때문이다.&lt;/li>
&lt;li>아키텍처의 중요성: GPU의 아키텍처는 성능을 결정하는 중요한 요소. 최신 아키텍처일수록 효율성, 명령어 세트, 그래픽 처리 기능 등이 향상되어 더 나은 성능을 제공한다.&lt;/li>
&lt;li>전력 효율성: 최신 GPU는 높은 성능을 제공하면서도 전력 효율성을 고려하여 설계된다. 특히 노트북용 GPU의 경우 전력 소비와 열 관리가 중요한 고려 사항.&lt;/li>
&lt;li>확장성: 일부 시스템에서는 여러 개의 GPU를 동시에 사용할 수 있어 더 높은 성능을 얻을 수 있다. 이를 SLI(NVIDIA) 또는 CrossFire(AMD)라고 한다.&lt;/li>
&lt;/ul>
&lt;h4>메모리 (주기억장치)&lt;span class="hx-absolute -hx-mt-20" id="메모리-주기억장치">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ec%a3%bc%ea%b8%b0%ec%96%b5%ec%9e%a5%ec%b9%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>메모리는 현재 실행 중인 프로그램의 명령어와 데이터를 저장하는 역할을 한다.&lt;/p>
&lt;p>주요 특징:&lt;/p>
&lt;ul>
&lt;li>RAM (Random Access Memory)이 주로 사용됨&lt;/li>
&lt;li>CPU가 직접 접근 가능한 고속 저장 장치&lt;/li>
&lt;li>전원이 꺼지면 저장된 정보가 사라지는 휘발성 메모리&lt;/li>
&lt;/ul>
&lt;h4>보조기억장치&lt;span class="hx-absolute -hx-mt-20" id="보조기억장치">&lt;/span>
&lt;a href="#%eb%b3%b4%ec%a1%b0%ea%b8%b0%ec%96%b5%ec%9e%a5%ec%b9%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>보조기억장치는 대용량의 데이터와 프로그램을 영구적으로 저장하는 역할을 한다.&lt;/p>
&lt;p>주요 특징:&lt;/p>
&lt;ul>
&lt;li>HDD, SSD, USB 메모리 등이 해당&lt;/li>
&lt;li>비휘발성 저장 장치로, 전원이 꺼져도 데이터 유지&lt;/li>
&lt;li>메모리에 비해 접근 속도가 느리지만 대용량 저장 가능&lt;/li>
&lt;/ul>
&lt;h4>입출력장치&lt;span class="hx-absolute -hx-mt-20" id="입출력장치">&lt;/span>
&lt;a href="#%ec%9e%85%ec%b6%9c%eb%a0%a5%ec%9e%a5%ec%b9%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>입출력장치는 컴퓨터와 외부 세계를 연결하는 인터페이스 역할을 한다.&lt;/p>
&lt;p>입력장치&lt;br>
컴퓨터에 정보를 입력하는 모든 장치.&lt;br>
가장 기본적인 것이 키보드와 마우스이며, 이 외에도 마이크, 웹캠, 스캐너 등이 있다.&lt;br>
이러한 장치들은 사용자의 명령이나 데이터를 컴퓨터가 이해할 수 있는 디지털 신호로 변환하는 역할을 한다.&lt;br>
출력장치&lt;br>
컴퓨터에서 처리된 정보를 사용자가 이해할 수 있는 형태로 보여주는 장치.&lt;br>
모니터가 가장 대표적이며, 스피커, 프린터 등이 여기에 속한다.&lt;br>
이러한 장치들은 디지털 신호를 우리가 인식할 수 있는 형태(시각, 청각 등)로 변환한다.&lt;/p>
&lt;h4>시스템 버스&lt;span class="hx-absolute -hx-mt-20" id="시스템-버스">&lt;/span>
&lt;a href="#%ec%8b%9c%ec%8a%a4%ed%85%9c-%eb%b2%84%ec%8a%a4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>컴퓨터 내부의 다양한 구성 요소들 간에 데이터와 제어 신호를 전송하는 통로 역할을 한다.&lt;/p>
&lt;p>주요 기능:&lt;/p>
&lt;ol>
&lt;li>데이터 전송: CPU, 메모리, 주변 장치 간의 데이터 교환을 가능하게 합니다.&lt;/li>
&lt;li>통신 경로 제공: 컴퓨터의 여러 부품들이 서로 통신할 수 있는 표준화된 경로를 제공합니다.&lt;/li>
&lt;li>성능 향상: 효율적인 데이터 전송을 통해 전체 시스템의 성능을 향상시킵니다.&lt;/li>
&lt;li>확장성 지원: 새로운 하드웨어 구성 요소를 쉽게 추가할 수 있게 합니다.&lt;/li>
&lt;/ol>
&lt;p>유형:&lt;/p>
&lt;ul>
&lt;li>데이터 버스: 실제 데이터를 전송합니다. 양방향으로 작동합니다.&lt;/li>
&lt;li>주소 버스: 데이터의 출발지와 목적지 주소를 지정합니다. 단방향으로 작동합니다.&lt;/li>
&lt;li>제어 버스: 데이터 전송을 제어하는 신호를 전달합니다. 양방향으로 작동합니다&lt;/li>
&lt;/ul>
&lt;h2>소프트웨어&lt;span class="hx-absolute -hx-mt-20" id="소프트웨어">&lt;/span>
&lt;a href="#%ec%86%8c%ed%94%84%ed%8a%b8%ec%9b%a8%ec%96%b4" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;h3>운영체제(OS)&lt;span class="hx-absolute -hx-mt-20" id="운영체제os">&lt;/span>
&lt;a href="#%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9cos" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>하드웨어와 소프트웨어를 관리하고 제어하는 기본 소프트웨어.&lt;br>
Windows, macOS, Linux 등이 대표적.&lt;br>
운영체제는 하드웨어 자원을 효율적으로 관리하고, 사용자가 컴퓨터를 쉽게 사용할 수 있도록 인터페이스를 제공한다.&lt;/p>
&lt;h3>응용프로그램&lt;span class="hx-absolute -hx-mt-20" id="응용프로그램">&lt;/span>
&lt;a href="#%ec%9d%91%ec%9a%a9%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%a8" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>특정 작업을 수행하기 위한 소프트웨어.&lt;br>
워드프로세서, 웹브라우저, 게임 등이 여기에 속한다.&lt;br>
이러한 프로그램들은 운영체제 위에서 실행되며, 운영체제가 제공하는 서비스를 활용한다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>CPU</title><link>https://buenhyden.github.io/posts/computer-system/computer-architecture/cpu/</link><pubDate>Mon, 23 Sep 2024 16:44:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/computer-architecture/cpu/</guid><description>
&lt;h2>CPU&lt;span class="hx-absolute -hx-mt-20" id="cpu">&lt;/span>
&lt;a href="#cpu" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>CPU(중앙처리장치)는 컴퓨터 시스템의 핵심 구성요소로, 프로그램의 명령어를 해석하고 실행하는 역할을 한다.&lt;/p>
&lt;h3>CPU의 주요 구성요소&lt;span class="hx-absolute -hx-mt-20" id="cpu의-주요-구성요소">&lt;/span>
&lt;a href="#cpu%ec%9d%98-%ec%a3%bc%ec%9a%94-%ea%b5%ac%ec%84%b1%ec%9a%94%ec%86%8c" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>CPU는 크게 세 가지 주요 구성요소로 이루어져 있다&lt;/p>
&lt;ol>
&lt;li>제어장치 (Control Unit, CU)&lt;/li>
&lt;li>산술논리장치 (Arithmetic Logic Unit, ALU)&lt;/li>
&lt;li>레지스터 (Registers)&lt;/li>
&lt;/ol>
&lt;h4>제어장치 (Control Unit)&lt;span class="hx-absolute -hx-mt-20" id="제어장치-control-unit">&lt;/span>
&lt;a href="#%ec%a0%9c%ec%96%b4%ec%9e%a5%ec%b9%98-control-unit" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>제어장치는 CPU의 &amp;lsquo;교통 경찰&amp;rsquo; 역할을 한다.&lt;/p>
&lt;p>주요 기능:&lt;/p>
&lt;ul>
&lt;li>명령어를 순서대로 실행할 수 있도록 제어&lt;/li>
&lt;li>주기억장치로부터 프로그램 명령을 순차적으로 가져와 해독&lt;/li>
&lt;li>명령어 실행에 필요한 제어 신호를 기억장치, 연산장치, 입출력 장치 등으로 전송&lt;/li>
&lt;/ul>
&lt;h4>산술논리장치 (ALU)&lt;span class="hx-absolute -hx-mt-20" id="산술논리장치-alu">&lt;/span>
&lt;a href="#%ec%82%b0%ec%88%a0%eb%85%bc%eb%a6%ac%ec%9e%a5%ec%b9%98-alu" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>ALU는 CPU 내에서 실제 연산을 수행하는 부분&lt;/p>
&lt;p>주요 기능:&lt;/p>
&lt;ul>
&lt;li>산술 연산 (덧셈, 뺄셈, 곱셈, 나눗셈)&lt;/li>
&lt;li>논리 연산 (AND, OR, NOT 등)&lt;/li>
&lt;li>비교 연산&lt;/li>
&lt;/ul>
&lt;h4>레지스터 (Registers)&lt;span class="hx-absolute -hx-mt-20" id="레지스터-registers">&lt;/span>
&lt;a href="#%eb%a0%88%ec%a7%80%ec%8a%a4%ed%84%b0-registers" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>레지스터는 CPU 내부의 고속 소규모 기억장치&lt;/p>
&lt;p>주요 특징:&lt;/p>
&lt;ul>
&lt;li>명령어 주소, 코드, 연산에 필요한 데이터, 연산 결과 등을 임시로 저장&lt;/li>
&lt;li>메모리 계층의 최상위에 위치하며 가장 빠른 속도로 접근 가능&lt;/li>
&lt;li>용도에 따라 범용 레지스터와 특수 목적 레지스터로 구분&lt;/li>
&lt;/ul>
&lt;h3>CPU의 작동 과정&lt;span class="hx-absolute -hx-mt-20" id="cpu의-작동-과정">&lt;/span>
&lt;a href="#cpu%ec%9d%98-%ec%9e%91%eb%8f%99-%ea%b3%bc%ec%a0%95" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>CPU의 작동 과정은 크게 명령어 사이클(Instruction Cycle)로 설명할 수 있다.&lt;br>
이 사이클은 다음과 같은 단계로 구성된다.:&lt;/p>
&lt;ol>
&lt;li>인출 (Fetch)&lt;/li>
&lt;li>해독 (Decode)&lt;/li>
&lt;li>실행 (Execute)&lt;/li>
&lt;li>쓰기 (Write-back)&lt;/li>
&lt;/ol>
&lt;h4>1. 인출 (Fetch)&lt;span class="hx-absolute -hx-mt-20" id="1-인출-fetch">&lt;/span>
&lt;a href="#1-%ec%9d%b8%ec%b6%9c-fetch" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;ul>
&lt;li>프로그램 카운터(PC)에 저장된 주소를 메모리 주소 레지스터(MAR)로 전달&lt;/li>
&lt;li>MAR에 저장된 주소를 이용해 주기억장치에서 명령어를 가져옴&lt;/li>
&lt;li>가져온 명령어를 메모리 버퍼 레지스터(MBR)에 저장&lt;/li>
&lt;li>다음 명령어를 위해 PC 값을 증가시킴&lt;/li>
&lt;li>MBR의 내용을 명령어 레지스터(IR)로 전달&lt;/li>
&lt;/ul>
&lt;h4>2. 해독 (Decode)&lt;span class="hx-absolute -hx-mt-20" id="2-해독-decode">&lt;/span>
&lt;a href="#2-%ed%95%b4%eb%8f%85-decode" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>제어장치가 IR에 저장된 명령어를 해석하여 수행해야 할 작업을 결정한다.&lt;/p>
&lt;h4>3. 실행 (Execute)&lt;span class="hx-absolute -hx-mt-20" id="3-실행-execute">&lt;/span>
&lt;a href="#3-%ec%8b%a4%ed%96%89-execute" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>해독된 명령어에 따라 ALU나 다른 CPU 구성요소가 실제 연산을 수행한다.&lt;/p>
&lt;h4>4. 쓰기 (Write-back)&lt;span class="hx-absolute -hx-mt-20" id="4-쓰기-write-back">&lt;/span>
&lt;a href="#4-%ec%93%b0%ea%b8%b0-write-back" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>연산 결과를 메모리나 레지스터에 저장한다.&lt;/p>
&lt;h3>고급 CPU 기능&lt;span class="hx-absolute -hx-mt-20" id="고급-cpu-기능">&lt;/span>
&lt;a href="#%ea%b3%a0%ea%b8%89-cpu-%ea%b8%b0%eb%8a%a5" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>현대의 CPU는 성능 향상을 위해 다양한 기술을 사용한다.&lt;/p>
&lt;ol>
&lt;li>캐시 메모리&lt;br>
CPU는 자주 사용되는 데이터와 명령어를 캐시에 저장하여 접근 속도를 높인다.&lt;/li>
&lt;li>명령어 파이프라이닝&lt;br>
CPU는 여러 명령어를 동시에 처리하기 위해 파이프라이닝 기법을 사용한다.&lt;br>
한 명령어가 해독 단계에 있을 때 다른 명령어의 인출을 시작하는 방식으로 작동한다.&lt;/li>
&lt;li>인터럽트 처리&lt;br>
CPU는 키보드나 마우스 같은 주변 장치로부터의 입력을 처리하기 위해 인터럽트 메커니즘을 사용한다.&lt;br>
인터럽트가 발생하면 CPU는 현재 작업을 일시 중단하고 인터럽트를 처리한 후 원래 작업으로 돌아간다.&lt;br>
이러한 복잡한 메커니즘을 통해 CPU는 초당 수십억 개의 명령어를 처리할 수 있으며, 이는 현대 컴퓨터 시스템의 핵심 성능을 결정짓는 요소가 된다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item><item><title>Computer System</title><link>https://buenhyden.github.io/posts/computer-system/</link><pubDate>Sun, 22 Sep 2024 01:39:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/computer-system/</guid><description>
&lt;h2>Computer System&lt;span class="hx-absolute -hx-mt-20" id="computer-system">&lt;/span>
&lt;a href="#computer-system" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>컴퓨터 시스템은 하드웨어와 소프트웨어로 구성된 복잡한 구조이다.&lt;/p>
&lt;p>&lt;img src="Untitled-Diagram28.png" alt="Computer System" loading="lazy" />&lt;br>
_Source: &lt;a href="https://www.geeksforgeeks.org/differences-between-computer-architecture-and-computer-organization/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/differences-between-computer-architecture-and-computer-organization/&lt;/a> _&lt;/p>
&lt;h3>하드웨어 (Hardware)&lt;span class="hx-absolute -hx-mt-20" id="하드웨어-hardware">&lt;/span>
&lt;a href="#%ed%95%98%eb%93%9c%ec%9b%a8%ec%96%b4-hardware" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>하드웨어는 물리적으로 존재하는 컴퓨터 부품들을 말한다.&lt;br>
주요 구성요소는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>중앙처리장치 (CPU: Central Processing Unit)&lt;/strong>: 컴퓨터의 &amp;ldquo;두뇌&amp;rdquo; 역할을 하는 핵심 부품이다.&lt;br>
우리가 작성한 프로그램의 명령어들을 실제로 실행하는 곳으로, CPU는 산술논리연산장치(ALU)와 제어장치(Control Unit)로 구성되어 있다.&lt;br>
ALU는 실제 계산을 수행하고, 제어장치는 프로그램의 명령어를 해석하고 실행을 지시한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>주기억장치 (Main Memory)&lt;/strong>: 프로그램이 실행되는 동안 필요한 데이터와 명령어를 저장하는 공간이다.&lt;br>
RAM(Random Access Memory)과 ROM(Read Only Memory)으로 나눌 수 있다.&lt;br>
RAM은 컴퓨터가 켜져있는 동안만 데이터를 저장하는 &amp;lsquo;휘발성&amp;rsquo; 메모리로, 우리가 프로그램을 실행하면, 해당 프로그램은 RAM에 로드되어 실행된다. 예를 들어 워드 프로세서로 문서를 작성할 때, 작성 중인 내용은 RAM에 임시로 저장된다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>보조기억장치 (Secondary Storage)&lt;/strong>: 전원이 꺼져도 데이터를 보관할 수 있는 &amp;lsquo;비휘발성&amp;rsquo; 저장장치.&lt;br>
우리가 작성한 프로그램의 소스코드나 문서 파일들이 여기에 저장된다.&lt;br>
하드 디스크(HDD), SSD 등이 해당된다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>입출력 장치 (I/O Devices)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>입력 장치: 키보드, 마우스 등&lt;/li>
&lt;li>출력 장치: 모니터, 프린터 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>시스템 버스 (System Bus)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>하드웨어 구성요소들 간의 데이터 전송 통로이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>소프트웨어 (Software)&lt;span class="hx-absolute -hx-mt-20" id="소프트웨어-software">&lt;/span>
&lt;a href="#%ec%86%8c%ed%94%84%ed%8a%b8%ec%9b%a8%ec%96%b4-software" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>소프트웨어는 하드웨어를 제어하고 작업을 수행하는 프로그램들의 집합이다.&lt;br>
크게 두 가지로 나눌 수 있다:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>시스템 소프트웨어&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>운영체제 (OS: Operating System): 하드웨어와 소프트웨어 사이를 중개하는 핵심 시스템 소프트웨어이다.&lt;br>
Windows, Linux, macOS 등이 대표적이다.&lt;br>
다음과 같은 역할을 수행한다.&lt;br>
1. &lt;strong>프로세스 관리&lt;/strong>: 프로그램의 실행 단위인 프로세스를 생성, 스케줄링, 종료한다.&lt;br>
2. &lt;strong>메모리 관리&lt;/strong>: 프로세스에 메모리를 할당하고 회수한다.&lt;br>
3. &lt;strong>파일 시스템 관리&lt;/strong>: 데이터를 파일 형태로 저장하고 관리한다.&lt;br>
4. &lt;strong>장치 관리&lt;/strong>: 입출력 장치를 제어하고 관리한다.&lt;br>
5. &lt;strong>사용자 인터페이스 제공&lt;/strong>: 사용자가 컴퓨터와 상호작용할 수 있는 환경을 제공한다.&lt;/li>
&lt;li>디바이스 드라이버, 유틸리티 프로그램 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>응용 소프트웨어&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>사용자가 특정 작업을 수행하기 위해 사용하는 프로그램.&lt;/li>
&lt;li>예: 워드 프로세서, 웹 브라우저, 게임 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>컴퓨터 시스템의 동작 원리&lt;span class="hx-absolute -hx-mt-20" id="컴퓨터-시스템의-동작-원리">&lt;/span>
&lt;a href="#%ec%bb%b4%ed%93%a8%ed%84%b0-%ec%8b%9c%ec%8a%a4%ed%85%9c%ec%9d%98-%eb%8f%99%ec%9e%91-%ec%9b%90%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>폰 노이만 구조&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>현대 컴퓨터 시스템의 기본이 되는 구조.&lt;/li>
&lt;li>프로그램과 데이터를 같은 메모리에 저장하는 방식을 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>명령어 실행 과정&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>프로그램 카운터(PC)가 다음 실행할 명령어의 주소를 가리킨다.&lt;/li>
&lt;li>CPU가 메모리에서 명령어를 가져와 해석하고 실행한다.&lt;/li>
&lt;li>이 과정을 반복하며 프로그램이 실행된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>인터럽트 (Interrupt)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>예상치 못한 상황이나 I/O 요청 등을 처리하기 위한 메커니즘이다.&lt;/li>
&lt;li>CPU의 정상적인 실행 흐름을 잠시 중단하고 다른 작업을 처리할 수 있게 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>메모리&lt;span class="hx-absolute -hx-mt-20" id="메모리">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;h4>계층 구조&lt;span class="hx-absolute -hx-mt-20" id="계층-구조">&lt;/span>
&lt;a href="#%ea%b3%84%ec%b8%b5-%ea%b5%ac%ec%a1%b0" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>컴퓨터 시스템은 여러 단계의 메모리를 사용하여 성능과 용량의 균형을 맞춘다:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>레지스터&lt;/strong>: CPU 내부의 초고속 저장 공간&lt;/li>
&lt;li>&lt;strong>캐시 메모리&lt;/strong>: CPU와 주기억장치 사이의 고속 버퍼&lt;/li>
&lt;li>&lt;strong>주기억장치 (RAM)&lt;/strong>: 프로그램과 데이터의 임시 저장소&lt;/li>
&lt;li>&lt;strong>보조기억장치&lt;/strong>: 대용량 영구 저장소&lt;br>
이러한 계층 구조는 속도와 용량의 트레이드오프를 고려하여 설계되었다.&lt;/li>
&lt;/ol>
&lt;h4>메모리 관리&lt;span class="hx-absolute -hx-mt-20" id="메모리-관리">&lt;/span>
&lt;a href="#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b4%80%eb%a6%ac" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h4>&lt;p>프로그램이 실행될 때 메모리는 다음과 같이 구성된다:&lt;/p>
&lt;ul>
&lt;li>코드 영역: 실행할 프로그램의 코드가 저장되는 영역&lt;/li>
&lt;li>데이터 영역: 전역 변수나 정적 변수가 저장되는 영역&lt;/li>
&lt;li>힙(Heap): 동적으로 할당되는 메모리 영역&lt;/li>
&lt;li>스택(Stack): 함수 호출과 관련된 정보가 저장되는 영역&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;span class="hx-absolute -hx-mt-20" id="참고-및-출처">&lt;/span>
&lt;a href="#%ec%b0%b8%ea%b3%a0-%eb%b0%8f-%ec%b6%9c%ec%b2%98" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2></description></item></channel></rss>