<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyunyoun's Blog – QA</title><link>https://buenhyden.github.io/categories/qa/</link><description>Recent content in QA on hyunyoun's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 30 Dec 2024 07:13:00 +0000</lastBuildDate><atom:link href="https://buenhyden.github.io/categories/qa/index.xml" rel="self" type="application/rss+xml"/><item><title>Test</title><link>https://buenhyden.github.io/posts/qa/qc/test/</link><pubDate>Wed, 06 Nov 2024 06:14:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/test/</guid><description>
&lt;h2>테스트 (Test)&lt;/h2>&lt;p>소프트웨어 테스트는 &amp;ldquo;주요 이해관계자들에게 시험 대상 제품 또는 서비스의 품질에 관한 정보를 제공하는 조사 과정&amp;quot;으로 정의된다.&lt;/p>
&lt;p>테스트의 주요 목적은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>결함 발견: 프로그램 내의 오류, 버그, 잠재적 문제를 식별하고 수정&lt;/li>
&lt;li>품질 보증: 안정적이고 신뢰성 있는 소프트웨어 제공&lt;/li>
&lt;li>사용자 만족도 향상: 소프트웨어가 기대한 대로 작동하는지 확인&lt;/li>
&lt;/ol>
&lt;h3>테스트의 중요성&lt;/h3>&lt;p>소프트웨어 테스트는 다음과 같은 이유로 중요하다:&lt;/p>
&lt;ol>
&lt;li>비용 절감: 초기에 결함을 발견하고 수정함으로써 개발 비용을 절감&lt;/li>
&lt;li>신뢰성 확보: 안정적이고 예측 가능한 소프트웨어 제공&lt;/li>
&lt;li>고객 만족도 향상: 품질이 보장된 소프트웨어로 사용자 경험 개선&lt;/li>
&lt;/ol>
&lt;h3>소프트웨어 테스트의 7가지 원칙&lt;/h3>&lt;ol>
&lt;li>결함 발견: 테스트의 주요 목적은 결함을 찾는 것&lt;/li>
&lt;li>완벽한 테스트는 불가능: 모든 경우를 테스트하는 것은 현실적으로 불가능&lt;/li>
&lt;li>초기 테스트: 개발 초기 단계에서 테스트를 시작하는 것이 중요&lt;/li>
&lt;li>결함 집중: 일부 모듈에 결함이 집중되는 경향이 있음&lt;/li>
&lt;li>살충제 패러독스: 동일한 테스트를 반복하면 새로운 결함을 발견하기 어려움&lt;/li>
&lt;li>테스트는 상황에 의존적: 소프트웨어의 용도와 환경에 따라 테스트 방법이 달라짐&lt;/li>
&lt;li>오류 부재의 오해: 결함이 없다고 해서 사용자의 요구를 완전히 만족시키는 것은 아님&lt;/li>
&lt;/ol>
&lt;h3>테스트 프로세스&lt;/h3>&lt;p>소프트웨어 테스트 프로세스는 일반적으로 다음 단계를 포함한다:&lt;/p>
&lt;ol>
&lt;li>테스트 계획&lt;/li>
&lt;li>테스트 설계&lt;/li>
&lt;li>테스트 구현&lt;/li>
&lt;li>테스트 실행&lt;/li>
&lt;li>결과 분석&lt;/li>
&lt;li>재테스트 및 회귀 테스트&lt;/li>
&lt;li>종료 및 보고&lt;/li>
&lt;/ol>
&lt;h3>테스트 방법론&lt;/h3>&lt;h4>테스트 주도 개발(TDD, Test-Driven Development)&lt;/h4>&lt;p>테스트를 먼저 작성하고, 이를 통과하는 코드를 개발하는 방식&lt;/p>
&lt;ul>
&lt;li>TDD의 기본 사이클&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>실패하는 테스트 작성&lt;/li>
&lt;li>테스트를 통과하는 최소한의 코드 작성&lt;/li>
&lt;li>코드 리팩토링&lt;/li>
&lt;/ol>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># TDD 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">test_calculate_total&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># 1. 실패하는 테스트 작성&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ShoppingCart&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_item&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Product&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_item&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Product&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;banana&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2000&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">cart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">calculate_total&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">3000&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>행위 주도 개발(BDD, Behavior-Driven Development)&lt;/h4>&lt;p>사용자의 행위를 중심으로 테스트를 작성하는 방법&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gherkin" data-lang="gherkin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Feature:&lt;/span>&lt;span class="nf"> 장바구니 계산
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> &lt;/span>&lt;span class="k">Scenario:&lt;/span>&lt;span class="nf"> 상품 두 개 추가
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">&lt;/span>&lt;span class="k"> Given &lt;/span>&lt;span class="nf">장바구니가 비어있음
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> &lt;/span>&lt;span class="k">When &lt;/span>&lt;span class="nf">사과(&lt;/span>&lt;span class="s">1000&lt;/span>&lt;span class="nf">원)를 추가
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> &lt;/span>&lt;span class="k">And &lt;/span>&lt;span class="nf">바나나(&lt;/span>&lt;span class="s">2000&lt;/span>&lt;span class="nf">원)를 추가
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf"> &lt;/span>&lt;span class="k">Then &lt;/span>&lt;span class="nf">총액은 &lt;/span>&lt;span class="s">3000&lt;/span>&lt;span class="nf">원이어야 함&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h3>테스트 자동화&lt;/h3>&lt;p>테스트 자동화는 반복적인 테스트를 효율적으로 수행하기 위해 필수적이다.&lt;/p>
&lt;p>주요 테스트 자동화 도구들은 다음과 같다:&lt;/p>
&lt;ul>
&lt;li>Java: JUnit, TestNG&lt;/li>
&lt;li>Python: pytest, unittest&lt;/li>
&lt;li>JavaScript: Jest, Mocha&lt;/li>
&lt;/ul>
&lt;p>자동화된 테스트의 장점:&lt;/p>
&lt;ul>
&lt;li>빠른 피드백 루프 제공&lt;/li>
&lt;li>회귀 테스트 용이&lt;/li>
&lt;li>지속적 통합/배포(CI/CD) 파이프라인에 통합 가능&lt;/li>
&lt;li>테스트 결과의 일관성 보장&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Quality Control</title><link>https://buenhyden.github.io/posts/qa/qc/</link><pubDate>Mon, 23 Sep 2024 16:27:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/qc/</guid><description>
&lt;h2>Quality Control&lt;/h2>&lt;p>품질관리(Quality Control, QC)는 제품이나 서비스가 일정한 품질 기준을 충족하도록 보장하는 일련의 절차를 의미한다.&lt;/p>
&lt;h3>주요 목표&lt;/h3>&lt;p>품질관리의 주요 목표는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>제품 품질 향상&lt;/li>
&lt;li>고객 만족도 증대&lt;/li>
&lt;li>불량률 감소&lt;/li>
&lt;li>생산성 향상&lt;/li>
&lt;li>비용 절감&lt;/li>
&lt;li>기업 경쟁력 강화&lt;/li>
&lt;/ol>
&lt;h3>주요 특징&lt;/h3>&lt;p>QC의 주요 특징은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>데이터 기반 의사결정: 통계적 기법을 활용하여 객관적인 데이터를 바탕으로 품질 관리 결정을 내린다.&lt;/li>
&lt;li>예방 중심: 문제가 발생하기 전에 미리 그 원인을 차단하는 예방 활동에 초점을 맞춘다.&lt;/li>
&lt;li>전사적 참여: 모든 구성원이 품질 관리에 참여하여 협력한다.&lt;/li>
&lt;li>지속적 개선: PDCA(Plan-Do-Check-Action) 사이클을 통해 지속적인 품질 개선을 추구한다.&lt;/li>
&lt;li>과학적 접근: 문제 해결에 있어 과학적이고 체계적인 방법을 사용한다.&lt;/li>
&lt;/ol>
&lt;h3>중요성&lt;/h3>&lt;p>품질관리의 중요성은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>기업 경쟁력 강화: 높은 품질의 제품은 기업의 시장 경쟁력을 향상시킨다.&lt;/li>
&lt;li>고객 신뢰 확보: 일관된 품질은 고객의 신뢰를 얻고 유지하는 데 중요하다.&lt;/li>
&lt;li>비용 절감: 불량품 감소와 효율적인 생산 과정을 통해 비용을 절감할 수 있다.&lt;/li>
&lt;li>규제 준수: 품질 관리를 통해 각종 규제와 표준을 준수할 수 있다.&lt;/li>
&lt;li>지속가능한 성장: 지속적인 품질 개선은 기업의 장기적인 성장을 지원한다.&lt;/li>
&lt;/ol>
&lt;h3>기본 원칙&lt;/h3>&lt;p>품질관리의 기본 원칙은 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>예방의 원칙: 문제가 발생하기 전에 미리 예방하는 것이 중요하다.&lt;/li>
&lt;li>전원 참가의 원칙: 모든 구성원이 품질 관리에 참여해야 한다.&lt;/li>
&lt;li>과학적 관리의 원칙: 객관적인 데이터와 과학적 방법을 사용한다.&lt;/li>
&lt;li>종합 조정의 원칙: 품질, 원가, 납기 등을 균형 있게 고려한다.&lt;/li>
&lt;li>고객 중심: 고객의 요구사항을 충족시키는 것을 최우선으로 한다.&lt;/li>
&lt;/ol>
&lt;h3>주요 요소&lt;/h3>&lt;p>품질관리의 주요 요소는 다음과 같다:&lt;/p>
&lt;ol>
&lt;li>4M: 품질에 영향을 미치는 주요 요소로 사람(Man), 기계(Machine), 재료(Material), 방법(Method)을 말한다.&lt;/li>
&lt;li>PDCA 사이클: Plan(계획), Do(실행), Check(확인), Action(조치)의 순환을 통해 지속적인 개선을 추구한다.&lt;/li>
&lt;li>통계적 기법: 샘플링, 관리도, 공정능력분석 등의 통계적 도구를 활용한다.&lt;/li>
&lt;li>표준화: 작업 방법, 검사 기준 등을 표준화하여 일관된 품질을 유지한다.&lt;/li>
&lt;li>교육 및 훈련: 구성원들의 품질 의식과 기술을 향상시키기 위한 지속적인 교육을 실시한다.&lt;/li>
&lt;li>품질 시스템: 품질 목표 설정, 품질 계획 수립, 품질 관리 활동 실시, 결과 분석 및 개선의 체계적인 시스템을 구축한다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>QA and QC and Testing</title><link>https://buenhyden.github.io/til/2024/12/quality-assurance-and-quality-control-and-testing/</link><pubDate>Mon, 30 Dec 2024 07:13:00 +0000</pubDate><guid>https://buenhyden.github.io/til/2024/12/quality-assurance-and-quality-control-and-testing/</guid><description>
&lt;h2>Quality Assurance (QA) and Quality Control (QC) and Testing&lt;/h2>&lt;p>Quality Assurance (QA)는 제품이나 서비스의 품질을 보장하기 위한 계획적이고 체계적인 활동들의 집합이다.&lt;br>
QA는 프로세스 중심적이며, 품질 문제가 발생하기 전에 예방하는 것을 목표로 한다.&lt;br>
전체 개발 수명주기에 걸쳐 품질 기준과 절차를 수립하고 관리한다.&lt;/p>
&lt;p>Quality Control (QC)는 개발된 제품이나 서비스가 정해진 품질 기준을 충족하는지 확인하는 활동이다.&lt;br>
QC는 제품 중심적이며, 실제 결과물을 검사하고 결함을 찾아내는 데 중점을 둔다.&lt;br>
주로 테스트와 검토를 통해 이루어진다.&lt;/p>
&lt;p>Testing은 소프트웨어가 예상대로 작동하는지 확인하는 구체적인 실행 활동이다.&lt;br>
버그를 찾아내고, 시스템의 기능성과 성능을 검증하는 것이 주요 목적이다.&lt;br>
QC의 중요한 하위 활동으로 볼 수 있다.&lt;/p>
&lt;p>이제 세 가지 개념을 다양한 측면에서 비교한 표:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>비교 기준&lt;/th>
&lt;th>Quality Assurance (QA)&lt;/th>
&lt;th>Quality Control (QC)&lt;/th>
&lt;th>Testing&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>정의&lt;/td>
&lt;td>품질 문제를 예방하기 위한 프로세스 중심의 활동&lt;/td>
&lt;td>제품이 품질 기준을 충족하는지 확인하는 검증 활동&lt;/td>
&lt;td>소프트웨어의 기능과 성능을 검증하는 실행 활동&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>목적&lt;/td>
&lt;td>결함 예방 및 프로세스 개선&lt;/td>
&lt;td>결함 발견 및 수정&lt;/td>
&lt;td>버그 발견 및 기능 검증&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>범위&lt;/td>
&lt;td>전체 개발 수명주기&lt;/td>
&lt;td>특정 개발 단계&lt;/td>
&lt;td>구체적인 테스트 실행 단계&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>특성&lt;/td>
&lt;td>예방적, 전략적&lt;/td>
&lt;td>탐지적, 전술적&lt;/td>
&lt;td>실행적, 기술적&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주요 활동&lt;/td>
&lt;td>- 품질 정책 수립&lt;br>- 프로세스 표준화&lt;br>- 품질 계획 수립&lt;br>- 품질 감사&lt;br>- 교육 및 훈련&lt;/td>
&lt;td>- 검토 및 검사&lt;br>- 결함 추적&lt;br>- 메트릭 수집&lt;br>- 품질 보고&lt;/td>
&lt;td>- 테스트 케이스 작성&lt;br>- 테스트 실행&lt;br>- 버그 리포팅&lt;br>- 테스트 자동화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>책임자&lt;/td>
&lt;td>QA 관리자, 프로세스 개선 팀&lt;/td>
&lt;td>QC 엔지니어, 검토자&lt;/td>
&lt;td>테스터, QA 엔지니어&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>시점&lt;/td>
&lt;td>개발 전, 중, 후 지속적으로&lt;/td>
&lt;td>개발 중간 및 완료 단계&lt;/td>
&lt;td>개발 중간 및 완료 단계&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>중점 사항&lt;/td>
&lt;td>- 프로세스 품질&lt;br>- 예방적 조치&lt;br>- 품질 기준 수립&lt;br>- 지속적 개선&lt;/td>
&lt;td>- 제품 품질&lt;br>- 결함 식별&lt;br>- 기준 준수 확인&lt;br>- 시정 조치&lt;/td>
&lt;td>- 기능 검증&lt;br>- 성능 확인&lt;br>- 버그 발견&lt;br>- 사용성 평가&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>산출물&lt;/td>
&lt;td>- 품질 정책 문서&lt;br>- 프로세스 가이드라인&lt;br>- 품질 계획서&lt;br>- 감사 보고서&lt;/td>
&lt;td>- 검토 보고서&lt;br>- 결함 보고서&lt;br>- 품질 메트릭&lt;br>- 시정 조치 계획&lt;/td>
&lt;td>- 테스트 계획서&lt;br>- 테스트 케이스&lt;br>- 버그 리포트&lt;br>- 테스트 결과 보고서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>비용 영향&lt;/td>
&lt;td>초기 비용이 높지만 장기적으로 비용 절감&lt;/td>
&lt;td>중간 수준의 비용 발생&lt;/td>
&lt;td>직접적인 테스트 비용 발생&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>이러한 세 가지 활동은 서로 독립적이지 않고 긴밀하게 연관되어 있다.&lt;br>
QA는 전체적인 품질 보증 프레임워크를 제공하고, 그 안에서 QC가 품질 검증 활동을 수행하며, Testing은 QC의 구체적인 실행 방법으로 작용한다.&lt;/p>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>소프트웨어 라이선스 (Software License)</title><link>https://buenhyden.github.io/posts/qa/standards-and-policies/software-license/</link><pubDate>Fri, 01 Nov 2024 12:39:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/standards-and-policies/software-license/</guid><description>
&lt;h2>소프트웨어 라이선스 (Software License)&lt;/h2>&lt;p>소프트웨어의 사용, 수정, 배포에 대한 권리와 제한을 정의하는 법적 도구&lt;br>
라이센스는 크게 오픈소스 라이센스와 상용 라이센스로 나눌 수 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>라이센스 종류&lt;/th>
&lt;th>주요 특징&lt;/th>
&lt;th>소스코드 공개 의무&lt;/th>
&lt;th>상업적 사용&lt;/th>
&lt;th>특허권 보호&lt;/th>
&lt;th>대표적인 소프트웨어&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>GPL v3&lt;/strong>&lt;/td>
&lt;td>가장 엄격한 카피레프트&lt;/td>
&lt;td>필수&lt;/td>
&lt;td>가능&lt;/td>
&lt;td>있음&lt;/td>
&lt;td>Linux Kernel, GCC&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>AGPL v3&lt;/strong>&lt;/td>
&lt;td>네트워크 서비스도 소스 공개&lt;/td>
&lt;td>필수&lt;/td>
&lt;td>가능&lt;/td>
&lt;td>있음&lt;/td>
&lt;td>MongoDB(~2018)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>LGPL v3&lt;/strong>&lt;/td>
&lt;td>라이브러리 링크 허용&lt;/td>
&lt;td>수정시에만 필수&lt;/td>
&lt;td>가능&lt;/td>
&lt;td>있음&lt;/td>
&lt;td>FFmpeg&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>MPL 2.0&lt;/strong>&lt;/td>
&lt;td>파일 단위 카피레프트&lt;/td>
&lt;td>수정시에만 필수&lt;/td>
&lt;td>가능&lt;/td>
&lt;td>있음&lt;/td>
&lt;td>Firefox&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Apache 2.0&lt;/strong>&lt;/td>
&lt;td>특허권 명시적 허용&lt;/td>
&lt;td>선택적&lt;/td>
&lt;td>가능&lt;/td>
&lt;td>있음&lt;/td>
&lt;td>Android, Spring&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>MIT&lt;/strong>&lt;/td>
&lt;td>가장 자유로운 라이센스&lt;/td>
&lt;td>선택적&lt;/td>
&lt;td>가능&lt;/td>
&lt;td>없음&lt;/td>
&lt;td>jQuery, Node.js&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>BSD&lt;/strong>&lt;/td>
&lt;td>MIT와 유사한 허용적 라이센스&lt;/td>
&lt;td>선택적&lt;/td>
&lt;td>가능&lt;/td>
&lt;td>없음&lt;/td>
&lt;td>PostgreSQL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Proprietary&lt;/strong>&lt;/td>
&lt;td>모든 권한 제한&lt;/td>
&lt;td>불가&lt;/td>
&lt;td>제한적&lt;/td>
&lt;td>있음&lt;/td>
&lt;td>Windows, Oracle&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>라이센스들의 주요 특징&lt;/h3>&lt;ol>
&lt;li>
&lt;p>GPL (GNU General Public License)&lt;/p>
&lt;ul>
&lt;li>가장 엄격한 카피레프트 조항을 가진 라이센스이다&lt;/li>
&lt;li>소프트웨어를 수정하거나 배포할 때 반드시 같은 라이센스로 소스코드를 공개해야 한다&lt;/li>
&lt;li>파생 저작물도 같은 GPL 라이센스를 따라야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>AGPL (Affero General Public License)&lt;/p>
&lt;ul>
&lt;li>GPL을 기반으로 하되, 네트워크 서비스에 대한 조항이 추가되었다&lt;/li>
&lt;li>네트워크를 통해 서비스를 제공할 때도 소스코드를 공개해야 한다&lt;/li>
&lt;li>클라우드 서비스에서 많이 고려되는 라이센스이다&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>LGPL (Lesser General Public License)&lt;/p>
&lt;ul>
&lt;li>GPL보다 덜 제한적인 라이센스이다.&lt;/li>
&lt;li>라이브러리를 링크하여 사용하는 경우 소스코드 공개 의무가 없다.&lt;/li>
&lt;li>라이브러리 자체를 수정할 때만 소스코드를 공개하면 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>MPL (Mozilla Public License)&lt;/p>
&lt;ul>
&lt;li>파일 단위로 카피레프트가 적용된다.&lt;/li>
&lt;li>수정한 파일만 소스코드를 공개하면 된다.&lt;/li>
&lt;li>다른 라이센스와의 호환성이 좋다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Apache License&lt;/p>
&lt;ul>
&lt;li>특허권에 대한 명시적인 허용을 포함한다.&lt;/li>
&lt;li>상업적 이용이 자유롭다.&lt;/li>
&lt;li>수정 사항에 대한 표시만 요구한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>MIT License&lt;/p>
&lt;ul>
&lt;li>가장 단순하고 자유로운 라이센스이다.&lt;/li>
&lt;li>저작권 표시와 라이센스 사본만 유지하면 된다.&lt;/li>
&lt;li>상업적 이용을 포함한 모든 사용이 자유롭다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>BSD License&lt;/p>
&lt;ul>
&lt;li>`MIT와 유사한 허용적 라이센스이다.&lt;/li>
&lt;li>원저작자의 이름을 홍보에 사용하지 못하도록 하는 조항이 있다.&lt;/li>
&lt;li>자유로운 사용과 수정이 가능하다.`&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Proprietary License&lt;/p>
&lt;ul>
&lt;li>모든 권한이 저작권자에게 있다.&lt;/li>
&lt;li>사용, 수정, 배포에 제한이 있다.&lt;/li>
&lt;li>일반적으로 유료로 라이센스가 제공된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3>라이센스 선택 시 고려해야 할 사항&lt;/h3>&lt;ol>
&lt;li>프로젝트의 목적&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>커뮤니티 중심: GPL 계열&lt;/li>
&lt;li>기업 활용도: Apache, MIT&lt;/li>
&lt;li>상업적 보호: Proprietary&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>법적 보호&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>특허권 보호 필요: Apache&lt;/li>
&lt;li>카피레프트 중요: GPL&lt;/li>
&lt;li>최소한의 제한: MIT&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>호환성&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>다른 라이센스와의 호환성&lt;/li>
&lt;li>기존 컴포넌트의 라이센스&lt;/li>
&lt;li>향후 확장 가능성&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>비즈니스 모델&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>오픈소스 기반: Apache, MIT&lt;/li>
&lt;li>듀얼 라이센스: GPL + Proprietary&lt;/li>
&lt;li>상용 제품: Proprietary&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2>참고 및 출처&lt;/h2></description></item><item><title>Quality Assurance (QA)</title><link>https://buenhyden.github.io/posts/qa/</link><pubDate>Thu, 26 Sep 2024 19:53:00 +0000</pubDate><guid>https://buenhyden.github.io/posts/qa/</guid><description>
&lt;h2>Quality Assurance (QA)&lt;/h2>&lt;p>Quality Assurance(QA)는 소프트웨어 개발 과정에서 제품의 품질을 보장하기 위한 체계적이고 계획된 모든 활동을 의미한다.&lt;br>
IEEE의 공식 정의에 따르면, QA는 &amp;ldquo;제품이나 서비스가 정의된 품질 요구사항을 충족시킬 것이라는 적절한 신뢰를 제공하기 위해 필요한 모든 계획적이고 체계적인 활동&amp;quot;이다.&lt;/p>
&lt;h3>QA의 주요 목표&lt;/h3>&lt;ol>
&lt;li>
&lt;p>품질 보증&lt;br>
소프트웨어가 요구사항을 충족하고 사용자의 기대에 부응하도록 보장한다.&lt;br>
이는 기능적 요구사항뿐만 아니라 성능, 보안, 사용성 등의 비기능적 요구사항도 포함한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>결함 예방&lt;br>
개발 초기 단계부터 품질 관리를 시작함으로써, 나중에 발견될 수 있는 심각한 문제들을 사전에 예방한다.&lt;br>
이는 시간과 비용을 절약하는 데 매우 중요하다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>프로세스 개선&lt;br>
지속적인 모니터링과 피드백을 통해 개발 프로세스 자체를 개선한다.&lt;br>
이는 장기적으로 더 나은 품질의 소프트웨어를 생산하는 데 도움이 된다..&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3>주요 특징&lt;/h3>&lt;ul>
&lt;li>예방 중심적 접근&lt;/li>
&lt;li>프로세스 기반 품질 관리&lt;/li>
&lt;li>지속적인 개선 추구&lt;/li>
&lt;li>객관적 측정과 평가&lt;/li>
&lt;li>전사적 참여와 책임&lt;/li>
&lt;/ul>
&lt;h3>중요성&lt;/h3>&lt;ul>
&lt;li>비용 효율성: 초기 결함 발견으로 인한 비용 절감&lt;/li>
&lt;li>리스크 감소: 체계적인 품질 관리를 통한 위험 최소화&lt;/li>
&lt;li>고객 만족: 높은 품질의 제품 제공&lt;/li>
&lt;li>경쟁 우위: 품질을 통한 시장 경쟁력 확보&lt;/li>
&lt;/ul>
&lt;h3>기본 원칙&lt;/h3>&lt;ul>
&lt;li>품질은 프로세스에서 만들어진다.&lt;/li>
&lt;li>예방이 발견보다 효과적이다.&lt;/li>
&lt;li>품질은 모든 구성원의 책임이다.&lt;/li>
&lt;li>지속적인 개선이 필요하다.&lt;/li>
&lt;li>객관적 증거에 기반한 의사결정이 중요하다.&lt;/li>
&lt;/ul>
&lt;h3>Quality Assurance의 주요 요소&lt;/h3>&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span class="line">&lt;span class="cl">Quality Assurance (QA)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── 품질 전략 및 계획
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── 품질 목표 설정
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── 품질 메트릭 정의
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── 위험 관리 계획
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── 품질 비용 관리
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── 프로세스 개선 계획
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── 프로세스 관리
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── 개발 방법론 선택 및 적용
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── 프로젝트 관리 프로세스
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── 변경 관리 프로세스
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── 지속적 개선 프로세스
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── 프로세스 평가 및 감사
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── 표준 및 정책
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── 코딩 표준
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── 형상 관리 정책
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── 문서화 표준
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── 보안 정책
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── 품질 측정 기준
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── 인력 및 조직 관리
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── 교육 및 훈련 프로그램
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── 역량 관리
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── 조직 문화 개선
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── 지식 관리
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── Quality Control (QC)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── 프로세스 검증
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 프로세스 준수 감사
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 품질 메트릭 측정
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 개선 활동 모니터링
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ └── 프로세스 효율성 평가
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── 산출물 검증
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 코드 리뷰
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 문서 검토
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 아키텍처 검토
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ └── 요구사항 추적성 검증
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── 기술 검증
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 정적 코드 분석
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 보안 취약점 스캔
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 성능 프로파일링
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ └── 기술 부채 관리
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── Testing
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── 테스트 관리
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 테스트 전략 수립
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 테스트 계획 수립
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 테스트 환경 관리
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ └── 테스트 자동화 전략
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── 기본 테스트
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 단위 테스트
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 통합 테스트
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 시스템 테스트
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ └── 인수 테스트
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── 특수 테스트
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 성능 테스트
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 보안 테스트
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 사용성 테스트
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ ├── 호환성 테스트
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ └── 회귀 테스트
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── 결함 관리
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── 결함 추적
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── 결함 분석
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── 재발 방지 활동
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── 품질 지표 모니터링&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h4>Quality Strategy and Planning (품질 전략 및 계획)&lt;/h4>&lt;p>품질 전략 및 계획은 조직의 품질 목표를 달성하기 위한 상위 수준의 접근 방식을 정의한다.&lt;/p>
&lt;p>주요 구성요소:&lt;/p>
&lt;ul>
&lt;li>품질 목표 설정&lt;br>
조직이 달성하고자 하는 품질의 방향과 수준을 정의하는 것으로 시작한다. 이는 비즈니스 목표와 긴밀하게 연계되어야 한다.&lt;br>
효과적인 품질 목표는 SMART 원칙을 따라야 한다:
&lt;ul>
&lt;li>Specific (구체적)&lt;/li>
&lt;li>Measurable (측정 가능한)&lt;/li>
&lt;li>Attainable (달성 가능한)&lt;/li>
&lt;li>Relevant (관련성 있는)&lt;/li>
&lt;li>Time-bound (시간 제한이 있는)&lt;br>
품질 목표는 고객 기대치, 산업 표준, 규제 요구사항을 고려하여 설정해야 한다. 목표 카테고리에는 가용성, 고객 서비스, 결함률, 내구성, 성능, 적시성 등이 포함될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>품질 메트릭 정의&lt;br>
설정된 목표의 달성 여부를 객관적으로 측정하기 위한 지표를 선정하고 측정 방법을 수립하는 과정이다.&lt;br>
크게 프로세스 메트릭과 제품 메트릭으로 나눌 수 있다. 각 메트릭에 대해서는 측정 주기, 측정 방법, 목표값, 허용 범위 등을 명확히 정의해야 한다.&lt;br>
- 프로세스 메트릭은 개발 과정의 효율성을 측정하는 지표로, 예를 들어 &amp;lsquo;결함 발견 시기&amp;rsquo;, &amp;lsquo;결함 수정 시간&amp;rsquo;, &amp;lsquo;테스트 커버리지&amp;rsquo; 등이 있다.&lt;br>
- 제품 메트릭은 소프트웨어 자체의 품질을 측정하는 지표로, &amp;lsquo;시스템 안정성&amp;rsquo;, &amp;lsquo;응답 시간&amp;rsquo;, &amp;lsquo;사용자 만족도&amp;rsquo; 등이 포함된다.&lt;/li>
&lt;li>위험 관리 계획&lt;br>
잠재적인 품질 위험을 식별하고 이에 대한 대응 전략을 수립하는 것&lt;br>
효과적인 위험 관리 프로세스는 다음 단계를 포함한다:
&lt;ol>
&lt;li>탐지: 프로젝트 요구사항 및 절차 감사&lt;/li>
&lt;li>분석 및 우선순위 지정: 잠재적 위험 영역 식별 및 우선순위 설정&lt;/li>
&lt;li>계획: 위험 해결을 위한 전략 수립&lt;/li>
&lt;li>모니터링: 위험 및 계획 지속적 점검&lt;/li>
&lt;li>수정: 오류 및 위험 요인 해결&lt;/li>
&lt;li>결론: 위험 재평가 및 계획 개선&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>품질 비용 관리&lt;br>
품질 활동에 소요되는 비용을 효과적으로 관리하는 것&lt;br>
예방 비용(Prevention Cost), 평가 비용(Appraisal Cost), 실패 비용(Failure Cost)으로 구분된다.&lt;br>
- 예방 비용은 품질 교육, 프로세스 개선, 도구 도입 등에 투자되는 비용.&lt;br>
- 평가 비용은 검토, 테스트, 품질 감사 등에 소요되는 비용.&lt;br>
- 실패 비용은 내부 실패 비용(개발 중 발견된 결함 수정)과 외부 실패 비용(출시 후 발견된 문제 해결)으로 나뉜다.&lt;/li>
&lt;li>프로세스 개선 계획&lt;br>
지속적인 품질 향상을 위한 체계적인 접근 방법을 정의한다.&lt;br>
현재의 프로세스를 분석하고 문제점을 식별하며, 개선 목표를 설정하고 실행 계획을 수립한다.&lt;/li>
&lt;/ul>
&lt;p>성공적인 실행을 위한 필요 요소:&lt;/p>
&lt;ol>
&lt;li>경영진의 확고한 지원과 commitment가 있어야 한다.&lt;br>
품질은 조직의 최우선 가치로 인식되어야 하며, 이에 따른 적절한 자원 할당이 이루어져야 한다.&lt;/li>
&lt;li>품질 활동에 대한 명확한 책임과 권한이 부여되어야 한다.&lt;br>
품질 관리자, 개발자, 테스터 등 각 역할의 책임과 권한을 명확히 정의해야 한다.&lt;/li>
&lt;li>효과적인 의사소통 체계가 구축되어야 한다.&lt;br>
품질 관련 정보가 조직 내에서 원활하게 공유되고, 이해관계자들과의 효과적인 소통이 이루어져야 한다.&lt;/li>
&lt;/ol>
&lt;h4>Process Management (프로세스 관리)&lt;/h4>&lt;p>프로세스 관리는 개발 생명주기 전반에 걸친 프로세스의 정의, 실행, 개선을 담당한다.&lt;/p>
&lt;p>핵심 활동:&lt;/p>
&lt;ul>
&lt;li>개발 방법론 선택 및 적용&lt;br>
조직의 특성과 프로젝트의 성격에 맞는 개발 방법론을 선택하고 이를 효과적으로 구현하는 과정이다.&lt;br>
프로젝트 전반에 일관되게 적용되어야 하며, 팀 구성원들에게 충분한 교육과 지원이 제공되어야 한다.&lt;/li>
&lt;li>프로젝트 관리 프로세스 정의&lt;br>
프로젝트의 계획, 실행, 모니터링, 통제를 위한 체계적인 절차를 수립하는 것이다.&lt;br>
프로젝트의 범위, 일정, 비용, 품질, 리스크 등을 관리하는 프로세스를 포함한다.&lt;/li>
&lt;li>변경 관리 프로세스 수립&lt;br>
소프트웨어 개발 과정에서 발생하는 다양한 변경사항을 체계적으로 관리하기 위한 프로세스를 정의한다.&lt;br>
코드, 문서, 환경 설정 등 모든 프로젝트 산출물의 변경을 포함한다.&lt;br>
효과적인 변경 관리를 위해서는 변경 요청의 접수, 평가, 승인, 구현, 검증, 배포의 전 과정이 명확히 정의되어야 한다.&lt;/li>
&lt;li>지속적 개선 활동 관리&lt;br>
프로세스의 성과를 지속적으로 모니터링하고 개선하는 활동이다.&lt;/li>
&lt;li>프로세스 평가 및 감사&lt;br>
정의된 프로세스가 제대로 준수되고 있는지, 그리고 의도한 효과를 달성하고 있는지를 검증하는 활동이다.&lt;/li>
&lt;/ul>
&lt;h4>Standards and Policies (표준 및 정책)&lt;/h4>&lt;p>표준 및 정책은 조직의 품질 관련 규칙과 지침을 제공한다.&lt;/p>
&lt;p>주요 요소:&lt;/p>
&lt;ul>
&lt;li>코딩 표준&lt;br>
개발팀이 일관된 방식으로 코드를 작성할 수 있도록 하는 규칙의 집합이다.&lt;br>
이는 코드의 가독성과 유지보수성을 높이는 데 매우 중요한 역할을 한다.&lt;br>
코딩 표준은 크게 세 가지 영역으로 나눌 수 있다.
&lt;ul>
&lt;li>첫째는 형식적 규칙으로, 들여쓰기, 중괄호 위치, 줄 길이 제한 등 코드의 외관과 관련된 규칙이다.&lt;/li>
&lt;li>둘째는 네이밍 규칙으로, 변수, 함수, 클래스 등의 이름 짓기 규칙을 정의한다. 예를 들어, camelCase나 snake_case 사용 여부, 약어 사용 규칙 등이 포함된다.&lt;/li>
&lt;li>셋째는 구조적 규칙으로, 함수의 크기 제한, 순환복잡도 제한, 상속 깊이 제한 등 코드의 구조와 품질에 관한 규칙이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>형상 관리 정책&lt;br>
소프트웨어의 변경사항을 체계적으로 추적하고 관리하기 위한 정책이다.&lt;br>
이는 소스 코드뿐만 아니라 문서, 설정 파일 등 모든 프로젝트 산출물에 적용된다.&lt;br>
형상 관리 정책에는 브랜치 전략이 매우 중요하다. 예를 들어, Git Flow나 Trunk Based Development와 같은 브랜치 전략을 선택하고, 각 브랜치의 용도와 수명주기를 명확히 정의해야 한다.&lt;br>
커밋 메시지 작성 규칙, 코드 리뷰 절차, 머지 요청 프로세스 등도 상세히 정의되어야 한다.&lt;br>
특히 버전 관리 체계는 매우 중요한데, Semantic Versioning(Major.Minor.Patch)과 같은 표준적인 버전 관리 체계를 도입하는 것이 좋다.&lt;/li>
&lt;li>문서화 표준&lt;br>
프로젝트와 관련된 모든 문서들이 일관된 형식과 품질을 유지할 수 있도록 하는 기준이다.&lt;br>
문서화는 크게 기술 문서와 사용자 문서로 나눌 수 있다.&lt;br>
기술 문서에는 아키텍처 문서, API 문서, 코드 주석 등이 포함된다. 각 문서 유형별로 템플릿을 정의하고, 문서에 포함되어야 할 필수 정보, 문서 작성 방법, 검토 절차 등을 명시해야 한다. 특히 API 문서의 경우, OpenAPI(Swagger)와 같은 표준 규격을 사용하여 문서를 작성하면 일관성 있는 문서 관리가 가능하다.&lt;br>
문서 버전 관리와 변경 이력 관리도 중요한 부분이다.&lt;/li>
&lt;li>보안 정책&lt;br>
소프트웨어의 보안을 보장하기 위한 규칙과 지침들을 정의한다.&lt;br>
이는 개발 단계부터 운영 단계까지 전체 소프트웨어 생명주기에 걸쳐 적용된다.&lt;br>
보안 정책은 크게 코드 보안, 인프라 보안, 데이터 보안으로 나눌 수 있다.&lt;br>
- 코드 보안에는 OWASP Top 10과 같은 보안 취약점 예방 가이드라인, 시큐어 코딩 규칙 등이 포함된다.&lt;br>
- 인프라 보안에는 접근 제어, 네트워크 보안, 로깅과 모니터링 등의 정책이 포함된다.&lt;br>
- 데이터 보안에는 데이터 암호화, 개인정보 보호, 데이터 백업과 복구 등의 정책이 포함된다.&lt;/li>
&lt;li>품질 측정 기준&lt;br>
소프트웨어의 품질을 객관적으로 평가하기 위한 기준이다.&lt;br>
정량적 기준과 정성적 기준으로 나눌 수 있다.&lt;br>
- 정량적 기준에는 코드 커버리지, 순환복잡도, 중복 코드 비율, 버그 밀도 등의 메트릭이 포함된다. 각 메트릭별로 목표값과 허용 범위를 정의하고, 이를 지속적으로 측정하고 모니터링해야 한다.&lt;br>
- 정성적 기준에는 코드 가독성, 문서 완성도, 사용자 경험 등이 포함된다. 이러한 기준들은 체크리스트나 룰셋 형태로 구체화되어야 하며, 품질 게이트(Quality Gate)를 통해 강제될 수 있다.&lt;/li>
&lt;/ul>
&lt;p>실제 개발 프로세스에 통합되어 실행되어야 한다.&lt;br>
이를 위해서는 다음과 같은 요소들이 필요하다:&lt;/p>
&lt;ol>
&lt;li>자동화 도구의 활용: 코드 분석 도구(SonarQube 등), 문서 생성 도구(JavaDoc, Swagger 등), 보안 취약점 스캐너 등을 통해 표준 준수를 자동으로 검증한다.&lt;/li>
&lt;li>CI/CD 파이프라인과의 통합: 품질 검사, 보안 검사 등을 빌드 파이프라인에 통합하여 자동화된 검증을 수행한다.&lt;/li>
&lt;li>교육과 훈련: 개발자들이 표준과 정책을 이해하고 효과적으로 적용할 수 있도록 정기적인 교육을 제공한다.&lt;/li>
&lt;li>주기적인 검토와 개선: 표준과 정책이 현실적이고 효과적인지 주기적으로 검토하고, 필요한 경우 개선한다.&lt;/li>
&lt;/ol>
&lt;h4>Personnel and Organization Management (인력 및 조직 관리)&lt;/h4>&lt;p>인력 및 조직 관리는 품질 활동을 수행하는 인적 자원의 관리와 조직 문화 형성을 담당한다.&lt;/p>
&lt;p>핵심 영역:&lt;/p>
&lt;ul>
&lt;li>교육 및 훈련 프로그램&lt;br>
직 구성원들의 전문성과 역량을 개발하기 위한 체계적인 학습 활동이다.&lt;br>
이는 크게 기술 교육과 품질 의식 교육으로 나눌 수 있다.&lt;br>
- 기술 교육에는 프로그래밍 언어, 테스트 기법, 도구 사용법 등 실무적인 기술을 습득하는 과정이 포함된다. 예를 들어, 자동화 테스트 도구 교육, 코드 리뷰 기법 교육, 성능 테스트 방법론 교육 등이 있다.&lt;br>
- 품질 의식 교육은 품질의 중요성을 이해하고 품질 중심의 사고방식을 갖추도록 하는 교육. 이는 품질 철학, 품질 비용의 이해, 프로세스 개선 방법론 등을 포함한다.&lt;/li>
&lt;li>역량 관리&lt;br>
조직 구성원들의 현재 역량을 평가하고, 필요한 역량을 개발하며, 적절한 역할에 배치하는 활동이다. 이를 위해 먼저 역량 모델을 정의해야 한다.&lt;br>
역량 모델은 각 직무에 필요한 기술적 역량(예: 테스트 설계 능력, 코드 분석 능력)과 소프트 스킬(예: 의사소통 능력, 문제해결 능력)을 정의한다.&lt;br>
이를 바탕으로 정기적인 역량 평가를 실시하고, 개인별 역량 개발 계획을 수립한다.&lt;br>
경력 개발 경로(Career Path)를 명확히 정의하여, 구성원들이 자신의 성장 방향을 설정할 수 있도록 지원한다.&lt;/li>
&lt;li>조직 문화 개선&lt;br>
품질 중심의 조직 문화를 구축하고 발전시키는 활동이다.&lt;br>
이는 단순한 구호나 제도가 아닌, 구성원들의 실제 행동과 사고방식의 변화를 목표로 한다.&lt;br>
예를 들어, &amp;lsquo;실수를 통한 학습&amp;rsquo;을 장려하는 문화를 만들어, 문제가 발생했을 때 비난하기보다는 개선 기회로 삼는 분위기를 조성한다.&lt;br>
또한 협업과 지식 공유를 촉진하는 문화를 만들어, 팀 간의 벽을 허물고 시너지를 창출한다. 이를 위해 정기적인 팀 회고(Retrospective) 미팅, 품질 개선 제안 제도, 성공 사례 공유 세션 등 다양한 활동을 진행한다.&lt;/li>
&lt;li>지식 관리&lt;br>
조직 내의 경험과 노하우를 체계적으로 수집, 정리, 공유하는 활동이다.&lt;br>
이는 개인이 가진 암묵지(Tacit Knowledge)를 조직의 형식지(Explicit Knowledge)로 전환하는 과정을 포함한다.&lt;br>
지식 관리 시스템(KMS)을 구축하여 문서, 코드, 테스트 케이스, 문제 해결 사례 등을 체계적으로 관리한다.&lt;br>
위키(Wiki)나 기술 블로그를 통해 지식을 공유하고, 멘토링 프로그램을 통해 경험이 풍부한 구성원의 노하우를 전수한다.&lt;br>
특히 중요한 것은 지식의 최신성과 정확성을 유지하는 것이다. 정기적인 내용 검토와 업데이트를 통해 지식의 품질을 관리해야 한다.&lt;/li>
&lt;/ul>
&lt;h4>Quality Control (QC)&lt;/h4>&lt;p>QC는 실제 품질 검증 활동을 수행하는 실행 단계.&lt;/p>
&lt;p>구성 요소:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>프로세스 검증:&lt;br>
정의된 개발 및 품질 프로세스가 제대로 준수되고 있는지 확인하는 활동이다.&lt;br>
- 프로세스 준수 감사는 정기적으로 수행되며, 프로세스 문서 검토, 산출물 검토, 인터뷰 등 다양한 방법을 통해 이루어진다.&lt;br>
- 품질 메트릭 측정은 프로세스의 효과성을 객관적으로 평가하기 위한 지표를 수집하고 분석하는 활동이다. 예를 들어, 결함 발견률, 테스트 커버리지, 코드 리뷰 완료율 등을 측정한다.&lt;br>
- 개선 활동 모니터링은 식별된 문제점들에 대한 개선 활동의 진행 상황을 추적하는 것이다.&lt;br>
- 프로세스 효율성 평가는 프로세스가 목표한 결과를 효율적으로 달성하고 있는지를 평가한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>산출물 검증:&lt;br>
개발 과정에서 생성되는 모든 산출물의 품질을 검증하는 활동이다.&lt;br>
- 코드 리뷰는 개발자들이 서로의 코드를 검토하여 문제점을 찾고 개선하는 활동이다. 효과적인 코드 리뷰를 위해서는 체크리스트를 활용하고, 리뷰 결과를 문서화하며, 발견된 문제점을 추적 관리해야 한다.&lt;br>
- 문서 검토는 요구사항 문서, 설계 문서, 사용자 매뉴얼 등 모든 프로젝트 문서의 정확성과 완전성을 검증한다.&lt;br>
- 아키텍처 검토는 시스템 아키텍처가 품질 속성(확장성, 성능, 보안 등)을 만족하는지 검증한다.&lt;br>
- 요구사항 추적성 검증은 요구사항이 설계, 구현, 테스트 단계에서 적절히 반영되었는지 확인한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>기술 검증:&lt;br>
소프트웨어의 기술적 품질을 검증하는 활동이다.&lt;br>
- 정적 코드 분석은 코드를 실행하지 않고 코드 자체를 분석하여 잠재적인 문제를 찾아내는 것이다. SonarQube와 같은 도구를 활용하여 코드 품질, 복잡도, 중복도 등을 분석한다.&lt;br>
- 보안 취약점 스캔은 소프트웨어의 보안 취약점을 식별하고 평가하는 활동이다. SAST(정적 분석)와 DAST(동적 분석) 도구를 활용한다.&lt;br>
- 성능 프로파일링은 시스템의 성능을 측정하고 분석하는 활동으로, 응답시간, 처리량, 리소스 사용량 등을 프로파일링 도구를 통해 측정한다.&lt;br>
- 기술 부채 관리는 향후 유지보수와 확장을 어렵게 만드는 기술적 결함을 식별하고 관리하는 활동이다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>테스팅:&lt;br>
소프트웨어의 품질을 검증하는 가장 직접적인 방법이다.&lt;br>
- 테스트 관리는 테스트 계획 수립, 테스트 케이스 설계, 테스트 환경 구축, 테스트 실행 및 결과 분석 등을 포함한다.&lt;br>
- 기본 테스트는 단위 테스트, 통합 테스트, 시스템 테스트, 인수 테스트 등 기본적인 테스트 유형을 포함한다.&lt;br>
- 특수 테스트는 성능 테스트, 보안 테스트, 사용성 테스트 등 특정 품질 속성을 검증하기 위한 전문화된 테스트를 의미한다.&lt;br>
- 결함 관리는 테스트 과정에서 발견된 결함을 기록, 추적, 분석하고 수정하는 활동이다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3>참고 및 출처&lt;/h3>&lt;p>&lt;a href="https://yozm.wishket.com/magazine/detail/920/" target="_blank" rel="noopener">초기 스타트업의 첫 QA프로세스 구축기&lt;/a>&lt;br>
&lt;a href="https://yozm.wishket.com/magazine/detail/687/" target="_blank" rel="noopener">2021년 테스트 자동화 트렌드 리포트(상)&lt;/a>&lt;br>
&lt;a href="https://yozm.wishket.com/magazine/detail/688/" target="_blank" rel="noopener">2021년 테스트 자동화 트렌드 리포트(하)&lt;/a>&lt;br>
&lt;a href="https://yozm.wishket.com/magazine/detail/206/" target="_blank" rel="noopener">&amp;lsquo;사용자 테스트&amp;rsquo;를 빠르게 도와줄 인기 소프트웨어 7가지&lt;/a>&lt;br>
&lt;a href="https://velog.io/@imkkuk/%EC%84%9C%EB%B2%84%EC%9D%98-%EC%84%B1%EB%8A%A5-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%84%EC%9A%94%EC%84%B1-%EA%B0%9C%EC%9A%94-%EA%B0%84%EB%8B%A8%ED%95%9C-%EA%B5%AC%ED%98%84" target="_blank" rel="noopener">서버의 성능 테스트 [필요성, 개요, 간단한 구현]&lt;/a>&lt;br>
&lt;a href="https://yozm.wishket.com/magazine/detail/1748/" target="_blank" rel="noopener">효율적인 JUnit 사용 방법과 유용한 팁&lt;/a>&lt;br>
&lt;a href="https://techblog.gccompany.co.kr/broswer-stack-%EC%95%8C%EC%95%84%EA%B0%80%EA%B8%B0-ec97e09b510d" target="_blank" rel="noopener">Browser Stack 알아가기&lt;/a>&lt;br>
&lt;a href="https://soojae.tistory.com/82?category=1010060" target="_blank" rel="noopener">프론트엔드에서의 Static, Unit, Integration, E2E 테스트&lt;/a>&lt;br>
&lt;a href="https://soojae.tistory.com/74" target="_blank" rel="noopener">프론트엔드 테스트 - TDD와 종류(Unit, Integration, E2E)&lt;/a>&lt;br>
&lt;a href="https://soojae.tistory.com/84?category=1010060" target="_blank" rel="noopener">프론트엔드 구현 세부 사항 테스트&lt;/a>&lt;br>
&lt;a href="https://soojae.tistory.com/83?category=1010060" target="_blank" rel="noopener">프론트엔드에서는 어떤 것을 테스트 해야 할까?&lt;/a>&lt;br>
&lt;a href="https://devocean.sk.com/search/techBoardDetail.do?ID=165090&amp;amp;boardType=" target="_blank" rel="noopener">오픈소스 웹 테스트, 자동화 라이브러리 Playwright 소개&lt;/a>&lt;br>
&lt;a href="https://devocean.sk.com/blog/techBoardDetail.do?ID=163642&amp;amp;boardType=techBlog" target="_blank" rel="noopener">테스트 자동화 - Robot Framework 소개&lt;/a>&lt;br>
&lt;a href="https://devocean.sk.com/blog/techBoardDetail.do?page=&amp;amp;boardType=undefined&amp;amp;query=&amp;amp;ID=165216&amp;amp;searchData=&amp;amp;subIndex=" target="_blank" rel="noopener">실전 탐색적 테스트&lt;/a>&lt;br>
&lt;a href="https://robotframework.org/" target="_blank" rel="noopener">ROBOT FRAME WORK&lt;/a>&lt;br>
&lt;a href="https://devocean.sk.com/blog/techBoardDetail.do?ID=159334&amp;amp;boardType=techBlog" target="_blank" rel="noopener">Sonar Cube 알아보기&lt;/a>&lt;br>
&lt;a href="https://devocean.sk.com/experts/techBoardDetail.do?ID=164237&amp;amp;boardType=experts" target="_blank" rel="noopener">부하테스터 도구 k6 퀵 스타트&lt;/a>&lt;br>
&lt;a href="https://devocean.sk.com/experts/techBoardDetail.do?ID=164303&amp;amp;boardType=experts" target="_blank" rel="noopener">[K6 성능테스트 도구 - 01] K6 http 요청 및 메트릭&lt;/a>&lt;br>
&lt;a href="https://devocean.sk.com/experts/techBoardDetail.do?ID=164306&amp;amp;boardType=experts" target="_blank" rel="noopener">[K6성능테스트 도구 - 02] Check 및 Threshold로 요청 성공 체크 및 테스트 종료하기&lt;/a>&lt;br>
&lt;a href="https://devocean.sk.com/experts/techBoardDetail.do?ID=164310&amp;amp;boardType=experts" target="_blank" rel="noopener">[K6 성능테스트 도구 - 03] K6 Options과 K6 구조 이해하기&lt;/a>&lt;br>
&lt;a href="https://devocean.sk.com/experts/techBoardDetail.do?ID=164347&amp;amp;boardType=experts" target="_blank" rel="noopener">[K6 성능테스트 도구 - 04] K6 Tag와 Group로 테스트 구별하기&lt;/a>&lt;br>
&lt;a href="https://devocean.sk.com/experts/techBoardDetail.do?ID=164358&amp;amp;boardType=experts" target="_blank" rel="noopener">[K6 성능테스트 도구 - 05] Shared iterations ＆ Per VU iterations 알아보기&lt;/a>&lt;br>
&lt;a href="https://devocean.sk.com/experts/techBoardDetail.do?ID=164374&amp;amp;boardType=experts" target="_blank" rel="noopener">[K6 성능테스트 도구 - 06] Constant Vus ＆ Ramping Vus 알아보기&lt;/a>&lt;br>
&lt;a href="https://devocean.sk.com/experts/techBoardDetail.do?ID=164527&amp;amp;boardType=experts" target="_blank" rel="noopener">[K6 성능테스트 도구 - 07] Constant arrival rate＆ Ramping arrival rate 알아보기&lt;/a>&lt;br>
&lt;a href="https://bbogle2.tistory.com/entry/TEST-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1-%EC%8B%9C-%EB%8D%94-%EB%82%AE%EC%9D%80-%EA%B2%B0%ED%95%A9%EB%8F%84%EB%A5%BC-%EA%B0%80%EC%A7%84-%EC%BD%94%EB%93%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0" target="_blank" rel="noopener">[TEST] 테스트 코드 작성 시 더 낮은 결합도를 가진 코드 만들기&lt;/a>&lt;br>
&lt;a href="https://tech.inflab.com/20230404-test-code/" target="_blank" rel="noopener">테스트 코드를 왜 그리고 어떻게 작성해야 할까?&lt;/a>&lt;br>
&lt;a href="https://tech.kakaopay.com/post/mock-test-code/" target="_blank" rel="noopener">실무에서 적용하는 테스트 코드 작성 방법과 노하우 Part 1: 효율적인 Mock Test&lt;/a>&lt;br>
[실무에서 적용하는 테스트 코드 작성 방법과 노하우 Part 2: 테스트 코드로부터 피드백 받기](&lt;a href="https://tech.kakaopay.com/post/mock-test-code-part-2/" target="_blank" rel="noopener">https://tech.kakaopay.com/post/mock-test-code-part-2/&lt;/a>&lt;br>
&lt;a href="https://dev.gmarket.com/38" target="_blank" rel="noopener">유용한 테스트 코드 작성 팁&lt;/a>&lt;br>
&lt;a href="https://corp.onda.me/post/the-types-of-software-testing" target="_blank" rel="noopener">개발자를 위한 S/W Test 개념 1편 - 소프트웨어 테스트 종류&lt;/a>&lt;br>
&lt;a href="https://corp.onda.me/post/what-is-test-driven-development-and-good-software-testing-for-devleopers" target="_blank" rel="noopener">개발자를 위한 S/W Test 개념 2편 - TDD 핵심과 개발자에게 좋은 테스트의 기준&lt;/a>&lt;br>
&lt;a href="https://tech.kakaoenterprise.com/104" target="_blank" rel="noopener">테스트는 누구나 할 수 있지만, QA는 준비된 자만이 할 수 있습니다.&lt;/a>&lt;br>
&lt;a href="https://medium.com/@lette1394/%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8F%84%EB%8C%80%EC%B2%B4-%EC%96%B4%EB%94%94%EA%B9%8C%EC%A7%80-%EC%9E%91%EC%84%B1%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C-a187eb5b1753" target="_blank" rel="noopener">단위 테스트, 도대체 어디까지 작성해야 할까?&lt;/a>&lt;br>
&lt;a href="https://techblog.gccompany.co.kr/broswer-stack-%EC%95%8C%EC%95%84%EA%B0%80%EA%B8%B0-ec97e09b510d" target="_blank" rel="noopener">Browser Stack 알아가기&lt;/a>&lt;br>
&lt;a href="https://www.whatap.io/ko/blog/145/index.html" target="_blank" rel="noopener">초보 개발자를 위한 디버깅 비법&lt;/a>&lt;br>
&lt;a href="https://www.whatap.io/ko/blog/63/index.html" target="_blank" rel="noopener">Little&amp;rsquo;s Law와 성능 테스트&lt;/a>&lt;/p></description></item></channel></rss>