<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Scalability on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/scalability/</link>
    <description>Recent content in Scalability on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.146.5</generator>
    <language>en</language>
    <lastBuildDate>Fri, 04 Apr 2025 01:16:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/scalability/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Telemetry vs. OpenTelemetry</title>
      <link>https://buenhyden.github.io/posts/system-design/telemetry/telemetry-vs-opentelemetry/</link>
      <pubDate>Fri, 04 Apr 2025 01:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/telemetry/telemetry-vs-opentelemetry/</guid>
      <description>Telemetry와 OpenTelemetry는 모두 시스템의 상태, 성능, 동작을 관찰하고 데이터를 수집하는 데 사용되지만, 그 목적과 구현 방식에서 중요한 차이점이 있다.</description>
    </item>
    <item>
      <title>Types</title>
      <link>https://buenhyden.github.io/posts/system-design/fundamentals/performance-vs-scalability/scalability/types/</link>
      <pubDate>Thu, 03 Apr 2025 15:32:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/fundamentals/performance-vs-scalability/scalability/types/</guid>
      <description>트래픽 증가나 데이터 처리량이 급증할 때 적절한 확장 전략을 선택하는 것은 시스템의 성공적인 운영에 핵심적인 역할을 한다.</description>
    </item>
    <item>
      <title>Circuit Breaker</title>
      <link>https://buenhyden.github.io/posts/system-design/migration-strategies/circuit-breaker/</link>
      <pubDate>Tue, 01 Apr 2025 15:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/migration-strategies/circuit-breaker/</guid>
      <description>소프트웨어 서킷 브레이커는 장애가 발생한 서비스에 대한 호출을 일시적으로 중단하여 시스템 전체의 안정성을 보호한다.</description>
    </item>
    <item>
      <title>Load Shifting</title>
      <link>https://buenhyden.github.io/posts/system-design/migration-strategies/load-shifting/</link>
      <pubDate>Tue, 01 Apr 2025 15:17:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/migration-strategies/load-shifting/</guid>
      <description>로드 시프팅은 시스템 부하를 효율적으로 관리하는 전략으로, 피크 시간대의 작업 부하를 비피크 시간대로 이동시켜 자원 활용을 최적화하는 방법이다.</description>
    </item>
    <item>
      <title>Backpressure</title>
      <link>https://buenhyden.github.io/posts/system-design/migration-strategies/backpressure/</link>
      <pubDate>Tue, 01 Apr 2025 15:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/migration-strategies/backpressure/</guid>
      <description>**Backpressure**는 데이터 처리 시스템에서 수신 측이 송신 측에게 자신의 처리 용량을 알려 데이터 흐름을 제어하는 메커니즘이다.</description>
    </item>
    <item>
      <title>Graceful Degradation</title>
      <link>https://buenhyden.github.io/posts/system-design/migration-strategies/graceful-degradation/</link>
      <pubDate>Tue, 01 Apr 2025 15:16:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/migration-strategies/graceful-degradation/</guid>
      <description>그레이스풀 디그레이데이션은 시스템의 일부 구성 요소나 기능이 사용 불가능해도 기본 기능을 계속 유지할 수 있도록 하는 설계 원칙이다.</description>
    </item>
    <item>
      <title>Instrumentation</title>
      <link>https://buenhyden.github.io/posts/devops/monitoring-and-observability/observability/instrumentation/</link>
      <pubDate>Sat, 22 Mar 2025 14:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/monitoring-and-observability/observability/instrumentation/</guid>
      <description>애플리케이션 코드에 특정 로직을 추가하여 메트릭, 로그, 트레이스와 같은 데이터를 수집하고 분석할 수 있도록 만드는 과정이다</description>
    </item>
    <item>
      <title>Instrumentation</title>
      <link>https://buenhyden.github.io/posts/system-design/observability/instrumentation/</link>
      <pubDate>Sat, 22 Mar 2025 14:35:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/observability/instrumentation/</guid>
      <description>애플리케이션 코드에 특정 로직을 추가하여 메트릭, 로그, 트레이스와 같은 데이터를 수집하고 분석할 수 있도록 만드는 과정이다</description>
    </item>
    <item>
      <title>Observability vs. Monitoring</title>
      <link>https://buenhyden.github.io/posts/devops/monitoring-and-observability/observability/observability-vs-monitoring/</link>
      <pubDate>Sat, 28 Sep 2024 08:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/monitoring-and-observability/observability/observability-vs-monitoring/</guid>
      <description>Observability는 시스템의 내부 상태를 외부 출력을 통해 이해하고 추론할 수 있는 능력을 말하고, Monitoring은 시스템의 동작과 성능을 지속적으로 관찰하고 추적하는 활동을 말한다.</description>
    </item>
    <item>
      <title>Observability vs. Monitoring</title>
      <link>https://buenhyden.github.io/posts/system-design/observability/observability-vs-monitoring/</link>
      <pubDate>Sat, 28 Sep 2024 08:23:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/observability/observability-vs-monitoring/</guid>
      <description>Observability는 시스템의 내부 상태를 외부 출력을 통해 이해하고 추론할 수 있는 능력을 말하고, Monitoring은 시스템의 동작과 성능을 지속적으로 관찰하고 추적하는 활동을 말한다.</description>
    </item>
    <item>
      <title>Metric</title>
      <link>https://buenhyden.github.io/posts/system-design/components/metric/</link>
      <pubDate>Sat, 28 Sep 2024 02:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/components/metric/</guid>
      <description>Metric는 시스템의 상태, 동작, 성능 등을 나타내는 수치화된 측정값</description>
    </item>
    <item>
      <title>Trace</title>
      <link>https://buenhyden.github.io/posts/system-design/components/trace/</link>
      <pubDate>Sat, 28 Sep 2024 02:27:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/components/trace/</guid>
      <description>분산 시스템에서 요청이나 트랜잭션이 여러 서비스와 컴포넌트를 통과하는 전체 여정을 기록한 것</description>
    </item>
    <item>
      <title>Log</title>
      <link>https://buenhyden.github.io/posts/system-design/components/log/</link>
      <pubDate>Sat, 28 Sep 2024 02:26:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/components/log/</guid>
      <description>Log는 애플리케이션 실행 시 생성되는 텍스트 기반의 기록이다. 이는 구조화된 형식(예: JSON)이나 비구조화된 텍스트 형식으로 제공될 수 있다.</description>
    </item>
    <item>
      <title>Observability</title>
      <link>https://buenhyden.github.io/posts/devops/monitoring-and-observability/observability/</link>
      <pubDate>Sat, 28 Sep 2024 02:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/devops/monitoring-and-observability/observability/</guid>
      <description>현대 소프트웨어 개발과 운영에서 필수적인 개념으로, 시스템의 외부 출력(메트릭, 로그, 트레이스 등)을 통해 내부 상태를 이해하고 모니터링하는 능력을 의미한다.</description>
    </item>
    <item>
      <title>Observability</title>
      <link>https://buenhyden.github.io/posts/system-design/observability/</link>
      <pubDate>Sat, 28 Sep 2024 02:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/system-design/observability/</guid>
      <description>현대 소프트웨어 개발과 운영에서 필수적인 개념으로, 시스템의 외부 출력(메트릭, 로그, 트레이스 등)을 통해 내부 상태를 이해하고 모니터링하는 능력을 의미한다.</description>
    </item>
  </channel>
</rss>
