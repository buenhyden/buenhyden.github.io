<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Creational on hyunyoun&#39;s Blog</title>
    <link>https://buenhyden.github.io/categories/creational/</link>
    <description>Recent content in Creational on hyunyoun&#39;s Blog</description>
    <image>
      <title>hyunyoun&#39;s Blog</title>
      <url>https://buenhyden.github.io/images</url>
      <link>https://buenhyden.github.io/images</link>
    </image>
    <generator>Hugo -- 0.150.1</generator>
    <language>en</language>
    <lastBuildDate>Wed, 25 Sep 2024 18:21:00 +0000</lastBuildDate>
    <atom:link href="https://buenhyden.github.io/categories/creational/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Factory Method Pattern</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/factory-method-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 18:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/factory-method-pattern/</guid>
      <description>Factory Method Pattern 은 객체 생성을 위한 인터페이스를 정의하되, 어떤 클래스를 인스턴스화할지는 서브클래스가 결정하도록 하는 생성 패턴이다. 클라이언트 코드와 구체적인 제품 클래스 간의 결합도를 낮추고, 상속을 통해 객체 생성의 책임을 서브클래스에 위임하여 확장성과 유지보수성을 향상시킨다.</description>
    </item>
    <item>
      <title>Singleton Pattern</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/singleton-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 18:21:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/singleton-pattern/</guid>
      <description>Singleton 패턴은 클래스의 인스턴스를 하나만 생성하고, 어디서든 이 인스턴스를 공유하도록 보장하는 패턴이다. 전역 상태 관리, 설정 객체, 로깅, 캐시 등에서 활용되며, thread-safe 구현이 핵심이다.</description>
    </item>
    <item>
      <title>Abstract Factory Pattern</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/abstract-factory-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/abstract-factory-pattern/</guid>
      <description>Abstract Factory Pattern 은 관련된 객체들의 패밀리를 구체적인 클래스를 명시하지 않고 생성할 수 있게 하는 생성형 디자인 패턴이다. 제품군의 일관성을 보장하며, 시스템의 독립성과 확장성을 제공하여 다양한 플랫폼이나 환경에서 동일한 인터페이스로 서로 다른 구현체를 생성할 수 있게 한다.</description>
    </item>
    <item>
      <title>Builder Pattern</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/builder-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/builder-pattern/</guid>
      <description>빌더 패턴은 복잡한 객체를 단계별로 생성하며, 생성 과정과 표현 방법을 분리해 다양한 조합의 객체 생성을 유연하게 지원하는 생성 패턴이다. 매개변수가 많거나 생성 절차가 복잡한 객체에 효과적이며, 코드 가독성, 유지보수성, 불변성 보장에 유리하다.</description>
    </item>
    <item>
      <title>Prototype Pattern</title>
      <link>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/prototype-pattern/</link>
      <pubDate>Wed, 25 Sep 2024 06:09:00 +0000</pubDate>
      <guid>https://buenhyden.github.io/posts/software-development--engineering/fundamentals/programming-principles/design-patterns/gof/creational/prototype-pattern/</guid>
      <description>Prototype 패턴은 객체 생성 비용이 높거나 런타임에 객체 유형이 동적으로 결정될 때 기존 인스턴스를 복제 (clone) 해 새 객체를 만드는 Creational 패턴이다. 클라이언트는 구체 클래스에 의존하지 않고 인터페이스 기반 clone 메서드를 통해 객체를 생성해 유연성과 성능을 개선한다.</description>
    </item>
  </channel>
</rss>
